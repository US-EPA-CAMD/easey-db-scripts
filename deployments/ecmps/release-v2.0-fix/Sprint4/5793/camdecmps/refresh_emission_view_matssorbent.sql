CREATE OR REPLACE PROCEDURE camdecmps.refresh_emission_view_matssorbent(IN vmonplanid character varying, IN vrptperiodid numeric)
 LANGUAGE plpgsql
AS $procedure$
BEGIN
	CALL camdecmps.load_temp_hourly_test_errors(vMonPlanId, vRptPeriodId);
 	CALL camdecmps.load_temp_hour_rules(vMonPlanId, vRptPeriodId);

	DELETE FROM camdecmps.EMISSION_VIEW_MATSSORBENT
	WHERE MON_PLAN_ID = vmonplanid AND RPT_PERIOD_ID = vrptperiodid;

	-- Use a common table expression for clarity to get the max and min component identifiers
	WITH train (
		TRAP_ID,
		COMPONENT_ID,
		COMPONENT_IDENTIFIER,
		SORBENT_TRAP_SERIAL_NUMBER,
		MAIN_TRAP_HG,
		BREAKTHROUGH_TRAP_HG,
		SPIKE_TRAP_HG,
		SPIKE_REF_VALUE,
		TOTAL_SAMPLE_VOLUME,
		REF_FLOW_TO_SAMPLING_RATIO,
		HG_CONCENTRATION,
		PERCENT_BREAKTHROUGH,
		PERCENT_SPIKE_RECOVERY,
		SAMPLING_RATIO_TEST_RESULT_CD,
		POST_LEAK_TEST_RESULT_CD,
		TRAIN_QA_STATUS_CD,
		SAMPLE_DAMAGE_EXPLANATION
	) AS (
		SELECT TRAP_ID,
			st.COMPONENT_ID,
			COMPONENT_IDENTIFIER, 
			SORBENT_TRAP_SERIAL_NUMBER, 
			MAIN_TRAP_HG, 
			BREAKTHROUGH_TRAP_HG,
			SPIKE_TRAP_HG,
			SPIKE_REF_VALUE,
			TOTAL_SAMPLE_VOLUME,
			REF_FLOW_TO_SAMPLING_RATIO,
			HG_CONCENTRATION,
			PERCENT_BREAKTHROUGH,
			PERCENT_SPIKE_RECOVERY,
			SAMPLING_RATIO_TEST_RESULT_CD,
			POST_LEAK_TEST_RESULT_CD,
			TRAIN_QA_STATUS_CD,
			SAMPLE_DAMAGE_EXPLANATION
		FROM camdecmps.SAMPLING_TRAIN st
		JOIN camdecmps.MONITOR_PLAN_LOCATION mpl 
			ON st.mon_loc_id=mpl.MON_LOC_ID
		JOIN camdecmps.COMPONENT C 
			ON C.COMPONENT_ID = st.COMPONENT_ID
		WHERE mpl.MON_PLAN_ID=vmonplanid AND st.RPT_PERIOD_ID=vrptperiodid
	)
	INSERT INTO camdecmps.EMISSION_VIEW_MATSSORBENT(
		MON_PLAN_ID,
		MON_LOC_ID,
		RPT_PERIOD_ID,
		SYSTEM_IDENTIFIER,
		date_hour,
		end_date_time,
		PAIRED_TRAP_AGREEMENT,
		ABSOLUTE_DIFFERENCE_IND,
		MODC_CD,
		HG_CONCENTRATION,
		RATA_IND,
		SORBENT_TRAP_APS_CD,
		A_COMPONENT_ID,
		A_SORBENT_TRAP_SERIAL_NUMBER,
		A_MAIN_TRAP_HG,
		A_BREAKTHROUGH_TRAP_HG,
		A_SPIKE_TRAP_HG,
		A_SPIKE_REF_VALUE,
		A_TOTAL_SAMPLE_VOLUME,
		A_REF_FLOW_TO_SAMPLING_RATIO,
		A_HG_CONCENTRATION,
		A_PERCENT_BREAKTHROUGH,
		A_PERCENT_SPIKE_RECOVERY,
		A_SAMPLING_RATIO_TEST_RESULT_CD,
		A_POST_LEAK_TEST_RESULT_CD,
		A_TRAIN_QA_STATUS_CD,
		A_SAMPLE_DAMAGE_EXPLANATION,
		B_COMPONENT_ID,
		B_SORBENT_TRAP_SERIAL_NUMBER,
		B_MAIN_TRAP_HG,
		B_BREAKTHROUGH_TRAP_HG,
		B_SPIKE_TRAP_HG,
		B_SPIKE_REF_VALUE,
		B_TOTAL_SAMPLE_VOLUME,
		B_REF_FLOW_TO_SAMPLING_RATIO,
		B_HG_CONCENTRATION,
		B_PERCENT_BREAKTHROUGH,
		B_PERCENT_SPIKE_RECOVERY,
		B_SAMPLING_RATIO_TEST_RESULT_CD,
		B_POST_LEAK_TEST_RESULT_CD,
		B_TRAIN_QA_STATUS_CD,
		B_SAMPLE_DAMAGE_EXPLANATION,
		ERROR_CODES
	)
	SELECT DISTINCT
		ts.MON_PLAN_ID,
		ts.MON_LOC_ID,
		ts.RPT_PERIOD_ID,
		s.SYSTEM_IDENTIFIER,
		camdecmps.format_date_hour(trp.BEGIN_DATE, trp.BEGIN_HOUR, null) AS DATE_HOUR,
		camdecmps.format_date_hour(trp.END_DATE, trp.END_HOUR, null) AS end_date_time,
		trp.PAIRED_TRAP_AGREEMENT,
		trp.ABSOLUTE_DIFFERENCE_IND,
		trp.MODC_CD,
		trp.HG_CONCENTRATION,
		trp.RATA_IND,
		trp.SORBENT_TRAP_APS_CD,
		trnA.COMPONENT_IDENTIFIER AS A_COMPONENT_ID,
		trnA.SORBENT_TRAP_SERIAL_NUMBER	AS A_SORBENT_TRAP_SERIAL_NUMBER,
		trnA.MAIN_TRAP_HG AS A_MAIN_TRAP_HG,
		trnA.BREAKTHROUGH_TRAP_HG AS A_BREAKTHROUGH_TRAP_HG,
		trnA.SPIKE_TRAP_HG AS A_SPIKE_TRAP_HG,
		trnA.SPIKE_REF_VALUE AS A_SPIKE_REF_VALUE,
		trnA.TOTAL_SAMPLE_VOLUME AS A_TOTAL_SAMPLE_VOLUME,
		trnA.REF_FLOW_TO_SAMPLING_RATIO	AS A_REF_FLOW_TO_SAMPLING_RATIO,
		trnA.HG_CONCENTRATION AS A_HG_CONCENTRATION,
		trnA.PERCENT_BREAKTHROUGH AS A_PERCENT_BREAKTHROUGH,
		trnA.PERCENT_SPIKE_RECOVERY	AS A_PERCENT_SPIKE_RECOVERY,
		trnA.SAMPLING_RATIO_TEST_RESULT_CD AS A_SAMPLING_RATIO_TEST_RESULT_CD,
		trnA.POST_LEAK_TEST_RESULT_CD AS A_POST_LEAK_TEST_RESULT_CD,
		trnA.TRAIN_QA_STATUS_CD	AS A_TRAIN_QA_STATUS_CD,
		trnA.SAMPLE_DAMAGE_EXPLANATION AS A_SAMPLE_DAMAGE_EXPLANATION,
		trnB.COMPONENT_IDENTIFIER AS B_COMPONENT_ID,
		trnB.SORBENT_TRAP_SERIAL_NUMBER	AS B_SORBENT_TRAP_SERIAL_NUMBER,
		trnB.MAIN_TRAP_HG AS B_MAIN_TRAP_HG,
		trnB.BREAKTHROUGH_TRAP_HG AS B_BREAKTHROUGH_TRAP_HG,
		trnB.SPIKE_TRAP_HG AS B_SPIKE_TRAP_HG,
		trnB.SPIKE_REF_VALUE AS B_SPIKE_REF_VALUE,
		trnB.TOTAL_SAMPLE_VOLUME AS	B_TOTAL_SAMPLE_VOLUME,
		trnB.REF_FLOW_TO_SAMPLING_RATIO	AS B_REF_FLOW_TO_SAMPLING_RATIO,
		trnB.HG_CONCENTRATION AS B_HG_CONCENTRATION,
		trnB.PERCENT_BREAKTHROUGH AS B_PERCENT_BREAKTHROUGH,
		trnB.PERCENT_SPIKE_RECOVERY	AS B_PERCENT_SPIKE_RECOVERY,
		trnB.SAMPLING_RATIO_TEST_RESULT_CD AS B_SAMPLING_RATIO_TEST_RESULT_CD,
		trnB.POST_LEAK_TEST_RESULT_CD AS B_POST_LEAK_TEST_RESULT_CD,
		trnB.TRAIN_QA_STATUS_CD	AS B_TRAIN_QA_STATUS_CD,
		trnB.SAMPLE_DAMAGE_EXPLANATION AS B_SAMPLE_DAMAGE_EXPLANATION,
		CASE 
			WHEN hr.HOUR_ID IS NULL THEN NULL
			ELSE ts.ERROR_CODES
		END AS ERROR_CODES
	FROM temp_hourly_test_errors ts
	INNER JOIN camdecmps.SORBENT_TRAP trp 
		ON ts.MON_LOC_ID=trp.MON_LOC_ID AND trp.RPT_PERIOD_ID=ts.RPT_PERIOD_ID 
		AND trp.BEGIN_DATE=ts.BEGIN_DATE AND trp.BEGIN_HOUR=ts.BEGIN_HOUR
	INNER JOIN camdecmps.MONITOR_SYSTEM s 
		ON trp.MON_SYS_ID=s.MON_SYS_ID
	LEFT OUTER JOIN temp_hour_rules hr 
		ON hr.HOUR_ID = ts.HOUR_ID
	LEFT OUTER JOIN (
		SELECT DISTINCT 
			TRAP_ID, MIN(COMPONENT_IDENTIFIER) AS ATrainID, MAX(COMPONENT_IDENTIFIER) AS BTrainID
		FROM train
		GROUP BY TRAP_ID
	) AS grouptrn ON trp.TRAP_ID=grouptrn.TRAP_ID
	LEFT OUTER JOIN train trnA 
		ON trnA.TRAP_ID=grouptrn.TRAP_ID AND trnA.COMPONENT_IDENTIFIER=grouptrn.ATrainID
	LEFT OUTER JOIN train trnB 
		ON trnB.TRAP_ID=grouptrn.TRAP_ID AND trnB.COMPONENT_IDENTIFIER=grouptrn.BTrainID;

  CALL camdecmps.refresh_emission_view_count(vmonplanid, vrptperiodid, 'MATSSORBENT');
END
$procedure$
