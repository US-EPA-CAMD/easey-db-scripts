-- FUNCTION: camdecmpsaux.get_em_submission_status(character varying, numeric, numeric)

DROP FUNCTION IF EXISTS camdecmpsaux.get_em_submission_status(character varying, numeric, numeric) CASCADE;

CREATE OR REPLACE FUNCTION camdecmpsaux.get_em_submission_status(
	inmonplanid character varying,
	incalendaryear numeric,
	inquarter numeric)
    RETURNS text
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    
AS $BODY$
DECLARE
	LENDDATE   date;
	LBEGINDATE date;
	LSTATUS    text := NULL;
	LPROGNOREP text := NULL;
	ACTIVE_PROGRAM_REC RECORD;
	ACTIVE_PROGRAM_CUR REFCURSOR;
BEGIN

    IF INQUARTER = 1 THEN
		LBEGINDATE := TO_DATE('01/01/' || INCALENDARYEAR, 'mm/dd/yyyy');
		LENDDATE   := TO_DATE('03/31/' || INCALENDARYEAR, 'mm/dd/yyyy');
	ELSIF INQUARTER = 2 THEN
		LBEGINDATE := TO_DATE('04/01/' || INCALENDARYEAR, 'mm/dd/yyyy');
		LENDDATE   := TO_DATE('06/30/' || INCALENDARYEAR, 'mm/dd/yyyy');
	ELSIF INQUARTER = 3 THEN
		LBEGINDATE := TO_DATE('07/01/' || INCALENDARYEAR, 'mm/dd/yyyy');
		LENDDATE   := TO_DATE('09/30/' || INCALENDARYEAR, 'mm/dd/yyyy');
	ELSIF INQUARTER = 4 THEN
		LBEGINDATE := TO_DATE('10/01/' || INCALENDARYEAR, 'mm/dd/yyyy');
		LENDDATE   := TO_DATE('12/31/' || INCALENDARYEAR, 'mm/dd/yyyy');
	END IF;

    OPEN ACTIVE_PROGRAM_CUR FOR
    SELECT DISTINCT
        UP.UNIT_MONITOR_CERT_BEGIN_DATE,
        UP.EMISSIONS_RECORDING_BEGIN_DATE,
        CAMDECMPSAUX.has_active_rep(UP.UP_ID) AS HASREP,
        P.PRG_CD
    FROM
        CAMD.UNIT_PROGRAM  UP
        JOIN CAMD.PROGRAM P ON UP.PRG_ID = P.PRG_ID
        JOIN CAMD.PROGRAM_PHASE PP ON P.PRG_ID = PP.PRG_ID
        JOIN CAMD.UNIT U ON UP.UNIT_ID = U.UNIT_ID
        JOIN CAMDECMPS.MONITOR_LOCATION ML ON UP.UNIT_ID = ML.UNIT_ID
        JOIN CAMDECMPS.MONITOR_PLAN_LOCATION MPL ON ML.MON_LOC_ID = MPL.MON_LOC_ID
        JOIN (
            SELECT UNIT_ID, END_DATE AS RETIRE_DATE
            FROM CAMD.UNIT_OP_STATUS
            WHERE OP_STATUS_CD = 'OPR'
                AND BEGIN_DATE <= LENDDATE
                AND (END_DATE IS NULL OR END_DATE >= LBEGINDATE)
        ) RET ON UP.UNIT_ID = RET.UNIT_ID
        LEFT JOIN CAMD.UNIT_PROGRAM OTC ON UP.UNIT_ID = OTC.UNIT_ID AND OTC.PRG_CD = 'OTC'
        LEFT JOIN CAMDECMPS.vw_unit_program_exemption UPE ON UP.UP_ID = UPE.UP_ID AND UPE.BEGIN_DATE <= LBEGINDATE AND (UPE.END_DATE IS NULL OR UPE.END_DATE >= LENDDATE)
        JOIN (
            SELECT MON_PLAN_ID, REPORT_FREQ_CD
            FROM CAMDECMPS.MONITOR_PLAN_REPORTING_FREQ MPRF
            JOIN CAMDECMPSMD.REPORTING_PERIOD BRP ON BEGIN_RPT_PERIOD_ID = BRP.RPT_PERIOD_ID
            LEFT JOIN CAMDECMPSMD.REPORTING_PERIOD ERP ON END_RPT_PERIOD_ID = ERP.RPT_PERIOD_ID AND (ERP.CALENDAR_YEAR > INCALENDARYEAR OR (ERP.CALENDAR_YEAR = INCALENDARYEAR AND ERP.QUARTER >= INQUARTER))
            WHERE BRP.CALENDAR_YEAR < INCALENDARYEAR OR (BRP.CALENDAR_YEAR = INCALENDARYEAR AND BRP.QUARTER <= INQUARTER)
        ) RF ON MPL.MON_PLAN_ID = RF.MON_PLAN_ID
    WHERE
        ((P.PRG_CD = 'ARP' AND UP.CLASS_CD = PP.PHASE) OR
        (P.PRG_CD IN ('NBP', 'NHNOX') AND OTC.UNIT_ID IS NOT NULL AND PP.PHASE = 'OTC') OR
        (P.PRG_CD IN ('NBP', 'NHNOX') AND OTC.UNIT_ID IS NULL AND COALESCE(PP.PHASE, ' ') <> 'OTC') OR
        (P.PRG_CD NOT IN ('NBP', 'NHNOX', 'ARP') AND PP.PHASE IS NULL))
        AND (PHASE_MONITOR_CERT_DEADLINE <= LENDDATE OR UP.EMISSIONS_RECORDING_BEGIN_DATE <= LENDDATE)
        AND (UP.UNIT_MONITOR_CERT_BEGIN_DATE <= LENDDATE OR UP.EMISSIONS_RECORDING_BEGIN_DATE <= LENDDATE)
        AND (UP.END_DATE IS NULL OR UP.END_DATE >= LBEGINDATE)
        AND UPE.UP_ID IS NULL
        AND (RET.RETIRE_DATE IS NULL OR
            ((INQUARTER <> 2 OR RF.REPORT_FREQ_CD = 'Q') AND RET.RETIRE_DATE >= LBEGINDATE) OR
            (INQUARTER = 2 AND RF.REPORT_FREQ_CD = 'OS' AND EXTRACT(YEAR FROM RET.RETIRE_DATE) = INCALENDARYEAR AND EXTRACT(MONTH FROM RET.RETIRE_DATE) >= 5))
    ORDER BY P.PRG_CD;

    FETCH ACTIVE_PROGRAM_CUR INTO ACTIVE_PROGRAM_REC;
    IF NOT FOUND THEN
        LSTATUS := NULL;
    ELSE
        LSTATUS := NULL;
        LOOP
            IF (ACTIVE_PROGRAM_REC.EMISSIONS_RECORDING_BEGIN_DATE IS NOT NULL AND
                ACTIVE_PROGRAM_REC.EMISSIONS_RECORDING_BEGIN_DATE <= LENDDATE) OR
            (ACTIVE_PROGRAM_REC.EMISSIONS_RECORDING_BEGIN_DATE IS NULL AND
                ACTIVE_PROGRAM_REC.UNIT_MONITOR_CERT_BEGIN_DATE + INTERVAL '180 days' <= LENDDATE) THEN
                LSTATUS := 'REQUIRE';
                IF ACTIVE_PROGRAM_REC.HASREP = 'F' THEN
                    IF LPROGNOREP IS NULL THEN
                        LPROGNOREP := ACTIVE_PROGRAM_REC.PRG_CD;
                    ELSE
                        LPROGNOREP := LPROGNOREP || ',' || ACTIVE_PROGRAM_REC.PRG_CD;
                    END IF;
                END IF;
            ELSE
                IF ACTIVE_PROGRAM_REC.EMISSIONS_RECORDING_BEGIN_DATE IS NULL THEN
                    LSTATUS := 'GRANTED';
                    IF ACTIVE_PROGRAM_REC.HASREP = 'F' THEN
                        IF LPROGNOREP IS NULL THEN
                            LPROGNOREP := ACTIVE_PROGRAM_REC.PRG_CD;
                        ELSE
                            LPROGNOREP := LPROGNOREP || ',' || ACTIVE_PROGRAM_REC.PRG_CD;
                        END IF;
                    END IF;
                END IF;
            END IF;
            FETCH ACTIVE_PROGRAM_CUR INTO ACTIVE_PROGRAM_REC;
            EXIT WHEN NOT FOUND;
        END LOOP;
    END IF;
    CLOSE ACTIVE_PROGRAM_CUR;

    IF LPROGNOREP IS NOT NULL AND LSTATUS IS NOT NULL THEN
        -- Remove duplicate program codes from the list and append to the status
        LPROGNOREP := RTRIM(REGEXP_REPLACE(LPROGNOREP, '([^,]*)(,\1)+($|,)', '\1\3'), ',');
        LSTATUS := LSTATUS || ';' || LPROGNOREP;
    END IF;

    RETURN LSTATUS;

End;
$BODY$;
