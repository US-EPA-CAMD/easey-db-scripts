<?xml version="1.0" encoding="UTF-8"?>
<tree>
    <complex-attributes>
        <type name="materialized-view">
            <attr name="sql"></attr>
        </type>
        <type name="metadata">
            <attr name="vendor-engine"></attr>
        </type>
        <type name="view">
            <attr name="sql"></attr>
        </type>
        <type name="function">
            <attr name="sql"></attr>
        </type>
        <type name="constraint">
            <attr name="check-clause"></attr>
        </type>
        <type name="trigger">
            <attr name="trigger-definition"></attr>
            <attr name="comment"></attr>
            <attr name="sql"></attr>
        </type>
        <type name="procedure">
            <attr name="sql"></attr>
        </type>
    </complex-attributes>
    <metadata _I_D="0794f4bc-c997-4483-9c43-2f1736ca5e10" vendor="POSTGRESQL" nonquoted-case="lower" allow-similarly-named-objects="y" quoted-case="specified" name="uImcwuf4K9dyaxeL@localhost:15210/cgawsbrokerprodr97macy19l" product-version="12.3.0.0" vendor-engine-version="12.3" last-update-tree="2022-04-12 13:27:25" max-identifier-length="63">
        <complex-attribute name="vendor-engine"><![CDATA[PostgreSQL 12.3 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11), 64-bit]]></complex-attribute>
        <category _I_D="1100122a-b4ac-42fe-93cb-fcaef5b5a62c" name="Schemas" order-num="0" objects-loading="extended" subcategories-loading="none" child-type="schema">
            <schema _I_D="8c02c458-dc9a-4b3c-a09c-1a58cf3612ad" name="aws_oracle_context" context="aws_oracle_context" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="0124a431-9e97-4dc1-879a-66bbfb9c85b0" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="fd7b21c5-2e67-458d-b95c-76c0a81e948a" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="0b03bd65-3cd9-4751-a2ed-14320b249fb4" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="a18422a1-1763-483e-ae69-689127a93c6a" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="b3a665bf-f62d-484a-bd0f-2723e48e4ee9" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="b493933c-628e-4179-89c7-413295f62ed0" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="083bb206-b418-4667-9cff-f30317e60573" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="56af47cd-4dd3-4dd1-b1fb-20a3360405d1" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="b0407c0d-0b21-4b54-aaa4-98d33fdbeaa4" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="499c9f53-8f2d-4735-a4be-6d64cfeb7930" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="777b1f32-b932-472c-b264-13287f9d0c81" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="5511c83b-f4eb-43cd-a1ac-c6659b749b52" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="0bad75c5-73e9-42db-b2e6-89a2427e26c0" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="d6940164-9f15-42e4-be16-8aefed4dc976" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="a4e136cc-6c83-4fbf-a36d-5c4079e4ce7c" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="d0990a54-961a-4be2-aeb9-1a8c21e507ce" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="e6ceb81a-1188-484b-86bd-b0edfc631b80" name="aws_oracle_data" context="aws_oracle_data" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="a7c2aabc-e83d-49ab-8c02-f5f16768dc0f" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="b0257dc7-cf92-4017-b9d1-3f859c0fd920" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="0555b288-5651-4c6a-bd78-2a43f1386507" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="b0b6d1ed-ab4d-4922-9601-bbea67786496" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="dd110976-5a6d-478e-9b57-9949b81e0b36" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="3fffa8cf-bbf3-4700-a4a8-ea65f2c5548f" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="e414692d-ab45-4f46-832a-825bba66cf64" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="1340ee37-fa7e-4e22-9088-b2b7b87550dd" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="7a9acaea-530a-4db2-b7b0-ff574c067c04" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="01f8a447-a941-4557-9c54-90cbd29b9add" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="35f5479b-f8ac-4d93-b238-97dab7e8e8ab" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="612bf218-75d9-4719-a11d-f54f9a5879e2" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="f9db8155-089f-4313-882d-effbd42be153" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="1f7889a6-0b22-4be0-a747-e0ec198392b1" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="1f711d56-e7cc-4b2f-98df-5f77f85fdf02" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="2fba4cf0-0731-4122-8a18-e042f42be33f" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="037c7873-2ecd-4723-a259-1ca199e5993a" name="aws_oracle_ext" is-empty="N" context="aws_oracle_ext" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL" is-system="N">
                <category _I_D="1552d18c-bd01-492e-9931-73a242ca466c" name="Tables" order-num="0" objects-loading="extended" subcategories-loading="none" child-type="table">
                    <table _I_D="0282832c-5481-4062-9732-d9b7dfc54796" name="charset_mapping" context="charset_mapping" subcategories-loading="none" object-loading="extended" is-typed="NO" comment="Oracle - PostgreSQL Charset mapping" partitioned="NO" is-unlogged="NO">
                        <category _I_D="ac674245-3a2a-4c25-a2ce-3b72aea4cd50" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b595f64a-7d61-4851-ac0d-884f92185639" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ed5c637f-3e5d-410c-aee5-a4e05fbd5a35" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="964bc4f5-78fc-4854-8c3e-ea983b7bce47" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="2d1bd2bd-2129-42da-a191-c6b26ec3174c" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="f1aa1975-7c2f-4939-a725-ead016a12a09" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="a339317b-18a9-447a-9459-46a5928552c7" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="69f194bb-84f3-4e52-9203-fc508f891abd" name="directory" context="directory" subcategories-loading="none" object-loading="extended" is-typed="NO" partitioned="NO" is-unlogged="NO">
                        <category _I_D="1cd47636-3549-4c3e-b8e7-b61c4a62ce27" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d4a45ac3-f25a-49b2-8bc5-7af719b94a67" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8472f49a-f9b8-478e-9571-c1c1e38c515a" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="01f7ed1f-759c-46b3-880d-24fbc9a319d8" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="de3256e3-7622-4242-afa2-aa5ff1b2bee3" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="daf72f3d-6dc8-402b-8169-0c83bcae225f" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="b248706b-2521-4f08-91a2-a3f3b8c7ea42" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="75e9b931-c111-4884-8f07-b2e6543e1d54" name="format_models" context="format_models" subcategories-loading="none" object-loading="extended" is-typed="NO" comment="Possible format models for to_char from Oracle" partitioned="NO" is-unlogged="NO">
                        <category _I_D="fd30f5af-144c-4498-8ff2-af5c08571675" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9748b42e-92c2-4334-ac23-716d6fee2b17" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="efa0cac9-a52b-40c5-a4c4-ccd572e2cebe" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8364ed84-8e97-4d3c-b56c-1be7306632c7" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="bfade742-3b26-48c6-8f23-f1b42a6b610f" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="65312961-0482-47ab-988e-1821e0f3a27f" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="2670497d-f1e6-4510-b655-d05e85beee01" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="4620cb06-43db-45fa-902e-4a762cf26caa" name="iso_currency_list" context="iso_currency_list" subcategories-loading="none" object-loading="extended" is-typed="NO" partitioned="NO" is-unlogged="NO">
                        <category _I_D="42a1b831-adc8-4950-9f7f-85e5e2565c75" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ff519e8b-814c-430b-a24c-405df963f66a" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="95055e59-58ac-464e-aad1-59f23f7d41e4" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9d5a3b70-5293-4a99-88e8-eb8ac01041e3" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="592447d7-5ba6-4669-9250-e0412f231b2c" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="40649fe9-842d-46bf-8bac-105ef337f8e7" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="d8cea719-f75d-4f6d-a295-780395b2a623" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="6424ca89-2f8b-4317-b092-b81f6e486687" name="jobs" context="jobs" subcategories-loading="none" object-loading="extended" is-typed="NO" comment="Jobs to be executed periodically" partitioned="NO" is-unlogged="NO">
                        <category _I_D="16ff8322-5afb-44da-a770-1f99d41f2ef3" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cf399abb-8d91-4f81-a543-533bdfced982" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a66e4f4b-2760-4741-ac3e-7808a0a5478e" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="135bc83d-1c88-4bf3-b4f0-d6ac1f1a84b9" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="ba34929a-f989-40c6-85e0-f2a4ededfcc1" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="fe59b8e7-9cf3-4a1d-9727-66d494d3eb1b" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="3015e34f-e64e-4e47-9e5d-cc0a71d3d789" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="a7b984b2-2824-4764-a6ae-03d3cbec9373" name="mail_messages" context="mail_messages" subcategories-loading="none" object-loading="extended" is-typed="NO" comment="Mail messages with their statuses" partitioned="NO" is-unlogged="NO">
                        <category _I_D="6b3dabee-2d00-4fd5-9eb7-4ea4181d3b94" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e7a4ef9f-774c-417d-a998-3d2a356d5509" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6f53a2cf-de6f-4273-8245-5418b227a7f8" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8114be3a-2ad7-44f6-964a-816817ecfd68" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="f02b7955-7104-4c1b-89b0-59a06855725d" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="985810aa-10e4-4574-8403-def5e5b872fe" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="d1ffe0c6-a240-4c7b-8a2e-283ec248a9d2" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="450b100b-177b-4963-be66-74907e4b7d77" name="mapped_error_codes" context="mapped_error_codes" subcategories-loading="none" object-loading="extended" is-typed="NO" comment="Error code mapping from Oracle built-in errors to PostgreSQL ones" partitioned="NO" is-unlogged="NO">
                        <category _I_D="a8f5709d-db4c-4e37-9b27-8407d916ab47" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c2674497-628f-4b3a-a080-281db92fbb1a" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="49025b57-26dd-46d1-9c56-a9f601d5032f" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="243a6506-30a6-4fae-bedd-118ea7d877a5" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="9a439d23-1740-4038-baf1-866f58810956" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="2c683908-805a-4419-b09c-62207004176e" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="cf8c7934-01c7-403a-bdb1-0fa863cefe9d" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="1973a5b3-53d3-43bf-95f7-36e87cb1c7bc" name="nls_parameters" context="nls_parameters" subcategories-loading="none" object-loading="extended" is-typed="NO" comment="Dictionary to store NLS related params transfered from Oracle" partitioned="NO" is-unlogged="NO">
                        <category _I_D="1f9289b4-bdb8-45f1-9799-3478f148c652" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6e983519-cd8d-4523-813b-637f9e793660" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ff70b3c2-35f9-4267-9a9d-8edd861250be" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f3aee87b-5831-4903-bd11-8df7f7fb2440" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="b00d8e44-463b-4c9f-9748-6810746cec96" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="c9f20c11-9af5-4323-b241-3ed845513a11" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="5f10102a-71af-47de-be39-6a97a279d9c6" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="977b2205-9bab-4c67-9929-1ebec95080a5" name="plv8_js_modules" context="plv8_js_modules" subcategories-loading="none" object-loading="extended" is-typed="NO" partitioned="NO" is-unlogged="NO">
                        <category _I_D="32c105a9-20e6-4526-9763-7f010d430592" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7150ab67-e8c7-4f12-a902-1f3a61d48208" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7dc257ea-4a06-4263-96b4-f95a0a8879e4" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4518eed6-d397-4dc5-ab71-8471e12c5ed3" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="93e7c0b7-397d-4cbf-a9e5-9246b16c7544" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="8ed856fa-a6df-4387-a081-aa1322960734" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="d08d55af-4475-4126-a9ad-e4d233521714" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="b1f10d42-b39a-4792-abf1-366b5a67d7cb" name="service_settings" context="service_settings" subcategories-loading="none" object-loading="extended" is-typed="NO" comment="Settings for Extension Pack services" partitioned="NO" is-unlogged="NO">
                        <category _I_D="258c79d0-cfa3-4afd-9423-f1f358717d62" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="253ed198-4af8-412b-906f-c6a6607f9737" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2df9d08e-15fd-4fab-b1b4-1e6c27d2a93c" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fa030271-9299-45fe-a1b5-26f0b68987c7" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="08de68c2-d8e1-4d82-af51-01d85513092d" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="bcf7d340-b2aa-43b9-916d-997be1f2e343" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e0003b4e-9622-4810-bd12-70513bb25eed" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="475f5189-97fd-49b1-9346-5b3dc1fbb12b" name="sqs_functions_settings" context="sqs_functions_settings" subcategories-loading="none" object-loading="extended" is-typed="NO" partitioned="NO" is-unlogged="NO">
                        <category _I_D="ebd99d9d-e866-45c3-9482-5321aa7c0805" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6878a3da-5e76-420b-a4f6-57e7e53820d5" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="69af7bd8-4b66-481d-8614-64b851c41447" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c5f71130-8a15-4e96-9fec-425c3450fe11" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="f8557c5d-531d-41fb-b0aa-17382bab30f3" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="8f9da5a1-b52f-4663-ad04-0724a8048109" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="02256864-3987-4694-860d-85981a535c19" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f82bb21e-f591-43ea-b065-46dfb7750f86" name="sqs_queues_settings" context="sqs_queues_settings" subcategories-loading="none" object-loading="extended" is-typed="NO" partitioned="NO" is-unlogged="NO">
                        <category _I_D="23ebb3ef-0a7f-49f3-9712-2c5caf04457b" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a1116408-e86d-4a42-b9e5-a07d0354531d" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cd7ca768-70fc-4eb7-acb9-c89a395b2db2" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f14a900a-fb92-4421-a93c-c351077da10f" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="9958c59c-dca0-4d8b-9488-db1a526a156d" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="3188f718-2d80-40f5-8da8-01473fbe2ead" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="852effb6-172f-477e-8bf8-d29611b2c790" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="b4400cfe-5eef-46e5-9e36-f96991ec35db" name="sqs_queues_tables" context="sqs_queues_tables" subcategories-loading="none" object-loading="extended" is-typed="NO" partitioned="NO" is-unlogged="NO">
                        <category _I_D="599e0b10-3db7-456f-a9ff-b8aa44e8cbc8" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b1b3ee33-3af8-4142-bb7f-1fb4391b5b49" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b0df72c4-2ba7-409d-ab00-7fc8f279cbae" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="539098d0-66ee-487b-8d80-d910eda08838" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="97c3b1bd-5a4e-4ab9-bf7d-02cb5c867111" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="fd255712-445e-4bbe-bd83-fc6a75e31b55" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="3591606c-40c5-42b2-90da-2853cbc7dc94" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="9103fb9a-9e68-41ed-b3c2-82a7e65a7fc8" name="versions" context="versions" subcategories-loading="none" object-loading="extended" is-typed="NO" partitioned="NO" is-unlogged="NO">
                        <category _I_D="4ad02b01-3a62-47a5-b97a-72c867ee22ca" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fe42e308-1269-449e-a1aa-5f44991bbbb1" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a9e5ca19-dbe2-467a-b542-140daff66644" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="02f6d2db-3429-4c2a-bcc4-b5ed6e826ae6" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="fb580825-ac6c-4428-835d-306c3ba85cad" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="047cd5a6-df05-41ad-923a-65dc4a03006e" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="f342615b-cffc-43b2-bce1-de28e883c274" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                </category>
                <category _I_D="6fcdd138-861a-4627-bbe2-51a131af2325" name="Foreign tables" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="foreigntable"/>
                <category _I_D="0f65acea-840f-46e8-9f0f-00e27077cc63" name="Views" order-num="2" objects-loading="extended" subcategories-loading="none" child-type="view">
                    <view _I_D="c49d65ae-7235-47bc-96d1-88ecae4ed210" name="all_sdo_geom_metadata" context="all_sdo_geom_metadata" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="Contains metadata information for all spatial tables on which the user has SELECT permission.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (p.tableowner)::character varying(32) AS owner,
    (g.f_table_name)::character varying(32) AS table_name,
    (g.f_geometry_column)::character varying(1024) AS column_name,
    NULL::text AS diminfo,
    (g.srid)::double precision AS srid
   FROM (geometry_columns g
     LEFT JOIN pg_tables p ON (((g.f_table_schema = p.schemaname) AND (g.f_table_name = p.tablename))));]]></complex-attribute>
                        <category _I_D="5f81e85b-95fd-4e9c-a77a-5686f55e0a19" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d85086b6-5bae-4920-a5bf-156fea17d4ba" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="ff7ddabb-f29c-47d5-bf6d-76dceb039c0b" name="all_sdo_index_info" context="all_sdo_index_info" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="Contains index information for all spatial tables on which the user has SELECT permission.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (p.tableowner)::character varying(32) AS sdo_index_owner,
    (pgis.indexname)::character varying(32) AS index_name,
    (gc.f_table_schema)::character varying(30) AS table_owner,
    (pgis.tablename)::character varying(30) AS table_name,
    (gc.f_geometry_column)::character varying(2048) AS column_name,
    'rtree'::character varying(32) AS sdo_index_type,
    NULL::character varying(32) AS sdo_index_table,
    (
        CASE pgi.indisvalid
            WHEN true THEN 'valid'::text
            WHEN false THEN 'invalid'::text
            ELSE NULL::text
        END)::character varying(32) AS sdo_index_status
   FROM (((((pg_indexes pgis
     JOIN geometry_columns gc ON (((pgis.schemaname = gc.f_table_schema) AND (pgis.tablename = gc.f_table_name))))
     LEFT JOIN pg_class t ON ((t.relname = pgis.tablename)))
     LEFT JOIN pg_index pgi ON ((t.oid = pgi.indrelid)))
     LEFT JOIN pg_class c ON (((pgi.indexrelid = c.oid) AND (c.relname = pgis.indexname))))
     LEFT JOIN pg_tables p ON (((gc.f_table_schema = p.schemaname) AND (gc.f_table_name = p.tablename))));]]></complex-attribute>
                        <category _I_D="1ecb5e72-8a84-4374-b13d-de0cf3cc4994" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0a3ba5c1-d3b3-4991-b3c8-12af39b59b19" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="fc055656-8235-4e9c-bdd8-b65ddbdac7e3" name="sqs_vw_queues_settings" context="sqs_vw_queues_settings" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE">
                        <complex-attribute name="sql"><![CDATA[ SELECT s.qname,
    s.qpurename,
    s.url,
    s.arn,
    s.qtype,
    t.tschema,
    t.tname,
    t.tdatatypeschema,
    t.tdatatypename,
    concat('"', t.tschema, '"', '.', '"', t.tname, '"') AS quoted_table_name,
    concat('"', t.tdatatypeschema, '"', '.', '"', t.tdatatypename, '"') AS quoted_data_type
   FROM (aws_oracle_ext.sqs_queues_settings s
     JOIN aws_oracle_ext.sqs_queues_tables t ON ((s.tableid = t.id)));]]></complex-attribute>
                        <category _I_D="c9b0a7b8-2665-4d08-b5c0-154bd183ee92" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e804e95c-d999-4858-986d-600c018dfdcd" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="6b55e391-d814-4ed2-9280-a6e98c65135e" name="sys_all_cons_columns" context="sys_all_cons_columns" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="ALL_CONS_COLUMNS describes columns that are accessible to the current user and that are specified in constraints.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (x.cstrschema)::character varying(128) AS owner,
    (x.cstrname)::character varying(128) AS constraint_name,
    (x.tblname)::character varying(128) AS table_name,
    (x.colname)::character varying(4000) AS column_name,
    (rank() OVER (PARTITION BY x.cstrschema, x.tblname, x.cstrname ORDER BY x.colnum))::smallint AS "position"
   FROM (( SELECT DISTINCT nr.nspname,
            r.relname,
            r.relowner,
            a.attname,
            a.attnum,
            nc.nspname,
            c.conname
           FROM pg_namespace nr,
            pg_class r,
            pg_attribute a,
            pg_depend d,
            pg_namespace nc,
            pg_constraint c
          WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND (d.refclassid = ('pg_class'::regclass)::oid) AND (d.refobjid = r.oid) AND (d.refobjsubid = a.attnum) AND (d.classid = ('pg_constraint'::regclass)::oid) AND (d.objid = c.oid) AND (c.connamespace = nc.oid) AND (c.contype = 'c'::"char") AND (r.relkind = ANY (ARRAY['r'::"char", 'p'::"char"])) AND (NOT a.attisdropped))
        UNION ALL
         SELECT nr.nspname,
            r.relname,
            r.relowner,
            a.attname,
            a.attnum,
            nc.nspname,
            c.conname
           FROM pg_namespace nr,
            pg_class r,
            pg_attribute a,
            pg_namespace nc,
            pg_constraint c
          WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND (nc.oid = c.connamespace) AND (r.oid =
                CASE c.contype
                    WHEN 'f'::"char" THEN c.confrelid
                    ELSE c.conrelid
                END) AND (a.attnum = ANY (
                CASE c.contype
                    WHEN 'f'::"char" THEN c.confkey
                    ELSE c.conkey
                END)) AND (NOT a.attisdropped) AND (c.contype = ANY (ARRAY['p'::"char", 'u'::"char", 'f'::"char"])) AND (r.relkind = ANY (ARRAY['r'::"char", 'p'::"char"])))) x(tblschema, tblname, tblowner, colname, colnum, cstrschema, cstrname)
     JOIN pg_user u ON ((u.usesysid = x.tblowner)))
  WHERE ((u.usename = USER) OR has_column_privilege((x.tblname)::text, (x.colname)::text, 'SELECT,INSERT,UPDATE,REFERENCES'::text));]]></complex-attribute>
                        <category _I_D="9aa612f5-da3e-4933-9913-26aafef52914" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ef32527e-2a64-4be5-9866-851c681321a2" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="7290025e-f0b8-4fb0-a4e8-892b06f64363" name="sys_all_constraints" context="sys_all_constraints" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="ALL_CONSTRAINTS describes constraint definitions on tables accessible to the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.conname)::character varying(30) AS constraint_name,
    (c.contype)::character varying(1) AS constraint_type,
    (cl.relname)::character varying(30) AS table_name,
    pg_get_constraintdef(c.oid) AS search_condition,
    (n_ref.nspname)::character varying(30) AS r_owner,
    (c_ref.conname)::character varying(30) AS r_constraint_name,
        CASE c.confdeltype
            WHEN 'a'::"char" THEN 'no action'::character varying(9)
            WHEN 'r'::"char" THEN 'restrict'::character varying(9)
            WHEN 'c'::"char" THEN 'cascade'::character varying(9)
            WHEN 'n'::"char" THEN 'set null'::character varying(9)
            WHEN 'd'::"char" THEN 'set default'::character varying(11)
            ELSE NULL::character varying(9)
        END AS delete_rule,
    'ENABLED'::character varying(8) AS status,
        CASE
            WHEN c.condeferrable THEN 'DEFERRABLE'::character varying(14)
            ELSE 'NOT DEFERRABLE'::character varying(14)
        END AS "deferrable",
        CASE
            WHEN c.condeferred THEN 'DEFERRED'::character varying(9)
            ELSE 'IMMEDIATE'::character varying(9)
        END AS deferred,
        CASE
            WHEN c.convalidated THEN 'VALIDATED'::character varying(13)
            ELSE 'NOT VALIDATED'::character varying(13)
        END AS validated,
    'GENERATED NAME'::character varying(14) AS generated,
    NULL::character varying(3) AS bad,
    NULL::character varying(4) AS rely,
    NULL::date AS last_change,
    (n.nspname)::character varying(30) AS index_owner,
    (cl_ind.relname)::character varying(30) AS index_name,
    NULL::character varying(7) AS invalid,
    NULL::character varying(14) AS view_related
   FROM ((((((((pg_constraint c
     JOIN pg_namespace n ON ((n.oid = c.connamespace)))
     JOIN pg_class cl ON ((cl.oid = c.conrelid)))
     JOIN pg_user u ON ((cl.relowner = u.usesysid)))
     LEFT JOIN pg_class cl_ref ON ((cl_ref.oid = c.confrelid)))
     LEFT JOIN pg_namespace n_ref ON ((n_ref.oid = cl_ref.relnamespace)))
     LEFT JOIN pg_constraint c_ref ON (((c_ref.conrelid = c.confrelid) AND (c_ref.contype = 'p'::"char"))))
     LEFT JOIN pg_index i ON ((i.indrelid = cl_ref.oid)))
     LEFT JOIN pg_class cl_ind ON ((cl_ind.oid = c.conindid)))
  WHERE ((u.usename = USER) OR has_table_privilege(((quote_ident((n_ref.nspname)::text) || '.'::text) || quote_ident((cl.relname)::text)), 'SELECT,INSERT,UPDATE,DELETE,TRUNCATE,REFERENCES,TRIGGER'::text));]]></complex-attribute>
                        <category _I_D="3b2e22f4-d289-49a6-a162-ee74bb422d45" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="818ceb5d-e4c1-41c2-9089-472cd2fb3084" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="600ebc3c-6e63-4874-89c7-e207370345f1" name="sys_all_ind_columns" context="sys_all_ind_columns" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="ALL_IND_COLUMNS describes the columns of indexes on all tables accessible to the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (insp.nspname)::character varying(128) AS index_owner,
    (irel.relname)::character varying(128) AS index_name,
    (tnsp.nspname)::character varying(128) AS table_owner,
    (trel.relname)::character varying(128) AS table_name,
    (a.attname)::character varying(4000) AS column_name,
    (c.ordinality)::integer AS column_position,
    COALESCE(information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)), information_schema._pg_numeric_precision(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*))) AS column_length,
    COALESCE(information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)), 0) AS char_length,
    (
        CASE ((o.option)::integer & 1)
            WHEN 1 THEN 'DESC'::text
            ELSE 'ASC'::text
        END)::character varying(4) AS descend,
    NULL::integer AS collated_column_id
   FROM ((((((((pg_index i
     JOIN pg_class trel ON ((trel.oid = i.indrelid)))
     JOIN pg_namespace tnsp ON ((trel.relnamespace = tnsp.oid)))
     JOIN pg_class irel ON ((irel.oid = i.indexrelid)))
     JOIN pg_namespace insp ON ((irel.relnamespace = insp.oid)))
     CROSS JOIN LATERAL unnest(i.indkey) WITH ORDINALITY c(colnum, ordinality))
     LEFT JOIN LATERAL unnest(i.indoption) WITH ORDINALITY o(option, ordinality) ON ((c.ordinality = o.ordinality)))
     JOIN pg_attribute a ON (((trel.oid = a.attrelid) AND (a.attnum = c.colnum))))
     JOIN (pg_type t
     JOIN pg_namespace nt ON ((t.typnamespace = nt.oid))) ON ((a.atttypid = t.oid)))
  WHERE (pg_has_role(trel.relowner, 'USAGE'::text) OR has_table_privilege(trel.oid, 'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text));]]></complex-attribute>
                        <category _I_D="96780add-7751-4e50-9abd-056d8545e8bb" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="071bb467-493e-4683-a72b-bc6c7c15f729" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="6c818a26-ba02-46e7-93dd-78035d6b1810" name="sys_all_indexes" context="sys_all_indexes" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="ALL_INDEXES describes the indexes on the tables accessible to the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (tnsp.nspname)::character varying(128) AS owner,
    (irel.relname)::character varying(128) AS index_name,
    (
        CASE
            WHEN (i.indexprs IS NULL) THEN 'NORMAL'::text
            ELSE 'FUNCTION-BASED NORMAL'::text
        END)::character varying(27) AS index_type,
    (tnsp.nspname)::character varying(128) AS table_owner,
    (trel.relname)::character varying(128) AS table_name,
    'TABLE'::character varying(11) AS table_type,
    (
        CASE
            WHEN i.indisunique THEN 'UNIQUE'::text
            ELSE 'NONUNIQUE'::text
        END)::character varying(9) AS uniqueness,
    'DISABLED'::character varying(13) AS compression,
    NULL::integer AS prefix_length,
    (ts.spcname)::character varying(30) AS tablespace_name,
    NULL::integer AS ini_trans,
    NULL::integer AS max_trans,
    NULL::integer AS initial_extent,
    NULL::integer AS next_extent,
    NULL::integer AS min_extents,
    NULL::integer AS max_extents,
    NULL::integer AS pct_increase,
    NULL::integer AS pct_threshold,
    NULL::integer AS include_column,
    NULL::integer AS freelists,
    NULL::integer AS freelist_groups,
    NULL::integer AS pct_free,
    (
        CASE trel.relpersistence
            WHEN 'p'::"char" THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS logging,
    NULL::integer AS blevel,
    NULL::integer AS leaf_blocks,
    (
        CASE
            WHEN i.indisprimary THEN st.n_live_tup
            ELSE NULL::bigint
        END)::integer AS distinct_keys,
    NULL::integer AS avg_leaf_blocks_per_key,
    NULL::integer AS avg_data_blocks_per_key,
    NULL::integer AS clustering_factor,
    (
        CASE
            WHEN i.indisready THEN 'ENABLED'::text
            ELSE 'DISABLED'::text
        END)::character varying(8) AS status,
    (st.n_live_tup)::integer AS num_rows,
    NULL::integer AS sample_size,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::character varying(40) AS degree,
    NULL::character varying(40) AS instances,
    (
        CASE
            WHEN trel.relispartition THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS partitioned,
    (
        CASE trel.relpersistence
            WHEN 't'::"char" THEN 'Y'::text
            ELSE 'N'::text
        END)::character varying(1) AS temporary,
    'N'::character varying(1) AS generated,
    'N'::character varying(1) AS secondary,
    'DEFAULT'::character varying(7) AS buffer_pool,
    'DEFAULT'::character varying(7) AS flash_cache,
    'DEFAULT'::character varying(7) AS cell_flash_cache,
    'NO'::character varying(3) AS user_stats,
    NULL::character varying(15) AS duration,
    NULL::integer AS pct_direct_access,
    NULL::character varying(128) AS ityp_owner,
    NULL::character varying(128) AS ityp_name,
    NULL::character varying(1000) AS parameters,
    'NO'::character varying(3) AS global_stats,
    NULL::character varying(12) AS domidx_status,
    NULL::character varying(6) AS domidx_opstatus,
    NULL::character varying(8) AS funcidx_status,
    'NO'::character varying(3) AS join_index,
    'NO'::character varying(3) AS iot_redundant_pkey_elim,
    'NO'::character varying(3) AS dropped,
    (
        CASE
            WHEN i.indisvalid THEN 'VISIBLE'::text
            ELSE 'INVISIBLE'::text
        END)::character varying(9) AS visibility,
    NULL::character varying(14) AS domidx_management,
    (
        CASE irel.relpages
            WHEN 0 THEN 'NO'::text
            ELSE 'YES'::text
        END)::character varying(3) AS segment_created,
    'NO'::character varying(3) AS orphaned_entries,
    (
        CASE
            WHEN (i.indpred IS NULL) THEN 'FULL'::text
            ELSE 'PARTIAL'::text
        END)::character varying(7) AS indexing
   FROM ((((((pg_index i
     JOIN pg_class trel ON ((trel.oid = i.indrelid)))
     JOIN pg_namespace tnsp ON ((trel.relnamespace = tnsp.oid)))
     JOIN pg_class irel ON ((irel.oid = i.indexrelid)))
     JOIN pg_am am ON (((am.oid = irel.relam) AND (am.amname = 'btree'::name))))
     LEFT JOIN pg_tablespace ts ON ((ts.oid = irel.reltablespace)))
     LEFT JOIN pg_stat_all_tables st ON (((st.schemaname = tnsp.nspname) AND (st.relname = trel.relname))))
  WHERE (pg_has_role(trel.relowner, 'USAGE'::text) OR has_table_privilege(trel.oid, 'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text));]]></complex-attribute>
                        <category _I_D="b7828859-515b-48a6-b546-aa806c4ba7f3" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0782229f-9b7a-4926-95bf-82838488cc9f" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="a4bdab8c-9d1b-4097-bbba-89b8677ad447" name="sys_all_objects" context="sys_all_objects" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="The ALL_OBJECTS view describes all objects in the database that are accessible to the current user">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.relname)::character varying(30) AS object_name,
    NULL::character varying(30) AS subobject_name,
    (c.oid)::bigint AS object_id,
        CASE
            WHEN (c.relkind = ANY (ARRAY['t'::"char", 'r'::"char"])) THEN (c.oid)::bigint
            ELSE NULL::bigint
        END AS data_object_id,
        CASE c.relkind
            WHEN 'r'::"char" THEN 'ordinary table'::character varying(17)
            WHEN 'i'::"char" THEN 'index'::character varying(17)
            WHEN 'S'::"char" THEN 'sequence'::character varying(17)
            WHEN 'v'::"char" THEN 'view'::character varying(17)
            WHEN 'c'::"char" THEN 'composite type'::character varying(17)
            WHEN 't'::"char" THEN 'TOAST table'::character varying(17)
            WHEN 'f'::"char" THEN 'foreign table'::character varying(17)
            ELSE NULL::character varying(17)
        END AS object_type,
    NULL::date AS created,
    NULL::date AS last_ddl_time,
    NULL::character varying(78) AS "timestamp",
    'VALID'::character varying(7) AS status,
        CASE c.relpersistence
            WHEN 't'::"char" THEN 'Y'::text
            ELSE 'N'::text
        END AS temporary,
    'N'::character varying(1) AS generated,
    'N'::character varying(1) AS secondary,
    (c.reltablespace)::integer AS namespace,
    NULL::character varying(30) AS edition_name
   FROM ((pg_class c
     JOIN pg_namespace n ON ((c.relnamespace = n.oid)))
     JOIN pg_user u ON ((c.relowner = u.usesysid)))
  WHERE ((n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])) AND ((u.usename = USER) OR ((c.relkind = ANY (ARRAY['r'::"char", 'v'::"char"])) AND has_table_privilege(((quote_ident((n.nspname)::text) || '.'::text) || quote_ident((c.relname)::text)), 'SELECT,INSERT,UPDATE,DELETE,TRUNCATE,REFERENCES,TRIGGER'::text))));]]></complex-attribute>
                        <category _I_D="5e5163b6-b23c-4abb-94a4-0c5ce4d91ab0" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c17a27fa-d09a-4e82-ae18-14ad17edd4cb" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="76f1c86a-dad5-4f5d-9590-24d104e3dc92" name="sys_all_policies" context="sys_all_policies" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="ALL_POLICIES describes all Oracle Virtual Private Database (VPD) security policies for objects accessible to the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (p.schemaname)::character varying(128) AS object_owner,
    (p.tablename)::character varying(128) AS object_name,
    'SYS_DEFAULT'::character varying(128) AS policy_group,
    (p.policyname)::character varying(128) AS policy_name,
    (p.schemaname)::character varying(128) AS pf_owner,
    NULL::character varying(128) AS package,
    NULL::character varying(128) AS function,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'SELECT'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS sel,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'INSERT'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS ins,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'UPDATE'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS upd,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'DELETE'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS del,
    'NO'::character varying(3) AS idx,
    (
        CASE
            WHEN (p.with_check IS NOT NULL) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS chk_option,
    'YES'::character varying(3) AS enable,
    'NO'::character varying(3) AS static_policy,
    'DYNAMIC'::character varying(24) AS policy_type,
    'NO'::character varying(3) AS long_predicate,
    'NO'::character varying(3) AS common,
    'NO'::character varying(3) AS inherited
   FROM ((pg_policies p
     JOIN pg_tables t ON (((t.schemaname = p.schemaname) AND (t.tablename = p.tablename))))
     JOIN pg_user u ON ((u.usename = t.tableowner)))
  WHERE (pg_has_role(t.tableowner, 'USAGE'::text) OR has_table_privilege(u.usesysid, 'SELECT, INSERT, UPDATE, DELETE'::text));]]></complex-attribute>
                        <category _I_D="23ce1280-a7ce-4859-a58c-72475886e4b8" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6d23fad1-af7c-4f28-8c57-703ba91168d9" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="b641a012-65f8-49ad-bc08-542c85281db2" name="sys_all_sequences" context="sys_all_sequences" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="ALL_SEQUENCES describes all sequences accessible to the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (s.schemaname)::character varying(30) AS sequence_owner,
    (s.sequencename)::character varying(30) AS sequence_name,
    (s.min_value)::numeric AS min_value,
    (s.max_value)::numeric AS max_value,
    (s.increment_by)::numeric AS increment_by,
        CASE s.cycle
            WHEN false THEN 'N'::character varying(1)
            WHEN true THEN 'Y'::character varying(1)
            ELSE NULL::character varying
        END AS cycle_flag,
    'N'::character varying(1) AS order_flag,
    s.cache_size,
    s.last_value AS last_number
   FROM ((pg_sequences s
     JOIN pg_class c ON (((c.relname = s.sequencename) AND (c.relkind = 'S'::"char"))))
     JOIN pg_user u ON ((c.relowner = u.usesysid)))
  WHERE ((u.usename = USER) OR has_sequence_privilege(((quote_ident((s.schemaname)::text) || '.'::text) || quote_ident((s.sequencename)::text)), 'USAGE,SELECT,UPDATE'::text));]]></complex-attribute>
                        <category _I_D="781d28e1-b42b-4250-ae5b-59ec793c674b" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c33f4b6e-7b93-4227-a0ee-150a1e371531" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="b8706e95-0b5f-4f54-9a07-103a55d449f6" name="sys_all_source" context="sys_all_source" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspowner)::character varying(30) AS owner,
    (s.name)::character varying(30) AS name,
    (s.type)::character varying(12) AS type,
    (generate_subscripts(s.text, 1))::numeric AS line,
    (unnest(s.text))::character varying(4000) AS text
   FROM (( SELECT c.relnamespace AS nsp,
            t.tgname AS name,
            'TRIGGER'::text AS type,
            string_to_array(pg_get_triggerdef(t.oid), chr(10)) AS text
           FROM ((pg_trigger t
             JOIN pg_class c ON ((c.oid = t.tgrelid)))
             JOIN pg_user u ON ((u.usesysid = c.relowner)))
          WHERE ((u.usename = USER) OR has_table_privilege(USER, c.oid, 'TRIGGER'::text))
        UNION ALL
         SELECT f.pronamespace AS nsp,
            f.proname AS name,
                CASE
                    WHEN (f.prokind = 'f'::"char") THEN 'FUNCTION'::text
                    WHEN (f.prokind = 'p'::"char") THEN 'PROCEDURE'::text
                    ELSE NULL::text
                END AS type,
            string_to_array(pg_get_functiondef(f.oid), chr(10)) AS text
           FROM ((pg_proc f
             JOIN pg_type ret ON ((f.prorettype = ret.oid)))
             JOIN pg_user u ON ((u.usesysid = f.proowner)))
          WHERE ((f.prokind = ANY (ARRAY['f'::"char", 'p'::"char"])) AND ((u.usename = USER) OR has_function_privilege(USER, f.oid, 'EXECUTE'::text)))
        UNION ALL
         SELECT t.typnamespace AS nsp,
            t.typname AS name,
            'TYPE'::text AS type,
                CASE
                    WHEN (t.typtype = 'c'::"char") THEN ARRAY( SELECT ((('CREATE OR REPLACE TYPE '::text || (t.typname)::text) || ' AS ('::text) || chr(10))
                    UNION ALL
                     SELECT (((((a.attname)::text || ' '::text) || format_type(a.atttypid, a.atttypmod)) ||
                            CASE
                                WHEN (lead(a.attrelid, 1) OVER () IS NULL) THEN ''::text
                                ELSE ','::text
                            END) || chr(10))
                       FROM pg_attribute a
                      WHERE (a.attrelid = t.typrelid)
                    UNION ALL
                     SELECT ');'::text)
                    WHEN (t.typtype = 'd'::"char") THEN ARRAY( SELECT ((('CREATE OR REPLACE DOMAIN '::text || (t.typname)::text) || ' AS '::text) || format_type(tt.oid, NULL::integer))
                       FROM pg_type tt
                      WHERE (tt.typarray = t.typbasetype))
                    ELSE NULL::text[]
                END AS text
           FROM (pg_type t
             JOIN pg_user u ON ((u.usesysid = t.typowner)))
          WHERE (((t.typrelid = (0)::oid) OR ( SELECT (c.relkind = 'c'::"char")
                   FROM pg_class c
                  WHERE (c.oid = t.typrelid))) AND (NOT (EXISTS ( SELECT 1
                   FROM pg_type el
                  WHERE ((el.oid = t.typelem) AND (el.typarray = t.oid))))) AND ((u.usename = USER) OR has_type_privilege(USER, t.oid, 'USAGE'::text)))) s
     JOIN pg_namespace n ON ((s.nsp = n.oid)))
  WHERE ((n.nspname <> 'pg_catalog'::name) AND (n.nspname <> 'information_schema'::name) AND (n.nspname !~ '^pg_toast'::text));]]></complex-attribute>
                        <category _I_D="eeb789e8-3b17-4935-a4c8-d792c682076b" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="95b9bfcd-2e6a-415c-8a29-6e379e9d788f" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="f17f6100-66f2-4487-b15b-177ab3d17e44" name="sys_all_tab_cols" context="sys_all_tab_cols" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="Describes the columns of the tables, views, and clusters accessible to the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.relname)::character varying(30) AS table_name,
    (a.attname)::character varying(30) AS column_name,
    (format_type(a.atttypid, a.atttypmod))::character varying(106) AS data_type,
    NULL::character varying(3) AS data_type_mod,
    NULL::character varying(30) AS data_type_owner,
    (a.attlen)::numeric AS data_length,
    NULL::numeric AS data_precision,
    NULL::numeric AS data_scale,
        CASE
            WHEN a.attnotnull THEN 'N'::character varying(1)
            ELSE 'Y'::character varying(1)
        END AS nullable,
    (a.attnum)::numeric AS column_id,
    NULL::numeric AS default_length,
    pg_get_expr(d.adbin, d.adrelid) AS data_default,
    (s.n_distinct)::numeric AS num_distinct,
    NULL::numeric AS low_value,
    NULL::numeric AS high_value,
    (s.null_frac)::numeric AS density,
    NULL::numeric AS num_nulls,
    NULL::numeric AS num_buckets,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::numeric AS sample_size,
    'NCHAR_CS'::character varying(44) AS character_set_name,
    NULL::numeric AS char_col_decl_length,
        CASE
            WHEN (COALESCE(st.last_autoanalyze, st.last_analyze) IS NOT NULL) THEN 'YES'::character varying(3)
            ELSE 'NO'::character varying(3)
        END AS global_stats,
    'NO'::character varying(3) AS user_stats,
    (s.avg_width)::numeric AS avg_col_len,
    information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)) AS char_length,
    NULL::character varying(1) AS char_used,
    NULL::character varying(3) AS v80_fmt_image,
    NULL::character varying(3) AS data_upgraded,
    'NO'::character varying(3) AS hidden_column,
    'NO'::character varying(3) AS virtual_column,
    (a.attnum)::numeric AS segment_column_id,
    (a.attnum)::numeric AS internal_column_id,
    'NONE'::character varying(4) AS histogram,
    (a.attname)::character varying(4000) AS qualified_col_name
   FROM (((((((pg_attribute a
     JOIN pg_class c ON ((c.oid = a.attrelid)))
     JOIN pg_user u ON ((c.relowner = u.usesysid)))
     JOIN pg_type t ON ((a.atttypid = t.oid)))
     LEFT JOIN pg_attrdef d ON (((c.oid = d.adrelid) AND (a.attnum = d.adnum))))
     JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
     LEFT JOIN pg_stats s ON (((s.schemaname = n.nspname) AND (s.tablename = c.relname) AND (s.attname = a.attname))))
     LEFT JOIN pg_stat_user_tables st ON ((st.relid = c.oid)))
  WHERE ((a.attnum > 0) AND (NOT a.attisdropped) AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND ((u.usename = USER) OR aws_oracle_ext.has_column_privilege(n.nspname, c.relname, a.attname)) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="87e3af73-3a63-4e00-88ee-74b53a2083b8" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8e28ccd7-5708-4980-b2fc-c79d4fed274f" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="c0dbc373-a65b-4971-9f3f-81b9a89f5213" name="sys_all_tab_columns" context="sys_all_tab_columns" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="ALL_TAB_COLUMNS describes the columns of the tables, views, and clusters accessible to the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.relname)::character varying(30) AS table_name,
    (a.attname)::character varying(30) AS column_name,
    (format_type(a.atttypid, a.atttypmod))::character varying(106) AS data_type,
    NULL::character varying(3) AS data_type_mod,
    NULL::character varying(30) AS data_type_owner,
    (a.attlen)::numeric AS data_length,
    NULL::numeric AS data_precision,
    NULL::numeric AS data_scale,
        CASE
            WHEN a.attnotnull THEN 'N'::character varying(1)
            ELSE 'Y'::character varying(1)
        END AS nullable,
    (a.attnum)::numeric AS column_id,
    NULL::numeric AS default_length,
    pg_get_expr(d.adbin, d.adrelid) AS data_default,
    (s.n_distinct)::numeric AS num_distinct,
    NULL::numeric AS low_value,
    NULL::numeric AS high_value,
    (s.null_frac)::numeric AS density,
    NULL::numeric AS num_nulls,
    NULL::numeric AS num_buckets,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::numeric AS sample_size,
    'NCHAR_CS'::character varying(44) AS character_set_name,
    NULL::numeric AS char_col_decl_length,
        CASE
            WHEN (COALESCE(st.last_autoanalyze, st.last_analyze) IS NOT NULL) THEN 'YES'::character varying(3)
            ELSE 'NO'::character varying(3)
        END AS global_stats,
    'NO'::character varying(3) AS user_stats,
    (s.avg_width)::numeric AS avg_col_len,
    information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)) AS char_length,
    NULL::character varying(1) AS char_used,
    NULL::character varying(3) AS v80_fmt_image,
    NULL::character varying(3) AS data_upgraded,
    'NONE'::character varying(4) AS histogram
   FROM (((((((pg_attribute a
     JOIN pg_class c ON ((c.oid = a.attrelid)))
     JOIN pg_user u ON ((c.relowner = u.usesysid)))
     LEFT JOIN pg_attrdef d ON (((c.oid = d.adrelid) AND (a.attnum = d.adnum))))
     JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
     JOIN pg_type t ON ((a.atttypid = t.oid)))
     LEFT JOIN pg_stats s ON (((s.schemaname = n.nspname) AND (s.tablename = c.relname) AND (s.attname = a.attname))))
     LEFT JOIN pg_stat_user_tables st ON ((st.relid = c.oid)))
  WHERE ((a.attnum > 0) AND (NOT a.attisdropped) AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND ((u.usename = USER) OR aws_oracle_ext.has_column_privilege(n.nspname, c.relname, a.attname)) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="5d332c3a-2647-4e0e-94fd-173bfe8ce573" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2d116311-78d2-4e39-8db1-781d799ccd0b" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="232b28d1-7993-4f4c-9220-2d0cb6ea8036" name="sys_all_tab_comments" context="sys_all_tab_comments" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.relname)::character varying(30) AS table_name,
        CASE
            WHEN (c.relkind = 'r'::"char") THEN 'TABLE'::text
            WHEN (c.relkind = 'v'::"char") THEN 'VIEW'::text
            ELSE NULL::text
        END AS table_type,
    (obj_description(c.oid))::character varying(4000) AS comments,
    (0)::numeric AS origin_con_id
   FROM (pg_class c
     JOIN pg_namespace n ON ((c.relnamespace = n.oid)))
  WHERE ((c.relkind = ANY (ARRAY['r'::"char", 'v'::"char"])) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])) AND has_table_privilege(((quote_ident((n.nspname)::text) || '.'::text) || quote_ident((c.relname)::text)), 'SELECT,INSERT,UPDATE,DELETE,TRUNCATE,REFERENCES,TRIGGER'::text));]]></complex-attribute>
                        <category _I_D="d5f63187-79a1-4d99-8d45-3b5ff377252e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="833c4518-9aeb-405e-af03-ecd362ac19b8" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="fcb1f187-08e8-4555-b607-ed5995b58985" name="sys_all_tables" context="sys_all_tables" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="The ALL_TABLES view describes all tables accessible to the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (t.schemaname)::character varying(30) AS owner,
    (t.tablename)::character varying(30) AS table_name,
    (t.tablespace)::character varying(30) AS tablespace_name,
    NULL::character varying(30) AS cluster_name,
    NULL::character varying(30) AS iot_name,
    'VALID'::character varying(8) AS status,
    NULL::numeric AS pct_free,
    NULL::numeric AS pct_used,
    NULL::numeric AS ini_trans,
    NULL::numeric AS max_trans,
    NULL::numeric AS initial_extent,
    NULL::numeric AS next_extent,
    NULL::numeric AS min_extents,
    NULL::numeric AS max_extents,
    NULL::numeric AS pct_increase,
    NULL::numeric AS freelists,
    NULL::numeric AS freelist_groups,
    'NO'::character varying(3) AS logging,
    'N'::character varying(1) AS backed_up,
    stat.n_live_tup AS num_rows,
    NULL::numeric AS blocks,
    NULL::numeric AS empty_blocks,
    NULL::numeric AS avg_space,
    NULL::numeric AS chain_cnt,
    NULL::numeric AS avg_row_len,
    NULL::numeric AS avg_space_freelist_blocks,
    NULL::numeric AS num_freelist_blocks,
    NULL::character varying(10) AS degree,
    NULL::character varying(10) AS instances,
    NULL::character varying(5) AS cache,
    NULL::character varying(8) AS table_lock,
    NULL::numeric AS sample_size,
    (COALESCE(stat.last_autoanalyze, stat.last_analyze))::date AS last_analyzed,
    'NO'::character varying(3) AS partitioned,
    NULL::character varying(12) AS iot_type,
        CASE
            WHEN ((n.nspname !~ '^pg_toast'::text) AND (n.nspname ~~ 'pg_temp%'::text)) THEN 'Y'::text
            ELSE 'N'::text
        END AS temporary,
    'N'::character varying(1) AS secondary,
    'NO'::character varying(3) AS nested,
    'DEFAULT'::character varying(7) AS buffer_pool,
    'DEFAULT'::character varying(7) AS flash_cache,
    'DEFAULT'::character varying(7) AS cell_flash_cache,
    'DISABLED'::character varying(8) AS row_movement,
    'NO'::character varying(3) AS global_stats,
    NULL::character varying(3) AS user_stats,
    NULL::character varying(15) AS duration,
    'DISABLED'::character varying(8) AS skip_corrupt,
    'NO'::character varying(3) AS monitoring,
    NULL::character varying(30) AS cluster_owner,
    'DISABLED'::character varying(8) AS dependencies,
    'DISABLED'::character varying(8) AS compression,
    NULL::character varying(12) AS compress_for,
    'NO'::character varying(3) AS dropped,
    NULL::character varying(3) AS read_only,
    'YES'::character varying(3) AS segment_created,
    'DEFAULT'::character varying(7) AS result_cache
   FROM ((pg_tables t
     JOIN pg_stat_user_tables stat ON (((t.schemaname = stat.schemaname) AND (t.tablename = stat.relname))))
     JOIN pg_namespace n ON ((t.schemaname = n.nspname)))
  WHERE ((t.schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])) AND ((t.tableowner = USER) OR has_table_privilege(((quote_ident((t.schemaname)::text) || '.'::text) || quote_ident((t.tablename)::text)), 'SELECT,INSERT,UPDATE,DELETE,TRUNCATE,REFERENCES,TRIGGER'::text)));]]></complex-attribute>
                        <category _I_D="0fdf2a2f-d9de-4162-bf71-cd5b0ad33c9e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f15a33f6-61f6-4616-a204-a08dc084d253" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="b233aef7-0b49-4205-9c90-ce957ca39d86" name="sys_all_triggers" context="sys_all_triggers" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="ALL_TRIGGERS describes the triggers on tables accessible to the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(128) AS owner,
    (trg.tgname)::character varying(128) AS trigger_name,
    (
        CASE ((trg.tgtype)::integer & 66)
            WHEN 2 THEN ('BEFORE'::text ||
            CASE ((trg.tgtype)::integer & 1)
                WHEN 1 THEN ' EACH ROW'::text
                ELSE 'STATEMENT'::text
            END)
            WHEN 64 THEN 'INSTEAD OF'::text
            ELSE ('AFTER'::text ||
            CASE ((trg.tgtype)::integer & 1)
                WHEN 1 THEN ' EACH ROW'::text
                ELSE 'STATEMENT'::text
            END)
        END)::character varying(16) AS trigger_type,
    (
        CASE ((trg.tgtype)::integer & ((28)::smallint)::integer)
            WHEN 32 THEN 'TRUNCATE'::text
            WHEN 16 THEN 'UPDATE'::text
            WHEN 8 THEN 'DELETE'::text
            WHEN 4 THEN 'INSERT'::text
            WHEN 20 THEN 'INSERT OR UPDATE'::text
            WHEN 28 THEN 'INSERT OR UPDATE OR DELETE'::text
            WHEN 24 THEN 'UPDATE OR DELETE'::text
            WHEN 12 THEN 'INSERT OR DELETE'::text
            ELSE NULL::text
        END)::character varying(246) AS triggering_event,
    (ns.nspname)::character varying(128) AS table_owner,
    (
        CASE ((trg.tgtype)::integer & 66)
            WHEN 64 THEN 'VIEW'::text
            ELSE 'TABLE'::text
        END)::character varying(18) AS base_object_type,
    (tbl.relname)::character varying(128) AS table_name,
    (( SELECT string_agg((a.attname)::text, ', '::text) AS string_agg
           FROM pg_attribute a
          WHERE ((a.attrelid = tbl.oid) AND (a.attnum = ANY ((trg.tgattr)::smallint[])))))::character varying(4000) AS column_name,
    'REFERENCING NEW AS NEW OLD AS OLD'::character varying(422) AS referencing_names,
    (
        CASE
            WHEN pg_has_role(tbl.relowner, 'USAGE'::text) THEN (regexp_match(pg_get_triggerdef(trg.oid), '.{35,} WHEN \((.+)\) EXECUTE PROCEDURE'::text))[1]
            ELSE NULL::text
        END)::character varying(4000) AS when_clause,
    (
        CASE
            WHEN (trg.tgenabled = 'D'::"char") THEN 'DISABLED'::text
            ELSE 'ENABLED'::text
        END)::character varying(8) AS status,
    (obj_description(trg.oid))::character varying(400) AS description,
    'PL/SQL'::character varying(11) AS action_type,
    (((n.nspname)::text || '.'::text) || (proc.proname)::text) AS trigger_body,
    'NO'::character varying(3) AS crossedition,
    'NO'::character varying(3) AS before_statement,
    'NO'::character varying(3) AS before_row,
    'NO'::character varying(3) AS after_row,
    'NO'::character varying(3) AS after_statement,
    'NO'::character varying(3) AS instead_of_row,
    (
        CASE ((trg.tgtype)::integer & 66)
            WHEN 2 THEN 'YES'::text
            WHEN 64 THEN 'NO'::text
            ELSE 'YES'::text
        END)::character varying(3) AS fire_once,
    'NO'::character varying(3) AS apply_server_only
   FROM ((((pg_trigger trg
     JOIN pg_proc proc ON ((proc.oid = trg.tgfoid)))
     JOIN pg_namespace n ON ((n.oid = proc.pronamespace)))
     JOIN pg_class tbl ON ((trg.tgrelid = tbl.oid)))
     JOIN pg_namespace ns ON ((ns.oid = tbl.relnamespace)))
  WHERE ((NOT trg.tgisinternal) AND (pg_has_role(tbl.relowner, 'USAGE'::text) OR has_table_privilege(tbl.oid, 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(tbl.oid, 'INSERT, UPDATE, REFERENCES'::text)));]]></complex-attribute>
                        <category _I_D="a0bec3e2-45ce-4676-92e3-26d458f142b7" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="17319291-a04b-43f2-a438-340e66a82391" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="7e80dc2e-acbc-4524-9960-c06fb9efc507" name="sys_all_users" context="sys_all_users" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="The ALL_USERS view lists all users of the database that are visible to the current user">
                        <complex-attribute name="sql"><![CDATA[ SELECT sys_user_users.username,
    sys_user_users.user_id,
    sys_user_users.created
   FROM aws_oracle_ext.sys_user_users;]]></complex-attribute>
                        <category _I_D="fb704662-d59e-4b33-b549-b90cd8c08a5a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b6ca3575-7353-42c7-a48d-4f36d406f800" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="964d116b-30fe-4b85-8093-4c977eaaf620" name="sys_all_views" context="sys_all_views" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE">
                        <complex-attribute name="sql"><![CDATA[ SELECT (pg_views.schemaname)::character varying(30) AS owner,
    (pg_views.viewname)::character varying(30) AS view_name,
    (length(pg_views.definition))::numeric AS text_length,
    (pg_views.definition)::character varying(409600) AS text,
    NULL::numeric AS type_text_length,
    NULL::character varying(4000) AS type_text,
    NULL::numeric AS oid_text_length,
    NULL::character varying(4000) AS oid_text,
    NULL::character varying(30) AS view_type_owner,
    NULL::character varying(30) AS view_type,
    NULL::character varying(30) AS superview_name,
    'N'::character varying(1) AS editioning_view,
    'Y'::character varying(1) AS read_only
   FROM pg_views
  WHERE ((pg_views.schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])) AND ((pg_views.viewowner = USER) OR has_table_privilege(((quote_ident((pg_views.schemaname)::text) || '.'::text) || quote_ident((pg_views.viewname)::text)), 'SELECT,INSERT,UPDATE,DELETE,REFERENCES,TRIGGER'::text)));]]></complex-attribute>
                        <category _I_D="5ff9507b-d88a-481b-9649-0a707f7d6cb0" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7864935d-af78-4c87-847d-9d8fb477ff73" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="341ae8e1-efdc-4da0-9611-4e2e48fdfe7b" name="sys_dba_cons_columns" context="sys_dba_cons_columns" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_CONS_COLUMNS describes all columns in the database that are specified in constraints.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (x.cstrschema)::character varying(128) AS owner,
    (x.cstrname)::character varying(128) AS constraint_name,
    (x.tblname)::character varying(128) AS table_name,
    (x.colname)::character varying(4000) AS column_name,
    (rank() OVER (PARTITION BY x.cstrschema, x.tblname, x.cstrname ORDER BY x.colnum))::smallint AS "position"
   FROM ( SELECT DISTINCT nr.nspname,
            r.relname,
            r.relowner,
            a.attname,
            a.attnum,
            nc.nspname,
            c.conname
           FROM pg_namespace nr,
            pg_class r,
            pg_attribute a,
            pg_depend d,
            pg_namespace nc,
            pg_constraint c
          WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND (d.refclassid = ('pg_class'::regclass)::oid) AND (d.refobjid = r.oid) AND (d.refobjsubid = a.attnum) AND (d.classid = ('pg_constraint'::regclass)::oid) AND (d.objid = c.oid) AND (c.connamespace = nc.oid) AND (c.contype = 'c'::"char") AND (r.relkind = ANY (ARRAY['r'::"char", 'p'::"char"])) AND (NOT a.attisdropped))
        UNION ALL
         SELECT nr.nspname,
            r.relname,
            r.relowner,
            a.attname,
            a.attnum,
            nc.nspname,
            c.conname
           FROM pg_namespace nr,
            pg_class r,
            pg_attribute a,
            pg_namespace nc,
            pg_constraint c
          WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND (nc.oid = c.connamespace) AND (r.oid =
                CASE c.contype
                    WHEN 'f'::"char" THEN c.confrelid
                    ELSE c.conrelid
                END) AND (a.attnum = ANY (
                CASE c.contype
                    WHEN 'f'::"char" THEN c.confkey
                    ELSE c.conkey
                END)) AND (NOT a.attisdropped) AND (c.contype = ANY (ARRAY['p'::"char", 'u'::"char", 'f'::"char"])) AND (r.relkind = ANY (ARRAY['r'::"char", 'p'::"char"])))) x(tblschema, tblname, tblowner, colname, colnum, cstrschema, cstrname)
  WHERE (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text));]]></complex-attribute>
                        <category _I_D="0a5f057b-9d0f-4945-bce3-dc6fb8a12f1d" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b855bede-53b9-42e8-a785-732afea98002" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="27785819-6495-4c03-a4a9-8e0433d8e6d5" name="sys_dba_constraints" context="sys_dba_constraints" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_CONSTRAINTS describes all constraint definitions on all tables in the database. Its columns are the same as those in &quot;ALL_CONSTRAINTS&quot;.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.conname)::character varying(30) AS constraint_name,
    (c.contype)::character varying(1) AS constraint_type,
    (cl.relname)::character varying(30) AS table_name,
    pg_get_constraintdef(c.oid) AS search_condition,
    (n_ref.nspname)::character varying(30) AS r_owner,
    (c_ref.conname)::character varying(30) AS r_constraint_name,
        CASE c.confdeltype
            WHEN 'a'::"char" THEN 'no action'::character varying(9)
            WHEN 'r'::"char" THEN 'restrict'::character varying(9)
            WHEN 'c'::"char" THEN 'cascade'::character varying(9)
            WHEN 'n'::"char" THEN 'set null'::character varying(9)
            WHEN 'd'::"char" THEN 'set default'::character varying(11)
            ELSE NULL::character varying(9)
        END AS delete_rule,
    'ENABLED'::character varying(8) AS status,
        CASE
            WHEN c.condeferrable THEN 'DEFERRABLE'::character varying(14)
            ELSE 'NOT DEFERRABLE'::character varying(14)
        END AS "deferrable",
        CASE
            WHEN c.condeferred THEN 'DEFERRED'::character varying(9)
            ELSE 'IMMEDIATE'::character varying(9)
        END AS deferred,
        CASE
            WHEN c.convalidated THEN 'VALIDATED'::character varying(13)
            ELSE 'NOT VALIDATED'::character varying(13)
        END AS validated,
    'GENERATED NAME'::character varying(14) AS generated,
    NULL::character varying(3) AS bad,
    NULL::character varying(4) AS rely,
    NULL::date AS last_change,
    (n.nspname)::character varying(30) AS index_owner,
    (cl_ind.relname)::character varying(30) AS index_name,
    NULL::character varying(7) AS invalid,
    NULL::character varying(14) AS view_related
   FROM (((((((pg_constraint c
     JOIN pg_namespace n ON ((n.oid = c.connamespace)))
     JOIN pg_class cl ON ((cl.oid = c.conrelid)))
     LEFT JOIN pg_class cl_ref ON ((cl_ref.oid = c.confrelid)))
     LEFT JOIN pg_namespace n_ref ON ((n_ref.oid = cl_ref.relnamespace)))
     LEFT JOIN pg_constraint c_ref ON (((c_ref.conrelid = c.confrelid) AND (c_ref.contype = 'p'::"char"))))
     LEFT JOIN pg_index i ON ((i.indrelid = cl_ref.oid)))
     LEFT JOIN pg_class cl_ind ON ((cl_ind.oid = c.conindid)))
  WHERE (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text));]]></complex-attribute>
                        <category _I_D="e26f64e4-8308-41bd-a33f-e4a88762a7aa" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8c522e2e-d3d2-4f74-8c97-4e231a98f59c" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="ee1ad0f6-e2da-42d4-b761-b0f311c11687" name="sys_dba_ind_columns" context="sys_dba_ind_columns" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_IND_COLUMNS describes the columns of all the indexes on all tables and clusters in the database.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (insp.nspname)::character varying(128) AS index_owner,
    (irel.relname)::character varying(128) AS index_name,
    (tnsp.nspname)::character varying(128) AS table_owner,
    (trel.relname)::character varying(128) AS table_name,
    (a.attname)::character varying(4000) AS column_name,
    (c.ordinality)::integer AS column_position,
    COALESCE(information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)), information_schema._pg_numeric_precision(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*))) AS column_length,
    COALESCE(information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)), 0) AS char_length,
    (
        CASE ((o.option)::integer & 1)
            WHEN 1 THEN 'DESC'::text
            ELSE 'ASC'::text
        END)::character varying(4) AS descend,
    NULL::integer AS collated_column_id
   FROM ((((((((pg_index i
     JOIN pg_class trel ON ((trel.oid = i.indrelid)))
     JOIN pg_namespace tnsp ON ((trel.relnamespace = tnsp.oid)))
     JOIN pg_class irel ON ((irel.oid = i.indexrelid)))
     JOIN pg_namespace insp ON ((irel.relnamespace = insp.oid)))
     CROSS JOIN LATERAL unnest(i.indkey) WITH ORDINALITY c(colnum, ordinality))
     LEFT JOIN LATERAL unnest(i.indoption) WITH ORDINALITY o(option, ordinality) ON ((c.ordinality = o.ordinality)))
     JOIN pg_attribute a ON (((trel.oid = a.attrelid) AND (a.attnum = c.colnum))))
     JOIN (pg_type t
     JOIN pg_namespace nt ON ((t.typnamespace = nt.oid))) ON ((a.atttypid = t.oid)))
  WHERE (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text));]]></complex-attribute>
                        <category _I_D="bbcc7d54-73b6-4611-85e1-363f22500c84" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3af6e375-58df-41ff-bfbc-3a564a894c88" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="6771a560-76fd-406e-aae5-a46067506ebd" name="sys_dba_indexes" context="sys_dba_indexes" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_INDEXES describes all indexes in the database.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (tnsp.nspname)::character varying(128) AS owner,
    (irel.relname)::character varying(128) AS index_name,
    (
        CASE
            WHEN (i.indexprs IS NULL) THEN 'NORMAL'::text
            ELSE 'FUNCTION-BASED NORMAL'::text
        END)::character varying(27) AS index_type,
    (tnsp.nspname)::character varying(128) AS table_owner,
    (trel.relname)::character varying(128) AS table_name,
    'TABLE'::character varying(11) AS table_type,
    (
        CASE
            WHEN i.indisunique THEN 'UNIQUE'::text
            ELSE 'NONUNIQUE'::text
        END)::character varying(9) AS uniqueness,
    'DISABLED'::character varying(13) AS compression,
    NULL::integer AS prefix_length,
    (ts.spcname)::character varying(30) AS tablespace_name,
    NULL::integer AS ini_trans,
    NULL::integer AS max_trans,
    NULL::integer AS initial_extent,
    NULL::integer AS next_extent,
    NULL::integer AS min_extents,
    NULL::integer AS max_extents,
    NULL::integer AS pct_increase,
    NULL::integer AS pct_threshold,
    NULL::integer AS include_column,
    NULL::integer AS freelists,
    NULL::integer AS freelist_groups,
    NULL::integer AS pct_free,
    (
        CASE trel.relpersistence
            WHEN 'p'::"char" THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS logging,
    NULL::integer AS blevel,
    NULL::integer AS leaf_blocks,
    (
        CASE
            WHEN i.indisprimary THEN st.n_live_tup
            ELSE NULL::bigint
        END)::integer AS distinct_keys,
    NULL::integer AS avg_leaf_blocks_per_key,
    NULL::integer AS avg_data_blocks_per_key,
    NULL::integer AS clustering_factor,
    (
        CASE
            WHEN i.indisready THEN 'ENABLED'::text
            ELSE 'DISABLED'::text
        END)::character varying(8) AS status,
    (st.n_live_tup)::integer AS num_rows,
    NULL::integer AS sample_size,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::character varying(40) AS degree,
    NULL::character varying(40) AS instances,
    (
        CASE
            WHEN trel.relispartition THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS partitioned,
    (
        CASE trel.relpersistence
            WHEN 't'::"char" THEN 'Y'::text
            ELSE 'N'::text
        END)::character varying(1) AS temporary,
    'N'::character varying(1) AS generated,
    'N'::character varying(1) AS secondary,
    'DEFAULT'::character varying(7) AS buffer_pool,
    'DEFAULT'::character varying(7) AS flash_cache,
    'DEFAULT'::character varying(7) AS cell_flash_cache,
    'NO'::character varying(3) AS user_stats,
    NULL::character varying(15) AS duration,
    NULL::integer AS pct_direct_access,
    NULL::character varying(128) AS ityp_owner,
    NULL::character varying(128) AS ityp_name,
    NULL::character varying(1000) AS parameters,
    'NO'::character varying(3) AS global_stats,
    NULL::character varying(12) AS domidx_status,
    NULL::character varying(6) AS domidx_opstatus,
    NULL::character varying(8) AS funcidx_status,
    'NO'::character varying(3) AS join_index,
    'NO'::character varying(3) AS iot_redundant_pkey_elim,
    'NO'::character varying(3) AS dropped,
    (
        CASE
            WHEN i.indisvalid THEN 'VISIBLE'::text
            ELSE 'INVISIBLE'::text
        END)::character varying(9) AS visibility,
    NULL::character varying(14) AS domidx_management,
    (
        CASE irel.relpages
            WHEN 0 THEN 'NO'::text
            ELSE 'YES'::text
        END)::character varying(3) AS segment_created,
    'NO'::character varying(3) AS orphaned_entries,
    (
        CASE
            WHEN (i.indpred IS NULL) THEN 'FULL'::text
            ELSE 'PARTIAL'::text
        END)::character varying(7) AS indexing
   FROM ((((((pg_index i
     JOIN pg_class trel ON ((trel.oid = i.indrelid)))
     JOIN pg_namespace tnsp ON ((trel.relnamespace = tnsp.oid)))
     JOIN pg_class irel ON ((irel.oid = i.indexrelid)))
     JOIN pg_am am ON (((am.oid = irel.relam) AND (am.amname = 'btree'::name))))
     LEFT JOIN pg_tablespace ts ON ((ts.oid = irel.reltablespace)))
     LEFT JOIN pg_stat_all_tables st ON (((st.schemaname = tnsp.nspname) AND (st.relname = trel.relname))))
  WHERE (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text));]]></complex-attribute>
                        <category _I_D="25d98002-9cb3-48d2-a72e-586161c29773" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e00b775f-7163-4d11-b5a4-47bff6e34552" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="220574be-59e4-47fd-a636-8f3774297bdd" name="sys_dba_objects" context="sys_dba_objects" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_OBJECTS describes all objects in the database. It has the same columns as SYS.ALL_OBJECTS.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.relname)::character varying(30) AS object_name,
    NULL::character varying(30) AS subobject_name,
    (c.oid)::bigint AS object_id,
        CASE
            WHEN (c.relkind = ANY (ARRAY['t'::"char", 'r'::"char"])) THEN (c.oid)::bigint
            ELSE NULL::bigint
        END AS data_object_id,
        CASE c.relkind
            WHEN 'r'::"char" THEN 'ordinary table'::character varying(17)
            WHEN 'i'::"char" THEN 'index'::character varying(17)
            WHEN 'S'::"char" THEN 'sequence'::character varying(17)
            WHEN 'v'::"char" THEN 'view'::character varying(17)
            WHEN 'c'::"char" THEN 'composite type'::character varying(17)
            WHEN 't'::"char" THEN 'TOAST table'::character varying(17)
            WHEN 'f'::"char" THEN 'foreign table'::character varying(17)
            ELSE NULL::character varying(17)
        END AS object_type,
    NULL::date AS created,
    NULL::date AS last_ddl_time,
    NULL::character varying(78) AS "timestamp",
    'VALID'::character varying(7) AS status,
        CASE c.relpersistence
            WHEN 't'::"char" THEN 'Y'::text
            ELSE 'N'::text
        END AS temporary,
    'N'::character varying(1) AS generated,
    'N'::character varying(1) AS secondary,
    (c.reltablespace)::integer AS namespace,
    NULL::character varying(30) AS edition_name
   FROM (pg_class c
     JOIN pg_namespace n ON ((c.relnamespace = n.oid)))
  WHERE ((( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text)) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="8f63cac1-0a87-4e5c-9bd5-e1758a9dd51c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2598690f-5768-4c67-92aa-581423771816" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="e3f8fe0f-31a7-4ada-88b0-b7cb81e1669d" name="sys_dba_policies" context="sys_dba_policies" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_POLICIES describes all Oracle Virtual Private Database (VPD) security policies in the database.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (p.schemaname)::character varying(128) AS object_owner,
    (p.tablename)::character varying(128) AS object_name,
    'SYS_DEFAULT'::character varying(128) AS policy_group,
    (p.policyname)::character varying(128) AS policy_name,
    (p.schemaname)::character varying(128) AS pf_owner,
    NULL::character varying(128) AS package,
    NULL::character varying(128) AS function,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'SELECT'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS sel,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'INSERT'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS ins,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'UPDATE'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS upd,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'DELETE'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS del,
    'NO'::character varying(3) AS idx,
    (
        CASE
            WHEN (p.with_check IS NOT NULL) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS chk_option,
    'YES'::character varying(3) AS enable,
    'NO'::character varying(3) AS static_policy,
    'DYNAMIC'::character varying(24) AS policy_type,
    'NO'::character varying(3) AS long_predicate,
    'NO'::character varying(3) AS common,
    'NO'::character varying(3) AS inherited
   FROM pg_policies p
  WHERE (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text));]]></complex-attribute>
                        <category _I_D="3685d3ea-9f11-4009-b099-25b16051115c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c5cb8b3d-c79c-49b4-9a6e-191181da1446" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="d815a924-60f5-4e15-a0a3-b829d22eea90" name="sys_dba_roles" context="sys_dba_roles" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_ROLES lists all roles that exist in the database.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (r.rolname)::character varying(128) AS role,
    (u.usesysid)::bigint AS role_id,
    (
        CASE COALESCE(r.rolpassword, ''::text)
            WHEN ''::text THEN 'NO'::text
            ELSE 'YES'::text
        END)::character varying(8) AS password_required,
    (
        CASE COALESCE(r.rolpassword, ''::text)
            WHEN ''::text THEN 'NONE'::text
            ELSE 'PASSWORD'::text
        END)::character varying(11) AS authentication_type,
    'NO'::character varying(3) AS common,
    'N'::character varying(1) AS oracle_maintained,
    'NO'::character varying(3) AS inherited,
    'NO'::character varying(3) AS implicit
   FROM (pg_authid r
     JOIN pg_user u ON ((u.usename = r.rolname)));]]></complex-attribute>
                        <category _I_D="42862d6b-a6bd-4edd-b270-20460ca4428a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ad73c04b-1908-4cb2-abae-f72af2c76f98" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="31f34891-bb5b-4989-95c8-d6297332ca2f" name="sys_dba_sequences" context="sys_dba_sequences" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_SEQUENCES describes all sequences in the database">
                        <complex-attribute name="sql"><![CDATA[ SELECT (s.schemaname)::character varying(30) AS sequence_owner,
    (s.sequencename)::character varying(30) AS sequence_name,
    (s.min_value)::numeric AS min_value,
    (s.max_value)::numeric AS max_value,
    (s.increment_by)::numeric AS increment_by,
        CASE s.cycle
            WHEN false THEN 'N'::character varying(1)
            WHEN true THEN 'Y'::character varying(1)
            ELSE NULL::character varying
        END AS cycle_flag,
    'N'::character varying(1) AS order_flag,
    s.cache_size,
    s.last_value AS last_number
   FROM ((pg_sequences s
     JOIN pg_class c ON (((c.relname = s.sequencename) AND (c.relkind = 'S'::"char"))))
     JOIN pg_user u ON ((c.relowner = u.usesysid)))
  WHERE (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text));]]></complex-attribute>
                        <category _I_D="d3b40358-ecbf-42f8-9580-031706e57610" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a962eab1-1679-46a6-930e-5c375fc8e655" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="9680ca1f-4d18-4279-9ca8-f06ffcc98079" name="sys_dba_source" context="sys_dba_source" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspowner)::character varying(30) AS owner,
    (s.name)::character varying(30) AS name,
    (s.type)::character varying(12) AS type,
    (generate_subscripts(s.text, 1))::numeric AS line,
    (unnest(s.text))::character varying(4000) AS text
   FROM (( SELECT c.relnamespace AS nsp,
            t.tgname AS name,
            'TRIGGER'::text AS type,
            string_to_array(pg_get_triggerdef(t.oid), chr(10)) AS text
           FROM ((pg_trigger t
             JOIN pg_class c ON ((c.oid = t.tgrelid)))
             JOIN pg_user u ON ((u.usesysid = c.relowner)))
        UNION ALL
         SELECT f.pronamespace AS nsp,
            f.proname AS name,
                CASE
                    WHEN (f.prokind = 'f'::"char") THEN 'FUNCTION'::text
                    WHEN (f.prokind = 'p'::"char") THEN 'PROCEDURE'::text
                    ELSE NULL::text
                END AS type,
            string_to_array(pg_get_functiondef(f.oid), chr(10)) AS text
           FROM ((pg_proc f
             JOIN pg_type ret ON ((f.prorettype = ret.oid)))
             JOIN pg_user u ON ((u.usesysid = f.proowner)))
          WHERE (f.prokind = ANY (ARRAY['f'::"char", 'p'::"char"]))
        UNION ALL
         SELECT t.typnamespace AS nsp,
            t.typname AS name,
            'TYPE'::text AS type,
                CASE
                    WHEN (t.typtype = 'c'::"char") THEN ARRAY( SELECT ((('CREATE OR REPLACE TYPE '::text || (t.typname)::text) || ' AS ('::text) || chr(10))
                    UNION ALL
                     SELECT (((((a.attname)::text || ' '::text) || format_type(a.atttypid, a.atttypmod)) ||
                            CASE
                                WHEN (lead(a.attrelid, 1) OVER () IS NULL) THEN ''::text
                                ELSE ','::text
                            END) || chr(10))
                       FROM pg_attribute a
                      WHERE (a.attrelid = t.typrelid)
                    UNION ALL
                     SELECT ');'::text)
                    WHEN (t.typtype = 'd'::"char") THEN ARRAY( SELECT ((('CREATE OR REPLACE DOMAIN '::text || (t.typname)::text) || ' AS '::text) || format_type(tt.oid, NULL::integer))
                       FROM pg_type tt
                      WHERE (tt.typarray = t.typbasetype))
                    ELSE NULL::text[]
                END AS text
           FROM (pg_type t
             JOIN pg_user u ON ((u.usesysid = t.typowner)))
          WHERE (((t.typrelid = (0)::oid) OR ( SELECT (c.relkind = 'c'::"char")
                   FROM pg_class c
                  WHERE (c.oid = t.typrelid))) AND (NOT (EXISTS ( SELECT 1
                   FROM pg_type el
                  WHERE ((el.oid = t.typelem) AND (el.typarray = t.oid))))))) s
     JOIN pg_namespace n ON ((s.nsp = n.oid)))
  WHERE ((n.nspname <> 'pg_catalog'::name) AND (n.nspname <> 'information_schema'::name) AND (n.nspname !~ '^pg_toast'::text));]]></complex-attribute>
                        <category _I_D="dd343506-e525-4f52-9a5e-c1716f89d2e9" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="520dcb17-e4d9-4cb4-9a68-4142e6ca6018" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="a7de9253-bde9-4ecf-b72d-94411d40916f" name="sys_dba_tab_cols" context="sys_dba_tab_cols" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="describes the columns of all tables, views, and clusters in the database">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.relname)::character varying(30) AS table_name,
    (a.attname)::character varying(30) AS column_name,
    (format_type(a.atttypid, a.atttypmod))::character varying(106) AS data_type,
    NULL::character varying(3) AS data_type_mod,
    NULL::character varying(30) AS data_type_owner,
    (a.attlen)::numeric AS data_length,
    NULL::numeric AS data_precision,
    NULL::numeric AS data_scale,
        CASE
            WHEN a.attnotnull THEN 'N'::character varying(1)
            ELSE 'Y'::character varying(1)
        END AS nullable,
    (a.attnum)::numeric AS column_id,
    NULL::numeric AS default_length,
    pg_get_expr(d.adbin, d.adrelid) AS data_default,
    (s.n_distinct)::numeric AS num_distinct,
    NULL::numeric AS low_value,
    NULL::numeric AS high_value,
    (s.null_frac)::numeric AS density,
    NULL::numeric AS num_nulls,
    NULL::numeric AS num_buckets,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::numeric AS sample_size,
    'NCHAR_CS'::character varying(44) AS character_set_name,
    NULL::numeric AS char_col_decl_length,
        CASE
            WHEN (COALESCE(st.last_autoanalyze, st.last_analyze) IS NOT NULL) THEN 'YES'::character varying(3)
            ELSE 'NO'::character varying(3)
        END AS global_stats,
    'NO'::character varying(3) AS user_stats,
    (s.avg_width)::numeric AS avg_col_len,
    information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)) AS char_length,
    NULL::character varying(1) AS char_used,
    NULL::character varying(3) AS v80_fmt_image,
    NULL::character varying(3) AS data_upgraded,
    'NO'::character varying(3) AS hidden_column,
    'NO'::character varying(3) AS virtual_column,
    (a.attnum)::numeric AS segment_column_id,
    (a.attnum)::numeric AS internal_column_id,
    'NONE'::character varying(4) AS histogram,
    (a.attname)::character varying(4000) AS qualified_col_name
   FROM ((((((pg_attribute a
     JOIN pg_class c ON ((c.oid = a.attrelid)))
     JOIN pg_type t ON ((a.atttypid = t.oid)))
     LEFT JOIN pg_attrdef d ON (((c.oid = d.adrelid) AND (a.attnum = d.adnum))))
     JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
     LEFT JOIN pg_stats s ON (((s.schemaname = n.nspname) AND (s.tablename = c.relname) AND (s.attname = a.attname))))
     LEFT JOIN pg_stat_user_tables st ON ((st.relid = c.oid)))
  WHERE ((a.attnum > 0) AND (NOT a.attisdropped) AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text)) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="5f0cc5e1-15c9-4ece-88bd-4f4b8f7bfb31" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6cb7f967-607e-40e0-a5ae-19166da835d8" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="c4dad8dd-c353-41b0-a8c2-868d81d32bd8" name="sys_dba_tab_columns" context="sys_dba_tab_columns" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_TAB_COLUMNS describes the columns of all tables, views, and clusters in the database. Its columns are the same as those in &quot;ALL_TAB_COLUMNS&quot;">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.relname)::character varying(30) AS table_name,
    (a.attname)::character varying(30) AS column_name,
    (format_type(a.atttypid, a.atttypmod))::character varying(106) AS data_type,
    NULL::character varying(3) AS data_type_mod,
    NULL::character varying(30) AS data_type_owner,
    (a.attlen)::numeric AS data_length,
    NULL::numeric AS data_precision,
    NULL::numeric AS data_scale,
        CASE
            WHEN a.attnotnull THEN 'N'::character varying(1)
            ELSE 'Y'::character varying(1)
        END AS nullable,
    (a.attnum)::numeric AS column_id,
    NULL::numeric AS default_length,
    pg_get_expr(d.adbin, d.adrelid) AS data_default,
    (s.n_distinct)::numeric AS num_distinct,
    NULL::numeric AS low_value,
    NULL::numeric AS high_value,
    (s.null_frac)::numeric AS density,
    NULL::numeric AS num_nulls,
    NULL::numeric AS num_buckets,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::numeric AS sample_size,
    'NCHAR_CS'::character varying(44) AS character_set_name,
    NULL::numeric AS char_col_decl_length,
        CASE
            WHEN (COALESCE(st.last_autoanalyze, st.last_analyze) IS NOT NULL) THEN 'YES'::character varying(3)
            ELSE 'NO'::character varying(3)
        END AS global_stats,
    'NO'::character varying(3) AS user_stats,
    (s.avg_width)::numeric AS avg_col_len,
    information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)) AS char_length,
    NULL::character varying(1) AS char_used,
    NULL::character varying(3) AS v80_fmt_image,
    NULL::character varying(3) AS data_upgraded,
    'NONE'::character varying(4) AS histogram
   FROM ((((((pg_attribute a
     JOIN pg_class c ON ((c.oid = a.attrelid)))
     LEFT JOIN pg_attrdef d ON (((c.oid = d.adrelid) AND (a.attnum = d.adnum))))
     JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
     JOIN pg_type t ON ((a.atttypid = t.oid)))
     LEFT JOIN pg_stats s ON (((s.schemaname = n.nspname) AND (s.tablename = c.relname) AND (s.attname = a.attname))))
     LEFT JOIN pg_stat_user_tables st ON ((st.relid = c.oid)))
  WHERE ((a.attnum > 0) AND (NOT a.attisdropped) AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text)) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="784ad077-8785-4b92-90d8-41734ce603ce" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="37d7eaeb-279c-44b5-9b07-fbbd4811bff3" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="a5513c75-4260-4292-908a-4eb57f1e1da7" name="sys_dba_tab_comments" context="sys_dba_tab_comments" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.relname)::character varying(30) AS table_name,
        CASE
            WHEN (c.relkind = 'r'::"char") THEN 'TABLE'::text
            WHEN (c.relkind = 'v'::"char") THEN 'VIEW'::text
            ELSE NULL::text
        END AS table_type,
    (obj_description(c.oid))::character varying(4000) AS comments,
    (0)::numeric AS origin_con_id
   FROM (pg_class c
     JOIN pg_namespace n ON ((c.relnamespace = n.oid)))
  WHERE ((c.relkind = ANY (ARRAY['r'::"char", 'v'::"char"])) AND (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text)) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="db0c01e7-e513-4874-a19a-132be40c87b5" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3dad233d-76af-4cce-ac78-9411a6f79eb6" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="21b60fff-4907-45e6-a38f-04aaa1cce71f" name="sys_dba_tables" context="sys_dba_tables" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="The SYS.DBA_TABLES view describes all tables in the database.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (t.schemaname)::character varying(30) AS owner,
    (t.tablename)::character varying(30) AS table_name,
    (t.tablespace)::character varying(30) AS tablespace_name,
    NULL::character varying(30) AS cluster_name,
    NULL::character varying(30) AS iot_name,
    'VALID'::character varying(8) AS status,
    NULL::numeric AS pct_free,
    NULL::numeric AS pct_used,
    NULL::numeric AS ini_trans,
    NULL::numeric AS max_trans,
    NULL::numeric AS initial_extent,
    NULL::numeric AS next_extent,
    NULL::numeric AS min_extents,
    NULL::numeric AS max_extents,
    NULL::numeric AS pct_increase,
    NULL::numeric AS freelists,
    NULL::numeric AS freelist_groups,
    'NO'::character varying(3) AS logging,
    'N'::character varying(1) AS backed_up,
    stat.n_live_tup AS num_rows,
    NULL::numeric AS blocks,
    NULL::numeric AS empty_blocks,
    NULL::numeric AS avg_space,
    NULL::numeric AS chain_cnt,
    NULL::numeric AS avg_row_len,
    NULL::numeric AS avg_space_freelist_blocks,
    NULL::numeric AS num_freelist_blocks,
    NULL::character varying(10) AS degree,
    NULL::character varying(10) AS instances,
    NULL::character varying(5) AS cache,
    NULL::character varying(8) AS table_lock,
    NULL::numeric AS sample_size,
    (COALESCE(stat.last_autoanalyze, stat.last_analyze))::date AS last_analyzed,
    'NO'::character varying(3) AS partitioned,
    NULL::character varying(12) AS iot_type,
        CASE
            WHEN ((n.nspname !~ '^pg_toast'::text) AND (n.nspname ~~ 'pg_temp%'::text)) THEN 'Y'::text
            ELSE 'N'::text
        END AS temporary,
    'N'::character varying(1) AS secondary,
    'NO'::character varying(3) AS nested,
    'DEFAULT'::character varying(7) AS buffer_pool,
    'DEFAULT'::character varying(7) AS flash_cache,
    'DEFAULT'::character varying(7) AS cell_flash_cache,
    'DISABLED'::character varying(8) AS row_movement,
    'NO'::character varying(3) AS global_stats,
    NULL::character varying(3) AS user_stats,
    NULL::character varying(15) AS duration,
    'DISABLED'::character varying(8) AS skip_corrupt,
    'NO'::character varying(3) AS monitoring,
    NULL::character varying(30) AS cluster_owner,
    'DISABLED'::character varying(8) AS dependencies,
    'DISABLED'::character varying(8) AS compression,
    NULL::character varying(12) AS compress_for,
    'NO'::character varying(3) AS dropped,
    NULL::character varying(3) AS read_only,
    'YES'::character varying(3) AS segment_created,
    'DEFAULT'::character varying(7) AS result_cache
   FROM ((pg_tables t
     JOIN pg_stat_user_tables stat ON (((t.schemaname = stat.schemaname) AND (t.tablename = stat.relname))))
     JOIN pg_namespace n ON ((t.schemaname = n.nspname)))
  WHERE (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR (pg_has_role('rds_superuser'::name, 'member'::text) AND (t.schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name]))));]]></complex-attribute>
                        <category _I_D="7e5f1d92-68fc-49df-92b8-d981570f1648" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9495389c-d835-424e-b239-4f4c6995fa4e" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="4a736f12-23b0-41e8-94e4-2a8ed89354e0" name="sys_dba_triggers" context="sys_dba_triggers" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_TRIGGERS describes all triggers in the database.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(128) AS owner,
    (trg.tgname)::character varying(128) AS trigger_name,
    (
        CASE ((trg.tgtype)::integer & 66)
            WHEN 2 THEN ('BEFORE'::text ||
            CASE ((trg.tgtype)::integer & 1)
                WHEN 1 THEN ' EACH ROW'::text
                ELSE 'STATEMENT'::text
            END)
            WHEN 64 THEN 'INSTEAD OF'::text
            ELSE ('AFTER'::text ||
            CASE ((trg.tgtype)::integer & 1)
                WHEN 1 THEN ' EACH ROW'::text
                ELSE 'STATEMENT'::text
            END)
        END)::character varying(16) AS trigger_type,
    (
        CASE ((trg.tgtype)::integer & ((28)::smallint)::integer)
            WHEN 32 THEN 'TRUNCATE'::text
            WHEN 16 THEN 'UPDATE'::text
            WHEN 8 THEN 'DELETE'::text
            WHEN 4 THEN 'INSERT'::text
            WHEN 20 THEN 'INSERT OR UPDATE'::text
            WHEN 28 THEN 'INSERT OR UPDATE OR DELETE'::text
            WHEN 24 THEN 'UPDATE OR DELETE'::text
            WHEN 12 THEN 'INSERT OR DELETE'::text
            ELSE NULL::text
        END)::character varying(246) AS triggering_event,
    (ns.nspname)::character varying(128) AS table_owner,
    (
        CASE ((trg.tgtype)::integer & 66)
            WHEN 64 THEN 'VIEW'::text
            ELSE 'TABLE'::text
        END)::character varying(18) AS base_object_type,
    (tbl.relname)::character varying(128) AS table_name,
    (( SELECT string_agg((a.attname)::text, ', '::text) AS string_agg
           FROM pg_attribute a
          WHERE ((a.attrelid = tbl.oid) AND (a.attnum = ANY ((trg.tgattr)::smallint[])))))::character varying(4000) AS column_name,
    'REFERENCING NEW AS NEW OLD AS OLD'::character varying(422) AS referencing_names,
    (
        CASE
            WHEN pg_has_role(tbl.relowner, 'USAGE'::text) THEN (regexp_match(pg_get_triggerdef(trg.oid), '.{35,} WHEN \((.+)\) EXECUTE PROCEDURE'::text))[1]
            ELSE NULL::text
        END)::character varying(4000) AS when_clause,
    (
        CASE
            WHEN (trg.tgenabled = 'D'::"char") THEN 'DISABLED'::text
            ELSE 'ENABLED'::text
        END)::character varying(8) AS status,
    (obj_description(trg.oid))::character varying(400) AS description,
    'PL/SQL'::character varying(11) AS action_type,
    (((n.nspname)::text || '.'::text) || (proc.proname)::text) AS trigger_body,
    'NO'::character varying(3) AS crossedition,
    'NO'::character varying(3) AS before_statement,
    'NO'::character varying(3) AS before_row,
    'NO'::character varying(3) AS after_row,
    'NO'::character varying(3) AS after_statement,
    'NO'::character varying(3) AS instead_of_row,
    (
        CASE ((trg.tgtype)::integer & 66)
            WHEN 2 THEN 'YES'::text
            WHEN 64 THEN 'NO'::text
            ELSE 'YES'::text
        END)::character varying(3) AS fire_once,
    'NO'::character varying(3) AS apply_server_only
   FROM ((((pg_trigger trg
     JOIN pg_proc proc ON ((proc.oid = trg.tgfoid)))
     JOIN pg_namespace n ON ((n.oid = proc.pronamespace)))
     JOIN pg_class tbl ON ((trg.tgrelid = tbl.oid)))
     JOIN pg_namespace ns ON ((ns.oid = tbl.relnamespace)))
  WHERE ((NOT trg.tgisinternal) AND (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text)));]]></complex-attribute>
                        <category _I_D="b1f8658c-8641-4575-87c9-088971d4cc68" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ab8664b7-eb61-4870-9ae5-2e2c1cfd7943" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="34ff1993-3137-488d-9768-58b42ac81cbe" name="sys_dba_users" context="sys_dba_users" subcategories-loading="none" object-loading="extended" is-updatable="YES" check-option="NONE" comment="describes all users of the database and contains more columns than ALL_USERS.">
                        <complex-attribute name="sql"><![CDATA[ SELECT pg_namespace.nspname AS username,
    pg_namespace.nspowner AS user_id,
    NULL::character varying(30) AS password,
    'OPEN'::character varying(32) AS account_status,
    NULL::timestamp without time zone AS lock_date,
    NULL::timestamp without time zone AS expiry_date,
    'USERS'::character varying(30) AS default_tablespace,
    'TEMP'::character varying(30) AS temporary_tablespace,
    NULL::timestamp without time zone AS created,
    'DEFAULT'::character varying(30) AS profile,
    NULL::character varying(30) AS initial_rsrc_consumer_group,
    NULL::character varying(4000) AS external_name,
    NULL::character varying(8) AS password_versions,
    NULL::character varying(1) AS editions_enabled,
    'PASSWORD'::character varying(8) AS authentication_type
   FROM pg_namespace
  WHERE (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text));]]></complex-attribute>
                        <category _I_D="2258cf34-0dbf-43f2-88c8-48c057178450" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="374e1441-cb45-4bfe-a709-3c4aa65bed71" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="65eb8d70-dafd-46f8-8628-0700e267fac2" name="sys_dba_views" context="sys_dba_views" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="The SYS.DBA_VIEWS view describes all views in the database.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (pg_views.schemaname)::character varying(30) AS owner,
    (pg_views.viewname)::character varying(30) AS view_name,
    (length(pg_views.definition))::numeric AS text_length,
    (pg_views.definition)::character varying(409600) AS text,
    NULL::numeric AS type_text_length,
    NULL::character varying(4000) AS type_text,
    NULL::numeric AS oid_text_length,
    NULL::character varying(4000) AS oid_text,
    NULL::character varying(30) AS view_type_owner,
    NULL::character varying(30) AS view_type,
    NULL::character varying(30) AS superview_name,
    'N'::character varying(1) AS editioning_view,
    'Y'::character varying(1) AS read_only
   FROM pg_views
  WHERE ((( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text)) AND (pg_views.schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="31d5d438-79c7-430f-bc45-f1f04adeedce" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7af6ca4f-380f-4d4d-bb80-13eda0515987" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="12de4490-e613-4ce7-9432-f42ab5de693c" name="sys_user_cons_columns" context="sys_user_cons_columns" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_CONS_COLUMNS describes columns that are owned by the current user and that are specified in constraint definitions.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (x.cstrschema)::character varying(128) AS owner,
    (x.cstrname)::character varying(128) AS constraint_name,
    (x.tblname)::character varying(128) AS table_name,
    (x.colname)::character varying(4000) AS column_name,
    (rank() OVER (PARTITION BY x.cstrschema, x.tblname, x.cstrname ORDER BY x.colnum))::smallint AS "position"
   FROM (( SELECT DISTINCT nr.nspname,
            r.relname,
            r.relowner,
            a.attname,
            a.attnum,
            nc.nspname,
            c.conname
           FROM pg_namespace nr,
            pg_class r,
            pg_attribute a,
            pg_depend d,
            pg_namespace nc,
            pg_constraint c
          WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND (d.refclassid = ('pg_class'::regclass)::oid) AND (d.refobjid = r.oid) AND (d.refobjsubid = a.attnum) AND (d.classid = ('pg_constraint'::regclass)::oid) AND (d.objid = c.oid) AND (c.connamespace = nc.oid) AND (c.contype = 'c'::"char") AND (r.relkind = ANY (ARRAY['r'::"char", 'p'::"char"])) AND (NOT a.attisdropped))
        UNION ALL
         SELECT nr.nspname,
            r.relname,
            r.relowner,
            a.attname,
            a.attnum,
            nc.nspname,
            c.conname
           FROM pg_namespace nr,
            pg_class r,
            pg_attribute a,
            pg_namespace nc,
            pg_constraint c
          WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND (nc.oid = c.connamespace) AND (r.oid =
                CASE c.contype
                    WHEN 'f'::"char" THEN c.confrelid
                    ELSE c.conrelid
                END) AND (a.attnum = ANY (
                CASE c.contype
                    WHEN 'f'::"char" THEN c.confkey
                    ELSE c.conkey
                END)) AND (NOT a.attisdropped) AND (c.contype = ANY (ARRAY['p'::"char", 'u'::"char", 'f'::"char"])) AND (r.relkind = ANY (ARRAY['r'::"char", 'p'::"char"])))) x(tblschema, tblname, tblowner, colname, colnum, cstrschema, cstrname)
     JOIN pg_user u ON ((u.usesysid = x.tblowner)))
  WHERE (u.usename = USER);]]></complex-attribute>
                        <category _I_D="bfb4753c-652f-414b-8373-39a031aced22" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="20e261e7-19b8-428f-9d83-c2e515da1c3d" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="0d5d7c83-257e-48f1-8339-ec4a4b3a350d" name="sys_user_constraints" context="sys_user_constraints" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_CONSTRAINTS describes all constraint definitions on tables owned by the current user">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.conname)::character varying(30) AS constraint_name,
    (c.contype)::character varying(1) AS constraint_type,
    (cl.relname)::character varying(30) AS table_name,
    pg_get_constraintdef(c.oid) AS search_condition,
    (n_ref.nspname)::character varying(30) AS r_owner,
    (c_ref.conname)::character varying(30) AS r_constraint_name,
        CASE c.confdeltype
            WHEN 'a'::"char" THEN 'no action'::character varying(9)
            WHEN 'r'::"char" THEN 'restrict'::character varying(9)
            WHEN 'c'::"char" THEN 'cascade'::character varying(9)
            WHEN 'n'::"char" THEN 'set null'::character varying(9)
            WHEN 'd'::"char" THEN 'set default'::character varying(11)
            ELSE NULL::character varying(9)
        END AS delete_rule,
    'ENABLED'::character varying(8) AS status,
        CASE
            WHEN c.condeferrable THEN 'DEFERRABLE'::character varying(14)
            ELSE 'NOT DEFERRABLE'::character varying(14)
        END AS "deferrable",
        CASE
            WHEN c.condeferred THEN 'DEFERRED'::character varying(9)
            ELSE 'IMMEDIATE'::character varying(9)
        END AS deferred,
        CASE
            WHEN c.convalidated THEN 'VALIDATED'::character varying(13)
            ELSE 'NOT VALIDATED'::character varying(13)
        END AS validated,
    'GENERATED NAME'::character varying(14) AS generated,
    NULL::character varying(3) AS bad,
    NULL::character varying(4) AS rely,
    NULL::date AS last_change,
    (n.nspname)::character varying(30) AS index_owner,
    (cl_ind.relname)::character varying(30) AS index_name,
    NULL::character varying(7) AS invalid,
    NULL::character varying(14) AS view_related
   FROM ((((((((pg_constraint c
     JOIN pg_namespace n ON ((n.oid = c.connamespace)))
     JOIN pg_class cl ON ((cl.oid = c.conrelid)))
     JOIN pg_user u ON ((cl.relowner = u.usesysid)))
     LEFT JOIN pg_class cl_ref ON ((cl_ref.oid = c.confrelid)))
     LEFT JOIN pg_namespace n_ref ON ((n_ref.oid = cl_ref.relnamespace)))
     LEFT JOIN pg_constraint c_ref ON (((c_ref.conrelid = c.confrelid) AND (c_ref.contype = 'p'::"char"))))
     LEFT JOIN pg_index i ON ((i.indrelid = cl_ref.oid)))
     LEFT JOIN pg_class cl_ind ON ((cl_ind.oid = c.conindid)))
  WHERE (u.usename = USER);]]></complex-attribute>
                        <category _I_D="703e081f-73ca-433a-90f8-e508209019e3" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="08ba0690-f95b-4f85-a02e-4bbe5defaa65" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="dc45ea7e-f3c0-4dcb-a0db-28d2c2e565f7" name="sys_user_ind_columns" context="sys_user_ind_columns" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_IND_COLUMNS describes the columns of the indexes owned by the current user and columns of indexes on tables owned by the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (irel.relname)::character varying(128) AS index_name,
    (trel.relname)::character varying(128) AS table_name,
    (a.attname)::character varying(4000) AS column_name,
    (c.ordinality)::integer AS column_position,
    COALESCE(information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)), information_schema._pg_numeric_precision(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*))) AS column_length,
    COALESCE(information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)), 0) AS char_length,
    (
        CASE ((o.option)::integer & 1)
            WHEN 1 THEN 'DESC'::text
            ELSE 'ASC'::text
        END)::character varying(4) AS descend,
    NULL::integer AS collated_column_id
   FROM ((((((((((pg_index i
     JOIN pg_class trel ON ((trel.oid = i.indrelid)))
     JOIN pg_namespace tnsp ON ((trel.relnamespace = tnsp.oid)))
     JOIN pg_class irel ON ((irel.oid = i.indexrelid)))
     JOIN pg_namespace insp ON ((irel.relnamespace = insp.oid)))
     CROSS JOIN LATERAL unnest(i.indkey) WITH ORDINALITY c(colnum, ordinality))
     LEFT JOIN LATERAL unnest(i.indoption) WITH ORDINALITY o(option, ordinality) ON ((c.ordinality = o.ordinality)))
     JOIN pg_attribute a ON (((trel.oid = a.attrelid) AND (a.attnum = c.colnum))))
     JOIN (pg_type t
     JOIN pg_namespace nt ON ((t.typnamespace = nt.oid))) ON ((a.atttypid = t.oid)))
     JOIN pg_user ui ON ((irel.relowner = ui.usesysid)))
     JOIN pg_user ut ON ((trel.relowner = ut.usesysid)))
  WHERE ((ui.usename = USER) OR (ut.usename = USER));]]></complex-attribute>
                        <category _I_D="c704637c-7d19-4f06-b3a3-e946fb60cba2" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9ff51e11-4723-4a79-a72a-1c79a91549e1" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="8e539542-1b86-41b5-9e51-223df7e93d80" name="sys_user_indexes" context="sys_user_indexes" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_INDEXES describes the indexes owned by the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (irel.relname)::character varying(128) AS index_name,
    (
        CASE
            WHEN (i.indexprs IS NULL) THEN 'NORMAL'::text
            ELSE 'FUNCTION-BASED NORMAL'::text
        END)::character varying(27) AS index_type,
    (tnsp.nspname)::character varying(128) AS table_owner,
    (trel.relname)::character varying(128) AS table_name,
    'TABLE'::character varying(11) AS table_type,
    (
        CASE
            WHEN i.indisunique THEN 'UNIQUE'::text
            ELSE 'NONUNIQUE'::text
        END)::character varying(9) AS uniqueness,
    'DISABLED'::character varying(13) AS compression,
    NULL::integer AS prefix_length,
    (ts.spcname)::character varying(30) AS tablespace_name,
    NULL::integer AS ini_trans,
    NULL::integer AS max_trans,
    NULL::integer AS initial_extent,
    NULL::integer AS next_extent,
    NULL::integer AS min_extents,
    NULL::integer AS max_extents,
    NULL::integer AS pct_increase,
    NULL::integer AS pct_threshold,
    NULL::integer AS include_column,
    NULL::integer AS freelists,
    NULL::integer AS freelist_groups,
    NULL::integer AS pct_free,
    (
        CASE trel.relpersistence
            WHEN 'p'::"char" THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS logging,
    NULL::integer AS blevel,
    NULL::integer AS leaf_blocks,
    (
        CASE
            WHEN i.indisprimary THEN st.n_live_tup
            ELSE NULL::bigint
        END)::integer AS distinct_keys,
    NULL::integer AS avg_leaf_blocks_per_key,
    NULL::integer AS avg_data_blocks_per_key,
    NULL::integer AS clustering_factor,
    (
        CASE
            WHEN i.indisready THEN 'ENABLED'::text
            ELSE 'DISABLED'::text
        END)::character varying(8) AS status,
    (st.n_live_tup)::integer AS num_rows,
    NULL::integer AS sample_size,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::character varying(40) AS degree,
    NULL::character varying(40) AS instances,
    (
        CASE
            WHEN trel.relispartition THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS partitioned,
    (
        CASE trel.relpersistence
            WHEN 't'::"char" THEN 'Y'::text
            ELSE 'N'::text
        END)::character varying(1) AS temporary,
    'N'::character varying(1) AS generated,
    'N'::character varying(1) AS secondary,
    'DEFAULT'::character varying(7) AS buffer_pool,
    'DEFAULT'::character varying(7) AS flash_cache,
    'DEFAULT'::character varying(7) AS cell_flash_cache,
    'NO'::character varying(3) AS user_stats,
    NULL::character varying(15) AS duration,
    NULL::integer AS pct_direct_access,
    NULL::character varying(128) AS ityp_owner,
    NULL::character varying(128) AS ityp_name,
    NULL::character varying(1000) AS parameters,
    'NO'::character varying(3) AS global_stats,
    NULL::character varying(12) AS domidx_status,
    NULL::character varying(6) AS domidx_opstatus,
    NULL::character varying(8) AS funcidx_status,
    'NO'::character varying(3) AS join_index,
    'NO'::character varying(3) AS iot_redundant_pkey_elim,
    'NO'::character varying(3) AS dropped,
    (
        CASE
            WHEN i.indisvalid THEN 'VISIBLE'::text
            ELSE 'INVISIBLE'::text
        END)::character varying(9) AS visibility,
    NULL::character varying(14) AS domidx_management,
    (
        CASE irel.relpages
            WHEN 0 THEN 'NO'::text
            ELSE 'YES'::text
        END)::character varying(3) AS segment_created,
    'NO'::character varying(3) AS orphaned_entries,
    (
        CASE
            WHEN (i.indpred IS NULL) THEN 'FULL'::text
            ELSE 'PARTIAL'::text
        END)::character varying(7) AS indexing
   FROM (((((((pg_index i
     JOIN pg_class trel ON ((trel.oid = i.indrelid)))
     JOIN pg_namespace tnsp ON ((trel.relnamespace = tnsp.oid)))
     JOIN pg_class irel ON ((irel.oid = i.indexrelid)))
     JOIN pg_am am ON (((am.oid = irel.relam) AND (am.amname = 'btree'::name))))
     LEFT JOIN pg_tablespace ts ON ((ts.oid = irel.reltablespace)))
     LEFT JOIN pg_stat_all_tables st ON (((st.schemaname = tnsp.nspname) AND (st.relname = trel.relname))))
     JOIN pg_user u ON ((irel.relowner = u.usesysid)))
  WHERE (u.usename = USER);]]></complex-attribute>
                        <category _I_D="ddb06eac-e549-42e3-8e36-59028a368cd4" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7c751d58-e2a8-464d-9a92-b3aec867f8dc" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="fc504bba-899e-41a5-b1e6-b213f3f7eb5b" name="sys_user_objects" context="sys_user_objects" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_OBJECTS describes all objects owned by the current user">
                        <complex-attribute name="sql"><![CDATA[ SELECT (c.relname)::character varying(30) AS object_name,
    NULL::character varying(30) AS subobject_name,
    (c.oid)::bigint AS object_id,
        CASE
            WHEN (c.relkind = ANY (ARRAY['t'::"char", 'r'::"char"])) THEN (c.oid)::bigint
            ELSE NULL::bigint
        END AS data_object_id,
        CASE c.relkind
            WHEN 'r'::"char" THEN 'ordinary table'::character varying(17)
            WHEN 'i'::"char" THEN 'index'::character varying(17)
            WHEN 'S'::"char" THEN 'sequence'::character varying(17)
            WHEN 'v'::"char" THEN 'view'::character varying(17)
            WHEN 'c'::"char" THEN 'composite type'::character varying(17)
            WHEN 't'::"char" THEN 'TOAST table'::character varying(17)
            WHEN 'f'::"char" THEN 'foreign table'::character varying(17)
            ELSE NULL::character varying(17)
        END AS object_type,
    NULL::date AS created,
    NULL::date AS last_ddl_time,
    NULL::character varying(78) AS "timestamp",
    'VALID'::character varying(7) AS status,
        CASE c.relpersistence
            WHEN 't'::"char" THEN 'Y'::text
            ELSE 'N'::text
        END AS temporary,
    'N'::character varying(1) AS generated,
    'N'::character varying(1) AS secondary,
    (c.reltablespace)::integer AS namespace,
    NULL::character varying(30) AS edition_name
   FROM ((pg_class c
     JOIN pg_namespace n ON ((c.relnamespace = n.oid)))
     JOIN pg_user u ON ((c.relowner = u.usesysid)))
  WHERE ((u.usename = USER) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="1dd8f5d0-9396-4f99-abae-9df82174c869" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="06e04999-a1fb-433b-a348-788aef24c8ca" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="03b2e8c5-740c-4ddd-a3cb-10b001fb0c6e" name="sys_user_policies" context="sys_user_policies" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_POLICIES describes all Oracle Virtual Private Database (VPD) security policies associated with objects owned by the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (p.tablename)::character varying(128) AS object_name,
    'SYS_DEFAULT'::character varying(128) AS policy_group,
    (p.policyname)::character varying(128) AS policy_name,
    (p.schemaname)::character varying(128) AS pf_owner,
    NULL::character varying(128) AS package,
    NULL::character varying(128) AS function,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'SELECT'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS sel,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'INSERT'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS ins,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'UPDATE'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS upd,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'DELETE'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS del,
    'NO'::character varying(3) AS idx,
    (
        CASE
            WHEN (p.with_check IS NOT NULL) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS chk_option,
    'YES'::character varying(3) AS enable,
    'NO'::character varying(3) AS static_policy,
    'DYNAMIC'::character varying(24) AS policy_type,
    'NO'::character varying(3) AS long_predicate,
    'NO'::character varying(3) AS common,
    'NO'::character varying(3) AS inherited
   FROM (pg_policies p
     JOIN pg_tables t ON (((t.schemaname = p.schemaname) AND (t.tablename = p.tablename))))
  WHERE (t.tableowner = USER);]]></complex-attribute>
                        <category _I_D="91ae65cb-047f-43b9-bfe4-c96833c53e83" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3ae263d2-cc10-422f-8d19-1e9139edb177" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="a18606db-8cf2-467c-90a6-36a1b33a8f83" name="sys_user_sequences" context="sys_user_sequences" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_SEQUENCES describes all sequences owned by the current user">
                        <complex-attribute name="sql"><![CDATA[ SELECT (s.sequence_name)::character varying(30) AS sequence_name,
    (s.minimum_value)::numeric AS min_value,
    (s.maximum_value)::numeric AS max_value,
    (s.increment)::numeric AS increment_by,
        CASE s.cycle_option
            WHEN 'NO'::text THEN 'N'::character varying(1)
            WHEN 'YES'::text THEN 'Y'::character varying(1)
            ELSE NULL::character varying
        END AS cycle_flag,
    'N'::character varying(1) AS order_flag,
    0 AS cache_size,
    currval((((quote_ident((s.sequence_schema)::text) || '.'::text) || quote_ident((s.sequence_name)::text)))::regclass) AS last_number
   FROM ((information_schema.sequences s
     JOIN pg_class c ON (((c.relname = (s.sequence_name)::name) AND (c.relkind = 'S'::"char"))))
     JOIN pg_user u ON ((c.relowner = u.usesysid)))
  WHERE (u.usename = USER);]]></complex-attribute>
                        <category _I_D="e8210b2a-a31c-440b-838d-0707a448c444" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1ad148a0-0eab-43c7-9053-23458845997b" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="b89cf678-ed43-4c1a-b287-79bca473a5b7" name="sys_user_source" context="sys_user_source" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspowner)::character varying(30) AS owner,
    (s.name)::character varying(30) AS name,
    (s.type)::character varying(12) AS type,
    (generate_subscripts(s.text, 1))::numeric AS line,
    (unnest(s.text))::character varying(4000) AS text
   FROM (( SELECT c.relnamespace AS nsp,
            t.tgname AS name,
            'TRIGGER'::text AS type,
            string_to_array(pg_get_triggerdef(t.oid), chr(10)) AS text
           FROM ((pg_trigger t
             JOIN pg_class c ON ((c.oid = t.tgrelid)))
             JOIN pg_user u ON ((u.usesysid = c.relowner)))
          WHERE (u.usename = USER)
        UNION ALL
         SELECT f.pronamespace AS nsp,
            f.proname AS name,
                CASE
                    WHEN (f.prokind = 'f'::"char") THEN 'FUNCTION'::text
                    WHEN (f.prokind = 'p'::"char") THEN 'PROCEDURE'::text
                    ELSE NULL::text
                END AS type,
            string_to_array(pg_get_functiondef(f.oid), chr(10)) AS text
           FROM ((pg_proc f
             JOIN pg_type ret ON ((f.prorettype = ret.oid)))
             JOIN pg_user u ON ((u.usesysid = f.proowner)))
          WHERE ((f.prokind = ANY (ARRAY['f'::"char", 'p'::"char"])) AND (u.usename = USER))
        UNION ALL
         SELECT t.typnamespace AS nsp,
            t.typname AS name,
            'TYPE'::text AS type,
                CASE
                    WHEN (t.typtype = 'c'::"char") THEN ARRAY( SELECT ((('CREATE OR REPLACE TYPE '::text || (t.typname)::text) || ' AS ('::text) || chr(10))
                    UNION ALL
                     SELECT (((((a.attname)::text || ' '::text) || format_type(a.atttypid, a.atttypmod)) ||
                            CASE
                                WHEN (lead(a.attrelid, 1) OVER () IS NULL) THEN ''::text
                                ELSE ','::text
                            END) || chr(10))
                       FROM pg_attribute a
                      WHERE (a.attrelid = t.typrelid)
                    UNION ALL
                     SELECT ');'::text)
                    WHEN (t.typtype = 'd'::"char") THEN ARRAY( SELECT ((('CREATE OR REPLACE DOMAIN '::text || (t.typname)::text) || ' AS '::text) || format_type(tt.oid, NULL::integer))
                       FROM pg_type tt
                      WHERE (tt.typarray = t.typbasetype))
                    ELSE NULL::text[]
                END AS text
           FROM (pg_type t
             JOIN pg_user u ON ((u.usesysid = t.typowner)))
          WHERE (((t.typrelid = (0)::oid) OR ( SELECT (c.relkind = 'c'::"char")
                   FROM pg_class c
                  WHERE (c.oid = t.typrelid))) AND (NOT (EXISTS ( SELECT 1
                   FROM pg_type el
                  WHERE ((el.oid = t.typelem) AND (el.typarray = t.oid))))) AND (u.usename = USER))) s
     JOIN pg_namespace n ON ((s.nsp = n.oid)))
  WHERE ((n.nspname <> 'pg_catalog'::name) AND (n.nspname <> 'information_schema'::name) AND (n.nspname !~ '^pg_toast'::text));]]></complex-attribute>
                        <category _I_D="29a5f927-9160-4b81-afcd-6d1ed0739534" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="80098617-f4bb-4a6c-ac51-cadd4e47ae4d" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="1b610d99-46fb-4cc2-a79f-28856120b588" name="sys_user_tab_cols" context="sys_user_tab_cols" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="Describes the columns of the tables, views, and clusters owned by the current user. This view does not display the OWNER column.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (c.relname)::character varying(30) AS table_name,
    (a.attname)::character varying(30) AS column_name,
    (format_type(a.atttypid, a.atttypmod))::character varying(106) AS data_type,
    NULL::character varying(3) AS data_type_mod,
    NULL::character varying(30) AS data_type_owner,
    (a.attlen)::numeric AS data_length,
    NULL::numeric AS data_precision,
    NULL::numeric AS data_scale,
        CASE
            WHEN a.attnotnull THEN 'N'::character varying(1)
            ELSE 'Y'::character varying(1)
        END AS nullable,
    (a.attnum)::numeric AS column_id,
    NULL::numeric AS default_length,
    pg_get_expr(d.adbin, d.adrelid) AS data_default,
    (s.n_distinct)::numeric AS num_distinct,
    NULL::numeric AS low_value,
    NULL::numeric AS high_value,
    (s.null_frac)::numeric AS density,
    NULL::numeric AS num_nulls,
    NULL::numeric AS num_buckets,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::numeric AS sample_size,
    'NCHAR_CS'::character varying(44) AS character_set_name,
    NULL::numeric AS char_col_decl_length,
        CASE
            WHEN (COALESCE(st.last_autoanalyze, st.last_analyze) IS NOT NULL) THEN 'YES'::character varying(3)
            ELSE 'NO'::character varying(3)
        END AS global_stats,
    'NO'::character varying(3) AS user_stats,
    (s.avg_width)::numeric AS avg_col_len,
    information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)) AS char_length,
    NULL::character varying(1) AS char_used,
    NULL::character varying(3) AS v80_fmt_image,
    NULL::character varying(3) AS data_upgraded,
    'NO'::character varying(3) AS hidden_column,
    'NO'::character varying(3) AS virtual_column,
    (a.attnum)::numeric AS segment_column_id,
    (a.attnum)::numeric AS internal_column_id,
    'NONE'::character varying(4) AS histogram,
    (a.attname)::character varying(4000) AS qualified_col_name
   FROM (((((((pg_attribute a
     JOIN pg_class c ON ((c.oid = a.attrelid)))
     JOIN pg_user u ON ((c.relowner = u.usesysid)))
     JOIN pg_type t ON ((a.atttypid = t.oid)))
     LEFT JOIN pg_attrdef d ON (((c.oid = d.adrelid) AND (a.attnum = d.adnum))))
     JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
     LEFT JOIN pg_stats s ON (((s.schemaname = n.nspname) AND (s.tablename = c.relname) AND (s.attname = a.attname))))
     LEFT JOIN pg_stat_user_tables st ON ((st.relid = c.oid)))
  WHERE ((a.attnum > 0) AND (NOT a.attisdropped) AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND (u.usename = USER) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="44e17769-0275-4e45-8567-00b2596a2fbb" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="44cc2c94-fab3-47ba-b4ae-f45f56329c94" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="89cc28d7-6acc-4592-a62c-d154a6854851" name="sys_user_tab_columns" context="sys_user_tab_columns" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_TAB_COLUMNS describes the columns of the tables, views, and clusters owned by the current user">
                        <complex-attribute name="sql"><![CDATA[ SELECT (c.relname)::character varying(30) AS table_name,
    (a.attname)::character varying(30) AS column_name,
    (format_type(a.atttypid, a.atttypmod))::character varying(106) AS data_type,
    NULL::character varying(3) AS data_type_mod,
    NULL::character varying(30) AS data_type_owner,
    (a.attlen)::numeric AS data_length,
    NULL::numeric AS data_precision,
    NULL::numeric AS data_scale,
        CASE
            WHEN a.attnotnull THEN 'N'::character varying(1)
            ELSE 'Y'::character varying(1)
        END AS nullable,
    (a.attnum)::numeric AS column_id,
    NULL::numeric AS default_length,
    pg_get_expr(d.adbin, d.adrelid) AS data_default,
    (s.n_distinct)::numeric AS num_distinct,
    NULL::numeric AS low_value,
    NULL::numeric AS high_value,
    (s.null_frac)::numeric AS density,
    NULL::numeric AS num_nulls,
    NULL::numeric AS num_buckets,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::numeric AS sample_size,
    'NCHAR_CS'::character varying(44) AS character_set_name,
    NULL::numeric AS char_col_decl_length,
        CASE
            WHEN (COALESCE(st.last_autoanalyze, st.last_analyze) IS NOT NULL) THEN 'YES'::character varying(3)
            ELSE 'NO'::character varying(3)
        END AS global_stats,
    'NO'::character varying(3) AS user_stats,
    (s.avg_width)::numeric AS avg_col_len,
    information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)) AS char_length,
    NULL::character varying(1) AS char_used,
    NULL::character varying(3) AS v80_fmt_image,
    NULL::character varying(3) AS data_upgraded,
    'NONE'::character varying(4) AS histogram
   FROM (((((((pg_attribute a
     JOIN pg_class c ON ((c.oid = a.attrelid)))
     JOIN pg_user u ON ((c.relowner = u.usesysid)))
     LEFT JOIN pg_attrdef d ON (((c.oid = d.adrelid) AND (a.attnum = d.adnum))))
     JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
     JOIN pg_type t ON ((a.atttypid = t.oid)))
     LEFT JOIN pg_stats s ON (((s.schemaname = n.nspname) AND (s.tablename = c.relname) AND (s.attname = a.attname))))
     LEFT JOIN pg_stat_user_tables st ON ((st.relid = c.oid)))
  WHERE ((a.attnum > 0) AND (NOT a.attisdropped) AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND (u.usename = USER) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="cae496ed-d3aa-4291-b399-0790103ff6b6" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="17f96d2a-752d-4dd4-a113-16644c296788" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="c92977ba-8a86-403c-9568-3036dba20e18" name="sys_user_tab_comments" context="sys_user_tab_comments" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE">
                        <complex-attribute name="sql"><![CDATA[ SELECT (c.relname)::character varying(30) AS table_name,
        CASE
            WHEN (c.relkind = 'r'::"char") THEN 'TABLE'::text
            WHEN (c.relkind = 'v'::"char") THEN 'VIEW'::text
            ELSE NULL::text
        END AS table_type,
    (obj_description(c.oid))::character varying(4000) AS comments
   FROM ((pg_class c
     JOIN pg_namespace n ON ((c.relnamespace = n.oid)))
     JOIN pg_user u ON ((u.usesysid = c.relowner)))
  WHERE ((c.relkind = ANY (ARRAY['r'::"char", 'v'::"char"])) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])) AND (u.usename = USER));]]></complex-attribute>
                        <category _I_D="70d5238e-4b03-426c-9dfe-1a301c719abd" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="70b160b6-bf43-4266-9cc6-6bd13a881de4" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="c6e4a9f6-ddad-46d2-b30a-80ea9b62e6f0" name="sys_user_tables" context="sys_user_tables" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_TABLES describes the relational tables owned by the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (t.tablename)::character varying(30) AS table_name,
    (t.tablespace)::character varying(30) AS tablespace_name,
    NULL::character varying(30) AS cluster_name,
    NULL::character varying(30) AS iot_name,
    'VALID'::character varying(8) AS status,
    NULL::numeric AS pct_free,
    NULL::numeric AS pct_used,
    NULL::numeric AS ini_trans,
    NULL::numeric AS max_trans,
    NULL::numeric AS initial_extent,
    NULL::numeric AS next_extent,
    NULL::numeric AS min_extents,
    NULL::numeric AS max_extents,
    NULL::numeric AS pct_increase,
    NULL::numeric AS freelists,
    NULL::numeric AS freelist_groups,
    'NO'::character varying(3) AS logging,
    'N'::character varying(1) AS backed_up,
    stat.n_live_tup AS num_rows,
    NULL::numeric AS blocks,
    NULL::numeric AS empty_blocks,
    NULL::numeric AS avg_space,
    NULL::numeric AS chain_cnt,
    NULL::numeric AS avg_row_len,
    NULL::numeric AS avg_space_freelist_blocks,
    NULL::numeric AS num_freelist_blocks,
    NULL::character varying(10) AS degree,
    NULL::character varying(10) AS instances,
    NULL::character varying(5) AS cache,
    NULL::character varying(8) AS table_lock,
    NULL::numeric AS sample_size,
    (COALESCE(stat.last_autoanalyze, stat.last_analyze))::date AS last_analyzed,
    'NO'::character varying(3) AS partitioned,
    NULL::character varying(12) AS iot_type,
        CASE
            WHEN ((n.nspname !~ '^pg_toast'::text) AND (n.nspname ~~ 'pg_temp%'::text)) THEN 'Y'::text
            ELSE 'N'::text
        END AS temporary,
    'N'::character varying(1) AS secondary,
    'NO'::character varying(3) AS nested,
    'DEFAULT'::character varying(7) AS buffer_pool,
    'DEFAULT'::character varying(7) AS flash_cache,
    'DEFAULT'::character varying(7) AS cell_flash_cache,
    'DISABLED'::character varying(8) AS row_movement,
    'NO'::character varying(3) AS global_stats,
    NULL::character varying(3) AS user_stats,
    NULL::character varying(15) AS duration,
    'DISABLED'::character varying(8) AS skip_corrupt,
    'NO'::character varying(3) AS monitoring,
    NULL::character varying(30) AS cluster_owner,
    'DISABLED'::character varying(8) AS dependencies,
    'DISABLED'::character varying(8) AS compression,
    NULL::character varying(12) AS compress_for,
    'NO'::character varying(3) AS dropped,
    NULL::character varying(3) AS read_only,
    'YES'::character varying(3) AS segment_created,
    'DEFAULT'::character varying(7) AS result_cache
   FROM ((pg_tables t
     JOIN pg_stat_user_tables stat ON (((t.schemaname = stat.schemaname) AND (t.tablename = stat.relname))))
     JOIN pg_namespace n ON ((t.schemaname = n.nspname)))
  WHERE ((t.tableowner = USER) AND (t.schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="ccba1ff6-6ad5-4574-9f6c-7394a27f77b0" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0e3f81a4-3c1d-4473-b2e5-d17d73e0e785" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="06d8ad6b-2dae-4b9c-bc21-7b9c09fd09ba" name="sys_user_triggers" context="sys_user_triggers" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_TRIGGERS describes the triggers owned by the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (trg.tgname)::character varying(128) AS trigger_name,
    (
        CASE ((trg.tgtype)::integer & 66)
            WHEN 2 THEN ('BEFORE'::text ||
            CASE ((trg.tgtype)::integer & 1)
                WHEN 1 THEN ' EACH ROW'::text
                ELSE 'STATEMENT'::text
            END)
            WHEN 64 THEN 'INSTEAD OF'::text
            ELSE ('AFTER'::text ||
            CASE ((trg.tgtype)::integer & 1)
                WHEN 1 THEN ' EACH ROW'::text
                ELSE 'STATEMENT'::text
            END)
        END)::character varying(16) AS trigger_type,
    (
        CASE ((trg.tgtype)::integer & ((28)::smallint)::integer)
            WHEN 32 THEN 'TRUNCATE'::text
            WHEN 16 THEN 'UPDATE'::text
            WHEN 8 THEN 'DELETE'::text
            WHEN 4 THEN 'INSERT'::text
            WHEN 20 THEN 'INSERT OR UPDATE'::text
            WHEN 28 THEN 'INSERT OR UPDATE OR DELETE'::text
            WHEN 24 THEN 'UPDATE OR DELETE'::text
            WHEN 12 THEN 'INSERT OR DELETE'::text
            ELSE NULL::text
        END)::character varying(246) AS triggering_event,
    (ns.nspname)::character varying(128) AS table_owner,
    (
        CASE ((trg.tgtype)::integer & 66)
            WHEN 64 THEN 'VIEW'::text
            ELSE 'TABLE'::text
        END)::character varying(18) AS base_object_type,
    (tbl.relname)::character varying(128) AS table_name,
    (( SELECT string_agg((a.attname)::text, ', '::text) AS string_agg
           FROM pg_attribute a
          WHERE ((a.attrelid = tbl.oid) AND (a.attnum = ANY ((trg.tgattr)::smallint[])))))::character varying(4000) AS column_name,
    'REFERENCING NEW AS NEW OLD AS OLD'::character varying(422) AS referencing_names,
    (
        CASE
            WHEN pg_has_role(tbl.relowner, 'USAGE'::text) THEN (regexp_match(pg_get_triggerdef(trg.oid), '.{35,} WHEN \((.+)\) EXECUTE PROCEDURE'::text))[1]
            ELSE NULL::text
        END)::character varying(4000) AS when_clause,
    (
        CASE
            WHEN (trg.tgenabled = 'D'::"char") THEN 'DISABLED'::text
            ELSE 'ENABLED'::text
        END)::character varying(8) AS status,
    (obj_description(trg.oid))::character varying(400) AS description,
    'PL/SQL'::character varying(11) AS action_type,
    (((n.nspname)::text || '.'::text) || (proc.proname)::text) AS trigger_body,
    'NO'::character varying(3) AS crossedition,
    'NO'::character varying(3) AS before_statement,
    'NO'::character varying(3) AS before_row,
    'NO'::character varying(3) AS after_row,
    'NO'::character varying(3) AS after_statement,
    'NO'::character varying(3) AS instead_of_row,
    (
        CASE ((trg.tgtype)::integer & 66)
            WHEN 2 THEN 'YES'::text
            WHEN 64 THEN 'NO'::text
            ELSE 'YES'::text
        END)::character varying(3) AS fire_once,
    'NO'::character varying(3) AS apply_server_only
   FROM (((((pg_trigger trg
     JOIN pg_proc proc ON ((proc.oid = trg.tgfoid)))
     JOIN pg_namespace n ON ((n.oid = proc.pronamespace)))
     JOIN pg_class tbl ON ((trg.tgrelid = tbl.oid)))
     JOIN pg_namespace ns ON ((ns.oid = tbl.relnamespace)))
     JOIN pg_user u ON ((u.usesysid = tbl.relowner)))
  WHERE ((NOT trg.tgisinternal) AND (u.usename = USER));]]></complex-attribute>
                        <category _I_D="3904c803-e66d-4eb8-ac32-a67981a4426c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f28f8acf-aa94-4732-9e39-1a2b7a061304" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="c09b749b-2bd9-4639-95d4-4becd286dd3d" name="sys_user_users" context="sys_user_users" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_USERS describes the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT n.nspname AS username,
    n.nspowner AS user_id,
    'OPEN'::character varying(32) AS account_status,
    NULL::timestamp without time zone AS lock_date,
    NULL::timestamp without time zone AS expiry_date,
    'USERS'::character varying(30) AS default_tablespace,
    'TEMP'::character varying(30) AS temporary_tablespace,
    NULL::timestamp without time zone AS created,
    NULL::character varying(30) AS initial_rsrc_consumer_group,
    NULL::character varying(4000) AS external_name
   FROM (pg_namespace n
     JOIN pg_user u ON ((n.nspowner = u.usesysid)))
  WHERE (u.usename = USER);]]></complex-attribute>
                        <category _I_D="06cfba7b-64ac-4137-b5d7-e500c3cc4616" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="676e3e13-8102-41d6-8da8-991b6a532409" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="f0d750f6-e80a-4b7d-99b7-0ad4184a4f1a" name="sys_user_views" context="sys_user_views" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_VIEWS describes the views owned by the current user">
                        <complex-attribute name="sql"><![CDATA[ SELECT (pg_views.viewname)::character varying(30) AS view_name,
    (length(pg_views.definition))::numeric AS text_length,
    (pg_views.definition)::character varying(409600) AS text,
    NULL::numeric AS type_text_length,
    NULL::character varying(4000) AS type_text,
    NULL::numeric AS oid_text_length,
    NULL::character varying(4000) AS oid_text,
    NULL::character varying(30) AS view_type_owner,
    NULL::character varying(30) AS view_type,
    NULL::character varying(30) AS superview_name,
    'N'::character varying(1) AS editioning_view,
    'Y'::character varying(1) AS read_only
   FROM pg_views
  WHERE ((pg_views.schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])) AND (pg_views.viewowner = USER));]]></complex-attribute>
                        <category _I_D="3dc4556f-d846-4190-a28a-305d01ec0b4b" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d82a145d-ac6f-4a37-ba30-7449b265bfc5" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="6e042021-5aa2-417b-a1d8-2fc7b5fa6414" name="user_sdo_geom_metadata" context="user_sdo_geom_metadata" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="Contains metadata information for all spatial tables owned by the user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (g.f_table_name)::character varying(32) AS table_name,
    (g.f_geometry_column)::character varying(1024) AS column_name,
    NULL::text AS diminfo,
    (g.srid)::double precision AS srid
   FROM (geometry_columns g
     LEFT JOIN pg_tables p ON (((g.f_table_schema = p.schemaname) AND (g.f_table_name = p.tablename))))
  WHERE (p.tableowner = CURRENT_USER);]]></complex-attribute>
                        <category _I_D="eba3dd66-7712-48a3-abee-e4f16946cd99" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="37ee533e-56d9-46a4-915f-151868c4fc83" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="b5c5cfcc-f2cc-46f7-97c4-f7e9d82b8e97" name="user_sdo_index_info" context="user_sdo_index_info" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="Contains index information for all spatial tables owned by the user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (pgis.indexname)::character varying(32) AS index_name,
    (gc.f_table_schema)::character varying(30) AS table_owner,
    (pgis.tablename)::character varying(30) AS table_name,
    (gc.f_geometry_column)::character varying(2048) AS column_name,
    'rtree'::character varying(32) AS sdo_index_type,
    NULL::character varying(32) AS sdo_index_table,
    (
        CASE pgi.indisvalid
            WHEN true THEN 'valid'::text
            WHEN false THEN 'invalid'::text
            ELSE NULL::text
        END)::character varying(32) AS sdo_index_status
   FROM (((((pg_indexes pgis
     JOIN geometry_columns gc ON (((pgis.schemaname = gc.f_table_schema) AND (pgis.tablename = gc.f_table_name))))
     LEFT JOIN pg_class t ON ((t.relname = pgis.tablename)))
     LEFT JOIN pg_index pgi ON ((t.oid = pgi.indrelid)))
     LEFT JOIN pg_class c ON (((pgi.indexrelid = c.oid) AND (c.relname = pgis.indexname))))
     LEFT JOIN pg_tables p ON (((gc.f_table_schema = p.schemaname) AND (gc.f_table_name = p.tablename))))
  WHERE (p.tableowner = CURRENT_USER);]]></complex-attribute>
                        <category _I_D="d480fa3e-6bbb-4660-9b49-bca886017645" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="afe5c15f-27f2-4233-8bac-c4513eccd575" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="50cef141-262b-43e9-9b3d-8f13f44e2bd4" name="v$instance" context="v$instance" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="This view displays the state of the current instance (emulates Oracle V$INSTANCE view)">
                        <complex-attribute name="sql"><![CDATA[ SELECT aws_oracle_ext."dbms_utility$current_instance"() AS instance_number,
    (inet_server_addr())::character varying AS instance_name,
    (inet_server_addr())::character varying AS host_name,
    current_setting('server_version_num'::text) AS version,
    pg_postmaster_start_time() AS startup_time,
    'OPEN'::character varying AS status,
    'NO'::character varying AS parallel,
    1 AS "THREAD#",
    'FAILED'::character varying AS archiver,
    NULL::character varying AS log_switch_wait,
    'ALLOWED'::character varying AS logins,
    'NO'::character varying AS shutdown_pending,
    'ACTIVE'::character varying AS database_status,
    'PRIMARY_INSTANCE'::character varying AS instance_role,
    'NORMAL'::character varying AS active_state,
    'NO'::character varying AS blocked;]]></complex-attribute>
                        <category _I_D="68fbe5de-27e6-4318-9d3d-4b2373ba4c3f" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="20305e12-431b-4ca4-9ade-cd4bedbc23dd" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="cdee49d8-11ee-4f56-9d2a-79c6cceb8c6c" name="v$nls_parameters" context="v$nls_parameters" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="Emulation for oracle NLS view">
                        <complex-attribute name="sql"><![CDATA[ SELECT "return_v$nls_parameters".parameter,
    "return_v$nls_parameters".value,
    "return_v$nls_parameters".con_id
   FROM aws_oracle_ext."return_v$nls_parameters"() "return_v$nls_parameters"(parameter, value, con_id);]]></complex-attribute>
                        <category _I_D="cac48a75-1a77-45c9-81d3-a4bc9b09603c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cc68eb5c-1cea-48a7-99ab-9d70a189b322" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="d643ece5-cf35-493f-ab9c-86e70f57441d" name="v$version" context="v$version" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="V$VERSION emulation">
                        <complex-attribute name="sql"><![CDATA[ SELECT version() AS banner;]]></complex-attribute>
                        <category _I_D="08bf4caf-78c5-4f01-9780-22c1740ef19b" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4b003f9d-2a32-4058-923a-cd21908adf54" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                </category>
                <category _I_D="05a260c1-41e2-41d0-a875-7f87cb6ab203" name="Collations" order-num="3" objects-loading="empty" subcategories-loading="full" child-type="collation"/>
                <category _I_D="385df205-2fd9-4eb5-bdbf-9e1f6e635b02" name="Operators" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="operator"/>
                <category _I_D="63c58260-a82f-4877-a9a1-affa2286b5d9" name="Rules" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="rule"/>
                <category _I_D="03c8e731-dd74-4524-878c-017268a965aa" name="FTS Configurations" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="ftsconfiguration"/>
                <category _I_D="6d20cfaa-cc24-4e43-acad-d850c6d6efe1" name="FTS Dictionaries" order-num="7" objects-loading="empty" subcategories-loading="full" child-type="ftsdictionary"/>
                <category _I_D="dc63d97d-29b1-4eac-917d-0816b55f7f9e" name="Functions" order-num="8" objects-loading="extended" subcategories-loading="none" child-type="function">
                    <function _I_D="0a4aad49-1d7c-4675-9e0f-32444a378291" name="a_getarrayvalue" subcategories-loading="none" object-loading="extended" context="a_getarrayvalue" is-trigger-function="0" unique-function-name="a_getarrayvalue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="jsonb" function-arguments="ppath text, pprocedurename text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305273" volatility="VOLATILE" is-window="f" function-identity-arguments="ppath text, pprocedurename text" overload-function-count="1" proc-language="plpgsql" function-signature="a_getarrayvalue(ppath text, pprocedurename text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    pathParts TEXT[];
    vstoragetable TEXT;
    vSQL TEXT;
    vIndexBy TEXT;
    vres JSONB;
BEGIN
    
    pathParts := aws_oracle_ext.getPathparts(ppath);
    
    IF pathParts IS NULL THEN

        RETURN FALSE;

    END IF;

    SELECT storage_table_name,
        index_by
    INTO vstoragetable,
        vIndexBy
    FROM aws_oracle_ext$arrays a
    WHERE a.array_name = aws_oracle_ext.check_identifier_case(pathParts[1])
    AND a.procedure_name = pprocedurename;

    IF NOT FOUND THEN

        RAISE USING MESSAGE = 'Array structure must be initialized';

    END IF;

    vSQL := CONCAT
    (
        'SELECT record_body FROM ',
        vstoragetable,
        ' WHERE id = CAST($1 AS ',
        vIndexBy,
        ')'
    );

    EXECUTE vSQL INTO STRICT vres USING pathParts[2];

    vres := JSONB_BUILD_OBJECT
    (
        'result',
        vres
    );

    RETURN vres;

END;
]]></complex-attribute>
                        <category _I_D="5751a60c-3750-49d2-8cc0-56d6779b6638" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6b2f380a-285f-4f38-9777-c118a9ac47a1" name="a_setarrayvalue" subcategories-loading="none" object-loading="extended" context="a_setarrayvalue" is-trigger-function="0" unique-function-name="a_setarrayvalue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,anyelement" is-returning-set="f" ret-datatype="bool" function-arguments="ppath text, pprocedurename text, pvalue anyelement" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305274" volatility="VOLATILE" is-window="f" function-identity-arguments="ppath text, pprocedurename text, pvalue anyelement" overload-function-count="1" proc-language="plpgsql" function-signature="a_setarrayvalue(ppath text, pprocedurename text, pvalue anyelement)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    pathParts TEXT[];
    vstoragetable TEXT;
    vSQL TEXT;
    vIndexBy TEXT;
BEGIN

    pathParts := aws_oracle_ext.getPathparts(ppath);
    
    IF pathParts IS NULL THEN

        RETURN FALSE;

    END IF;

    SELECT storage_table_name,
        index_by
    INTO vstoragetable,
        vIndexBy
    FROM aws_oracle_ext$arrays a
    WHERE a.array_name = aws_oracle_ext.check_identifier_case(pathParts[1])
    AND a.procedure_name = pprocedurename;

    IF NOT FOUND THEN

        RAISE USING MESSAGE = 'Array structure must be initialized';

    END IF;

    IF vstoragetable IS NULL THEN

        RETURN FALSE;

    END IF;
    
    vSQL := CONCAT
    (
        'INSERT INTO ',
        vstoragetable,
        $$
        AS t(id, record_body) VALUES (CAST($1 AS $$,
        vIndexBy,
        $$), aws_oracle_ext.json_set_by_path('{}'::JSONB, $2, $3))
        ON CONFLICT (id) DO UPDATE
        SET record_body = aws_oracle_ext.json_set_by_path(t.record_body, $2, $3)
        $$
    );

    EXECUTE vSQL USING pathParts[2], ppath, pvalue;

    RETURN TRUE;

END;
]]></complex-attribute>
                        <category _I_D="1ab545bb-11dd-40f1-b511-8a7a342b7e47" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a04800fb-df59-4df6-93dc-d228848c0bcc" name="add_months" subcategories-loading="none" object-loading="extended" context="add_months" is-trigger-function="0" unique-function-name="add_months" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone,integer" is-returning-set="f" ret-datatype="timestamp" function-arguments="pdate timestamp without time zone, pmonths integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304502" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pdate timestamp without time zone, pmonths integer" overload-function-count="1" proc-language="sql" function-signature="add_months(pdate timestamp without time zone, pmonths integer)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT
        CASE
            WHEN aws_oracle_ext.last_day(pdate) <> pdate THEN
                pdate + MAKE_INTERVAL(months => pmonths)
            ELSE 
                aws_oracle_ext.last_day(pDate + MAKE_INTERVAL(months => pmonths))
    END;

]]></complex-attribute>
                        <category _I_D="599d6753-84c1-4cb2-859f-05c4fad1b935" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="684c382f-82d7-4355-87e7-fbd7ba6b0743" name="array$add_fields_to_array" subcategories-loading="none" object-loading="extended" context="array$add_fields_to_array" is-trigger-function="0" unique-function-name="array$add_fields_to_array" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bigint,text" is-returning-set="f" ret-datatype="void" function-arguments="p_array_id bigint, p_fields text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304028" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_array_id bigint, p_fields text" overload-function-count="1" proc-language="plpgsql" function-signature="array$add_fields_to_array(p_array_id bigint, p_fields text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
END;
]]></complex-attribute>
                        <category _I_D="f0aa5fb2-4c0a-4235-93be-89cca45debd8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1fc6c610-9b93-4c5b-a1ef-2c46f3366398" name="array$assign" subcategories-loading="none" object-loading="extended" context="array$assign" is-trigger-function="0" unique-function-name="array$assign" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304041" volatility="VOLATILE" is-window="f" function-identity-arguments="p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying" overload-function-count="1" proc-language="plv8" function-signature="array$assign(p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const chk = plv8.find_function("aws_oracle_ext.collectioncheck");
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");

const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");
let pathParts = parser(p_source_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const srcsn = pathParts[0].text;
const srcp = pathParts[2].text;
const srccol = caseCheck(p_source_param_name);
chk(srcsn, srcp, srccol);

pathParts = parser(p_dest_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
    
const dtssn = pathParts[0].text;
const dstp = pathParts[2].text;

const dstcol = caseCheck(p_dest_param_name);
chk(dtssn, dstp, dstcol);

aws_oracle_ext[dtssn][dstp][dstcol] = aws_oracle_ext[srcsn][srcp][srccol].clone();


]]></complex-attribute>
                        <category _I_D="f2282d7c-cfaa-45e2-8a6a-7f22b3f70b82" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2e5602f1-1d98-44fb-8192-b51b91e48c7f" name="array$clear_procedure" subcategories-loading="none" object-loading="extended" context="array$clear_procedure" is-trigger-function="0" unique-function-name="array$clear_procedure" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304042" volatility="VOLATILE" is-window="f" function-identity-arguments="p_procedure_name character varying" overload-function-count="1" proc-language="sql" function-signature="array$clear_procedure(p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT aws_oracle_ext.collections_delete_by_routine
    (
        p_routine_name => p_procedure_name
    );
]]></complex-attribute>
                        <category _I_D="6202d406-56fe-4286-9ec5-90a106f0c643" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="80ef9073-683d-4f91-9b11-33103df4acf6" name="array$copy" subcategories-loading="none" object-loading="extended" context="array$copy" is-trigger-function="0" unique-function-name="array$copy" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304043" volatility="VOLATILE" is-window="f" function-identity-arguments="p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying" overload-function-count="1" proc-language="plv8" function-signature="array$copy(p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const chk = plv8.find_function("aws_oracle_ext.collectioncheck");
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");
const pathParts = parser(p_source_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const srcsn = pathParts[0].text;
const srcp = pathParts[2].text;
const srccol = caseCheck(p_source_param_name);
chk(srcsn, srcp, srccol);

const doCreate = plv8.find_function("aws_oracle_ext.array$create_array");

doCreate(p_dest_param_name, p_dest_procedure_name);

const doAssign = plv8.find_function("aws_oracle_ext.array$assign");

doAssign(p_source_param_name, p_source_procedure_name, p_dest_param_name, p_dest_procedure_name);

]]></complex-attribute>
                        <category _I_D="863c340d-b470-488d-8fe7-eb00f67590f6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ef89bde8-c7ca-416e-acc6-668bb5de3503" name="array$copy_structure" subcategories-loading="none" object-loading="extended" context="array$copy_structure" is-trigger-function="0" unique-function-name="array$copy_structure" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304086" volatility="VOLATILE" is-window="f" function-identity-arguments="p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying" overload-function-count="1" proc-language="plv8" function-signature="array$copy_structure(p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const chk = plv8.find_function("aws_oracle_ext.collectioncheck");
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");
const pathParts = parser(p_source_procedure_name);
if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot')
  plv8.elog(ERROR, 'Incorrect routine name');

const srcsn = pathParts[0].text;
const srcp = pathParts[2].text;
const srccol = caseCheck(p_source_param_name);
chk(srcsn, srcp, srccol);
const indexBy = aws_oracle_ext[srcsn][srcp][srccol].indexBy;
const rowType = aws_oracle_ext[srcsn][srcp][srccol].rowType;
const doCreate = plv8.find_function("aws_oracle_ext.array$create_array");
const setRowtype = plv8.find_function("aws_oracle_ext.array$create_storage_table");
doCreate(p_dest_param_name, p_dest_procedure_name, null, indexBy);
setRowtype(p_dest_param_name, p_dest_procedure_name, rowType);

]]></complex-attribute>
                        <category _I_D="e661bb3d-22f3-4eab-bfa6-7736bf7b813a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d9cee21c-a981-40cc-adeb-481dece997f1" name="array$count" subcategories-loading="none" object-loading="extended" context="array$count" is-trigger-function="0" unique-function-name="array$count" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="int8" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304044" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="1" proc-language="sql" function-signature="array$count(p_array_path character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT aws_oracle_ext.collection_count
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path
    );
]]></complex-attribute>
                        <category _I_D="911977da-ff75-4796-a756-7bc2918436c7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="91064bab-f4f3-448c-a6d2-9595ef454257" name="array$create_array" subcategories-loading="none" object-loading="extended" context="array$create_array" is-trigger-function="0" unique-function-name="array$create_array" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,bigint,text" is-returning-set="f" ret-datatype="int8" function-arguments="p_array_name character varying, p_procedure_name character varying, p_parent_array_id bigint DEFAULT NULL::bigint, pindexby text DEFAULT 'BIGINT'::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304045" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_name character varying, p_procedure_name character varying, p_parent_array_id bigint, pindexby text" overload-function-count="1" proc-language="plv8" function-signature="array$create_array(p_array_name character varying, p_procedure_name character varying, p_parent_array_id bigint, pindexby text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");
const pathParts = parser(p_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;
const indexBy = pindexby != 'BIGINT' ? 'STRING' : 'BIGINT';
const tree = indexBy == 'BIGINT' ? new Tree(52)  : new Tree(52, TreeUtility.stringCompare);
tree.indexBy = indexBy;
tree.collectionType = 'ASSOC';

if (typeof(aws_oracle_ext) === 'undefined') aws_oracle_ext = {};
if (!aws_oracle_ext.hasOwnProperty(sn)) aws_oracle_ext[sn] = {};
if (!aws_oracle_ext[sn].hasOwnProperty(pn)) aws_oracle_ext[sn][pn] = {};

aws_oracle_ext[sn][pn][caseCheck(p_array_name)] = tree;

return -1;

]]></complex-attribute>
                        <category _I_D="cbb3b27f-9dad-41b2-94a2-2bee68b2e1a8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d9b2e065-e562-4918-ba04-3813efa2232d" name="array$create_storage_table" subcategories-loading="none" object-loading="extended" context="array$create_storage_table" is-trigger-function="0" unique-function-name="array$create_storage_table" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,character varying,boolean" is-returning-set="f" ret-datatype="void" function-arguments="p_array_name character varying, p_procedure_name character varying, p_cast_type_name character varying, pwithdata boolean DEFAULT true" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304046" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_name character varying, p_procedure_name character varying, p_cast_type_name character varying, pwithdata boolean" overload-function-count="1" proc-language="plv8" function-signature="array$create_storage_table(p_array_name character varying, p_procedure_name character varying, p_cast_type_name character varying, pwithdata boolean)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");
const pathParts = parser(p_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;
const chk = plv8.find_function("aws_oracle_ext.collectioncheck");
const srccol = caseCheck(p_array_name);
chk(sn, pn, srccol);
aws_oracle_ext[sn][pn][srccol].rowType = p_cast_type_name;

]]></complex-attribute>
                        <category _I_D="9d248097-53e9-4119-aa67-766e1cfe27b0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cd2b7d5f-ad9b-4b10-9f5c-2f2112b06b7a" name="array$delete" subcategories-loading="none" object-loading="extended" context="array$delete(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="array$delete(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304048" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying" overload-function-count="3" proc-language="sql" function-signature="array$delete(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)" routine-number="304048">
                        <complex-attribute name="sql"><![CDATA[
    SELECT aws_oracle_ext.collection_element_delete
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_start => p_array_key
    );
]]></complex-attribute>
                        <category _I_D="71a83b14-70be-4aef-a77e-ff6cda1aa3d8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0a5960d8-ca16-4a71-90d9-d25752c2bf3c" name="array$delete" subcategories-loading="none" object-loading="extended" context="array$delete(p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="array$delete(p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304049" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying" overload-function-count="3" proc-language="sql" function-signature="array$delete(p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying)" routine-number="304049">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_element_delete
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_start => p_array_key_from,
        p_end => p_array_key_until
    );

]]></complex-attribute>
                        <category _I_D="36d2313b-2761-41d6-aa4e-29f1d9bbad29" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2c207906-2e7e-4bbc-b953-0a0bd238d31c" name="array$delete" subcategories-loading="none" object-loading="extended" context="array$delete(p_array_path character varying, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="array$delete(p_array_path character varying, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304047" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="3" proc-language="sql" function-signature="array$delete(p_array_path character varying, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_procedure_name character varying)" routine-number="304047">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_element_delete
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path
    );
]]></complex-attribute>
                        <category _I_D="7bae4c25-5758-4d2d-843f-f981f82795f3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5eb2c8bd-35d0-4e45-ba6c-bd7b0ba2710a" name="array$exists" subcategories-loading="none" object-loading="extended" context="array$exists" is-trigger-function="0" unique-function-name="array$exists" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying" is-returning-set="f" ret-datatype="bool" function-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304050" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying" overload-function-count="1" proc-language="sql" function-signature="array$exists(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
    
    SELECT aws_oracle_ext.collection_element_exists
	(
		p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_idx => p_array_key
	);

]]></complex-attribute>
                        <category _I_D="97e32e33-2702-4515-8d15-d6f3a4adc930" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cec4a436-9870-4617-be25-7728bc07cad7" name="array$first" subcategories-loading="none" object-loading="extended" context="array$first" is-trigger-function="0" unique-function-name="array$first" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_path character varying, p_procedure_name character varying, p_def anyelement DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304051" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying, p_def anyelement" overload-function-count="1" proc-language="sql" function-signature="array$first(p_array_path character varying, p_procedure_name character varying, p_def anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_first
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_tp => p_def
    );

]]></complex-attribute>
                        <category _I_D="bed05af6-2dc2-4cde-96fe-4a84db9e1f09" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3a79fc5b-da3e-419b-95c6-0d270b829cc2" name="array$get_value" subcategories-loading="none" object-loading="extended" context="array$get_value" is-trigger-function="0" unique-function-name="array$get_value" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_value_path character varying, p_procedure_name character varying, p_value_datatype anyelement DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304052" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_value_path character varying, p_procedure_name character varying, p_value_datatype anyelement" overload-function-count="1" proc-language="plpgsql" function-signature="array$get_value(p_array_value_path character varying, p_procedure_name character varying, p_value_datatype anyelement)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vret JSONB;
BEGIN

    vret := aws_oracle_ext.collection_element_get
	(
		p_routine_name => p_procedure_name,
        p_collection_path => p_array_value_path
	);

    IF vret IS NULL THEN

        RAISE NO_DATA_FOUND;

    END IF;

    RETURN JSONB_POPULATE_RECORD
    (
        p_value_datatype,
        vret
    );

END;
]]></complex-attribute>
                        <category _I_D="751b6836-f86c-4796-93c6-53271f234447" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5083599d-240f-4f1e-a92c-d07f5f723033" name="array$last" subcategories-loading="none" object-loading="extended" context="array$last" is-trigger-function="0" unique-function-name="array$last" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_path character varying, p_procedure_name character varying, p_def anyelement DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304053" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying, p_def anyelement" overload-function-count="1" proc-language="sql" function-signature="array$last(p_array_path character varying, p_procedure_name character varying, p_def anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_last
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_tp => p_def
    );

]]></complex-attribute>
                        <category _I_D="8a04ca41-3827-4bbd-a4a9-10aeb6290579" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="73fc00c2-48b0-4a66-9d05-6398de49a619" name="array$next" subcategories-loading="none" object-loading="extended" context="array$next" is-trigger-function="0" unique-function-name="array$next" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304054" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement" overload-function-count="1" proc-language="sql" function-signature="array$next(p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_next
	(
		p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_idx => p_array_key,
        p_tp => p_def
	);

]]></complex-attribute>
                        <category _I_D="dc5174b9-01a7-47c7-aa02-c4dd61bd2766" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7cb26224-7291-4638-9bd7-52b0ce0979b8" name="array$prior" subcategories-loading="none" object-loading="extended" context="array$prior" is-trigger-function="0" unique-function-name="array$prior" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304055" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement" overload-function-count="1" proc-language="sql" function-signature="array$prior(p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_prior
	(
		p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_idx => p_array_key,
        p_tp => p_def
	);

]]></complex-attribute>
                        <category _I_D="5f61b580-4100-474a-8bee-b782b239ddeb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dfe6c03d-cabc-4057-bfb7-6e75769c5795" name="array$set_value" subcategories-loading="none" object-loading="extended" context="array$set_value" is-trigger-function="0" unique-function-name="array$set_value" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,anyelement" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_procedure_name character varying, p_value anyelement" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304056" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying, p_value anyelement" overload-function-count="1" proc-language="sql" function-signature="array$set_value(p_array_path character varying, p_procedure_name character varying, p_value anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_element_set
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_val => p_value
    );

]]></complex-attribute>
                        <category _I_D="83dde16f-f972-4c3a-94b4-e5fd9a794bf7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7db92b31-a088-41d7-b24d-6bd1fdcd4776" name="asciistr" subcategories-loading="none" object-loading="extended" context="asciistr" is-trigger-function="0" unique-function-name="asciistr" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_str text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304381" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_str text" overload-function-count="1" proc-language="sql" function-signature="asciistr(p_str text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT
        CASE
            WHEN p_str ='' THEN NULL::TEXT
            ELSE
                (
                    SELECT ARRAY_TO_STRING
                    (
                        ARRAY_AGG
                        (
                            CASE 
                                WHEN ASCII(v) <= 127 and ASCII(v) != 92 THEN
                                    v
                        ELSE
                            CONCAT
                            (
                                '\',
                                UPPER
                                (
                                    LPAD
                                    (
                                        TO_HEX(ASCII(v)),
                                        4,
                                        '0'
                                    )
                                )
                            )
                        END
                        ),
                        ''
                    )
                    FROM REGEXP_SPLIT_TO_TABLE(p_str, '') AS v
                )
        END;

]]></complex-attribute>
                        <category _I_D="86c3e58f-278f-47b9-a655-9f4d00574ffb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ad2c99f1-52cf-415b-9290-ec03e9f83b90" name="autonomous_exec" subcategories-loading="none" object-loading="extended" context="autonomous_exec" is-trigger-function="0" unique-function-name="autonomous_exec" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,json,json" is-returning-set="f" ret-datatype="record" function-arguments="sql_text text, OUT aws_params json, OUT aws_session_env json" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305318" volatility="VOLATILE" is-window="f" function-identity-arguments="sql_text text, OUT aws_params json, OUT aws_session_env json" overload-function-count="1" proc-language="plpgsql" function-signature="autonomous_exec(sql_text text, OUT aws_params json, OUT aws_session_env json)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  v_result        JSON;
  v_srvname       name;
  v_fdwname       name;
  v_current_user  name;  
  v_connname      text;
  v_connstr       text;
  v_conn_result   text;
  v_send_result   int;
BEGIN
  v_srvname := 'loopback_dblink';
  v_current_user := current_user;
  v_connname := replace(uuid_generate_v4()::text,'-','');
  v_connstr  := v_srvname;

  --Check if the foreign server is present
  IF NOT EXISTS (SELECT 1
                   FROM pg_foreign_server s
                  WHERE s.srvname = v_srvname) THEN
    RAISE USING MESSAGE := format('The FOREIGN SERVER (%s) doesn''t exist.', v_srvname),
                DETAIL := format('The FOREIGN SERVER (%s) must be present.', v_srvname),
                HINT := format('Make sure that the FOREIGN SERVER (%s) exists.', v_srvname);
  END IF;  

  --Check the foreign-data wrapper name of the foreign_server
  SELECT w.fdwname
    INTO v_fdwname
    FROM pg_foreign_server s
    JOIN pg_foreign_data_wrapper w 
      ON w.oid = s.srvfdw
   WHERE s.srvname = v_srvname;
  IF v_fdwname <> 'dblink_fdw' THEN
    RAISE USING MESSAGE := format('The name of FOREIGN DATA WRAPPER (%s) that manages the server (%s) should be dblink_fdw', v_fdwname, v_srvname),
                DETAIL := format('The name of FOREIGN DATA WRAPPER (%s) that manages the server (%s) is not dblink_fdw', v_fdwname, v_srvname),
                HINT := format('Make sure that the FOREIGN SERVER (%s) has been defined using dblink_fdw foreign-data wrapper', v_srvname);
  END IF;  

  --Check if the user mapping is present for current user
  IF NOT EXISTS (SELECT 1
                   FROM pg_user_mappings m
                   JOIN pg_foreign_server s
                     ON s.oid = m.srvid
                  WHERE s.srvname = v_srvname
                    AND m.usename = v_current_user) THEN
    RAISE USING MESSAGE := format('No USER MAPPING exists for the FOREIGN SERVER (%s) and USER (%s).', v_srvname, v_current_user),
                DETAIL := format('The USER MAPPING for the FOREIGN SERVER (%s) and USER (%s) must be present', v_srvname, v_current_user),
                HINT := format('Make sure that the USER MAPPING for the FOREIGN SERVER (%s) and USER (%s) exists.', v_srvname, v_current_user);
  END IF;
 
  --Open the connection  
  SELECT dblink_connect(v_connname,v_connstr) 
    INTO v_conn_result;
  IF v_conn_result <> 'OK' THEN
    RAISE USING MESSAGE := 'An error has occurred while trying to open a loopback dblink connection';
  END IF;

  --Send the query with the autonomous routine call
  SELECT dblink_send_query(v_connname, sql_text) 
    INTO v_send_result;
  IF v_send_result = 0 THEN
    RAISE USING MESSAGE := 'An error has occurred while sending the query';
  END IF;

  --Get the result of the query with the autonomous routine call 
  SELECT t.aws_params, t.aws_session_env 
    INTO aws_params, aws_session_env
    FROM dblink_get_result(v_connname) 
      AS t(aws_params JSON, aws_session_env JSON);
    
  --Close a connection
  SELECT dblink_disconnect(v_connname) 
    INTO v_conn_result;
  IF v_conn_result <> 'OK' THEN
    RAISE USING MESSAGE := 'An error has occurred while trying to close a loopback dblink connection';
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    --Check if the connection exists
    IF v_connname = ANY(dblink_get_connections()) THEN
      PERFORM dblink_disconnect(v_connname);
    END IF;
    RAISE;
END;
]]></complex-attribute>
                        <category _I_D="2d0d58fc-6189-4211-b576-b5db08f5b9dd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f8bc4b5b-b6e3-4309-82a7-92200259df16" name="bulk$collect_statement_to_assoc" subcategories-loading="none" object-loading="extended" context="bulk$collect_statement_to_assoc" is-trigger-function="0" unique-function-name="bulk$collect_statement_to_assoc" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying[],character varying,json[]" is-returning-set="f" ret-datatype="void" function-arguments="pinto character varying[], pprocedurename character varying, pdataset json[]" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304057" volatility="VOLATILE" is-window="f" function-identity-arguments="pinto character varying[], pprocedurename character varying, pdataset json[]" overload-function-count="1" proc-language="plv8" function-signature="bulk$collect_statement_to_assoc(pinto character varying[], pprocedurename character varying, pdataset json[])">
                        <complex-attribute name="sql"><![CDATA[
'use strict';

if (pinto == null || typeof(pinto) === 'undefined' || !Array.isArray(pinto) || pinto.length < 1) plv8.elog(ERROR, 'Collection name is null or empty!');
if (pprocedurename == null || typeof(pprocedurename) === 'undefined' || pprocedurename.length < 1) plv8.elog(ERROR, 'Routine name is null or empty!');
if (pdataset == null || typeof(pdataset) === 'undefined' || !Array.isArray(pdataset)) plv8.elog(ERROR, 'Dataset(s) array is null or incorrect!');

if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");
const split = require('StringUtils').splitBy;

const pathPartsArr = split(pprocedurename, ',', ['"']).filter((item) => item !=='').map((v) => v.trim()).map(parser);
if (pinto.length != pathPartsArr.length) plv8.elog(ERROR, 'The number of collections is not equal to the number of routines!');

for (let i = 0; i < pathPartsArr.length; i++) {
  if (pathPartsArr[i].length != 3) plv8.elog(ERROR, 'Incorrect routine name!');
  if (pathPartsArr[i][0].group === 'dot' || pathPartsArr[i][1].group !== 'dot' || pathPartsArr[i][2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
}

const snArr = pathPartsArr.map((value) => value[0].text);
const pnArr = pathPartsArr.map((value) => value[2].text);
const chk = plv8.find_function("aws_oracle_ext.collectioncheck");
let collections = [];
for (let k = 0; k < pinto.length; k++) {
  const vn = caseCheck(pinto[k]);
  chk(snArr[k], pnArr[k], vn);
  if (aws_oracle_ext[snArr[k]][pnArr[k]][vn].indexBy !== 'BIGINT') plv8.elog(ERROR, 'Incorrect collection type!');
  const collectionType = aws_oracle_ext[snArr[k]][pnArr[k]][vn].collectionType;
  const rowType = aws_oracle_ext[snArr[k]][pnArr[k]][vn].rowType;
  const res = plv8.execute(`select aws_oracle_ext.record_to_json(NULL::${rowType}) as r`);
  const emptyObj = res[0].r;
  const keys = Object.keys(emptyObj);
  if (pinto.length > 1) {
    if (keys.length > 1 || (keys.length == 1 && keys[0] !== 'column_value')) {
      plv8.elog(ERROR, 'Incorrect collection type!');
    }
  }
  collections.push({collectionType: collectionType, rowType: rowType, keys: keys});
}

for (let k = 0; k < pinto.length; k++) {
  const vn = caseCheck(pinto[k]);
  const keys = collections[k].keys;
  
  const tree = new Tree(52);
  tree.indexBy = 'BIGINT';
  tree.collectionType = collections[k].collectionType;
  tree.rowType = collections[k].rowType;

  if (pdataset.length > 0) {
    const numberOfcolumns = Object.values(pdataset[0]).length;

    if (pinto.length > numberOfcolumns) plv8.elog(ERROR, 'ORA-00913: too many values');	 
    
    for (let i = 0; i < pdataset.length; i++) {
      const vdataset = pdataset[i].hasOwnProperty('bulk$fetch_cursor') ? pdataset[i]['bulk$fetch_cursor'] : pdataset[i];
      const values = Object.values(vdataset);
      if (keys.length == 1 && keys[0] === 'column_value') {
        tree.putValue(i + 1, values[k]);
      } else {
        const tempRec = {};
        for (let j = 0; j < keys.length; j++) {
          tempRec[keys[j]] = values[j];
        }
        tree.putValue(i + 1, tempRec);
      }
    }
  }
  aws_oracle_ext[snArr[k]][pnArr[k]][vn] = tree;
}


]]></complex-attribute>
                        <category _I_D="537a1d1f-1dcd-48be-ae28-b481f89b6b47" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0052e0e9-f8c6-49cd-813e-cbe30740e99e" name="bulk$fetch_cursor" subcategories-loading="none" object-loading="extended" context="bulk$fetch_cursor" is-trigger-function="0" unique-function-name="bulk$fetch_cursor" is-aggregate="f" language-name="plpgsql" arguments-datatypes="refcursor,anyelement,double precision" is-returning-set="t" ret-datatype="anyelement" function-arguments="pcur refcursor, INOUT precordtype anyelement, plimit double precision DEFAULT '-1'::integer" schema-id="304013" function-type="RET_DATASET" count-arguments="3" function-id="305262" volatility="VOLATILE" is-window="f" function-identity-arguments="pcur refcursor, INOUT precordtype anyelement, plimit double precision" overload-function-count="1" proc-language="plpgsql" function-signature="bulk$fetch_cursor(pcur refcursor, INOUT precordtype anyelement, plimit double precision)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    LOOP
      FETCH $1 INTO $2; 
      IF (NOT FOUND) THEN
          EXIT;
      END IF;

      pLimit := pLimit-1;  
      RETURN NEXT;

      IF (pLimit=0) THEN
          EXIT;
      END IF;
    END LOOP;
  RETURN;
END;
]]></complex-attribute>
                        <category _I_D="ce1a38f2-358e-47db-bbf8-31c22ec6c86d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4ff09fc1-b49c-4788-a975-ef6227906367" name="bulk$getvaluesforindex" subcategories-loading="none" object-loading="extended" context="bulk$getvaluesforindex" is-trigger-function="0" unique-function-name="bulk$getvaluesforindex" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,boolean,numeric[]" is-returning-set="f" ret-datatype="_int8" function-arguments="parrayname character varying, pprocedurename character varying, pvalues boolean, pbetween numeric[] DEFAULT NULL::numeric[]" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304107" volatility="VOLATILE" is-window="f" function-identity-arguments="parrayname character varying, pprocedurename character varying, pvalues boolean, pbetween numeric[]" overload-function-count="1" proc-language="plv8" function-signature="bulk$getvaluesforindex(parrayname character varying, pprocedurename character varying, pvalues boolean, pbetween numeric[])">
                        <complex-attribute name="sql"><![CDATA[
  if (typeof(require) !== 'function') {
    const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
    initColl();
  }
  const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
  let pathParts = parser(pprocedurename);

  if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
  if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
  const sn = pathParts[0].text;
  const pn = pathParts[2].text;

  const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

  pathParts = parser(parrayname);
  const pathlength = pathParts.length;

  if (pathlength != 1) {
    plv8.elog(ERROR, 'Nested collection is not supported');
  }
  if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
    plv8.elog(ERROR, 'Incorrect collection path');
  }

  const vn = pathParts[0].text;
  chk(sn, pn, vn);

  if (aws_oracle_ext[sn][pn][vn].collectionType !== 'ASSOC' && pvalues) {
    plv8.elog(ERROR, 'Incorrect collection type');
  }

  if (aws_oracle_ext[sn][pn][vn].indexBy !== 'BIGINT') {
    plv8.elog(ERROR, 'Incorrect index type');
  }
  let result = [];
  if (pvalues && pbetween != null) {
    plv8.elog(ERROR, 'VALUES OF does not support BETWEEN');
  }

  let sidx = null;
  let eidx = null;

  if (pbetween != null && pbetween.length == 2) {
    if (pbetween[0] == null || pbetween[1] == null) {
      return result;
    }
    sidx = pbetween[0] != null ? Math.round(pbetween[0]) : null;
    const fFirst = plv8.find_function("aws_oracle_ext.collection_first");
    const first = fFirst(pprocedurename, parrayname);
    if (sidx < first) sidx = first;
    eidx = pbetween[1] != null ? Math.round(pbetween[1]) : null;
    if (eidx < sidx) return result;
  }

  aws_oracle_ext[sn][pn][vn].walkAsc(sidx, eidx, function(key, value) {
    if (!pvalues) {
      if (aws_oracle_ext[sn][pn][vn].collectionType === 'ASSOC' || ( aws_oracle_ext[sn][pn][vn].collectionType !== 'ASSOC' && value !== emptyCollectionElement))
      {
        result.push(key);
      }
    } else {
      result.push(value);
    }
  });

  return result;

]]></complex-attribute>
                        <category _I_D="19d553cc-9410-4295-808d-d08ae13e16e4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a94fabc3-bd61-41d9-b7ac-4b64e014694c" name="bulk_exceptions$create_array" subcategories-loading="none" object-loading="extended" context="bulk_exceptions$create_array" is-trigger-function="0" unique-function-name="bulk_exceptions$create_array" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305268" volatility="VOLATILE" is-window="f" function-identity-arguments="p_procedure_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="bulk_exceptions$create_array(p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  aws_oracle_ext$array_id$temporary BIGINT;
BEGIN
  aws_oracle_ext$array_id$temporary := aws_oracle_ext.array$create_array(p_array_name => 'bulk_exceptions', p_procedure_name => p_procedure_name);
  PERFORM aws_oracle_ext.array$add_fields_to_array(p_array_id => aws_oracle_ext$array_id$temporary, p_fields => '[{"error_index":"BIGINT"},{"error_code":"INTEGER"},{"sqlerrm":"TEXT"}]');
  PERFORM aws_oracle_ext.array$create_storage_table(p_array_name => 'bulk_exceptions', p_procedure_name => p_procedure_name, p_cast_type_name => 'aws_oracle_ext.sql$bulk_exceptions', pWithData => FALSE);
END;
]]></complex-attribute>
                        <category _I_D="7cbb550f-34ac-417a-9d69-d74be93301ec" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="926d16de-408e-4862-b8fd-e172394b8c64" name="chartorowid" subcategories-loading="none" object-loading="extended" context="chartorowid" is-trigger-function="0" unique-function-name="chartorowid" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="rowid" function-arguments="pchar text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305109" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pchar text" overload-function-count="1" proc-language="sql" function-signature="chartorowid(pchar text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT pchar::aws_oracle_data.rowid;
]]></complex-attribute>
                        <category _I_D="9401bb05-5472-40e3-b585-cb9d75ea6fd4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a1759fe5-3001-4ffd-b46b-7b10909160f8" name="check_identifier_case" subcategories-loading="none" object-loading="extended" context="check_identifier_case" is-trigger-function="0" unique-function-name="check_identifier_case" is-aggregate="f" language-name="plv8" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="pin text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304025" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pin text" overload-function-count="1" proc-language="plv8" function-signature="check_identifier_case(pin text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const res = pin.substr(0,1) == '"' ? pin : pin.toLowerCase();
return res;

]]></complex-attribute>
                        <category _I_D="4e4ae40c-2a0f-4a90-8970-3e9f881f0f64" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="68e4878d-e071-4b30-bd36-d6696bc54e0d" name="collection_bind" subcategories-loading="none" object-loading="extended" context="collection_bind" is-trigger-function="0" unique-function-name="collection_bind" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,json" is-returning-set="f" ret-datatype="void" function-arguments="p_routine_name character varying, p_collection_path character varying, p_dataset json" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304087" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name character varying, p_collection_path character varying, p_dataset json" overload-function-count="1" proc-language="plv8" function-signature="collection_bind(p_routine_name character varying, p_collection_path character varying, p_dataset json)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
const doCreate = plv8.find_function("aws_oracle_ext.array$create_array");
doCreate(vn, p_routine_name, null, 'BIGINT');

for (let i = 0; i < p_dataset.length; i++) {
  const idx = Number(p_dataset[i].k);
  aws_oracle_ext[sn][pn][vn].putValue(idx, p_dataset[i].v);
}

]]></complex-attribute>
                        <category _I_D="cfb6f21d-6c64-4940-99cf-bcf4c774ac03" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3ee26792-767a-4d9b-99f8-966f8e504d8e" name="collection_bind_out" subcategories-loading="none" object-loading="extended" context="collection_bind_out" is-trigger-function="0" unique-function-name="collection_bind_out" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_routine_name character varying, p_collection_path character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304088" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name character varying, p_collection_path character varying" overload-function-count="1" proc-language="plv8" function-signature="collection_bind_out(p_routine_name character varying, p_collection_path character varying)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
const sn = pathParts[0].text;
const pn = pathParts[2].text;

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;

let create = false;

if (typeof(aws_oracle_ext) === 'undefined') create = true;
if (!create) {
  if (!aws_oracle_ext.hasOwnProperty(sn)) create = true;
}
if (!create) {
  if (!aws_oracle_ext[sn].hasOwnProperty(pn)) create = true;
}
if (!create) {
  if (!aws_oracle_ext[sn][pn].hasOwnProperty(vn)) create = true;
}

if (create) {
  const doCreate = plv8.find_function("aws_oracle_ext.array$create_array");
  doCreate(vn, p_routine_name, null, 'BIGINT');

}

]]></complex-attribute>
                        <category _I_D="2f932cbd-eedf-4de4-8631-aca263a1edb1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="840b8f97-d4b7-4c98-a60e-3d3d7df9c595" name="collection_count" subcategories-loading="none" object-loading="extended" context="collection_count" is-trigger-function="0" unique-function-name="collection_count" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="int8" function-arguments="p_routine_name text, p_collection_path text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304029" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text" overload-function-count="1" proc-language="plv8" function-signature="collection_count(p_routine_name text, p_collection_path text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
const sn = pathParts[0].text;
const pn = pathParts[2].text;

const collectioncheck = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
collectioncheck(sn, pn, vn);

const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;

let cnt = 0;
if (collectionType === 'ASSOC') {
  cnt = aws_oracle_ext[sn][pn][vn].count();
} else {
  aws_oracle_ext[sn][pn][vn].walkAsc(null, null, function(key, value){
    if (value !== emptyCollectionElement) cnt++;
  });
}

return cnt;

]]></complex-attribute>
                        <category _I_D="d9c31c60-a086-436f-9b2e-08cb36935d60" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f6881f43-6e3a-4af1-bb98-ab4ecedc6411" name="collection_delete" subcategories-loading="none" object-loading="extended" context="collection_delete(pcollection anyelement, pm numeric, pn numeric)" is-trigger-function="0" unique-function-name="collection_delete(pcollection anyelement, pm numeric, pn numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,numeric,numeric" is-returning-set="f" ret-datatype="anyarray" function-arguments="pcollection anyelement, pm numeric, pn numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305368" volatility="VOLATILE" is-window="f" function-identity-arguments="pcollection anyelement, pm numeric, pn numeric" overload-function-count="5" proc-language="plpgsql" function-signature="collection_delete(pcollection anyelement, pm numeric, pn numeric)" unique-suffix="(pcollection anyelement, pm numeric, pn numeric)" routine-number="305368">
                        <complex-attribute name="sql"><![CDATA[
    begin
        return aws_oracle_ext.collection_delete
                                    (pcollection => pcollection,
                                     ppath => null::numeric(10, 0)[],
                                     pm => pm::numeric(10, 0),
                                     pn => pn::numeric(10, 0)
                                    );
    end;
    ]]></complex-attribute>
                        <category _I_D="00ad7290-5e3c-44df-8b80-04e87c65c9c5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="97bb1c86-2661-4a7e-bda9-924732ec2dd5" name="collection_delete" subcategories-loading="none" object-loading="extended" context="collection_delete(pcollection anyelement, pn numeric)" is-trigger-function="0" unique-function-name="collection_delete(pcollection anyelement, pn numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,numeric" is-returning-set="f" ret-datatype="anyarray" function-arguments="pcollection anyelement, pn numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305372" volatility="VOLATILE" is-window="f" function-identity-arguments="pcollection anyelement, pn numeric" overload-function-count="5" proc-language="plpgsql" function-signature="collection_delete(pcollection anyelement, pn numeric)" unique-suffix="(pcollection anyelement, pn numeric)" routine-number="305372">
                        <complex-attribute name="sql"><![CDATA[
    begin
        return aws_oracle_ext.collection_delete
                                    (pcollection => pcollection,
                                     ppath => null::numeric(10, 0)[],
                                     pn => pn::numeric(10, 0)
                                    );
    end;
]]></complex-attribute>
                        <category _I_D="d05a02e1-d1df-466e-a754-d2cd66191dfc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4991112b-bcc8-4fef-aea9-b6a4acc6f291" name="collection_delete" subcategories-loading="none" object-loading="extended" context="collection_delete(pcollection anyelement, ppath numeric[])" is-trigger-function="0" unique-function-name="collection_delete(pcollection anyelement, ppath numeric[])" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,numeric[]" is-returning-set="f" ret-datatype="anyarray" function-arguments="pcollection anyelement, ppath numeric[] DEFAULT NULL::numeric[]" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305370" volatility="VOLATILE" is-window="f" function-identity-arguments="pcollection anyelement, ppath numeric[]" overload-function-count="5" proc-language="plpgsql" function-signature="collection_delete(pcollection anyelement, ppath numeric[])" unique-suffix="(pcollection anyelement, ppath numeric[])" routine-number="305370">
                        <complex-attribute name="sql"><![CDATA[
    begin
        if cardinality(ppath) > 1 then
          pcollection[ppath[1]::numeric(10, 0)] := aws_oracle_ext.collection_delete
                                            (pcollection[ppath[1]::numeric(10, 0)],
                                             ppath[2:]::numeric(10, 0)[]
                                            );
        elsif ppath is not null then
           pcollection := aws_oracle_ext.collection_delete_make
                                            (pcollection => pcollection,
                                             pm => ppath[1]::numeric(10, 0),
                                             pn => ppath[1]::numeric(10, 0)
                                            );
        else
           pcollection := null;
        end if;
        return pcollection;
    end;
    ]]></complex-attribute>
                        <category _I_D="172f7606-74df-4436-8d3e-895f721b3ef0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bf17133c-8078-4c87-9416-82f44af6162c" name="collection_delete" subcategories-loading="none" object-loading="extended" context="collection_delete(pcollection anyelement, ppath numeric[], pm numeric, pn numeric)" is-trigger-function="0" unique-function-name="collection_delete(pcollection anyelement, ppath numeric[], pm numeric, pn numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,numeric[],numeric,numeric" is-returning-set="f" ret-datatype="anyarray" function-arguments="pcollection anyelement, ppath numeric[], pm numeric, pn numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="305371" volatility="VOLATILE" is-window="f" function-identity-arguments="pcollection anyelement, ppath numeric[], pm numeric, pn numeric" overload-function-count="5" proc-language="plpgsql" function-signature="collection_delete(pcollection anyelement, ppath numeric[], pm numeric, pn numeric)" unique-suffix="(pcollection anyelement, ppath numeric[], pm numeric, pn numeric)" routine-number="305371">
                        <complex-attribute name="sql"><![CDATA[
    begin
    
        if pm is null or pn is null or pm > pn then
            return pcollection;
        end if;
    
        if cardinality(ppath) > 1 then
          pcollection[ppath[1]::numeric(10, 0)] := aws_oracle_ext.collection_delete
                                    (pcollection => pcollection[ppath[1]::numeric(10, 0)],
                                     ppath => ppath[2:]::numeric(10, 0)[],
                                     pn => pn::numeric(10, 0),
                                     pm => pm::numeric(10, 0)
                                    );
        elsif ppath is not null then
           pcollection[ppath[1]::numeric(10, 0)] := aws_oracle_ext.collection_delete_make
                                      (pcollection => pcollection[ppath[1]::numeric(10, 0)],
                                       pm => pm::numeric(10, 0),
                                       pn => pn::numeric(10, 0)
                                      );
        else
           pcollection := aws_oracle_ext.collection_delete_make
                                      (pcollection => pcollection,
                                       pm => pm::numeric(10, 0),
                                       pn => pn::numeric(10, 0)
                                      );
        end if;
        return pcollection;
    end;
    ]]></complex-attribute>
                        <category _I_D="8fb04601-e7a8-4806-9618-4b205748adf1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="89b31f0f-f8f0-49c2-8f80-4d70a441a727" name="collection_delete" subcategories-loading="none" object-loading="extended" context="collection_delete(pcollection anyelement, ppath numeric[], pn numeric)" is-trigger-function="0" unique-function-name="collection_delete(pcollection anyelement, ppath numeric[], pn numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,numeric[],numeric" is-returning-set="f" ret-datatype="anyarray" function-arguments="pcollection anyelement, ppath numeric[], pn numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305369" volatility="VOLATILE" is-window="f" function-identity-arguments="pcollection anyelement, ppath numeric[], pn numeric" overload-function-count="5" proc-language="plpgsql" function-signature="collection_delete(pcollection anyelement, ppath numeric[], pn numeric)" unique-suffix="(pcollection anyelement, ppath numeric[], pn numeric)" routine-number="305369">
                        <complex-attribute name="sql"><![CDATA[
    begin
    
        if pn is null then
            return pcollection;
        end if;
    
        if cardinality(ppath) > 1 then
          pcollection[ppath[1]::numeric(10, 0)] := aws_oracle_ext.collection_delete
                                    (pcollection => pcollection[ppath[1]::numeric(10, 0)],
                                     ppath => ppath[2:]::numeric(10, 0)[],
                                     pn => pn::numeric(10, 0)
                                    );
        elsif ppath is not null then
           pcollection[ppath[1]::numeric(10, 0)] := aws_oracle_ext.collection_delete_make
                                      (pcollection => pcollection[ppath[1]::numeric(10, 0)],
                                       pm => pn::numeric(10, 0),
                                       pn => pn::numeric(10, 0)
                                      );
        else
           pcollection := aws_oracle_ext.collection_delete_make
                                      (pcollection => pcollection,
                                       pm => pn::numeric(10, 0),
                                       pn => pn::numeric(10, 0)
                                      );
        end if;
        return pcollection;
    end;
    ]]></complex-attribute>
                        <category _I_D="eb10f740-8adb-4e81-a602-7c167c902572" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d41647f2-d466-4420-afe0-6ce83aa2ad1b" name="collection_delete_make" subcategories-loading="none" object-loading="extended" context="collection_delete_make" is-trigger-function="0" unique-function-name="collection_delete_make" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,numeric,numeric" is-returning-set="f" ret-datatype="anyarray" function-arguments="pcollection anyelement, pm numeric, pn numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305365" volatility="VOLATILE" is-window="f" function-identity-arguments="pcollection anyelement, pm numeric, pn numeric" overload-function-count="1" proc-language="plpgsql" function-signature="collection_delete_make(pcollection anyelement, pm numeric, pn numeric)">
                        <complex-attribute name="sql"><![CDATA[
begin
    return pcollection[1: pm::numeric(10, 0) - 1] || pcollection[pn::numeric(10, 0) + 1:];
end;
]]></complex-attribute>
                        <category _I_D="cd9b62df-c173-40bb-8d0e-f68e663399dd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f7f6cdb3-f877-4648-a102-1a7a5df939b2" name="collection_element_delete" subcategories-loading="none" object-loading="extended" context="collection_element_delete" is-trigger-function="0" unique-function-name="collection_element_delete" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="p_routine_name text, p_collection_path text, p_start text DEFAULT NULL::text, p_end text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304030" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text, p_start text, p_end text" overload-function-count="1" proc-language="plv8" function-signature="collection_element_delete(p_routine_name text, p_collection_path text, p_start text, p_end text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);
const indexBy = aws_oracle_ext[sn][pn][vn].indexBy;
const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;
const rowType = aws_oracle_ext[sn][pn][vn].rowType;

let numArgs = 0;
let start;
let end;
if (p_start !== null && p_end === null) {
  numArgs = 1;
  start = indexBy === 'BIGINT' ? Number(p_start) : p_start;
  if (indexBy === 'BIGINT' && isNaN(start)) {
    plv8.elog(ERROR, 'Incorrect value for index');
  }
}
if (p_start !== null && p_end !== null) {
  numArgs = 2;
  start = indexBy === 'BIGINT' ? Number(p_start) : p_start;
  if (indexBy === 'BIGINT' && isNaN(start)) {
    plv8.elog(ERROR, 'Incorrect value for index');
  }
  end = indexBy === 'BIGINT' ? Number(p_end) : p_end;
  if (indexBy === 'BIGINT' && isNaN(end)) {
    plv8.elog(ERROR, 'Incorrect value for index');
  }
}

switch(numArgs) {
  case 1:
    if (typeof(aws_oracle_ext[sn][pn][vn].getValue(start)) === 'undefined') return;
    
    if (collectionType !== 'ASSOC') {
      aws_oracle_ext[sn][pn][vn].putValue(start, emptyCollectionElement);
    } else {
      aws_oracle_ext[sn][pn][vn].del(start);
    }
    break;
  case 2:
    if (indexBy === 'STRING') {
      if(TreeUtility.stringCompare(end, start) < 0 ) return;
    } else {
      if (end < start) return;
    }
    if (typeof(aws_oracle_ext[sn][pn][vn].getValue(start)) === 'undefined') return;
    if (typeof(aws_oracle_ext[sn][pn][vn].getValue(end)) === 'undefined') return;
    
    let indices = [];
    aws_oracle_ext[sn][pn][vn].walkAsc(start, end, function(key, value){
      indices.push(key);
    });

    for (let i = 0; i < indices.length; i++) {
      if (collectionType !== 'ASSOC') {
        aws_oracle_ext[sn][pn][vn].putValue(indices[i], emptyCollectionElement);
      } else {
        aws_oracle_ext[sn][pn][vn].del(indices[i]);
      }
    }
    
    break;
  default:
      const tree = indexBy == 'BIGINT' ? new Tree(52)  : new Tree(52, TreeUtility.stringCompare);
      tree.indexBy = indexBy;
      tree.collectionType = collectionType;
      tree.rowType = rowType;
      aws_oracle_ext[sn][pn][vn] = tree;
    break;
}

]]></complex-attribute>
                        <category _I_D="b901111e-60c6-45f9-b5c8-5147c5b23eb3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f563500f-6daf-4435-a277-2588ec392ae2" name="collection_element_exists" subcategories-loading="none" object-loading="extended" context="collection_element_exists" is-trigger-function="0" unique-function-name="collection_element_exists" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="bool" function-arguments="p_routine_name text, p_collection_path text, p_idx text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304032" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text, p_idx text" overload-function-count="1" proc-language="plv8" function-signature="collection_element_exists(p_routine_name text, p_collection_path text, p_idx text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);
const indexBy = aws_oracle_ext[sn][pn][vn].indexBy;

const idx = indexBy === 'BIGINT' ? Number(p_idx) : p_idx;

if (indexBy === 'BIGINT' && isNaN(idx)) {
  plv8.elog(ERROR, 'Incorrect value for index');
}

const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;

const tst = aws_oracle_ext[sn][pn][vn].getValue(idx);

let result = false;
  if (typeof(tst) !== 'undefined') {
    if (collectionType === 'ASSOC') {
      result = true;
    } else {
      result = (tst !== emptyCollectionElement);
    }
  }

return result;

]]></complex-attribute>
                        <category _I_D="4b1b16d1-d555-419f-98eb-81d6e2cf16bf" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5cb72cb9-6c9a-4491-942d-9424369d2f11" name="collection_element_get" subcategories-loading="none" object-loading="extended" context="collection_element_get" is-trigger-function="0" unique-function-name="collection_element_get" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="jsonb" function-arguments="p_routine_name text, p_collection_path text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304033" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text" overload-function-count="1" proc-language="plv8" function-signature="collection_element_get(p_routine_name text, p_collection_path text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength < 2) {
  plv8.elog(ERROR, 'Incorrect collection path');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}
if (pathParts[1].group !== 'idx') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);
const indexBy = aws_oracle_ext[sn][pn][vn].indexBy;
const aidx = [...pathParts[1].text];
aidx.shift();
aidx.pop();
if (indexBy === 'STRING') {
  aidx.shift();
  aidx.pop();
}
const stridx = aidx.join('');
const idx = indexBy === 'BIGINT' ? Number(stridx) : stridx;
if (indexBy === 'BIGINT' && isNaN(idx)) {
  plv8.elog(ERROR, 'Incorrect value for index');
}
const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;
let result = aws_oracle_ext[sn][pn][vn].getValue(idx);
if (typeof(result) === 'undefined') {
  if (collectionType !== 'ASSOC' /*&& result !== emptyCollectionElement*/) {
    plv8.elog(ERROR, 'ORA-06533: Subscript beyond count');
  } else {
    return null;
  }
}
if (collectionType !== 'ASSOC' && result === emptyCollectionElement) return null;
if (result instanceof Date) {
  return {column_value: result};
}
if (result === null) {
  return {column_value: result};
}
if (typeof(result) !=='object' ) {
  return {column_value: result};
}
return result;

]]></complex-attribute>
                        <category _I_D="523023da-8082-4e2e-b580-8a6e8bad6115" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="249641b5-942d-478b-9403-c9fc30eb211f" name="collection_element_set" subcategories-loading="none" object-loading="extended" context="collection_element_set(p_routine_name text, p_collection_path text, p_val anyelement)" is-trigger-function="0" unique-function-name="collection_element_set(p_routine_name text, p_collection_path text, p_val anyelement)" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,anyelement" is-returning-set="f" ret-datatype="void" function-arguments="p_routine_name text, p_collection_path text, p_val anyelement" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304034" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text, p_val anyelement" overload-function-count="5" proc-language="plv8" function-signature="collection_element_set(p_routine_name text, p_collection_path text, p_val anyelement)" unique-suffix="(p_routine_name text, p_collection_path text, p_val anyelement)" routine-number="304034">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength < 2) {
  plv8.elog(ERROR, 'Incorrect collection path');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}
if (pathParts[1].group !== 'idx') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);
const indexBy = aws_oracle_ext[sn][pn][vn].indexBy;
const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;
const aidx = [...pathParts[1].text];
aidx.shift();
aidx.pop();
if (indexBy === 'STRING') {
  aidx.shift();
  aidx.pop();
}
const stridx = aidx.join('');

const idx = indexBy === 'BIGINT' ? Number(stridx) : stridx;

if (indexBy === 'BIGINT' && isNaN(idx)) {
  plv8.elog(ERROR, 'Incorrect value for index');
}

if (pathlength == 2) {
  if (collectionType !== 'ASSOC') {
    if (typeof(aws_oracle_ext[sn][pn][vn].getValue(idx)) === 'undefined') {
      plv8.elog(ERROR, 'ORA-06533: Subscript beyond count');
    }
  }
  aws_oracle_ext[sn][pn][vn].putValue(idx, p_val);
  return;
}

const valuePath = pathParts.slice(2);

/* Strange */
for (let i = 0; i < valuePath.lengh; i++) {
  if ((i % 2) == 0) {
    if (valuePath[i].grp === 'dot') {
      plv8.elog(ERROR, 'Incorrect value path');
    }
  } else {
    if (valuePath[i].grp === 'q' || valuePath[i].grp === 'uq') {
      plv8.elog(ERROR, 'Incorrect value path');
    }
  }
}
    
let lense = aws_oracle_ext[sn][pn][vn].getValue(idx);

/* Strange */
if (lense instanceof Tree) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}

if (typeof(lense) === 'undefined') lense = {};

TreeUtility.setBypath(lense, valuePath,  p_val);

aws_oracle_ext[sn][pn][vn].putValue(idx, lense);

]]></complex-attribute>
                        <category _I_D="628a38f3-336e-4e15-b5f2-93f169124280" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="71eb0052-37c5-4b45-846c-9977afdb2455" name="collection_element_set" subcategories-loading="none" object-loading="extended" context="collection_element_set(pcollection anyelement, ppath numeric[], pval numeric)" is-trigger-function="0" unique-function-name="collection_element_set(pcollection anyelement, ppath numeric[], pval numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,numeric[],numeric" is-returning-set="f" ret-datatype="anyelement" function-arguments="pcollection anyelement, ppath numeric[], pval numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305362" volatility="VOLATILE" is-window="f" function-identity-arguments="pcollection anyelement, ppath numeric[], pval numeric" overload-function-count="5" proc-language="plpgsql" function-signature="collection_element_set(pcollection anyelement, ppath numeric[], pval numeric)" unique-suffix="(pcollection anyelement, ppath numeric[], pval numeric)" routine-number="305362">
                        <complex-attribute name="sql"><![CDATA[
BEGIN 

    IF CARDINALITY(ppath) > 1 THEN

        pcollection[ppath[1]] := aws_oracle_ext.collection_element_set
        (
            pcollection[ppath[1]],
            ppath[2:],
            pval
        );

    ELSE

       IF COALESCE(CARDINALITY(pcollection), 0) = 0 THEN

            FOR i IN 1 .. ppath[1] - 1 LOOP

              pcollection[i] := NULL;

            END LOOP;

       END IF;

       pcollection[ppath[1]] := pval;

    END IF;

    RETURN pcollection;

end;
]]></complex-attribute>
                        <category _I_D="4372ec82-9af5-4e32-b1e6-3d74c43b357b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dd65882c-dc36-4a56-aa95-ad47374e6e50" name="collection_element_set" subcategories-loading="none" object-loading="extended" context="collection_element_set(pcollection anyelement, ppath numeric[], pval record)" is-trigger-function="0" unique-function-name="collection_element_set(pcollection anyelement, ppath numeric[], pval record)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,numeric[],record" is-returning-set="f" ret-datatype="anyelement" function-arguments="pcollection anyelement, ppath numeric[], pval record" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305361" volatility="VOLATILE" is-window="f" function-identity-arguments="pcollection anyelement, ppath numeric[], pval record" overload-function-count="5" proc-language="plpgsql" function-signature="collection_element_set(pcollection anyelement, ppath numeric[], pval record)" unique-suffix="(pcollection anyelement, ppath numeric[], pval record)" routine-number="305361">
                        <complex-attribute name="sql"><![CDATA[
BEGIN 

    IF CARDINALITY(ppath) > 1 THEN

        pcollection[ppath[1]] := aws_oracle_ext.collection_element_set
        (
            pcollection[ppath[1]],
            ppath[2:],
            pval
        );

    ELSE

       IF COALESCE(CARDINALITY(pcollection), 0) = 0 THEN

            FOR i IN 1 .. ppath[1] - 1 LOOP

              pcollection[i] := NULL;

            END LOOP;

       END IF;

       pcollection[ppath[1]] := pval.f1;

    END IF;

    RETURN pcollection;

end;
]]></complex-attribute>
                        <category _I_D="cf880339-4879-4df5-89d1-002ad21b62d1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5a7620db-7b69-4805-8f24-e5de0a878ad1" name="collection_element_set" subcategories-loading="none" object-loading="extended" context="collection_element_set(pcollection anyelement, ppath numeric[], pval text)" is-trigger-function="0" unique-function-name="collection_element_set(pcollection anyelement, ppath numeric[], pval text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,numeric[],text" is-returning-set="f" ret-datatype="anyelement" function-arguments="pcollection anyelement, ppath numeric[], pval text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305363" volatility="VOLATILE" is-window="f" function-identity-arguments="pcollection anyelement, ppath numeric[], pval text" overload-function-count="5" proc-language="plpgsql" function-signature="collection_element_set(pcollection anyelement, ppath numeric[], pval text)" unique-suffix="(pcollection anyelement, ppath numeric[], pval text)" routine-number="305363">
                        <complex-attribute name="sql"><![CDATA[
BEGIN 

    IF CARDINALITY(ppath) > 1 THEN

        pcollection[ppath[1]] := aws_oracle_ext.collection_element_set
        (
            pcollection[ppath[1]],
            ppath[2:],
            pval
        );

    ELSE

       IF COALESCE(CARDINALITY(pcollection), 0) = 0 THEN

            FOR i IN 1 .. ppath[1] - 1 LOOP

              pcollection[i] := NULL;

            END LOOP;

       END IF;

       pcollection[ppath[1]] := pval;

    END IF;

    RETURN pcollection;

end;
]]></complex-attribute>
                        <category _I_D="85a1e1fc-7e88-4d22-8447-055682c81ad2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8e07911a-4064-4fd3-baa8-db5574631b09" name="collection_element_set" subcategories-loading="none" object-loading="extended" context="collection_element_set(pcollection anyelement, ppath numeric[], pval timestamp without time zone)" is-trigger-function="0" unique-function-name="collection_element_set(pcollection anyelement, ppath numeric[], pval timestamp without time zone)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,numeric[],timestamp without time zone" is-returning-set="f" ret-datatype="anyelement" function-arguments="pcollection anyelement, ppath numeric[], pval timestamp without time zone" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305364" volatility="VOLATILE" is-window="f" function-identity-arguments="pcollection anyelement, ppath numeric[], pval timestamp without time zone" overload-function-count="5" proc-language="plpgsql" function-signature="collection_element_set(pcollection anyelement, ppath numeric[], pval timestamp without time zone)" unique-suffix="(pcollection anyelement, ppath numeric[], pval timestamp without time zone)" routine-number="305364">
                        <complex-attribute name="sql"><![CDATA[
BEGIN 

    IF CARDINALITY(ppath) > 1 THEN

        pcollection[ppath[1]] := aws_oracle_ext.collection_element_set
        (
            pcollection[ppath[1]],
            ppath[2:],
            pval
        );

    ELSE

       IF COALESCE(CARDINALITY(pcollection), 0) = 0 THEN

            FOR i IN 1 .. ppath[1] - 1 LOOP

              pcollection[i] := NULL;

            END LOOP;

       END IF;

       pcollection[ppath[1]] := pval;

    END IF;

    RETURN pcollection;

end;
]]></complex-attribute>
                        <category _I_D="4c8af0f5-1b05-4239-aa3b-76508ce68e73" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1db6079d-067e-44c9-a938-45e50bcf0238" name="collection_element_trim" subcategories-loading="none" object-loading="extended" context="collection_element_trim" is-trigger-function="0" unique-function-name="collection_element_trim" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,bigint" is-returning-set="f" ret-datatype="void" function-arguments="p_routine_name text, p_collection_path text, p_n bigint" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304031" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text, p_n bigint" overload-function-count="1" proc-language="plv8" function-signature="collection_element_trim(p_routine_name text, p_collection_path text, p_n bigint)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

const collectioncheck = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
collectioncheck(sn, pn, vn);

const cnt = aws_oracle_ext[sn][pn][vn].count();

if (cnt < p_n) plv8.elog(ERROR, 'ORA-06533: Subscript beyond count');

let indices = [];
let n = p_n;
aws_oracle_ext[sn][pn][vn].walkDesc(null, null, function(key, value){
  if (n == 0) return true;
  indices.push(key);
  n--;
});

for (let i = 0; i < indices.length; i++) {
  aws_oracle_ext[sn][pn][vn].del(indices[i]);
}

]]></complex-attribute>
                        <category _I_D="1f555ee2-a4d5-464b-85c2-2ef8a8b76924" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e7a2e2fe-9793-444b-acc7-0eb6529f52c3" name="collection_extend" subcategories-loading="none" object-loading="extended" context="collection_extend" is-trigger-function="0" unique-function-name="collection_extend" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,numeric[],numeric,numeric" is-returning-set="f" ret-datatype="anyarray" function-arguments="pcollection anyelement, ppath numeric[] DEFAULT NULL::numeric[], pcount numeric DEFAULT 1, pidx numeric DEFAULT NULL::numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="305373" volatility="VOLATILE" is-window="f" function-identity-arguments="pcollection anyelement, ppath numeric[], pcount numeric, pidx numeric" overload-function-count="1" proc-language="plpgsql" function-signature="collection_extend(pcollection anyelement, ppath numeric[], pcount numeric, pidx numeric)">
                        <complex-attribute name="sql"><![CDATA[
begin
    if coalesce(cardinality(ppath), 0) > 0 then
        pcollection[ppath[1]::numeric(10, 0)] :=
                aws_oracle_ext.collection_extend
                        (pcollection => pcollection[ppath[1]::numeric(10, 0)],
                         ppath => ppath[2:]::numeric(10, 0)[],
                         pcount => pcount::numeric(10, 0),
                         pidx => pidx::numeric(10, 0)
                        );
    else
        for i in coalesce(array_length(pcollection, 1), 0) + 1 ..
                 coalesce(array_length(pcollection, 1), 0) +
                                       pcount::numeric(10, 0)
        loop
            pcollection[i] := pcollection[pidx::numeric(10, 0)];
        end loop;
    end if;
return pcollection;
end;
]]></complex-attribute>
                        <category _I_D="655dfb4b-feda-48c8-984b-efd94f2b5764" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="924f89eb-c8dd-4a05-b588-f4d2805f4f51" name="collection_first" subcategories-loading="none" object-loading="extended" context="collection_first" is-trigger-function="0" unique-function-name="collection_first" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_routine_name text, p_collection_path text, p_tp anyelement DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304035" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text, p_tp anyelement" overload-function-count="1" proc-language="plv8" function-signature="collection_first(p_routine_name text, p_collection_path text, p_tp anyelement)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);

const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;

let result = null;
aws_oracle_ext[sn][pn][vn].walkAsc(null, null, function(key, value){
  if (collectionType === 'ASSOC') {
    result = key;
    return true;
  } else {
    if (value !== emptyCollectionElement) {
      result = key;
      return true;
    }
  }
});

return result;

]]></complex-attribute>
                        <category _I_D="7631c70c-5137-41cf-8e20-9f2812209ff1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="86ae49c7-72f5-41b0-9f9c-f4834952e28f" name="collection_last" subcategories-loading="none" object-loading="extended" context="collection_last" is-trigger-function="0" unique-function-name="collection_last" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_routine_name text, p_collection_path text, p_tp anyelement DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304036" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text, p_tp anyelement" overload-function-count="1" proc-language="plv8" function-signature="collection_last(p_routine_name text, p_collection_path text, p_tp anyelement)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);

const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;

let result = null;
if (collectionType === 'ASSOC') {
  if (aws_oracle_ext[sn][pn][vn].count() == 0) return null;
  aws_oracle_ext[sn][pn][vn].walkDesc(null,null, function(key, value){
    result = key;
    return true;
  });
} else {
  let cnt = 0;
  aws_oracle_ext[sn][pn][vn].walkAsc(null, null, function(key, value){
    if (value !== emptyCollectionElement) {
      cnt++;
      return true;
    }
  });
  if (cnt == 0) return null;
  aws_oracle_ext[sn][pn][vn].walkDesc(null,null, function(key, value){
    if (value !== emptyCollectionElement) {
      result = key;
      return true;
    }
  });
}

return result;

]]></complex-attribute>
                        <category _I_D="82723851-5885-496a-a938-ac290f428c7d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8339ad56-3506-4a70-87fe-deceeedf5c62" name="collection_nearest" subcategories-loading="none" object-loading="extended" context="collection_nearest" is-trigger-function="0" unique-function-name="collection_nearest" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,numeric,boolean" is-returning-set="f" ret-datatype="numeric" function-arguments="pcollection anyelement, pidx numeric, pfwrd boolean DEFAULT true" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305374" volatility="VOLATILE" is-window="f" function-identity-arguments="pcollection anyelement, pidx numeric, pfwrd boolean" overload-function-count="1" proc-language="plpgsql" function-signature="collection_nearest(pcollection anyelement, pidx numeric, pfwrd boolean)">
                        <complex-attribute name="sql"><![CDATA[
begin
    return case
            when coalesce(pfwrd, true) then
                nullif((pidx::numeric(10,0) >= array_upper(pcollection, 1))::int, 1) +
                greatest(array_lower(pcollection, 1), pidx::numeric(10,0) + 1)
            else
                nullif((pidx::numeric(10,0) <= array_lower(pcollection, 1))::int, 1) +
                least(array_upper(pcollection, 1), pidx::numeric(10,0) - 1)
           end;
end; ]]></complex-attribute>
                        <category _I_D="882b6248-3bb4-4cf1-a506-abba4e3d172f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e73950e0-aed0-4ce4-809f-57ad7c535f40" name="collection_next" subcategories-loading="none" object-loading="extended" context="collection_next(p_routine_name text, p_collection_path text, p_idx text, p_tp anyelement)" is-trigger-function="0" unique-function-name="collection_next(p_routine_name text, p_collection_path text, p_idx text, p_tp anyelement)" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,text,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_routine_name text, p_collection_path text, p_idx text, p_tp anyelement DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304037" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text, p_idx text, p_tp anyelement" overload-function-count="3" proc-language="plv8" function-signature="collection_next(p_routine_name text, p_collection_path text, p_idx text, p_tp anyelement)" unique-suffix="(p_routine_name text, p_collection_path text, p_idx text, p_tp anyelement)" routine-number="304037">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);
const indexBy = aws_oracle_ext[sn][pn][vn].indexBy;
const idx = indexBy === 'BIGINT' ? Number(p_idx) : p_idx;

if (indexBy === 'BIGINT' && isNaN(idx)) {
  plv8.elog(ERROR, 'Incorrect value for index');
}

const fCount = plv8.find_function("aws_oracle_ext.collection_count");
const cnt = fCount(p_routine_name, p_collection_path);
if (cnt == 0) return null;

const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;

let result = null;
const fFirst = plv8.find_function("aws_oracle_ext.collection_first");
const first = fFirst(p_routine_name, p_collection_path);
if (idx < first) return first;
const fLast = plv8.find_function("aws_oracle_ext.collection_last");
last = fLast(p_routine_name, p_collection_path);
if (idx >= last) return null;
aws_oracle_ext[sn][pn][vn].walkAsc(first, last, function(key,value) {
  if (key > idx) {
    if ( collectionType === 'ASSOC' || (collectionType !== 'ASSOC' && value !== emptyCollectionElement))
    {
      result = key;
      return true;
    }
  }
  });
return result;

]]></complex-attribute>
                        <category _I_D="923b6d79-a367-44f5-9ad3-e644e5d161e4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="25c2191f-dba0-4427-b314-382758599f49" name="collection_next" subcategories-loading="none" object-loading="extended" context="collection_next(pcollection anyelement, pn numeric)" is-trigger-function="0" unique-function-name="collection_next(pcollection anyelement, pn numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,numeric" is-returning-set="f" ret-datatype="numeric" function-arguments="pcollection anyelement, pn numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305375" volatility="VOLATILE" is-window="f" function-identity-arguments="pcollection anyelement, pn numeric" overload-function-count="3" proc-language="plpgsql" function-signature="collection_next(pcollection anyelement, pn numeric)" unique-suffix="(pcollection anyelement, pn numeric)" routine-number="305375">
                        <complex-attribute name="sql"><![CDATA[
    begin
        return aws_oracle_ext.collection_nearest(pcollection => pcollection, pidx => pn);
    end; ]]></complex-attribute>
                        <category _I_D="984cca87-ebbd-4923-9847-e66d07c982c6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1f1664dd-df9a-4fe1-9d0d-6856ae53374d" name="collection_next" subcategories-loading="none" object-loading="extended" context="collection_next(pcollection anyelement, ppath numeric[], pn numeric)" is-trigger-function="0" unique-function-name="collection_next(pcollection anyelement, ppath numeric[], pn numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,numeric[],numeric" is-returning-set="f" ret-datatype="numeric" function-arguments="pcollection anyelement, ppath numeric[], pn numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305376" volatility="VOLATILE" is-window="f" function-identity-arguments="pcollection anyelement, ppath numeric[], pn numeric" overload-function-count="3" proc-language="plpgsql" function-signature="collection_next(pcollection anyelement, ppath numeric[], pn numeric)" unique-suffix="(pcollection anyelement, ppath numeric[], pn numeric)" routine-number="305376">
                        <complex-attribute name="sql"><![CDATA[
    begin
        if cardinality(ppath) > 1 then
            return aws_oracle_ext.collection_next
                                            (pcollection => pcollection[ppath[1]::numeric(10, 0)],
                                             ppath => ppath[2:]::numeric(10, 0)[],
                                             pn => pn
                                            );
        else
            return aws_oracle_ext.collection_nearest(pcollection => pcollection[ppath[1]::numeric(10, 0)], pidx => pn);
        end if;
    end; ]]></complex-attribute>
                        <category _I_D="5ad5bb2c-a3f3-4bc3-84d2-61265349bab9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3ad297ca-edec-45b5-9d15-b84753802b7d" name="collection_out_get" subcategories-loading="none" object-loading="extended" context="collection_out_get" is-trigger-function="0" unique-function-name="collection_out_get" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="json" function-arguments="p_routine_name character varying, p_collection_path character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304089" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name character varying, p_collection_path character varying" overload-function-count="1" proc-language="plv8" function-signature="collection_out_get(p_routine_name character varying, p_collection_path character varying)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");
chk(sn, pn, vn);

let res = [];

aws_oracle_ext[sn][pn][vn].walkAsc(null, null, function(key,value) {
  res.push({k: key, v: value});
});

return res;

]]></complex-attribute>
                        <category _I_D="e1b4e3b3-d5be-4261-8e8b-687fd061832a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b1c58899-d19c-46f5-b894-88a02ccb0b18" name="collection_path_parse" subcategories-loading="none" object-loading="extended" context="collection_path_parse" is-trigger-function="0" unique-function-name="collection_path_parse" is-aggregate="f" language-name="plv8" arguments-datatypes="internal" is-returning-set="f" ret-datatype="void" function-arguments="p internal" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304026" volatility="VOLATILE" is-window="f" function-identity-arguments="p internal" overload-function-count="1" proc-language="plv8" function-signature="collection_path_parse(p internal)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const Pathparser = require('Pathparser');
const parser = new Pathparser(p);
return parser.getTokens();

]]></complex-attribute>
                        <category _I_D="392041c9-c8ef-4c70-bceb-b79bba7251a9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d057e8a4-d179-48cc-a830-34338e432a5f" name="collection_prior" subcategories-loading="none" object-loading="extended" context="collection_prior(p_routine_name text, p_collection_path text, p_idx text, p_tp anyelement)" is-trigger-function="0" unique-function-name="collection_prior(p_routine_name text, p_collection_path text, p_idx text, p_tp anyelement)" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,text,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_routine_name text, p_collection_path text, p_idx text, p_tp anyelement DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304038" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text, p_idx text, p_tp anyelement" overload-function-count="3" proc-language="plv8" function-signature="collection_prior(p_routine_name text, p_collection_path text, p_idx text, p_tp anyelement)" unique-suffix="(p_routine_name text, p_collection_path text, p_idx text, p_tp anyelement)" routine-number="304038">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);
    
if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);
const indexBy = aws_oracle_ext[sn][pn][vn].indexBy;
const idx = indexBy === 'BIGINT' ? Number(p_idx) : p_idx;

if (indexBy === 'BIGINT' && isNaN(idx)) {
  plv8.elog(ERROR, 'Incorrect value for index');
}

const fCount = plv8.find_function("aws_oracle_ext.collection_count");
const cnt = fCount(p_routine_name, p_collection_path);
if (cnt == 0) return null;

const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;

let result = null;
const fFirst = plv8.find_function("aws_oracle_ext.collection_first");
const first = fFirst(p_routine_name, p_collection_path);
if (idx <= first) return null;
const fLast = plv8.find_function("aws_oracle_ext.collection_last");
last = fLast(p_routine_name, p_collection_path);
if (idx > last) return last;
aws_oracle_ext[sn][pn][vn].walkDesc(first, last, function(key,value) {
  if (key < idx) {
    if ( collectionType === 'ASSOC' || (collectionType !== 'ASSOC' && value !== emptyCollectionElement))
    {
      result = key;
      return true;
    }
  }
});
return result;

]]></complex-attribute>
                        <category _I_D="b3da519c-3734-48ad-b956-418facadea3b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="97ddb989-7b59-42df-bdd3-7cb77a7c4f5d" name="collection_prior" subcategories-loading="none" object-loading="extended" context="collection_prior(pcollection anyarray, pn numeric)" is-trigger-function="0" unique-function-name="collection_prior(pcollection anyarray, pn numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyarray,numeric" is-returning-set="f" ret-datatype="numeric" function-arguments="pcollection anyarray, pn numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305377" volatility="VOLATILE" is-window="f" function-identity-arguments="pcollection anyarray, pn numeric" overload-function-count="3" proc-language="plpgsql" function-signature="collection_prior(pcollection anyarray, pn numeric)" unique-suffix="(pcollection anyarray, pn numeric)" routine-number="305377">
                        <complex-attribute name="sql"><![CDATA[
    begin
        return aws_oracle_ext.collection_nearest(pcollection => pcollection, pidx => pn, pfwrd => false);
    end; ]]></complex-attribute>
                        <category _I_D="6725d227-b7a7-4fc6-8ee7-5637fdf7ea85" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ae067ed0-8e64-479b-93a4-b570ebfff356" name="collection_prior" subcategories-loading="none" object-loading="extended" context="collection_prior(pcollection anyarray, ppath numeric[], pn numeric)" is-trigger-function="0" unique-function-name="collection_prior(pcollection anyarray, ppath numeric[], pn numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyarray,numeric[],numeric" is-returning-set="f" ret-datatype="numeric" function-arguments="pcollection anyarray, ppath numeric[], pn numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305378" volatility="VOLATILE" is-window="f" function-identity-arguments="pcollection anyarray, ppath numeric[], pn numeric" overload-function-count="3" proc-language="plpgsql" function-signature="collection_prior(pcollection anyarray, ppath numeric[], pn numeric)" unique-suffix="(pcollection anyarray, ppath numeric[], pn numeric)" routine-number="305378">
                        <complex-attribute name="sql"><![CDATA[
    begin
        if cardinality(ppath) > 1 then
            return aws_oracle_ext.collection_prior
                                            (pcollection => pcollection[ppath[1]::numeric(10, 0)],
                                             ppath => ppath[2:]::numeric(10, 0)[],
                                             pn => pn
                                            );
        else
            return aws_oracle_ext.collection_nearest(pcollection => pcollection[ppath[1]::numeric(10, 0)], pidx => pn, pfwrd => false);
        end if;
    end; ]]></complex-attribute>
                        <category _I_D="504b40d5-7f1f-4e05-ba3b-6116f18b5387" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ddc64f4d-5d70-4ae8-8010-35aefff96b38" name="collection_to_table" subcategories-loading="none" object-loading="extended" context="collection_to_table" is-trigger-function="0" unique-function-name="collection_to_table" is-aggregate="f" language-name="plv8" arguments-datatypes="jsonb,bigint[]" is-returning-set="t" ret-datatype="jsonb" function-arguments="p_val jsonb, pindexes bigint[] DEFAULT NULL::bigint[]" schema-id="304013" function-type="RET_DATASET" count-arguments="2" function-id="304040" volatility="VOLATILE" is-window="f" function-identity-arguments="p_val jsonb, pindexes bigint[]" overload-function-count="1" proc-language="plv8" function-signature="collection_to_table(p_val jsonb, pindexes bigint[])">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
const routine_name = p_val['Procedure Name'];
const collection_path = p_val['Array Name'];
let pathParts = parser(routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);
const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;

let resType = -1;
if (pindexes == null) {
  aws_oracle_ext[sn][pn][vn].walkAsc(null, null, function(key, value) {
    if (collectionType === 'ASSOC' || (collectionType !=='ASSOC' && value !== emptyCollectionElement)) {
      if (resType === -1) {
        resType = typeof(value) === 'object' ? 1 : 0;
      }
      if (resType === 0) {
        plv8.return_next({"column_value": value});
      } else {
        plv8.return_next(value);
      }
    }
  });
} else {

  for (let i = 0; i < pindexes.length; i++) {
    const value = aws_oracle_ext[sn][pn][vn].getValue(pindexes[i]);
    if (typeof(value) === 'undefined') continue;
    if (collectionType !=='ASSOC' && value === emptyCollectionElement) continue;
    if (resType === -1) {
      resType = typeof(value) === 'object' ? 1 : 0;
    }
    if (resType === 0) {
      plv8.return_next({"column_value": value});
    } else {
      plv8.return_next(value);
    }
  }
}

]]></complex-attribute>
                        <category _I_D="cbd8c08e-defc-4464-bee7-b2957089432c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cccb5656-da88-4fe7-9992-9f8cd0890ab5" name="collection_trim" subcategories-loading="none" object-loading="extended" context="collection_trim" is-trigger-function="0" unique-function-name="collection_trim" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,numeric[],numeric" is-returning-set="f" ret-datatype="anyarray" function-arguments="pcollection anyelement, ppath numeric[] DEFAULT NULL::numeric[], pn numeric DEFAULT 1" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305367" volatility="VOLATILE" is-window="f" function-identity-arguments="pcollection anyelement, ppath numeric[], pn numeric" overload-function-count="1" proc-language="plpgsql" function-signature="collection_trim(pcollection anyelement, ppath numeric[], pn numeric)">
                        <complex-attribute name="sql"><![CDATA[
begin
    if cardinality(ppath) > 1 then
      pcollection[ppath[1]::numeric(10, 0)] := aws_oracle_ext.collection_trim
                                (pcollection => pcollection[ppath[1]::numeric(10, 0)],
                                 ppath => ppath[2:]::numeric(10, 0)[]
                                );
    elsif ppath is not null then 
       pcollection[ppath[1]::numeric(10, 0)] := aws_oracle_ext.collection_trim_make
                                  (pcollection => pcollection[ppath[1]::numeric(10, 0)],
                                   pn => pn::numeric(10, 0)
                                  );
    else
       pcollection := aws_oracle_ext.collection_trim_make
                                  (pcollection => pcollection,
                                   pn => pn::numeric(10, 0)
                                  );
    end if;
    return pcollection;
end;
]]></complex-attribute>
                        <category _I_D="bcc67a6d-9635-48e4-965b-44ac5c9bfcb4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f66fd543-aeb4-44c4-939b-42a6d7c97d12" name="collection_trim_make" subcategories-loading="none" object-loading="extended" context="collection_trim_make" is-trigger-function="0" unique-function-name="collection_trim_make" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,numeric" is-returning-set="f" ret-datatype="anyarray" function-arguments="pcollection anyelement, pn numeric DEFAULT 1" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305366" volatility="VOLATILE" is-window="f" function-identity-arguments="pcollection anyelement, pn numeric" overload-function-count="1" proc-language="plpgsql" function-signature="collection_trim_make(pcollection anyelement, pn numeric)">
                        <complex-attribute name="sql"><![CDATA[
begin
    if cardinality(pcollection) >= pn::numeric(10, 0) then
       pcollection := pcollection[1: cardinality(pcollection) - pn::numeric(10, 0) ];
    else
        raise using message := 'SUBSCRIPT_BEYOND_COUNT',
                     detail := 'Subscript outside of limit',
                     hint := '-06532';
    end if;
    return pcollection;
end;
]]></complex-attribute>
                        <category _I_D="109f118c-6c6a-4967-ad33-6b9bfe3a0f96" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4eee7650-30ef-4670-96ce-254d9717ce4a" name="collectioncheck" subcategories-loading="none" object-loading="extended" context="collectioncheck" is-trigger-function="0" unique-function-name="collectioncheck" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="sn text, pn text, vn text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304027" volatility="VOLATILE" is-window="f" function-identity-arguments="sn text, pn text, vn text" overload-function-count="1" proc-language="plv8" function-signature="collectioncheck(sn text, pn text, vn text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
if (typeof(aws_oracle_ext) === 'undefined') plv8.elog(ERROR, 'Collection does not exist!');
if (!aws_oracle_ext.hasOwnProperty(sn)) plv8.elog(ERROR, 'Collection does not exist!');
if (!aws_oracle_ext[sn].hasOwnProperty(pn)) plv8.elog(ERROR, 'Collection does not exist!');
if (!aws_oracle_ext[sn][pn].hasOwnProperty(vn)) plv8.elog(ERROR, 'Collection does not exist!');
if (aws_oracle_ext[sn][pn][vn]!== null && !(aws_oracle_ext[sn][pn][vn] instanceof Tree)) plv8.elog(ERROR, 'Variable is not a collection!');

]]></complex-attribute>
                        <category _I_D="49877c4e-8e58-488d-818d-897561c8a9f6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="95b66d79-c527-4e94-8814-57b7609a4220" name="collections_delete_by_routine" subcategories-loading="none" object-loading="extended" context="collections_delete_by_routine" is-trigger-function="0" unique-function-name="collections_delete_by_routine" is-aggregate="f" language-name="plv8" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="p_routine_name text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304039" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text" overload-function-count="1" proc-language="plv8" function-signature="collections_delete_by_routine(p_routine_name text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
const pathParts = parser(p_routine_name);
if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

if (typeof(aws_oracle_ext) === 'undefined') plv8.elog(ERROR, 'Collection does not exist!');
if (typeof(aws_oracle_ext[sn]) === 'undefined') plv8.elog(ERROR, 'Collection does not exist!');
if (typeof(aws_oracle_ext[sn][pn]) === 'undefined') plv8.elog(ERROR, 'Collection does not exist!');

for (const key in aws_oracle_ext[sn][pn]) {
  if (aws_oracle_ext[sn][pn][key] instanceof Tree) delete aws_oracle_ext[sn][pn][key];
}

]]></complex-attribute>
                        <category _I_D="f9a6d309-27d4-468b-b3b7-d359833bed93" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9b15cf5f-3d1e-465b-bfe1-05c447fd1db9" name="context_upsert" subcategories-loading="none" object-loading="extended" context="context_upsert" is-trigger-function="0" unique-function-name="context_upsert" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="c_namespace text, c_type text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305103" volatility="VOLATILE" is-window="f" function-identity-arguments="c_namespace text, c_type text" overload-function-count="1" proc-language="sql" function-signature="context_upsert(c_namespace text, c_type text)">
                        <complex-attribute name="sql"><![CDATA[
	create schema if not exists aws_oracle_context;
	create table if not exists aws_oracle_context.context(
		context_namespace varchar(30) not null, 
		context_type varchar(22) not null,
		constraint pk_context primary key (context_namespace)
	);
	
	INSERT INTO aws_oracle_context.context VALUES 
	(
		aws_oracle_ext.format_identifier_case($1), 
		UPPER($2)
	)
	ON CONFLICT(context_namespace) DO UPDATE
	SET context_type =  UPPER($2);
]]></complex-attribute>
                        <category _I_D="1a950fea-4cde-4964-9a45-c3117927b853" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b3ad55a9-4fb0-47cc-a677-bee7d30f5e04" name="current_date" subcategories-loading="none" object-loading="extended" context="current_date" is-trigger-function="0" unique-function-name="current_date" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="timestamp" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304382" volatility="STABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="current_date()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT LOCALTIMESTAMP(0);
    
]]></complex-attribute>
                        <category _I_D="8d3efa73-fbd1-411d-87ff-c1ce02ab2bbd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="03f40dde-3365-4df6-a7da-67498a51fde7" name="current_timestamp" subcategories-loading="none" object-loading="extended" context="current_timestamp" is-trigger-function="0" unique-function-name="current_timestamp" is-aggregate="f" language-name="sql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="timestamptz" function-arguments="p_precision integer DEFAULT 6" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304383" volatility="STABLE" is-window="f" function-identity-arguments="p_precision integer" overload-function-count="1" proc-language="sql" function-signature="current_timestamp(p_precision integer)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT 
    CASE
    
        WHEN p_precision = 0 THEN CURRENT_TIMESTAMP(0)
        WHEN p_precision = 1 THEN CURRENT_TIMESTAMP(1)
        WHEN p_precision = 2 THEN CURRENT_TIMESTAMP(3)
        WHEN p_precision = 4 THEN CURRENT_TIMESTAMP(4)
        WHEN p_precision = 5 THEN CURRENT_TIMESTAMP(5)

        ELSE CURRENT_TIMESTAMP

    END;
        
    
]]></complex-attribute>
                        <category _I_D="417c1b61-3ac0-496f-8456-e0d0c6fccf6c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="582a6bd2-dfb7-4185-ae3e-ecb4cc0656e9" name="dbms_application_info$read_client_info" subcategories-loading="none" object-loading="extended" context="dbms_application_info$read_client_info" is-trigger-function="0" unique-function-name="dbms_application_info$read_client_info" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="OUT client_info character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305254" volatility="VOLATILE" is-window="f" function-identity-arguments="OUT client_info character varying" overload-function-count="1" proc-language="sql" function-signature="dbms_application_info$read_client_info(OUT client_info character varying)">
                        <complex-attribute name="sql"><![CDATA[
  select aws_oracle_ext.get_extpack_variable(variable_name => 'CLIENT_INFO'); 
]]></complex-attribute>
                        <category _I_D="54cd1457-cb02-4886-a52a-a913f8c0ca84" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="54784e59-85e2-4a32-a69d-a08b9598ce97" name="dbms_application_info$read_module" subcategories-loading="none" object-loading="extended" context="dbms_application_info$read_module" is-trigger-function="0" unique-function-name="dbms_application_info$read_module" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="record" function-arguments="OUT module_name character varying, OUT action_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305255" volatility="VOLATILE" is-window="f" function-identity-arguments="OUT module_name character varying, OUT action_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_application_info$read_module(OUT module_name character varying, OUT action_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare l_app_name jsonb;
begin
  execute 'show application_name' into strict l_app_name;	 
  module_name := l_app_name->>'module';
  action_name := l_app_name->>'action';
  exception 
    when invalid_text_representation then 
      begin
        module_name := null;
        action_name := null;	      
      end;  
end;
]]></complex-attribute>
                        <category _I_D="690baca1-2cb0-4c3e-a1b6-1336cccc2820" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a618976b-969f-46f6-ab93-1693d9b38539" name="dbms_application_info$set_action" subcategories-loading="none" object-loading="extended" context="dbms_application_info$set_action" is-trigger-function="0" unique-function-name="dbms_application_info$set_action" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="void" function-arguments="action_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305257" volatility="VOLATILE" is-window="f" function-identity-arguments="action_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_application_info$set_action(action_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare l_app_name jsonb;
begin
	l_app_name := jsonb_set(aws_oracle_ext.get_application_name(), 
   							'{action}', 
   							coalesce(to_json(action_name::text),'null')::jsonb, 
   							true);
    perform aws_oracle_ext.set_application_name(l_app_name);
end;
]]></complex-attribute>
                        <category _I_D="927afcf7-f2da-4c70-86bb-4392fb2cc749" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f75be7c3-8252-4a35-8be7-1f99394e260f" name="dbms_application_info$set_client_info" subcategories-loading="none" object-loading="extended" context="dbms_application_info$set_client_info" is-trigger-function="0" unique-function-name="dbms_application_info$set_client_info" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="void" function-arguments="client_info character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305258" volatility="VOLATILE" is-window="f" function-identity-arguments="client_info character varying" overload-function-count="1" proc-language="sql" function-signature="dbms_application_info$set_client_info(client_info character varying)">
                        <complex-attribute name="sql"><![CDATA[
  select aws_oracle_ext.set_extpack_variable
    (
	  variable_name => 'CLIENT_INFO', 
	  variable_value => client_info
	);  
]]></complex-attribute>
                        <category _I_D="5d94ae8e-73df-4109-9ce8-128cd4ab0f2e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="02dc3208-227a-47e9-bd8b-e1b3ef35a7d6" name="dbms_application_info$set_module" subcategories-loading="none" object-loading="extended" context="dbms_application_info$set_module" is-trigger-function="0" unique-function-name="dbms_application_info$set_module" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="module_name text, action_name text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305259" volatility="VOLATILE" is-window="f" function-identity-arguments="module_name text, action_name text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_application_info$set_module(module_name text, action_name text)">
                        <complex-attribute name="sql"><![CDATA[
declare l_app_name jsonb;
begin
    l_app_name := aws_oracle_ext.get_application_name();

    l_app_name := jsonb_set(l_app_name, 
   							'{module}', 
   							coalesce(to_json(module_name),'null')::jsonb, 
   							true);
    
    l_app_name := jsonb_set(l_app_name, 
   							'{action}', 
   							coalesce(to_json(action_name),'null')::jsonb, 
   							true);
    perform aws_oracle_ext.set_application_name(l_app_name);
end;   
]]></complex-attribute>
                        <category _I_D="7e38668a-42ce-4b49-8b46-ffa569da97f6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="854fe3cc-84c5-4c91-8dba-8df5865030be" name="dbms_application_info$set_session_longops" subcategories-loading="none" object-loading="extended" context="dbms_application_info$set_session_longops" is-trigger-function="0" unique-function-name="dbms_application_info$set_session_longops" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,integer,text,integer,integer,integer,integer,text,text" is-returning-set="f" ret-datatype="record" function-arguments="INOUT rindex integer, INOUT slno integer, op_name text DEFAULT NULL::text, target integer DEFAULT 0, context integer DEFAULT 0, sofar integer DEFAULT 0, totalwork integer DEFAULT 0, target_desc text DEFAULT 'unknown target'::text, units text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="9" function-id="305261" volatility="VOLATILE" is-window="f" function-identity-arguments="INOUT rindex integer, INOUT slno integer, op_name text, target integer, context integer, sofar integer, totalwork integer, target_desc text, units text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_application_info$set_session_longops(INOUT rindex integer, INOUT slno integer, op_name text, target integer, context integer, sofar integer, totalwork integer, target_desc text, units text)">
                        <complex-attribute name="sql"><![CDATA[
declare l_app_name jsonb;
begin
    l_app_name := jsonb_set(
    						aws_oracle_ext.get_application_name(), 
   							'{longops}', 
   							jsonb_build_object(
   								'rindex', rindex,
   								'slno', slno,
   								'op_name', op_name,
   								'target', target,
   								'context', context,
   								'sofar', sofar,
   								'totalwork', totalwork,
   								'target_desc', target_desc,
   								'units', units
   							), 
   							true);
    
    -- perform aws_oracle_ext.set_application_name(l_app_name); 
    -- value is TO LONG for application_name (max is 64)
    perform aws_oracle_ext.set_extpack_variable
	  (
	    variable_name => 'SESSION_LONGOPS', 
		variable_value => l_app_name::text
	  );  
end;   
]]></complex-attribute>
                        <category _I_D="1bda45cc-5f51-4aa8-a765-bc2bd71731e4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a532bf90-08dd-4dcf-b586-33edc62c0f54" name="dbms_application_info$set_session_longops_nohint" subcategories-loading="none" object-loading="extended" context="dbms_application_info$set_session_longops_nohint" is-trigger-function="0" unique-function-name="dbms_application_info$set_session_longops_nohint" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305260" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_application_info$set_session_longops_nohint()">
                        <complex-attribute name="sql"><![CDATA[
  -- set_session_longops_nohint constant BINARY_INTEGER := -1;
  select -1
]]></complex-attribute>
                        <category _I_D="7e377b8f-ccdf-49a8-af9b-d50ad77dab55" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9d2f2a06-8102-42b8-b69e-334e54509931" name="dbms_aq$dequeue" subcategories-loading="none" object-loading="extended" context="dbms_aq$dequeue" is-trigger-function="0" unique-function-name="dbms_aq$dequeue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,json,json,json,bytea" is-returning-set="f" ret-datatype="record" function-arguments="queue_name text, dequeue_options json, OUT message_properties json, OUT payload json, OUT msgid bytea" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305006" volatility="VOLATILE" is-window="f" function-identity-arguments="queue_name text, dequeue_options json, OUT message_properties json, OUT payload json, OUT msgid bytea" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_aq$dequeue(queue_name text, dequeue_options json, OUT message_properties json, OUT payload json, OUT msgid bytea)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lvqueueurl text;
	lvreceipthandle text;
begin
	lvqueueurl := aws_oracle_ext.sqs_lu_inited_queueurl(queue_name);

	select receipthandle, messageid, body, null::json
	  into lvreceipthandle, msgid, payload, message_properties
	  from aws_oracle_ext.sqs_aq_get_messages_body(lvqueueurl);
	/*default dequeue_mode REMOVE*/
	if  lvreceipthandle is null then
		raise exception 'timeout or end-of-fetch during message dequeue from %', queue_name
		using hint  = '-25228'; --'ora_code must be here';
	else
		perform aws_oracle_ext.sqs_aq_delete_message(lvqueueurl, lvreceipthandle);
		perform aws_oracle_ext.sqs_lu_delete_queue_message(queue_name, msgid::text);
 	end if;
end;
]]></complex-attribute>
                        <category _I_D="80bd8f6d-e17e-4b91-a830-6460ec550c0f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a3c70e77-885d-447a-9b91-9963a592b1a0" name="dbms_aq$enqueue" subcategories-loading="none" object-loading="extended" context="dbms_aq$enqueue" is-trigger-function="0" unique-function-name="dbms_aq$enqueue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,json,json,json,bytea" is-returning-set="f" ret-datatype="bytea" function-arguments="queue_name text, enqueue_options json, message_properties json, payload json, OUT msgid bytea" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="305007" volatility="VOLATILE" is-window="f" function-identity-arguments="queue_name text, enqueue_options json, message_properties json, payload json, OUT msgid bytea" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_aq$enqueue(queue_name text, enqueue_options json, message_properties json, payload json, OUT msgid bytea)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lvResponse text;
	lQueueUrl text;
	lrT sqs_queues_tables%rowtype;
	lrM sqs_queue_record;
begin

	lrT :=  sqs_lu_inited_queuetbl(queue_name);

	if lrT.id = -1 then
		lQueueUrl := sqs_lu_inited_queueurl(queue_name);

		lvResponse := sqs_aq_send_message(lQueueUrl, payload::text);

		msgid := trim(both '"' from json_extract_path(json_extract_path(lvResponse::json, 'body')::json, 'MessageId')::text)::bytea;

		lrM.msgid := msgid;
		lrM.q_name := queue_name;
		lrM.user_data = payload;

		perform sqs_lu_insert_queue_table(to_json(lrT), to_json(lrM));
	end if;
end;
]]></complex-attribute>
                        <category _I_D="084d3c67-121b-4e66-958f-167e1971dc1b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="858ceae3-6451-45a8-bcfa-aa96ee32f7d5" name="dbms_aqadm$create_queue" subcategories-loading="none" object-loading="extended" context="dbms_aqadm$create_queue" is-trigger-function="0" unique-function-name="dbms_aqadm$create_queue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,integer,double precision,double precision,double precision,boolean,text,boolean" is-returning-set="f" ret-datatype="void" function-arguments="queue_name text, queue_table text, queue_type integer DEFAULT aws_oracle_ext.sqs_normal_queue(), max_retries double precision DEFAULT NULL::double precision, retry_delay double precision DEFAULT 0, retention_time double precision DEFAULT 0, dependency_tracking boolean DEFAULT false, comment text DEFAULT NULL::text, auto_commit boolean DEFAULT true" schema-id="304013" function-type="RET_SCALAR" count-arguments="9" function-id="305008" volatility="VOLATILE" is-window="f" function-identity-arguments="queue_name text, queue_table text, queue_type integer, max_retries double precision, retry_delay double precision, retention_time double precision, dependency_tracking boolean, comment text, auto_commit boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_aqadm$create_queue(queue_name text, queue_table text, queue_type integer, max_retries double precision, retry_delay double precision, retention_time double precision, dependency_tracking boolean, comment text, auto_commit boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	USER_DATA constant text = 'user_data';
	lResult json;
	lrQ aws_oracle_ext.sqs_queues_settings%rowtype;
	lrT aws_oracle_ext.sqs_queues_tables%rowtype;
	lStatusCode varchar(200);
begin

	select ovschemaname, ovtablename
	  into lrT.tschema, lrT.tname
	  from aws_oracle_ext.sqs_lu_define_table(queue_table);

	with q as (select u.table_schema,
					  u.table_name,
					  u.udt_schema,
					  u.udt_name
			     from information_schema.tables t join information_schema.column_udt_usage u on t.table_schema = u.table_schema
				                                                                            and t.table_name  = u.table_name
				 where t.table_schema = lrT.tschema
				   and t.table_name = lrT.tname
				   and u.column_name = USER_DATA
			   )
	 select t.id,
	        q.udt_schema,
	        q.udt_name,
	   into lrT.id
	   		lrT.tdatatypeschema,
	   		lrT.tdatatypename
      from aws_oracle_ext.sqs_queues_tables t join q on t.tschema = q.table_schema
								     and t.tname = q.table_name
								     and t.tdatatypeschema = q.udt_schema
								     and t.tdatatypename =q.udt_name;


	if lrT.id is null then
		raise exception 'invalid value NULL, QUEUE_TABLE should be defined'
		using hint  = 'Please check your user Queue table';
	end if;

	lResult := aws_oracle_ext.sqs_aq_create_queue(pvqueuename => queue_name)::json;
	lStatusCode := json_extract_path(lResult, 'statusCode');

	if lStatusCode::int = 200 then
		lrQ.Url := trim(both '"' from json_extract_path(lResult, 'QueueUrl')::text);
		lrQ.QPureName := reverse(split_part(reverse(lrQ.Url), '/',1));
		lrQ.QName := lrQ.QPureName;

		lrQ.QType := substr(lrQ.QPureName, length(lrQ.QPureName) - 3, 4);

		if lrQ.QType = aws_oracle_ext.sqs_queue_fifo() then
			lrQ.QName := replace(lrQ.QName, concat('.', aws_oracle_ext.sqs_queue_fifo()), '');
		end if;

		if lower(substring(lrQ.Url, 1, 8)) = 'https://' then
			lrQ.Arn := concat('arn:', replace(substring(lrQ.Url, 9), '/', ':'));
		end if;

		insert into aws_oracle_ext.sqs_queues_settings(qname, qpurename, url, arn, qtype, tableid)
		      select lrQ.qname, lrQ.qpurename, lrQ.url, lrQ.arn, lrQ.qtype, lrT.id;
	end if;
end;
]]></complex-attribute>
                        <category _I_D="f83dccf6-69b0-4b01-9374-b222bb4c7e41" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b6cc068d-a634-4020-ae6e-3a0278795459" name="dbms_aqadm$create_queue_table" subcategories-loading="none" object-loading="extended" context="dbms_aqadm$create_queue_table" is-trigger-function="0" unique-function-name="dbms_aqadm$create_queue_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,boolean,integer,text,boolean,integer,integer,integer,boolean" is-returning-set="f" ret-datatype="void" function-arguments="queue_table text, queue_payload_type text, storage_clause text DEFAULT NULL::text, sort_list text DEFAULT NULL::text, multiple_consumers boolean DEFAULT false, message_grouping integer DEFAULT aws_oracle_ext.sqs_none(), comment text DEFAULT NULL::text, auto_commit boolean DEFAULT true, primary_instance integer DEFAULT 0, secondary_instance integer DEFAULT 0, compatible integer DEFAULT NULL::integer, secure boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="12" function-id="305009" volatility="VOLATILE" is-window="f" function-identity-arguments="queue_table text, queue_payload_type text, storage_clause text, sort_list text, multiple_consumers boolean, message_grouping integer, comment text, auto_commit boolean, primary_instance integer, secondary_instance integer, compatible integer, secure boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_aqadm$create_queue_table(queue_table text, queue_payload_type text, storage_clause text, sort_list text, multiple_consumers boolean, message_grouping integer, comment text, auto_commit boolean, primary_instance integer, secondary_instance integer, compatible integer, secure boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lrT aws_oracle_ext.sqs_queues_tables%rowtype;
begin

	select lower(a.ovschemaname), lower(a.ovtablename)
	  into lrT.tschema, lrT.tname
 	from aws_oracle_ext.sqs_lu_define_table(queue_table) a;

	select lower(a.ovschemaname), lower(a.ovtypename)
	  into lrT.tdatatypeschema, lrT.tdatatypename
 	from aws_oracle_ext.sqs_lu_define_type(queue_payload_type) a;

	perform aws_oracle_ext.sqs_lu_create_queue_table(pvtablename := lrT.tname,
                                                      pvtypename := lrT.tdatatypename,
                                                      pvtableschema :=lrT.tschema,
                                                      pvtypeschema := lrT.tdatatypeschema
                                                     );
end;
]]></complex-attribute>
                        <category _I_D="43e8e7ef-b59e-47fc-a4cd-deb7d53500e4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="82b9e073-fd59-40a0-ae56-85545cdb14d7" name="dbms_aqadm$drop_queue" subcategories-loading="none" object-loading="extended" context="dbms_aqadm$drop_queue" is-trigger-function="0" unique-function-name="dbms_aqadm$drop_queue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean" is-returning-set="f" ret-datatype="void" function-arguments="queue_name text, auto_commit boolean DEFAULT true" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305010" volatility="VOLATILE" is-window="f" function-identity-arguments="queue_name text, auto_commit boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_aqadm$drop_queue(queue_name text, auto_commit boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lResult text;
begin
	lResult := sqs_aq_delete_queue(sqs_lu_inited_queueurl(queue_name));
	perform sqs_lu_delete_queue_table(queue_name);
end;
]]></complex-attribute>
                        <category _I_D="bfaefd04-9edf-41f4-9d4c-a3bd1b388da5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d40705ad-d896-4d8a-8cfb-3f8692ffb5c3" name="dbms_aqadm$drop_queue_table" subcategories-loading="none" object-loading="extended" context="dbms_aqadm$drop_queue_table" is-trigger-function="0" unique-function-name="dbms_aqadm$drop_queue_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean,boolean" is-returning-set="f" ret-datatype="void" function-arguments="queue_table text, force boolean DEFAULT false, auto_commit boolean DEFAULT true" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305011" volatility="VOLATILE" is-window="f" function-identity-arguments="queue_table text, force boolean, auto_commit boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_aqadm$drop_queue_table(queue_table text, force boolean, auto_commit boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lrT aws_oracle_ext.sqs_queues_tables%rowtype;
begin

	select lower(a.ovschemaname), lower(a.ovtablename)
	  into lrT.tschema, lrT.tname
 	from aws_oracle_ext.sqs_lu_define_table(queue_table) a;

	perform aws_oracle_ext.sqs_lu_drop_queue_table(pvtablename := lrT.tname, pvschemaname := lrT.tschema);
end;
]]></complex-attribute>
                        <category _I_D="6e9c9ee6-f147-48a9-b871-93ebd9def9ac" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3901a678-8dc7-4734-bb2d-b7ad7c2a972a" name="dbms_assert$enquote_literal" subcategories-loading="none" object-loading="extended" context="dbms_assert$enquote_literal" is-trigger-function="0" unique-function-name="dbms_assert$enquote_literal" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_str_literal text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304384" volatility="STABLE" is-window="f" function-identity-arguments="p_str_literal text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_assert$enquote_literal(p_str_literal text)" comment="This function verifies that all single quotes except leading and trailing characters are paired with adjacent single quotes. Also function adds leading and trailing single quotes to a string literal.">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    /* Requires functions to be installed in aws_oracle_ext schema:
       - regexp_count.
    */

    IF (mod(aws_oracle_ext.regexp_count(p_str_literal, ''''), 2) != 0) THEN
        RAISE USING MESSAGE := 'Numeric or value error.',
                    DETAIL := 'Single quotes without paired adjacent single quotes are found. Oracle error ORA-06502.',
                    HINT := 'Verify that all single quotes except leading and trailing characters are paired with adjacent single quotes.';
    END IF;

    RETURN concat('''', p_str_literal, '''');
END;
]]></complex-attribute>
                        <category _I_D="177ebde7-131f-4a61-8ecf-55fba90a77bc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1a137f7d-3b1a-4fac-a4df-84a515dc2f3c" name="dbms_assert$enquote_name" subcategories-loading="none" object-loading="extended" context="dbms_assert$enquote_name" is-trigger-function="0" unique-function-name="dbms_assert$enquote_name" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean" is-returning-set="f" ret-datatype="text" function-arguments="p_str_sqlname text, p_capitalize boolean DEFAULT true" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304385" volatility="STABLE" is-window="f" function-identity-arguments="p_str_sqlname text, p_capitalize boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_assert$enquote_name(p_str_sqlname text, p_capitalize boolean)" comment="This function encloses the input string within double quotes, unless they are already present.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_dblquote_count SMALLINT;
    v_str_sqlname TEXT := p_str_sqlname;
BEGIN
    /* Requires functions to be installed in aws_oracle_ext schema:
       - regexp_count.
    */

    v_dblquote_count := aws_oracle_ext.regexp_count(v_str_sqlname, '"');

    IF (mod(v_dblquote_count, 2) != 0) THEN
        RAISE USING MESSAGE := 'Invalid SQL name.',
                    DETAIL := 'Double quotes without paired adjacent double quotes are found. Oracle error ORA-44003.',
                    HINT := 'Input string literal must be corrected by removing unpaired double quotes or adding corresponding ones.';
    END IF;

    IF (char_length(coalesce(v_str_sqlname, '')) = 0) THEN
        v_str_sqlname := '""';
    ELSIF (left(v_str_sqlname, 1) != '"') THEN
        v_str_sqlname := concat('"', v_str_sqlname, '"');
    END IF;

    RETURN CASE
              WHEN p_capitalize AND v_dblquote_count = 0 THEN upper(v_str_sqlname)
              ELSE v_str_sqlname
           END;
END;
]]></complex-attribute>
                        <category _I_D="e48f25e0-fe93-44cc-950c-1e1817c40033" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="87ef67f6-e581-42d3-80d4-d7318f6170e6" name="dbms_assert$qualified_sql_name" subcategories-loading="none" object-loading="extended" context="dbms_assert$qualified_sql_name" is-trigger-function="0" unique-function-name="dbms_assert$qualified_sql_name" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_str_sqlname_list text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304386" volatility="STABLE" is-window="f" function-identity-arguments="p_str_sqlname_list text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_assert$qualified_sql_name(p_str_sqlname_list text)" comment="This function checks the input string conforms to the basic characteristics of a qualified SQL name. A qualified name can be made up of several simple SQL names representing the names of the schema, object and database links.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_str_sqlname VARCHAR;
BEGIN
    FOREACH v_str_sqlname IN ARRAY regexp_split_to_array(p_str_sqlname_list, '[.@]')
    LOOP
        PERFORM aws_oracle_ext.dbms_assert$simple_sql_name(v_str_sqlname);
    END LOOP;

    RETURN p_str_sqlname_list;
EXCEPTION
    WHEN OTHERS THEN
        RAISE USING MESSAGE := 'Invalid qualified SQL name.',
                    DETAIL := 'Input string literal is not a valid qualified SQL name. Oracle error ORA-44004.',
                    HINT := 'Verify that supplied SQL name (compound name) represent a valid SQL name.';
END;
]]></complex-attribute>
                        <category _I_D="91a40a96-6850-41c5-91c8-3eaf70a56293" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="90eb16ed-9185-4c29-b228-61ef60b57ec7" name="dbms_assert$schema_name" subcategories-loading="none" object-loading="extended" context="dbms_assert$schema_name" is-trigger-function="0" unique-function-name="dbms_assert$schema_name" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_schema_name text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304387" volatility="VOLATILE" is-window="f" function-identity-arguments="p_schema_name text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_assert$schema_name(p_schema_name text)" comment="This function verifies that the input string is an existing schema name. The function is case sensitive.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_schema_name VARCHAR;
BEGIN
    SELECT nspname
      INTO v_schema_name
      FROM pg_catalog.pg_namespace
     WHERE nspname = p_schema_name;

    IF (NOT FOUND) THEN
        RAISE invalid_schema_name;
    END IF;

    RETURN v_schema_name;
EXCEPTION
    WHEN invalid_schema_name THEN
        RAISE USING MESSAGE := 'Invalid schema.',
                    DETAIL := format('Checking found that schema with name %s does not exist in the database. Oracle error ORA-44001.',
                                     CASE
                                        WHEN p_schema_name IS NOT NULL THEN quote_literal(p_schema_name)
                                        ELSE concat(quote_literal('NULL'), ' (empty name)')
                                     END),
                    HINT := 'Verify that schema with such name have to be exist in the database or correct supplied schema name.';
END;
]]></complex-attribute>
                        <category _I_D="f8a38ebb-378f-4e08-abc2-355ae1962c80" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6fbaba3e-afed-4243-bb75-a738e4bfd96d" name="dbms_assert$simple_sql_name" subcategories-loading="none" object-loading="extended" context="dbms_assert$simple_sql_name" is-trigger-function="0" unique-function-name="dbms_assert$simple_sql_name" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_str_sqlname text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304388" volatility="STABLE" is-window="f" function-identity-arguments="p_str_sqlname text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_assert$simple_sql_name(p_str_sqlname text)" comment="This function checks the input string conforms to the basic characteristics of a simple SQL name.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_str_sqlname VARCHAR := trim(p_str_sqlname);
BEGIN
    /* Requires functions to be installed in aws_oracle_ext schema:
       - regexp_count;
       - regexp_substr.
    */

    -- SQL name could not be blank (empty).
    IF (char_length(coalesce(v_str_sqlname, '')) = 0) THEN
        RAISE invalid_name;
    END IF;

    -- Determining if the sql name is quoted or not.
    IF (p_str_sqlname ~* '"') THEN
        -- All double quotes in the sql name should be paired.
        IF (mod(aws_oracle_ext.regexp_count(p_str_sqlname, '"'), 2) != 0) THEN
            RAISE invalid_name;
        -- Quoted identifier could not contain any other double quotes.
        ELSIF (aws_oracle_ext.regexp_substr(p_str_sqlname, '"(.+)"', 1, 1) ~* '"') THEN
            RAISE invalid_name;
        END IF;
    ELSE
        -- Nonquoted sql name allows only alphanumeric and _, $, # characters.
        IF (v_str_sqlname !~* '^[a-z_\$#]+$') THEN
            RAISE invalid_name;
        -- Nonquoted sql name must begin with an alphabetic character.
        ELSIF (left(v_str_sqlname, 1) !~* '[a-z]') THEN
            RAISE invalid_name;
        END IF;
    END IF;

    RETURN p_str_sqlname;
EXCEPTION
    WHEN invalid_name THEN
        RAISE USING MESSAGE := 'Invalid SQL name.',
                    DETAIL := 'Input string literal is not a valid simple SQL name. Oracle error ORA-44003.',
                    HINT := 'Verify that supplied SQL name represent a valid simple SQL name.';
END;
]]></complex-attribute>
                        <category _I_D="399f677a-bff7-4634-99a5-652d9ca902ac" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="07b27626-ca1d-442d-b360-4789ebe7ae45" name="dbms_assert$sql_object_name" subcategories-loading="none" object-loading="extended" context="dbms_assert$sql_object_name" is-trigger-function="0" unique-function-name="dbms_assert$sql_object_name" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_sql_object_name text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304389" volatility="VOLATILE" is-window="f" function-identity-arguments="p_sql_object_name text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_assert$sql_object_name(p_sql_object_name text)" comment="This function verifies that the input parameter string is a qualified SQL identifier of an existing SQL object.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_schema_name TEXT;
    v_object_name TEXT;
    v_obj_exists BOOLEAN;
BEGIN
    IF (coalesce(p_sql_object_name, '') ~ '^\s*$' OR -- Object name could not be blank (empty)
        p_sql_object_name ~ '^\s*\.|\.\s*$' OR -- Object name could not start or end with a dot
        array_length(string_to_array(p_sql_object_name, '\.'), 1) - 1 > 1) -- Object name could not contain more than one dot
    THEN
        RAISE invalid_name;
    END IF;

    -- Extracting schema name from object name literal
    v_schema_name := trim(coalesce(substring(p_sql_object_name, '^\s*(.+)\s*\.'), current_schema));

    -- Extracting object name from object_name literal
    v_object_name := trim(coalesce(substring(p_sql_object_name, '\.\s*(.+)'), p_sql_object_name));

    -- Preparing schema name
    IF (v_schema_name ~ '"') THEN
        -- All double quotes in the schema name must be paired
        IF (mod(array_length(string_to_array(v_schema_name, '"'), 1) - 1, 2) != 0) THEN
            RAISE invalid_name;
        END IF;

        v_schema_name := substring(v_schema_name, '"(.+)"');
    ELSIF (v_schema_name IS NOT NULL)
    THEN
        v_schema_name := lower(v_schema_name);
    END IF;

    -- Preparing object name
    IF (v_object_name ~ '"') THEN
        -- All double quotes in the object name must be paired
        IF (mod(array_length(string_to_array(v_object_name, '"'), 1) - 1, 2) != 0) THEN
            RAISE invalid_name;
        END IF;

        v_object_name := substring(v_object_name, '"(.+)"');
    ELSIF (v_object_name IS NOT NULL)
    THEN
        v_object_name := lower(v_object_name);
    END IF;

    v_obj_exists :=
        CASE
           WHEN EXISTS(SELECT 1 -- TABLE, VIEW
                         FROM information_schema.tables
                        WHERE table_schema = v_schema_name
                          AND table_name = v_object_name)
           THEN TRUE
           WHEN EXISTS(SELECT 1 -- INDEX
                         FROM pg_catalog.pg_class AS cls1
                              INNER JOIN pg_catalog.pg_index AS idx ON (idx.indexrelid = cls1.oid)
                              INNER JOIN pg_catalog.pg_class AS cls2 ON (cls2.oid = idx.indrelid)
                              LEFT JOIN pg_catalog.pg_user AS usr1 ON (usr1.usesysid = cls1.relowner)
                              LEFT JOIN pg_catalog.pg_user AS usr2 ON (usr2.usesysid = cls2.relowner)
                              LEFT JOIN pg_catalog.pg_namespace AS nsp1 ON (nsp1.oid = cls1.relnamespace)
                              LEFT JOIN pg_catalog.pg_namespace AS nsp2 ON (nsp2.oid = cls2.relnamespace)
                              INNER JOIN information_schema.tables AS tbl ON (tbl.table_schema = nsp2.nspname AND
                                                                              tbl.table_name = cls2.relname)
                        WHERE cls1.relkind = 'i'
                          AND nsp1.nspname = v_schema_name
                          AND cls1.relname = v_object_name)
           THEN TRUE
           WHEN EXISTS(SELECT 1 -- CONSTRAINT
                         FROM information_schema.table_constraints
                        WHERE constraint_schema = v_schema_name
                          AND constraint_name = v_object_name)
           THEN TRUE
           WHEN EXISTS(SELECT 1 -- SEQUENCE
                         FROM information_schema.sequences
                        WHERE sequence_schema = v_schema_name
                          AND sequence_name = v_object_name)
           THEN TRUE
           WHEN EXISTS(SELECT 1 -- FUNCTION, PROCEDURE
                         FROM information_schema.routines
                        WHERE routine_schema = v_schema_name
                          AND routine_name = v_object_name)
           THEN TRUE
           WHEN EXISTS(SELECT 1 -- TRIGGER
                         FROM information_schema.triggers
                        WHERE trigger_schema = v_schema_name
                          AND trigger_name = v_object_name)
           THEN TRUE
           WHEN EXISTS(SELECT 1 -- DOMAIN
                         FROM information_schema.domains
                        WHERE domain_schema = v_schema_name
                          AND domain_name = v_object_name)
           THEN TRUE
           WHEN EXISTS(SELECT 1 -- COMPOSITE TYPE, MATERIALIZED VIEW
                         FROM pg_catalog.pg_class AS cls
                              INNER JOIN pg_catalog.pg_namespace AS nsp ON (nsp.oid = cls.relnamespace)
                        WHERE cls.relkind IN ('c', 'm')
                          AND nsp.nspname = v_schema_name
                          AND cls.relname = v_object_name)
           THEN TRUE
           ELSE FALSE
        END;

    IF (NOT v_obj_exists) THEN
        RAISE invalid_name;
    END IF;

    RETURN p_sql_object_name;
EXCEPTION
    WHEN invalid_name THEN
        RAISE USING MESSAGE := 'Invalid object name.',
                    DETAIL := 'Input string literal is not a qualified SQL identifier of an existing SQL object.',
                    HINT := '-44002';
END;
]]></complex-attribute>
                        <category _I_D="0fe1c5cd-a818-4674-8f71-7e8f464840c9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7d528be5-29b2-4c33-8004-22aba395264c" name="dbms_job$broken" subcategories-loading="none" object-loading="extended" context="dbms_job$broken" is-trigger-function="0" unique-function-name="dbms_job$broken" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,boolean,timestamp without time zone" is-returning-set="f" ret-datatype="void" function-arguments="job double precision, broken boolean, next_date timestamp without time zone" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304390" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, broken boolean, next_date timestamp without time zone" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$broken(job double precision, broken boolean, next_date timestamp without time zone)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  update aws_oracle_ext.jobs j
     set broken = case when dbms_job$broken.broken then 'Y' else 'N' end
   where j.job = dbms_job$broken.job;
END;
]]></complex-attribute>
                        <category _I_D="99b6530d-cc38-4b20-80b6-3e96141b6709" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="736772c3-1f3f-430f-b5a8-88994e5f7015" name="dbms_job$change" subcategories-loading="none" object-loading="extended" context="dbms_job$change" is-trigger-function="0" unique-function-name="dbms_job$change" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,character varying,timestamp without time zone,character varying,double precision,boolean" is-returning-set="f" ret-datatype="void" function-arguments="job double precision, what character varying, next_date timestamp without time zone DEFAULT now(), &quot;interval&quot; character varying DEFAULT 'null'::character varying, instance double precision DEFAULT NULL::double precision, force boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304391" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, what character varying, next_date timestamp without time zone, &quot;interval&quot; character varying, instance double precision, force boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$change(job double precision, what character varying, next_date timestamp without time zone, &quot;interval&quot; character varying, instance double precision, force boolean)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  update aws_oracle_ext.jobs j
     set what = dbms_job$change.what
       , next_date = dbms_job$change.next_date
       , "interval" = dbms_job$change.interval
   where j.job = dbms_job$change.job;
END;
]]></complex-attribute>
                        <category _I_D="c68d4cd2-ed70-4efb-9e9f-80342016d162" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f24aaaf5-d726-401c-842b-09b4931ee047" name="dbms_job$instance" subcategories-loading="none" object-loading="extended" context="dbms_job$instance" is-trigger-function="0" unique-function-name="dbms_job$instance" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,double precision,boolean" is-returning-set="f" ret-datatype="void" function-arguments="job double precision, instance double precision, force boolean" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304392" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, instance double precision, force boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$instance(job double precision, instance double precision, force boolean)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  null;
END;
]]></complex-attribute>
                        <category _I_D="47b041b7-4357-4950-9114-03e5cbb27205" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5bbc203e-eb7f-4f51-9bc1-0ff23ca41aa9" name="dbms_job$interval" subcategories-loading="none" object-loading="extended" context="dbms_job$interval" is-trigger-function="0" unique-function-name="dbms_job$interval" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,character varying" is-returning-set="f" ret-datatype="void" function-arguments="job double precision, &quot;interval&quot; character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304393" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, &quot;interval&quot; character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$interval(job double precision, &quot;interval&quot; character varying)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  update aws_oracle_ext.jobs
     set "interval" = dbms_job$interval."interval"
   where jobs.job = dbms_job$interval.job;
END;
]]></complex-attribute>
                        <category _I_D="d6c4f87b-e078-493e-bc1d-34988dba7103" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5b907de0-99ee-4649-89f0-310f431e59fd" name="dbms_job$isubmit" subcategories-loading="none" object-loading="extended" context="dbms_job$isubmit" is-trigger-function="0" unique-function-name="dbms_job$isubmit" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,character varying,timestamp without time zone,character varying,boolean,double precision,boolean" is-returning-set="f" ret-datatype="void" function-arguments="job double precision, what character varying, next_date timestamp without time zone DEFAULT now(), &quot;interval&quot; character varying DEFAULT 'null'::character varying, no_parse boolean DEFAULT false, instance double precision DEFAULT NULL::double precision, force boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="7" function-id="304394" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, what character varying, next_date timestamp without time zone, &quot;interval&quot; character varying, no_parse boolean, instance double precision, force boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$isubmit(job double precision, what character varying, next_date timestamp without time zone, &quot;interval&quot; character varying, no_parse boolean, instance double precision, force boolean)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  insert into aws_oracle_ext.jobs( job, what, next_date, "interval" )
  values( job, what, next_date, "interval" );
END;
]]></complex-attribute>
                        <category _I_D="7b4347fc-93a2-46e0-8b35-f3a385aa4626" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e462ec0e-f701-4dc4-a8df-973d2224132e" name="dbms_job$next_date" subcategories-loading="none" object-loading="extended" context="dbms_job$next_date" is-trigger-function="0" unique-function-name="dbms_job$next_date" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,timestamp without time zone" is-returning-set="f" ret-datatype="void" function-arguments="job double precision, next_date timestamp without time zone" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304395" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, next_date timestamp without time zone" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$next_date(job double precision, next_date timestamp without time zone)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  update aws_oracle_ext.jobs j
     set j.next_date = next_date
   where j.job = dbms_job$next_date.job;
END;
]]></complex-attribute>
                        <category _I_D="fda947b0-f8c1-44b1-8eaf-8908e7c73e88" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b06a0434-1847-4b68-9a48-77b72641f2a9" name="dbms_job$remove" subcategories-loading="none" object-loading="extended" context="dbms_job$remove" is-trigger-function="0" unique-function-name="dbms_job$remove" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision" is-returning-set="f" ret-datatype="void" function-arguments="job double precision" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304396" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$remove(job double precision)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  delete from aws_oracle_ext.jobs j where j.job = dbms_job$remove.job;
END;
]]></complex-attribute>
                        <category _I_D="2e66b290-5bd2-462c-a226-217a141f55b4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="93b2ea8b-bd28-451b-8338-b5dd93aeb0b9" name="dbms_job$run" subcategories-loading="none" object-loading="extended" context="dbms_job$run" is-trigger-function="0" unique-function-name="dbms_job$run" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,boolean" is-returning-set="f" ret-datatype="void" function-arguments="job double precision, force boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304397" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, force boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$run(job double precision, force boolean)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  update aws_oracle_ext.jobs j
     set next_date = current_timestamp
       , broken = 'N'
   where j.job = dbms_job$run.job;
END;
]]></complex-attribute>
                        <category _I_D="061c8661-ba1d-434a-ae52-5b511d040aec" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="304482e6-1dee-4fa1-85d5-0fe84cb23b10" name="dbms_job$submit" subcategories-loading="none" object-loading="extended" context="dbms_job$submit" is-trigger-function="0" unique-function-name="dbms_job$submit" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,character varying,timestamp without time zone,character varying,boolean,double precision,boolean" is-returning-set="f" ret-datatype="float8" function-arguments="OUT job double precision, what character varying, next_date timestamp without time zone DEFAULT now(), &quot;interval&quot; character varying DEFAULT 'null'::character varying, no_parse boolean DEFAULT false, instance double precision DEFAULT NULL::double precision, force boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304398" volatility="VOLATILE" is-window="f" function-identity-arguments="OUT job double precision, what character varying, next_date timestamp without time zone, &quot;interval&quot; character varying, no_parse boolean, instance double precision, force boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$submit(OUT job double precision, what character varying, next_date timestamp without time zone, &quot;interval&quot; character varying, no_parse boolean, instance double precision, force boolean)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  insert into aws_oracle_ext.jobs( job, what, next_date, "interval" )
  values( default, what, next_date, "interval" )
  returning jobs.job::double precision into dbms_job$submit.job;
END;
]]></complex-attribute>
                        <category _I_D="f3676165-eb84-4dbc-aee8-f7c4495921c9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="943c5028-663b-4673-9fe5-65244bc29fee" name="dbms_job$user_export" subcategories-loading="none" object-loading="extended" context="dbms_job$user_export(job double precision, INOUT mycall character varying)" is-trigger-function="0" unique-function-name="dbms_job$user_export(job double precision, INOUT mycall character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="job double precision, INOUT mycall character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304399" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, INOUT mycall character varying" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_job$user_export(job double precision, INOUT mycall character varying)" unique-suffix="(job double precision, INOUT mycall character varying)" routine-number="304399">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  select 'PERFORM aws_oracle_ext.dbms_job$isubmit( ' || j.job || ', ''' || replace( j.what, '''', '''''' ) || ''', to_timestamp( ''' || to_char( j.next_date, 'YYYYMMDDHH24MISS' ) || ''', ''YYYYMMDDHH24MISS'') , ''' || j.interval || ''' );'
    into mycall
    from aws_oracle_ext.jobs as j
   where j.job = job;
END;
]]></complex-attribute>
                        <category _I_D="e2586e75-902a-4bca-8dcd-61d6ccdd609b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="51557371-3bd8-46c8-97b6-f0934cdde86f" name="dbms_job$user_export" subcategories-loading="none" object-loading="extended" context="dbms_job$user_export(job double precision, INOUT mycall character varying, myinst character varying)" is-trigger-function="0" unique-function-name="dbms_job$user_export(job double precision, INOUT mycall character varying, myinst character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="job double precision, INOUT mycall character varying, myinst character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304400" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, INOUT mycall character varying, myinst character varying" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_job$user_export(job double precision, INOUT mycall character varying, myinst character varying)" unique-suffix="(job double precision, INOUT mycall character varying, myinst character varying)" routine-number="304400">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  mycall := aws_oracle_ext.dbms_job$user_export( job := job );
END;
]]></complex-attribute>
                        <category _I_D="f7c88dd8-53bf-42b8-ae36-cbbedd58dc0d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="83ad0e0e-22da-4d6f-ba7c-a63eff8e62ed" name="dbms_job$what" subcategories-loading="none" object-loading="extended" context="dbms_job$what" is-trigger-function="0" unique-function-name="dbms_job$what" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,character varying" is-returning-set="f" ret-datatype="void" function-arguments="job double precision, what character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304401" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, what character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$what(job double precision, what character varying)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  update aws_oracle_ext.jobs j
     set j.what = what
   where j.job = job;
END;
]]></complex-attribute>
                        <category _I_D="2d554036-8544-45a7-9532-3ad04a63f10f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2d04143d-a3f8-4264-adcb-558767921c31" name="dbms_lob$constant" subcategories-loading="none" object-loading="extended" context="dbms_lob$constant" is-trigger-function="0" unique-function-name="dbms_lob$constant" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="int4" function-arguments="p_const_name text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305161" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_const_name text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_lob$constant(p_const_name text)">
                        <complex-attribute name="sql"><![CDATA[
declare l_consts jsonb = json_build_object(
							-- DBMS_LOB Constants - Basic
							'CALL',12,
							'FILE_READONLY',0,
							'LOB_READONLY',0,
							'LOB_READWRITE',1,
							-- 'LOBMAXSIZE',18446744073709551615 -> to long for INT-> aws_oracle_ext.dbms_lob$lobmaxsize,
							'SESSION',10,

							-- DBMS_LOB Constants - Option Types
							'OPT_COMPRESS',1,
							'OPT_DEDUPLICATE',4,
							'OPT_ENCRYPT',2,

							-- DBMS_LOB Constants - Option Values							
							'COMPRESS_OFF',0,
							'COMPRESS_ON',1,
							'DEDUPLICATE_OFF',0,
							'DEDUPLICATE_ON',4,
							'ENCRYPT_OFF',0,
							'ENCRYPT_ON',2,
							
							-- DBMS_LOB Constants - DBFS State Value Types
							'DBFS_LINK_NEVER',0,
							'DBFS_LINK_NO',2,
							'DBFS_LINK_YES',1,
							
							-- DBMS_LOB Constants - DBFS Cache Flags
							'DBFS_LINK_CACHE',1,
							'DBFS_LINK_NOCACHE',0,
							
							
							-- DBMS_LOB Constants - Miscellaneous
							'CONTENTTYPE_MAX_SIZE',128,
							'DBFS_LINK_PATH_MAX_SIZE',1024,
							
							'DEFAULT_CSID',0,
							'DEFAULT_LANG_CTX',0,
							'BLOBMAXSIZE',16777216,
							'CLOBMAXSIZE',4194304,
							'NO_WARNING',0,

							'TRANSACTION',11,
							'WARN_INCONVERTIBLE_CHAR',1

						);
begin
	if l_consts ?  upper(p_const_name) then
		return (l_consts->>upper(p_const_name))::integer;
	else 
		raise exception 'Unknown DBMS_LOB constant: %', p_const_name;
	end if;
end ]]></complex-attribute>
                        <category _I_D="af602cea-018e-4ab8-ae4c-81130fe6b1c7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a6d9cab4-a3cb-4938-86ec-eab9b8126c16" name="dbms_lob$copy" subcategories-loading="none" object-loading="extended" context="dbms_lob$copy" is-trigger-function="0" unique-function-name="dbms_lob$copy" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,integer,integer,integer" is-returning-set="f" ret-datatype="varchar" function-arguments="INOUT dest_lob character varying, src_lob character varying, amount integer, dest_offset integer DEFAULT 1, src_offset integer DEFAULT 1" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304402" volatility="VOLATILE" is-window="f" function-identity-arguments="INOUT dest_lob character varying, src_lob character varying, amount integer, dest_offset integer, src_offset integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_lob$copy(INOUT dest_lob character varying, src_lob character varying, amount integer, dest_offset integer, src_offset integer)" comment="This procedure copies all, or a part of, a source internal LOB to a destination internal LOB. You can specify the offsets for both the source and destination LOBs, and the number of bytes or characters to copy">
                        <complex-attribute name="sql"><![CDATA[
declare src_res CHARACTER VARYING;
        dest_before CHARACTER VARYING;
        dest_after CHARACTER VARYING;
BEGIN
  if dest_lob is null or src_lob is null or amount is null or dest_offset is null or src_offset is null then raise exception 'invalid input parameters';
  elsif src_offset < 1 or dest_offset < 1 then raise exception 'invalid input parameters';
  elsif amount < 1 then raise exception 'invalid input parameters';
  end if;

  src_res := substring(src_lob from src_offset for amount);
  dest_before := substring(dest_lob, 1, dest_offset - 1);
  dest_after := substring(dest_lob from length(src_res) + length(dest_before) + 1);
  dest_lob := dest_before || src_res || dest_after;
END;  
]]></complex-attribute>
                        <category _I_D="bbb9454b-1459-44e4-a3c8-49edd818f459" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2d5c4fc6-6feb-42bb-a392-474f60309755" name="dbms_lob$instr" subcategories-loading="none" object-loading="extended" context="dbms_lob$instr" is-trigger-function="0" unique-function-name="dbms_lob$instr" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,integer,integer" is-returning-set="f" ret-datatype="int4" function-arguments="lob_loc character varying, pattern character varying, off_set integer DEFAULT 1, nth integer DEFAULT 1" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304403" volatility="VOLATILE" is-window="f" function-identity-arguments="lob_loc character varying, pattern character varying, off_set integer, nth integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_lob$instr(lob_loc character varying, pattern character varying, off_set integer, nth integer)" comment="This function returns the matching position of the nth occurrence of the pattern in the lob_loc, starting from the offset you specify">
                        <complex-attribute name="sql"><![CDATA[
declare matches integer;
        ind integer;
begin
  /*parameters validation*/
  if lob_loc is null or pattern is null or off_set is null or nth is null then 
    return null;
  elsif (off_set < 1) or (nth < 1) then 
    return null;
  end if;

  if (off_set = 1) and (nth = 1) then 
    return strpos(lob_loc, pattern);
   else 
     matches := 0;
     for i in off_set..length(lob_loc) loop
       if substring(lob_loc, i, length(pattern)) = pattern then 
         ind := i;
	 matches := matches + 1;
	 if matches = nth then 
	   return ind;
	 end if;
       end if;           
     end loop;
     return 0;
  end if;
end;
]]></complex-attribute>
                        <category _I_D="2e136952-7096-425e-b74b-2df29f389123" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5455a143-4548-49ac-8788-cb0d3582d6d8" name="dbms_lob$lobmaxsize" subcategories-loading="none" object-loading="extended" context="dbms_lob$lobmaxsize" is-trigger-function="0" unique-function-name="dbms_lob$lobmaxsize" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305162" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_lob$lobmaxsize()">
                        <complex-attribute name="sql"><![CDATA[
-- ORACLE DBMS_LOB.LOBMAXSIZE
--  lobmaxsize    CONSTANT INTEGER        := 18446744073709551615;
SELECT 18446744073709551615
]]></complex-attribute>
                        <category _I_D="555248db-5e76-416e-9fe0-73cb6db20cb5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d2290fb5-515b-4275-bc0d-0ea05208946c" name="dbms_lock$allocate_unique" subcategories-loading="none" object-loading="extended" context="dbms_lock$allocate_unique" is-trigger-function="0" unique-function-name="dbms_lock$allocate_unique" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="lockname character varying, INOUT lockhandle character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304406" volatility="VOLATILE" is-window="f" function-identity-arguments="lockname character varying, INOUT lockhandle character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_lock$allocate_unique(lockname character varying, INOUT lockhandle character varying)" comment="This procedure allocates a unique lock identifier given a lock name. Lock identifiers are used to enable applications to coordinate their use of locks.">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    lockhandle := lower(lockname);
END;
]]></complex-attribute>
                        <category _I_D="37472f09-de61-4588-be34-2ea08ae19517" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4fe556c5-a01f-48de-b1e4-8afbec065b8e" name="dbms_lock$constant" subcategories-loading="none" object-loading="extended" context="dbms_lock$constant" is-trigger-function="0" unique-function-name="dbms_lock$constant" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="int4" function-arguments="p_const_name text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304405" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_const_name text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_lock$constant(p_const_name text)" comment="This function returns DBMS_LOCK constant value by its name.">
                        <complex-attribute name="sql"><![CDATA[
declare l_consts jsonb = json_build_object(
                                              -- DBMS_LOCK Constants - Lock mode
                                              'NL_MODE',1,
                                              'SS_MODE',2,
                                              'SX_MODE',3,
                                              'S_MODE',4,
                                              'SSX_MODE',5,
                                              'X_MODE',6,
                                              -- MAXWAIT
                                              'MAXWAIT',32767
                                          );
begin
	if l_consts ?  upper(p_const_name) then
		return (l_consts->>upper(p_const_name))::integer;
	else
		raise exception 'Unknown DBMS_LOCK constant: %', p_const_name;
	end if;
end ]]></complex-attribute>
                        <category _I_D="cea8841c-bf3a-4ecf-ac9e-e6f495f09f3c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="904e9905-90ea-413a-8af4-e5b9a506d8a6" name="dbms_lock$init" subcategories-loading="none" object-loading="extended" context="dbms_lock$init" is-trigger-function="0" unique-function-name="dbms_lock$init" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304404" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_lock$init()" comment="This function initializes DBMS_LOCK package.">
                        <complex-attribute name="sql"><![CDATA[
    -- A stub function.
    select null::void;
]]></complex-attribute>
                        <category _I_D="2ae40f60-4eec-4022-abf5-61a0509340a6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bf4ab842-c114-4378-8043-ecef9dc2c296" name="dbms_lock$release" subcategories-loading="none" object-loading="extended" context="dbms_lock$release(id bigint)" is-trigger-function="0" unique-function-name="dbms_lock$release(id bigint)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bigint" is-returning-set="f" ret-datatype="int8" function-arguments="id bigint" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304407" volatility="VOLATILE" is-window="f" function-identity-arguments="id bigint" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_lock$release(id bigint)" unique-suffix="(id bigint)" routine-number="304407" comment="This function explicitly releases a lock previously acquired using the `aws_oracle_ext.dbms_lock$request` function.">
                        <complex-attribute name="sql"><![CDATA[
declare
  l_unlock boolean := true;
  l_exit_code int;
BEGIN
    if aws_oracle_ext.get_package_variable('aws_oracle_ext', 'dbms_lock', concat('lockmode_',id))::INTEGER=6 /* lockmode: X_MODE = Exclusive */ then
      l_unlock := pg_advisory_unlock(id);
    else
      l_unlock := pg_advisory_unlock_shared(id);
    end if;

    l_exit_code := case when l_unlock then 0 -- Success
                        else 5 -- Illegal lock handle
                end;
    return l_exit_code;
END;
]]></complex-attribute>
                        <category _I_D="73d25791-adc2-491a-84bd-cff9198c2261" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1ba059b2-b758-4a10-9df3-4623c6d6b620" name="dbms_lock$release" subcategories-loading="none" object-loading="extended" context="dbms_lock$release(lockhandle character varying)" is-trigger-function="0" unique-function-name="dbms_lock$release(lockhandle character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="int8" function-arguments="lockhandle character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304408" volatility="VOLATILE" is-window="f" function-identity-arguments="lockhandle character varying" overload-function-count="2" proc-language="sql" function-signature="dbms_lock$release(lockhandle character varying)" unique-suffix="(lockhandle character varying)" routine-number="304408" comment="This function explicitly releases a lock previously acquired using the `aws_oracle_ext.dbms_lock$request` function.">
                        <complex-attribute name="sql"><![CDATA[
    select aws_oracle_ext.dbms_lock$release(id => aws_oracle_ext.get_id_by_name(lockhandle::text));
]]></complex-attribute>
                        <category _I_D="69dea595-cb57-4f45-b59f-ce2eea038ab0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0f73a909-a581-4b49-b623-db1972cfae68" name="dbms_lock$request" subcategories-loading="none" object-loading="extended" context="dbms_lock$request(id bigint, lockmode integer, timeout integer, release_on_commit boolean)" is-trigger-function="0" unique-function-name="dbms_lock$request(id bigint, lockmode integer, timeout integer, release_on_commit boolean)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bigint,integer,integer,boolean" is-returning-set="f" ret-datatype="int8" function-arguments="id bigint, lockmode integer DEFAULT 6, timeout integer DEFAULT 32767, release_on_commit boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304409" volatility="VOLATILE" is-window="f" function-identity-arguments="id bigint, lockmode integer, timeout integer, release_on_commit boolean" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_lock$request(id bigint, lockmode integer, timeout integer, release_on_commit boolean)" unique-suffix="(id bigint, lockmode integer, timeout integer, release_on_commit boolean)" routine-number="304409" comment="This function requests a lock with a given mode.">
                        <complex-attribute name="sql"><![CDATA[
declare
  l_getlock boolean := true;
  l_result  int;
BEGIN
    /* lockmode is implemented only for values
     *   6 - Exclusive
     *   not 6 - Shared
     *
     * timeout is implemented only for values
     *   0 - no wait
     *   not 0 - wait untill free
     */
    perform aws_oracle_ext.set_package_variable('aws_oracle_ext', 'dbms_lock', concat('lockmode_', id), lockmode);

    case when not release_on_commit and lockmode = 6 and timeout = 0 then l_getlock := pg_try_advisory_lock(id);
         when not release_on_commit and lockmode = 6 and timeout != 0 then perform pg_advisory_lock(id);
         when not release_on_commit and lockmode != 6 and timeout = 0 then l_getlock := pg_try_advisory_lock_shared(id);
         when not release_on_commit and lockmode != 6 and timeout != 0 then perform pg_advisory_lock_shared(id);
         when release_on_commit and lockmode = 6 and timeout = 0 then l_getlock := pg_try_advisory_xact_lock(id);
         when release_on_commit and lockmode = 6 and timeout != 0 then perform pg_advisory_xact_lock(id);
         when release_on_commit and lockmode != 6 and timeout = 0 then l_getlock := pg_try_advisory_xact_lock_shared(id);
         when release_on_commit and lockmode != 6 and timeout != 0 then perform pg_advisory_xact_lock_shared(id);
         else l_getlock := false;
    end case;

    l_result := case when l_getlock then 0 -- Success
                     else 1 -- Timeout
                end;
    return l_result;
END;
]]></complex-attribute>
                        <category _I_D="e3c93a4c-5781-40f8-a8f4-c891bf2417c3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e13f337d-24b2-44d8-90c3-148f9c16be1b" name="dbms_lock$request" subcategories-loading="none" object-loading="extended" context="dbms_lock$request(lockhandle character varying, lockmode integer, timeout integer, release_on_commit boolean)" is-trigger-function="0" unique-function-name="dbms_lock$request(lockhandle character varying, lockmode integer, timeout integer, release_on_commit boolean)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,integer,integer,boolean" is-returning-set="f" ret-datatype="int8" function-arguments="lockhandle character varying, lockmode integer DEFAULT 6, timeout integer DEFAULT 32767, release_on_commit boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304410" volatility="VOLATILE" is-window="f" function-identity-arguments="lockhandle character varying, lockmode integer, timeout integer, release_on_commit boolean" overload-function-count="2" proc-language="sql" function-signature="dbms_lock$request(lockhandle character varying, lockmode integer, timeout integer, release_on_commit boolean)" unique-suffix="(lockhandle character varying, lockmode integer, timeout integer, release_on_commit boolean)" routine-number="304410" comment="This function requests a lock with a given mode.">
                        <complex-attribute name="sql"><![CDATA[
    select aws_oracle_ext.dbms_lock$request(id => aws_oracle_ext.get_id_by_name(lockhandle::text),
                                            lockmode => lockmode,
                                            timeout => timeout,
                                            release_on_commit => release_on_commit
                                            );
]]></complex-attribute>
                        <category _I_D="8011635c-8f1c-45bc-bca9-2201357e08c0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fb4f0234-14a4-4d59-8118-e7d39c9f36f1" name="dbms_obfuscation_toolkit$desdecrypt" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$desdecrypt(input bytea, key bytea)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$desdecrypt(input bytea, key bytea)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bytea,bytea" is-returning-set="f" ret-datatype="bytea" function-arguments="input bytea, key bytea" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304412" volatility="VOLATILE" is-window="f" function-identity-arguments="input bytea, key bytea" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$desdecrypt(input bytea, key bytea)" unique-suffix="(input bytea, key bytea)" routine-number="304412" comment="Generate the decrypted form of the input data">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    return decrypt(input, key, 'des-cbc/pad:none');
  END;
]]></complex-attribute>
                        <category _I_D="91b5d6fc-3f36-4376-8ed0-532058c8ba25" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d4642cad-5b52-4f4c-bb88-ff63fd20fa7f" name="dbms_obfuscation_toolkit$desdecrypt" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$desdecrypt(input bytea, key bytea, INOUT decrypted_data bytea)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$desdecrypt(input bytea, key bytea, INOUT decrypted_data bytea)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bytea,bytea,bytea" is-returning-set="f" ret-datatype="bytea" function-arguments="input bytea, key bytea, INOUT decrypted_data bytea" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304411" volatility="VOLATILE" is-window="f" function-identity-arguments="input bytea, key bytea, INOUT decrypted_data bytea" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$desdecrypt(input bytea, key bytea, INOUT decrypted_data bytea)" unique-suffix="(input bytea, key bytea, INOUT decrypted_data bytea)" routine-number="304411" comment="Generate the decrypted form of the input data">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    decrypted_data := decrypt(input, key, 'des-cbc/pad:none');
  END;
]]></complex-attribute>
                        <category _I_D="c2d4e75e-292a-43f6-b5f2-478562f11639" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b864da31-0761-4a80-b995-a8ac77e44994" name="dbms_obfuscation_toolkit$desencrypt" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$desencrypt(input bytea, key bytea)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$desencrypt(input bytea, key bytea)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bytea,bytea" is-returning-set="f" ret-datatype="bytea" function-arguments="input bytea, key bytea" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304414" volatility="VOLATILE" is-window="f" function-identity-arguments="input bytea, key bytea" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$desencrypt(input bytea, key bytea)" unique-suffix="(input bytea, key bytea)" routine-number="304414" comment="Generate the encrypted form of the input data">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    return encrypt(input, key, 'des-cbc/pad:none');
  END;
]]></complex-attribute>
                        <category _I_D="98154512-961a-4c24-9865-0450852e7ce9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ca01f021-2f35-4c19-a64a-0c64f44e7a14" name="dbms_obfuscation_toolkit$desencrypt" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$desencrypt(input bytea, key bytea, INOUT encrypted_data bytea)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$desencrypt(input bytea, key bytea, INOUT encrypted_data bytea)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bytea,bytea,bytea" is-returning-set="f" ret-datatype="bytea" function-arguments="input bytea, key bytea, INOUT encrypted_data bytea" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304413" volatility="VOLATILE" is-window="f" function-identity-arguments="input bytea, key bytea, INOUT encrypted_data bytea" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$desencrypt(input bytea, key bytea, INOUT encrypted_data bytea)" unique-suffix="(input bytea, key bytea, INOUT encrypted_data bytea)" routine-number="304413" comment="Generate the encrypted form of the input data">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    encrypted_data := encrypt(input, key, 'des-cbc/pad:none');
  END;
]]></complex-attribute>
                        <category _I_D="2ed66293-2ccb-4593-9d69-6e322f2fdcc3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e821dd7b-0e5b-4496-a881-3bec74589fdf" name="dbms_obfuscation_toolkit$desgetkey" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$desgetkey(seed text)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$desgetkey(seed text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="seed text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304415" volatility="VOLATILE" is-window="f" function-identity-arguments="seed text" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$desgetkey(seed text)" unique-suffix="(seed text)" routine-number="304415" comment="Take a value from seed and use it to generate an encryption key">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    return crypt(seed, gen_salt('des'));
  END;
]]></complex-attribute>
                        <category _I_D="7825e509-7a63-45fe-953d-19ebd141b0a3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="974308f2-af49-40e8-8f77-a8c0aa5c1fcd" name="dbms_obfuscation_toolkit$desgetkey" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$desgetkey(seed text, INOUT key text)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$desgetkey(seed text, INOUT key text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="seed text, INOUT key text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304416" volatility="VOLATILE" is-window="f" function-identity-arguments="seed text, INOUT key text" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$desgetkey(seed text, INOUT key text)" unique-suffix="(seed text, INOUT key text)" routine-number="304416" comment="Take a value from seed and use it to generate an encryption key">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    key := crypt(seed, gen_salt('des'));
  END;
]]></complex-attribute>
                        <category _I_D="d3efac0c-bb66-4d5a-a767-2042a44b30ef" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a2c88922-982c-49a2-b590-607c0f1af7d4" name="dbms_obfuscation_toolkit$md5" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$md5(input bytea)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$md5(input bytea)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bytea" is-returning-set="f" ret-datatype="bytea" function-arguments="input bytea" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304418" volatility="VOLATILE" is-window="f" function-identity-arguments="input bytea" overload-function-count="4" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$md5(input bytea)" unique-suffix="(input bytea)" routine-number="304418" comment="Generate MD5 hashes of data">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    return md5(input);
  END;
]]></complex-attribute>
                        <category _I_D="ab0a09d4-26a8-4f76-b661-4a3bf93b8842" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b226181a-494b-456d-867e-b763fb4e1e02" name="dbms_obfuscation_toolkit$md5" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$md5(input bytea, INOUT checksum bytea)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$md5(input bytea, INOUT checksum bytea)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bytea,bytea" is-returning-set="f" ret-datatype="bytea" function-arguments="input bytea, INOUT checksum bytea" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304417" volatility="VOLATILE" is-window="f" function-identity-arguments="input bytea, INOUT checksum bytea" overload-function-count="4" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$md5(input bytea, INOUT checksum bytea)" unique-suffix="(input bytea, INOUT checksum bytea)" routine-number="304417" comment="Generate MD5 hashes of data">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    checksum := md5(input);
  END;
]]></complex-attribute>
                        <category _I_D="51221e40-081b-4cdd-9c50-4b7bf817a370" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="18f97668-5500-4c76-8de5-2fd068c08f6e" name="dbms_obfuscation_toolkit$md5" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$md5(input_string text)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$md5(input_string text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="input_string text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304419" volatility="VOLATILE" is-window="f" function-identity-arguments="input_string text" overload-function-count="4" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$md5(input_string text)" unique-suffix="(input_string text)" routine-number="304419" comment="Generate MD5 hashes of data">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    return md5(input_string);
  END;
]]></complex-attribute>
                        <category _I_D="21edb9e3-8d4f-4d3f-9331-40fe4433109f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e69e52b1-98fe-4252-a54b-079112f8516a" name="dbms_obfuscation_toolkit$md5" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$md5(input_string text, INOUT checksum_string text)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$md5(input_string text, INOUT checksum_string text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="input_string text, INOUT checksum_string text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304420" volatility="VOLATILE" is-window="f" function-identity-arguments="input_string text, INOUT checksum_string text" overload-function-count="4" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$md5(input_string text, INOUT checksum_string text)" unique-suffix="(input_string text, INOUT checksum_string text)" routine-number="304420" comment="Generate MD5 hashes of data">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    checksum_string := md5(input_string);
  END;
]]></complex-attribute>
                        <category _I_D="9bbd6fd3-6ac0-46e8-849d-ad5c2fb8182f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8d71c5b4-7206-4974-9536-ce702cdb908b" name="dbms_random$initialize" subcategories-loading="none" object-loading="extended" context="dbms_random$initialize" is-trigger-function="0" unique-function-name="dbms_random$initialize" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="void" function-arguments="p_seed numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304421" volatility="VOLATILE" is-window="f" function-identity-arguments="p_seed numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_random$initialize(p_seed numeric)" comment="This function initializes the random number generator with a seed value.">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    PERFORM aws_oracle_ext.dbms_random$seed(p_seed);
END;
]]></complex-attribute>
                        <category _I_D="4506143c-38ef-4f05-9758-794061c5b448" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9f1ee9bb-70b9-4e5c-8fb6-339737e3cc0f" name="dbms_random$normal" subcategories-loading="none" object-loading="extended" context="dbms_random$normal" is-trigger-function="0" unique-function-name="dbms_random$normal" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="float8" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304422" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_random$normal()" comment="This function returns random numbers in a standard normal distribution.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_u DOUBLE PRECISION;
    v_v DOUBLE PRECISION;
    v_s DOUBLE PRECISION;
BEGIN
    LOOP
        -- Range -1.0 <= u | v < 1.0
        v_u = random() * 2 - 1;
        v_v = random() * 2 - 1;
        v_s = power(v_u, 2) + power(v_v, 2);

        CONTINUE WHEN NOT (v_s != 0 AND v_s < 1);
        RETURN sqrt(-2 * ln(v_s) / v_s) * v_u;
    END LOOP;
END;
]]></complex-attribute>
                        <category _I_D="3e0bd18e-91ae-4a94-aa4f-a3d22bcef1cb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4b3285ac-d748-47cc-9c65-8caa9b909385" name="dbms_random$random" subcategories-loading="none" object-loading="extended" context="dbms_random$random" is-trigger-function="0" unique-function-name="dbms_random$random" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304423" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_random$random()" comment="This function generates and returns a random number. A random value greater than or equal to -power(2,31) and less than power(2,31).">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    RETURN round((random() * 4294967296 - 2147483648)::NUMERIC, 0);
END;
]]></complex-attribute>
                        <category _I_D="b413fd82-0259-47e0-8b4a-2210f387c8f5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5b686cb4-1996-4196-8523-a6414ebaa29c" name="dbms_random$seed" subcategories-loading="none" object-loading="extended" context="dbms_random$seed(p_seed numeric)" is-trigger-function="0" unique-function-name="dbms_random$seed(p_seed numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="void" function-arguments="p_seed numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304424" volatility="VOLATILE" is-window="f" function-identity-arguments="p_seed numeric" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_random$seed(p_seed numeric)" unique-suffix="(p_seed numeric)" routine-number="304424" comment="This procedure resets the seed used in generating a random number.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_seedsign INTEGER := sign(p_seed);
    v_seedstr VARCHAR := rpad(to_char(abs(p_seed), 'FM9999999999'), 15, '0');
BEGIN
    PERFORM setseed(to_number(concat('0.', v_seedstr), '9.FM999999999999999999') * v_seedsign);
END;
]]></complex-attribute>
                        <category _I_D="a4e4f890-f659-4e29-b81d-110f82c089eb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e0b69db0-d23e-4cad-95f0-06f4be28cd3c" name="dbms_random$seed" subcategories-loading="none" object-loading="extended" context="dbms_random$seed(p_seed text)" is-trigger-function="0" unique-function-name="dbms_random$seed(p_seed text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="p_seed text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304425" volatility="VOLATILE" is-window="f" function-identity-arguments="p_seed text" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_random$seed(p_seed text)" unique-suffix="(p_seed text)" routine-number="304425" comment="This procedure resets the seed used in generating a random number.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_seedstr TEXT := substring(translate(upper(md5(p_seed)), 'ABCDEF', '123456'), 1, 15);
BEGIN
    PERFORM setseed(to_number(concat('0.', v_seedstr), '9.FM999999999999999999'));
END;
]]></complex-attribute>
                        <category _I_D="4536a6d5-ba0c-4dae-81c6-36f9ab62edff" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f89de383-86a3-41a3-8f7c-553e3aa3b915" name="dbms_random$string" subcategories-loading="none" object-loading="extended" context="dbms_random$string" is-trigger-function="0" unique-function-name="dbms_random$string" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric" is-returning-set="f" ret-datatype="text" function-arguments="p_opt text, p_len numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304426" volatility="VOLATILE" is-window="f" function-identity-arguments="p_opt text, p_len numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_random$string(p_opt text, p_len numeric)" comment="This function generates and returns a random string.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_srcdata VARCHAR;
BEGIN
    v_srcdata := 
        CASE upper(p_opt)
           WHEN 'L' THEN 'abcdefghijklmnopqrstuvwxyz'
           WHEN 'A' THEN 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
           WHEN 'X' THEN '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
           WHEN 'P' THEN '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:;,{}()[].*/\|?!@$&#-=_+<>"''`#%^~ '
           ELSE 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        END;

    RETURN array_to_string(
        ARRAY(SELECT substring(v_srcdata from (ceil(random() * length(v_srcdata)))::INTEGER for 1)
                FROM generate_series(1, p_len::INTEGER)),
        '');
END;
]]></complex-attribute>
                        <category _I_D="d03f5516-b630-40a2-afca-5c67c4dc0a8c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7dde0904-c634-4b74-b572-2d080924229e" name="dbms_random$terminate" subcategories-loading="none" object-loading="extended" context="dbms_random$terminate" is-trigger-function="0" unique-function-name="dbms_random$terminate" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304427" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_random$terminate()" comment="This function terminates the package. It should be invoked when the user is finished with the package.">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    PERFORM setseed(random());
END;
]]></complex-attribute>
                        <category _I_D="127aa746-b7eb-4846-baf3-f04df64618eb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a1b3170b-3f9a-411e-9fb3-318ec7360e2c" name="dbms_random$value" subcategories-loading="none" object-loading="extended" context="dbms_random$value" is-trigger-function="0" unique-function-name="dbms_random$value" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,double precision" is-returning-set="f" ret-datatype="float8" function-arguments="p_start double precision DEFAULT 0, p_high double precision DEFAULT 1" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304428" volatility="VOLATILE" is-window="f" function-identity-arguments="p_start double precision, p_high double precision" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_random$value(p_start double precision, p_high double precision)" comment="The function generates a random number &quot;x&quot;, where &quot;x&quot; is greater than or equal to a specified lower limit and less than a specified higher limit.">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    RETURN random() * (p_high - p_start) + p_start;
END;
]]></complex-attribute>
                        <category _I_D="80781c18-a44e-402d-b3e1-dce0df71d60d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8f01d945-1ad4-4f1a-aeff-8a9c6fe92b24" name="dbms_session$clear_all_context" subcategories-loading="none" object-loading="extended" context="dbms_session$clear_all_context" is-trigger-function="0" unique-function-name="dbms_session$clear_all_context" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="void" function-arguments="namespace character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304435" volatility="VOLATILE" is-window="f" function-identity-arguments="namespace character varying" overload-function-count="1" proc-language="sql" function-signature="dbms_session$clear_all_context(namespace character varying)">
                        <complex-attribute name="sql"><![CDATA[
  select aws_oracle_ext.dbms_session$clear_context($1);
]]></complex-attribute>
                        <category _I_D="16fbc3e8-68f5-47bb-a8f6-cc809e239b99" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="43127648-b0b6-4218-ab47-096b8a626136" name="dbms_session$clear_context" subcategories-loading="none" object-loading="extended" context="dbms_session$clear_context" is-trigger-function="0" unique-function-name="dbms_session$clear_context" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="namespace character varying, client_id character varying DEFAULT NULL::character varying, attribute character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304434" volatility="VOLATILE" is-window="f" function-identity-arguments="namespace character varying, client_id character varying, attribute character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_session$clear_context(namespace character varying, client_id character varying, attribute character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare
  l_namespace text;
  l_attribute text;
begin	
   l_namespace := aws_oracle_ext.format_identifier_case(namespace);
   l_attribute := aws_oracle_ext.format_identifier_case(attribute);
  
   if l_namespace is null then 
   		raise exception 'input value for argument namespace is not valid';    
   end if;
  
  if l_namespace = 'CLIENTCONTEXT' then
    raise exception 'CLIENTCONTEXT namespace will be cleared automatically in the end of the session. Can not be cleared manually';    
  end if;
  
  case aws_oracle_ext.get_context_type(l_namespace) 
    when 'ACCESSED GLOBALLY' then 
    	delete from aws_oracle_context.context_global cg
    	where cg.context_namespace = l_namespace
    	and coalesce(cg.cliend_id, '') = coalesce($2, '')
    	and cg.attribute_name = coalesce(l_attribute, cg.attribute_name);         		        	
    when 'ACCESSED LOCALLY' then 
    	delete from context_local where context_namespace = l_namespace and coalesce(attribute_name, '') = coalesce(l_attribute, '');
    else raise exception 'Unsupported context type';   
  end case;
 
end;
]]></complex-attribute>
                        <category _I_D="db7ba76c-db77-4079-981d-18b861b39fbd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4ea166d5-4781-4cbc-838f-6f70b10c0713" name="dbms_session$clear_identifier" subcategories-loading="none" object-loading="extended" context="dbms_session$clear_identifier" is-trigger-function="0" unique-function-name="dbms_session$clear_identifier" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304430" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_session$clear_identifier()">
                        <complex-attribute name="sql"><![CDATA[
begin
  perform aws_oracle_ext.set_extpack_variable
    (
	  variable_name => 'CLIENT_IDENTIFIER', 
	  variable_value => null::text
	);
END;
]]></complex-attribute>
                        <category _I_D="e6f08e8c-62ff-4778-89b1-a95947a5e5ca" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9c108e4a-c425-4416-a73b-fc54429d1d0f" name="dbms_session$free_all_resources" subcategories-loading="none" object-loading="extended" context="dbms_session$free_all_resources" is-trigger-function="0" unique-function-name="dbms_session$free_all_resources" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305351" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_session$free_all_resources()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT 1::INTEGER;

]]></complex-attribute>
                        <category _I_D="7e95b1db-a803-4d7a-ae65-9c8c368e60b8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6daa8515-622d-44f2-a07a-2f751f225128" name="dbms_session$is_role_enabled" subcategories-loading="none" object-loading="extended" context="dbms_session$is_role_enabled" is-trigger-function="0" unique-function-name="dbms_session$is_role_enabled" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="bool" function-arguments="rolename character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304431" volatility="VOLATILE" is-window="f" function-identity-arguments="rolename character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_session$is_role_enabled(rolename character varying)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  return exists (select 1 from information_schema.enabled_roles where role_name = rolename);
END;
]]></complex-attribute>
                        <category _I_D="703bff73-c97b-4b54-b635-549dfa45e47a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="87bd00d9-14b0-46db-8ab8-311384747662" name="dbms_session$is_session_alive" subcategories-loading="none" object-loading="extended" context="dbms_session$is_session_alive" is-trigger-function="0" unique-function-name="dbms_session$is_session_alive" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="bool" function-arguments="uniqueid integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304432" volatility="VOLATILE" is-window="f" function-identity-arguments="uniqueid integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_session$is_session_alive(uniqueid integer)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  return ((select state from pg_stat_activity where pid = uniqueid) = 'active'::text);
END;
]]></complex-attribute>
                        <category _I_D="f10d3007-a3b1-458f-87fb-45928b05cd2c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4cc57d86-a292-4eb1-8587-f26586711fa6" name="dbms_session$modify_package_state" subcategories-loading="none" object-loading="extended" context="dbms_session$modify_package_state" is-trigger-function="0" unique-function-name="dbms_session$modify_package_state" is-aggregate="f" language-name="plv8" arguments-datatypes="integer" is-returning-set="f" ret-datatype="void" function-arguments="action_flags integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304105" volatility="VOLATILE" is-window="f" function-identity-arguments="action_flags integer" overload-function-count="1" proc-language="plv8" function-signature="dbms_session$modify_package_state(action_flags integer)">
                        <complex-attribute name="sql"><![CDATA[
'use strict';
  if (typeof(require) !== 'function') {
    const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
    initColl();
  }
  const cursors = plv8.execute(`
SELECT pc.name FROM pg_catalog.pg_cursors pc where name like '%$%$%'
`);
  for (let i = 0; i < cursors.length; i++) {
    try{
      plv8.subtransaction(function(){
        plv8.execute(`CLOSE ${cursors[i].name}`);
      });
    } catch(e) {
    }
  }
  for (let key of Object.keys(aws_oracle_ext)) {
    if (key === 'aws_oracle_ext') continue;
    delete aws_oracle_ext[key];
  }

]]></complex-attribute>
                        <category _I_D="c2e0993a-dfed-45e1-89a6-7ab0e5d9af65" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="570fa5b5-adeb-4f61-b01c-34c3bb4d7eb1" name="dbms_session$reinitialize" subcategories-loading="none" object-loading="extended" context="dbms_session$reinitialize" is-trigger-function="0" unique-function-name="dbms_session$reinitialize" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305352" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_session$reinitialize()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT 2::INTEGER;

]]></complex-attribute>
                        <category _I_D="66d12664-b9b4-4aec-8b4c-fda30974e140" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b7dd589e-abc9-4f81-af1b-820523ec2937" name="dbms_session$reset_package" subcategories-loading="none" object-loading="extended" context="dbms_session$reset_package" is-trigger-function="0" unique-function-name="dbms_session$reset_package" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304106" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_session$reset_package()">
                        <complex-attribute name="sql"><![CDATA[
SELECT aws_oracle_ext.dbms_session$modify_package_state(1::INTEGER);
]]></complex-attribute>
                        <category _I_D="e6a37a8c-d9aa-4b4d-ba6a-df780a56ab1f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6991e9d7-d15e-426a-b055-b12492b161bb" name="dbms_session$set_context" subcategories-loading="none" object-loading="extended" context="dbms_session$set_context" is-trigger-function="0" unique-function-name="dbms_session$set_context" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="namespace character varying, attribute character varying, value character varying, username character varying DEFAULT NULL::character varying, client_id character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="305108" volatility="VOLATILE" is-window="f" function-identity-arguments="namespace character varying, attribute character varying, value character varying, username character varying, client_id character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_session$set_context(namespace character varying, attribute character varying, value character varying, username character varying, client_id character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  l_key text;
  l_context_type text; 
  l_crypted text;
  l_interval text;
  l_namespace text;
  l_attribute text;
BEGIN
  if namespace is null or attribute is null then 
    raise exception 'invalid input values';  
  end if; 
  
  
  l_namespace := aws_oracle_ext.format_identifier_case(namespace);
  l_attribute := aws_oracle_ext.format_identifier_case(attribute);
  
  if l_namespace = 'CLIENTCONTEXT' then 
    perform  aws_oracle_ext.set_extpack_variable
                                (
                                 variable_name => l_namespace||'_'||l_attribute, 
                                 variable_value => value
                                );
  else 
   	perform aws_oracle_ext.init_context_struct();  
    l_key := aws_oracle_ext.get_context_param('key');  
    l_context_type := aws_oracle_ext.get_context_type(l_namespace);   
    l_crypted := crypt(value || ':' || l_key, gen_salt('bf'));   
 	
   	
   	case upper(l_context_type) 
	  	when 'ACCESSED LOCALLY' then 
	  		begin
				insert into context_local(
				  context_namespace, 
				  attribute_name, 
				  attribute_value, 
				  user_name, 
				  cliend_id, 
				  signature
				)
				values (
				  l_namespace, 
				  l_attribute, 
				  $3, 
				  $4, 
				  coalesce($5, aws_oracle_ext.sys_context_userenv('CLIENT_IDENTIFIER')), 
				  l_crypted
				) 
				on conflict (context_namespace, attribute_name) do 
				update set 
					attribute_value = excluded.attribute_value,
					signature = excluded.signature;
		  	end;
	  	when 'ACCESSED GLOBALLY' then	  
	  		begin
					
				delete from aws_oracle_context.context_global 
			    where backend_start <= now()::timestamp - (coalesce(aws_oracle_ext.get_context_param('auto_clean_interval'), '1 day'))::interval;

				insert into aws_oracle_context.context_global(
				  context_namespace, 
				  attribute_name, 
				  attribute_value, 
				  user_name, 
				  cliend_id, 
				  signature
				)
				values (
				  l_namespace, 
				  l_attribute, 
				  $3, 
				  $4, 
				  coalesce($5, aws_oracle_ext.sys_context_userenv('CLIENT_IDENTIFIER')), 
				  l_crypted
				) 
				on conflict (context_namespace, attribute_name, cliend_id) do 
				update set 
					attribute_value = excluded.attribute_value,
					signature = excluded.signature;
		  	end;  
	  	else 
			-- INITIALIZED EXTERNALLY, INITIALIZED GLOBALLY  	
	  		raise exception 'unsupported context type: %', l_context_type;
	  end case;    
  end if;
 
  exception 
    when no_data_found then raise exception 'Context % is not found', l_namespace;  
END;
]]></complex-attribute>
                        <category _I_D="58840123-feaf-458f-b80e-0c052a4863bf" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3c0a0fba-4f97-46e1-bc0a-5195485b4322" name="dbms_session$set_identifier" subcategories-loading="none" object-loading="extended" context="dbms_session$set_identifier" is-trigger-function="0" unique-function-name="dbms_session$set_identifier" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="void" function-arguments="client_id character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304429" volatility="VOLATILE" is-window="f" function-identity-arguments="client_id character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_session$set_identifier(client_id character varying)">
                        <complex-attribute name="sql"><![CDATA[
begin
  perform  aws_oracle_ext.set_extpack_variable
   (
      variable_name => 'CLIENT_IDENTIFIER', 
      variable_value => client_id
   ); 
END;
]]></complex-attribute>
                        <category _I_D="4f98b882-5c17-42bf-9f43-46cb60217d74" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bdba53eb-eb1f-4e61-a7a2-36c309aa3232" name="dbms_session$set_nls" subcategories-loading="none" object-loading="extended" context="dbms_session$set_nls" is-trigger-function="0" unique-function-name="dbms_session$set_nls" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="param character varying, val character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304433" volatility="VOLATILE" is-window="f" function-identity-arguments="param character varying, val character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_session$set_nls(param character varying, val character varying)">
                        <complex-attribute name="sql"><![CDATA[
begin
  perform  aws_oracle_ext.set_extpack_variable
   (
      variable_name => upper(param), 
      variable_value => val
   ); 
	
	
  if upper(param) = 'NLS_LANGUAGE' then
   
    perform  aws_oracle_ext.set_extpack_variable
     (
        variable_name => 'NLS_DATE_LANGUAGE', 
        variable_value => val
     );    

    
    perform  aws_oracle_ext.set_extpack_variable
     (
        variable_name => 'NLS_SORT', 
        variable_value => val
     );    
    
  end if;
END;
]]></complex-attribute>
                        <category _I_D="043241ee-6730-4cfe-8766-77381fa8c264" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ecd132ca-84fe-43a2-b02e-233c0a07d897" name="dbms_sql$bind_variable" subcategories-loading="none" object-loading="extended" context="dbms_sql$bind_variable" is-trigger-function="0" unique-function-name="dbms_sql$bind_variable" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,text,anyelement,integer,boolean" is-returning-set="f" ret-datatype="void" function-arguments="p_cursor_id integer, p_var_name text, p_var_value anyelement, p_value_size integer DEFAULT NULL::integer, p_check_var_exists boolean DEFAULT true" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304443" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer, p_var_name text, p_var_value anyelement, p_value_size integer, p_check_var_exists boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$bind_variable(p_cursor_id integer, p_var_name text, p_var_value anyelement, p_value_size integer, p_check_var_exists boolean)" comment="This function binds a given value to a given variable in a cursor, based on the name or list of placeholders, of the variable in the statement.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_var_pos INTEGER;
    v_var_info TEXT[];
    v_chr_val TEXT;
    v_num_val NUMERIC;
    v_dprec_val DOUBLE PRECISION;
    v_money_val MONEY;
    v_tstamp_val TIMESTAMP WITHOUT TIME ZONE;
    v_tstamptz_val TIMESTAMP WITH TIME ZONE;
    v_timetz_val TIME WITH TIME ZONE;
    v_interval_val INTERVAL;
    v_bool_val BOOLEAN;
    v_xml_val XML;
    v_bin_val BYTEA;
    v_var_size INTEGER;
    v_value_size INTEGER;
    v_is_fixed SMALLINT;
    v_sql_statement TEXT;
    v_cur_metadata JSONB;
    v_out_var_base_t TEXT;
    v_out_var_data_t TEXT;
    v_current_user_oid BIGINT;
BEGIN
    -- Checking that cursor is opened (exit if it is not)
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id))
    THEN
        RAISE invalid_cursor_state;
    -- Variable name should not be empty or blank (null)
    ELSIF (NOT p_check_var_exists AND
           nullif(trim(p_var_name), '') IS NULL)
    THEN
        RAISE null_value_not_allowed;
    END IF;

    -- Obtaining current user OID
    v_current_user_oid := aws_oracle_ext.get_user_oid_by_name(current_user);

    -- Getting cursor metadata (JSON) object
    v_cur_metadata := nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id), TRUE), '');

    /* Checking that effective user OID (current_user) of the caller on this cursor is the same
       as that of the caller of the most recent parse operation on this cursor.
       Actual for cursors opened with security level 1 or 2 */
    IF ((v_cur_metadata ->> 'security_level')::SMALLINT IN (1, 2) AND
        (v_cur_metadata ->> 'parse_user_oid')::BIGINT != v_current_user_oid)
    THEN
        RAISE invalid_role_specification;
    END IF;

    BEGIN
        -- Getting SQL-PL/pgSQL statement by cursor id
        SELECT sql_statement
          INTO v_sql_statement
          FROM dbms_sql$cursor
         WHERE cursor_id = p_cursor_id;
    EXCEPTION
        WHEN insufficient_privilege THEN
            -- Effective userid changed
            RAISE invalid_cursor_state;
    END;

    -- Checking whether statement parsed
    IF (v_sql_statement IS NULL) THEN
        RAISE sql_statement_not_yet_complete;
    END IF;

    -- Extracting variable info (label in statement code and general name) from supplied string
    v_var_info := regexp_matches(p_var_name, '^((?:\s*\$\d+\s*(?:[\|,;\-_])?)+)*\s*[\:|\|]?([[:alnum:]_]+)\s*$', 'gi');
    v_var_info[1] := regexp_replace(regexp_replace(v_var_info[1], '\s*[\|,;\-_]\s*', '|', 'g'), '^\s*|\s*[\|,;\-_]$', '', 'gi');

    /* Checking that variable, either by name or any of its markers,
       exists in the corresponding SQL statement */
    IF ((v_var_info[2] IS NULL OR
         v_sql_statement !~* coalesce(v_var_info[2], '')) AND
        coalesce(p_check_var_exists, TRUE)) -- variable name
    THEN
        IF (v_var_info[1] IS NULL OR
            v_sql_statement !~* replace(concat('(', v_var_info[1], ')(?!\d)'), '$', '\$')) -- markers list
        THEN
            RAISE null_value_not_allowed;
        END IF;
    END IF;

    v_out_var_data_t := upper(pg_typeof(p_var_value)::TEXT);

    -- Determining base data type of passed variable
    v_out_var_base_t := aws_oracle_ext.get_base_type_by_dtype(v_out_var_data_t);

    CASE v_out_var_base_t
       WHEN 'TEXT' THEN
           v_chr_val := p_var_value::TEXT;
           v_var_size := coalesce(length(p_var_value::BYTEA, pg_client_encoding()), 0);
           v_value_size := coalesce(p_value_size, v_var_size);
       WHEN 'NUMERIC' THEN
           v_num_val := p_var_value::NUMERIC;
       WHEN 'DOUBLE PRECISION' THEN
           v_dprec_val := p_var_value::DOUBLE PRECISION;
       WHEN 'MONEY' THEN
           v_money_val := p_var_value;
       WHEN 'TIMESTAMP WITHOUT TIME ZONE' THEN
           IF (v_out_var_data_t = 'TIME WITHOUT TIME ZONE') THEN
               v_tstamp_val := to_char(p_var_value, '2001-01-01 hh24:mi:ss.us')::TIMESTAMP;
           ELSE
               v_tstamp_val := p_var_value;
           END IF;
       WHEN 'TIMESTAMP WITH TIME ZONE' THEN
           v_tstamptz_val := p_var_value;
       WHEN 'TIME WITH TIME ZONE' THEN
           v_timetz_val := p_var_value;
       WHEN 'INTERVAL' THEN
           v_interval_val := p_var_value;
       WHEN 'BOOLEAN' THEN
           v_bool_val := p_var_value;
       WHEN 'XML' THEN
           v_xml_val := p_var_value;
       WHEN 'BYTEA' THEN
           v_bin_val := p_var_value;
           v_var_size := coalesce(octet_length(p_var_value), 0);
           v_value_size := p_value_size;
       ELSE RETURN;
    END CASE;

    -- Determining next variable position
    SELECT coalesce(MAX(var_pos), 0) + 1
      INTO v_var_pos
      FROM dbms_sql$bind_variable
     WHERE cursor_id = p_cursor_id;

    -- Binding variable to cursor (identified by cursor_id)
    INSERT INTO dbms_sql$bind_variable (cursor_id,
                                        var_pos,
                                        var_name,
                                        var_label,
                                        data_type,
                                        base_type,
                                        var_size,
                                        value_size,
                                        is_fixed,
                                        chr_val,
                                        num_val,
                                        dprec_val,
                                        money_val,
                                        tstamp_val,
                                        tstamptz_val,
                                        timetz_val,
                                        interval_val,
                                        bool_val,
                                        xml_val,
                                        bin_val)
         VALUES (p_cursor_id,
                 v_var_pos,
                 v_var_info[2], -- Variable name
                 v_var_info[1], -- Variable label list
                 v_out_var_data_t,
                 v_out_var_base_t,
                 v_var_size,
                 v_value_size,
                 v_is_fixed,
                 v_chr_val,
                 v_num_val,
                 v_dprec_val,
                 v_money_val,
                 v_tstamp_val,
                 v_tstamptz_val,
                 v_timetz_val,
                 v_interval_val,
                 v_bool_val,
                 v_xml_val,
                 v_bin_val)
    ON CONFLICT (cursor_id, var_name)
    DO UPDATE SET var_label = v_var_info[1],
                  data_type = v_out_var_data_t,
                  base_type = v_out_var_base_t,
                  var_size = v_var_size,
                  value_size = v_value_size,
                  is_fixed = v_is_fixed,
                  chr_val = v_chr_val,
                  num_val = v_num_val,
                  dprec_val = v_dprec_val,
                  money_val = v_money_val,
                  tstamp_val = v_tstamp_val,
                  tstamptz_val = v_tstamptz_val,
                  timetz_val = v_timetz_val,
                  interval_val = v_interval_val,
                  bool_val = v_bool_val,
                  xml_val = v_xml_val,
                  bin_val = v_bin_val;
EXCEPTION
    -- Cursor is not opened or does not exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := 'DBMS_SQL access denied.',
                    DETAIL := 'DBMS_SQL access was denied due to security concerns.',
                    HINT := '-29471';

    -- Bind variable does not exist
    WHEN null_value_not_allowed THEN
        RAISE USING MESSAGE := 'Bind variable does not exist.',
                    DETAIL := 'Call for a bind variable that was not listed in the corresponding SQL statement.',
                    HINT := '-1006';

    -- No statement previously parsed
    WHEN sql_statement_not_yet_complete THEN
        RAISE USING MESSAGE := 'No statement parsed.',
                    DETAIL := 'Attempting to reference a cursor with the SQL statement associated not parsed.',
                    HINT := '-1003';

    -- Effective userid (OID) changed since cursor parse
    WHEN invalid_role_specification THEN
        RAISE USING MESSAGE := 'Effective userid is not the same as when cursor was parsed.',
                    DETAIL := 'The effective userid on this call to DBMS_SQL is not the same as that at the time the cursor was parsed.',
                    HINT := '-29470';
END;
]]></complex-attribute>
                        <category _I_D="b5209b9e-dded-4112-8adc-4e15b0e06c8c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a489bec2-bbde-4b82-b0f8-ae54d74b431f" name="dbms_sql$bind_variable_char" subcategories-loading="none" object-loading="extended" context="dbms_sql$bind_variable_char" is-trigger-function="0" unique-function-name="dbms_sql$bind_variable_char" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,text,anyelement,integer,boolean" is-returning-set="f" ret-datatype="void" function-arguments="p_cursor_id integer, p_var_name text, p_var_value anyelement, p_value_size integer DEFAULT NULL::integer, p_check_var_exists boolean DEFAULT true" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304441" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer, p_var_name text, p_var_value anyelement, p_value_size integer, p_check_var_exists boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$bind_variable_char(p_cursor_id integer, p_var_name text, p_var_value anyelement, p_value_size integer, p_check_var_exists boolean)" comment="This function binds a given CHAR value to a given variable in a cursor, based on the name or list of placeholders, of the variable in the statement.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_var_pos INTEGER;
    v_var_info TEXT[];
    v_chr_val TEXT;
    v_var_size INTEGER;
    v_value_size INTEGER;
    v_datetime_mask TEXT;
    v_out_var_data_t TEXT;
    v_sql_statement TEXT;
    v_cur_metadata JSONB;
    v_is_fixed SMALLINT := 1;
    v_current_user_oid BIGINT;
    v_bind_var_base_t TEXT := 'TEXT';
    v_bind_var_data_t TEXT := 'CHARACTER VARYING';
BEGIN
    -- Checking that cursor is opened (exit if it is not)
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id))
    THEN
        RAISE invalid_cursor_state;
    -- Variable name should not be empty or blank (null)
    ELSIF (NOT p_check_var_exists AND
           nullif(trim(p_var_name), '') IS NULL)
    THEN
        RAISE null_value_not_allowed;
    END IF;

    -- Obtaining current user OID
    v_current_user_oid := aws_oracle_ext.get_user_oid_by_name(current_user);

    -- Getting cursor metadata (JSON) object
    v_cur_metadata := nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id), TRUE), '');

    /* Checking that effective user OID (current_user) of the caller on this cursor is the same
       as that of the caller of the most recent parse operation on this cursor.
       Actual for cursors opened with security level 1 or 2 */
    IF ((v_cur_metadata ->> 'security_level')::SMALLINT IN (1, 2) AND
        (v_cur_metadata ->> 'parse_user_oid')::BIGINT != v_current_user_oid)
    THEN
        RAISE invalid_role_specification;
    END IF;

    BEGIN
        -- Getting SQL-PL/pgSQL statement by cursor id
        SELECT sql_statement
          INTO v_sql_statement
          FROM dbms_sql$cursor
         WHERE cursor_id = p_cursor_id;
    EXCEPTION
        WHEN insufficient_privilege THEN
            -- Effective userid changed
            RAISE invalid_cursor_state;
    END;

    -- Checking whether statement parsed
    IF (v_sql_statement IS NULL) THEN
        RAISE sql_statement_not_yet_complete;
    END IF;

    -- Extracting variable info (label in statement code and general name) from supplied string
    v_var_info := regexp_matches(p_var_name, '^((?:\s*\$\d+\s*(?:[\|,;\-_])?)+)*\s*[\:|\|]?([[:alnum:]_]+)\s*$', 'gi');
    v_var_info[1] := regexp_replace(regexp_replace(v_var_info[1], '\s*[\|,;\-_]\s*', '|', 'g'), '^\s*|\s*[\|,;\-_]$', '', 'gi');

    /* Checking that variable, either by name or any of its markers,
       exists in the corresponding SQL statement */
    IF ((v_var_info[2] IS NULL OR
         v_sql_statement !~* coalesce(v_var_info[2], '')) AND
        coalesce(p_check_var_exists, TRUE)) -- variable name
    THEN
        IF (v_var_info[1] IS NULL OR
            v_sql_statement !~* replace(concat('(', v_var_info[1], ')(?!\d)'), '$', '\$')) -- markers list
        THEN
            RAISE null_value_not_allowed;
        END IF;
    END IF;

    v_out_var_data_t := upper(pg_typeof(p_var_value)::TEXT);

    -- Casting input value to a character string
    IF (v_out_var_data_t IN ('TEXT',
                             'CHARACTER',
                             'CHARACTER VARYING'))
    THEN
        v_bind_var_data_t := v_out_var_data_t;
        v_chr_val := p_var_value::TEXT;
        v_var_size := coalesce(length(p_var_value::BYTEA, pg_client_encoding()), 0);
    ELSIF (v_out_var_data_t IN ('XML',
                                'MONEY',
                                'REAL',
                                'BIGINT',
                                'INTEGER',
                                'NUMERIC',
                                'SMALLINT',
                                'INTERVAL',
                                'DOUBLE PRECISION',
                                'TIME WITH TIME ZONE'))
    THEN
        v_chr_val := p_var_value::TEXT;
    ELSIF (v_out_var_data_t = 'BOOLEAN')
    THEN
        v_chr_val := upper(p_var_value::TEXT);
    ELSIF (v_out_var_data_t IN ('DATE',
                                'TIME WITHOUT TIME ZONE',
                                'TIMESTAMP WITHOUT TIME ZONE',
                                'TIMESTAMP WITH TIME ZONE'))
    THEN
        -- Picking up the right datetime mask
        v_datetime_mask := CASE v_out_var_data_t
                              WHEN 'DATE' THEN 'dd-MON-yy'
                              WHEN 'TIME WITHOUT TIME ZONE' THEN 'hh24:mi:ss.us AM'
                              WHEN 'TIMESTAMP WITHOUT TIME ZONE' THEN 'dd-MON-yy hh24:mi:ss.us AM'
                              ELSE 'dd-MON-yy hh24:mi:ss.us AM OF:00'
                           END;

        v_chr_val := to_char(p_var_value, v_datetime_mask);
    ELSIF (v_out_var_data_t = 'BYTEA')
    THEN
        v_bind_var_data_t := 'TEXT';
        v_chr_val := upper(encode(p_var_value, 'hex'));
    ELSE RETURN;
    END IF;

    v_var_size := coalesce(v_var_size, coalesce(char_length(v_chr_val), 0));

    -- Determining next variable position
    SELECT coalesce(MAX(var_pos), 0) + 1
      INTO v_var_pos
      FROM dbms_sql$bind_variable
     WHERE cursor_id = p_cursor_id;

    -- Binding variable to cursor (identified by cursor_id)
    INSERT INTO dbms_sql$bind_variable (cursor_id,
                                        var_pos,
                                        var_name,
                                        var_label,
                                        data_type,
                                        base_type,
                                        var_size,
                                        value_size,
                                        is_fixed,
                                        chr_val)
         VALUES (p_cursor_id,
                 v_var_pos,
                 v_var_info[2], -- Variable name
                 v_var_info[1], -- Variable label list
                 v_bind_var_data_t,
                 v_bind_var_base_t,
                 v_var_size,
                 p_value_size,
                 v_is_fixed,
                 v_chr_val)
    ON CONFLICT (cursor_id, var_name)
    DO UPDATE SET var_label = v_var_info[1],
                  data_type = v_bind_var_data_t,
                  base_type = v_bind_var_base_t,
                  value_size = p_value_size,
                  is_fixed = v_is_fixed,
                  chr_val = v_chr_val;
EXCEPTION
    -- Cursor is not opened or does not exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := 'DBMS_SQL access denied.',
                    DETAIL := 'DBMS_SQL access was denied due to security concerns.',
                    HINT := '-29471';

    -- Bind variable does not exist
    WHEN null_value_not_allowed THEN
        RAISE USING MESSAGE := 'Bind variable does not exist.',
                    DETAIL := 'Call for a bind variable that was not listed in the corresponding SQL statement.',
                    HINT := '-1006';

    -- No statement previously parsed
    WHEN sql_statement_not_yet_complete THEN
        RAISE USING MESSAGE := 'No statement parsed.',
                    DETAIL := 'Attempting to reference a cursor with the SQL statement associated not parsed.',
                    HINT := '-1003';

    -- Effective userid (OID) changed since cursor parse
    WHEN invalid_role_specification THEN
        RAISE USING MESSAGE := 'Effective userid is not the same as when cursor was parsed.',
                    DETAIL := 'The effective userid on this call to DBMS_SQL is not the same as that at the time the cursor was parsed.',
                    HINT := '-29470';
END;
]]></complex-attribute>
                        <category _I_D="d4b2f3ea-f0bd-4304-bbff-1be9e02c2227" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f31c105d-986a-4e98-90e7-e3ff67bb753f" name="dbms_sql$close_cursor" subcategories-loading="none" object-loading="extended" context="dbms_sql$close_cursor" is-trigger-function="0" unique-function-name="dbms_sql$close_cursor" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="numeric" function-arguments="INOUT p_cursor_id numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304448" volatility="VOLATILE" is-window="f" function-identity-arguments="INOUT p_cursor_id numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$close_cursor(INOUT p_cursor_id numeric)" comment="The procedure closes a given cursor. The memory allocated to the cursor is released and one can no longer fetch from that cursor.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cursor_id INTEGER := p_cursor_id;
BEGIN
    /* Close DBMS_SQL cursor only if it is opened.
       This prevents a secondary exception raising when trying
       to close DBMS_SQL cursor in EXCEPTION section.
    */
    IF (aws_oracle_ext.dbms_sql$is_open(v_cursor_id))
    THEN
        -- Deleting related data from all temp tables
        DELETE FROM dbms_sql$cursor
              WHERE cursor_id = v_cursor_id;

        -- Nulling cursor metadata (JSON) object
        PERFORM set_config(format('sct$dbms_sql.cursor_id_%s_metadata', v_cursor_id), NULL, FALSE);

        -- Setting `last_affected_cursor_id` variable
        PERFORM set_config('sct$dbms_sql.last_affected_cursor_id', v_cursor_id::TEXT, FALSE);

        -- Nulling `last_row_count` variable
        PERFORM set_config('sct$dbms_sql.last_row_count', NULL, FALSE);
    END IF;

    p_cursor_id := NULL;
EXCEPTION
    -- Effective userid (OID) changed since solution initialization
    WHEN insufficient_privilege THEN
        RAISE USING MESSAGE := 'DBMS_SQL access denied.',
                    DETAIL := 'DBMS_SQL access was denied due to security concerns.',
                    HINT := '-29471';
END;
]]></complex-attribute>
                        <category _I_D="482d1de4-982f-4e23-a19d-5175edaa0597" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0061fc1d-b72b-454e-ba8e-20053a500e08" name="dbms_sql$column_value" subcategories-loading="none" object-loading="extended" context="dbms_sql$column_value" is-trigger-function="0" unique-function-name="dbms_sql$column_value" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,integer,anyelement,numeric,numeric,numeric" is-returning-set="f" ret-datatype="record" function-arguments="p_cursor_id integer, p_column_pos integer, INOUT p_column_val anyelement, INOUT p_column_err numeric DEFAULT NULL::numeric, INOUT p_actual_len numeric DEFAULT NULL::numeric, INOUT p_typvar_len numeric DEFAULT NULL::numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304454" volatility="STABLE" is-window="f" function-identity-arguments="p_cursor_id integer, p_column_pos integer, INOUT p_column_val anyelement, INOUT p_column_err numeric, INOUT p_actual_len numeric, INOUT p_typvar_len numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$column_value(p_cursor_id integer, p_column_pos integer, INOUT p_column_val anyelement, INOUT p_column_err numeric, INOUT p_actual_len numeric, INOUT p_typvar_len numeric)" comment="This procedure returns the value of the cursor element for a given position in a given cursor. This procedure is used to access the data fetched by calling `dbms_sql$fetch_rows` function.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_chr_val TEXT;
    v_num_val NUMERIC;
    v_dprec_val DOUBLE PRECISION;
    v_money_val MONEY;
    v_tstamp_val TIMESTAMP WITHOUT TIME ZONE;
    v_tstamptz_val TIMESTAMP WITH TIME ZONE;
    v_timetz_val TIME WITH TIME ZONE;
    v_interval_val INTERVAL;
    v_bool_val BOOLEAN;
    v_xml_val XML;
    v_bin_val BYTEA;
    v_col_size INTEGER;
    v_defcol_data JSONB;
    v_curcol_data JSONB;
    v_cur_metadata JSONB;
    v_curcol_data_t TEXT;
    v_curcol_base_t TEXT;
    v_defcol_data_t TEXT;
    v_defcol_base_t TEXT;
    v_out_var_base_t TEXT;
    v_out_var_data_t TEXT;
    v_current_user_oid BIGINT;
BEGIN
    -- Checking that cursor is opened (exit if it is not)
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    END IF;

    -- Obtaining current user OID
    v_current_user_oid := aws_oracle_ext.get_user_oid_by_name(current_user);

    -- Getting cursor metadata (JSON) object
    v_cur_metadata := nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id), TRUE), '');

    /* Checking that effective user OID (current_user) of the caller on this cursor is the same
       as that of the caller of the most recent parse operation on this cursor.
       Actual for cursors opened with security level 2 */
    IF ((v_cur_metadata ->> 'security_level')::SMALLINT = 2 AND
        (v_cur_metadata ->> 'parse_user_oid')::BIGINT != v_current_user_oid)
    THEN
        RAISE invalid_role_specification;
    END IF;

    -- Getting dynamic SQL statement defined and actual columns info (JSON)
    v_defcol_data := (v_cur_metadata #> format('{defcols_data, col_%s}', p_column_pos)::TEXT[]);
    v_curcol_data := (v_cur_metadata #> format('{curcols_data, col_%s}', p_column_pos)::TEXT[]);

    v_defcol_data_t := (v_defcol_data ->> 'data_type'); -- Column (defined) data type
    v_defcol_base_t := (v_defcol_data ->> 'base_type'); -- Column (defined) base data type
    v_curcol_data_t := (v_curcol_data ->> 'data_type'); -- Column (actual) data type
    v_curcol_base_t := (v_curcol_data ->> 'base_type'); -- Column (actual) base data type

    v_col_size := (v_defcol_data ->> 'col_size'); -- Column size in characters

    v_out_var_data_t := upper(pg_typeof(p_column_val)::TEXT);

    -- Determining base data type of passed variable
    v_out_var_base_t := aws_oracle_ext.get_base_type_by_dtype(v_out_var_data_t);

    -- Default vars states
    p_column_val := NULL;
    p_column_err := 0;
    p_actual_len := 0;
    p_typvar_len := 0;

    -- Column position should be declared in SELECT list
    IF (v_defcol_base_t IS NULL) THEN
        RAISE null_value_not_allowed;
    -- Check if OUT argument base type matches declared column base type (with some exclusions)
    ELSIF ((substring(v_out_var_base_t, 1, 14) != substring(v_defcol_base_t, 1, 14) AND -- TIMESTAMPs
            substring(v_out_var_base_t, 1, 5) != substring(v_defcol_base_t, 1, 5) AND -- TIMEs
            (substring(v_out_var_data_t, 1, 5) != 'TIME ' AND
             substring(v_defcol_data_t, 1, 10) != 'TIMESTAMP ') AND
            NOT (v_defcol_base_t IN ('NUMERIC',
                                     'DOUBLE PRECISION') AND
                 v_out_var_base_t IN ('NUMERIC',
                                      'DOUBLE PRECISION'))) OR
           (substring(v_defcol_data_t, 1, 5) = 'TIME ' AND
            (substring(v_out_var_data_t, 1, 10) = 'TIMESTAMP ' OR
             v_out_var_data_t = 'DATE')))
    THEN
        RAISE datatype_mismatch;
    -- Variable should not be declared using `dbms_sql$define_column_char`
    ELSIF ((v_defcol_data ->> 'is_fixed')::SMALLINT = 1) THEN
        RAISE datatype_mismatch;
    -- If current row not specified, then nothing to return
    ELSIF ((v_cur_metadata ->> 'curr_row') IS NULL) THEN
        RETURN;
    END IF;

    BEGIN
        /* Extracting row data from execution results
           table `dbms_sql$recordset`
           (by cursor id, row number, column position) */
        SELECT chr_val,
               num_val,
               dprec_val,
               money_val,
               tstamp_val,
               tstamptz_val,
               timetz_val,
               interval_val,
               bool_val,
               xml_val,
               bin_val
          INTO v_chr_val,
               v_num_val,
               v_dprec_val,
               v_money_val,
               v_tstamp_val,
               v_tstamptz_val,
               v_timetz_val,
               v_interval_val,
               v_bool_val,
               v_xml_val,
               v_bin_val
          FROM dbms_sql$recordset
         WHERE cursor_id = p_cursor_id
           AND rownum = (v_cur_metadata ->> 'curr_row')::INTEGER
           AND column_pos = p_column_pos;
    EXCEPTION
        WHEN insufficient_privilege THEN
            -- Effective userid changed
            RAISE invalid_cursor_state;
    END;

    -- Casting data type and copying value into the OUT argument
    IF (v_out_var_base_t = 'TEXT')
    THEN
        -- Actual length of the data (chars)
        IF (v_chr_val IS NOT NULL) THEN
            p_typvar_len :=
                CASE v_curcol_data_t
                   WHEN 'CHARACTER' THEN (v_curcol_data ->> 'chr_max_len')::INTEGER
                   ELSE char_length(v_chr_val)
                END;
        END IF;

        IF (v_col_size IS NULL) THEN
            p_column_val := v_chr_val;
        ELSE
            p_column_val := substring(v_chr_val, 1, v_col_size);

            IF (v_col_size != 0 AND v_col_size < p_typvar_len)
            THEN
                p_column_err := 1406;
            END IF;
        END IF;

        /* Internal representation (bytes).
           4 bytes + length of text */
        IF (v_chr_val IS NOT NULL) THEN
            p_actual_len :=
                CASE v_curcol_data_t
                   WHEN 'CHARACTER' THEN (v_curcol_data ->> 'chr_byte_len')::INTEGER
                   ELSE pg_column_size(v_chr_val)
                END;
        END IF;
    ELSIF (v_out_var_base_t IN ('NUMERIC',
                                'DOUBLE PRECISION'))
    THEN
        -- Determining data source column
        IF (v_curcol_base_t = 'NUMERIC') THEN
            p_column_val := v_num_val;
        ELSE
            p_column_val := v_dprec_val;
        END IF;

        -- Internal representation (bytes)
        IF (p_column_val IS NOT NULL) THEN
            p_actual_len :=
                CASE v_curcol_data_t
                   WHEN 'SMALLINT' THEN 2 -- 2 bytes
                   WHEN 'INTEGER' THEN 4 -- 4 bytes
                   WHEN 'BIGINT' THEN 8 -- 8 bytes
                   WHEN 'REAL' THEN 4 -- 4 bytes
                   WHEN 'DOUBLE PRECISION' THEN 8 -- 8 bytes
                   WHEN 'NUMERIC' THEN pg_column_size(p_column_val)
                END;
        END IF;

        /* Actual length of the data (bytes).
           Same as internal representation */
        p_typvar_len := p_actual_len;
    ELSIF (v_out_var_base_t = 'MONEY')
    THEN
        p_column_val := v_money_val;

        -- Internal representation, 8 bytes
        p_actual_len := CASE
                           WHEN p_column_val IS NOT NULL
                           THEN 8
                        END;

        /* Actual length of the data (bytes).
           Same as internal representation */
        p_typvar_len := p_actual_len;
    ELSIF (v_out_var_base_t IN ('TIMESTAMP WITHOUT TIME ZONE',
                                'TIMESTAMP WITH TIME ZONE'))
    THEN
        CASE v_curcol_base_t
           WHEN 'TIMESTAMP WITHOUT TIME ZONE' THEN
               p_column_val := v_tstamp_val;
           WHEN 'TIMESTAMP WITH TIME ZONE' THEN
               p_column_val := v_tstamptz_val;
           ELSE
               p_column_val := v_timetz_val;
        END CASE;

        -- Internal representation (bytes)
        p_actual_len := CASE
                           WHEN p_column_val IS NOT NULL
                           THEN CASE v_curcol_data_t
                                   WHEN 'DATE' THEN 4
                                   WHEN 'TIME WITH TIME ZONE' THEN 12
                                   ELSE 8
                                END
                        END;

        /* Actual length of the data (bytes).
           Same as internal representation */
        p_typvar_len := p_actual_len;
    ELSIF (v_out_var_base_t = 'TIME WITH TIME ZONE')
    THEN
        p_column_val := CASE v_curcol_base_t
                           WHEN 'TIMESTAMP WITHOUT TIME ZONE' THEN v_tstamp_val::TIME::TIMETZ
                           WHEN 'TIMESTAMP WITH TIME ZONE' THEN v_tstamptz_val::TIMETZ
                           ELSE v_timetz_val
                        END;

        -- Internal representation (bytes)
        p_actual_len := CASE
                           WHEN p_column_val IS NOT NULL
                           THEN CASE v_curcol_data_t
                                   WHEN 'DATE' THEN 4
                                   WHEN 'TIME WITH TIME ZONE' THEN 12
                                   ELSE 8
                                END
                        END;

        /* Actual length of the data (bytes).
           Same as internal representation */
        p_typvar_len := p_actual_len;
    ELSIF (v_out_var_base_t = 'INTERVAL')
    THEN
        p_column_val := v_interval_val;

        -- Internal representation, 16 bytes
        p_actual_len := CASE
                           WHEN p_column_val IS NOT NULL
                           THEN 16
                        END;

        /* Actual length of the data (bytes).
           Same as internal representation */
        p_typvar_len := p_actual_len;
    ELSIF (v_out_var_base_t = 'BOOLEAN')
    THEN
        p_column_val := v_bool_val;

        /* Internal representation (bytes).
           1 byte, for TRUE or FALSE value */
        p_actual_len := CASE
                           WHEN p_column_val IS NOT NULL
                           THEN 1
                        END;

        /* Actual length of the data (bytes).
           Same as internal representation */
        p_typvar_len := p_actual_len;
    ELSIF (v_out_var_base_t = 'XML')
    THEN
        p_column_val := v_xml_val;

        -- Internal representation (bytes)
        p_actual_len := pg_column_size(p_column_val);

        -- Actual length of the data (chars)
        p_typvar_len := char_length(p_column_val::TEXT);
    ELSIF (v_out_var_base_t = 'BYTEA')
    THEN
        p_column_val := CASE
                           WHEN v_col_size IS NULL THEN v_bin_val
                           ELSE substring(v_bin_val from 1 for v_col_size)
                        END;

        /* Internal representation (bytes).
           4 bytes + actual length of the data */
        p_actual_len := pg_column_size(v_bin_val);

        -- Actual length of the data (bytes)
        p_typvar_len := octet_length(v_bin_val);

        IF (v_col_size != 0 AND v_col_size < p_typvar_len)
        THEN
            p_column_err := 1406;
        END IF;
    END IF;

    IF (p_column_val IS NULL) THEN
        p_column_err := 1405;
    END IF;

    p_actual_len := coalesce(p_actual_len, 0);
    p_typvar_len := coalesce(p_typvar_len, 0);
EXCEPTION
    -- Cursor is not opened or does not exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := 'DBMS_SQL access denied.',
                    DETAIL := 'DBMS_SQL access was denied due to security concerns.',
                    HINT := '-29471';

    -- Column position is not declared in SELECT list
    WHEN null_value_not_allowed THEN
        RAISE USING MESSAGE := 'Column not in select list.',
                    DETAIL := 'A reference was made to a column not listed in the SELECT clause.',
                    HINT := '-1007';

    /* OUT argument base type does not match declared column base type.
       Possible column was declared through `dbms_sql$define_column_char` */
    WHEN datatype_mismatch THEN
        RAISE USING MESSAGE := 'Type of OUT argument does not match declared column type.',
                    DETAIL := 'Attempting to get the value of a column but the type of the given OUT argument is different from the type of column that was defined previously.',
                    HINT := '-6562';

    -- Effective userid (OID) changed since cursor parse
    WHEN invalid_role_specification THEN
        RAISE USING MESSAGE := 'Effective userid is not the same as when cursor was parsed.',
                    DETAIL := 'The effective userid on this call to DBMS_SQL is not the same as that at the time the cursor was parsed.',
                    HINT := '-29470';
END;
]]></complex-attribute>
                        <category _I_D="694c8ea1-3496-4852-9a3b-dc52885148f3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4f67b437-576c-4355-b7f8-a234f350ede6" name="dbms_sql$column_value_char" subcategories-loading="none" object-loading="extended" context="dbms_sql$column_value_char" is-trigger-function="0" unique-function-name="dbms_sql$column_value_char" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,integer,anyelement,numeric,numeric,numeric" is-returning-set="f" ret-datatype="record" function-arguments="p_cursor_id integer, p_column_pos integer, INOUT p_column_val anyelement, INOUT p_column_err numeric DEFAULT NULL::numeric, INOUT p_actual_len numeric DEFAULT NULL::numeric, INOUT p_typvar_len numeric DEFAULT NULL::numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304450" volatility="STABLE" is-window="f" function-identity-arguments="p_cursor_id integer, p_column_pos integer, INOUT p_column_val anyelement, INOUT p_column_err numeric, INOUT p_actual_len numeric, INOUT p_typvar_len numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$column_value_char(p_cursor_id integer, p_column_pos integer, INOUT p_column_val anyelement, INOUT p_column_err numeric, INOUT p_actual_len numeric, INOUT p_typvar_len numeric)" comment="This procedure returns the value of the cursor element for a given position in a given cursor. This procedure is used to access the data fetched by calling `dbms_sql$fetch_rows` function.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
    v_defcol_data JSONB;
    v_curcol_data JSONB;
    v_col_size INTEGER;
    v_chr_val TEXT;
    v_num_val NUMERIC;
    v_dprec_val DOUBLE PRECISION;
    v_money_val MONEY;
    v_tstamp_val TIMESTAMP WITHOUT TIME ZONE;
    v_tstamptz_val TIMESTAMP WITH TIME ZONE;
    v_timetz_val TIME WITH TIME ZONE;
    v_interval_val INTERVAL;
    v_bool_val BOOLEAN;
    v_xml_val XML;
    v_bin_val BYTEA;
    v_curcol_data_t TEXT;
    v_curcol_base_t TEXT;
    v_defcol_base_t TEXT;
    v_datetime_mask TEXT;
    v_out_var_size INTEGER;
    v_current_user_oid BIGINT;
    v_out_var_data_t TEXT := upper(pg_typeof(p_column_val)::TEXT);
BEGIN
    -- Checking that cursor is opened (exit if it is not)
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    END IF;

    -- Obtaining current user OID
    v_current_user_oid := aws_oracle_ext.get_user_oid_by_name(current_user);

    -- Getting cursor metadata (JSON) object
    v_cur_metadata := nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id), TRUE), '');

    /* Checking that effective user OID (current_user) of the caller on this cursor is the same
       as that of the caller of the most recent parse operation on this cursor.
       Actual for cursors opened with security level 2 */
    IF ((v_cur_metadata ->> 'security_level')::SMALLINT = 2 AND
        (v_cur_metadata ->> 'parse_user_oid')::BIGINT != v_current_user_oid)
    THEN
        RAISE invalid_role_specification;
    END IF;

    -- Getting dynamic SQL statement defined and actual columns info (JSON)
    v_defcol_data := (v_cur_metadata #> format('{defcols_data, col_%s}', p_column_pos)::TEXT[]);
    v_curcol_data := (v_cur_metadata #> format('{curcols_data, col_%s}', p_column_pos)::TEXT[]);

    v_curcol_data_t := (v_curcol_data ->> 'data_type'); -- Column (actual) data type
    v_curcol_base_t := (v_curcol_data ->> 'base_type'); -- Column (actual) base data type
    v_defcol_base_t := (v_defcol_data ->> 'base_type'); -- Column (defined) base data type

    v_col_size := (v_defcol_data ->> 'col_size'); -- Column size in characters

    -- Default vars states
    p_column_err := 0;
    p_actual_len := 0;
    p_typvar_len := 0;

    -- Column position should be declared in SELECT list
    IF (v_defcol_base_t IS NULL) THEN
        RAISE null_value_not_allowed;
    -- Variable should not be declared using `dbms_sql$define_column`
    ELSIF (coalesce((v_defcol_data ->> 'is_fixed')::SMALLINT, 0) != 1) THEN
        RAISE most_specific_type_mismatch;
    -- If current row not specified, then nothing to return
    ELSIF ((v_cur_metadata ->> 'curr_row') IS NULL) THEN
        RETURN;
    END IF;

    BEGIN
        /* Extracting row data from execution results
           table `dbms_sql$recordset`
           (by cursor id, row number, column position) */
        SELECT chr_val,
               num_val,
               dprec_val,
               money_val,
               tstamp_val,
               tstamptz_val,
               timetz_val,
               interval_val,
               bool_val,
               xml_val,
               bin_val
          INTO v_chr_val,
               v_num_val,
               v_dprec_val,
               v_money_val,
               v_tstamp_val,
               v_tstamptz_val,
               v_timetz_val,
               v_interval_val,
               v_bool_val,
               v_xml_val,
               v_bin_val
          FROM dbms_sql$recordset
         WHERE cursor_id = p_cursor_id
           AND rownum = (v_cur_metadata ->> 'curr_row')::INTEGER
           AND column_pos = p_column_pos;
    EXCEPTION
        WHEN insufficient_privilege THEN
            -- Effective userid changed
            RAISE invalid_cursor_state;
    END;

    /* Casting column data to a character string.
       Copying value into the OUT argument */
    IF (v_curcol_data_t = 'CHARACTER' AND
        v_chr_val IS NOT NULL)
    THEN
        -- Internal representation (bytes)
        p_actual_len := (v_curcol_data ->> 'chr_byte_len');

        -- Actual length of the data (bytes)
        p_typvar_len := (v_curcol_data ->> 'chr_max_len');
    ELSIF (v_curcol_base_t = 'TEXT')
    THEN
        /* Internal representation (bytes).
           4 bytes + length of text */
        p_actual_len := pg_column_size(v_chr_val);

        -- Actual length of the data (chars)
        p_typvar_len := char_length(v_chr_val);
    ELSIF (v_curcol_base_t = 'NUMERIC')
    THEN
        v_chr_val := v_num_val::TEXT;

        -- Internal representation (bytes)
        IF (v_chr_val IS NOT NULL) THEN
            p_actual_len :=
                CASE v_curcol_data_t
                   WHEN 'SMALLINT' THEN 2 -- 2 bytes
                   WHEN 'INTEGER' THEN 4 -- 4 bytes
                   WHEN 'BIGINT' THEN 8 -- 8 bytes
                   WHEN 'NUMERIC' THEN pg_column_size(v_num_val)
                END;
        END IF;

        /* Actual length of the data (bytes).
           Same as internal representation */
        p_typvar_len := p_actual_len;
    ELSIF (v_curcol_base_t = 'DOUBLE PRECISION')
    THEN
        v_chr_val := v_dprec_val::TEXT;

        -- Internal representation (bytes)
        IF (v_chr_val IS NOT NULL) THEN
            p_actual_len :=
                CASE v_curcol_data_t
                   WHEN 'REAL' THEN 4 -- 4 bytes
                   WHEN 'DOUBLE PRECISION' THEN 8 -- 8 bytes
                END;
        END IF;

        /* Actual length of the data (bytes).
           Same as internal representation */
        p_typvar_len := p_actual_len;
    ELSIF (v_curcol_base_t = 'MONEY')
    THEN
        v_chr_val := v_money_val::TEXT;

        -- Internal representation, 8 bytes
        p_actual_len := CASE
                           WHEN v_chr_val IS NOT NULL
                           THEN 8
                        END;

        /* Actual length of the data (bytes).
           Same as internal representation */
        p_typvar_len := p_actual_len;
    ELSIF (v_curcol_base_t IN ('TIMESTAMP WITHOUT TIME ZONE',
                               'TIMESTAMP WITH TIME ZONE',
                               'TIME WITH TIME ZONE'))
    THEN
        -- Picking up the right datetime mask
        v_datetime_mask := CASE v_curcol_data_t
                              WHEN 'DATE' THEN 'dd-MON-yy'
                              WHEN 'TIME WITHOUT TIME ZONE' THEN 'hh24:mi:ss.us AM'
                              WHEN 'TIMESTAMP WITHOUT TIME ZONE' THEN 'dd-MON-yy hh24:mi:ss.us AM'
                              ELSE 'dd-MON-yy hh24:mi:ss.us AM OF:00'
                           END;

        v_chr_val := CASE v_curcol_base_t
                        WHEN 'TIMESTAMP WITHOUT TIME ZONE' THEN to_char(v_tstamp_val, v_datetime_mask)
                        WHEN 'TIME WITH TIME ZONE' THEN v_timetz_val::TEXT
                        ELSE to_char(v_tstamptz_val, v_datetime_mask)
                     END;

        /* Internal representation,
           4 bytes for DATE, 8 bytes for other types */
        p_actual_len := CASE
                           WHEN v_chr_val IS NOT NULL
                           THEN CASE v_curcol_data_t
                                   WHEN 'DATE' THEN 4
                                   WHEN 'TIME WITH TIME ZONE' THEN 12
                                   ELSE 8
                                END
                        END;

        /* Actual length of the data (bytes).
           Same as internal representation */
        p_typvar_len := p_actual_len;
    ELSIF (v_curcol_base_t = 'INTERVAL')
    THEN
        v_chr_val := v_interval_val::TEXT;

        -- Internal representation, 16 bytes
        p_actual_len := CASE
                           WHEN v_chr_val IS NOT NULL
                           THEN 16
                        END;

        /* Actual length of the data (bytes).
           Same as internal representation */
        p_typvar_len := p_actual_len;
    ELSIF (v_curcol_base_t = 'BOOLEAN')
    THEN
        v_chr_val := upper(v_bool_val::TEXT);

        /* Internal representation (bytes).
           1 byte, for TRUE or FALSE value */
        p_actual_len := CASE
                           WHEN v_chr_val IS NOT NULL
                           THEN 1
                        END;

        /* Actual length of the data (bytes).
           Same as internal representation */
        p_typvar_len := p_actual_len;
    ELSIF (v_curcol_base_t = 'XML')
    THEN
        v_chr_val := v_xml_val::TEXT;

        -- Internal representation (bytes)
        p_actual_len := pg_column_size(v_xml_val);

        -- Actual length of the data (chars)
        p_typvar_len := char_length(v_chr_val);
    ELSIF (v_curcol_base_t = 'BYTEA')
    THEN
        v_chr_val := upper(encode(v_bin_val, 'hex'));

        /* Internal representation (bytes).
           4 bytes + actual length of the data */
        p_actual_len := pg_column_size(v_bin_val);

        -- Actual length of the data (bytes)
        p_typvar_len := octet_length(v_bin_val);
    END IF;

    IF (v_col_size != 0 AND
        v_col_size < char_length(v_chr_val))
    THEN
        p_column_err := 1406;
    END IF;

    v_chr_val := CASE
                    WHEN v_col_size IS NULL THEN v_chr_val
                    ELSE substring(v_chr_val, 1, v_col_size)
                 END;

    -- Copying value into the OUT argument
    IF (v_out_var_data_t IN ('TEXT',
                             'CHARACTER',
                             'CHARACTER VARYING'))
    THEN
        v_out_var_size := coalesce(length(p_column_val::BYTEA, pg_client_encoding()), 0);

        IF (v_out_var_size != 0 AND
            v_out_var_size < p_actual_len)
        THEN
            RAISE string_data_length_mismatch;
        END IF;

        p_column_val := v_chr_val;
    ELSIF (v_out_var_data_t IN ('BIGINT',
                                'INTEGER',
                                'NUMERIC',
                                'SMALLINT'))
    THEN
        p_column_val := v_chr_val::NUMERIC;
    ELSIF (v_out_var_data_t IN ('REAL',
                                'DOUBLE PRECISION'))
    THEN
        p_column_val := v_chr_val::DOUBLE PRECISION;
    ELSIF (v_out_var_data_t = 'MONEY')
    THEN
        p_column_val := v_chr_val::MONEY;
    ELSIF (v_out_var_data_t = 'DATE')
    THEN
        IF (char_length(v_chr_val) < 8) THEN
            RAISE invalid_datetime_format;
        END IF;

        p_column_val := to_date(v_chr_val, 'dd-MON-yy');
    ELSIF (v_out_var_data_t IN ('TIME WITHOUT TIME ZONE',
                                'TIME WITH TIME ZONE'))
    THEN
        v_chr_val := regexp_replace(v_chr_val, '\s*[AP]M', '', 'i');

        IF (char_length(v_chr_val) < 8) THEN
            RAISE invalid_datetime_format;
        END IF;

        IF (v_out_var_data_t = 'TIME WITHOUT TIME ZONE') THEN
            p_column_val := v_chr_val::TIME;
        ELSE
            p_column_val := v_chr_val::TIMETZ;
        END IF;
    ELSIF (v_out_var_data_t = 'TIMESTAMP WITHOUT TIME ZONE')
    THEN
        v_chr_val := regexp_replace(v_chr_val, '\s*[AP]M', '', 'i');

        IF (char_length(v_chr_val) < 17) THEN
            RAISE invalid_datetime_format;
        END IF;

        p_column_val := v_chr_val::TIMESTAMP;
    ELSIF (v_out_var_data_t = 'TIMESTAMP WITH TIME ZONE')
    THEN
        v_chr_val := regexp_replace(v_chr_val, '\s*[AP]M', '', 'i');

        IF (char_length(v_chr_val) < 17) THEN
            RAISE invalid_datetime_format;
        END IF;

        p_column_val := to_timestamp(v_chr_val, 'dd-MON-yy hh24:mi:ss.us');
    ELSIF (v_out_var_data_t = 'INTERVAL')
    THEN
        p_column_val := v_chr_val::INTERVAL;
    ELSIF (v_out_var_data_t = 'BOOLEAN')
    THEN
        p_column_val := v_chr_val::BOOLEAN;
    ELSIF (v_out_var_data_t = 'BYTEA') THEN
        BEGIN
            p_column_val := decode(v_chr_val, 'hex');
        EXCEPTION
            WHEN OTHERS THEN
            RAISE invalid_binary_representation;
        END;
    ELSIF (v_out_var_data_t = 'XML') THEN
        BEGIN
            p_column_val := v_chr_val::XML;
        EXCEPTION
            WHEN OTHERS THEN
            RAISE invalid_xml_document;
        END;
    ELSE
        p_column_val := NULL;
    END IF;

    IF (v_chr_val IS NULL) THEN
        p_column_err := 1405;
    END IF;

    p_actual_len := coalesce(p_actual_len, 0);
    p_typvar_len := coalesce(p_typvar_len, 0);
EXCEPTION
    -- Cursor is not opened or does not exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := 'DBMS_SQL access denied.',
                    DETAIL := 'DBMS_SQL access was denied due to security concerns.',
                    HINT := '-29471';

    -- Column position is not declared in SELECT list
    WHEN null_value_not_allowed THEN
        RAISE USING MESSAGE := 'Column not in select list.',
                    DETAIL := 'A reference was made to a column not listed in the SELECT clause.',
                    HINT := '-1007';

    /* OUT argument base type does not match declared column base type.
       Possible column was declared through `dbms_sql$define_column` */
    WHEN most_specific_type_mismatch THEN
        RAISE USING MESSAGE := 'Type of OUT argument does not match declared column type.',
                    DETAIL := 'Attempting to get the value of a column but the type of the given OUT argument is different from the type of column that was defined previously.',
                    HINT := '-6562';

    -- Length of OUT argument is too small
    WHEN string_data_length_mismatch THEN
        RAISE USING MESSAGE := 'Character string buffer too small.',
                    DETAIL := 'Length of OUT argument is too small to store bind variable value.',
                    HINT := '-6502';

    -- Effective userid (OID) changed since cursor parse
    WHEN invalid_role_specification THEN
        RAISE USING MESSAGE := 'Effective userid is not the same as when cursor was parsed.',
                    DETAIL := 'The effective userid on this call to DBMS_SQL is not the same as that at the time the cursor was parsed.',
                    HINT := '-29470';

    -- Possible data type conversion error (char to numeric\money)
    WHEN invalid_text_representation THEN
        RAISE USING MESSAGE := 'Error during column value conversion (from char to numeric\money).',
                    DETAIL := format('Value %s is not correct for conversion to numeric\money.',
                                     quote_literal(v_chr_val));

    -- Possible data type conversion error (char to datetime\interval)
    WHEN invalid_datetime_format THEN
        RAISE USING MESSAGE := 'Error during column value conversion (from char to datetime\interval).',
                    DETAIL := format('Value %s is not correct for conversion to datetime\interval.',
                                     quote_literal(v_chr_val));

    -- Possible data type conversion error (char to binary data)
    WHEN invalid_binary_representation THEN
        RAISE USING MESSAGE := 'Error during column value conversion (from char to binary data).',
                    DETAIL := format('Value %s is not correct for conversion to binary data.',
                                     quote_literal(v_chr_val));

    -- Possible data type conversion error (char to XML document)
    WHEN invalid_xml_document THEN
        RAISE USING MESSAGE := 'Error during column value conversion (from char to XML document).',
                    DETAIL := format('Value %s is not correct for conversion to XML document.',
                                     quote_literal(v_chr_val));
END;
]]></complex-attribute>
                        <category _I_D="5f144f46-bb9c-4ab9-9db6-dbed9703b735" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a38ad51c-54c2-4bad-b3ff-1ac722704553" name="dbms_sql$column_value_long" subcategories-loading="none" object-loading="extended" context="dbms_sql$column_value_long" is-trigger-function="0" unique-function-name="dbms_sql$column_value_long" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,integer,integer,integer,text,numeric,numeric" is-returning-set="f" ret-datatype="record" function-arguments="p_cursor_id integer, p_column_pos integer, p_byte_len integer, p_offset integer, INOUT p_column_val text, INOUT p_length_val numeric, INOUT p_typvar_len numeric DEFAULT NULL::numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="7" function-id="304452" volatility="STABLE" is-window="f" function-identity-arguments="p_cursor_id integer, p_column_pos integer, p_byte_len integer, p_offset integer, INOUT p_column_val text, INOUT p_length_val numeric, INOUT p_typvar_len numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$column_value_long(p_cursor_id integer, p_column_pos integer, p_byte_len integer, p_offset integer, INOUT p_column_val text, INOUT p_length_val numeric, INOUT p_typvar_len numeric)" comment="This procedure returns part of the value of a TEXT column for a given position, offset, and size in a given cursor. This procedure is used to access the data fetched by calling `dbms_sql$fetch_rows` function.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_chr_val TEXT;
    v_chr_binval BYTEA;
    v_defcol_data JSONB;
    v_cur_metadata JSONB;
    v_defcol_base_t TEXT;
    v_current_user_oid BIGINT;
    v_out_var_base_t TEXT := 'TEXT';
BEGIN
    -- Checking that cursor is opened (exit if it is not)
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    -- Length of the segment to retrieve (in bytes) should be 1 or above
    ELSIF (coalesce(p_byte_len, 0) = 0) THEN
        RAISE zero_length_character_string;
    END IF;

    -- Obtaining current user OID
    v_current_user_oid := aws_oracle_ext.get_user_oid_by_name(current_user);

    -- Getting cursor metadata (JSON) object
    v_cur_metadata := nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id), TRUE), '');

    /* Checking that effective user OID (current_user) of the caller on this cursor is the same
       as that of the caller of the most recent parse operation on this cursor.
       Actual for cursors opened with security level 2 */
    IF ((v_cur_metadata ->> 'security_level')::SMALLINT = 2 AND
        (v_cur_metadata ->> 'parse_user_oid')::BIGINT != v_current_user_oid)
    THEN
        RAISE invalid_role_specification;
    END IF;

    -- Getting dynamic SQL statement defined columns info (JSON)
    v_defcol_data := (v_cur_metadata #> format('{defcols_data, col_%s}', p_column_pos)::TEXT[]);

    v_defcol_base_t := (v_defcol_data ->> 'base_type'); -- Column base data type

    -- Check if data is previously fetched from cursor
    IF ((v_cur_metadata ->> 'curr_row') IS NULL) THEN
        RAISE null_value_not_allowed;
    -- Column position should be declared in SELECT list
    ELSIF (v_defcol_base_t IS NULL) THEN
        RAISE too_many_columns;
    -- Check if OUT argument base type matches declared column base type
    ELSIF (v_out_var_base_t != substring(v_defcol_base_t, 1, 14)) THEN
        RAISE datatype_mismatch;
    -- Column should not be declared using `dbms_sql$define_column_char`
    ELSIF ((v_defcol_data ->> 'is_fixed')::SMALLINT = 1) THEN
        RAISE datatype_mismatch;
    END IF;

    BEGIN
        /* Extracting row data from execution results
           table `dbms_sql$recordset`
           (by cursor id, row number, column position) */
        SELECT chr_val
          INTO v_chr_val
          FROM dbms_sql$recordset
         WHERE cursor_id = p_cursor_id
           AND rownum = (v_cur_metadata ->> 'curr_row')::INTEGER
           AND column_pos = p_column_pos;
    EXCEPTION
        WHEN insufficient_privilege THEN
            -- Effective userid changed
            RAISE invalid_cursor_state;
    END;

    -- Extracting data from binary string and copying it into the OUT argument
    v_chr_binval := substring(v_chr_val::BYTEA from (p_offset + 1) for p_byte_len);
    p_column_val := convert_from(v_chr_binval, pg_client_encoding());

    /* Internal representation (bytes).
       4 bytes + actual length of the data */
    p_length_val := coalesce(pg_column_size(v_chr_binval), 0);

    -- Actual length of the data (bytes)
    p_typvar_len := coalesce(octet_length(v_chr_binval), 0);
EXCEPTION
    -- Cursor is not opened or does not exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := 'DBMS_SQL access denied.',
                    DETAIL := 'DBMS_SQL access was denied due to security concerns.',
                    HINT := '-29471';

    -- Length of the segment to retrieve (in bytes) is zero or less
    WHEN zero_length_character_string THEN
        RAISE USING MESSAGE := 'Numeric or value error.',
                    DETAIL := 'Length of the segment to retrieve (in bytes) must be 1 or above.',
                    HINT := '-6502';

    -- Resulting data was not previously fetched from cursor
    WHEN null_value_not_allowed THEN
        RAISE USING MESSAGE := 'This function can be called only after a fetch.',
                    DETAIL := 'The function was called before the fetch operation on cursor.',
                    HINT := '-1016';

    -- Column position is not declared in SELECT list
    WHEN too_many_columns THEN
        RAISE USING MESSAGE := 'Column not in select list.',
                    DETAIL := 'A reference was made to a column not listed in the SELECT clause.',
                    HINT := '-1007';

    /* OUT argument base type does not match declared column base type.
       Possible column was declared through `dbms_sql$define_column_char` */
    WHEN datatype_mismatch THEN
        RAISE USING MESSAGE := 'Type of OUT argument does not match declared column type.',
                    DETAIL := 'Attempting to get the value of a column but the type of the given OUT argument is different from the type of column that was defined previously.',
                    HINT := '-6562';

    -- Effective userid (OID) changed since cursor parse
    WHEN invalid_role_specification THEN
        RAISE USING MESSAGE := 'Effective userid is not the same as when cursor was parsed.',
                    DETAIL := 'The effective userid on this call to DBMS_SQL is not the same as that at the time the cursor was parsed.',
                    HINT := '-29470';
END;
]]></complex-attribute>
                        <category _I_D="e2b8bfe7-00c8-48fb-a6cb-01e5a736d2b7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dd64cf88-b35d-4097-ba0a-11959618ed56" name="dbms_sql$define_column" subcategories-loading="none" object-loading="extended" context="dbms_sql$define_column" is-trigger-function="0" unique-function-name="dbms_sql$define_column" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,integer,anyelement,integer" is-returning-set="f" ret-datatype="void" function-arguments="p_cursor_id integer, p_column_pos integer, p_column_var anyelement, p_col_size integer DEFAULT NULL::integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304458" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer, p_column_pos integer, p_column_var anyelement, p_col_size integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$define_column(p_cursor_id integer, p_column_pos integer, p_column_var anyelement, p_col_size integer)" comment="The procedure defines a column to be selected from the given cursor, used only with SELECT statements. The column being defined is identified by its relative position in the SELECT list of the statement in the given cursor.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
    v_defcols_data JSONB;
    v_col_size INTEGER;
    v_colvar_len INTEGER;
    v_defcol_base_t TEXT;
    v_current_user_oid BIGINT;
    v_defcol_data_t TEXT := upper(pg_typeof(p_column_var)::TEXT);
BEGIN
    -- Checking that cursor is opened
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    END IF;

    -- Obtaining current user OID
    v_current_user_oid := aws_oracle_ext.get_user_oid_by_name(current_user);

    -- Getting cursor metadata (JSON) object
    v_cur_metadata := nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id), TRUE), '');

    /* Checking that effective user OID (current_user) of the caller on this cursor is the same
       as that of the caller of the most recent parse operation on this cursor.
       Actual for cursors opened with security level 2 */
    IF ((v_cur_metadata ->> 'security_level')::SMALLINT = 2 AND
        (v_cur_metadata ->> 'parse_user_oid')::BIGINT != v_current_user_oid)
    THEN
        RAISE invalid_role_specification;
    END IF;

    -- Column position must be within the range 1..cols_count
    IF (p_column_pos NOT BETWEEN 1 AND (v_cur_metadata ->> 'cols_count')::SMALLINT) THEN
        RAISE check_violation;
    END IF;

    -- Determining base data type of passed variable
    v_defcol_base_t := aws_oracle_ext.get_base_type_by_dtype(v_defcol_data_t);

    IF (v_defcol_base_t = 'TEXT')
    THEN
        v_colvar_len := coalesce(length(p_column_var::BYTEA, pg_client_encoding()), 0);
        v_col_size := CASE
                         WHEN p_col_size IS NOT NULL THEN p_col_size
                         WHEN v_colvar_len > 0 THEN v_colvar_len
                      END;
    ELSIF (v_defcol_base_t = 'BYTEA')
    THEN
        v_col_size := p_col_size;
    END IF;

    BEGIN
        -- Saving defined columns data into temp table
        INSERT INTO dbms_sql$define_column (cursor_id,
                                            column_pos,
                                            data_type,
                                            base_type,
                                            col_size,
                                            is_fixed)
             VALUES (p_cursor_id,
                     p_column_pos,
                     v_defcol_data_t,
                     v_defcol_base_t,
                     v_col_size,
                     NULL)
        ON CONFLICT (cursor_id, column_pos)
        DO UPDATE SET data_type = v_defcol_data_t,
                      base_type = v_defcol_base_t,
                      col_size = v_col_size,
                      is_fixed = NULL;
    EXCEPTION
        WHEN insufficient_privilege THEN
            -- Effective userid changed
            RAISE invalid_cursor_state;
    END;

    -- Serializing defined columns data into JSON object
    SELECT jsonb_object_agg(concat('col_', defcol_data.column_pos),
                            defcol_data.column_data)
      INTO v_defcols_data
      FROM (SELECT defcol3.column_pos,
                   (SELECT to_jsonb(defcol2.*)
                      FROM (SELECT defcol1.data_type,
                                   defcol1.base_type,
                                   defcol1.col_size,
                                   defcol1.is_fixed
                              FROM dbms_sql$define_column AS defcol1
                             WHERE defcol1.cursor_id = defcol3.cursor_id
                               AND defcol1.column_pos = defcol3.column_pos
                           ) AS defcol2
                   ) AS column_data
              FROM dbms_sql$define_column AS defcol3
             WHERE defcol3.cursor_id = p_cursor_id
           ) AS defcol_data;

    -- Setting "defcols_data" (JSON) cursor property
    v_cur_metadata := jsonb_set(v_cur_metadata, '{defcols_data}', v_defcols_data);

    -- Saving cursor metadata (JSON) object
    PERFORM set_config(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id),
                       v_cur_metadata::TEXT,
                       FALSE);
EXCEPTION
    -- Cursor is not opened or does not exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := 'DBMS_SQL access denied.',
                    DETAIL := 'DBMS_SQL access was denied due to security concerns.',
                    HINT := '-29471';

    -- Column position lies outside of range 1..cols_count
    WHEN check_violation THEN
        RAISE USING MESSAGE := 'Column not in select list.',
                    DETAIL := 'Reference to a column not listed in the SELECT clause.',
                    HINT := '-1007';

    -- Effective userid (OID) changed since cursor parse
    WHEN invalid_role_specification THEN
        RAISE USING MESSAGE := 'Effective userid is not the same as when cursor was parsed.',
                    DETAIL := 'The effective userid on this call to DBMS_SQL is not the same as that at the time the cursor was parsed.',
                    HINT := '-29470';
END;
]]></complex-attribute>
                        <category _I_D="7a81d4ff-610b-4a61-8c06-1b852a5a75f6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="776f70b9-415b-44d9-912b-a472d35ef8f8" name="dbms_sql$define_column_char" subcategories-loading="none" object-loading="extended" context="dbms_sql$define_column_char" is-trigger-function="0" unique-function-name="dbms_sql$define_column_char" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,integer,anyelement,integer" is-returning-set="f" ret-datatype="void" function-arguments="p_cursor_id integer, p_column_pos integer, p_column_var anyelement, p_col_size integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304456" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer, p_column_pos integer, p_column_var anyelement, p_col_size integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$define_column_char(p_cursor_id integer, p_column_pos integer, p_column_var anyelement, p_col_size integer)" comment="The procedure defines a fixed-length CHAR column to be selected from the given cursor, used only with SELECT statements. The column being defined is identified by its relative position in the SELECT list of the statement in the given cursor.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
    v_defcols_data JSONB;
    v_is_fixed SMALLINT := 1;
    v_current_user_oid BIGINT;
    v_defcol_base_t TEXT := 'TEXT';
BEGIN
    -- Checking that cursor is opened
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    END IF;

    -- Obtaining current user OID
    v_current_user_oid := aws_oracle_ext.get_user_oid_by_name(current_user);

    -- Getting cursor metadata (JSON) object
    v_cur_metadata := nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id), TRUE), '');

    /* Checking that effective user OID (current_user) of the caller on this cursor is the same
       as that of the caller of the most recent parse operation on this cursor.
       Actual for cursors opened with security level 2 */
    IF ((v_cur_metadata ->> 'security_level')::SMALLINT = 2 AND
        (v_cur_metadata ->> 'parse_user_oid')::BIGINT != v_current_user_oid)
    THEN
        RAISE invalid_role_specification;
    END IF;

    -- Column position must be within the range 1..cols_count
    IF (p_column_pos NOT BETWEEN 1 AND (v_cur_metadata ->> 'cols_count')::SMALLINT) THEN
        RAISE check_violation;
    END IF;

    BEGIN
        -- Saving defined columns data into temp table
        INSERT INTO dbms_sql$define_column (cursor_id,
                                            column_pos,
                                            data_type,
                                            base_type,
                                            col_size,
                                            is_fixed)
             VALUES (p_cursor_id,
                     p_column_pos,
                     v_defcol_base_t,
                     v_defcol_base_t,
                     p_col_size,
                     v_is_fixed)
        ON CONFLICT (cursor_id, column_pos)
        DO UPDATE SET data_type = v_defcol_base_t,
                      base_type = v_defcol_base_t,
                      col_size = p_col_size,
                      is_fixed = v_is_fixed;
    EXCEPTION
        WHEN insufficient_privilege THEN
            -- Effective userid changed
            RAISE invalid_cursor_state;
    END;

    -- Serializing defined columns data into JSON object
    SELECT jsonb_object_agg(concat('col_', defcol_data.column_pos),
                            defcol_data.column_data)
      INTO v_defcols_data
      FROM (SELECT defcol3.column_pos,
                   (SELECT to_jsonb(defcol2.*)
                      FROM (SELECT defcol1.data_type,
                                   defcol1.base_type,
                                   defcol1.col_size,
                                   defcol1.is_fixed
                              FROM dbms_sql$define_column AS defcol1
                             WHERE defcol1.cursor_id = defcol3.cursor_id
                               AND defcol1.column_pos = defcol3.column_pos
                           ) AS defcol2
                   ) AS column_data
              FROM dbms_sql$define_column AS defcol3
             WHERE defcol3.cursor_id = p_cursor_id
           ) AS defcol_data;

    -- Setting "defcols_data" (JSON) cursor property
    v_cur_metadata := jsonb_set(v_cur_metadata, '{defcols_data}', v_defcols_data);

    -- Saving cursor metadata (JSON) object
    PERFORM set_config(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id),
                       v_cur_metadata::TEXT,
                       FALSE);
EXCEPTION
    -- Cursor is not opened or does not exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := 'DBMS_SQL access denied.',
                    DETAIL := 'DBMS_SQL access was denied due to security concerns.',
                    HINT := '-29471';

    -- Column position lies outside of range 1..cols_count
    WHEN check_violation THEN
        RAISE USING MESSAGE := 'Column not in select list.',
                    DETAIL := 'Reference to a column not listed in the SELECT clause.',
                    HINT := '-1007';

    -- Effective userid (OID) changed since cursor parse
    WHEN invalid_role_specification THEN
        RAISE USING MESSAGE := 'Effective userid is not the same as when cursor was parsed.',
                    DETAIL := 'The effective userid on this call to DBMS_SQL is not the same as that at the time the cursor was parsed.',
                    HINT := '-29470';
END;
]]></complex-attribute>
                        <category _I_D="3a5d2133-16c0-4c0c-b6b1-b4e2f2f6361b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bc4a3955-9c9c-479b-a82c-98be4bd00e1e" name="dbms_sql$define_column_long" subcategories-loading="none" object-loading="extended" context="dbms_sql$define_column_long" is-trigger-function="0" unique-function-name="dbms_sql$define_column_long" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,integer" is-returning-set="f" ret-datatype="void" function-arguments="p_cursor_id integer, p_column_pos integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304457" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer, p_column_pos integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$define_column_long(p_cursor_id integer, p_column_pos integer)" comment="The procedure defines a TEXT column to be selected from the given cursor, used only with SELECT statements. The column being defined is identified by its relative position in the SELECT list of the statement in the given cursor.">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    PERFORM aws_oracle_ext.dbms_sql$define_column(p_cursor_id,
                                                  p_column_pos,
                                                  ''::TEXT);
END;
]]></complex-attribute>
                        <category _I_D="0ffcae5c-9c00-4d71-ac02-773538f0d06c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="21a477e2-d918-4370-a344-c8575c5f01e1" name="dbms_sql$execute" subcategories-loading="none" object-loading="extended" context="dbms_sql$execute" is-trigger-function="0" unique-function-name="dbms_sql$execute" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="numeric" function-arguments="p_cursor_id integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304461" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$execute(p_cursor_id integer)" comment="The function executes a statement associated with a given cursor and returns the number of rows processed (for INSERT, UPDATE, DELETE statements).">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
    v_curcols_data JSONB;
    v_colscount_block TEXT;
    v_colstype_block TEXT;
    v_prepdynsql_block TEXT;
    v_sql_statement TEXT;
    v_cols_count SMALLINT;
    v_cases_list TEXT;
    v_rows_count INTEGER;
    v_vars_sync_sql TEXT;
    v_col_aliases1 TEXT;
    v_col_aliases2 TEXT;
    v_coldtype_cases TEXT;
    v_into_clause TEXT;
    v_bind_var RECORD;
    v_bindvar_val TEXT;
    v_bindvar_col TEXT;
    v_bind_varstr TEXT;
    v_datatypes_rec RECORD;
    v_err_message TEXT;
    v_err_stack TEXT;
    v_defcols_hash TEXT;
    v_sql_cmd_type TEXT;
    v_sql_function_code SMALLINT;
    v_colstype_table_name TEXT;
    v_current_user_oid BIGINT;
    v_debug_mode BOOLEAN := 0; -- {1:ON, 0:OFF}. If set to "ON", engine logs all dynamically generated scripts into `dbms_sql$cursor` table
BEGIN
    -- Getting cursor metadata (JSON) object
    v_cur_metadata := nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id), TRUE), '');

    /* If cursor was transformed from a REFCURSOR
       than it could not be executed */
    IF ((v_cur_metadata ->> 'from_refcursor')::BOOLEAN) THEN
        RAISE invalid_cursor_definition;
    -- Checking that cursor is opened (exit if it is not)
    ELSIF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    END IF;

    -- Obtaining current user OID
    v_current_user_oid := aws_oracle_ext.get_user_oid_by_name(current_user);

    /* Checking that effective user OID (current_user) of the caller on this cursor is the same
       as that of the caller of the most recent parse operation on this cursor.
       Actual for cursors opened with security level 1 and 2 */
    IF ((v_cur_metadata ->> 'security_level')::SMALLINT IN (1, 2) AND
        (v_cur_metadata ->> 'parse_user_oid')::BIGINT != v_current_user_oid)
    THEN
        RAISE invalid_role_specification;
    END IF;

    -- Getting dynamic SQL function code from cursor metadata (JSON)
    v_sql_function_code := (v_cur_metadata ->> 'sql_func_code');

    -- Determining SQL command type from cursor metadata (JSON)
    v_sql_cmd_type := (v_cur_metadata ->> 'sql_cmd_type');

    BEGIN
        -- Getting SQL-PL/pgSQL statement by cursor id
        SELECT rtrim(sql_statement, ';')
          INTO v_sql_statement
          FROM dbms_sql$cursor
         WHERE cursor_id = p_cursor_id;
    EXCEPTION
        WHEN insufficient_privilege THEN
            -- Effective userid changed
            RAISE invalid_cursor_state;
    END;

    /* Associated SQL statement (PL/pgSQL blobk)
       should not be empty (NULL) or invalid (not recognized) */
    IF (coalesce(v_sql_statement, '') = '' OR
        v_sql_cmd_type IS NULL)
    THEN -- ORA-01003: no statement parsed
        RAISE null_value_not_allowed;
    END IF;

    -- Conditional execution by SQL command type
    IF (v_sql_cmd_type = 'DML')
    THEN
        /* Wrapper to resolve an issue with SELECT-INTO statement,
           where INTO clause supplied at the end of the statement string */
        IF (v_sql_statement ~* '^SELECT(.)*FROM(.)*INTO\s*([\$\:][[:alnum:]_]+(,\s*)?)+\s*$' AND
            v_sql_function_code NOT IN (3, 5, 9)) -- INSERT, UPDATE, DELETE
        THEN
            -- Extracting "INTO" clause (and related "$1, $2, $n" markers) from the end of the statement string
            v_into_clause := aws_oracle_ext.regexp_substr(v_sql_statement, '(\s*INTO\s*([\$\:][[:alnum:]_]+(,\s*)?)+)\s*$', 1, 1, 'i');

            -- Removing "INTO" clause from the end of the statement string
            v_sql_statement := replace(v_sql_statement, v_into_clause, '');

            -- Replacing "INTO" with "INTO STRICT" in order to emulate NO_DATA_FOUND & TOO_MANY_ROWS logic
            v_into_clause := regexp_replace(v_into_clause, 'INTO', 'INTO STRICT', 'gi');

            -- Inserting "INTO" clause (and related "$1, $2, $n" markers) before "FROM" clause
            v_sql_statement := overlay(v_sql_statement placing concat(' ', ltrim(v_into_clause))
                                                          from position('FROM' in upper(v_sql_statement)) - 2
                                                           for 1);
        ELSIF (v_sql_statement ~* 'RETURNING' AND
               v_sql_function_code IN (3, 5, 9)) -- INSERT, UPDATE, DELETE
        THEN
            -- Replacing "RETURNING col_name; INTO" with "RETURNING col_name INTO"
            v_sql_statement := regexp_replace(v_sql_statement, '(?:;)\s*INTO', ' INTO', 'gi');
        END IF;

        /* Binding local variables (instead of placeholders)
           associated with dynamic SQL query (PL/pgSQL block) */
        FOR v_bind_var IN
        (SELECT *
           FROM dbms_sql$bind_variable
          WHERE cursor_id = p_cursor_id
          ORDER BY var_pos)
        LOOP
            CASE v_bind_var.base_type
               WHEN 'TEXT' THEN
                   v_bindvar_col := 'chr_val';
                   v_bindvar_val := CASE
                                       WHEN v_bind_var.chr_val IS NOT NULL
                                       THEN quote_literal(CASE v_bind_var.data_type
                                                             WHEN 'CHARACTER' THEN rpad(v_bind_var.chr_val, v_bind_var.value_size, ' ')
                                                             ELSE substring(v_bind_var.chr_val, 1, v_bind_var.value_size)
                                                          END)
                                       ELSE NULL
                                    END;
               WHEN 'NUMERIC' THEN
                   v_bindvar_col := 'num_val';
                   v_bindvar_val := CASE
                                       WHEN v_bind_var.num_val IS NOT NULL
                                       THEN v_bind_var.num_val::TEXT
                                       ELSE NULL
                                    END;
               WHEN 'DOUBLE PRECISION' THEN
                   v_bindvar_col := 'dprec_val';
                   v_bindvar_val := CASE
                                       WHEN v_bind_var.dprec_val IS NOT NULL
                                       THEN v_bind_var.dprec_val::TEXT
                                       ELSE NULL
                                    END;
               WHEN 'MONEY' THEN
                   v_bindvar_col := 'money_val';
                   v_bindvar_val := CASE
                                       WHEN v_bind_var.money_val IS NOT NULL
                                       THEN format('MONEY ''%s''', v_bind_var.money_val::TEXT)
                                       ELSE NULL
                                    END;
               WHEN 'TIMESTAMP WITHOUT TIME ZONE' THEN
                   v_bindvar_col := 'tstamp_val';
                   v_bindvar_val := CASE
                                       WHEN v_bind_var.tstamp_val IS NOT NULL
                                       THEN CASE v_bind_var.data_type
                                               WHEN 'DATE' THEN format('DATE ''%s''',
                                                                       to_char(v_bind_var.tstamp_val, 'yyyy-mm-dd'))
                                               WHEN 'TIME WITHOUT TIME ZONE' THEN format('TIME ''%s''',
                                                                                         to_char(v_bind_var.tstamp_val, 'hh24:mi:ss.us'))
                                               ELSE format('TIMESTAMP ''%s''',
                                                           to_char(v_bind_var.tstamp_val, 'yyyy-mm-dd hh24:mi:ss.us'))
                                            END
                                       ELSE NULL
                                    END;
               WHEN 'TIMESTAMP WITH TIME ZONE' THEN
                   v_bindvar_col := 'tstamptz_val';
                   v_bindvar_val := CASE
                                       WHEN v_bind_var.tstamptz_val IS NOT NULL
                                       THEN format('TIMESTAMPTZ ''%s''', to_char(v_bind_var.tstamptz_val, 'yyyy-mm-dd hh24:mi:ss.usOF'))
                                       ELSE NULL
                                    END;
               WHEN 'TIME WITH TIME ZONE' THEN
                   v_bindvar_col := 'timetz_val';
                   v_bindvar_val := CASE
                                       WHEN v_bind_var.timetz_val IS NOT NULL
                                       THEN format('TIMETZ ''%s''', v_bind_var.timetz_val::TEXT)
                                       ELSE NULL
                                    END;
               WHEN 'INTERVAL' THEN
                   v_bindvar_col := 'interval_val';
                   v_bindvar_val := CASE
                                       WHEN v_bind_var.interval_val IS NOT NULL
                                       THEN format('INTERVAL ''%s''', v_bind_var.interval_val::TEXT)
                                       ELSE NULL
                                    END;
               WHEN 'BOOLEAN' THEN
                   v_bindvar_col := 'bool_val';
                   v_bindvar_val := CASE
                                       WHEN v_bind_var.bool_val IS NOT NULL
                                       THEN upper(v_bind_var.bool_val::TEXT)
                                       ELSE NULL
                                    END;
               WHEN 'XML' THEN
                   v_bindvar_col := 'xml_val';
                   v_bindvar_val := CASE
                                       WHEN v_bind_var.xml_val IS NOT NULL
                                       THEN quote_literal(v_bind_var.xml_val)
                                       ELSE NULL
                                    END;
               WHEN 'BYTEA' THEN
                   v_bindvar_col := 'bin_val';
                   v_bindvar_val := CASE
                                       WHEN v_bind_var.bin_val IS NOT NULL
                                       THEN format('decode(%s, ''hex'')',
                                                   quote_literal(encode(v_bind_var.bin_val, 'hex')))
                                       ELSE NULL
                                    END;
            ELSE CONTINUE;
            END CASE;

            -- Constructing dynamic block variables declaration
            v_bind_varstr := concat_ws(chr(10),
                                       v_bind_varstr,
                                       format('    v_%s %s%s', -- Variable declaration mask
                                       v_bind_var.var_name, -- Variable name
                                       CASE v_bind_var.data_type
                                          WHEN 'CHARACTER' THEN 'CHARACTER VARYING'
                                          ELSE v_bind_var.data_type
                                       END, -- Variable data type
                                       CASE -- Variable default value
                                          WHEN v_bindvar_val IS NULL THEN ';'
                                          ELSE format(' := %s;', v_bindvar_val)
                                       END));

            -- Replacing all bind ":var_label" labels with proper `outer_block.v_var_name` vars
            v_sql_statement := regexp_replace(v_sql_statement,
                                              ':' || v_bind_var.var_name,
                                              'outer_block.v_' || v_bind_var.var_name,
                                              'gi');

            /* Replacing all bind "$1[|,;-_]$2[|,;-_]$n" markers
               with the corresponding `outer_block.v_var_name` variable */
            IF (v_bind_var.var_label IS NOT NULL) THEN
                v_sql_statement := regexp_replace(v_sql_statement,
                                                  replace(concat('(', v_bind_var.var_label, ')(?!\d)'), '$', '\$'),
                                                  'outer_block.v_' || v_bind_var.var_name,
                                                  'gi');
            END IF;

            -- Generating bind variable (stored in `dbms_sql$bind_variable`) update scripts
            v_vars_sync_sql := concat_ws(chr(10),
                                         v_vars_sync_sql,
                                         '',
                                         format('-- Updating "%s" bind variable value', v_bind_var.var_name),
                                         'UPDATE dbms_sql$bind_variable',
                                         format('   SET %s = %s', v_bindvar_col,
                                                CASE
                                                   WHEN v_bind_var.data_type = 'TIME WITHOUT TIME ZONE'
                                                   THEN format('to_char(outer_block.v_%s, ''2001-01-01 hh24:mi:ss.us'')::TIMESTAMP',
                                                               v_bind_var.var_name)
                                                   ELSE 'outer_block.v_' || v_bind_var.var_name
                                                END),
                                         ' WHERE cursor_id = outer_block.v_cursor_id',
                                         format('   AND var_name = %s;', quote_literal(v_bind_var.var_name)));
        END LOOP;

        -- Getting dynamic SQL statement expected columns count
        v_cols_count := (v_cur_metadata ->> 'cols_count')::INTEGER;

        IF (v_cols_count IS NULL AND -- Columns count variable is NULL
            (v_cur_metadata ->> 'colinfo_refresh')::SMALLINT = 1) -- Columns info needs to be refreshed
        THEN
            IF (v_sql_function_code = 4) THEN -- SELECT function code
                -- Determining the number of columns in dynamic SQL statement
                v_colscount_block :=
                    concat_ws(chr(10),
                        'DO $dbms_sql$',
                        '<<outer_block>>',
                        'DECLARE',
                        '    v_cur_metadata JSONB;',
                        '    v_dynsql_row RECORD;',
                        '    v_cols_count SMALLINT;',
                        format('    v_cursor_id INTEGER := %s;', p_cursor_id),
                        v_bind_varstr, -- Cursor vars declaration
                        'BEGIN',
                        '-- Obtaining dynamic query structure',
                        'SELECT src.*',
                        '  INTO outer_block.v_dynsql_row',
                        '  FROM (',
                        '--------------- Dynamic SQL statement ---------------',
                        v_sql_statement,
                        '--------------- Dynamic SQL statement ---------------',
                        '       ) AS src',
                        ' WHERE 1 = 2;',
                        '',
                        '-- Calculating dymamic sql statement columns count',
                        'SELECT COUNT(1)',
                        '  INTO outer_block.v_cols_count',
                        '  FROM json_object_keys(row_to_json(outer_block.v_dynsql_row));',
                        '',
                        '-- Getting cursor metadata (JSON) object',
                        'outer_block.v_cur_metadata :=',
                        '    nullif(current_setting(format(''sct$dbms_sql.cursor_id_%s_metadata'',',
                        '                                  outer_block.v_cursor_id), TRUE), '''');',
                        '',
                        'outer_block.v_cur_metadata := -- Setting "cols_count" (JSON) cursor property',
                        '    jsonb_set(outer_block.v_cur_metadata, ''{cols_count}'', to_jsonb(outer_block.v_cols_count));',
                        '',
                        '-- Saving cursor metadata (JSON) object',
                        'PERFORM set_config(format(''sct$dbms_sql.cursor_id_%s_metadata'', outer_block.v_cursor_id),',
                        '                   outer_block.v_cur_metadata::TEXT, -- cursor metadata object',
                        '                   FALSE);',
                        'END; $dbms_sql$');

                EXECUTE v_colscount_block; -- Will be saved into `dbms_sql$cursor` ("colscount_block" column) if "v_debug_mode" set to "ON" (1)

                -- Getting updated cursor metadata (JSON) object
                v_cur_metadata := nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id), TRUE), '');

                -- Getting dynamic SQL statement updated columns count
                v_cols_count := (v_cur_metadata ->> 'cols_count')::INTEGER;
            ELSE v_cols_count := 0;
            END IF;
        END IF;

        /* Dynsql execution SELECT (v_cols_count > 0, results in rowset)
           or PL/pgSQL anonymous block (v_cols_count = 0 or is NULL) */
        IF (v_cols_count > 0) THEN
            -- Generating list of consecutive column aliases (col_1, col_2, ...)
            SELECT string_agg(concat(repeat(' ', 10), 'col_', colnum),
                              concat(',', chr(10))),
                   string_agg(concat(repeat(' ', 28), 'col_', colnum),
                              concat(',', chr(10)))
              INTO v_col_aliases1,
                   v_col_aliases2
              FROM generate_series(1, v_cols_count) AS colnum;

            -- Refresh cursor columns data type info only if SQL statement was changed
            IF ((v_cur_metadata ->> 'colinfo_refresh')::SMALLINT = 1) THEN
                -- Generating unique temp table name
                v_colstype_table_name :=
                    format('dynsql_colstype_%s',
                           lower(substring((SELECT string_agg(md5(random()::TEXT), '')
                                              FROM generate_series(1, ceil(14 / 32.)::INTEGER)
                                           ), 1, 14)));

                -- Determining data type of columns in dynamic SQL statement
                v_colstype_block :=
                    concat_ws(chr(10),
                        'DO $dbms_sql$',
                        '<<outer_block>>',
                        'DECLARE',
                        format('    v_cursor_id INTEGER := %s;', p_cursor_id),
                        v_bind_varstr, -- Cursor vars declaration
                        'BEGIN',
                        '-- Deleting previous dynamic sql execution results',
                        'DELETE FROM dbms_sql$recordset',
                        '      WHERE cursor_id = outer_block.v_cursor_id;',
                        '',
                        '-- Deleting previous dynamic sql columns info',
                        'DELETE FROM dbms_sql$cursor_column',
                        '      WHERE cursor_id = outer_block.v_cursor_id;',
                        '',
                        '-- Creating temp table in order to reflect the columns structure',
                        'BEGIN',
                        format('CREATE TEMP TABLE %s', v_colstype_table_name),
                        'WITH (OIDS = FALSE)',
                        'ON COMMIT DROP',
                        'AS',
                        'SELECT src.* FROM (',
                        '--------------- Dynamic SQL statement ---------------',
                        v_sql_statement, -- Dynamic SQL statement where placeholders replaced with v_block vars
                        '--------------- Dynamic SQL statement ---------------',
                        ') AS src',
                        'WITH NO DATA;', -- Obtaining only dynamic query structure
                        '',
                        '/* Using column aliases instead of names',
                        '   in case if any duplicate columns found */',
                        'EXCEPTION',
                        'WHEN duplicate_column THEN',
                        '',
                        format('CREATE TEMP TABLE %s', v_colstype_table_name),
                        'WITH (OIDS = FALSE)',
                        'ON COMMIT DROP',
                        'AS',
                        'SELECT src.* FROM (',
                        '--------------- Dynamic SQL statement ---------------',
                        v_sql_statement, -- Dynamic SQL statement where placeholders replaced with v_block vars
                        '--------------- Dynamic SQL statement ---------------',
                        format(') AS src (%s)', trim(v_col_aliases1)), -- Consecutive column aliases list
                        'WITH NO DATA;', -- Get only dynamic query structure
                        'END;',
                        '',
                        concat_ws(chr(10), '-- Saving detailed column data (name, type, precision, etc.)',
                        'INSERT INTO dbms_sql$cursor_column (cursor_id,',
                        '                                    column_pos,',
                        '                                    col_name,',
                        '                                    data_type,',
                        '                                    base_type,',
                        '                                    is_nullable,',
                        '                                    chr_max_len,',
                        '                                    chr_byte_len,',
                        '                                    num_precision,',
                        '                                    num_scale,',
                        '                                    tstamp_precision,',
                        '                                    interval_type,',
                        '                                    interval_precision)',
                        'SELECT outer_block.v_cursor_id,',
                        '       ordinal_position,',
                        '       column_name,',
                        '       upper(data_type),',
                        '       aws_oracle_ext.get_base_type_by_dtype(upper(data_type)),',
                        '       CASE is_nullable',
                        '          WHEN ''YES'' THEN TRUE',
                        '          ELSE FALSE',
                        '       END,',
                        '       character_maximum_length,',
                        '       character_octet_length,',
                        '       numeric_precision,',
                        '       numeric_scale,',
                        '       datetime_precision,',
                        '       interval_type,',
                        '       interval_precision',
                        '  FROM information_schema.columns'),
                        format(' WHERE table_name = ''%s''', v_colstype_table_name),
                        ' ORDER BY ordinal_position ASC;',
                        '',
                        '-- Dropping temp table since its not needed anymore',
                        format('DROP TABLE %s;', v_colstype_table_name),
                        'END; $dbms_sql$');

                EXECUTE v_colstype_block; -- Will be saved into `dbms_sql$cursor` ("colstype_block" column) if "v_debug_mode" set to "ON" (1)

                -- Serializing dynamic statement columns data into JSON object
                SELECT jsonb_object_agg(concat('col_', curcol_data.column_pos),
                                        curcol_data.column_data)
                  INTO v_curcols_data
                  FROM (SELECT curcol3.column_pos,
                               (SELECT to_jsonb(curcol2.*)
                                  FROM (SELECT curcol1.data_type,
                                               curcol1.base_type,
                                               curcol1.chr_max_len,
                                               curcol1.chr_byte_len
                                          FROM dbms_sql$cursor_column AS curcol1
                                         WHERE curcol1.cursor_id = curcol3.cursor_id
                                           AND curcol1.column_pos = curcol3.column_pos
                                       ) AS curcol2
                               ) AS column_data
                          FROM dbms_sql$cursor_column AS curcol3
                         WHERE curcol3.cursor_id = p_cursor_id
                       ) AS curcol_data;

                -- Setting "curcols_data" (JSON) cursor property
                v_cur_metadata := jsonb_set(v_cur_metadata, '{curcols_data}', v_curcols_data);

                -- Setting "colinfo_refresh" (JSON) cursor property
                v_cur_metadata := jsonb_set(v_cur_metadata, '{colinfo_refresh}', to_jsonb(0));
            END IF;

            -- Getting defined columns data hash
            v_defcols_hash := md5(v_cur_metadata ->> 'defcols_data');

            IF (v_defcols_hash IS NOT NULL AND
                v_defcols_hash != coalesce(v_cur_metadata ->> 'defcols_hash', ''))
            THEN
                -- Setting "defcols_hash" (JSON) cursor property
                v_cur_metadata := jsonb_set(v_cur_metadata, '{defcols_hash}', to_jsonb(v_defcols_hash));

                /* Checking for correspondence between actual and declared column base data types.
                   Oracle ORA-00932: INCONSISTENT_TYPE error is raised if the type of the given OUT parameter
                   value is different from the actual type of the value.

                   This type was given when the column was defined by calling `dbms_sql$define_column` procedure.
                */
                FOR v_datatypes_rec IN
                (SELECT curcol.column_pos,
                        curcol.data_type AS cur_data_type,
                        curcol.base_type AS cur_base_type,
                        defcol.data_type AS def_data_type,
                        defcol.base_type AS def_base_type
                   FROM dbms_sql$cursor_column AS curcol
                        INNER JOIN dbms_sql$define_column AS defcol ON (defcol.cursor_id = curcol.cursor_id AND
                                                                        defcol.column_pos = curcol.column_pos AND
                                                                        (defcol.base_type != curcol.base_type OR
                                                                         (substring(curcol.data_type, 1, 5) = 'TIME ' AND
                                                                          defcol.base_type = 'TIMESTAMP WITHOUT TIME ZONE') OR
                                                                         (substring(defcol.data_type, 1, 5) = 'TIME ' AND
                                                                          curcol.base_type = 'TIMESTAMP WITHOUT TIME ZONE')) AND
                                                                        coalesce(defcol.is_fixed, 0) != 1)
                  WHERE curcol.cursor_id = p_cursor_id)
                LOOP
                    /* Next data types are not implicitly convertible:
                       - TIMESTAMP WITHOUT TIME ZONE to TIMESTAMP WITH TIME ZONE (and vice versa)
                       - TIME WITHOUT TIME ZONE to TIME WITH TIME ZONE (and vice versa)
                       - NUMERIC to DOUBLE PRECISION (and vice versa)

                       Thus, they must not generate an INCONSISTENT_TYPE error since they could be
                       explicitly casted to each other with `dbms_sql$column_value` function
                    */
                    CONTINUE WHEN substring(v_datatypes_rec.cur_data_type, 1, 14) = substring(v_datatypes_rec.def_data_type, 1, 14) OR -- TIMESTAMPs
                                  substring(v_datatypes_rec.cur_data_type, 1, 5) = substring(v_datatypes_rec.def_data_type, 1, 5) OR -- TIMEs
                                  (v_datatypes_rec.cur_base_type IN ('NUMERIC',
                                                                     'DOUBLE PRECISION') AND
                                   v_datatypes_rec.def_base_type IN ('NUMERIC',
                                                                     'DOUBLE PRECISION')) OR
                                  ((v_datatypes_rec.cur_data_type = 'DATE' AND
                                    v_datatypes_rec.def_base_type = 'TIMESTAMP WITH TIME ZONE') OR
                                   (v_datatypes_rec.def_data_type = 'DATE' AND
                                    v_datatypes_rec.cur_base_type = 'TIMESTAMP WITH TIME ZONE'));

                    -- Inconsistent datatypes (Oracle error 'ORA-00932')
                    RAISE datatype_mismatch;
                END LOOP;
            END IF;

            /* Constructing CASEs to distribute dynamic query execution results
               through INSERT-SELECT into `dbms_sql$recordset` table */
            WITH dtypes_order AS
            (SELECT 'TEXT' AS base_type, 1 AS dtype_order
              UNION ALL
             SELECT 'NUMERIC', 2
              UNION ALL
             SELECT 'DOUBLE PRECISION', 3
              UNION ALL
             SELECT 'MONEY', 4
              UNION ALL
             SELECT 'TIMESTAMP WITHOUT TIME ZONE', 5
              UNION ALL
             SELECT 'TIMESTAMP WITH TIME ZONE', 6
              UNION ALL
             SELECT 'TIME WITH TIME ZONE', 7
              UNION ALL
             SELECT 'INTERVAL', 8
              UNION ALL
             SELECT 'BOOLEAN', 9
              UNION ALL
             SELECT 'XML', 10
              UNION ALL
             SELECT 'BYTEA', 11),
            -- Attaching current columns data
            curcols_data AS
            (SELECT base_type,
                    array_agg(concat_ws(':', column_pos, data_type)) AS colpos_list
               FROM dbms_sql$cursor_column
              WHERE cursor_id = p_cursor_id
              GROUP BY base_type)

            SELECT string_agg(
                   coalesce('       CASE colpos' || chr(10) ||
                   (SELECT string_agg(format('          WHEN %s THEN %s',
                                             colpos,
                                             CASE dtype
                                                WHEN 'TIME WITHOUT TIME ZONE' -- List of types that require special conversion
                                                THEN format('to_char(col_%s, ''2001-01-01 hh24:mi:ss.us'')::TIMESTAMP', colpos)
                                                ELSE 'col_' || colpos
                                             END),
                                      chr(10))
                      FROM (SELECT substring(colpos, '^(\d+):?') AS colpos,
                                   substring(colpos, ':(.+)$') AS dtype
                              FROM unnest(cdt.colpos_list) AS colpos) AS cols) || chr(10) || '       END',
                                       '       NULL'),
                   ',' || chr(10) ORDER BY dto.dtype_order ASC)
              INTO v_coldtype_cases
              FROM dtypes_order dto
                   LEFT JOIN curcols_data cdt ON (cdt.base_type = dto.base_type);

            /* Constructing INSERT-SELECT (into `dbms_sql$recordset` table),
               required to distribute dynamic query execution results */
            v_sql_statement :=
                concat_ws(chr(10),
                    '-- Deleting previous dynamic SQL execution results',
                    'DELETE FROM dbms_sql$recordset',
                    '      WHERE cursor_id = outer_block.v_cursor_id;',
                    '',
                    '/* Execution of dynamic SQL statement and inserting its',
                    '   resulting data into temp table dbms_sql$recordset */',
                    'INSERT INTO dbms_sql$recordset (cursor_id,',
                    '                                rownum,',
                    '                                column_pos,',
                    '                                chr_val,',
                    '                                num_val,',
                    '                                dprec_val,',
                    '                                money_val,',
                    '                                tstamp_val,',
                    '                                tstamptz_val,',
                    '                                timetz_val,',
                    '                                interval_val,',
                    '                                bool_val,',
                    '                                xml_val,',
                    '                                bin_val)',
                    'SELECT outer_block.v_cursor_id,',
                    '       rownum,',
                    '       colpos,',
                    v_coldtype_cases, -- Coltypes distribution CASEs
                    '  FROM (SELECT row_number() over (order by 1) AS rownum,',
                    '               generate_series(1, outer_block.v_cols_count) AS colpos,',
                    '               dynsql.*',
                    '          FROM (',
                    '--------------- Dynamic SQL statement ---------------',
                    v_sql_statement, -- Dynamic SQL statement
                    '--------------- Dynamic SQL statement ---------------',
                    format('               ) AS dynsql (%s)', trim(v_col_aliases2)), -- List of consecutive column aliases
                    '       ) AS dynsql2;');
        END IF;

        -- Removing "$$" and "LANGUAGE" markers in order to embed block into <<outer_block>>
        IF (v_sql_function_code = 34) -- PL/SQL (PL/pgSQL) block function code
        THEN
            -- Removing "$$" and "LANGUAGE" markers from the start of the statement
            v_sql_statement := regexp_replace(v_sql_statement,
                '(^\s*DO(:?\s+LANGUAGE\s+[[:alnum:]]+\s+)?\s*\$(\w*)?\$\s*(:?<<.+>>)?\s*)',
                concat(substring(v_sql_statement, '<<.+>>'), chr(10)), 'gi');

            -- Removing "$$" and "LANGUAGE" markers from the end of the statement
            v_sql_statement := regexp_replace(v_sql_statement,
                '(END\s*(;)?\s*\$(\w*)?\$\s*(:?\s+LANGUAGE\s+[[:alnum:]]+)?\s*$)', 'END;', 'gi');

            -- Removing any unnecessary blank strings (spaces) from the beginning and the end of SQL statement
            v_sql_statement := regexp_replace(v_sql_statement, '^\s*(?=\S*)|(?<=\S*)\s*$', '', 'gi');
        END IF;

        -- Saving cursor metadata (JSON) object
        PERFORM set_config(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id),
                           v_cur_metadata::TEXT, -- cursor metadata object
                           FALSE);

        IF (v_sql_function_code = 27) -- EXPLAIN
        THEN
            -- Creating special `explain_plan` bind variable to store query EXPLAIN plan
            PERFORM aws_oracle_ext.dbms_sql$bind_variable(p_cursor_id, 'explain_plan', ''::TEXT,
                                                          p_check_var_exists => FALSE);

            -- Dynamic EXPLAIN plan execution wrapper
            v_prepdynsql_block :=
                concat_ws(chr(10),
                    'DO $dbms_sql$',
                    '<<outer_block>>',
                    'DECLARE',
                    '    v_exp_plan TEXT;',
                    '    v_exp_plan_arr TEXT[];',
                    '    r_explain_plan RECORD;',
                    format('    v_cursor_id INTEGER := %s;', p_cursor_id),
                    v_bind_varstr, -- Cursor vars declaration
                    'BEGIN',
                    'FOR r_explain_plan IN',
                    '----------- Dynamic EXPLAIN plan statement -----------',
                    v_sql_statement, -- Dynamic EXPLAIN statement, placeholders replaced with v_block vars
                    '----------- Dynamic EXPLAIN plan statement -----------',
                    'LOOP',
                    '    v_exp_plan_arr := array_append(v_exp_plan_arr, r_explain_plan."QUERY PLAN");',
                    'END LOOP;',
                    '',
                    '-- Updating "explain_plan" bind variable value',
                    'UPDATE dbms_sql$bind_variable',
                    '   SET chr_val = array_to_string(v_exp_plan_arr, chr(10))',
                    ' WHERE cursor_id = outer_block.v_cursor_id',
                    '   AND var_name = ''explain_plan'';',
                    'END; $dbms_sql$');
        ELSE
            -- Dynamic PL/pgSQL block (or DML with INTO clause) execution wrapper
            v_prepdynsql_block :=
                concat_ws(chr(10),
                    'DO $dbms_sql$',
                    '<<outer_block>>',
                    'DECLARE',
                    '    v_cur_metadata JSONB;',
                    '    v_rows_count INTEGER;',
                    format('    v_cols_count SMALLINT := %s;', v_cols_count),
                    format('    v_cursor_id INTEGER := %s;', p_cursor_id),
                    v_bind_varstr, -- Cursor vars declaration
                    'BEGIN',
                    '------- Dynamic PL/pgSQL block (SQL statement) -------',
                    concat(v_sql_statement, -- Dynamic SQL or PL/pgSQL statement, placeholders replaced with v_block vars
                    CASE 
                       WHEN v_sql_statement !~ ';$' THEN ';'
                    END),
                    '------- Dynamic PL/pgSQL block (SQL statement) -------',
                    '',
                    'GET DIAGNOSTICS outer_block.v_rows_count := ROW_COUNT;', -- Count of rows affected by dynamic query execution
                    '',
                    '-- Getting cursor metadata (JSON) object',
                    'outer_block.v_cur_metadata :=',
                    '    nullif(current_setting(format(''sct$dbms_sql.cursor_id_%s_metadata'',',
                    '                                  outer_block.v_cursor_id), TRUE), '''');',
                    '',
                    '-- Setting "rows_count" (JSON) cursor property',
                    'outer_block.v_cur_metadata :=',
                    '    jsonb_set(outer_block.v_cur_metadata,',
                    '              ''{rows_count}'',',
                    '              CASE outer_block.v_cols_count',
                    '                 WHEN 0 THEN to_jsonb(outer_block.v_rows_count)',
                    '                 ELSE to_jsonb(outer_block.v_rows_count / outer_block.v_cols_count)',
                    '              END);',
                    '',
                    '-- Setting "curr_row" (JSON) cursor property',
                    'outer_block.v_cur_metadata := jsonb_set(outer_block.v_cur_metadata, ''{curr_row}'', JSONB ''null'');',
                    '',
                    '-- Saving cursor metadata (JSON) object',
                    'PERFORM set_config(format(''sct$dbms_sql.cursor_id_%s_metadata'', outer_block.v_cursor_id),',
                    '                   outer_block.v_cur_metadata::TEXT, -- cursor metadata object',
                    '                   FALSE);',
                    v_vars_sync_sql, -- Update `dbms_sql$bind_variable` table with new values for binded vars
                    'END; $dbms_sql$');
        END IF;

        EXECUTE v_prepdynsql_block; -- Will be saved into `dbms_sql$cursor` ("prepdynsql_block" column) if "v_debug_mode" set to "ON" (1)

        /* Logging of all dynamically generated scripts
           into `dbms_sql$cursor` if "v_debug_mode" set to "ON" (1) */
        IF (v_debug_mode) THEN
            UPDATE dbms_sql$cursor
               SET colscount_block = coalesce(v_colscount_block, colscount_block),
                   colstype_block = coalesce(v_colstype_block, colstype_block),
                   prepdynsql_block = v_prepdynsql_block
             WHERE cursor_id = p_cursor_id;
        END IF;
    ELSIF (v_sql_cmd_type = 'SCL')
    THEN -- Skipping DDL, DCL, TCL, SCS
        EXECUTE v_sql_statement;
    END IF;

    -- Setting `last_affected_cursor_id` variable
    PERFORM set_config('sct$dbms_sql.last_affected_cursor_id', p_cursor_id::TEXT, FALSE);

    -- Nulling `last_row_count` variable
    PERFORM set_config('sct$dbms_sql.last_row_count', NULL, FALSE);

    -- Getting updated cursor metadata (JSON) object
    v_cur_metadata := nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id), TRUE), '');

    RETURN coalesce((v_cur_metadata ->> 'rows_count')::NUMERIC, 0);
EXCEPTION
    -- Cursor is not opened or does not exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := 'DBMS_SQL access denied.',
                    DETAIL := 'DBMS_SQL access was denied due to security concerns.',
                    HINT := '-29471';

    -- Trying to execute a REFCURSOR-sourced cursor
    WHEN invalid_cursor_definition THEN
        RAISE USING MESSAGE := 'Invalid cursor.',
                    DETAIL := 'Can not repeatedly execute a REFCURSOR-sourced cursor.',
                    HINT := '-1001';

    -- Associated SQL statement is empty (NULL) or invalid
    WHEN null_value_not_allowed THEN
        RAISE USING MESSAGE := 'No statement parsed.',
                    DETAIL := 'No valid SQL statement associated with DBMS_SQL cursor.',
                    HINT := '-1003';

    -- Effective userid (OID) changed since cursor parse
    WHEN invalid_role_specification THEN
        RAISE USING MESSAGE := 'Effective userid is not the same as when cursor was parsed.',
                    DETAIL := 'The effective userid on this call to DBMS_SQL is not the same as that at the time the cursor was parsed.',
                    HINT := '-29470';

    -- Actual and declared base data types of a column do not match
    WHEN datatype_mismatch THEN
        RAISE USING MESSAGE := format('Inconsistent datatypes: expected %s got %s.',
                                      v_datatypes_rec.def_data_type,
                                      v_datatypes_rec.cur_data_type),
                    DETAIL := format('Actual and declared data types for column in position %s do not match.',
                                     v_datatypes_rec.column_pos),
                    HINT := '-932';

    -- Undefined parameter in dynamic SELECT statement
    WHEN undefined_parameter THEN
        IF (v_sql_function_code = 4) -- SELECT
        THEN
            -- Not all variables bound
            RAISE USING MESSAGE := 'Not all variables bound.',
                        DETAIL := 'SQL statement (PL/pgSQL block) containing bind variables was attempted to execute without all variables bound.',
                        HINT := '-1008';
        ELSE RAISE;
        END IF;

    -- Some syntax error occurred
    WHEN syntax_error THEN
        GET STACKED DIAGNOSTICS
            v_err_message = MESSAGE_TEXT,
            v_err_stack = PG_EXCEPTION_CONTEXT;

        IF ((v_err_message ~* '^syntax error at or near ":|\$\d+"$' OR
             v_err_message ~* '^"\$\d+" is not a known variable$') AND
             v_sql_cmd_type IN ('DML', 'SCL'))
        THEN
            IF (v_sql_cmd_type = 'DML')
            THEN
                -- Not all variables bound
                RAISE USING MESSAGE := 'Not all variables bound.',
                            DETAIL := 'SQL statement (PL/pgSQL block) containing bind variables was attempted to execute without all variables bound.',
                            HINT := '-1008';
            ELSIF (v_sql_cmd_type = 'SCL')
            THEN
                -- Bind variables not allowed for SCL
                RAISE USING MESSAGE := 'Bind variables not allowed for SCL operations.',
                            DETAIL := 'Bind variables are not allowed for session control language operations.',
                            HINT := '-1027';
            END IF;
        ELSIF (v_sql_function_code = 27) -- EXPLAIN
        THEN
            -- Invalid EXPLAIN statement
            RAISE USING MESSAGE := 'EXPLAIN statement is not valid.',
                        DETAIL := 'EXPLAIN statement contains syntax or execution errors.',
                        HINT := 'Correct the statement and try to perform `dbms_sql$execute` procedure again.';
        ELSE
            RAISE USING MESSAGE := 'Syntax error has occured while trying to execute dynamic SQL statement.',
                        DETAIL := concat(v_err_message, '.'),
                        HINT := concat_ws(chr(10), '(Call Stack)', v_err_stack);
        END IF;
END;
]]></complex-attribute>
                        <category _I_D="e3a9d4f8-29a2-492b-a4fc-f68ff7b75aaf" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9da7f093-804c-4694-b624-9510a9d05079" name="dbms_sql$execute_and_fetch" subcategories-loading="none" object-loading="extended" context="dbms_sql$execute_and_fetch" is-trigger-function="0" unique-function-name="dbms_sql$execute_and_fetch" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,boolean" is-returning-set="f" ret-datatype="numeric" function-arguments="p_cursor_id integer, p_exact_match boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304460" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer, p_exact_match boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$execute_and_fetch(p_cursor_id integer, p_exact_match boolean)" comment="This function executes the given cursor and fetches rows. Raise an exception if the number of rows matching the query differs from one.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_rows_count INTEGER;
    v_rows_fetched INTEGER;
BEGIN
    -- Executing a statement associated with the given cursor
    v_rows_count := aws_oracle_ext.dbms_sql$execute(p_cursor_id);

    -- Fetching a row from the given cursor
    v_rows_fetched := aws_oracle_ext.dbms_sql$fetch_rows(p_cursor_id);

    /* Raise an exception if the number of rows actually matching the query differs from 1.
       This behaviour is actual if "p_exact_match" param passed value is TRUE.
       -----------------------------------------------------------------------
       "ORA-01403: no data found" - if `v_rows_count` value is NULL or zero.
       "ORA-01422: exact fetch returns more than requested number of rows" - if `v_rows_count` value is more than one.
    */
    IF (coalesce(p_exact_match, FALSE))
    THEN
        IF (v_rows_count > 1)
        THEN
            -- ORA-01422
            RAISE too_many_rows;
        ELSIF (coalesce(v_rows_count, 0) = 0)
        THEN
            -- ORA-01403
            RAISE no_data_found;
        END IF;
    END IF;

    RETURN v_rows_fetched;
EXCEPTION
    -- Cursor fetch returns more than one row
    WHEN too_many_rows THEN
        RAISE USING MESSAGE := 'Exact fetch returns more than requested number of rows.',
                    DETAIL := 'The number specified in exact fetch is less than the rows returned.',
                    HINT := '-1422';

    -- Fetch from cursor results in zero rows
    WHEN no_data_found THEN
        RAISE USING MESSAGE := 'No data found.',
                    DETAIL := 'Fetch from cursor results in zero rows.',
                    HINT := '-1403';
END;
]]></complex-attribute>
                        <category _I_D="63ec266a-3733-41d6-9bd7-fd6de074c869" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="689a33b5-b70b-44b7-ad13-71dacffeca15" name="dbms_sql$fetch_rows" subcategories-loading="none" object-loading="extended" context="dbms_sql$fetch_rows" is-trigger-function="0" unique-function-name="dbms_sql$fetch_rows" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="numeric" function-arguments="p_cursor_id integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304463" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$fetch_rows(p_cursor_id integer)" comment="This function fetches a row from a given cursor, and returns the number of rows actually fetched.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
    v_curr_row INTEGER;
    v_rows_count INTEGER;
    v_datatypes_rec RECORD;
    v_defcols_hash VARCHAR;
    v_last_row_count INTEGER;
    v_defcols_prevhash VARCHAR;
    v_current_user_oid BIGINT;
    v_rows_fetched INTEGER := 0;
BEGIN
    -- Checking that cursor is opened (exit if it is not)
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    END IF;

    -- Getting cursor metadata (JSON) object
    v_cur_metadata := nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id), TRUE), '');

    -- Obtaining current user OID
    v_current_user_oid := aws_oracle_ext.get_user_oid_by_name(current_user);

    /* Checking that effective user OID (current_user) of the caller on this cursor is the same
       as that of the caller of the most recent parse operation on this cursor.
       Actual for cursors opened with security level 2 */
    IF ((v_cur_metadata ->> 'security_level')::SMALLINT = 2 AND
        (v_cur_metadata ->> 'parse_user_oid')::BIGINT != v_current_user_oid)
    THEN
        RAISE invalid_role_specification;
    END IF;

    /* Additional check and operations if cursor
       was transformed from a REFCURSOR */
    IF ((v_cur_metadata ->> 'from_refcursor')::BOOLEAN) THEN
        -- Getting defined columns data hash
        v_defcols_hash := md5(v_cur_metadata ->> 'defcols_data');

        IF (v_defcols_hash IS NOT NULL AND
            v_defcols_hash != coalesce(v_cur_metadata ->> 'defcols_hash', ''))
        THEN
            -- Setting `defcols_hash` (JSON) cursor property
            v_cur_metadata := jsonb_set(v_cur_metadata, '{defcols_hash}', to_jsonb(v_defcols_hash));

            BEGIN
                /* Checking for correspondence between actual and declared column base data types
                   Oracle ORA-00932: INCONSISTENT_TYPE error is raised if the type of the given OUT parameter value
                   is different from the actual type of the value.
                   This type was the given type when the column was defined by calling `dbms_sql$define_column`.
                */
                FOR v_datatypes_rec IN
                (SELECT curcol.column_pos,
                        curcol.data_type AS cur_data_type,
                        defcol.data_type AS def_data_type
                   FROM dbms_sql$cursor_column AS curcol
                        INNER JOIN dbms_sql$define_column AS defcol ON (defcol.cursor_id = curcol.cursor_id AND
                                                                        defcol.column_pos = curcol.column_pos AND
                                                                        (defcol.base_type != curcol.base_type OR
                                                                         defcol.data_type IN ('TIMESTAMP WITHOUT TIME ZONE',
                                                                                              'TIMESTAMP WITH TIME ZONE') AND
                                                                         curcol.data_type IN ('TIME WITHOUT TIME ZONE',
                                                                                              'TIME WITH TIME ZONE')) AND
                                                                        coalesce(defcol.is_fixed, 0) != 1)
                  WHERE curcol.cursor_id = p_cursor_id)
                LOOP
                    -- Data types TIMESTAMP WITHOUT TIME ZONE and TIMESTAMP WITH TIME ZONE are interconvertible, thus they should not generate an error
                    CONTINUE WHEN substring(v_datatypes_rec.cur_data_type, 1, 14) = substring(v_datatypes_rec.def_data_type, 1, 14);

                    RAISE datatype_mismatch;
                END LOOP;
            EXCEPTION
                WHEN insufficient_privilege THEN
                    -- Effective userid changed
                    RAISE invalid_cursor_state;
            END;
        END IF;

        -- Getting `last_row_count` variable value
        v_last_row_count := nullif(current_setting('sct$dbms_sql.last_row_count', TRUE), '');

        -- Setting `last_row_count` variable
        PERFORM set_config('sct$dbms_sql.last_row_count', (v_last_row_count + 1)::TEXT, FALSE);
    END IF;

    -- Perform fetching while there are rows to fetch
    IF (coalesce((v_cur_metadata ->> 'curr_row')::INTEGER, 0) <= (v_cur_metadata ->> 'rows_count')::INTEGER)
    THEN
        -- Fetch: 1 {curr_row < rows_count}, 0 {curr_row = rows_count}
        v_rows_fetched := (coalesce((v_cur_metadata ->> 'curr_row')::INTEGER, 0) < (v_cur_metadata ->> 'rows_count')::INTEGER)::INTEGER;

        -- Setting `curr_row` (JSON) cursor property
        v_cur_metadata := jsonb_set(v_cur_metadata, '{curr_row}', to_jsonb(coalesce((v_cur_metadata ->> 'curr_row')::INTEGER, 0) + 1));
    ELSE
        -- ORA-01002: fetch out of sequence
        RAISE null_value_not_allowed;
    END IF;

    -- Saving cursor metadata (JSON) object
    PERFORM set_config(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id),
                       v_cur_metadata::TEXT,
                       FALSE);

    RETURN v_rows_fetched;
EXCEPTION
    -- Cursor is not opened or does not exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := 'DBMS_SQL access denied.',
                    DETAIL := 'DBMS_SQL access was denied due to security concerns.',
                    HINT := '-29471';

    -- Actual and declared base data types of a column do not match
    WHEN datatype_mismatch THEN
        RAISE USING MESSAGE := format('Inconsistent datatypes: expected %s got %s.',
                                      v_datatypes_rec.def_data_type,
                                      v_datatypes_rec.cur_data_type),
                    DETAIL := format('Actual and declared data types for column in position %s do not match.',
                                     v_datatypes_rec.column_pos),
                    HINT := '-932';

    -- Fetch from invalid cursor
    WHEN null_value_not_allowed THEN
        RAISE USING MESSAGE := 'Fetch out of sequence.',
                    DETAIL := 'A fetch has been attempted from a cursor which is no longer valid.',
                    HINT := '-1002';

    -- Effective userid (OID) changed since cursor parse
    WHEN invalid_role_specification THEN
        RAISE USING MESSAGE := 'Effective userid is not the same as when cursor was parsed.',
                    DETAIL := 'The effective userid on this call to DBMS_SQL is not the same as that at the time the cursor was parsed.',
                    HINT := '-29470';
END;
]]></complex-attribute>
                        <category _I_D="7e6c7649-f543-4c3b-8e9f-26c8fbbaaa9d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5fac309f-a659-41e4-90c5-536fc937d32b" name="dbms_sql$init" subcategories-loading="none" object-loading="extended" context="dbms_sql$init" is-trigger-function="0" unique-function-name="dbms_sql$init" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304465" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$init()" comment="The function initializes DBMS_SQL package and creates all necessary temporary tables required for this emulation solution.">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    -- Creating all necessary temp tables if they're not created before
    IF (NOT coalesce(nullif(current_setting('sct$dbms_sql.temp_tables_init', TRUE), ''), 'false')::BOOLEAN)
    THEN
        -- Explicit tables dropping, to remove existing ones
        DROP TABLE IF EXISTS dbms_sql$cursor_column CASCADE;

        DROP TABLE IF EXISTS dbms_sql$cursor CASCADE;
        
        DROP TABLE IF EXISTS dbms_sql$define_column;
        
        DROP TABLE IF EXISTS dbms_sql$bind_variable;

        DROP TABLE IF EXISTS dbms_sql$recordset;

        -- Temp table for storing cursor data (id, SQL statement etc.)
        CREATE TEMP TABLE dbms_sql$cursor (
            cursor_id INTEGER,
            sql_statement TEXT,
            colscount_block TEXT,
            colstype_block TEXT,
            prepdynsql_block TEXT,
            CONSTRAINT pk_cursor PRIMARY KEY (cursor_id)
        ) WITH (OIDS = FALSE)
        ON COMMIT PRESERVE ROWS;

        -- Temp table for storing defined columns data (position, data type etc.)
        CREATE TEMP TABLE dbms_sql$define_column (
            cursor_id INTEGER,
            column_pos INTEGER,
            data_type VARCHAR,
            base_type VARCHAR,
            col_size INTEGER,
            is_fixed SMALLINT,
            CONSTRAINT pk_def_column PRIMARY KEY (cursor_id, column_pos),
            CONSTRAINT fk_defcol_cursor FOREIGN KEY
               (cursor_id)
                REFERENCES dbms_sql$cursor (cursor_id) ON DELETE CASCADE
        ) WITH (OIDS = FALSE)
        ON COMMIT PRESERVE ROWS;

        -- Temp table for storing actual columns data (position, data type etc.)
        CREATE TEMP TABLE dbms_sql$cursor_column (
            cursor_id INTEGER,
            column_pos INTEGER,
            col_name VARCHAR,
            data_type VARCHAR,
            base_type VARCHAR,
            is_nullable BOOLEAN,
            chr_max_len INTEGER,
            chr_byte_len INTEGER,
            num_precision SMALLINT,
            num_scale SMALLINT,
            tstamp_precision SMALLINT,
            interval_type VARCHAR,
            interval_precision SMALLINT,
            CONSTRAINT pk_cur_column PRIMARY KEY (cursor_id, column_pos),
            CONSTRAINT fk_curcol_cursor FOREIGN KEY
               (cursor_id)
                REFERENCES dbms_sql$cursor (cursor_id) ON DELETE CASCADE
        ) WITH (OIDS = FALSE)
        ON COMMIT PRESERVE ROWS;

        -- Temp table for storing binded variables data (name, data type, value etc.)
        CREATE TEMP TABLE dbms_sql$bind_variable (
            cursor_id INTEGER,
            var_pos INTEGER,
            var_name VARCHAR,
            var_label VARCHAR,
            data_type VARCHAR,
            base_type VARCHAR,
            var_size INTEGER,
            value_size INTEGER,
            is_fixed SMALLINT,
            chr_val TEXT,
            num_val NUMERIC,
            dprec_val DOUBLE PRECISION,
            money_val MONEY,
            tstamp_val TIMESTAMP WITHOUT TIME ZONE,
            tstamptz_val TIMESTAMP WITH TIME ZONE,
            timetz_val TIME WITH TIME ZONE,
            interval_val INTERVAL,
            bool_val BOOLEAN,
            xml_val XML,
            bin_val BYTEA,
            CONSTRAINT pk_bind_var PRIMARY KEY (cursor_id, var_name),
            CONSTRAINT fk_bindvar_cur FOREIGN KEY
               (cursor_id)
                REFERENCES dbms_sql$cursor (cursor_id) ON DELETE CASCADE
        ) WITH (OIDS = FALSE)
        ON COMMIT PRESERVE ROWS;

        -- Temp table for storing dynamic statement execution results (parsed SQL record sets)
        CREATE TEMP TABLE dbms_sql$recordset (
            cursor_id INTEGER,
            rownum INTEGER,
            column_pos INTEGER,
            chr_val TEXT,
            num_val NUMERIC,
            dprec_val DOUBLE PRECISION,
            money_val MONEY,
            tstamp_val TIMESTAMP WITHOUT TIME ZONE,
            tstamptz_val TIMESTAMP WITH TIME ZONE,
            timetz_val TIME WITH TIME ZONE,
            interval_val INTERVAL,
            bool_val BOOLEAN,
            xml_val XML,
            bin_val BYTEA,
            CONSTRAINT pk_record_set PRIMARY KEY (cursor_id, rownum, column_pos),
            CONSTRAINT fk_recset_cursor FOREIGN KEY
               (cursor_id)
                REFERENCES dbms_sql$cursor (cursor_id) ON DELETE CASCADE,
            CONSTRAINT fk_recset_curcol FOREIGN KEY
               (cursor_id, column_pos)
                REFERENCES dbms_sql$cursor_column (cursor_id, column_pos)
        ) WITH (OIDS = FALSE)
        ON COMMIT PRESERVE ROWS;

        -- Marking package "dbms_sql" as initialized
        PERFORM set_config('sct$dbms_sql.temp_tables_init', 'true', FALSE);
    END IF;
EXCEPTION
    -- Effective userid (OID) changed
    WHEN insufficient_privilege THEN
        RAISE USING MESSAGE := 'DBMS_SQL access denied.',
                    DETAIL := 'DBMS_SQL access was denied due to security concerns.',
                    HINT := '-29471';
END;
]]></complex-attribute>
                        <category _I_D="55422bb7-7ef9-464d-b9fa-d3744132d1fb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="526d090e-fab7-4f17-a874-a3398042edaf" name="dbms_sql$is_open" subcategories-loading="none" object-loading="extended" context="dbms_sql$is_open" is-trigger-function="0" unique-function-name="dbms_sql$is_open" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="bool" function-arguments="p_cursor_id integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304466" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$is_open(p_cursor_id integer)" comment="The function checks if the cursor with given cursor id (cursor_id) is currently opened. Returns TRUE if the cursor with given cursor id is opened.">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    -- Checking if cursor metadata (JSON) exists, thus cursor is opened
    RETURN nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id), TRUE), '') IS NOT NULL;
END;
]]></complex-attribute>
                        <category _I_D="1d372266-5ff7-4b4c-8e88-df3a2da98f1f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="65643e67-64c1-4533-a20d-2d132ed58d29" name="dbms_sql$last_row_count" subcategories-loading="none" object-loading="extended" context="dbms_sql$last_row_count" is-trigger-function="0" unique-function-name="dbms_sql$last_row_count" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304467" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$last_row_count()" comment="This function returns the total number (cumulative count) of rows fetched at that point from the most recent cursor.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_field_name VARCHAR;
    v_cur_metadata JSONB;
    v_last_row_count INTEGER;
    v_sql_function_code SMALLINT;
    v_last_affected_cursor_id INTEGER;
BEGIN
    /* Getting the most recently changed cursor id,
       affected by DBMS_SQL procs or funcs:

       OPEN, CLOSE
       EXECUTE, EXECUTE_AND_FETCH
       TO_CURSOR_NUMBER, TO_REFCURSOR
    */
    v_last_affected_cursor_id := nullif(current_setting('sct$dbms_sql.last_affected_cursor_id', TRUE), '');

    -- Getting `last_row_count` variable value
    v_last_row_count := nullif(current_setting('sct$dbms_sql.last_row_count', TRUE), '');

    -- Getting cursor metadata (JSON) object
    v_cur_metadata := nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata',
                                                    v_last_affected_cursor_id), TRUE), '');

    -- Getting dynamic SQL function code from cursor metadata (JSON)
    v_sql_function_code := (v_cur_metadata ->> 'sql_func_code');

    -- func_code 4 for SELECT
    v_field_name := CASE v_sql_function_code
                       WHEN 4 THEN 'curr_row'
                       ELSE 'rows_count'
                    END;

    RETURN coalesce(v_last_row_count,
                    coalesce((v_cur_metadata ->> v_field_name)::NUMERIC, 0));
END;
]]></complex-attribute>
                        <category _I_D="4c2af43f-d528-4565-a565-cec7ed3686bf" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9641e1a9-da1a-4d62-b17a-0e82b1af63b3" name="dbms_sql$last_sql_function_code" subcategories-loading="none" object-loading="extended" context="dbms_sql$last_sql_function_code" is-trigger-function="0" unique-function-name="dbms_sql$last_sql_function_code" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="numeric" function-arguments="p_cursor_id integer DEFAULT NULL::integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304468" volatility="STABLE" is-window="f" function-identity-arguments="p_cursor_id integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$last_sql_function_code(p_cursor_id integer)" comment="This function returns a SQL function code of the parsed dynamic statement.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cursor_id INTEGER;
    v_sql_statement TEXT;
    v_cur_metadata JSONB;
    v_actual_cursor_id INTEGER;
    v_function_code INTEGER := 0;
    v_last_parsed_cur_id INTEGER;
    v_last_opened_cur_id INTEGER;
    v_last_cursor_func_code NUMERIC;
BEGIN
    -- Getting the most recently parsed cursor id
    v_last_parsed_cur_id := nullif(current_setting('sct$dbms_sql.last_parsed_cursor_id', TRUE), '');

    -- Getting the most recently opened cursor id
    v_last_opened_cur_id := coalesce(nullif(current_setting('sct$dbms_sql.last_opened_cursor_id', TRUE), '')::INTEGER, 0);

    -- Recently opened cursor id is preferred over the last parsed one
    v_actual_cursor_id := greatest(v_last_opened_cur_id, v_last_parsed_cur_id);

    -- Getting last parsed (opened) cursor metadata (JSON) object
    v_cur_metadata := nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata', v_actual_cursor_id), TRUE), '');

    -- Getting `last_cursor_func_code` variable
    v_last_cursor_func_code := nullif(current_setting('sct$dbms_sql.last_cursor_func_code', TRUE), '');

    IF (p_cursor_id IS NULL AND
        v_cur_metadata IS NULL AND
        v_last_cursor_func_code IS NOT NULL)
    THEN
        RETURN v_last_cursor_func_code;
    ELSE
        v_cursor_id := coalesce(p_cursor_id, v_actual_cursor_id);
    END IF;

    /* If the cursor is not opened,
       exit the function with code 0 */
    IF (NOT aws_oracle_ext.dbms_sql$is_open(v_cursor_id)) THEN
        RETURN v_function_code;
    END IF;

    -- Getting SQL-PL/pgSQL statement by cursor id
    SELECT sql_statement
      INTO v_sql_statement
      FROM dbms_sql$cursor
     WHERE cursor_id = v_cursor_id;

    /* See list of possible function codes here:
       https://docstore.mik.ua/orelly/oracle/bipack/ch02_03.htm
    */
    IF (v_sql_statement ~* '^\s*(CREATE\s+(?:(?:GLOBAL\s+)|(?:LOCAL\s+))?TEMPORARY\s+TABLE\s+)|(CREATE\s+(?:(?:GLOBAL\s+)|(?:LOCAL\s+))?TEMP\s+TABLE\s+)|(CREATE\s+(?:UNLOGGED\s+)?TABLE\s+)')
    THEN -- CREATE TABLE
        v_function_code := 1;
    ELSIF (v_sql_statement ~* '^\s*(SET\s+ROLE)\s+')
    THEN -- SET ROLE
        v_function_code := 2;
    ELSIF (v_sql_statement ~* '^\s*INSERT\s+INTO\s+')
    THEN -- INSERT INTO
        v_function_code := 3;
    ELSIF (v_sql_statement ~* '^\s*(SELECT)\s+' AND v_sql_statement !~* '^SELECT(.)*INTO\s*([\$\:][[:alnum:]_$#\.]+(,\s*)?)+\s*;?$')
    THEN -- SELECT
        v_function_code := 4;
    ELSIF (v_sql_statement ~* '^\s*(UPDATE)\s+')
    THEN -- UPDATE
        v_function_code := 5;
    ELSIF (v_sql_statement ~* '^\s*MERGE\s+INTO\s+')
    THEN -- MERGE
        v_function_code := 189;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+ROLE)\s+')
    THEN -- DROP ROLE
        v_function_code := 6;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+VIEW)\s+')
    THEN -- DROP VIEW
        v_function_code := 7;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+TABLE\s+)')
    THEN -- DROP TABLE
        v_function_code := 8;
    ELSIF (v_sql_statement ~* '^\s*(DELETE)\s+')
    THEN -- DELETE
        v_function_code := 9;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?(?:TEMP\s+)?(?:TEMPORARY\s+)?VIEW)\s+')
    THEN -- CREATE (OR REPLACE) (TEMPORARY | TEMP) VIEW
        v_function_code := 10;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+USER)\s+|(DROP\s+SCHEMA)\s+')
    THEN -- DROP USER
        v_function_code := 11;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+ROLE)\s+')
    THEN -- CREATE ROLE
        v_function_code := 12;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+(?:TEMPORARY\s+)?SEQUENCE)|(CREATE\s+(?:TEMP\s+)?SEQUENCE)\s+')
    THEN -- CREATE (TEMPORARY | TEMP) SEQUENCE
        v_function_code := 13;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+SEQUENCE)\s+')
    THEN -- ALTER SEQUENCE
        v_function_code := 14;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+SEQUENCE)\s+')
    THEN -- DROP SEQUENCE
        v_function_code := 16;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+CLUSTER)\s+')
    THEN -- CREATE CLUSTER
        v_function_code := 18;
    ELSIF (v_sql_statement ~* '^\s*CREATE\s+(USER|SCHEMA)\s+')
    THEN -- CREATE USER
        v_function_code := 19;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+(?:UNIQUE\s+)?INDEX)|(CREATE\s+(?:BITMAP\s+)?INDEX)\s+')
    THEN -- CREATE INDEX
        v_function_code := 20;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+INDEX)\s+')
    THEN -- DROP INDEX
        v_function_code := 21;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+CLUSTER)\s+')
    THEN -- DROP CLUSTER
        v_function_code := 22;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?PROCEDURE)\s+')
    THEN -- CREATE (OR REPLACE) PROCEDURE
        v_function_code := 24;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+PROCEDURE)\s+')
    THEN -- ALTER PROCEDURE
        v_function_code := 25;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+TABLE\s+)')
    THEN -- ALTER TABLE
        v_function_code := 26;
    ELSIF (v_sql_statement ~* '^\s*EXPLAIN\s+')
    THEN -- EXPLAIN
        v_function_code := 27;
    ELSIF (v_sql_statement ~* '^\s*(GRANT)\s+')
    THEN -- GRANT
        v_function_code := 28;
    ELSIF (v_sql_statement ~* '^\s*(REVOKE)\s+')
    THEN -- REVOKE
        v_function_code := 29;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?(?:PUBLIC\s+)?SYNONYM)\s+')
    THEN -- CREATE (OR REPLACE) (PUBLIC) SYNONYM
        v_function_code := 30;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+(?:PUBLIC\s+)?SYNONYM)\s+')
    THEN -- DROP (PUBLIC) SYNONYM
        v_function_code := 31;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+SYSTEM)\s+')
    THEN -- ALTER SYSTEM
        v_function_code := 32;
    ELSIF (v_sql_statement ~* '^\s*(SET\s+TRANSACTION)\s+')
    THEN -- SET TRANSACTION
        v_function_code := 33;
    ELSIF (v_sql_statement ~* '^\s*SET\s+CONSTRAINT[S]?\s+')
    THEN -- SET CONSTRAINTS
        v_function_code := 90;
    ELSIF (v_sql_statement ~* '(^\s*(?:<<.+>>)?\s*(BEGIN|DECLARE)\s+)|(^\s*DO(:?\s+LANGUAGE\s+[[:alpha:]]+\s+)?\s*\$([[:alnum:]_]*)?\$\s*(:<<.+>>)?\s*)' OR
           v_sql_statement ~* '^SELECT(.)*INTO\s*([\$\:][[:alnum:]_$#\.]+(,\s*)?)+\s*;?$')
    THEN -- PL/SQL EXECUTE
        v_function_code := 34;
    ELSIF (v_sql_statement ~* '^\s*LOCK\s+')
    THEN -- LOCK
        v_function_code := 35;
    ELSIF (v_sql_statement ~* '^\s*RENAME\s+')
    THEN -- RENAME
        v_function_code := 37;
    ELSIF (v_sql_statement ~* '^\s*(COMMENT\s+ON)\s+')
    THEN -- COMMENT
        v_function_code := 38;
    ELSIF (v_sql_statement ~* '^\s*AUDIT\s+')
    THEN -- AUDIT
        v_function_code := 39;
    ELSIF (v_sql_statement ~* '^\s*NOAUDIT\s+')
    THEN -- NOAUDIT
        v_function_code := 40;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+INDEX)\s+')
    THEN -- ALTER INDEX
        v_function_code := 41;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+DATABASE)\s+')
    THEN -- CREATE DATABASE
        v_function_code := 44;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+DATABASE)\s+')
    THEN -- ALTER DATABASE
        v_function_code := 45;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+(?:PUBLIC\s+)?ROLLBACK\s+SEGMENT)\s+')
    THEN -- CREATE (OR REPLACE) (PUBLIC) ROLLBACK SEGMENT
        v_function_code := 46;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+ROLLBACK\s+SEGMENT)\s+')
    THEN -- ALTER ROLLBACK SEGMENT
        v_function_code := 47;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+ROLLBACK\s+SEGMENT)\s+')
    THEN -- DROP ROLLBACK SEGMENT
        v_function_code := 48;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+(?:(?:SMALLFILE\s+)|(?:BIGFILE\s+)|(?:UNDO\s+)|(?:TEMPORARY\s+))?TABLESPACE)\s+')
    THEN -- CREATE (SMALLFILE | BIGFILE | UNDO | TEMPORARY) TABLESPACE
        v_function_code := 49;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+TABLESPACE)\s+')
    THEN -- ALTER TABLESPACE
        v_function_code := 50;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+TABLESPACE)\s+')
    THEN -- DROP TABLESPACE
        v_function_code := 51;
    ELSIF (v_sql_statement ~* '^\s*ALTER\s+SESSION\s+|^\s*RESET\s+' OR
           (v_sql_statement ~* '^\s*SET\s+[[:alnum:]_$#]+\s+' AND v_sql_statement !~* '^\s*SET\s+LOCAL\s+'))
    THEN -- ALTER SESSION
        v_function_code := 52;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+USER)\s+|(ALTER\s+SCHEMA)\s+')
    THEN -- ALTER USER
        v_function_code := 53;
    ELSIF (v_sql_statement ~* '^\s*COMMIT(?:\s+WORK)?\s*$')
    THEN -- COMMIT[ WORK]
        v_function_code := 54;
    ELSIF (v_sql_statement ~* '^\s*ROLLBACK(?:\s+WORK)?\s*$')
    THEN -- ROLLBACK[ WORK]
        v_function_code := 55;
    ELSIF (v_sql_statement ~* '^\s*SAVEPOINT\s+')
    THEN -- SAVEPOINT
        v_function_code := 56;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+CONTROLFILE)\s+')
    THEN -- CREATE CONTROL FILE
        v_function_code := 57;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?(?:CONSTRAINT\s+)?TRIGGER)\s+')
    THEN -- CREATE TRIGGER
        v_function_code := 59;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+TRIGGER)\s+')
    THEN -- ALTER TRIGGER
        v_function_code := 60;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+TRIGGER)\s+')
    THEN -- DROP TRIGGER
        v_function_code := 61;
    ELSIF (v_sql_statement ~* '^\s*ANALYZE\s+TABLE\s+')
    THEN -- ANALYZE TABLE
        v_function_code := 62;
    ELSIF (v_sql_statement ~* '^\s*ANALYZE\s+INDEX\s+')
    THEN -- ANALYZE INDEX
        v_function_code := 63;
    ELSIF (v_sql_statement ~* '^\s*ANALYZE\s+CLUSTER\s+')
    THEN -- ANALYZE CLUSTER
        v_function_code := 64;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+PROFILE)\s+')
    THEN -- CREATE PROFILE
        v_function_code := 65;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+PROFILE)\s+')
    THEN -- DROP PROFILE
        v_function_code := 66;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+PROFILE)\s+')
    THEN -- ALTER PROFILE
        v_function_code := 67;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+PROCEDURE)\s+')
    THEN -- DROP PROCEDURE
        v_function_code := 68;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+RESOURCE\s+COST)\s+')
    THEN -- ALTER RESOURCE COST
        v_function_code := 70;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+(MATERIALIZED\s+VIEW|SNAPSHOT)\s+LOG\s+ON)\s+')
    THEN -- CREATE SNAPSHOT LOG
        v_function_code := 71;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+(MATERIALIZED\s+VIEW|SNAPSHOT)\s+LOG\s+ON)\s+')
    THEN -- ALTER SNAPSHOT LOG
        v_function_code := 72;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+(MATERIALIZED\s+VIEW|SNAPSHOT)\s+LOG\s+ON)\s+')
    THEN -- DROP SNAPSHOT LOG
        v_function_code := 73;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+(MATERIALIZED\s+VIEW|SNAPSHOT))\s+')
    THEN -- CREATE SNAPSHOT
        v_function_code := 74;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+(MATERIALIZED\s+VIEW|SNAPSHOT))\s+')
    THEN -- ALTER SNAPSHOT
        v_function_code := 75;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+(MATERIALIZED\s+VIEW|SNAPSHOT))\s+')
    THEN -- DROP SNAPSHOT
        v_function_code := 76;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?TYPE)\s+(?!BODY)')
    THEN -- CREATE[ OR REPLACE] TYPE
        v_function_code := 77;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+TYPE)\s+(?!BODY)')
    THEN -- DROP TYPE
        v_function_code := 78;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+ROLE)\s+')
    THEN -- ALTER ROLE
        v_function_code := 79;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+TYPE)\s+' AND v_sql_statement !~* 'BODY')
    THEN -- ALTER TYPE
        v_function_code := 80;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?TYPE\s+BODY)\s+')
    THEN -- CREATE[ OR REPLACE] TYPE BODY
        v_function_code := 81;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+TYPE\s+(?:.)*\s+COMPILE\s+(?:DEBUG\s+)?BODY)')
    THEN -- ALTER TYPE COMPILE (DEBUG) BODY
        v_function_code := 82;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+TYPE\s+BODY)\s+')
    THEN -- DROP TYPE BODY
        v_function_code := 83;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+LIBRARY)\s+')
    THEN -- DROP LIBRARY
        v_function_code := 84;
    ELSIF (v_sql_statement ~* '^\s*(TRUNCATE\s+TABLE)\s+')
    THEN -- TRUNCATE TABLE
        v_function_code := 85;
    ELSIF (v_sql_statement ~* '^\s*(TRUNCATE\s+CLUSTER)\s+')
    THEN -- TRUNCATE CLUSTER
        v_function_code := 86;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+BITMAPFILE)\s+')
    THEN -- CREATE BITMAPFILE
        v_function_code := 87;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+VIEW)\s+')
    THEN -- ALTER VIEW
        v_function_code := 88;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+BITMAPFILE)\s+')
    THEN -- DROP BITMAPFILE
        v_function_code := 89;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?FUNCTION\s+(?:.)*(RETURN|RETURNS))\s+')
    THEN -- CREATE (OR REPLACE) FUNCTION
        v_function_code := 91;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+FUNCTION)\s+')
    THEN -- ALTER FUNCTION
        v_function_code := 92;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+FUNCTION)\s+')
    THEN -- DROP FUNCTION
        v_function_code := 93;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?PACKAGE)\s+' AND v_sql_statement !~* 'BODY')
    THEN -- CREATE (OR REPLACE) PACKAGE
        v_function_code := 94;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+PACKAGE)\s+' AND v_sql_statement !~* 'BODY')
    THEN -- ALTER PACKAGE
        v_function_code := 95;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+PACKAGE)\s+' AND v_sql_statement !~* 'BODY')
    THEN -- DROP PACKAGE
        v_function_code := 96;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?PACKAGE\s+BODY)\s+')
    THEN -- CREATE (OR REPLACE) PACKAGE BODY
        v_function_code := 97;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+PACKAGE)\s+' AND v_sql_statement ~* 'BODY')
    THEN -- ALTER PACKAGE BODY
        v_function_code := 98;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+PACKAGE\s+BODY)\s+')
    THEN -- DROP PACKAGE BODY
        v_function_code := 99;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?DIRECTORY)\s+')
    THEN -- CREATE (OR REPLACE) DIRECTORY
        v_function_code := 157;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+DIRECTORY)\s+')
    THEN -- DROP DIRECTORY
        v_function_code := 158;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?LIBRARY)\s+')
    THEN -- CREATE (OR REPLACE) LIBRARY
        v_function_code := 159;
    ELSIF (v_sql_statement ~* '^\s*CALL\s+')
    THEN -- CALL METHOD
        v_function_code := 170;
    ELSIF (v_sql_statement ~* '^\s*PURGE\s+RECYCLEBIN\s*[;]?\s*$')
    THEN -- PURGE RECYCLEBIN
        v_function_code := 197;
    ELSIF (v_sql_statement ~* '^\s*PURGE\s+DBA_RECYCLEBIN\s*[;]?\s*$')
    THEN -- PURGE DBA_RECYCLEBIN
        v_function_code := 198;
    ELSIF (v_sql_statement ~* '^\s*PURGE\s+TABLESPACE\s+')
    THEN -- PURGE TABLESPACE
        v_function_code := 199;
    ELSIF (v_sql_statement ~* '^\s*PURGE\s+TABLE\s+')
    THEN -- PURGE TABLE
        v_function_code := 200;
    ELSIF (v_sql_statement ~* '^\s*PURGE\s+INDEX\s+')
    THEN -- PURGE INDEX
        v_function_code := 201;
    ELSIF (v_sql_statement ~* '^\s*FLASHBACK\s+.*\s+BEFORE\s+DROP')
    THEN -- UNDROP (FLASHBACK)
        v_function_code := 202;
    ELSIF (v_sql_statement ~* '^\s*DROP\s+DATABASE\s*[;]?\s*')
    THEN -- DROP DATABASE
        v_function_code := 203;
    ELSIF (v_sql_statement ~* '^\s*CREATE\s+(?:OR\s+REPLACE\s+)?ATTRIBUTE\s+DIMENSION\s+')
    THEN -- CREATE[ OR REPLACE] ATTRIBUTE DIMENSION
        v_function_code := 243;
    ELSIF (v_sql_statement ~* '^\s*ALTER\s+ATTRIBUTE\s+DIMENSION\s+')
    THEN -- ALTER ATTRIBUTE DIMENSION
        v_function_code := 244;
    ELSIF (v_sql_statement ~* '^\s*DROP\s+ATTRIBUTE\s+DIMENSION\s+')
    THEN -- DROP ATTRIBUTE DIMENSION
        v_function_code := 245;
    ELSIF (v_sql_statement ~* '^\s*CREATE\s+(?:OR\s+REPLACE\s+)?HIERARCHY\s+')
    THEN -- CREATE[ OR REPLACE] HIERARCHY
        v_function_code := 246;
    ELSIF (v_sql_statement ~* '^\s*ALTER\s+HIERARCHY\s+')
    THEN -- ALTER HIERARCHY
        v_function_code := 247;
    ELSIF (v_sql_statement ~* '^\s*DROP\s+HIERARCHY\s+')
    THEN -- DROP HIERARCHY
        v_function_code := 248;
    ELSIF (v_sql_statement ~* '^\s*CREATE\s+(?:OR\s+REPLACE\s+)?ANALYTIC\s+VIEW\s+')
    THEN -- CREATE[ OR REPLACE] ANALYTIC VIEW
        v_function_code := 249;
    ELSIF (v_sql_statement ~* '^\s*ALTER\s+ANALYTIC\s+VIEW\s+')
    THEN -- ALTER ANALYTIC VIEW
        v_function_code := 250;
    ELSIF (v_sql_statement ~* '^\s*DROP\s+ANALYTIC\s+VIEW\s+')
    THEN -- DROP ANALYTIC VIEW
        v_function_code := 251;
    END IF;

    IF (p_cursor_id IS NULL) THEN
        -- Setting `last_cursor_func_code` variable
        PERFORM set_config('sct$dbms_sql.last_cursor_func_code', v_function_code::TEXT, FALSE);
    END IF;

    RETURN v_function_code;
EXCEPTION
    -- Effective userid (OID) changed since cursor parse
    WHEN insufficient_privilege THEN
        RAISE USING MESSAGE := 'DBMS_SQL access denied.',
                    DETAIL := 'DBMS_SQL access was denied due to security concerns.',
                    HINT := '-29471';
END;
]]></complex-attribute>
                        <category _I_D="7bbbd118-2fa6-46b4-bf9e-8d841b029510" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="97d021f8-340e-4bf5-94c6-2649590827d6" name="dbms_sql$open_cursor" subcategories-loading="none" object-loading="extended" context="dbms_sql$open_cursor" is-trigger-function="0" unique-function-name="dbms_sql$open_cursor" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="numeric" function-arguments="p_security_level integer DEFAULT 1" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304470" volatility="VOLATILE" is-window="f" function-identity-arguments="p_security_level integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$open_cursor(p_security_level integer)" comment="The function opens up a cursor and returns a unique cursor id which lives through the session and used as a reference for processing the dynamic statement.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cursor_id INTEGER;
    v_security_level SMALLINT;
BEGIN
    -- Security level is 1 when passed NULL
    v_security_level := coalesce(p_security_level, 1);

    -- Checking that security level lies into valid range
    IF (v_security_level NOT BETWEEN 0 AND 2) THEN
        RAISE numeric_value_out_of_range;
    END IF;

    -- Checking security level for allowed values
    IF (v_security_level = 0) THEN
        RAISE invalid_parameter_value;
    END IF;

    -- Initializing solution temp tables
    PERFORM aws_oracle_ext.dbms_sql$init();

    -- Generating unpredictable, randomized, cursor number
    WHILE (v_cursor_id IS NULL)
    LOOP
        BEGIN
            INSERT INTO dbms_sql$cursor (cursor_id)
                 VALUES (aws_oracle_ext.dbms_random$random())
              RETURNING cursor_id
                   INTO v_cursor_id;
        EXCEPTION
            WHEN insufficient_privilege THEN
                -- Effective userid changed
                RAISE invalid_role_specification;
            WHEN unique_violation THEN
            NULL;
        END;
    END LOOP;

    -- Saving cursor metadata (JSON) object
    PERFORM set_config(format('sct$dbms_sql.cursor_id_%s_metadata', v_cursor_id),
                       jsonb_build_object('cursor_id', v_cursor_id,
                                          'security_level', v_security_level,
                                          'from_refcursor', FALSE)::TEXT,
                       FALSE);

    -- Nulling `last_cursor_func_code` variable
    PERFORM set_config('sct$dbms_sql.last_cursor_func_code', NULL, FALSE);

    -- Setting `last_opened_cursor_id` variable
    PERFORM set_config('sct$dbms_sql.last_opened_cursor_id', v_cursor_id::TEXT, FALSE);

    -- Setting `last_affected_cursor_id` variable
    PERFORM set_config('sct$dbms_sql.last_affected_cursor_id', v_cursor_id::TEXT, FALSE);

    -- Nulling `last_row_count` variable
    PERFORM set_config('sct$dbms_sql.last_row_count', NULL, FALSE);

    RETURN v_cursor_id;
EXCEPTION
    -- Incorrect security level value
    WHEN numeric_value_out_of_range THEN
        RAISE USING MESSAGE := 'Security level is outside the valid range of 0 to 2.',
                    DETAIL := 'An invalid security level value was specified.',
                    HINT := '-29472';

    -- Disabled security level value
    WHEN invalid_parameter_value THEN
        RAISE USING MESSAGE := 'Security level of 0 is not allowed.',
                    DETAIL := 'This level of security is disabled by default.',
                    HINT := '-29474';

    -- Effective userid (OID) changed since solution initialization
    WHEN invalid_role_specification THEN
        RAISE USING MESSAGE := 'DBMS_SQL access denied.',
                    DETAIL := 'DBMS_SQL access was denied due to security concerns.',
                    HINT := '-29471';
END;
]]></complex-attribute>
                        <category _I_D="db1fbc2f-7428-4dde-bd16-503435eccd50" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="69f4132e-53f1-44c0-85c7-2c5fe8ef8674" name="dbms_sql$parse" subcategories-loading="none" object-loading="extended" context="dbms_sql$parse" is-trigger-function="0" unique-function-name="dbms_sql$parse" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,text,integer" is-returning-set="f" ret-datatype="void" function-arguments="p_cursor_id integer, p_sql_statement text, p_cols_count integer DEFAULT NULL::integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304471" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer, p_sql_statement text, p_cols_count integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$parse(p_cursor_id integer, p_sql_statement text, p_cols_count integer)" comment="This function parses the given statement in the given cursor. DDL and DCL statements are run immediately when parsed.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_err_message TEXT;
    v_sql_cmd_type TEXT;
    v_cur_metadata JSONB;
    v_sql_statement TEXT;
    v_statement_hash TEXT;
    v_current_user_oid BIGINT;
    v_sql_function_code SMALLINT;
BEGIN
    v_sql_statement := trim(p_sql_statement);

    -- Checking that cursor is opened (exit if it is not)
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    ELSIF (coalesce(p_sql_statement, '') = '') THEN
        -- ORA-06561: given statement is not supported by package DBMS_SQL
        RAISE sql_statement_not_yet_complete;
    END IF;

    -- Calculating unique statement hash
    v_statement_hash := coalesce(md5(v_sql_statement), '');

    -- Getting cursor metadata (JSON) object
    v_cur_metadata := nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id), TRUE), '');

    -- Getting dynamic SQL function code from cursor metadata (JSON)
    v_sql_function_code := (v_cur_metadata ->> 'sql_func_code');

    -- Determining SQL command type from cursor metadata (JSON)
    v_sql_cmd_type := (v_cur_metadata ->> 'sql_cmd_type');

    -- Setting SELECT statement columns count (if passed in)
    v_cur_metadata := jsonb_set(v_cur_metadata, '{cols_count}', coalesce(to_jsonb(p_cols_count), JSONB 'null'));

    -- If cursor (cursor_id) was transformed from a REFCURSOR then remove "from_refcursor" flag
    IF ((v_cur_metadata ->> 'from_refcursor')::BOOLEAN) THEN
        -- Setting "from_refcursor" cursor property to FALSE
        v_cur_metadata := jsonb_set(v_cur_metadata, '{from_refcursor}', JSONB 'false');
    END IF;

    -- Updating cursor info refresh flags if statement is a new one
    IF (v_statement_hash <> coalesce(v_cur_metadata ->> 'statement_hash', ''))
    THEN
        -- Setting "statement_hash" (JSON) cursor property
        v_cur_metadata := jsonb_set(v_cur_metadata, '{statement_hash}', to_jsonb(v_statement_hash));

        -- Setting "colinfo_refresh" (JSON) cursor property
        v_cur_metadata := jsonb_set(v_cur_metadata, '{colinfo_refresh}', to_jsonb(1));

        /* Removing comments from SQL statement (both single and multi-line),
           validating multi-line comment opening and closure tags */
        v_sql_statement := aws_oracle_ext.strip_sql_comments(v_sql_statement,
                                                             p_adv_quote_tags => ARRAY['$q$','$Q$'], -- advanced quoting marker list
                                                             p_validate_multiline => TRUE);
        BEGIN
            -- Associating SQL statement with cursor id
            UPDATE dbms_sql$cursor
               SET sql_statement = v_sql_statement
             WHERE cursor_id = p_cursor_id;
        EXCEPTION
            WHEN insufficient_privilege THEN
                -- Effective userid changed
                RAISE invalid_cursor_state;
        END;

        -- Getting dynamic SQL function code
        v_sql_function_code := aws_oracle_ext.dbms_sql$last_sql_function_code(p_cursor_id);

        -- Determining SQL command type (DDL, DML, DCL, TCL, SCL, SCS) by function code
        v_sql_cmd_type := aws_oracle_ext.get_cmd_type_by_sql_func_code(v_sql_function_code);

        -- Checking SQL statement for correctness
        IF (v_sql_cmd_type IS NULL) THEN
            -- ORA-00900: invalid SQL statement
            RAISE invalid_sql_statement_name;
        END IF;
    END IF;

    /* DDL and DCL statements are executed when they are parsed
       and the function DBMS_SQL.EXECUTE need not be used on them.

       Command type execution map:
       ---------------------------
       DDL - PARSE (DBMS_SQL.PARSE)
       DML - EXECUTE (DBMS_SQL.EXECUTE)
       DCL - PARSE
       TCL - EXECUTE
       SCL - EXECUTE
       SCS - EXECUTE
    */
    IF (v_sql_cmd_type IN ('DDL', 'DCL'))
    THEN
        BEGIN
            EXECUTE v_sql_statement;
        EXCEPTION
            WHEN undefined_parameter THEN
                -- ORA-01027: bind variables not allowed for DDL / DCL
                RAISE invalid_prepared_statement_definition;
            WHEN syntax_error THEN
                GET STACKED DIAGNOSTICS v_err_message = MESSAGE_TEXT;

                -- ORA-01027: bind variables not allowed for DDL / DCL
                IF (v_err_message = 'syntax error at or near ":"')
                THEN
                    RAISE invalid_prepared_statement_definition;
                ELSE
                    -- SQL statement is not valid (with desc.)
                    RAISE invalid_sql_statement_name;
                END IF;
        END;
    END IF;

    -- Setting `last_parsed_cursor_id` variable value
    PERFORM set_config('sct$dbms_sql.last_parsed_cursor_id', p_cursor_id::TEXT, FALSE);

    -- Setting `sql_func_code` (JSON) cursor property
    v_cur_metadata := jsonb_set(v_cur_metadata, '{sql_func_code}', to_jsonb(v_sql_function_code));

    -- Setting `sql_cmd_type` (JSON) cursor property
    v_cur_metadata := jsonb_set(v_cur_metadata, '{sql_cmd_type}', to_jsonb(v_sql_cmd_type));

    -- Obtaining current user OID
    v_current_user_oid := aws_oracle_ext.get_user_oid_by_name(current_user);

    -- Setting `parse_role_oid` (JSON) cursor property
    v_cur_metadata := jsonb_set(v_cur_metadata, '{parse_user_oid}', to_jsonb(v_current_user_oid));

    -- Saving cursor metadata (JSON) object
    PERFORM set_config(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id),
                       v_cur_metadata::TEXT, -- cursor metadata object
                       FALSE);
EXCEPTION
    -- Cursor is not opened or does not exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := 'DBMS_SQL access denied.',
                    DETAIL := 'DBMS_SQL access was denied due to security concerns.',
                    HINT := '-29471';

    -- SQL statement is empty
    WHEN sql_statement_not_yet_complete THEN
        RAISE USING MESSAGE := 'Given statement is not supported by package DBMS_SQL.',
                    DETAIL := 'Attempting to parse an unsupported SQL statement.',
                    HINT := '-6561';

    -- SQL statement is not valid
    WHEN invalid_sql_statement_name THEN
        RAISE USING MESSAGE := 'Invalid SQL statement.',
                    DETAIL := 'The statement is not recognized as a valid SQL statement or PL/pgSQL block.',
                    HINT := '-900';

    -- Bind variables not allowed for DDL / DCL
    WHEN invalid_prepared_statement_definition THEN
        RAISE USING MESSAGE := 'Bind variables not allowed for data definition operations.',
                    DETAIL := 'Bind variables are not allowed for both DDL and DCL operations.',
                    HINT := '-1027';
END;
]]></complex-attribute>
                        <category _I_D="55a85c36-c777-4673-8ecd-413f5c59ac9b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="61cab8a3-7759-4475-b02e-1c9d19145ffe" name="dbms_sql$to_cursor_number" subcategories-loading="none" object-loading="extended" context="dbms_sql$to_cursor_number" is-trigger-function="0" unique-function-name="dbms_sql$to_cursor_number" is-aggregate="f" language-name="plpgsql" arguments-datatypes="refcursor" is-returning-set="f" ret-datatype="int4" function-arguments="p_refcursor refcursor" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304473" volatility="VOLATILE" is-window="f" function-identity-arguments="p_refcursor refcursor" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$to_cursor_number(p_refcursor refcursor)" comment="This function takes an opened REFCURSOR and transforms it into a DBMS_SQL cursor number. Once the REFCURSOR is transformed into a DBMS_SQL cursor number, the REFCURSOR is no longer accessible by any native dynamic SQL operations.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
    v_curcols_data JSONB;
    v_cursor_id INTEGER;
    v_sql_statement TEXT;
    v_cols_count SMALLINT;
    v_col_names1 TEXT;
    v_col_names2 TEXT;
    v_col_aliases TEXT;
    v_colstype_block TEXT;
    v_prepdynsql_block TEXT;
    v_coldtype_cases TEXT;
    v_err_message TEXT;
    v_err_stack TEXT;
    v_refcur_rec RECORD;
    v_refcur_rec_json JSONB;
    v_is_scrollable BOOLEAN;
    v_last_row_count INTEGER;
    v_colstype_table_name TEXT;
    v_debug_mode SMALLINT := 0; -- {1:ON, 0:OFF}. If set to "ON", engine logs all dynamically generated scripts into `dbms_sql$cursor` table
BEGIN
    -- Extracting REFRUCSOR metadata
    BEGIN
        SELECT statement,
               is_scrollable
          INTO STRICT
               v_sql_statement,
               v_is_scrollable
          FROM pg_catalog.pg_cursors
         WHERE name = p_refcursor::TEXT;
    EXCEPTION
        WHEN OTHERS THEN
        -- ORA-01001: invalid cursor
        RAISE invalid_cursor_state;
    END;

    -- Getting `last_row_count` variable value
    v_last_row_count := nullif(current_setting('sct$dbms_sql.last_row_count', TRUE), '');

    /* Fetching row into record from REFCURSOR
       in order to determine columns count */
    IF (v_is_scrollable) THEN
        FETCH NEXT
         FROM p_refcursor
         INTO v_refcur_rec;

        MOVE BACKWARD
        FROM p_refcursor;
    ELSE
        FETCH FIRST
         FROM p_refcursor
         INTO v_refcur_rec;
    END IF;

    -- Getting REFCURSOR columns count
    SELECT COUNT(1)
      INTO v_cols_count
      FROM json_object_keys(row_to_json(v_refcur_rec));

    -- Opening new DBMS_SQL cursor for data storage
    v_cursor_id := aws_oracle_ext.dbms_sql$open_cursor();

    -- Assigning SQL statement and exact columns count to DBMS_SQL cursor
    PERFORM aws_oracle_ext.dbms_sql$parse(v_cursor_id, v_sql_statement, v_cols_count);

    -- Getting cursor metadata (JSON) object
    v_cur_metadata := nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata', v_cursor_id), TRUE), '');

    -- Generating list of column names
    SELECT string_agg(format('outer_block.v_refcur_rec."%s"', colname),
                      concat(',', chr(10), repeat(' ', 7))),
           string_agg(format('      outer_block.v_refcur_rec."%s"', colname),
                      concat(',', chr(10)))
      INTO v_col_names1,
           v_col_names2
      FROM json_object_keys(row_to_json(v_refcur_rec)) AS colname;

    -- Generating unique temp table name
    v_colstype_table_name :=
        format('dynsql_colstype_%s',
               lower(substring((SELECT string_agg(md5(random()::TEXT), '')
                                  FROM generate_series(1, ceil(14 / 32.)::INTEGER)
                               ), 1, 14)));

    -- Determining REFCURSOR column data types
    v_colstype_block :=
        concat_ws(chr(10),
            'DO $dbms_sql$',
            '<<outer_block>>',
            'DECLARE',
            '    v_refcur_rec RECORD;',
            format('    v_cursor_id INTEGER := %s;', v_cursor_id),
            format('    v_is_scrollable BOOLEAN := %s;',
            CASE
               WHEN v_is_scrollable THEN 'TRUE'
               ELSE 'FALSE'
            END),
            format('    v_refcursor REFCURSOR := %s;', quote_literal(p_refcursor)),
            'BEGIN',
            '-- Fetching row into RECORD variable',
            'IF (outer_block.v_is_scrollable) THEN',
            '    FETCH NEXT',
            '     FROM outer_block.v_refcursor',
            '     INTO outer_block.v_refcur_rec;',
            '',
            '    MOVE BACKWARD',
            '    FROM outer_block.v_refcursor;',
            'ELSE',
            '    FETCH FIRST',
            '     FROM outer_block.v_refcursor',
            '     INTO outer_block.v_refcur_rec;',
            'END IF;',
            '',
            '-- Creating temp table in order to reflect the columns structure',
            format('CREATE TEMP TABLE %s', v_colstype_table_name),
            'WITH (OIDS = FALSE)',
            'ON COMMIT DROP',
            'AS',
            concat('SELECT ', v_col_names1),
            'WITH NO DATA;',
            '',
            concat_ws(chr(10), '-- Saving detailed column data (name, type, precision, etc.)',
            'INSERT INTO dbms_sql$cursor_column (cursor_id,',
            '                                    column_pos,',
            '                                    col_name,',
            '                                    data_type,',
            '                                    base_type,',
            '                                    is_nullable,',
            '                                    chr_max_len,',
            '                                    chr_byte_len,',
            '                                    num_precision,',
            '                                    num_scale,',
            '                                    tstamp_precision,',
            '                                    interval_type,',
            '                                    interval_precision)',
            'SELECT outer_block.v_cursor_id,',
            '       ordinal_position,',
            '       column_name,',
            '       upper(data_type),',
            '       aws_oracle_ext.get_base_type_by_dtype(upper(data_type)),',
            '       CASE is_nullable',
            '          WHEN ''YES'' THEN TRUE',
            '          ELSE FALSE',
            '       END,',
            '       character_maximum_length,',
            '       character_octet_length,',
            '       numeric_precision,',
            '       numeric_scale,',
            '       datetime_precision,',
            '       interval_type,',
            '       interval_precision',
            '  FROM information_schema.columns'),
            format(' WHERE table_name = ''%s''', v_colstype_table_name),
            ' ORDER BY ordinal_position ASC;',
            '',
            '-- Dropping temp table since its not needed anymore',
            format('DROP TABLE %s;', v_colstype_table_name),
            'END; $dbms_sql$');

    EXECUTE v_colstype_block; -- Will be saved into `dbms_sql$cursor` table if "v_debug_mode" is set to "ON" (1)

    -- Serializing dynamic statement columns data into JSON object
    SELECT jsonb_object_agg(concat('col_', curcol_data.column_pos),
                            curcol_data.column_data)
      INTO v_curcols_data
      FROM (SELECT curcol3.column_pos,
                   (SELECT to_jsonb(curcol2.*)
                      FROM (SELECT curcol1.data_type,
                                   curcol1.base_type,
                                   curcol1.chr_max_len,
                                   curcol1.chr_byte_len
                              FROM dbms_sql$cursor_column AS curcol1
                             WHERE curcol1.cursor_id = curcol3.cursor_id
                               AND curcol1.column_pos = curcol3.column_pos
                           ) AS curcol2
                   ) AS column_data
              FROM dbms_sql$cursor_column AS curcol3
             WHERE curcol3.cursor_id = v_cursor_id
           ) AS curcol_data;

    -- Setting `curcols_data` (JSON) cursor property
    v_cur_metadata := jsonb_set(v_cur_metadata, '{curcols_data}', v_curcols_data);

    -- Setting `from_refcursor` (JSON) cursor property
    v_cur_metadata := jsonb_set(v_cur_metadata, '{from_refcursor}', JSONB 'true');

    -- Saving cursor metadata (JSON) object
    PERFORM set_config(format('sct$dbms_sql.cursor_id_%s_metadata', v_cursor_id),
                       v_cur_metadata::TEXT, -- cursor metadata object
                       FALSE);

    /* Constructing CASEs to distribute dynamic query execution results
       through INSERT-SELECT into `dbms_sql$recordset` table */
    WITH dtypes_order AS
    (SELECT 'TEXT' AS base_type, 1 AS dtype_order
      UNION ALL
     SELECT 'NUMERIC', 2
      UNION ALL
     SELECT 'DOUBLE PRECISION', 3
      UNION ALL
     SELECT 'MONEY', 4
      UNION ALL
     SELECT 'TIMESTAMP WITHOUT TIME ZONE', 5
      UNION ALL
     SELECT 'TIMESTAMP WITH TIME ZONE', 6
      UNION ALL
     SELECT 'TIME WITH TIME ZONE', 7
      UNION ALL
     SELECT 'INTERVAL', 8
      UNION ALL
     SELECT 'BOOLEAN', 9
      UNION ALL
     SELECT 'XML', 10
      UNION ALL
     SELECT 'BYTEA', 11),
     -- Attaching current columns data
     curcols_data AS
     (SELECT base_type,
             array_agg(concat_ws(':', column_pos, data_type)) AS colpos_list
        FROM dbms_sql$cursor_column
       WHERE cursor_id = v_cursor_id
       GROUP BY base_type)

     SELECT string_agg(
            coalesce('       CASE colpos' || chr(10) ||
            (SELECT string_agg(format('          WHEN %s THEN %s',
                                      colpos,
                                      CASE dtype
                                         WHEN 'TIME WITHOUT TIME ZONE' -- List of types that require special conversion
                                         THEN format('to_char(col_%s, ''2001-01-01 hh24:mi:ss.us'')::TIMESTAMP', colpos)
                                         ELSE 'col_' || colpos
                                      END),
                               chr(10))
               FROM (SELECT substring(colpos, '^(\d+):?') AS colpos,
                            substring(colpos, ':(.+)$') AS dtype
                      FROM unnest(cdt.colpos_list) AS colpos) AS cols) || chr(10) || '       END',
                               '       NULL'),
            ',' || chr(10) ORDER BY dto.dtype_order ASC)
       INTO v_coldtype_cases
       FROM dtypes_order dto
            LEFT JOIN curcols_data cdt ON (cdt.base_type = dto.base_type);

    -- Generating list of consecutive column aliases (col_1, col_2, ...)
    SELECT string_agg(concat(repeat(' ', 29), 'col_', colnum),
                      concat(',', chr(10)))
      INTO v_col_aliases
      FROM generate_series(1, v_cols_count) AS colnum;

    -- Distributing REFRUCSOR data into `dbms_sql$recordset` table
    v_prepdynsql_block :=
        concat_ws(chr(10),
            'DO $dbms_sql$',
            '<<outer_block>>',
            'DECLARE',
            '    v_cur_metadata JSONB;',
            '    v_refcur_rec RECORD;',
            format('    v_cursor_id INTEGER := %s;', v_cursor_id),
            format('    v_cols_count SMALLINT := %s;', v_cols_count),
            '    v_rows_fetched INTEGER := 0;',
            format('    v_is_scrollable BOOLEAN := %s;',
            CASE
               WHEN v_is_scrollable THEN 'TRUE'
               ELSE 'FALSE'
            END),
            format('    v_refcursor REFCURSOR := %s;', quote_literal(p_refcursor)),
            'BEGIN',
            'LOOP',
            '-- Fetching row into RECORD variable',
            'IF (outer_block.v_rows_fetched = 0 AND',
            '    NOT outer_block.v_is_scrollable)',
            'THEN',
            '    FETCH FIRST',
            '     FROM outer_block.v_refcursor',
            '     INTO outer_block.v_refcur_rec;',
            'ELSE',
            '    FETCH NEXT',
            '     FROM outer_block.v_refcursor',
            '     INTO outer_block.v_refcur_rec;',
            'END IF;',
            '',
            '-- Exit when no more rows to fetch',
            'EXIT WHEN NOT FOUND;',
            'outer_block.v_rows_fetched := outer_block.v_rows_fetched + 1;',
            '',
            '-- Inserting column value into "dbms_sql$recordset" table',
            'EXECUTE',
            quote_literal(concat_ws(chr(10),
            'INSERT INTO dbms_sql$recordset (cursor_id,',
            '                                 rownum,',
            '                                 column_pos,',
            '                                 chr_val,',
            '                                 num_val,',
            '                                 dprec_val,',
            '                                 money_val,',
            '                                 tstamp_val,',
            '                                 tstamptz_val,',
            '                                 timetz_val,',
            '                                 interval_val,',
            '                                 bool_val,',
            '                                 xml_val,',
            '                                 bin_val)',
            ' SELECT $1,',
            '        $2,',
            '        colpos,',
            v_coldtype_cases, -- Coltypes distribution CASEs
            '   FROM (SELECT generate_series(1, $3) AS colpos,',
            '                dynsql.*',
            concat('           FROM (SELECT ',
            (SELECT string_agg(concat('$', col_num), concat(',', chr(10), repeat(' ', 24)))
               FROM generate_series(4, v_cols_count + 3) AS col_num)), -- List of consecutive column placeholders ($4, $5, ...)
            format('                ) AS dynsql (%s)', trim(v_col_aliases)), -- List of consecutive column aliases
            '        ) AS dynsql2')),
            'USING outer_block.v_cursor_id,',
            '      outer_block.v_rows_fetched,',
            '      outer_block.v_cols_count,',
            concat(v_col_names2, ';'),
            'END LOOP;',
            '',
            '-- Getting cursor metadata (JSON) object',
            'outer_block.v_cur_metadata :=',
            '    nullif(current_setting(format(''sct$dbms_sql.cursor_id_%s_metadata'',',
            '                                  outer_block.v_cursor_id), TRUE), '''');',
            '',
            '-- Setting "rows_count" (JSON) cursor property',
            'outer_block.v_cur_metadata := jsonb_set(outer_block.v_cur_metadata, ''{rows_count}'',',
            '                                        to_jsonb(outer_block.v_rows_fetched));',
            '',
            '-- Saving cursor metadata (JSON) object',
            'PERFORM set_config(format(''sct$dbms_sql.cursor_id_%s_metadata'', outer_block.v_cursor_id),',
            '                   outer_block.v_cur_metadata::TEXT, -- cursor metadata object',
            '                   FALSE);',
            'END; $dbms_sql$');

    EXECUTE v_prepdynsql_block; -- Will be saved into `dbms_sql$cursor` table if "v_debug_mode" is set to "ON" (1)

    -- Closing source REFCURSOR
    CLOSE p_refcursor;

    /* Logging of all dynamically generated scripts
       into `dbms_sql$cursor` if debug mode is "ON" */
    IF (v_debug_mode) THEN
        UPDATE dbms_sql$cursor
           SET colstype_block = v_colstype_block,
               prepdynsql_block = v_prepdynsql_block
         WHERE cursor_id = v_cursor_id;
    END IF;

    -- Setting `last_affected_cursor_id` variable
    PERFORM set_config('sct$dbms_sql.last_affected_cursor_id', v_cursor_id::TEXT, FALSE);

    -- Setting `last_row_count` variable
    PERFORM set_config('sct$dbms_sql.last_row_count', v_last_row_count::TEXT, FALSE);

    RETURN v_cursor_id;
EXCEPTION
    -- The REFCURSOR is not opened or NULL
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := 'Invalid cursor.',
                    DETAIL := 'Could not transform a not opened REFCURSOR into DBMS_SQL cursor number.',
                    HINT := '-1001';

    -- Duplicate column names in REFCURSOR
    WHEN duplicate_column THEN
        RAISE USING MESSAGE := 'Duplicate column name.',
                    DETAIL := 'The same column name was listed in REFCURSOR more than once, or some columns do not have assigned names.',
                    HINT := '-957';

    -- Some syntax error occurred
    WHEN syntax_error THEN
        GET STACKED DIAGNOSTICS v_err_message = MESSAGE_TEXT,
                                v_err_stack = PG_EXCEPTION_CONTEXT;

        RAISE USING MESSAGE := 'Syntax error has occured while trying to transform REFCURSOR into a DBMS_SQL cursor number.',
                    DETAIL := concat(v_err_message, '.'),
                    HINT := concat('(Call Stack)', chr(10), v_err_stack);
END;
]]></complex-attribute>
                        <category _I_D="10dd6778-8afd-41e5-8080-c2cc168b3800" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e391923f-9126-40a5-9b9c-51c73f7cb8e4" name="dbms_sql$to_refcursor" subcategories-loading="none" object-loading="extended" context="dbms_sql$to_refcursor" is-trigger-function="0" unique-function-name="dbms_sql$to_refcursor" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="refcursor" function-arguments="p_cursor_id integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304475" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$to_refcursor(p_cursor_id integer)" comment="This function takes an opened, parsed and executed cursor and transforms/migrates it into a PL/pgSQL manageable REFCURSOR that can be consumed by any PL/pgSQL function. This subprogram is only used with SELECT cursors.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
    v_curr_row INTEGER;
    v_rows_fetched INTEGER;
    v_coldtype_casts VARCHAR;
    v_colnames_cases VARCHAR;
    v_colnames_list VARCHAR;
    v_resrecset_sql TEXT;
    v_current_user_oid BIGINT;
    v_sql_function_code SMALLINT;
    v_res_refcursor REFCURSOR := format('sct-dbms_sql$cur_id_%s_recset', p_cursor_id);
BEGIN
    -- Checking that cursor is opened (exit if it is not)
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    END IF;

    -- Obtaining current user OID
    v_current_user_oid := aws_oracle_ext.get_user_oid_by_name(current_user);

    -- Getting cursor metadata (JSON) object
    v_cur_metadata := nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id), TRUE), '');

    /* Checking that effective user OID (current_user) of the caller on this cursor is the same
       as that of the caller of the most recent parse operation on this cursor.
       Actual for cursors opened with security level 2 */
    IF ((v_cur_metadata ->> 'security_level')::SMALLINT = 2 AND
        (v_cur_metadata ->> 'parse_user_oid')::BIGINT != v_current_user_oid)
    THEN
        RAISE invalid_role_specification;
    END IF;

    -- Getting dynamic SQL function code
    v_sql_function_code := aws_oracle_ext.dbms_sql$last_sql_function_code(p_cursor_id);

    /* Cursor rows count should not be empty (NULL),
       or of type other than SELECT (func_code 4) */
    IF ((v_cur_metadata ->> 'rows_count') IS NULL OR
         v_sql_function_code != 4)
    THEN
        -- ORA-01001: invalid cursor
        RAISE null_value_not_allowed;
    END IF;

    -- Getting num of rows already fetched from DBMS_SQL cursor
    v_rows_fetched := coalesce((v_cur_metadata ->> 'curr_row')::INTEGER, 0);

    BEGIN
        -- Getting column info (list of names, data type casts, column position cases)
        SELECT string_agg(format('CAST("%s" AS %s)',
                                 col_name,
                                 CASE
                                    WHEN data_type IN ('CHARACTER',
                                                       'CHARACTER VARYING')
                                    THEN concat(data_type, '(' || chr_max_len || ')')
                                    WHEN (data_type ~* '^\s*TIME' OR
                                          data_type = 'INTERVAL')
                                    THEN format(CASE data_type
                                                   WHEN 'TIMESTAMP WITHOUT TIME ZONE' THEN 'TIMESTAMP(%s) WITHOUT TIME ZONE'
                                                   WHEN 'TIMESTAMP WITH TIME ZONE' THEN 'TIMESTAMP(%s) WITH TIME ZONE'
                                                   WHEN 'TIME WITHOUT TIME ZONE' THEN 'TIME(%s) WITHOUT TIME ZONE'
                                                   WHEN 'TIME WITH TIME ZONE' THEN 'TIME(%s) WITH TIME ZONE'
                                                   ELSE 'INTERVAL(%s)'
                                                END, /* default precision for time fraction is 6 */
                                                coalesce(tstamp_precision, interval_precision, 6))
                                    ELSE data_type
                                 END),
                          concat(',', chr(10), repeat(' ', 7))),
               string_agg(format(concat_ws(chr(10),
                                           '(array_agg(CASE column_pos',
                                           repeat(' ', 28) || 'WHEN %s THEN %s',
                                           repeat(' ', 26) || 'END))[%s]'),
                                 column_pos,
                                 CASE base_type
                                    WHEN 'TEXT' THEN 'chr_val'
                                    WHEN 'NUMERIC' THEN 'num_val'
                                    WHEN 'DOUBLE PRECISION' THEN 'dprec_val'
                                    WHEN 'MONEY' THEN 'money_val'
                                    WHEN 'TIMESTAMP WITHOUT TIME ZONE' THEN 'tstamp_val'
                                    WHEN 'TIMESTAMP WITH TIME ZONE' THEN 'tstamptz_val'
                                    WHEN 'TIME WITH TIME ZONE' THEN 'timetz_val'
                                    WHEN 'INTERVAL' THEN 'interval_val'
                                    WHEN 'BOOLEAN' THEN 'bool_val'
                                    WHEN 'XML' THEN 'xml_val'
                                    WHEN 'BYTEA' THEN 'bin_val'
                                 END,
                                 column_pos),
                          concat(',', chr(10), repeat(' ', 15))),
               string_agg(format('"%s"', col_name),
                          concat(',', chr(10), repeat(' ', 24)))
          INTO v_coldtype_casts,
               v_colnames_cases,
               v_colnames_list -- Comma-separated list of column names
          FROM dbms_sql$cursor_column
         WHERE cursor_id = p_cursor_id;
    EXCEPTION
        WHEN insufficient_privilege THEN
            -- Effective userid changed
            RAISE invalid_cursor_state;
    END;

    -- Constructing query to extract data (as dataset) into REFCURSOR
    v_resrecset_sql :=
        format(concat_ws(chr(10),
                   'SELECT ' || v_coldtype_casts,
                   '  FROM (SELECT ' || v_colnames_cases,
                   '          FROM dbms_sql$recordset',
                   '         WHERE cursor_id = %s',
                   '           AND rownum > %s',
                   '         GROUP BY rownum',
                   '       ) AS record_set (%s)'),
               p_cursor_id,
               v_rows_fetched,
               v_colnames_list);

    -- Opening REFCURSOR for dymanic SQL query resulting data
    OPEN v_res_refcursor SCROLL FOR EXECUTE v_resrecset_sql;

    -- Closing the DBMS_SQL cursor and nulling its context
    PERFORM aws_oracle_ext.dbms_sql$close_cursor(p_cursor_id);

    -- Setting `last_row_count` variable
    PERFORM set_config('sct$dbms_sql.last_row_count', v_rows_fetched::TEXT, FALSE);

    RETURN v_res_refcursor;
EXCEPTION
    -- Cursor is not opened or does not exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := 'DBMS_SQL access denied.',
                    DETAIL := 'DBMS_SQL access was denied due to security concerns.',
                    HINT := '-29471';

    -- DBMS_SQL cursor rows count is NULL or func_code != 4 (SELECT)
    WHEN null_value_not_allowed THEN
        RAISE USING MESSAGE := 'Invalid cursor.',
                    DETAIL := 'Dynamic SQL statement was not executed or is not a valid SELECT query.',
                    HINT := '-1001';

    -- Effective userid (OID) changed since cursor parse
    WHEN invalid_role_specification THEN
        RAISE USING MESSAGE := 'Effective userid is not the same as when cursor was parsed.',
                    DETAIL := 'The effective userid on this call to DBMS_SQL is not the same as that at the time the cursor was parsed.',
                    HINT := '-29470';
END;
]]></complex-attribute>
                        <category _I_D="da8d1535-2856-4283-a7ea-b426f310b148" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="38a7b15a-7d30-4895-8b1b-54f1ed127137" name="dbms_sql$variable_value" subcategories-loading="none" object-loading="extended" context="dbms_sql$variable_value" is-trigger-function="0" unique-function-name="dbms_sql$variable_value" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,text,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_cursor_id integer, p_var_name text, INOUT p_var_value anyelement" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304479" volatility="STABLE" is-window="f" function-identity-arguments="p_cursor_id integer, p_var_name text, INOUT p_var_value anyelement" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$variable_value(p_cursor_id integer, p_var_name text, INOUT p_var_value anyelement)" comment="This procedure returns the value of the named variable for a given cursor. It is used to return the values of bind variables inside PL/pgSQL blocks or DML statements with returning clause.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_var_info TEXT[];
    v_chr_val TEXT;
    v_num_val NUMERIC;
    v_dprec_val DOUBLE PRECISION;
    v_money_val MONEY;
    v_tstamp_val TIMESTAMP WITHOUT TIME ZONE;
    v_tstamptz_val TIMESTAMP WITH TIME ZONE;
    v_timetz_val TIME WITH TIME ZONE;
    v_interval_val INTERVAL;
    v_bool_val BOOLEAN;
    v_xml_val XML;
    v_bin_val BYTEA;
    v_is_fixed SMALLINT;
    v_value_size INTEGER;
    v_out_var_size INTEGER;
    v_bind_var_data_t TEXT;
    v_bind_var_base_t TEXT;
    v_out_var_base_t TEXT;
    v_out_var_data_t TEXT;
    v_cur_metadata JSONB;
    v_current_user_oid BIGINT;
BEGIN
    -- Checking that cursor is opened (exit if it is not)
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    -- Variable name should not be empty or blank (null)
    ELSIF (nullif(trim(p_var_name), '') IS NULL) THEN
        RAISE no_data_found;
    END IF;

    -- Obtaining current user OID
    v_current_user_oid := aws_oracle_ext.get_user_oid_by_name(current_user);

    -- Getting cursor metadata (JSON) object
    v_cur_metadata := nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id), TRUE), '');

    /* Checking that effective user OID (current_user) of the caller on this cursor is the same
       as that of the caller of the most recent parse operation on this cursor.
       Actual for cursors opened with security level 2 */
    IF ((v_cur_metadata ->> 'security_level')::SMALLINT = 2 AND
        (v_cur_metadata ->> 'parse_user_oid')::BIGINT != v_current_user_oid)
    THEN
        RAISE invalid_role_specification;
    END IF;

    v_out_var_data_t := upper(pg_typeof(p_var_value)::TEXT);

    -- Determining base data type of passed variable
    v_out_var_base_t := aws_oracle_ext.get_base_type_by_dtype(v_out_var_data_t);

    -- Extracting variable info (label in statement code and general name) from supplied string
    v_var_info := regexp_matches(p_var_name, '^((?:\s*\$\d+\s*(?:\|)?)+)*\s*\:?([[:alnum:]_]+)\s*$', 'gi');

    BEGIN
        /* Extracting var data from `dbms_sql$bind_variable`
           (by cursor id and variable name) */
        SELECT data_type,
               base_type,
               value_size,
               is_fixed,
               chr_val,
               num_val,
               dprec_val,
               money_val,
               tstamp_val,
               tstamptz_val,
               timetz_val,
               interval_val,
               bool_val,
               xml_val,
               bin_val
          INTO STRICT
               v_bind_var_data_t,
               v_bind_var_base_t,
               v_value_size,
               v_is_fixed,
               v_chr_val,
               v_num_val,
               v_dprec_val,
               v_money_val,
               v_tstamp_val,
               v_tstamptz_val,
               v_timetz_val,
               v_interval_val,
               v_bool_val,
               v_xml_val,
               v_bin_val
          FROM dbms_sql$bind_variable
         WHERE cursor_id = p_cursor_id
           AND var_name = v_var_info[2]; -- Variable name
    EXCEPTION
        WHEN insufficient_privilege THEN
            -- Effective userid changed
            RAISE invalid_cursor_state;
    END;

    -- Check if OUT argument base type matches declared bind variable base type
    IF ((substring(v_out_var_base_t, 1, 14) != substring(v_bind_var_base_t, 1, 14) AND -- TIMESTAMPs
         substring(v_out_var_base_t, 1, 5) != substring(v_bind_var_base_t, 1, 5) AND -- TIMEs
         (substring(v_out_var_data_t, 1, 5) != 'TIME ' AND
          substring(v_bind_var_data_t, 1, 10) != 'TIMESTAMP ') AND
         NOT (v_bind_var_base_t IN ('NUMERIC',
                                    'DOUBLE PRECISION') AND
              v_out_var_base_t IN ('NUMERIC',
                                   'DOUBLE PRECISION'))) OR
           (substring(v_bind_var_data_t, 1, 5) = 'TIME ' AND
            (substring(v_out_var_data_t, 1, 10) = 'TIMESTAMP ' OR
             v_out_var_data_t = 'DATE')))
    THEN
        RAISE datatype_mismatch;
    -- Variable should not be declared using `dbms_sql$bind_variable_char`
    ELSIF (v_is_fixed = 1) THEN
        RAISE datatype_mismatch;
    END IF;

    -- Copying value into the OUT argument
    CASE v_out_var_base_t
       WHEN 'TEXT' THEN
           IF (v_value_size != 0 AND v_value_size < char_length(v_chr_val)) THEN
               -- ORA-06502: PL/SQL: numeric or value error
               RAISE numeric_value_out_of_range;
           END IF;

           IF (v_out_var_data_t = 'CHARACTER') THEN
               v_out_var_size := coalesce(length(p_var_value::BYTEA, pg_client_encoding()), 0);

               IF (v_out_var_size != 0 AND v_out_var_size < char_length(v_chr_val)) THEN
                   /* ORA-06502: PL/SQL: numeric or value error.
                      Character string buffer too small */
                   RAISE string_data_length_mismatch;
               END IF;
           END IF;

           p_var_value := v_chr_val;
       WHEN 'NUMERIC' THEN
           IF (v_bind_var_base_t = 'NUMERIC') THEN
               p_var_value := v_num_val;
           ELSE
               p_var_value := v_dprec_val;
           END IF;
       WHEN 'DOUBLE PRECISION' THEN
           IF (v_bind_var_base_t = 'DOUBLE PRECISION') THEN
               p_var_value := v_dprec_val;
           ELSE
               p_var_value := v_num_val;
           END IF;
       WHEN 'MONEY' THEN
           p_var_value := v_money_val;
       WHEN 'TIMESTAMP WITHOUT TIME ZONE' THEN
           CASE v_bind_var_base_t
              WHEN 'TIMESTAMP WITHOUT TIME ZONE' THEN
                  p_var_value := v_tstamp_val;
              WHEN 'TIMESTAMP WITH TIME ZONE' THEN
                  p_var_value := v_tstamptz_val;
              ELSE
                  p_var_value := v_timetz_val;
           END CASE;
       WHEN 'TIMESTAMP WITH TIME ZONE' THEN
           p_var_value := CASE v_bind_var_base_t
                             WHEN 'TIMESTAMP WITHOUT TIME ZONE' THEN v_tstamp_val::TIMESTAMPTZ
                             ELSE v_tstamptz_val
                          END;
       WHEN 'TIME WITH TIME ZONE' THEN
           p_var_value := CASE v_bind_var_base_t
                             WHEN 'TIMESTAMP WITHOUT TIME ZONE' THEN v_tstamp_val::TIME::TIMETZ
                             WHEN 'TIMESTAMP WITH TIME ZONE' THEN v_tstamptz_val::TIMETZ
                             ELSE v_timetz_val
                          END;
       WHEN 'INTERVAL' THEN
           p_var_value := v_interval_val;
       WHEN 'BOOLEAN' THEN
           p_var_value := v_bool_val;
       WHEN 'XML' THEN
           p_var_value := v_xml_val;
       WHEN 'BYTEA' THEN
           p_var_value := CASE
                             WHEN v_value_size IS NULL THEN v_bin_val
                             ELSE substring(v_bin_val from 1 for v_value_size)
                          END;
       ELSE
           p_var_value := NULL;
    END CASE;
EXCEPTION
    -- Cursor is not opened or does not exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := 'DBMS_SQL access denied.',
                    DETAIL := 'DBMS_SQL access was denied due to security concerns.',
                    HINT := '-29471';

    -- Bind variable does not exist
    WHEN no_data_found THEN
        RAISE USING MESSAGE := 'Bind variable does not exist.',
                    DETAIL := 'Call for a bind variable that was not listed in the corresponding SQL statement.',
                    HINT := '-1006';

    /* OUT argument base type does not match bind variable declared base type.
       Variable was declared through `dbms_sql$bind_variable_char` */
    WHEN datatype_mismatch THEN
        RAISE USING MESSAGE := 'Type of OUT argument does not match declared type of bind variable.',
                    DETAIL := 'Attempting to get the value of a bind variable but the type of the given OUT argument is different from the type of bind variable that was defined previously.',
                    HINT := '-6562';

    -- Variable value length exceeds declared OUT value size
    WHEN numeric_value_out_of_range THEN
        RAISE USING MESSAGE := 'Variable value length exceeds declared OUT value size.',
                    DETAIL := format('Variable value length: %s, declared variable OUT value size: %s.',
                                     char_length(v_chr_val), v_value_size),
                    HINT := '-6502';

    -- Length of OUT argument is too small
    WHEN string_data_length_mismatch THEN
        RAISE USING MESSAGE := 'Character string buffer too small.',
                    DETAIL := 'Length of OUT argument is too small to store bind variable value.',
                    HINT := '-6502';

    -- Effective userid (OID) changed since cursor parse
    WHEN invalid_role_specification THEN
        RAISE USING MESSAGE := 'Effective userid is not the same as when cursor was parsed.',
                    DETAIL := 'The effective userid on this call to DBMS_SQL is not the same as that at the time the cursor was parsed.',
                    HINT := '-29470';
END;
]]></complex-attribute>
                        <category _I_D="e5ac2c2e-756d-4d43-8b2a-ffb55c3bfdef" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c04787e9-e5e6-4426-9be4-7cab320959c2" name="dbms_sql$variable_value_char" subcategories-loading="none" object-loading="extended" context="dbms_sql$variable_value_char" is-trigger-function="0" unique-function-name="dbms_sql$variable_value_char" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,text,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_cursor_id integer, p_var_name text, INOUT p_var_value anyelement" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304477" volatility="STABLE" is-window="f" function-identity-arguments="p_cursor_id integer, p_var_name text, INOUT p_var_value anyelement" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$variable_value_char(p_cursor_id integer, p_var_name text, INOUT p_var_value anyelement)" comment="This procedure returns the value of the named variable for a given cursor. It is used to return the values of bind variables inside PL/pgSQL blocks or DML statements with returning clause.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_var_info TEXT[];
    v_chr_val TEXT;
    v_is_fixed SMALLINT;
    v_var_size INTEGER;
    v_value_size INTEGER;
    v_out_var_size INTEGER;
    v_out_var_base_t TEXT;
    v_out_var_data_t TEXT;
    v_cur_metadata JSONB;
    v_current_user_oid BIGINT;
BEGIN
    -- Checking that cursor is opened (exit if it is not)
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    -- Variable name should not be empty or blank (null)
    ELSIF (nullif(trim(p_var_name), '') IS NULL) THEN
        RAISE no_data_found;
    END IF;

    -- Obtaining current user OID
    v_current_user_oid := aws_oracle_ext.get_user_oid_by_name(current_user);

    -- Getting cursor metadata (JSON) object
    v_cur_metadata := nullif(current_setting(format('sct$dbms_sql.cursor_id_%s_metadata', p_cursor_id), TRUE), '');

    /* Checking that effective user OID (current_user) of the caller on this cursor is the same
       as that of the caller of the most recent parse operation on this cursor.
       Actual for cursors opened with security level 2 */
    IF ((v_cur_metadata ->> 'security_level')::SMALLINT = 2 AND
        (v_cur_metadata ->> 'parse_user_oid')::BIGINT != v_current_user_oid)
    THEN
        RAISE invalid_role_specification;
    END IF;

    v_out_var_data_t := upper(pg_typeof(p_var_value)::TEXT);

    -- Determining base data type of passed variable
    v_out_var_base_t := aws_oracle_ext.get_base_type_by_dtype(v_out_var_data_t);

    -- Extracting variable info (label in statement code and general name) from supplied string
    v_var_info := regexp_matches(p_var_name, '^((?:\s*\$\d+\s*(?:\|)?)+)*\s*\:?([[:alnum:]_]+)\s*$', 'gi');

    BEGIN
        /* Extracting var data from "dbms_sql$bind_variable"
           (by cursor id and variable name) */
        SELECT var_size,
               value_size,
               is_fixed,
               chr_val
          INTO STRICT
               v_var_size,
               v_value_size,
               v_is_fixed,
               v_chr_val
          FROM dbms_sql$bind_variable
         WHERE cursor_id = p_cursor_id
           AND var_name = v_var_info[2]; -- Variable name
    EXCEPTION
        WHEN insufficient_privilege THEN
            -- Effective userid changed
            RAISE invalid_cursor_state;
    END;

    -- Variable should not be declared using `dbms_sql$bind_variable`
    IF (coalesce(v_is_fixed, 0) != 1) THEN
        RAISE most_specific_type_mismatch;
    END IF;

    -- Copying value into the OUT argument
    CASE v_out_var_base_t
       WHEN 'TEXT' THEN
           IF (v_value_size != 0 AND v_value_size < char_length(v_chr_val)) THEN
               -- ORA-06502: PL/SQL: numeric or value error
               RAISE numeric_value_out_of_range;
           END IF;

           IF (v_out_var_data_t = 'CHARACTER') THEN
               v_out_var_size := coalesce(length(p_var_value::BYTEA, pg_client_encoding()), 0);

               IF (v_out_var_size != 0 AND v_out_var_size < char_length(v_chr_val)) THEN
                   /* ORA-06502: PL/SQL: numeric or value error.
                      Character string buffer too small */
                   RAISE string_data_length_mismatch;
               END IF;
           END IF;

           p_var_value := v_chr_val;
       WHEN 'NUMERIC' THEN
           p_var_value := v_chr_val::NUMERIC;
       WHEN 'DOUBLE PRECISION' THEN
           p_var_value := v_chr_val::DOUBLE PRECISION;
       WHEN 'MONEY' THEN
           p_var_value := v_chr_val::MONEY;
       WHEN 'TIMESTAMP WITHOUT TIME ZONE' THEN
           CASE v_out_var_data_t
              WHEN 'DATE'
              THEN
                  v_chr_val := regexp_replace(v_chr_val, '\s+', '', 'gi');

                  IF (char_length(v_chr_val) < 8) THEN
                      RAISE invalid_datetime_format;
                  END IF;

                  p_var_value := to_date(v_chr_val, 'dd-MON-yy');
              WHEN 'TIME WITHOUT TIME ZONE'
              THEN
                  v_chr_val := regexp_replace(v_chr_val, '\s*[AP]M', '', 'i');

                  IF (char_length(v_chr_val) < 8) THEN
                      RAISE invalid_datetime_format;
                  END IF;

                  p_var_value := v_chr_val::TIME;
              ELSE -- TIMESTAMP WITHOUT TIME ZONE
                  v_chr_val := trim(regexp_replace(v_chr_val, '\s*[AP]M', '', 'i'));

                  IF (char_length(v_chr_val) < 17) THEN
                      RAISE invalid_datetime_format;
                  END IF;

                  p_var_value := v_chr_val::TIMESTAMP;
              END CASE;
       WHEN 'TIMESTAMP WITH TIME ZONE' THEN
           v_chr_val := trim(regexp_replace(v_chr_val, '\s*[AP]M', '', 'i'));

           IF (char_length(v_chr_val) < 17) THEN
               RAISE invalid_datetime_format;
           END IF;

           p_var_value := to_timestamp(v_chr_val, 'dd-MON-yy hh24:mi:ss.us');
       WHEN 'TIME WITH TIME ZONE' THEN
           IF (char_length(v_chr_val) < 8) THEN
               RAISE invalid_datetime_format;
           END IF;

           p_var_value := v_chr_val::TIMETZ;
       WHEN 'INTERVAL' THEN
           p_var_value := v_chr_val::INTERVAL;
       WHEN 'BOOLEAN' THEN
           p_var_value := v_chr_val::BOOLEAN;
       WHEN 'XML' THEN
           BEGIN
               p_var_value := v_chr_val::XML;
           EXCEPTION
               WHEN OTHERS THEN
               RAISE invalid_xml_document;
           END;
       WHEN 'BYTEA' THEN
           BEGIN
               p_var_value := decode(v_chr_val, 'hex');
           EXCEPTION
               WHEN OTHERS THEN
               RAISE invalid_binary_representation;
           END;
       ELSE
           p_var_value := NULL;
    END CASE;
EXCEPTION
    -- Cursor is not opened or does not exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := 'DBMS_SQL access denied.',
                    DETAIL := 'DBMS_SQL access was denied due to security concerns.',
                    HINT := '-29471';

    -- Bind variable does not exist
    WHEN no_data_found THEN
        RAISE USING MESSAGE := 'Bind variable does not exist.',
                    DETAIL := 'Call for a bind variable that was not listed in the corresponding SQL statement.',
                    HINT := '-1006';

    -- Length of OUT argument is too small
    WHEN string_data_length_mismatch THEN
        RAISE USING MESSAGE := 'Character string buffer too small.',
                    DETAIL := 'Length of OUT argument is too small to store bind variable value.',
                    HINT := '-6502';

    -- Variable value length exceeds declared OUT value size
    WHEN numeric_value_out_of_range THEN
        RAISE USING MESSAGE := 'Variable value length exceeds declared OUT value size.',
                    DETAIL := format('Variable value length: %s, declared variable OUT value size: %s.',
                                     char_length(v_chr_val), v_value_size),
                    HINT := '-6502';

    /* OUT argument base type does not match bind variable declared base type.
       Variable was declared through `dbms_sql$bind_variable` */
    WHEN most_specific_type_mismatch THEN
        RAISE USING MESSAGE := 'Type of OUT argument does not match declared type of bind variable.',
                    DETAIL := 'Attempting to get the value of a bind variable but the type of the given OUT argument is different from the type of bind variable that was defined previously.',
                    HINT := '-6562';

    -- Effective userid (OID) changed since cursor parse
    WHEN invalid_role_specification THEN
        RAISE USING MESSAGE := 'Effective userid is not the same as when cursor was parsed.',
                    DETAIL := 'The effective userid on this call to DBMS_SQL is not the same as that at the time the cursor was parsed.',
                    HINT := '-29470';

    -- Possible data type conversion error (char to numeric\money)
    WHEN invalid_text_representation THEN
        RAISE USING MESSAGE := 'Error during variable value conversion (from char to numeric\money).',
                    DETAIL := format('Value %s is not correct for conversion to numeric\money.',
                                     quote_literal(v_chr_val));

    -- Possible data type conversion error (char to datetime\interval)
    WHEN invalid_datetime_format THEN
        RAISE USING MESSAGE := 'Error during variable value conversion (from char to datetime\interval).',
                    DETAIL := format('Value %s is not correct for conversion to datetime\interval.',
                                     quote_literal(v_chr_val));

    -- Possible data type conversion error (char to binary data)
    WHEN invalid_binary_representation THEN
        RAISE USING MESSAGE := 'Error during variable value conversion (from char to binary data).',
                    DETAIL := format('Value %s is not correct for conversion to binary data.',
                                     quote_literal(v_chr_val));

    -- Possible data type conversion error (char to XML document)
    WHEN invalid_xml_document THEN
        RAISE USING MESSAGE := 'Error during variable value conversion (from char to XML document).',
                    DETAIL := format('Value %s is not correct for conversion to XML document.',
                                     quote_literal(v_chr_val));
END;
]]></complex-attribute>
                        <category _I_D="5f680c02-9677-4848-be78-c12143d52232" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9c72f900-cadf-4aea-96d4-01b0844a2c60" name="dbms_types" subcategories-loading="none" object-loading="extended" context="dbms_types" is-trigger-function="0" unique-function-name="dbms_types" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="int4" function-arguments="typecode character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304481" volatility="IMMUTABLE" is-window="f" function-identity-arguments="typecode character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_types(typecode character varying)" comment="Returns type code constant like DBMS_TYPES package">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  l_typecodes json = '{"TYPECODE_DATE":"12" 
		       ,"TYPECODE_NUMBER":"2"
		       ,"TYPECODE_RAW":"95"
		       ,"TYPECODE_CHAR":"96"
		       ,"TYPECODE_VARCHAR2":"9"
		       ,"TYPECODE_VARCHAR":"1"
		       ,"TYPECODE_MLSLABEL":"105"
		       ,"TYPECODE_BLOB":"113"
		       ,"TYPECODE_BFILE":"114"
		       ,"TYPECODE_CLOB":"112"
		       ,"TYPECODE_CFILE":"115"
		       ,"TYPECODE_TIMESTAMP":"187"
		       ,"TYPECODE_TIMESTAMP_TZ":"188"
		       ,"TYPECODE_TIMESTAMP_LTZ":"232"
		       ,"TYPECODE_INTERVAL_YM":"189"
		       ,"TYPECODE_INTERVAL_DS":"190"
		       ,"TYPECODE_REF":"110"
		       ,"TYPECODE_OBJECT":"108"
		       ,"TYPECODE_VARRAY":"247"
		       ,"TYPECODE_TABLE":"248"
		       ,"TYPECODE_NAMEDCOLLECTION":"122"
		       ,"TYPECODE_OPAQUE":"58"
		       ,"TYPECODE_NCHAR":"286"
		       ,"TYPECODE_NVARCHAR2":"287"
		       ,"TYPECODE_NCLOB":"288"
		       ,"TYPECODE_BFLOAT":"100"
		       ,"TYPECODE_BDOUBLE":"101"
		       ,"TYPECODE_UROWID":"104"
		       ,"SUCCESS":"0"
		       ,"NO_DATA":"100"
		       ,"oidvector":"247"
		       ,"int2vector":"247"		       		       
		       ,"date":"12"
		       ,"timestamptz":"188"		       		       
		       ,"timestamp":"187"
		       ,"numeric":"2"		       		       
		       ,"int8":"2"
		       ,"int4":"2"		       		       
		       ,"int2":"2"
		       ,"oid":"2"		       		       
		       ,"float4":"2"
		       ,"float8":"2"		       		       
		       ,"money":"2"
		       ,"varchar":"9"		       		       
		       ,"text":"112"
		       ,"bpchar":"96"		       		       
		       ,"interval":"189"		       		       
		       ,"tinterval":"189"
		       ,"varbit":"9"		       		       
		       ,"bit":"96"
		       ,"bytea":"112"		       		       
		       }'; 
BEGIN
  return l_typecodes->>TYPECODE;
END;
]]></complex-attribute>
                        <category _I_D="dd36e2ba-7787-42aa-aa48-c4e8d5a8c69a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a3124d5e-cf5f-409f-9102-4e66e580b9c8" name="dbms_utility$current_instance" subcategories-loading="none" object-loading="extended" context="dbms_utility$current_instance" is-trigger-function="0" unique-function-name="dbms_utility$current_instance" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304363" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_utility$current_instance()" comment="This function returns the current connected instance number.">
                        <complex-attribute name="sql"><![CDATA[
SELECT 1
]]></complex-attribute>
                        <category _I_D="3607e9c4-524d-4b72-b2f7-ae0de9cdaa3b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="91d45201-b11d-43b4-9c0c-4156a638eb10" name="dbms_utility$format_call_stack" subcategories-loading="none" object-loading="extended" context="dbms_utility$format_call_stack" is-trigger-function="0" unique-function-name="dbms_utility$format_call_stack" is-aggregate="f" language-name="plpgsql" arguments-datatypes="boolean" is-returning-set="f" ret-datatype="text" function-arguments="p_ora_style boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304364" volatility="VOLATILE" is-window="f" function-identity-arguments="p_ora_style boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_utility$format_call_stack(p_ora_style boolean)" comment="This function formats the current call stack. This can be used on any function or stored procedure to access the call stack.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_server_pid TEXT;
    v_obj_handle TEXT;
    v_schema_name TEXT;
    v_routine_name TEXT;
    v_routine_type TEXT;
    v_routine_oid TEXT;
    i_param_type TEXT;
    v_call_stack TEXT[];
    v_call_info TEXT[];
    v_param_types TEXT;
    v_stack_header TEXT;
    v_search_path TEXT[];
    v_pg_call_stack TEXT;
    v_anonymous_block TEXT;
    v_call_stack_rec TEXT;
    v_full_search_path TEXT[];
    i_call_stack_rec RECORD;
BEGIN
    -- Determining call stack label depending on Oracle style param
    v_stack_header := CASE
                         WHEN p_ora_style THEN '------- PL/SQL Call Stack -------'
                         ELSE '------ PL/pgSQL Call Stack ------'
                      END;

    -- Determining anonymous block label depending on Oracle style param
    v_anonymous_block := CASE
                            WHEN p_ora_style THEN 'anonymous block'
                            ELSE 'inline_code_block'
                         END;

    -- Constructing call stack header
    v_call_stack := ARRAY[v_stack_header,
                          '    object       line  object',
                          '    handle     number  name'];

    -- Obtaining current search path
    v_search_path := regexp_split_to_array(replace(current_setting('search_path'),
                                                   '$user', current_user), '\s*,\s*');
    -- Getting server process ID
    v_server_pid = pg_backend_pid();

    -- Getting current call stack
    GET DIAGNOSTICS v_pg_call_stack = PG_CONTEXT;

    FOR i_call_stack_rec IN
    (SELECT t.*
       FROM regexp_split_to_table(v_pg_call_stack, chr(10))
       WITH ORDINALITY AS t(call_stack, line_num))
    LOOP
        CONTINUE WHEN i_call_stack_rec.line_num = 1 OR
                      i_call_stack_rec.call_stack !~ 'line \d+ at';

        -- Obtaining info regarding particular stack call
        v_call_info := regexp_matches(i_call_stack_rec.call_stack,
                                      '^[[:alnum:]_/]+\s+([a-z]+)\s+(.*)(?<=[^\s])\s+line\s+(\d+)', 'g');
        v_routine_oid := NULL;

        v_routine_type := v_call_info[1];

        -- Extracting param types list from routine signature
        v_param_types := substring(v_call_info[2], '\((.*)\)$');

        -- Extracting schema name from `schema.["]routine["]`
        v_schema_name := substring(v_call_info[2], '^(.+)\.');

        -- Extracting routine name from `schema.["]routine["]`(params)
        v_routine_name := regexp_replace(v_call_info[2], '^(.+)\.|\((.*)\)$', '', 'g');

        -- Emulating Oracle anonymous block label
        IF (p_ora_style) THEN
            v_routine_name := replace(v_routine_name, 'inline_code_block', 'anonymous block');
        END IF;

        -- Determining whether call routine is a function or a procedure
        IF (v_routine_type = 'function' AND v_routine_name != 'anonymous block')
        THEN
            -- Putting stack record schema name on top of search path
            v_full_search_path := CASE
                                     WHEN v_schema_name IS NULL THEN v_search_path
                                     ELSE array_prepend(v_schema_name, v_search_path)
                                  END;
            SELECT oid,
                   CASE prokind
                      WHEN 'p' THEN 'procedure'
                      ELSE 'function'
                   END,
                   pronamespace::REGNAMESPACE::TEXT
              INTO v_routine_oid,
                   v_routine_type,
                   v_schema_name
              FROM pg_catalog.pg_proc
             WHERE proname = substring(v_routine_name, '"?([^"]+)') -- routine name
               AND pronamespace::REGNAMESPACE::TEXT = ANY(v_full_search_path) -- schema names list
               AND proargtypes = coalesce(array_to_string(string_to_array(v_param_types, ',')::REGTYPE[]::OID[],
                                          ' '), '')::OIDVECTOR -- param OIDs list
             ORDER BY array_position(v_full_search_path, pronamespace::REGNAMESPACE::TEXT) ASC
             LIMIT 1;
        END IF;

        -- Constructing object handle (server_PID.object_OID)
        v_obj_handle := concat(v_server_pid, '.' || v_routine_oid);

        -- Constructing call stack record
        v_call_stack_rec :=
            concat(rpad(repeat(' ', (14 - char_length(v_obj_handle)) / 2) || v_obj_handle, 14), -- object handle
                   ' ', -- delimiter
                   lpad(v_call_info[3], 6, ' '), -- line number
                   '  ', -- delimiter
                   CASE
                      WHEN v_routine_name !~ '^(anonymous\s|inline_code_)block$'
                      THEN v_routine_type || ' ' -- routine type
                   END,
                   CASE
                      WHEN v_schema_name ~ '^"' THEN v_schema_name
                      ELSE CASE
                              WHEN p_ora_style THEN upper(v_schema_name)
                              ELSE v_schema_name
                           END
                   END || '.', -- schema name
                   CASE
                      WHEN v_routine_name ~ '^"' OR
                           v_routine_name ~ '^(anonymous\s|inline_code_)block$'
                      THEN v_routine_name
                      ELSE CASE
                              WHEN p_ora_style THEN upper(v_routine_name)
                              ELSE v_routine_name
                           END
                   END, -- routine name
                   CASE
                      WHEN v_routine_name !~ '^(anonymous\s|inline_code_)block$'
                      THEN CASE
                              WHEN NOT p_ora_style THEN concat('(', v_param_types, ')')
                              ELSE upper('(' || nullif(v_param_types, '') || ')')
                           END
                   END);

        v_call_stack := array_append(v_call_stack, v_call_stack_rec);
    END LOOP;

    -- SQL SELECT dbms_utility$format_call_stack()
    IF (array_length(v_call_stack, 1) = 3) THEN
        v_call_stack :=
            array_append(v_call_stack,
                         rpad(repeat(' ', (14 - char_length(v_server_pid)) / 2) || v_server_pid, 14)
                         || '      1  '
                         || v_anonymous_block);
    END IF;

    RETURN array_to_string(v_call_stack, chr(10));
END;
]]></complex-attribute>
                        <category _I_D="6f038f8e-6f77-401e-9a03-0fdd24d4ddc7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b78c1544-1e98-47e0-8c49-6342e98eee14" name="dbms_utility$get_time" subcategories-loading="none" object-loading="extended" context="dbms_utility$get_time" is-trigger-function="0" unique-function-name="dbms_utility$get_time" is-aggregate="f" language-name="plv8" is-returning-set="f" ret-datatype="int8" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304092" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plv8" function-signature="dbms_utility$get_time()">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
  return Date.now() / 10;

]]></complex-attribute>
                        <category _I_D="47a887f9-192c-4c1b-947c-e538652618e6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="33adaf26-3304-4f3a-91b8-34ab2a664ef7" name="dbms_xmlgen$closecontext" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$closecontext" is-trigger-function="0" unique-function-name="dbms_xmlgen$closecontext" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="void" function-arguments="ctx numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305141" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$closecontext(ctx numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lCtx aws_oracle_ext.dbms_xmlgen$tContext;
	lnCtxHdl int := trunc(ctx);
begin
    lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

    if not lCtx is null then
        perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
                                                       ctxCursor => null,
                                                       ctxQuery => null,
                                                       ctxAttributes => null,
                                                       ctxNumRowsProcessed => null
                                                      );
    end if;
end; ]]></complex-attribute>
                        <category _I_D="3fe82230-18ab-4be0-8123-0e96c255fd68" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0d8b06b9-55dc-47f2-87f3-b99a3824f847" name="dbms_xmlgen$context2obj" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$context2obj(ctxhdl numeric)" is-trigger-function="0" unique-function-name="dbms_xmlgen$context2obj(ctxhdl numeric)" is-aggregate="f" language-name="sql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="dbms_xmlgen$tcontext" function-arguments="ctxhdl numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305136" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlgen$context2obj(ctxhdl numeric)" unique-suffix="(ctxhdl numeric)" routine-number="305136">
                        <complex-attribute name="sql"><![CDATA[ select dbms_xmlgen$context2obj(get_extpack_variable(variable_name => dbms_xmlgen$ctxIdx(trunc(ctxHdl)))) ]]></complex-attribute>
                        <category _I_D="1de0bb0a-4977-4e96-8ed9-dc6fc7916fc6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d6acd682-99b6-4eff-b0cd-fbfa58f5729f" name="dbms_xmlgen$context2obj" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$context2obj(ctxvalue text)" is-trigger-function="0" unique-function-name="dbms_xmlgen$context2obj(ctxvalue text)" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="dbms_xmlgen$tcontext" function-arguments="ctxvalue text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305135" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxvalue text" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlgen$context2obj(ctxvalue text)" unique-suffix="(ctxvalue text)" routine-number="305135">
                        <complex-attribute name="sql"><![CDATA[ select * from json_populate_record(null::dbms_xmlgen$TContext, ctxValue::json) ]]></complex-attribute>
                        <category _I_D="d61ab047-8e0c-4c91-b375-c86da461b762" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fc475804-90f1-4245-b5be-15bbfee36a22" name="dbms_xmlgen$context2text" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$context2text(ctxhdl numeric, ctxcursor refcursor, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, ctxnumrowsprocessed integer)" is-trigger-function="0" unique-function-name="dbms_xmlgen$context2text(ctxhdl numeric, ctxcursor refcursor, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, ctxnumrowsprocessed integer)" is-aggregate="f" language-name="sql" arguments-datatypes="numeric,refcursor,text,aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;,integer" is-returning-set="f" ret-datatype="text" function-arguments="ctxhdl numeric, ctxcursor refcursor, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, ctxnumrowsprocessed integer DEFAULT NULL::integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="305132" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, ctxcursor refcursor, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, ctxnumrowsprocessed integer" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlgen$context2text(ctxhdl numeric, ctxcursor refcursor, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, ctxnumrowsprocessed integer)" unique-suffix="(ctxhdl numeric, ctxcursor refcursor, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, ctxnumrowsprocessed integer)" routine-number="305132">
                        <complex-attribute name="sql"><![CDATA[ select dbms_xmlgen$context2text((ctxHdl,
                                       ctxCursor,
                                       ctxQuery,
                                       coalesce(ctxAttributes, dbms_xmlgen$contextAttr2obj()),
                                       ctxNumRowsProcessed
                                       )::dbms_xmlgen$TContext)::text ]]></complex-attribute>
                        <category _I_D="8d8aa603-1738-4468-baec-1c940952ac22" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ecf17e60-e465-42b7-94ae-54002b15e603" name="dbms_xmlgen$context2text" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$context2text(ctxvalue aws_oracle_ext.&quot;dbms_xmlgen$tcontext&quot;)" is-trigger-function="0" unique-function-name="dbms_xmlgen$context2text(ctxvalue aws_oracle_ext.&quot;dbms_xmlgen$tcontext&quot;)" is-aggregate="f" language-name="sql" arguments-datatypes="aws_oracle_ext.&quot;dbms_xmlgen$tcontext&quot;" is-returning-set="f" ret-datatype="text" function-arguments="ctxvalue aws_oracle_ext.&quot;dbms_xmlgen$tcontext&quot;" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305131" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxvalue aws_oracle_ext.&quot;dbms_xmlgen$tcontext&quot;" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlgen$context2text(ctxvalue aws_oracle_ext.&quot;dbms_xmlgen$tcontext&quot;)" unique-suffix="(ctxvalue aws_oracle_ext.&quot;dbms_xmlgen$tcontext&quot;)" routine-number="305131">
                        <complex-attribute name="sql"><![CDATA[ select row_to_json(ctxValue)::text ]]></complex-attribute>
                        <category _I_D="f3f71eab-b574-4314-8a42-8359e39215ec" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c3cbf881-56f7-490f-b5d4-8c23f850cbaa" name="dbms_xmlgen$contextattr2obj" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$contextattr2obj" is-trigger-function="0" unique-function-name="dbms_xmlgen$contextattr2obj" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="dbms_xmlgen$tctxattributes" function-arguments="ctxattr text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305130" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxattr text" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$contextattr2obj(ctxattr text)">
                        <complex-attribute name="sql"><![CDATA[ select *
            from json_populate_record(null::dbms_xmlgen$TctxAttributes,
                                      coalesce(ctxAttr, dbms_xmlgen$contextAttr2text())::json
                                     ) ]]></complex-attribute>
                        <category _I_D="6fd8b7d6-241d-446c-a97d-17f2f53c710f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="14d60e16-c164-4911-bbda-446e41ef9d95" name="dbms_xmlgen$contextattr2text" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$contextattr2text(ctxattrvalue aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;)" is-trigger-function="0" unique-function-name="dbms_xmlgen$contextattr2text(ctxattrvalue aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;)" is-aggregate="f" language-name="sql" arguments-datatypes="aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;" is-returning-set="f" ret-datatype="text" function-arguments="ctxattrvalue aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305128" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxattrvalue aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlgen$contextattr2text(ctxattrvalue aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;)" unique-suffix="(ctxattrvalue aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;)" routine-number="305128">
                        <complex-attribute name="sql"><![CDATA[ select row_to_json(ctxAttrValue)::text ]]></complex-attribute>
                        <category _I_D="33a0e428-f1aa-4415-88c1-e8e8f16eef10" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="46f20495-e7a5-44cf-9758-685409ed3570" name="dbms_xmlgen$contextattr2text" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$contextattr2text(ctxconvertspecialchars boolean, ctxmaxrows numeric, ctxnullhandling numeric, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxusenullattributeindicator boolean, ctxuseitemtagsforcoll boolean)" is-trigger-function="0" unique-function-name="dbms_xmlgen$contextattr2text(ctxconvertspecialchars boolean, ctxmaxrows numeric, ctxnullhandling numeric, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxusenullattributeindicator boolean, ctxuseitemtagsforcoll boolean)" is-aggregate="f" language-name="sql" arguments-datatypes="boolean,numeric,numeric,text,text,numeric,boolean,boolean" is-returning-set="f" ret-datatype="text" function-arguments="ctxconvertspecialchars boolean DEFAULT NULL::boolean, ctxmaxrows numeric DEFAULT NULL::numeric, ctxnullhandling numeric DEFAULT NULL::numeric, ctxrowsettag text DEFAULT NULL::text, ctxrowtag text DEFAULT NULL::text, ctxskiprows numeric DEFAULT NULL::numeric, ctxusenullattributeindicator boolean DEFAULT NULL::boolean, ctxuseitemtagsforcoll boolean DEFAULT NULL::boolean" schema-id="304013" function-type="RET_SCALAR" count-arguments="8" function-id="305129" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxconvertspecialchars boolean, ctxmaxrows numeric, ctxnullhandling numeric, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxusenullattributeindicator boolean, ctxuseitemtagsforcoll boolean" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlgen$contextattr2text(ctxconvertspecialchars boolean, ctxmaxrows numeric, ctxnullhandling numeric, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxusenullattributeindicator boolean, ctxuseitemtagsforcoll boolean)" unique-suffix="(ctxconvertspecialchars boolean, ctxmaxrows numeric, ctxnullhandling numeric, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxusenullattributeindicator boolean, ctxuseitemtagsforcoll boolean)" routine-number="305129">
                        <complex-attribute name="sql"><![CDATA[ select dbms_xmlgen$contextAttr2text((ctxConvertSpecialChars,
                                            ctxMaxRows,
                                            ctxNullHandling,
                                            coalesce(ctxRowSetTag, dbms_xmlgen$default_rowsettag()),
	                                        coalesce(ctxRowTag, dbms_xmlgen$default_rowtag()),
	                                        coalesce(ctxSkipRows, 0),
                                            ctxUseNullattributeIndicator,
                                            ctxUseItemTagsForColl
	                                      )::dbms_xmlgen$TctxAttributes)::text ]]></complex-attribute>
                        <category _I_D="b98bd2df-3ad9-4a5f-987f-e1ed58a4214f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4d40b2c9-f9c2-489f-aae1-34f21daed08d" name="dbms_xmlgen$convert" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$convert" is-trigger-function="0" unique-function-name="dbms_xmlgen$convert" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric" is-returning-set="f" ret-datatype="text" function-arguments="xmldata text, flag numeric DEFAULT aws_oracle_ext.&quot;dbms_xmlgen$entity_encode&quot;()" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305156" volatility="VOLATILE" is-window="f" function-identity-arguments="xmldata text, flag numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$convert(xmldata text, flag numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	escChars text[5][2] := array[array['&quot;', '"'], array['&apos;', ''''], array['&lt;', '<'], array['&gt;', '>'], array['&amp;', '&']];
    i int;
    lvResult text;
begin
	if flag >= aws_oracle_ext.dbms_xmlgen$entity_decode() then
		begin
			lvResult := xmlData;
			for i in 1 .. 5 loop
				lvResult := replace(lvResult, escChars[i][1], escChars[i][2]);
			end loop;
   	    exception when others then
			lvResult := null;
		    raise;
		end;
	elsif flag = aws_oracle_ext.dbms_xmlgen$entity_encode() then
		lvResult := xmlserialize(content (xpath('.', xmlelement(name dummy, xmlData), array[array['xsi', 'http://www.w3.org/2001/XMLSchema-instance']]))[1] as text);
	else
		raise exception 'XML processing error. Nagative value [%] was readed', flag using hint = '22063';
	end if;
    return lvResult;
end; ]]></complex-attribute>
                        <category _I_D="3152f858-0609-4870-9ce9-b9fa32e7b2b1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2613ba51-c3ec-4956-bbca-5d0b9981dcb3" name="dbms_xmlgen$crisopened" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$crisopened" is-trigger-function="0" unique-function-name="dbms_xmlgen$crisopened" is-aggregate="f" language-name="sql" arguments-datatypes="refcursor" is-returning-set="f" ret-datatype="bool" function-arguments="pcr refcursor" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305127" volatility="STABLE" is-window="f" function-identity-arguments="pcr refcursor" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$crisopened(pcr refcursor)">
                        <complex-attribute name="sql"><![CDATA[
  select exists(select 1 from pg_cursors where name = pCr::text);
]]></complex-attribute>
                        <category _I_D="e6a61a11-8c9c-4aca-a006-6856f25c903d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8038d849-2cf7-4374-9e7c-ba006015db4f" name="dbms_xmlgen$ctxhdl2uidrec" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$ctxhdl2uidrec" is-trigger-function="0" unique-function-name="dbms_xmlgen$ctxhdl2uidrec" is-aggregate="f" language-name="sql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="record" function-arguments="ctxhdl numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305133" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctxhdl numeric" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$ctxhdl2uidrec(ctxhdl numeric)">
                        <complex-attribute name="sql"><![CDATA[ select ctxHdl, concat('dbms_xmlgen$context_query_', coalesce(trunc(ctxHdl)::text, '')) ]]></complex-attribute>
                        <category _I_D="9815be3d-6401-44b3-886f-200819a60137" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="992cd0a6-c09f-4886-a021-34bebeab555d" name="dbms_xmlgen$ctxidx" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$ctxidx" is-trigger-function="0" unique-function-name="dbms_xmlgen$ctxidx" is-aggregate="f" language-name="sql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="varchar" function-arguments="ctxhdl numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305134" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctxhdl numeric" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$ctxidx(ctxhdl numeric)">
                        <complex-attribute name="sql"><![CDATA[ select ctxIdx from dbms_xmlgen$ctxHdl2uidRec(ctxHdl) as (Idx numeric, ctxIdx character varying) ]]></complex-attribute>
                        <category _I_D="1c92f65d-70e2-44ec-b753-70e273915897" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1e88093a-15e1-4125-9447-6eaefebfad28" name="dbms_xmlgen$default_rowsettag" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$default_rowsettag" is-trigger-function="0" unique-function-name="dbms_xmlgen$default_rowsettag" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305125" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$default_rowsettag()">
                        <complex-attribute name="sql"><![CDATA[ select 'ROWSET' ]]></complex-attribute>
                        <category _I_D="5bfae66b-a4b6-49a6-9d74-5bd4065c7885" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="13f39282-dc54-484f-b983-fff49a2981d9" name="dbms_xmlgen$default_rowtag" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$default_rowtag" is-trigger-function="0" unique-function-name="dbms_xmlgen$default_rowtag" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305126" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$default_rowtag()">
                        <complex-attribute name="sql"><![CDATA[ select 'ROW' ]]></complex-attribute>
                        <category _I_D="b708247a-9d4c-4b81-bc58-f2489df2218a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="de5c817f-742c-4352-a093-c5e26165b5ce" name="dbms_xmlgen$drop_nulls" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$drop_nulls" is-trigger-function="0" unique-function-name="dbms_xmlgen$drop_nulls" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305117" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$drop_nulls()">
                        <complex-attribute name="sql"><![CDATA[ select 0 ]]></complex-attribute>
                        <category _I_D="de633582-096d-49c0-921f-de66fc871248" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9fe2aff9-9f41-4d7d-a62a-0a67cb4b0574" name="dbms_xmlgen$dtd" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$dtd" is-trigger-function="0" unique-function-name="dbms_xmlgen$dtd" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305118" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$dtd()">
                        <complex-attribute name="sql"><![CDATA[ select 1 ]]></complex-attribute>
                        <category _I_D="646fd3b3-5337-4296-9c66-5b354443ce96" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0351fd6a-4102-47d4-9fba-f101bf6980fc" name="dbms_xmlgen$empty_tag" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$empty_tag" is-trigger-function="0" unique-function-name="dbms_xmlgen$empty_tag" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305119" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$empty_tag()">
                        <complex-attribute name="sql"><![CDATA[ select 2 ]]></complex-attribute>
                        <category _I_D="07b0a302-c1ed-4e78-a13e-036becf5d5f6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ed5b10cd-f058-41eb-a17c-2d001af42ac4" name="dbms_xmlgen$entity_decode" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$entity_decode" is-trigger-function="0" unique-function-name="dbms_xmlgen$entity_decode" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305120" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$entity_decode()">
                        <complex-attribute name="sql"><![CDATA[ select 1::numeric ]]></complex-attribute>
                        <category _I_D="4294f498-4e1e-44ac-83ba-6ea3fbbd6eab" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="16a00b9b-69e6-4737-ac55-00619aaec7fc" name="dbms_xmlgen$entity_encode" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$entity_encode" is-trigger-function="0" unique-function-name="dbms_xmlgen$entity_encode" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305121" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$entity_encode()">
                        <complex-attribute name="sql"><![CDATA[ select 0::numeric ]]></complex-attribute>
                        <category _I_D="85b064fb-6756-4ba0-b531-d2b80fffd536" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="71c613e6-3e6a-4e1f-b283-751829862428" name="dbms_xmlgen$getctxobj" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$getctxobj" is-trigger-function="0" unique-function-name="dbms_xmlgen$getctxobj" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="dbms_xmlgen$tcontext" function-arguments="ctxhdl numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305137" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$getctxobj(ctxhdl numeric)">
                        <complex-attribute name="sql"><![CDATA[
begin
	if ctxHdl < 0  then
		raise exception 'XML processing error. Nagative value [%] was readed', ctxHdl using hint = '22063';
	end if;

	return aws_oracle_ext.dbms_xmlgen$context2obj(ctxHdl => trunc(ctxHdl));

end; ]]></complex-attribute>
                        <category _I_D="fd1cfe26-5ea1-4309-a7c0-3208f4043c24" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c395d918-f8ef-4586-b89c-b8b24ecd26be" name="dbms_xmlgen$getnumrowsprocessed" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$getnumrowsprocessed" is-trigger-function="0" unique-function-name="dbms_xmlgen$getnumrowsprocessed" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="numeric" function-arguments="ctx numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305153" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$getnumrowsprocessed(ctx numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lCtx aws_oracle_ext.dbms_xmlgen$tContext;
	lnCtxHdl int := trunc(ctx);
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);
	return coalesce(lCtx.ctxNumRowsProcessed, 0);
end; ]]></complex-attribute>
                        <category _I_D="5322a199-7bf9-49ab-86e9-57afdead4fb9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2dabd6df-118b-485e-bd44-3f16f9dce55a" name="dbms_xmlgen$getxml" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$getxml(ctx numeric, dtdorschema numeric)" is-trigger-function="0" unique-function-name="dbms_xmlgen$getxml(ctx numeric, dtdorschema numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="text" function-arguments="ctx numeric, dtdorschema numeric DEFAULT aws_oracle_ext.&quot;dbms_xmlgen$none&quot;()" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305154" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric, dtdorschema numeric" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_xmlgen$getxml(ctx numeric, dtdorschema numeric)" unique-suffix="(ctx numeric, dtdorschema numeric)" routine-number="305154">
                        <complex-attribute name="sql"><![CDATA[
declare
    lCtx aws_oracle_ext.dbms_xmlgen$tContext;
    lnCtxHdl int := trunc(ctx);
    lvReturn text;
    lrResult record;
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

	if lCtx is null then
	    raise exception 'Invalid context or doesn''t exists' using hint = '19019';
	else
		lrResult := aws_oracle_ext.dbms_xmlgen$qc2xml(pvSQL => lCtx.ctxQuery,
	                                                  pCr => lCtx.ctxCursor,
	                                                  pnMaxRows => (lCtx.ctxAttributes).ctxMaxRows,
	                                                  pvRowsetTag => (lCtx.ctxAttributes).ctxRowsettag,
	                                                  pvRowTag => (lCtx.ctxAttributes).ctxRowTag,
	                                                  pnSkipRows => (lCtx.ctxAttributes).ctxSkipRows
	                                                 );

	    perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
	                                                   ctxCursor => lCtx.ctxCursor,
	                                                   ctxQuery => lCtx.ctxQuery,
	                                                   ctxAttributes => lCtx.ctxAttributes,
	                                                   ctxNumRowsProcessed => lrResult.pnRowCount,
	                                                   forceSetValues => true
	                                                  );

	    lvReturn := xmlserialize(document lrResult.pxXML as text
                                );
	end if;

	return lvReturn;
end; ]]></complex-attribute>
                        <category _I_D="1538cd7e-9591-4c68-8062-5a01621d58de" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="03717501-4723-4c1f-8ada-44cf86b0423b" name="dbms_xmlgen$getxml" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$getxml(sqlquery text, dtdorschema numeric)" is-trigger-function="0" unique-function-name="dbms_xmlgen$getxml(sqlquery text, dtdorschema numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric" is-returning-set="f" ret-datatype="text" function-arguments="sqlquery text, dtdorschema numeric DEFAULT aws_oracle_ext.&quot;dbms_xmlgen$none&quot;()" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305155" volatility="VOLATILE" is-window="f" function-identity-arguments="sqlquery text, dtdorschema numeric" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_xmlgen$getxml(sqlquery text, dtdorschema numeric)" unique-suffix="(sqlquery text, dtdorschema numeric)" routine-number="305155">
                        <complex-attribute name="sql"><![CDATA[
begin
    return xmlserialize(document (aws_oracle_ext.dbms_xmlgen$qc2xml(pvSQL => sqlQuery,
				                                                    pCr => null,
				                                                    pvRowsetTag => aws_oracle_ext.dbms_xmlgen$default_rowsettag(),
				                                                    pvRowTag => aws_oracle_ext.dbms_xmlgen$default_rowtag()
				                                                   )).pxXML as text
                       );
end; ]]></complex-attribute>
                        <category _I_D="fb9ef8f9-2158-4ad1-8578-c6a743c6841d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="84f3c75f-52a3-4857-9588-2eec1700a501" name="dbms_xmlgen$newcontext" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$newcontext(querystring refcursor)" is-trigger-function="0" unique-function-name="dbms_xmlgen$newcontext(querystring refcursor)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="refcursor" is-returning-set="f" ret-datatype="numeric" function-arguments="querystring refcursor" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305143" volatility="VOLATILE" is-window="f" function-identity-arguments="querystring refcursor" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_xmlgen$newcontext(querystring refcursor)" unique-suffix="(querystring refcursor)" routine-number="305143">
                        <complex-attribute name="sql"><![CDATA[
begin
	return aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => null,
			                                      ctxCursor => queryString,
			                                      ctxQuery => null,
			                                      ctxAttributes => null,
			                                      ctxNumRowsProcessed => null
			                                     );
end; ]]></complex-attribute>
                        <category _I_D="53a187cf-5f1d-4c84-8f5d-b0b3133e16f6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4959181c-499e-4207-b87b-f3553e3f89c2" name="dbms_xmlgen$newcontext" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$newcontext(querystring text)" is-trigger-function="0" unique-function-name="dbms_xmlgen$newcontext(querystring text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="numeric" function-arguments="querystring text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305142" volatility="VOLATILE" is-window="f" function-identity-arguments="querystring text" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_xmlgen$newcontext(querystring text)" unique-suffix="(querystring text)" routine-number="305142">
                        <complex-attribute name="sql"><![CDATA[
declare
begin
	return aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => null,
			                                      ctxCursor => null,
			                                      ctxQuery => queryString,
			                                      ctxAttributes => null,
			                                      ctxNumRowsProcessed => null
			                                     );
end; ]]></complex-attribute>
                        <category _I_D="9f60e8be-51f5-488f-9d16-8fa72f43134c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a1cd02e9-8321-4b57-b3a4-305cff2055b3" name="dbms_xmlgen$none" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$none" is-trigger-function="0" unique-function-name="dbms_xmlgen$none" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305122" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$none()">
                        <complex-attribute name="sql"><![CDATA[ select 0 ]]></complex-attribute>
                        <category _I_D="4d8cdcb6-bf9b-4bba-8f25-2755e2718d56" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e464342f-d733-4fb4-8875-aab430a425e5" name="dbms_xmlgen$null_attr" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$null_attr" is-trigger-function="0" unique-function-name="dbms_xmlgen$null_attr" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305123" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$null_attr()">
                        <complex-attribute name="sql"><![CDATA[ select 1 ]]></complex-attribute>
                        <category _I_D="12a6fe7e-8487-4037-9949-d3c7e5522686" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b1b99deb-0c2d-470f-bc28-c384ca2952fe" name="dbms_xmlgen$qc2xml" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$qc2xml" is-trigger-function="0" unique-function-name="dbms_xmlgen$qc2xml" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,refcursor,boolean,boolean,numeric,numeric,text,text,numeric,boolean,boolean,xml,integer" is-returning-set="f" ret-datatype="record" function-arguments="pvsql text, pcr refcursor, pbaddxmlroot boolean DEFAULT true, pbconvertspecialchars boolean DEFAULT NULL::boolean, pnmaxrows numeric DEFAULT NULL::numeric, pnnullhandling numeric DEFAULT NULL::numeric, pvrowsettag text DEFAULT NULL::text, pvrowtag text DEFAULT NULL::text, pnskiprows numeric DEFAULT NULL::numeric, pbusenullattributeindicator boolean DEFAULT NULL::boolean, pbuseitemtagsforcoll boolean DEFAULT NULL::boolean, OUT pxxml xml, OUT pnrowcount integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="11" function-id="305140" volatility="VOLATILE" is-window="f" function-identity-arguments="pvsql text, pcr refcursor, pbaddxmlroot boolean, pbconvertspecialchars boolean, pnmaxrows numeric, pnnullhandling numeric, pvrowsettag text, pvrowtag text, pnskiprows numeric, pbusenullattributeindicator boolean, pbuseitemtagsforcoll boolean, OUT pxxml xml, OUT pnrowcount integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$qc2xml(pvsql text, pcr refcursor, pbaddxmlroot boolean, pbconvertspecialchars boolean, pnmaxrows numeric, pnnullhandling numeric, pvrowsettag text, pvrowtag text, pnskiprows numeric, pbusenullattributeindicator boolean, pbuseitemtagsforcoll boolean, OUT pxxml xml, OUT pnrowcount integer)">
                        <complex-attribute name="sql"><![CDATA[
declare

  crMain refcursor;
  lxResult xml := null;
  lxXMLArr xml[];

  lvSQL text := pvSQL;
  lCr refcursor := pCr;

  lbAddXmlRoot boolean := coalesce(pbAddXmlRoot, true);
  lbConvertSpecialChars boolean := pbConvertSpecialChars;
  lnMaxRows int := trunc(pnMaxRows);
  lnNullHandling numeric := pnNullHandling;
  lvRowsetTag text := nullif(pvRowsetTag, '');
  lvRowTag text := nullif(pvRowTag, '');
  lnSkipRows int := trunc(pnSkipRows);
  lbUseNullattributeIndicator bool := pbUseNullattributeIndicator;
  lbUseItemTagsForColl bool := pbUseItemTagsForColl;

  lvQuery text;
  lvQueryROWSETTAG text :=  $query$ select xmlelement(name %1$s, xmlagg(row))
							          from unnest($1) as q(row)
       				        $query$;

  lvQueryROWTAG text := $query$ select xmlelement(name %2$s,
                                                  xmlagg(xmlelement(name %1$s, row))
				                                 )
							      from unnest($1) as q(row)
       				    $query$;

begin

   if lvRowSetTag is not null and lvRowTag is not null then

   	 lvQuery := format(lvQueryROWTAG, lvRowTag, lvRowSetTag);

   elsif lvRowSetTag is null and lvRowTag is not null or
         lvRowSetTag is not null and lvRowTag is null then

     lvQuery := format(lvQueryROWSETTAG, coalesce(lvRowSetTag, lvRowTag));

   elseif lvRowTag is null and lvRowSetTag is null then

     lxResult := xmlparse(content '<ERROR>ext.XMLSQLException: The row-set tag and the row tag are both omitted.</ERROR>');

   else

   	 lxResult := xmlparse(content '<ERROR>ext.XMLSQLException: Undeterminated error.</ERROR>');
   end if; -- if lvRowSetTag is not null and lvRowTag is not null thenn


   if lxResult is null then
     if nullif(lvSQL, '') is not null or
        nullif(lCr::text, '') is not null then

	   select array_agg(xmlrow)
	     into lxXMLArr
	     from aws_oracle_ext.dbms_xmlgen$qc2xmltab(pvSQL => lvSQL,
                                                   pCr => lCr,
                                                   pnLimit => lnMaxRows,
                                                   pnOffset => lnSkipRows
                                                  );
	 else
	   raise exception 'Null Exception.' using hint = '29532';
	 end if;

     begin
         open crMain for execute lvQuery using lxXMLArr;
         fetch crMain into lxResult;
         close crMain;
     end;

   end if; -- if lvResult is null then

   if lbAddXmlRoot then
   	lxResult := xmlroot(lxResult, version '1.0', standalone yes);
   end if;

   pxXML := lxResult;
   pnRowCount := array_length(lxXMLArr, 1);
end; ]]></complex-attribute>
                        <category _I_D="845414df-5651-4276-b835-fe6a898780a6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7daa1d2a-fad6-481e-baa2-c98803142e81" name="dbms_xmlgen$qc2xmltab" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$qc2xmltab" is-trigger-function="0" unique-function-name="dbms_xmlgen$qc2xmltab" is-aggregate="f" language-name="sql" arguments-datatypes="text,refcursor,integer,integer,xml" is-returning-set="t" ret-datatype="table" function-arguments="pvsql text, pcr refcursor, pnlimit integer DEFAULT NULL::integer, pnoffset integer DEFAULT NULL::integer" schema-id="304013" function-type="RET_DATASET" count-arguments="4" function-id="305139" volatility="STABLE" is-window="f" function-identity-arguments="pvsql text, pcr refcursor, pnlimit integer, pnoffset integer" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$qc2xmltab(pvsql text, pcr refcursor, pnlimit integer, pnoffset integer)">
                        <complex-attribute name="sql"><![CDATA[
 	 select xrs.row
	   from query_to_xml(format($q$ select * from (%1$s) q limit %2$L::int offset %3$L::int $q$,
	                            pvSQL,
	                            nullif(greatest(pnLimit, sign(pnLimit)), -1),
	                            nullif(greatest(pnOffset, 0), 0)
	                           ),
	                     false,
	                     false,
	                     ''
	                    ) as xt(xml_data),
	        xmltable('//table/row' passing xt.xml_data columns row xml path '*' ) xrs
	  where nullif(pvSQL, '') is not null
	    and nullif(pCr::text, '') is null
	 union all
	 (select xrs.row
	    from cursor_to_xml(pCr,
	                       coalesce(pnLimit,
	                                nullif(greatest(pnLimit, sign(pnLimit)), -1),
	                                2147483647)::int,
	                       false,
	                       false,
	                       ''
	                      ) as xt(xml_data),
	         xmltable('//table/row' passing xt.xml_data columns row xml path '*' ) xrs
	   where aws_oracle_ext.dbms_xmlgen$crIsOpened(pCr)
	     and nullif(pvSQL, '') is null
	     and nullif(pCr::text, '') is not null
	   offset nullif(greatest(pnOffset, 0), 0)
	 );
]]></complex-attribute>
                        <category _I_D="5964584c-3038-4304-a6fa-94413740a84c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0d8ce1d8-0e6b-4a26-8c9b-b763e07d4d6c" name="dbms_xmlgen$schema" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$schema" is-trigger-function="0" unique-function-name="dbms_xmlgen$schema" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305124" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$schema()">
                        <complex-attribute name="sql"><![CDATA[ select 2 ]]></complex-attribute>
                        <category _I_D="29bbc59a-1dd3-487e-88e6-155e66f4fccd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d766a0a7-a0ae-4366-9c4c-521db4d8f53a" name="dbms_xmlgen$setconvertspecialchars" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$setconvertspecialchars" is-trigger-function="0" unique-function-name="dbms_xmlgen$setconvertspecialchars" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,boolean" is-returning-set="f" ret-datatype="void" function-arguments="ctx numeric, replace boolean" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305149" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric, replace boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$setconvertspecialchars(ctx numeric, replace boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxConvertSpecialChars constant text = 'ctxConvertSpecialChars';
	lCtx aws_oracle_ext.dbms_xmlgen$tContext;
	lnCtxHdl int := trunc(ctx);
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

    if not lCtx is null then
	lCtx.ctxAttributes := aws_oracle_ext.dbms_xmlgen$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
                                                                     forceParamList => array[case when replace is null then CtxConvertSpecialChars else null end],
                                                                     ctxConvertSpecialChars => replace
                                                                    );

    perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
                                                   ctxCursor => lCtx.ctxCursor,
                                                   ctxQuery => lCtx.ctxQuery,
                                                   ctxAttributes => lCtx.ctxAttributes,
                                                   ctxNumRowsProcessed => lCtx.ctxNumRowsProcessed,
                                                   forceSetValues => true
                                                  );
    end if;
end; ]]></complex-attribute>
                        <category _I_D="63a55fc8-b598-4a3e-bd61-102220739b27" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8720be3a-589b-4070-bff8-f23389f23c19" name="dbms_xmlgen$setctxattrvalue" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$setctxattrvalue" is-trigger-function="0" unique-function-name="dbms_xmlgen$setctxattrvalue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;,text[],boolean,numeric,numeric,text,text,numeric,boolean,boolean" is-returning-set="f" ret-datatype="dbms_xmlgen$tctxattributes" function-arguments="INOUT ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, forceparamlist text[] DEFAULT NULL::text[], ctxconvertspecialchars boolean DEFAULT NULL::boolean, ctxmaxrows numeric DEFAULT NULL::numeric, ctxnullhandling numeric DEFAULT NULL::numeric, ctxrowsettag text DEFAULT NULL::text, ctxrowtag text DEFAULT NULL::text, ctxskiprows numeric DEFAULT NULL::numeric, ctxusenullattributeindicator boolean DEFAULT NULL::boolean, ctxuseitemtagsforcoll boolean DEFAULT NULL::boolean" schema-id="304013" function-type="RET_SCALAR" count-arguments="10" function-id="305144" volatility="VOLATILE" is-window="f" function-identity-arguments="INOUT ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, forceparamlist text[], ctxconvertspecialchars boolean, ctxmaxrows numeric, ctxnullhandling numeric, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxusenullattributeindicator boolean, ctxuseitemtagsforcoll boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$setctxattrvalue(INOUT ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, forceparamlist text[], ctxconvertspecialchars boolean, ctxmaxrows numeric, ctxnullhandling numeric, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxusenullattributeindicator boolean, ctxuseitemtagsforcoll boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lforceParamList text[];
begin
	if ctxMaxRows < 0  then
		raise exception 'XML processing error. Nagative value [%] was readed', ctxMaxRows using hint = '22063';
	elsif ctxSkipRows < 0 then
		raise exception 'XML processing error. Nagative value [%] was readed', ctxSkipRows using hint = '22063';
	elsif ctxNullHandling < 0 then
		raise exception 'XML processing error. Nagative value [%] was readed', ctxNullHandling using hint = '22063';
	end if;

	lforceParamList := upper(forceParamList::text)::text[];

	ctxAttributes := (case when upper('ctxConvertSpecialChars') = any(lforceParamList) then ctxConvertSpecialChars else coalesce(ctxConvertSpecialChars, ctxAttributes.ctxConvertSpecialChars) end,
	                  case when upper('ctxMaxRows') = any(lforceParamList) then ctxMaxRows else coalesce(ctxMaxRows, ctxAttributes.ctxMaxRows) end,
                      case when upper('ctxNullHandling') = any(lforceParamList) then ctxNullHandling else coalesce(ctxNullHandling, ctxAttributes.ctxNullHandling) end,
	                  case when upper('ctxRowsetTag') = any(lforceParamList) then ctxRowsetTag else coalesce(ctxRowsetTag, ctxAttributes.ctxRowsetTag) end,
	                  case when upper('ctxRowTag') = any(lforceParamList) then ctxRowTag else coalesce(ctxRowTag, ctxAttributes.ctxRowTag) end,
	                  case when upper('ctxSkipRows') = any(lforceParamList) then ctxSkipRows else coalesce(ctxSkipRows, ctxAttributes.ctxSkipRows) end,
	                  case when upper('ctxUseNullattributeIndicator') = any(lforceParamList) then ctxUseNullattributeIndicator else coalesce(ctxUseNullattributeIndicator, ctxAttributes.ctxUseNullattributeIndicator) end,
	                  case when upper('ctxUseItemTagsForColl') = any(lforceParamList) then ctxUseItemTagsForColl else coalesce(ctxUseItemTagsForColl, ctxAttributes.ctxUseItemTagsForColl) end
                     )::dbms_xmlgen$TctxAttributes;
	lforceParamList := upper(forceParamList::text)::text[];

	ctxAttributes := (case when upper('ctxConvertSpecialChars') = any(lforceParamList) then ctxConvertSpecialChars else coalesce(ctxConvertSpecialChars, ctxAttributes.ctxConvertSpecialChars) end,
	                  case when upper('ctxMaxRows') = any(lforceParamList) then ctxMaxRows else coalesce(ctxMaxRows, ctxAttributes.ctxMaxRows) end,
                      case when upper('ctxNullHandling') = any(lforceParamList) then ctxNullHandling else coalesce(ctxNullHandling, ctxAttributes.ctxNullHandling) end,
	                  case when upper('ctxRowsetTag') = any(lforceParamList) then ctxRowsetTag else coalesce(ctxRowsetTag, ctxAttributes.ctxRowsetTag) end,
	                  case when upper('ctxRowTag') = any(lforceParamList) then ctxRowTag else coalesce(ctxRowTag, ctxAttributes.ctxRowTag) end,
	                  case when upper('ctxSkipRows') = any(lforceParamList) then ctxSkipRows else coalesce(ctxSkipRows, ctxAttributes.ctxSkipRows) end,
	                  case when upper('ctxUseNullattributeIndicator') = any(lforceParamList) then ctxUseNullattributeIndicator else coalesce(ctxUseNullattributeIndicator, ctxAttributes.ctxUseNullattributeIndicator) end,
	                  case when upper('ctxUseItemTagsForColl') = any(lforceParamList) then ctxUseItemTagsForColl else coalesce(ctxUseItemTagsForColl, ctxAttributes.ctxUseItemTagsForColl) end
                     )::dbms_xmlgen$TctxAttributes;
end; ]]></complex-attribute>
                        <category _I_D="2867538a-38f3-4094-8058-8d9da4c40a36" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a0aab389-1327-4b87-8bfa-46c5e33002c1" name="dbms_xmlgen$setctxvalue" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$setctxvalue" is-trigger-function="0" unique-function-name="dbms_xmlgen$setctxvalue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,refcursor,text,aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;,integer,boolean" is-returning-set="f" ret-datatype="numeric" function-arguments="ctxhdl numeric, ctxcursor refcursor, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, ctxnumrowsprocessed integer, forcesetvalues boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="305138" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, ctxcursor refcursor, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, ctxnumrowsprocessed integer, forcesetvalues boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$setctxvalue(ctxhdl numeric, ctxcursor refcursor, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, ctxnumrowsprocessed integer, forcesetvalues boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
    CONTEXT_SEQUENCE constant text := 'dbms_xmlgen$context$sequence';
    lrCtxQuery record;
    lrCtx aws_oracle_ext.dbms_xmlgen$TContext;
    lvCtx text;
    lnIdx numeric := ctxHdl;
    lvCtxIdx varchar;
    lnCurrval int := 0;
begin
	if ctxHdl is null then
		lnCurrval := coalesce(nullif(aws_oracle_ext.get_extpack_variable(variable_name => CONTEXT_SEQUENCE, missing_ok => true), ''), '-1')::integer;
        begin
            lnCurrval := lnCurrval + 1;
            perform aws_oracle_ext.set_extpack_variable(variable_name => CONTEXT_SEQUENCE, variable_value => lnCurrval::text);
            select Idx, ctxIdx, aws_oracle_ext.dbms_xmlgen$context2text(Idx, ctxCursor, ctxQuery) ctx
              into lrCtxQuery
              from aws_oracle_ext.dbms_xmlgen$ctxHdl2uidRec(lnCurrval) as (Idx numeric, ctxIdx character varying);

            lnIdx := lrCtxQuery.Idx;
            lvCtxIdx := lrCtxQuery.ctxIdx;
            lvCtx := lrCtxQuery.ctx;
        end;
	elsif ctxHdl is not null and
	      ctxCursor is not null or
          ctxQuery is not null or
          ctxAttributes is not null or
          ctxNumRowsProcessed is not null then

	   if forceSetValues then
	       lrCtx.ctxIdx := ctxHdl;
		   lrCtx.ctxCursor := ctxCursor;
		   lrCtx.ctxQuery := ctxQuery;
		   lrCtx.ctxAttributes := ctxAttributes;
		   lrCtx.ctxNumRowsProcessed := ctxNumRowsProcessed;
	   else
	   	   lrCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => ctxHdl);

		   if not lrCtx is null then
		   	   lrCtx.ctxCursor := coalesce(ctxCursor, lrCtx.ctxCursor);
			   lrCtx.ctxQuery := coalesce(ctxQuery, lrCtx.ctxQuery);
			   lrCtx.ctxAttributes := coalesce(ctxAttributes, lrCtx.ctxAttributes);
			   lrCtx.ctxNumRowsProcessed := coalesce(ctxNumRowsProcessed, lrCtx.ctxNumRowsProcessed);
		   end if; -- if not lrCtx is null then
	   end if; --  if forceSetValues then

	   lvCtxIdx := aws_oracle_ext.dbms_xmlgen$ctxIdx(ctxHdl);
	   lvCtx := aws_oracle_ext.dbms_xmlgen$context2text(lrCtx);
	else
		lvCtxIdx := aws_oracle_ext.dbms_xmlgen$ctxIdx(ctxHdl);
		lvCtx := null;
	end if;

    perform aws_oracle_ext.set_extpack_variable(variable_name => lvCtxIdx, variable_value => lvCtx);

    return lnIdx;
end; ]]></complex-attribute>
                        <category _I_D="cd8bf2a9-fe72-4ce4-9304-f8332242f90d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="31162963-8e09-4222-be4a-3b1d4b21754a" name="dbms_xmlgen$setmaxrows" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$setmaxrows" is-trigger-function="0" unique-function-name="dbms_xmlgen$setmaxrows" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="void" function-arguments="ctx numeric, maxrows numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305145" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric, maxrows numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$setmaxrows(ctx numeric, maxrows numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxMaxRows constant text = 'ctxMaxRows';
	lCtx aws_oracle_ext.dbms_xmlgen$tContext;
	lnCtxHdl int := trunc(ctx);
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

    if not lCtx is null then
        lCtx.ctxAttributes := aws_oracle_ext.dbms_xmlgen$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
                                                                         forceParamList => array[case when maxRows is null then CtxMaxRows else null end],
                                                                         ctxMaxRows => maxRows
                                                                        );

        perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
                                                       ctxCursor => lCtx.ctxCursor,
                                                       ctxQuery => lCtx.ctxQuery,
                                                       ctxAttributes => lCtx.ctxAttributes,
                                                       ctxNumRowsProcessed => lCtx.ctxNumRowsProcessed,
                                                       forceSetValues => true
                                                      );
	end if;
end; ]]></complex-attribute>
                        <category _I_D="20380935-546b-4e38-8971-ca29388f0f2b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4e42e153-8ed4-47cf-ab89-cc9c00343916" name="dbms_xmlgen$setnullhandling" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$setnullhandling" is-trigger-function="0" unique-function-name="dbms_xmlgen$setnullhandling" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="void" function-arguments="ctx numeric, flag numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305150" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric, flag numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$setnullhandling(ctx numeric, flag numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxNullHandling constant text = 'ctxNullHandling';
	lnCtxHdl int := trunc(ctx);
	lCtx aws_oracle_ext.dbms_xmlgen$tContext;
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

    if not lCtx is null then
        lCtx.ctxAttributes := aws_oracle_ext.dbms_xmlgen$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
                                                                         forceParamList => array[case when flag is null then CtxNullHandling else null end],
                                                                         ctxNullHandling => flag
                                                                        );

        perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
                                                       ctxCursor => lCtx.ctxCursor,
                                                       ctxQuery => lCtx.ctxQuery,
                                                       ctxAttributes => lCtx.ctxAttributes,
                                                       ctxNumRowsProcessed => lCtx.ctxNumRowsProcessed,
                                                       forceSetValues => true
                                                      );
	end if;
end; ]]></complex-attribute>
                        <category _I_D="b82696d5-1f2f-4876-becd-a40abd8a09d5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b165ae9e-0567-47b4-8804-487bf9a1d8d1" name="dbms_xmlgen$setrowsettag" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$setrowsettag" is-trigger-function="0" unique-function-name="dbms_xmlgen$setrowsettag" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctx numeric, rowsettagname text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305146" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric, rowsettagname text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$setrowsettag(ctx numeric, rowsettagname text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxAttrName constant text = 'ctxRowSetTag';
	lCtx aws_oracle_ext.dbms_xmlgen$tContext;
	lnCtxHdl int := trunc(ctx);
    lbCtxExists boolean;
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

    if not lCtx is null then
        lCtx.ctxAttributes := aws_oracle_ext.dbms_xmlgen$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
                                                                         forceParamList => array[case when rowSetTagName is null then CtxAttrName else null end],
                                                                         ctxRowSetTag => rowSetTagName
                                                                        );

        perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
                                                       ctxCursor => lCtx.ctxCursor,
                                                       ctxQuery => lCtx.ctxQuery,
                                                       ctxAttributes => lCtx.ctxAttributes,
                                                       ctxNumRowsProcessed => lCtx.ctxNumRowsProcessed,
                                                       forceSetValues => true
                                                      );
	end if;
end; ]]></complex-attribute>
                        <category _I_D="851434ac-1033-43a4-948f-3f231095476b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b05a3578-311c-42c3-9ce4-4b366958e2a3" name="dbms_xmlgen$setrowtag" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$setrowtag" is-trigger-function="0" unique-function-name="dbms_xmlgen$setrowtag" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctx numeric, rowtagname text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305147" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric, rowtagname text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$setrowtag(ctx numeric, rowtagname text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxAttrName constant text = 'ctxRowTag';
	lCtx aws_oracle_ext.dbms_xmlgen$tContext;
	lnCtxHdl int := trunc(ctx);
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

    if not lCtx is null then
        lCtx.ctxAttributes := aws_oracle_ext.dbms_xmlgen$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
                                                                         forceParamList => array[case when rowTagName is null then CtxAttrName else null end],
                                                                         ctxRowTag => rowTagName
                                                                        );

        perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
                                                       ctxCursor => lCtx.ctxCursor,
                                                       ctxQuery => lCtx.ctxQuery,
                                                       ctxAttributes => lCtx.ctxAttributes,
                                                       ctxNumRowsProcessed => lCtx.ctxNumRowsProcessed,
                                                       forceSetValues => true
                                                      );
    	end if;
end; ]]></complex-attribute>
                        <category _I_D="0ce65b81-0454-4422-bb82-0566065d0910" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a40837ce-6e92-441b-947f-2d3a91f7ad78" name="dbms_xmlgen$setskiprows" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$setskiprows" is-trigger-function="0" unique-function-name="dbms_xmlgen$setskiprows" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="void" function-arguments="ctx numeric, skiprows numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305148" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric, skiprows numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$setskiprows(ctx numeric, skiprows numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxSkipRows constant text = 'ctxSkipRows';
	lCtx aws_oracle_ext.dbms_xmlgen$tContext;
	lnCtxHdl int := trunc(ctx);
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

    if not lCtx is null then
        lCtx.ctxAttributes := aws_oracle_ext.dbms_xmlgen$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
                                                                         forceParamList => array[case when skipRows is null then CtxSkipRows else null end],
                                                                         ctxSkipRows => skipRows
                                                                        );

        perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
                                                       ctxCursor => lCtx.ctxCursor,
                                                       ctxQuery => lCtx.ctxQuery,
                                                       ctxAttributes => lCtx.ctxAttributes,
                                                       ctxNumRowsProcessed => lCtx.ctxNumRowsProcessed,
                                                       forceSetValues => true
                                                      );
	end if;
end; ]]></complex-attribute>
                        <category _I_D="a4f3712f-a736-4d2a-80ef-29dd4a3a5ac1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="85fe3d56-1fe9-4e0e-b95a-87357dcb284f" name="dbms_xmlgen$useitemtagsforcoll" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$useitemtagsforcoll" is-trigger-function="0" unique-function-name="dbms_xmlgen$useitemtagsforcoll" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="void" function-arguments="ctx numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305151" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$useitemtagsforcoll(ctx numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxUseItemTagsForColl constant text = 'ctxUseItemTagsForColl';
	lnCtxHdl int := trunc(ctx);
	lCtx dbms_xmlgen$tContext;
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

    if not lCtx is null then
        lCtx.ctxAttributes := dbms_xmlgen$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
                                                          forceParamList => array[CtxUseItemTagsForColl],
                                                          ctxUseItemTagsForColl => true
                                                         );

        perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
                                                    ctxCursor => lCtx.ctxCursor,
                                                    ctxQuery => lCtx.ctxQuery,
                                                    ctxAttributes => lCtx.ctxAttributes,
                                                    ctxNumRowsProcessed => lCtx.ctxNumRowsProcessed,
                                                    forceSetValues => true
                                                   );
	end if;
end; ]]></complex-attribute>
                        <category _I_D="d79b9e4a-b609-4943-968f-a542630db4b1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d54927a1-c38b-4963-811e-ed3b87011c04" name="dbms_xmlgen$usenullattributeindicator" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$usenullattributeindicator" is-trigger-function="0" unique-function-name="dbms_xmlgen$usenullattributeindicator" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,boolean" is-returning-set="f" ret-datatype="void" function-arguments="ctx numeric, attrind boolean DEFAULT true" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305152" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric, attrind boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$usenullattributeindicator(ctx numeric, attrind boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxUseNullAttributeIndicator constant text = 'ctxUseNullAttributeIndicator';
	lnCtxHdl int := trunc(ctx);
	lCtx dbms_xmlgen$tContext;
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

    if not lCtx is null then
        lCtx.ctxAttributes := dbms_xmlgen$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
                                                          forceParamList => array[case when attrind is null then CtxUseNullAttributeIndicator else null end],
                                                          ctxUseNullAttributeIndicator => attrind
                                                         );

        perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
                                                    ctxCursor => lCtx.ctxCursor,
                                                    ctxQuery => lCtx.ctxQuery,
                                                    ctxAttributes => lCtx.ctxAttributes,
                                                    ctxNumRowsProcessed => lCtx.ctxNumRowsProcessed,
                                                    forceSetValues => true
                                                   );
	end if;
end; ]]></complex-attribute>
                        <category _I_D="4d17670b-6455-4374-9170-52983b2ffd3d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5d0ac96f-c1e9-489b-98c8-8385e132b8b7" name="dbms_xmlquery$all_rows" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$all_rows" is-trigger-function="0" unique-function-name="dbms_xmlquery$all_rows" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305038" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$all_rows()">
                        <complex-attribute name="sql"><![CDATA[ select -1 ]]></complex-attribute>
                        <category _I_D="5bd638c4-89fd-4937-b64a-5c4c44a67517" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e8393fdf-0d35-4ed8-8ef4-9a1915b4ecbf" name="dbms_xmlquery$closecontext" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$closecontext" is-trigger-function="0" unique-function-name="dbms_xmlquery$closecontext" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305068" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$closecontext(ctxhdl numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	emtyStr constant varchar := '';
    ctxIdx text;
    ctxVal text;
begin
	ctxIdx := aws_oracle_ext.dbms_xmlquery$ctxIdx(ctxHdl);

	begin
	  ctxVal := aws_oracle_ext.get_extpack_variable(variable_name => ctxIdx, missing_ok => false);
	exception when sqlstate '42704' then
				if position(ctxIdx in sqlerrm) then
	            	ctxVal := emtyStr;
	            else
	            	raise exception using hint = sqlstate, message = sqlerrm;
	            end if;
	          when others then
	            raise exception using hint = sqlstate, message = sqlerrm;
	end;

    begin
	    if nullif(ctxVal, emtyStr) is not null then
	    	perform aws_oracle_ext.set_extpack_variable(variable_name => ctxIdx, variable_value => null::text);
	    else
	    	raise exception undefined_object;
	    end if;

	exception when undefined_object then
		raise exception 'Invalid context handle specified.' using hint = '29532';
	end;
end; ]]></complex-attribute>
                        <category _I_D="177b05e0-7bb8-4467-8094-a18a528cad89" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6a9d1441-855d-4044-9bf5-1eab61df814f" name="dbms_xmlquery$context2obj" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$context2obj(ctxhdl numeric)" is-trigger-function="0" unique-function-name="dbms_xmlquery$context2obj(ctxhdl numeric)" is-aggregate="f" language-name="sql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="dbms_xmlquery$tcontext" function-arguments="ctxhdl numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305070" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlquery$context2obj(ctxhdl numeric)" unique-suffix="(ctxhdl numeric)" routine-number="305070">
                        <complex-attribute name="sql"><![CDATA[ select dbms_xmlquery$context2obj(get_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl))) ]]></complex-attribute>
                        <category _I_D="2e7c7f3d-b8a6-4481-aab0-1dcc55f38402" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="02784efa-bdf5-46d5-b44d-ba30df7a284e" name="dbms_xmlquery$context2obj" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$context2obj(ctxvalue text)" is-trigger-function="0" unique-function-name="dbms_xmlquery$context2obj(ctxvalue text)" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="dbms_xmlquery$tcontext" function-arguments="ctxvalue text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305069" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxvalue text" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlquery$context2obj(ctxvalue text)" unique-suffix="(ctxvalue text)" routine-number="305069">
                        <complex-attribute name="sql"><![CDATA[ select * from json_populate_record(null::dbms_xmlquery$TContext, ctxValue::json) ]]></complex-attribute>
                        <category _I_D="3ebc64c8-9bc6-4c72-82a0-ffd39e90fc1e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c21463f7-818d-4a85-9b9d-d0814e09ae34" name="dbms_xmlquery$context2text" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$context2text(ctxhdl numeric, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;)" is-trigger-function="0" unique-function-name="dbms_xmlquery$context2text(ctxhdl numeric, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;)" is-aggregate="f" language-name="sql" arguments-datatypes="numeric,text,aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;" is-returning-set="f" ret-datatype="text" function-arguments="ctxhdl numeric, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305064" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlquery$context2text(ctxhdl numeric, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;)" unique-suffix="(ctxhdl numeric, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;)" routine-number="305064">
                        <complex-attribute name="sql"><![CDATA[ select dbms_xmlquery$context2text((ctxHdl,
                                         ctxQuery,
                                         coalesce(ctxAttributes, dbms_xmlquery$contextAttr2obj()
                                        )
                                       )::dbms_xmlquery$TContext)::text ]]></complex-attribute>
                        <category _I_D="bdbca9aa-268b-4f06-af00-e2de998aeba5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3b8f1f11-08cc-4b26-827e-bb4955942131" name="dbms_xmlquery$context2text" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$context2text(ctxvalue aws_oracle_ext.&quot;dbms_xmlquery$tcontext&quot;)" is-trigger-function="0" unique-function-name="dbms_xmlquery$context2text(ctxvalue aws_oracle_ext.&quot;dbms_xmlquery$tcontext&quot;)" is-aggregate="f" language-name="sql" arguments-datatypes="aws_oracle_ext.&quot;dbms_xmlquery$tcontext&quot;" is-returning-set="f" ret-datatype="text" function-arguments="ctxvalue aws_oracle_ext.&quot;dbms_xmlquery$tcontext&quot;" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305063" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxvalue aws_oracle_ext.&quot;dbms_xmlquery$tcontext&quot;" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlquery$context2text(ctxvalue aws_oracle_ext.&quot;dbms_xmlquery$tcontext&quot;)" unique-suffix="(ctxvalue aws_oracle_ext.&quot;dbms_xmlquery$tcontext&quot;)" routine-number="305063">
                        <complex-attribute name="sql"><![CDATA[ select row_to_json(ctxValue)::text ]]></complex-attribute>
                        <category _I_D="a49b1644-8f96-4ec0-b755-f1e5e14f9e5e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e3324f9f-058a-494c-8c14-6824a67f96a8" name="dbms_xmlquery$contextattr2obj" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$contextattr2obj" is-trigger-function="0" unique-function-name="dbms_xmlquery$contextattr2obj" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="dbms_xmlquery$tctxattributes" function-arguments="ctxattr text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305062" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxattr text" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$contextattr2obj(ctxattr text)">
                        <complex-attribute name="sql"><![CDATA[ select *
        from json_populate_record(null::dbms_xmlquery$TctxAttributes,
                                  coalesce(ctxAttr, dbms_xmlquery$contextAttr2text())::json
                                 ) ]]></complex-attribute>
                        <category _I_D="e74d9b7a-f743-4770-9de2-37edc183f652" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="84b78863-4608-446c-a905-7e9477c9e6ab" name="dbms_xmlquery$contextattr2text" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$contextattr2text(ctxattrvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;)" is-trigger-function="0" unique-function-name="dbms_xmlquery$contextattr2text(ctxattrvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;)" is-aggregate="f" language-name="sql" arguments-datatypes="aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;" is-returning-set="f" ret-datatype="text" function-arguments="ctxattrvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305060" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxattrvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlquery$contextattr2text(ctxattrvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;)" unique-suffix="(ctxattrvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;)" routine-number="305060">
                        <complex-attribute name="sql"><![CDATA[ select row_to_json(ctxAttrValue)::text ]]></complex-attribute>
                        <category _I_D="010fde81-8adc-4ba1-8505-eec57c5ee9e4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b1bb2e85-1011-4796-8516-68b0e7e7403c" name="dbms_xmlquery$contextattr2text" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$contextattr2text(ctxbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], ctxdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxcallidattrname text, ctxdateformat text, ctxencodingtag text, ctxerrortag text, ctxmaxrows numeric, ctxmateheader text, ctxraiseexception boolean, ctxraisenorowsexception boolean, ctxrowidattrname text, ctxrowidattrvalue text, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxsqltoxmlnameescaping boolean, ctxstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxtagcase numeric, ctxxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxusenullattributeindicator boolean, ctxusetypeforcollelemtag boolean)" is-trigger-function="0" unique-function-name="dbms_xmlquery$contextattr2text(ctxbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], ctxdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxcallidattrname text, ctxdateformat text, ctxencodingtag text, ctxerrortag text, ctxmaxrows numeric, ctxmateheader text, ctxraiseexception boolean, ctxraisenorowsexception boolean, ctxrowidattrname text, ctxrowidattrvalue text, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxsqltoxmlnameescaping boolean, ctxstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxtagcase numeric, ctxxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxusenullattributeindicator boolean, ctxusetypeforcollelemtag boolean)" is-aggregate="f" language-name="sql" arguments-datatypes="aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[],aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,text,text,text,text,numeric,text,boolean,boolean,text,text,text,text,numeric,boolean,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,numeric,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,boolean,boolean" is-returning-set="f" ret-datatype="text" function-arguments="ctxbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[] DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], ctxdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxcallidattrname text DEFAULT NULL::text, ctxdateformat text DEFAULT NULL::text, ctxencodingtag text DEFAULT NULL::text, ctxerrortag text DEFAULT NULL::text, ctxmaxrows numeric DEFAULT NULL::numeric, ctxmateheader text DEFAULT NULL::text, ctxraiseexception boolean DEFAULT NULL::boolean, ctxraisenorowsexception boolean DEFAULT NULL::boolean, ctxrowidattrname text DEFAULT NULL::text, ctxrowidattrvalue text DEFAULT NULL::text, ctxrowsettag text DEFAULT NULL::text, ctxrowtag text DEFAULT NULL::text, ctxskiprows numeric DEFAULT NULL::numeric, ctxsqltoxmlnameescaping boolean DEFAULT NULL::boolean, ctxstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxtagcase numeric DEFAULT NULL::numeric, ctxxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxusenullattributeindicator boolean DEFAULT NULL::boolean, ctxusetypeforcollelemtag boolean DEFAULT NULL::boolean" schema-id="304013" function-type="RET_SCALAR" count-arguments="22" function-id="305061" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], ctxdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxcallidattrname text, ctxdateformat text, ctxencodingtag text, ctxerrortag text, ctxmaxrows numeric, ctxmateheader text, ctxraiseexception boolean, ctxraisenorowsexception boolean, ctxrowidattrname text, ctxrowidattrvalue text, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxsqltoxmlnameescaping boolean, ctxstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxtagcase numeric, ctxxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxusenullattributeindicator boolean, ctxusetypeforcollelemtag boolean" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlquery$contextattr2text(ctxbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], ctxdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxcallidattrname text, ctxdateformat text, ctxencodingtag text, ctxerrortag text, ctxmaxrows numeric, ctxmateheader text, ctxraiseexception boolean, ctxraisenorowsexception boolean, ctxrowidattrname text, ctxrowidattrvalue text, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxsqltoxmlnameescaping boolean, ctxstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxtagcase numeric, ctxxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxusenullattributeindicator boolean, ctxusetypeforcollelemtag boolean)" unique-suffix="(ctxbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], ctxdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxcallidattrname text, ctxdateformat text, ctxencodingtag text, ctxerrortag text, ctxmaxrows numeric, ctxmateheader text, ctxraiseexception boolean, ctxraisenorowsexception boolean, ctxrowidattrname text, ctxrowidattrvalue text, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxsqltoxmlnameescaping boolean, ctxstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxtagcase numeric, ctxxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxusenullattributeindicator boolean, ctxusetypeforcollelemtag boolean)" routine-number="305061">
                        <complex-attribute name="sql"><![CDATA[ select dbms_xmlquery$contextAttr2text((ctxBindValue,
	  			                             ctxDataHeader,
	                                         ctxCallIdAttrName,
	                                         coalesce(ctxDateFormat, dbms_xmlquery$default_date_format()),
	                                         coalesce(ctxEncodingTag, dbms_xmlquery$db_encoding()),
	                                         coalesce(ctxErrorTag, dbms_xmlquery$default_errortag()),
	                                         coalesce(ctxMaxRows, dbms_xmlquery$all_rows()),
	                                         ctxMateHeader,
	                                         ctxRaiseException,
	                                         ctxRaiseNoRowsException,
	                                         ctxRowidAttrName,
	                                         ctxRowIdAttrValue,
	                                         coalesce(ctxRowSetTag, dbms_xmlquery$default_rowsettag()),
	                                         coalesce(ctxRowTag, dbms_xmlquery$default_rowtag()),
	                                         coalesce(ctxSkipRows, 0),
	                                         ctxSQLToXMLNameescaping,
	                                         ctxStyleSheetHeader,
	                                         ctxTagCase,
	                                         ctxXSLT,
	                                         ctxXSLTParam,
	                                         ctxUseNullAttributeIndicator,
	                                         ctxUseTypeForCollElemTag
	                                        )::dbms_xmlquery$TctxAttributes)::text ]]></complex-attribute>
                        <category _I_D="fbdb3ae9-b528-42b5-8701-60bd2e7cf1b7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="95e9a919-48dc-496c-9a4f-9197598b59f9" name="dbms_xmlquery$ctxhdl2uidrec" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$ctxhdl2uidrec" is-trigger-function="0" unique-function-name="dbms_xmlquery$ctxhdl2uidrec" is-aggregate="f" language-name="sql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="record" function-arguments="ctxhdl numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305065" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctxhdl numeric" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$ctxhdl2uidrec(ctxhdl numeric)">
                        <complex-attribute name="sql"><![CDATA[ select ctxHdl, concat('dbms_xmlquery$context_query_', coalesce(ctxHdl::text, '')) ]]></complex-attribute>
                        <category _I_D="0291494c-8508-49db-8c20-f92d4453400d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c06d6197-d20c-4b73-8b58-47d803ccc9f6" name="dbms_xmlquery$ctxidx" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$ctxidx" is-trigger-function="0" unique-function-name="dbms_xmlquery$ctxidx" is-aggregate="f" language-name="sql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="varchar" function-arguments="ctxhdl numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305066" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctxhdl numeric" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$ctxidx(ctxhdl numeric)">
                        <complex-attribute name="sql"><![CDATA[ select ctxIdx from dbms_xmlquery$ctxHdl2uidRec(ctxHdl) as (Idx numeric, ctxIdx character varying) ]]></complex-attribute>
                        <category _I_D="1fb1ea34-ceda-4c39-98a9-575747504853" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e95f7cad-1dcf-4002-9d95-d12e66a5a767" name="dbms_xmlquery$db_encoding" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$db_encoding" is-trigger-function="0" unique-function-name="dbms_xmlquery$db_encoding" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305039" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$db_encoding()">
                        <complex-attribute name="sql"><![CDATA[ select '_' ]]></complex-attribute>
                        <category _I_D="bab6a682-91ef-4292-9464-f366ac319a66" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="296933a8-5b3c-4d56-ba08-1390f175dbb9" name="dbms_xmlquery$default_dataheadertag" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$default_dataheadertag" is-trigger-function="0" unique-function-name="dbms_xmlquery$default_dataheadertag" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305050" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$default_dataheadertag()">
                        <complex-attribute name="sql"><![CDATA[ select 'DOCUMENT' ]]></complex-attribute>
                        <category _I_D="44767a60-7b3f-47d9-b30f-38be3b408b07" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f8e7edec-dd43-479d-99f7-adb2e043cc03" name="dbms_xmlquery$default_date_format" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$default_date_format" is-trigger-function="0" unique-function-name="dbms_xmlquery$default_date_format" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305040" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$default_date_format()">
                        <complex-attribute name="sql"><![CDATA[ select 'MM/dd/yyyy HH:mm:ss' ]]></complex-attribute>
                        <category _I_D="c607350d-a6ee-4608-89ea-8355cb69926f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="32490c85-e3bc-4249-b3d3-edbb04c67af1" name="dbms_xmlquery$default_errortag" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$default_errortag" is-trigger-function="0" unique-function-name="dbms_xmlquery$default_errortag" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305041" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$default_errortag()">
                        <complex-attribute name="sql"><![CDATA[ select 'ERROR' ]]></complex-attribute>
                        <category _I_D="40da88f8-188b-473b-949d-9e4546594d6b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="eeb5c492-79c0-4b36-86bc-c762c7781a19" name="dbms_xmlquery$default_rowidattr" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$default_rowidattr" is-trigger-function="0" unique-function-name="dbms_xmlquery$default_rowidattr" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305042" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$default_rowidattr()">
                        <complex-attribute name="sql"><![CDATA[ select 'NUM' ]]></complex-attribute>
                        <category _I_D="ec2943c0-d86d-4a33-b22a-3be926523143" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8f5e76b3-4281-46fc-95b7-a72c67151274" name="dbms_xmlquery$default_rowsettag" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$default_rowsettag" is-trigger-function="0" unique-function-name="dbms_xmlquery$default_rowsettag" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305043" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$default_rowsettag()">
                        <complex-attribute name="sql"><![CDATA[ select 'ROWSET' ]]></complex-attribute>
                        <category _I_D="7552d42d-ca99-4712-bb83-f825e0dde783" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a0085433-9cce-443c-8014-b8d54b299fde" name="dbms_xmlquery$default_rowtag" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$default_rowtag" is-trigger-function="0" unique-function-name="dbms_xmlquery$default_rowtag" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305044" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$default_rowtag()">
                        <complex-attribute name="sql"><![CDATA[ select 'ROW' ]]></complex-attribute>
                        <category _I_D="554de0ad-94c0-4843-a083-09f1b68e0698" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ef872294-d640-40c0-813f-ee61d5b56134" name="dbms_xmlquery$dtd" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$dtd" is-trigger-function="0" unique-function-name="dbms_xmlquery$dtd" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305045" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$dtd()">
                        <complex-attribute name="sql"><![CDATA[ select 1 ]]></complex-attribute>
                        <category _I_D="d5cfdb89-930a-45b6-a036-d69151de4c1c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9a89db6f-7d5d-450c-9dee-43875d780170" name="dbms_xmlquery$getnumrowsprocessed" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$getnumrowsprocessed" is-trigger-function="0" unique-function-name="dbms_xmlquery$getnumrowsprocessed" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="numeric" function-arguments="ctxhdl numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305099" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$getnumrowsprocessed(ctxhdl numeric)">
                        <complex-attribute name="sql"><![CDATA[
begin

	return 0;
    
end; ]]></complex-attribute>
                        <category _I_D="6ec42db5-b5b4-41c6-92c2-e94b05733386" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="63203814-fdb6-4c39-8b10-2608d84e9e8d" name="dbms_xmlquery$getversion" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$getversion" is-trigger-function="0" unique-function-name="dbms_xmlquery$getversion" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305100" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$getversion()">
                        <complex-attribute name="sql"><![CDATA[
begin
	raise notice '%', 'XSU Version                Owner         Timestamp';
    raise notice '%', '-------------------------- ------------- ----------------';
end; ]]></complex-attribute>
                        <category _I_D="887d325f-3d91-4082-b14b-aa39b5d0f47e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7b8170c6-9240-452f-9a50-eb280ea5af88" name="dbms_xmlquery$getxml" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$getxml(ctxhdl numeric, metatype numeric)" is-trigger-function="0" unique-function-name="dbms_xmlquery$getxml(ctxhdl numeric, metatype numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="text" function-arguments="ctxhdl numeric, metatype numeric DEFAULT aws_oracle_ext.&quot;dbms_xmlquery$none&quot;()" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305097" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, metatype numeric" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_xmlquery$getxml(ctxhdl numeric, metatype numeric)" unique-suffix="(ctxhdl numeric, metatype numeric)" routine-number="305097">
                        <complex-attribute name="sql"><![CDATA[
declare
    ctxObj dbms_xmlquery$tcontext;
begin
	ctxObj := dbms_xmlquery$context2obj(ctxHdl);
    return xmlserialize(document dbms_xmlquery$query2xml(pvSQL => ctxObj.ctxQuery,
                                                         pjDataHeader => (ctxObj.ctxAttributes).ctxDataHeader,
                                                         pvRowIdAttrName => (ctxObj.ctxAttributes).ctxRowIdAttrName,
                                                         pvRowsetTag => (ctxObj.ctxAttributes).ctxRowsettag,
                                                         pvRowTag => (ctxObj.ctxAttributes).ctxRowTag
                                               ) as text
                        );
end; ]]></complex-attribute>
                        <category _I_D="707758f3-3eea-41e7-a514-2badee131e08" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="30668940-7334-422e-b6f0-a859b2ec3eef" name="dbms_xmlquery$getxml" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$getxml(sqlquery text, metatype numeric)" is-trigger-function="0" unique-function-name="dbms_xmlquery$getxml(sqlquery text, metatype numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric" is-returning-set="f" ret-datatype="text" function-arguments="sqlquery text, metatype numeric DEFAULT aws_oracle_ext.&quot;dbms_xmlquery$none&quot;()" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305098" volatility="VOLATILE" is-window="f" function-identity-arguments="sqlquery text, metatype numeric" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_xmlquery$getxml(sqlquery text, metatype numeric)" unique-suffix="(sqlquery text, metatype numeric)" routine-number="305098">
                        <complex-attribute name="sql"><![CDATA[
begin
    return xmlserialize(document dbms_xmlquery$query2xml(pvSQL => sqlQuery,
                                                         pvRowIdAttrName => dbms_xmlquery$default_rowidattr(),
                                                         pvRowsetTag => dbms_xmlquery$default_rowsettag(),
                                                         pvRowTag => dbms_xmlquery$default_rowtag()
                                                        ) as text
                       );
end; ]]></complex-attribute>
                        <category _I_D="79ef7c7e-2b96-4607-98f4-00da6f31dcaa" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="97cb38ea-201a-4c70-9bcf-5261604f38f9" name="dbms_xmlquery$lower_case" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$lower_case" is-trigger-function="0" unique-function-name="dbms_xmlquery$lower_case" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305046" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$lower_case()">
                        <complex-attribute name="sql"><![CDATA[ select 1 ]]></complex-attribute>
                        <category _I_D="05c3fd10-8bab-43d2-a017-8010d1a3b888" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bab45d2a-45c1-41c0-bec6-68607cb5f7b3" name="dbms_xmlquery$newcontext" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$newcontext" is-trigger-function="0" unique-function-name="dbms_xmlquery$newcontext" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="numeric" function-arguments="sqlquery text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305067" volatility="VOLATILE" is-window="f" function-identity-arguments="sqlquery text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$newcontext(sqlquery text)">
                        <complex-attribute name="sql"><![CDATA[
declare
    ctxSequence constant text := 'dbms_xmlquery$context$sequence';
    ctxQuery record;
    lnCurrval int := 0;
begin
    lnCurrval := coalesce(nullif(aws_oracle_ext.get_extpack_variable(variable_name => ctxSequence, missing_ok => true), ''), '-1')::integer;
	begin
        lnCurrval := lnCurrval + 1;
        perform aws_oracle_ext.set_extpack_variable(variable_name => ctxSequence, variable_value => lnCurrval::text);
        select Idx, ctxIdx, aws_oracle_ext.dbms_xmlquery$context2text(Idx, sqlQuery) ctx
          into ctxQuery
          from aws_oracle_ext.dbms_xmlquery$ctxHdl2uidRec(lnCurrval) as (Idx numeric, ctxIdx character varying);

        perform aws_oracle_ext.set_extpack_variable(variable_name => ctxQuery.ctxIdx, variable_value => ctxQuery.ctx);
    end;
    return ctxQuery.Idx;
end; ]]></complex-attribute>
                        <category _I_D="604c55f6-b3a8-4b52-a4cd-766b00118874" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fc3dffc6-783f-4ce2-a7f9-e85be7695314" name="dbms_xmlquery$none" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$none" is-trigger-function="0" unique-function-name="dbms_xmlquery$none" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305047" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$none()">
                        <complex-attribute name="sql"><![CDATA[ select 0 ]]></complex-attribute>
                        <category _I_D="169ccc74-ddd9-45fb-a52d-98b647cc790f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="731854e1-9199-4cc4-8984-07bc8431e396" name="dbms_xmlquery$query2xml" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$query2xml" is-trigger-function="0" unique-function-name="dbms_xmlquery$query2xml" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[],aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,text,text,text,text,numeric,text,boolean,boolean,text,text,text,text,numeric,boolean,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,numeric,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,boolean,boolean" is-returning-set="f" ret-datatype="xml" function-arguments="pvsql text, pbaddxmlroot boolean DEFAULT true, pjbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[] DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], pjdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pvcallidattrname text DEFAULT NULL::text, pvdateformat text DEFAULT NULL::text, pvencodingtag text DEFAULT NULL::text, pverrortag text DEFAULT NULL::text, pnmaxrows numeric DEFAULT NULL::numeric, pvmetaheader text DEFAULT NULL::text, pbraiseexception boolean DEFAULT NULL::boolean, pbraisenorowsexception boolean DEFAULT NULL::boolean, pvrowidattrname text DEFAULT NULL::text, pvrowidattrvalue text DEFAULT NULL::text, pvrowsettag text DEFAULT NULL::text, pvrowtag text DEFAULT NULL::text, pnskiprows numeric DEFAULT NULL::numeric, pbsqltoxmlnameescaping boolean DEFAULT NULL::boolean, pnstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pvtagcase numeric DEFAULT NULL::numeric, pjxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pjxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pbusenullattributeindicator boolean DEFAULT NULL::boolean, pbusetypeforcollelemtag boolean DEFAULT NULL::boolean" schema-id="304013" function-type="RET_SCALAR" count-arguments="24" function-id="305095" volatility="VOLATILE" is-window="f" function-identity-arguments="pvsql text, pbaddxmlroot boolean, pjbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], pjdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pvcallidattrname text, pvdateformat text, pvencodingtag text, pverrortag text, pnmaxrows numeric, pvmetaheader text, pbraiseexception boolean, pbraisenorowsexception boolean, pvrowidattrname text, pvrowidattrvalue text, pvrowsettag text, pvrowtag text, pnskiprows numeric, pbsqltoxmlnameescaping boolean, pnstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pvtagcase numeric, pjxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pjxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pbusenullattributeindicator boolean, pbusetypeforcollelemtag boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$query2xml(pvsql text, pbaddxmlroot boolean, pjbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], pjdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pvcallidattrname text, pvdateformat text, pvencodingtag text, pverrortag text, pnmaxrows numeric, pvmetaheader text, pbraiseexception boolean, pbraisenorowsexception boolean, pvrowidattrname text, pvrowidattrvalue text, pvrowsettag text, pvrowtag text, pnskiprows numeric, pbsqltoxmlnameescaping boolean, pnstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pvtagcase numeric, pjxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pjxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pbusenullattributeindicator boolean, pbusetypeforcollelemtag boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
  crMain refcursor;
  lvResult xml := null;

  lvSQL text := $pvSQL$ %1$s $pvSQL$;

  lbAddXmlRoot boolean := coalesce(pbAddXmlRoot, true);
  ljBindValue aws_oracle_ext.dbms_xmlquery$TctxDictionary[] := pjBindValue;
  ljDataHeader aws_oracle_ext.dbms_xmlquery$TctxDictionary := pjDataHeader;
  lvCallIdAttrName text := pvCallIdAttrName;
  lvDateFormat text := pvDateFormat;
  lvEncodingTag text := pvEncodingTag;
  lvErrorTag text := pvErrorTag;
  lnMaxRows numeric := pnMaxRows;
  lvMetaHeader text := pvMetaHeader;
  lbRaiseException boolean := pbRaiseException;
  lbRaiseNoRowsException boolean := pbRaiseNoRowsException;
  lvRowIdAttrName text := nullif(pvRowIdAttrName, '');
  lvRowIdAttrValue text := nullif(pvRowIdAttrValue, '');
  lvRowSetTag text := nullif(pvRowSetTag,'');
  lvRowTag text := nullif(pvRowTag,'');
  lnSkipRows numeric := pnSkipRows;
  lbSQLToXMLNameEscaping text := pbSQLToXMLNameescaping;
  lnStyleSheetHeader aws_oracle_ext.dbms_xmlquery$TctxDictionary := pnStyleSheetHeader;
  lvTagCase numeric := pvTagCase;
  ljXSLT aws_oracle_ext.dbms_xmlquery$TctxDictionary := pjXSLT;
  ljXSLTParam aws_oracle_ext.dbms_xmlquery$TctxDictionary := pjXSLTParam;
  lbUseNullAttributeIndicator boolean := pbUseNullAttributeIndicator;
  lbUseTypeForCollElemTag boolean := pbUseTypeForCollElemTag;
  lvDummy text;

  lvQuery text;
  lvQueryROW text := $row_data$ select row_number() over () as num,
  					                   (select xmlagg(row) from unnest(xpath('row/*', row_data, array[array['xsi', 'http://www.w3.org/2001/XMLSchema-instance']])) as row) as row
								   from unnest(xpath('table/*',
								                     query_to_xml($query$ %1$s $query$, false, false, ''),
								                     array[array['xsi', 'http://www.w3.org/2001/XMLSchema-instance']])
								              ) as row_data
					$row_data$;
  lvQueryDATAHEADER text := $query$ select xmlelement(name "%1$s", '%2$s', (%3$s)) $query$;

  lvQueryROWSETTAG text :=  $query$ select xmlelement(name %2$s, xmlagg(row)
				                              )
							          from (%1$s) as q
       				        $query$;

  lvQueryROWTAG text := $query$ select xmlelement(name %5$s,
                                                  xmlagg(xmlelement(name %4$s, xmlattributes(%2$s as %3$s), row ))
				                                 )
							      from (%1$s) as q
       				    $query$;

begin
   if nullif(pvSQL, '') is not null then
	  lvSQL := format(lvSQL, pvSQL);
      lvQuery := format(lvQueryROW, lvSQL);
   else
	 raise exception 'Null Exception.' using hint = '29532';
   end if;

   if lvRowTag is null and lvRowSetTag is null then
   	lvResult := xmlparse(content '<ERROR>ext.XMLSQLException: The row-set tag and the row tag are both omitted.</ERROR>');

   elsif lvRowSetTag is null and lvRowTag is not null or
         lvRowSetTag is not null and lvRowTag is null then

    lvQuery := format(lvQueryROWSETTAG, lvQuery, coalesce(lvRowSetTag, lvRowTag));

   elseif lvRowSetTag is not null and lvRowTag is not null then

    lvDummy := case when lvRowIdAttrName is null then 'NULL' else 'num' end;
    lvRowIdAttrName := coalesce(lvRowIdAttrName, 'empty_row_num');
   	lvQuery := format(lvQueryROWTAG, lvQuery, lvDummy, lvRowIdAttrName, lvRowTag, lvRowSetTag);

   else

   	lvResult := xmlparse(content '<ERROR>ext.XMLSQLException: Undeterminated error.</ERROR>');
   end if; -- if lvRowTag is null and lvRowSetTag is null then


  if lvResult is null then

   if pjDataHeader is not null and nullif(pjDataHeader.var, '') is not null then
   	 lvQuery := format(lvQueryDATAHEADER, pjDataHeader.value, pjDataHeader.var, lvQuery);
   end if; -- if pjDataHeader is not null and nullif(pjDataHeader.var, '') is not null then

   open crMain for execute lvQuery;
    fetch crMain into lvResult;
   close crMain;
  end if; -- if lvResult is null then

   if lbAddXmlRoot then
   	lvResult := xmlroot(lvResult, version '1.0', standalone yes);
   end if;

   return lvResult;
end; ]]></complex-attribute>
                        <category _I_D="739b1eba-b73f-449d-9939-95f432220d7c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="13c22637-531f-488e-be44-63fcf79a4f99" name="dbms_xmlquery$schema" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$schema" is-trigger-function="0" unique-function-name="dbms_xmlquery$schema" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305048" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$schema()">
                        <complex-attribute name="sql"><![CDATA[ select 2 ]]></complex-attribute>
                        <category _I_D="2e4db4ff-79c0-4bad-81f4-b4218680d56d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="02164c82-f5ab-4e24-8af1-77cd27a25d21" name="dbms_xmlquery$setbindvalue" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setbindvalue" is-trigger-function="0" unique-function-name="dbms_xmlquery$setbindvalue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, bindname text, bindvalue text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305072" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, bindname text, bindvalue text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setbindvalue(ctxhdl numeric, bindname text, bindvalue text)">
                        <complex-attribute name="sql"><![CDATA[
declare
    CtxAttrName constant text = 'ctxBindValue';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when bindName is null then CtxAttrName else null end],
                                                        ctxBindValue => array[(bindName, bindValue)::dbms_xmlquery$tctxDictionary]
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="f0c0373e-f5d2-4371-96ff-d1c5322d8233" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="56ecd479-88ab-4ae0-b292-36ad97cc80b7" name="dbms_xmlquery$setcollidattrname" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setcollidattrname" is-trigger-function="0" unique-function-name="dbms_xmlquery$setcollidattrname" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, attrname text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305075" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, attrname text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setcollidattrname(ctxhdl numeric, attrname text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxAttrName constant text = 'ctxCollIdAttrName';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when attrName is null then CtxAttrName else null end],
                                                        ctxCollIdAttrName => attrName
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="c2bb0e79-ff08-49f0-b1a6-43c365a69e7f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ad5e8542-6d5c-4567-afce-4a06cd88f9f3" name="dbms_xmlquery$setctxattrvalue" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setctxattrvalue" is-trigger-function="0" unique-function-name="dbms_xmlquery$setctxattrvalue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;,text[],aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[],aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,text,text,text,text,numeric,text,boolean,boolean,text,text,text,text,numeric,boolean,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,numeric,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,boolean,boolean" is-returning-set="f" ret-datatype="dbms_xmlquery$tctxattributes" function-arguments="INOUT ctxattributes aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;, forceparamlist text[] DEFAULT NULL::text[], ctxbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[] DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], ctxdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxcollidattrname text DEFAULT NULL::text, ctxdateformat text DEFAULT NULL::text, ctxencodingtag text DEFAULT NULL::text, ctxerrortag text DEFAULT NULL::text, ctxmaxrows numeric DEFAULT NULL::numeric, ctxmetaheader text DEFAULT NULL::text, ctxraiseexception boolean DEFAULT NULL::boolean, ctxraisenorowsexception boolean DEFAULT NULL::boolean, ctxrowidattrname text DEFAULT NULL::text, ctxrowidattrvalue text DEFAULT NULL::text, ctxrowsettag text DEFAULT NULL::text, ctxrowtag text DEFAULT NULL::text, ctxskiprows numeric DEFAULT NULL::numeric, ctxsqltoxmlnameescaping boolean DEFAULT NULL::boolean, ctxstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxtagcase numeric DEFAULT NULL::numeric, ctxxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxusenullattributeindicator boolean DEFAULT NULL::boolean, ctxusetypeforcollelemtag boolean DEFAULT NULL::boolean" schema-id="304013" function-type="RET_SCALAR" count-arguments="24" function-id="305071" volatility="VOLATILE" is-window="f" function-identity-arguments="INOUT ctxattributes aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;, forceparamlist text[], ctxbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], ctxdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxcollidattrname text, ctxdateformat text, ctxencodingtag text, ctxerrortag text, ctxmaxrows numeric, ctxmetaheader text, ctxraiseexception boolean, ctxraisenorowsexception boolean, ctxrowidattrname text, ctxrowidattrvalue text, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxsqltoxmlnameescaping boolean, ctxstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxtagcase numeric, ctxxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxusenullattributeindicator boolean, ctxusetypeforcollelemtag boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setctxattrvalue(INOUT ctxattributes aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;, forceparamlist text[], ctxbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], ctxdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxcollidattrname text, ctxdateformat text, ctxencodingtag text, ctxerrortag text, ctxmaxrows numeric, ctxmetaheader text, ctxraiseexception boolean, ctxraisenorowsexception boolean, ctxrowidattrname text, ctxrowidattrvalue text, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxsqltoxmlnameescaping boolean, ctxstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxtagcase numeric, ctxxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxusenullattributeindicator boolean, ctxusetypeforcollelemtag boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lforceParamList text[];
begin
	lforceParamList := upper(forceParamList::text)::text[];

	ctxAttributes := (case when upper('ctxBindValue') = any(lforceParamList) then ctxBindValue else array_cat(ctxAttributes.ctxBindValue, ctxBindValue) end,
	                  case when upper('ctxDataHeader') = any(lforceParamList) then ctxDataHeader else coalesce(ctxDataHeader, ctxAttributes.ctxDataHeader) end,
                      case when upper('ctxCollIdAttrName') = any(lforceParamList) then ctxCollIdAttrName else coalesce(ctxCollIdAttrName, ctxAttributes.ctxCollIdAttrName) end,
	                  case when upper('ctxDateFormat') = any(lforceParamList) then ctxDateFormat else coalesce(ctxDateFormat, ctxAttributes.ctxDateFormat) end,
	                  case when upper('ctxEncodingTag') = any(lforceParamList) then ctxEncodingTag else coalesce(ctxEncodingTag, ctxAttributes.ctxEncodingTag) end,
	                  case when upper('ctxErrorTag') = any(lforceParamList) then ctxErrorTag else coalesce(ctxErrorTag, ctxAttributes.ctxErrorTag) end,
	                  case when upper('ctxMaxRows') = any(lforceParamList) then ctxMaxRows else coalesce(ctxMaxRows, ctxAttributes.ctxMaxRows) end,
	                  case when upper('ctxMetaHeader') = any(lforceParamList) then ctxMetaHeader else coalesce(ctxMetaHeader, ctxAttributes.ctxMetaHeader) end,
	                  case when upper('ctxRaiseException') = any(lforceParamList) then ctxRaiseException else coalesce(ctxRaiseException, ctxAttributes.ctxRaiseException) end,
	                  case when upper('ctxRaiseNoRowsException') = any(lforceParamList) then ctxRaiseNoRowsException else coalesce(ctxRaiseNoRowsException, ctxAttributes.ctxRaiseNoRowsException) end,
	                  case when upper('ctxRowIdAttrName') = any(lforceParamList) then ctxRowIdAttrName else coalesce(ctxRowIdAttrName, ctxAttributes.ctxRowIdAttrName) end,
	                  case when upper('ctxRowIdAttrValue') = any(lforceParamList) then ctxRowIdAttrValue else coalesce(ctxRowIdAttrValue, ctxAttributes.ctxRowIdAttrValue) end,
	                  case when upper('ctxRowSetTag') = any(lforceParamList) then ctxRowSetTag else coalesce(ctxRowSetTag, ctxAttributes.ctxRowSetTag) end,
	                  case when upper('ctxRowTag') = any(lforceParamList) then ctxRowTag else coalesce(ctxRowTag, ctxAttributes.ctxRowTag) end,
	                  case when upper('ctxSkipRows') = any(lforceParamList) then ctxSkipRows else coalesce(ctxSkipRows, ctxAttributes.ctxSkipRows) end,
	                  case when upper('ctxSQLToXMLNameEscaping') = any(lforceParamList) then ctxSQLToXMLNameEscaping else coalesce(ctxSQLToXMLNameEscaping, ctxAttributes.ctxSQLToXMLNameEscaping) end,
	                  case when upper('ctxStyleSheetHeader') = any(lforceParamList) then ctxStyleSheetHeader else coalesce(ctxStyleSheetHeader, ctxAttributes.ctxStyleSheetHeader) end,
	                  case when upper('ctxTagCase') = any(lforceParamList) then ctxTagCase else coalesce(ctxTagCase, ctxAttributes.ctxTagCase) end,
	                  case when upper('ctxXSLT') = any(lforceParamList) then ctxXSLT else coalesce(ctxXSLT, ctxAttributes.ctxXSLT) end,
	                  case when upper('ctxXSLTParam') = any(lforceParamList) then ctxXSLTParam else coalesce(ctxXSLTParam, ctxAttributes.ctxXSLTParam) end,
	                  case when upper('ctxUseNullAttributeIndicator') = any(lforceParamList) then ctxUseNullAttributeIndicator else coalesce(ctxUseNullAttributeIndicator, ctxAttributes.ctxUseNullAttributeIndicator) end,
	                  case when upper('ctxUseTypeForCollElemTag') = any(lforceParamList) then ctxUseTypeForCollElemTag else coalesce(ctxUseTypeForCollElemTag, ctxAttributes.ctxUseTypeForCollElemTag) end
                     )::dbms_xmlquery$TctxAttributes;
end; ]]></complex-attribute>
                        <category _I_D="02500862-e482-4f4b-83ff-0a3aafac4ad7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3fcfdaf7-6086-462b-ad91-0de73ade10ac" name="dbms_xmlquery$setdataheader" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setdataheader" is-trigger-function="0" unique-function-name="dbms_xmlquery$setdataheader" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, header text DEFAULT NULL::text, tag text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305077" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, header text, tag text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setdataheader(ctxhdl numeric, header text, tag text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxDataHeader constant text = 'ctxDataHeader';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when header is null then CtxDataHeader else null end],
                                                        ctxDataHeader => ROW(header, coalesce(tag, dbms_xmlquery$default_dataheadertag()))::dbms_xmlquery$tctxdictionary
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="b567f1f7-f57c-4032-9bb0-b2c6c1483f60" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5d1b26f4-ad2e-48dc-9e31-9218822cb9c5" name="dbms_xmlquery$setdateformat" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setdateformat" is-trigger-function="0" unique-function-name="dbms_xmlquery$setdateformat" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, mask text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305076" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, mask text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setdateformat(ctxhdl numeric, mask text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxAttrName constant text = 'ctxDateFormat';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := aws_oracle_ext.dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when mask is null then CtxAttrName else null end],
                                                        ctxDateFormat => mask
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="5c13172e-239d-46c1-ba4a-76db6169c42e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c8ce0e13-a7cd-4081-b57c-6803d0e553ed" name="dbms_xmlquery$setencodingtag" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setencodingtag" is-trigger-function="0" unique-function-name="dbms_xmlquery$setencodingtag" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, enc text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305078" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, enc text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setencodingtag(ctxhdl numeric, enc text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxEncodingTag constant text = 'ctxEncodingTag';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := aws_oracle_ext.dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when enc is null then CtxEncodingTag else null end],
                                                        ctxEncodingTag => enc
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="1110b7da-d558-4a33-baca-987c4cd604f6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="11c5c438-e607-43d8-a9c6-61dac28e26d6" name="dbms_xmlquery$seterrortag" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$seterrortag" is-trigger-function="0" unique-function-name="dbms_xmlquery$seterrortag" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, tag text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305079" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, tag text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$seterrortag(ctxhdl numeric, tag text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxErrorTag constant text = 'ctxErrorTag';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when tag is null then CtxErrorTag else null end],
                                                        ctxErrorTag => tag
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="da0ae67c-75a5-4980-ac51-1dcef44c3470" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="552eac6f-4b4f-4cfe-a908-897e14c7ba81" name="dbms_xmlquery$setmaxrows" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setmaxrows" is-trigger-function="0" unique-function-name="dbms_xmlquery$setmaxrows" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, rows numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305080" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, rows numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setmaxrows(ctxhdl numeric, rows numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxMaxRows constant text = 'ctxMaxRows';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when rows is null then CtxMaxRows else null end],
                                                        ctxMaxRows => rows
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="0577e166-c703-4d63-b320-90c72b9153a3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="edcc36f3-0091-48cf-8f02-398ce1544bf6" name="dbms_xmlquery$setmetaheader" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setmetaheader" is-trigger-function="0" unique-function-name="dbms_xmlquery$setmetaheader" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, header text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305081" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, header text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setmetaheader(ctxhdl numeric, header text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxMetaHeader constant text = 'ctxMetaHeader';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when header is null then CtxMetaHeader else null end],
                                                        ctxMetaHeader => header
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="e2eb1820-dfc5-4896-8c3d-bb283a015ccb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3c5cbf56-ed97-49ff-8dc0-a45e21e00f5b" name="dbms_xmlquery$setraiseexception" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setraiseexception" is-trigger-function="0" unique-function-name="dbms_xmlquery$setraiseexception" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,boolean" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, flag boolean DEFAULT true" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305082" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, flag boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setraiseexception(ctxhdl numeric, flag boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxRaiseException constant text = 'ctxRaiseException';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when flag is null then CtxRaiseException else null end],
                                                        ctxRaiseException => flag
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="37b851d9-7e63-4005-8cea-c7e002687363" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4c6e9431-a091-4c8e-bf73-d4579577973f" name="dbms_xmlquery$setraisenorowsexception" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setraisenorowsexception" is-trigger-function="0" unique-function-name="dbms_xmlquery$setraisenorowsexception" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,boolean" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, flag boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305083" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, flag boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setraisenorowsexception(ctxhdl numeric, flag boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxRaiseNoRowsException constant text = 'ctxRaiseNoRowsException';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when flag is null then CtxRaiseNoRowsException else null end],
                                                        ctxRaiseNoRowsException => flag
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="f21b1b37-0d62-42e2-9152-0fc2f4515b0b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f688ec42-8559-4e08-915f-6f670cbb34e6" name="dbms_xmlquery$setrowidattrname" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setrowidattrname" is-trigger-function="0" unique-function-name="dbms_xmlquery$setrowidattrname" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, attrname text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305084" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, attrname text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setrowidattrname(ctxhdl numeric, attrname text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxRowidAttrName constant text = 'ctxRowidAttrName';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when attrName is null then CtxRowidAttrName else null end],
                                                        ctxRowidAttrName => attrName
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="95d165f3-291d-4a92-85b7-39ece70f778a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dae52ce4-e358-4020-8a10-0b633e5f3d9b" name="dbms_xmlquery$setrowidattrvalue" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setrowidattrvalue" is-trigger-function="0" unique-function-name="dbms_xmlquery$setrowidattrvalue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, colname text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305085" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, colname text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setrowidattrvalue(ctxhdl numeric, colname text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxRowidAttrValue constant text = 'ctxRowidAttrValue';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when colName is null then CtxRowidAttrValue else null end],
                                                        ctxRowidAttrValue => colName
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="dd1a9a6f-a1bd-450c-9e5d-1d027faf5dd5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4ada8802-0d45-41b5-98c2-74a028607ad7" name="dbms_xmlquery$setrowsettag" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setrowsettag" is-trigger-function="0" unique-function-name="dbms_xmlquery$setrowsettag" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, tag text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305073" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, tag text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setrowsettag(ctxhdl numeric, tag text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxAttrName constant text = 'ctxRowSetTag';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when tag is null then CtxAttrName else null end],
                                                        ctxRowSetTag => tag
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="eaa563ba-ba72-49e6-8595-66b913a19e97" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b4263ec5-7bd3-45aa-8b22-850a297aeb56" name="dbms_xmlquery$setrowtag" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setrowtag" is-trigger-function="0" unique-function-name="dbms_xmlquery$setrowtag" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, tag text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305074" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, tag text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setrowtag(ctxhdl numeric, tag text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxAttrName constant text = 'ctxRowTag';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when tag is null then CtxAttrName else null end],
                                                        ctxRowTag => tag
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="0d09eb23-70c0-404f-aae8-fb034db2f74e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="25cf312d-962f-451b-8cdd-fc18973b07f2" name="dbms_xmlquery$setskiprows" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setskiprows" is-trigger-function="0" unique-function-name="dbms_xmlquery$setskiprows" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, rows numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305086" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, rows numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setskiprows(ctxhdl numeric, rows numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxSkipRows constant text = 'ctxSkipRows';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when rows is null then CtxSkipRows else null end],
                                                        ctxSkipRows => rows
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="136ecc6c-c428-4e68-abc0-74480deb855c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b6580658-c6e9-4833-9a92-3825751ac73c" name="dbms_xmlquery$setsqltoxmlnameescaping" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setsqltoxmlnameescaping" is-trigger-function="0" unique-function-name="dbms_xmlquery$setsqltoxmlnameescaping" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,boolean" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, flag boolean DEFAULT true" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305087" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, flag boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setsqltoxmlnameescaping(ctxhdl numeric, flag boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxSQLToXMLNameEscaping constant text = 'ctxSQLToXMLNameEscaping';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when flag is null then CtxSQLToXMLNameEscaping else null end],
                                                        ctxSQLToXMLNameEscaping => flag
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="b6043372-6886-47e0-b4c7-503a9965a59d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="565aa72e-3bca-4c8e-8a01-69c978263308" name="dbms_xmlquery$setstylesheetheader" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setstylesheetheader" is-trigger-function="0" unique-function-name="dbms_xmlquery$setstylesheetheader" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, uri text, type text DEFAULT 'text/xsl'::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305088" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, uri text, type text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setstylesheetheader(ctxhdl numeric, uri text, type text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxStyleSheetHeader constant text = 'ctxStyleSheetHeader';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when uri is null then CtxStyleSheetHeader else null end],
                                                        ctxStyleSheetHeader => ROW(uri, type)::dbms_xmlquery$tctxdictionary
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="38509ced-71ea-4eaa-acca-f0dd020ebc19" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="415fb83e-198c-4ee6-a01a-355f78e3c852" name="dbms_xmlquery$settagcase" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$settagcase" is-trigger-function="0" unique-function-name="dbms_xmlquery$settagcase" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, tcase numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305089" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, tcase numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$settagcase(ctxhdl numeric, tcase numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxTagCase constant text = 'ctxTagCase';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when tCase is null then CtxTagCase else null end],
                                                        ctxTagCase => tCase
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="b1fb830b-959e-4c00-aabe-b46b14507cab" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4af56235-6cf3-4e68-ba9d-a3fe3c7defac" name="dbms_xmlquery$setxslt" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setxslt(ctxhdl numeric, stylesheet text, ref text)" is-trigger-function="0" unique-function-name="dbms_xmlquery$setxslt(ctxhdl numeric, stylesheet text, ref text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, stylesheet text, ref text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305094" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, stylesheet text, ref text" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_xmlquery$setxslt(ctxhdl numeric, stylesheet text, ref text)" unique-suffix="(ctxhdl numeric, stylesheet text, ref text)" routine-number="305094">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxXSLT constant text = 'ctxXSLT';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when stylesheet is null then CtxXSLT else null end],
                                                        ctxXSLT => ROW(stylesheet, ref)::dbms_xmlquery$tctxdictionary
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="161b5768-ef26-4084-a0dd-b569b6b478a6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fb239fad-3f03-4c1c-a2ba-611d705f0e80" name="dbms_xmlquery$setxslt" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setxslt(ctxhdl numeric, uri character varying, ref text)" is-trigger-function="0" unique-function-name="dbms_xmlquery$setxslt(ctxhdl numeric, uri character varying, ref text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,character varying,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, uri character varying, ref text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305093" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, uri character varying, ref text" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_xmlquery$setxslt(ctxhdl numeric, uri character varying, ref text)" unique-suffix="(ctxhdl numeric, uri character varying, ref text)" routine-number="305093">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxXSLT constant text = 'ctxXSLT';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when uri is null then CtxXSLT else null end],
                                                        ctxXSLT => ROW(uri, ref)::dbms_xmlquery$tctxdictionary
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="9d9b03c0-15ec-4043-b6a3-2fd28e1ac5f3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="467c9f93-f876-4004-8df5-c2c8bf0b6b95" name="dbms_xmlquery$setxsltparam" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setxsltparam" is-trigger-function="0" unique-function-name="dbms_xmlquery$setxsltparam" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, name text, param text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305092" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, name text, param text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setxsltparam(ctxhdl numeric, name text, param text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxXSLTParam constant text = 'ctxXSLTParam';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when name is null then CtxXSLTParam else null end],
                                                        ctxXSLTParam => ROW(name, param)::dbms_xmlquery$tctxdictionary
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="5d0fc99e-3bc5-48fc-ad07-2a15d1ca71d5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7aa32ca9-61d1-4362-a18b-3ed86ea56f7b" name="dbms_xmlquery$upper_case" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$upper_case" is-trigger-function="0" unique-function-name="dbms_xmlquery$upper_case" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305049" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$upper_case()">
                        <complex-attribute name="sql"><![CDATA[ select 2 ]]></complex-attribute>
                        <category _I_D="10253d0d-123a-4d58-86f4-93f06bcabb5b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="384e2c81-37ec-41a3-acd1-b1f063323f73" name="dbms_xmlquery$usenullattributeindicator" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$usenullattributeindicator" is-trigger-function="0" unique-function-name="dbms_xmlquery$usenullattributeindicator" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,boolean" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, flag boolean" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305090" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, flag boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$usenullattributeindicator(ctxhdl numeric, flag boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxUseNullAttributeIndicator constant text = 'ctxUseNullAttributeIndicator';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when flag is null then CtxUseNullAttributeIndicator else null end],
                                                        ctxUseNullAttributeIndicator => flag
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="706789dd-64b6-466f-ac44-b3e7e5813f0a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c0b4ceb2-8837-4b99-a556-cc7a02f3ab13" name="dbms_xmlquery$usetypeforcollelemtag" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$usetypeforcollelemtag" is-trigger-function="0" unique-function-name="dbms_xmlquery$usetypeforcollelemtag" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,boolean" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, flag boolean DEFAULT true" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305091" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, flag boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$usetypeforcollelemtag(ctxhdl numeric, flag boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxUseTypeForCollElemTag constant text = 'ctxUseTypeForCollElemTag';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when flag is null then CtxUseTypeForCollElemTag else null end],
                                                        ctxUseTypeForCollElemTag => flag
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="c4afd474-6e8e-4977-8de1-4d17bcf92ae9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7d4368c6-7d93-43d6-b37a-cd5ceb8fd041" name="dbtimezone" subcategories-loading="none" object-loading="extended" context="dbtimezone" is-trigger-function="0" unique-function-name="dbtimezone" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="varchar" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304620" volatility="STABLE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="dbtimezone()" comment="Returns the value of the database time zone.">
                        <complex-attribute name="sql"><![CDATA[
begin  
	
  return aws_oracle_ext.get_extpack_variable(variable_name => 'TIME_ZONE', missing_ok => false); 
 
  exception 
     when internal_error then 
	   return coalesce(CURRENT_SETTING('TIMEZONE', TRUE), 'UTC');   
end;       
]]></complex-attribute>
                        <category _I_D="929a6e74-5ed4-475f-a144-fb73f277f30b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="44a36df0-bab1-4822-a5bc-38b5fac7bdc9" name="delete" subcategories-loading="none" object-loading="extended" context="delete(parray anyarray)" is-trigger-function="0" unique-function-name="delete(parray anyarray)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyarray" is-returning-set="f" ret-datatype="anyarray" function-arguments="parray anyarray" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304484" volatility="VOLATILE" is-window="f" function-identity-arguments="parray anyarray" overload-function-count="3" proc-language="plpgsql" function-signature="delete(parray anyarray)" unique-suffix="(parray anyarray)" routine-number="304484">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

/* DELETE removes all elements from a collection */
    RETURN '{}';

END;
]]></complex-attribute>
                        <category _I_D="01606fc9-a771-44ed-be0b-16365ac3bf52" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d9b17cfb-4344-4a2e-8163-98d289d48cea" name="delete" subcategories-loading="none" object-loading="extended" context="delete(parray anyarray, m integer, n integer)" is-trigger-function="0" unique-function-name="delete(parray anyarray, m integer, n integer)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyarray,integer,integer" is-returning-set="f" ret-datatype="anyarray" function-arguments="parray anyarray, m integer, n integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304482" volatility="VOLATILE" is-window="f" function-identity-arguments="parray anyarray, m integer, n integer" overload-function-count="3" proc-language="plpgsql" function-signature="delete(parray anyarray, m integer, n integer)" unique-suffix="(parray anyarray, m integer, n integer)" routine-number="304482">
                        <complex-attribute name="sql"><![CDATA[  
DECLARE
    ind INTEGER;
    vArray parray%type;
BEGIN
/* DELETE(m,n) removes all elements in the range m..n from collection */

    IF (m > n) OR (n IS NULL) OR (m iS NULL) THEN

        vArray := parray;

    ELSE

        ind := ARRAY_LENGTH(parray, 1);
        vArray := parray[1:m - 1];

        FOR i IN 1..n - m + 1 LOOP

            vArray := ARRAY_APPEND(vArray, NULL);

        END LOOP;

        vArray := vArray || parray[n + 1:ind];

    END IF;

    RETURN vArray;

END;
]]></complex-attribute>
                        <category _I_D="c77554d1-7b0b-4d5a-b8e0-6fd280231dbb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0a3af209-f64e-4e81-a5e4-50ada66e7882" name="delete" subcategories-loading="none" object-loading="extended" context="delete(parray anyarray, n integer)" is-trigger-function="0" unique-function-name="delete(parray anyarray, n integer)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyarray,integer" is-returning-set="f" ret-datatype="anyarray" function-arguments="parray anyarray, n integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304483" volatility="VOLATILE" is-window="f" function-identity-arguments="parray anyarray, n integer" overload-function-count="3" proc-language="plpgsql" function-signature="delete(parray anyarray, n integer)" unique-suffix="(parray anyarray, n integer)" routine-number="304483">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    ind INTEGER;
BEGIN

/* DELETE(n) removes the nth element from collection */
    ind := ARRAY_LENGTH(parray, 1);

    RETURN
    CASE
        WHEN (n > ind) OR (n < 1) OR (n IS NULL) THEN
            parray
        ELSE
            ARRAY_APPEND(parray[1:n - 1], NULL)||parray[n + 1:ind]
    END;

END;
]]></complex-attribute>
                        <category _I_D="9e200a1d-1fd0-4a69-8671-2d60261c3342" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="33701aca-f42d-480d-9a82-a03bb1997903" name="dump" subcategories-loading="none" object-loading="extended" context="dump" is-trigger-function="0" unique-function-name="dump" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,integer,integer,integer" is-returning-set="f" ret-datatype="text" function-arguments="p_expr anyelement, p_fmt integer DEFAULT NULL::integer, p_pos integer DEFAULT NULL::integer, p_len integer DEFAULT NULL::integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304621" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_expr anyelement, p_fmt integer, p_pos integer, p_len integer" overload-function-count="1" proc-language="plpgsql" function-signature="dump(p_expr anyelement, p_fmt integer, p_pos integer, p_len integer)" comment="Returns a text value that includes the datatype code,the length in bytes, and the internal representation of the expression.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  result text;
  proname name;
  expr_hex bytea;
BEGIN
IF p_expr IS NULL THEN RETURN 'NULL'; END IF;

EXECUTE 'SELECT p.proname
           FROM pg_catalog.pg_proc p
      LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
          WHERE pg_catalog.pg_function_is_visible(p.oid)
            AND n.nspname = ''pg_catalog''
            AND p.proname LIKE ''%send''
            AND pg_catalog.pg_get_function_arguments(p.oid) = $1'
  INTO proname
 USING pg_typeof(p_expr)::text;

EXECUTE 'SELECT ' || proname || '($1)'
   INTO expr_hex
  USING p_expr;

SELECT ARRAY_TO_STRING(ARRAY_AGG(CONCAT(CASE
                                          WHEN p_fmt IN (8,1008) --OCT
                                          THEN aws_oracle_ext.to_oct(i)::text
                                          WHEN p_fmt IN (16,1016) --HEX
                                          THEN CASE
                                                 WHEN SUBSTRING(v,1,1) = '0' THEN SUBSTRING(v,2)
                                                 ELSE v
                                               END
                                          WHEN p_fmt IN (10,1010) --DEC
                                          THEN i::text
                                          WHEN p_fmt IN (17,1017) OR p_fmt < 0 --ASCII/HEX
                                          THEN CASE
                                                 WHEN i BETWEEN 1 AND 31 THEN '^' || CHR(i+64)
                                                 WHEN i BETWEEN 32 AND 126 THEN CHR(i)
                                                 ELSE v
                                               END
                                          ELSE i::text --DEC
                                        END
                                       ,',')
                                 )
                      ,'')
  FROM (SELECT v, i, row_number() OVER (ORDER BY rn DESC) AS rn
          FROM (SELECT v, aws_oracle_ext.hex_to_int(v) AS i, row_number() OVER () AS rn
                  FROM REGEXP_SPLIT_TO_TABLE(LTRIM(expr_hex::text, '\x')
                                            ,E'(?=(..)+$)') AS v) t
       ) t
 WHERE rn BETWEEN COALESCE(p_pos,1) AND COALESCE(p_pos,1) + COALESCE(p_len,rn) - 1
  INTO result;

SELECT 'Typ=' || pg_typeof(p_expr)::oid ||
       ' Len=' || pg_column_size(p_expr) ||
       CASE
         WHEN p_fmt > 1000
         THEN ' CharacterSet=' || (SELECT character_set_name FROM information_schema.character_sets)
         ELSE ''
       END
       || ': ' || RTRIM(result,',')
  INTO result;

RETURN result;
END
]]></complex-attribute>
                        <category _I_D="a5919dce-7f29-4d58-9b7a-e9966edbb507" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a86d5914-9394-4ab8-84b1-039d0a35011e" name="exists" subcategories-loading="none" object-loading="extended" context="exists" is-trigger-function="0" unique-function-name="exists" is-aggregate="f" language-name="sql" arguments-datatypes="anyarray,integer" is-returning-set="f" ret-datatype="bool" function-arguments="pcollection anyarray, n integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305360" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pcollection anyarray, n integer" overload-function-count="1" proc-language="sql" function-signature="exists(pcollection anyarray, n integer)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT EXISTS 
    (
        SELECT
        FROM UNNEST(pcollection) WITH ORDINALITY AS t(v,o)
        WHERE o = n
    );
]]></complex-attribute>
                        <category _I_D="f0b539fb-6b49-4904-b353-3a6a6af70c0e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0dd58e9a-9caa-4b4b-b204-3cde471ab74c" name="extend" subcategories-loading="none" object-loading="extended" context="extend" is-trigger-function="0" unique-function-name="extend" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyarray,integer,integer" is-returning-set="f" ret-datatype="anyarray" function-arguments="parray anyarray, n integer DEFAULT 1, ii integer DEFAULT NULL::integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304485" volatility="VOLATILE" is-window="f" function-identity-arguments="parray anyarray, n integer, ii integer" overload-function-count="1" proc-language="plpgsql" function-signature="extend(parray anyarray, n integer, ii integer)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    FOR idx IN 1..n LOOP

      parray := ARRAY_APPEND(parray, parray[ii]);

    END LOOP;

    RETURN parray;

END;
]]></complex-attribute>
                        <category _I_D="aa34dac3-3b92-4410-af2e-99e3f28ae0c5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="87f6600d-fee8-414c-8b48-c9d264552a41" name="first_weekday" subcategories-loading="none" object-loading="extended" context="first_weekday" is-trigger-function="0" unique-function-name="first_weekday" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="int4" function-arguments="territory text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304610" volatility="IMMUTABLE" is-window="f" function-identity-arguments="territory text" overload-function-count="1" proc-language="sql" function-signature="first_weekday(territory text)" comment="Get the first day of week">
                        <complex-attribute name="sql"><![CDATA[ 
SELECT
CASE
WHEN territory IN ('AMERICA', 'BAHRAIN', 'BRAZIL', 'CANADA', 'CHINA', 'HONG KONG',
                   'INDIA', 'ISRAEL', 'JAPAN', 'KOREA', 'KUWAIT', 'MALAYSIA',
                   'PORTUGAL', 'SINGAPORE', 'SOUTH AFRICA', 'TAIWAN', 'THAILAND',
                   'UNITED ARAB EMIRATES', 'VIETNAM')
THEN 1 --Sunday is the first day of week
WHEN territory IN ('DJIBOUTI', 'EGYPT', 'IRAQ', 'JORDAN', 'LEBANON', 'LIBYA', 'MAURITANIA', 'MOROCCO', 'OMAN',
                   'QATAR', 'SAUDI ARABIA', 'SOMALIA', 'SUDAN', 'SYRIA', 'TUNISIA', 'YEMEN')
THEN 2 --Saturday is the first day of week
WHEN territory = 'BANGLADESH'
THEN 3 --Friday is the first day of week
ELSE 0 --Monday is the first day of week
END;
]]></complex-attribute>
                        <category _I_D="b5427ffb-a378-4289-b89e-f168d10d14fa" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="28ef5e66-80f7-400e-8682-cc01a777c911" name="format_identifier_case" subcategories-loading="none" object-loading="extended" context="format_identifier_case" is-trigger-function="0" unique-function-name="format_identifier_case" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305102" volatility="IMMUTABLE" is-window="f" function-identity-arguments="text" overload-function-count="1" proc-language="sql" function-signature="format_identifier_case(text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT
        CASE
            WHEN $1 LIKE '"%"' THEN
                SUBSTRING($1, 2, LENGTH($1) - 2)
            ELSE
                UPPER($1)
            END;
]]></complex-attribute>
                        <category _I_D="98bf4c8d-dd78-4950-9c62-7a9d6e0b2584" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1ba2062b-e77d-440d-ba5a-8fbcc199c4b5" name="from_tz" subcategories-loading="none" object-loading="extended" context="from_tz" is-trigger-function="0" unique-function-name="from_tz" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone,character varying" is-returning-set="f" ret-datatype="timestamptz" function-arguments="timestamp_value timestamp without time zone, time_zone_value character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304486" volatility="IMMUTABLE" is-window="f" function-identity-arguments="timestamp_value timestamp without time zone, time_zone_value character varying" overload-function-count="1" proc-language="sql" function-signature="from_tz(timestamp_value timestamp without time zone, time_zone_value character varying)">
                        <complex-attribute name="sql"><![CDATA[


    SELECT
        CASE

            WHEN LENGTH($2) = 0 THEN

                NULL::TIMESTAMP WITH TIME ZONE

            ELSE

                MAKE_TIMESTAMPTZ
                (
                    EXTRACT(YEAR FROM $1)::INTEGER,
                    EXTRACT(MONTH FROM $1)::INTEGER,
                    EXTRACT(DAY FROM $1)::INTEGER,
                    EXTRACT(HOUR FROM $1)::INTEGER,
                    EXTRACT(MIN FROM $1)::INTEGER,
                    EXTRACT(SEC FROM $1),
                    CONCAT
                    (
                        CASE WHEN $2 !~* '[\-\+]' THEN '+' ELSE '' END,
                        REPLACE($2, ' ', '')
                    )
                )

        END;


]]></complex-attribute>
                        <category _I_D="8cf23d27-1b35-44cc-81fa-a865e5dc35d0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="191495b9-8a92-4549-adf1-1a794e5e52d4" name="get_application_context" subcategories-loading="none" object-loading="extended" context="get_application_context" is-trigger-function="0" unique-function-name="get_application_context" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="a_context_namespace character varying, a_context_attribute character varying, a_username character varying DEFAULT NULL::character varying, a_client_id character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="305107" volatility="VOLATILE" is-window="f" function-identity-arguments="a_context_namespace character varying, a_context_attribute character varying, a_username character varying, a_client_id character varying" overload-function-count="1" proc-language="plpgsql" function-signature="get_application_context(a_context_namespace character varying, a_context_attribute character varying, a_username character varying, a_client_id character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  l_context_type text;
  l_key text;
  l_interval text;
  l_signature text;
  l_value character varying;
 
begin
  perform aws_oracle_ext.init_context_struct();
  l_key := aws_oracle_ext.get_context_param('key');
  l_context_type := aws_oracle_ext.get_context_type(a_context_namespace);

 
  case upper(l_context_type) 
  	when 'ACCESSED LOCALLY' then 
  		begin
			select cl.attribute_value, cl.signature 
			  into strict l_value, l_signature
			from context_local cl
			where cl.context_namespace = $1
			  and cl.attribute_name = $2
		  	  and (cl.user_name = $3 or cl.user_name is null)
		  	  and (cl.cliend_id = $4 or coalesce(cl.cliend_id, '') = '')
		    limit 1;	  		
	  	end;
  	when 'ACCESSED GLOBALLY' then	  
  		begin		
			delete from aws_oracle_context.context_global 
			where backend_start <= now()::timestamp - (coalesce(aws_oracle_ext.get_context_param('auto_clean_interval'), '1 day'))::interval;
		 	
			select w.attribute_value, w.signature 
			into strict l_value, l_signature 
			from (
				select 
					cg.attribute_value, 
					cg.signature,
					row_number() over (order by cg.context_namespace, cg.attribute_name, cg.cliend_id) as row
				from aws_oracle_context.context_global cg 
				where cg.context_namespace = $1
				  and cg.attribute_name = $2
				  and (cg.user_name = $3 or cg.user_name is null)
				  and (cg.cliend_id = $4 or coalesce(cg.cliend_id, '') = '')
				) w  
		    where row = 1;
	  	end;  
  	else 
		-- INITIALIZED EXTERNALLY, INITIALIZED GLOBALLY  	
  		raise exception 'unsupported context type: %', l_context_type;
  end case;
 
  if l_signature <> crypt(l_value || ':' || l_key, l_signature) then  
	raise exception  'The signature for %.% is broken', $1, $2;
  end if;	  	
  
  return l_value;
  exception 
 	when no_data_found then return null; 
end;
]]></complex-attribute>
                        <category _I_D="e7317d9a-fda7-4e4c-b432-ffa144c8d8d3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="54054c61-ec06-4375-ab53-011b5b952d4f" name="get_application_name" subcategories-loading="none" object-loading="extended" context="get_application_name" is-trigger-function="0" unique-function-name="get_application_name" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305253" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="get_application_name()">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_res jsonb;
begin
  execute 'show application_name' into strict l_res;
  return l_res;
 
  exception when others then 
	return jsonb_build_object('action'::text, 'init'::text);
end;
]]></complex-attribute>
                        <category _I_D="e44bfe57-b8c9-45f9-beb7-56bc877948ab" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0c84e990-c70a-4821-895c-d34c6b5886c9" name="get_base_type_by_dtype" subcategories-loading="none" object-loading="extended" context="get_base_type_by_dtype" is-trigger-function="0" unique-function-name="get_base_type_by_dtype" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_data_type text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304438" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_data_type text" overload-function-count="1" proc-language="sql" function-signature="get_base_type_by_dtype(p_data_type text)" comment="The function returns base data type capable to store the value of the given data type">
                        <complex-attribute name="sql"><![CDATA[
SELECT CASE p_data_type
          -- character data types
          WHEN 'TEXT' THEN 'TEXT'
          WHEN 'CHARACTER' THEN 'TEXT'
          WHEN 'CHARACTER VARYING' THEN 'TEXT'
          -- numeric data types
          WHEN 'BIGINT' THEN 'NUMERIC'
          WHEN 'INTEGER' THEN 'NUMERIC'
          WHEN 'NUMERIC' THEN 'NUMERIC'
          WHEN 'SMALLINT' THEN 'NUMERIC'
          WHEN 'REAL' THEN 'DOUBLE PRECISION'
          WHEN 'DOUBLE PRECISION' THEN 'DOUBLE PRECISION'
          -- date/time data types
          WHEN 'DATE' THEN 'TIMESTAMP WITHOUT TIME ZONE'
          WHEN 'TIME WITHOUT TIME ZONE' THEN 'TIMESTAMP WITHOUT TIME ZONE'
          ELSE p_data_type
       END
]]></complex-attribute>
                        <category _I_D="54f6b767-faf0-4be4-835c-2617e14ac2d4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4a39b80f-5e3d-4563-80d4-1ae4163a08cd" name="get_charset_name" subcategories-loading="none" object-loading="extended" context="get_charset_name" is-trigger-function="0" unique-function-name="get_charset_name" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="ora_charset_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304487" volatility="STABLE" is-window="f" function-identity-arguments="ora_charset_name character varying" overload-function-count="1" proc-language="sql" function-signature="get_charset_name(ora_charset_name character varying)" comment="&amp;#x000a;  Returns PostgreSQL character set name&amp;#x000a;&amp;#x000a;  Parameters:&amp;#x000a;    ora_charset_name -- Oracle character set name&amp;#x000a;&amp;#x000a;  Returns:&amp;#x000a;    PostgreSQL character set name&amp;#x000a;">
                        <complex-attribute name="sql"><![CDATA[

    SELECT COALESCE
    (
        (
            SELECT m.postgresql_charset
            FROM aws_oracle_ext.charset_mapping m
            WHERE STRPOS(LOWER(ora_charset_name), LOWER(m.oracle_charset)) > 0
            LIMIT 1
        ),
        'UNICODE'
    );

]]></complex-attribute>
                        <category _I_D="f236f217-12c3-41a1-bf32-fe581b3d17b0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="14a56ec7-593e-42dd-a420-e9cc846552d9" name="get_cmd_type_by_sql_func_code" subcategories-loading="none" object-loading="extended" context="get_cmd_type_by_sql_func_code" is-trigger-function="0" unique-function-name="get_cmd_type_by_sql_func_code" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="text" function-arguments="p_sql_func_code integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304436" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_sql_func_code integer" overload-function-count="1" proc-language="plpgsql" function-signature="get_cmd_type_by_sql_func_code(p_sql_func_code integer)" comment="This function returns SQL command type (DDL, DML, DCL, TCL, SCL, SCS) by SQL function code.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cmd_type TEXT;
    v_cmd_types TEXT[] = ARRAY['DDL', -- Data Definition Language (DDL)
                               'DML', -- Data Manipulation Language (DML)
                               'DCL', -- Data Control Language (DCL)
                               'TCL', -- Transaction Control Language (TCL)
                               'SCL', -- Session Control Language (SCL)
                               'SCS']; -- System Control Statement (SCS)
BEGIN
    /* See list of possible function codes here:
       https://docstore.mik.ua/orelly/oracle/bipack/ch02_03.htm
    */
    v_cmd_type := CASE p_sql_func_code
                     WHEN 1 -- CREATE [TEMP ]TABLE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 2 -- SET ROLE
                     THEN v_cmd_types[5] -- SCL
                     WHEN 3 -- INSERT[ INTO]
                     THEN v_cmd_types[2] -- DML
                     WHEN 4 -- SELECT
                     THEN v_cmd_types[2] -- DML
                     WHEN 5 -- UPDATE
                     THEN v_cmd_types[2] -- DML
                     WHEN 6 -- DROP ROLE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 7 -- DROP VIEW
                     THEN v_cmd_types[1] -- DDL
                     WHEN 8 -- DROP TABLE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 9 -- DELETE[ FROM]
                     THEN v_cmd_types[2] -- DML
                     WHEN 10 -- CREATE [TEMP ]VIEW
                     THEN v_cmd_types[1] -- DDL
                     WHEN 11 -- DROP USER|SCHEMA
                     THEN v_cmd_types[1] -- DDL
                     WHEN 12 -- CREATE ROLE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 13 -- CREATE [TEMP ]SEQUENCE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 14 -- ALTER SEQUENCE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 16 -- DROP SEQUENCE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 18 -- CREATE CLUSTER
                     THEN v_cmd_types[1] -- DDL
                     WHEN 19 -- CREATE USER|SCHEMA
                     THEN v_cmd_types[1] -- DDL
                     WHEN 20 -- CREATE INDEX
                     THEN v_cmd_types[1] -- DDL
                     WHEN 21 -- DROP INDEX
                     THEN v_cmd_types[1] -- DDL
                     WHEN 22 -- DROP CLUSTER
                     THEN v_cmd_types[1] -- DDL
                     WHEN 24 -- CREATE[ OR REPLACE] PROCEDURE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 25 -- ALTER PROCEDURE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 26 -- ALTER TABLE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 27 -- EXPLAIN[ PLAN]
                     THEN v_cmd_types[2] -- DML
                     WHEN 28 -- GRANT
                     THEN v_cmd_types[3] -- DCL
                     WHEN 29 -- REVOKE
                     THEN v_cmd_types[3] -- DCL
                     WHEN 30 -- CREATE[ OR REPLACE] SYNONYM
                     THEN v_cmd_types[1] -- DDL
                     WHEN 31 -- DROP SYNONYM
                     THEN v_cmd_types[1] -- DDL
                     WHEN 32 -- ALTER SYSTEM
                     THEN v_cmd_types[6] -- SCS
                     WHEN 33 -- SET TRANSACTION
                     THEN v_cmd_types[4] -- TCL
                     WHEN 34 -- PL/SQL EXECUTE
                     THEN v_cmd_types[2] -- DML
                     WHEN 35 -- LOCK[ TABLE]
                     THEN v_cmd_types[2] -- DML
                     WHEN 37 -- RENAME
                     THEN v_cmd_types[1] -- DDL
                     WHEN 38 -- COMMENT
                     THEN v_cmd_types[1] -- DDL
                     WHEN 39 -- AUDIT
                     THEN v_cmd_types[1] -- DDL
                     WHEN 40 -- NOAUDIT
                     THEN v_cmd_types[1] -- DDL
                     WHEN 41 -- ALTER INDEX
                     THEN v_cmd_types[1] -- DDL
                     WHEN 44 -- CREATE DATABASE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 45 -- ALTER DATABASE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 46 -- CREATE[ OR REPLACE] ROLLBACK SEGMENT
                     THEN v_cmd_types[1] -- DDL
                     WHEN 47 -- ALTER ROLLBACK SEGMENT
                     THEN v_cmd_types[1] -- DDL
                     WHEN 48 -- DROP ROLLBACK SEGMENT
                     THEN v_cmd_types[1] -- DDL
                     WHEN 49 -- CREATE[ TEMPORARY] TABLESPACE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 50 -- ALTER TABLESPACE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 51 -- DROP TABLESPACE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 52 -- ALTER SESSION
                     THEN v_cmd_types[5] -- SCL
                     WHEN 53 -- ALTER USER|SCHEMA
                     THEN v_cmd_types[1] -- DDL
                     WHEN 54 -- COMMIT[ WORK]
                     THEN v_cmd_types[4] -- TCL
                     WHEN 55 -- ROLLBACK[ WORK]
                     THEN v_cmd_types[4] -- TCL
                     WHEN 56 -- SAVEPOINT
                     THEN v_cmd_types[4] -- TCL
                     WHEN 57 -- CREATE CONTROL FILE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 59 -- CREATE TRIGGER
                     THEN v_cmd_types[1] -- DDL
                     WHEN 60 -- ALTER TRIGGER
                     THEN v_cmd_types[1] -- DDL
                     WHEN 61 -- DROP TRIGGER
                     THEN v_cmd_types[1] -- DDL
                     WHEN 62 -- ANALYZE TABLE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 63 -- ANALYZE INDEX
                     THEN v_cmd_types[1] -- DDL
                     WHEN 64 -- ANALYZE CLUSTER
                     THEN v_cmd_types[1] -- DDL
                     WHEN 65 -- CREATE PROFILE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 66 -- DROP PROFILE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 67 -- ALTER PROFILE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 68 -- DROP PROCEDURE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 70 -- ALTER RESOURCE COST
                     THEN v_cmd_types[1] -- DDL
                     WHEN 71 -- CREATE SNAPSHOT LOG
                     THEN v_cmd_types[1] -- DDL
                     WHEN 72 -- ALTER SNAPSHOT LOG
                     THEN v_cmd_types[1] -- DDL
                     WHEN 73 -- DROP SNAPSHOT LOG
                     THEN v_cmd_types[1] -- DDL
                     WHEN 74 -- CREATE SNAPSHOT
                     THEN v_cmd_types[1] -- DDL
                     WHEN 75 -- ALTER SNAPSHOT
                     THEN v_cmd_types[1] -- DDL
                     WHEN 76 -- DROP SNAPSHOT
                     THEN v_cmd_types[1] -- DDL
                     WHEN 77 -- CREATE[ OR REPLACE] TYPE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 78 -- DROP TYPE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 79 -- ALTER ROLE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 80 -- ALTER TYPE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 81 -- CREATE[ OR REPLACE] TYPE BODY
                     THEN v_cmd_types[1] -- DDL
                     WHEN 82 -- ALTER TYPE BODY
                     THEN v_cmd_types[1] -- DDL
                     WHEN 83 -- DROP TYPE BODY
                     THEN v_cmd_types[1] -- DDL
                     WHEN 84 -- DROP LIBRARY
                     THEN v_cmd_types[1] -- DDL
                     WHEN 85 -- TRUNCATE TABLE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 86 -- TRUNCATE CLUSTER
                     THEN v_cmd_types[1] -- DDL
                     WHEN 87 -- CREATE BITMAPFILE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 88 -- ALTER VIEW
                     THEN v_cmd_types[1] -- DDL
                     WHEN 89 -- DROP BITMAPFILE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 90 -- SET CONSTRAINT[S]
                     THEN v_cmd_types[4] -- TCL
                     WHEN 91 -- CREATE[ OR REPLACE] FUNCTION
                     THEN v_cmd_types[1] -- DDL
                     WHEN 92 -- ALTER FUNCTION
                     THEN v_cmd_types[1] -- DDL
                     WHEN 93 -- DROP FUNCTION
                     THEN v_cmd_types[1] -- DDL
                     WHEN 94 -- CREATE[ OR REPLACE] PACKAGE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 95 -- ALTER PACKAGE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 96 -- DROP PACKAGE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 97 -- CREATE[ OR REPLACE] PACKAGE BODY
                     THEN v_cmd_types[1] -- DDL
                     WHEN 98 -- ALTER PACKAGE BODY
                     THEN v_cmd_types[1] -- DDL
                     WHEN 99 -- DROP PACKAGE BODY
                     THEN v_cmd_types[1] -- DDL
                     WHEN 157 -- CREATE[ OR REPLACE] DIRECTORY
                     THEN v_cmd_types[1] -- DDL
                     WHEN 158 -- DROP DIRECTORY
                     THEN v_cmd_types[1] -- DDL
                     WHEN 159 -- CREATE[ OR REPLACE] LIBRARY
                     THEN v_cmd_types[1] -- DDL
                     WHEN 170 -- CALL METHOD
                     THEN v_cmd_types[2] -- DML
                     WHEN 189 -- MERGE
                     THEN v_cmd_types[2] -- DML
                     WHEN 197 -- PURGE RECYCLEBIN
                     THEN v_cmd_types[1] -- DDL
                     WHEN 198 -- PURGE DBA_RECYCLEBIN
                     THEN v_cmd_types[1] -- DDL
                     WHEN 199 -- PURGE TABLESPACE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 200 -- PURGE TABLE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 201 -- PURGE INDEX
                     THEN v_cmd_types[1] -- DDL
                     WHEN 202 -- FLASHBACK (UNDROP)
                     THEN v_cmd_types[1] -- DDL
                     WHEN 203 -- DROP DATABASE
                     THEN v_cmd_types[1] -- DDL
                     WHEN 243 -- CREATE[ OR REPLACE] ATTRIBUTE DIMENSION
                     THEN v_cmd_types[1] -- DDL
                     WHEN 244 -- ALTER ATTRIBUTE DIMENSION
                     THEN v_cmd_types[1] -- DDL
                     WHEN 245 -- DROP ATTRIBUTE DIMENSION
                     THEN v_cmd_types[1] -- DDL
                     WHEN 246 -- CREATE[ OR REPLACE] HIERARCHY
                     THEN v_cmd_types[1] -- DDL
                     WHEN 247 -- ALTER HIERARCHY
                     THEN v_cmd_types[1] -- DDL
                     WHEN 248 -- DROP HIERARCHY
                     THEN v_cmd_types[1] -- DDL
                     WHEN 249 -- CREATE[ OR REPLACE] ANALYTIC VIEW
                     THEN v_cmd_types[1] -- DDL
                     WHEN 250 -- ALTER ANALYTIC VIEW
                     THEN v_cmd_types[1] -- DDL
                     WHEN 251 -- DROP ANALYTIC VIEW
                     THEN v_cmd_types[1] -- DDL
                  END;

    RETURN v_cmd_type;
END;
]]></complex-attribute>
                        <category _I_D="87495a55-ec25-45d0-a20f-c272390d6491" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7be871c9-24f7-4948-b70e-7aab9e1d5a14" name="get_context_param" subcategories-loading="none" object-loading="extended" context="get_context_param" is-trigger-function="0" unique-function-name="get_context_param" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="a_param_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305106" volatility="VOLATILE" is-window="f" function-identity-arguments="a_param_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="get_context_param(a_param_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
begin
	/*Params:
	 * 'key' - secret key for the crypt calls
	 * 'auto_clean_interval' - an interval for context_global auto cleaning*/	
  return (select param_value 
 			from aws_oracle_context.params 
 			where param_name = a_param_name);  
end;	
]]></complex-attribute>
                        <category _I_D="0f6531d5-95de-46d5-aa42-8da217e28856" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cf79310c-c43b-4b4c-a60b-6a82b09f5dd3" name="get_context_type" subcategories-loading="none" object-loading="extended" context="get_context_type" is-trigger-function="0" unique-function-name="get_context_type" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="a_context_namespace character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305105" volatility="IMMUTABLE" is-window="f" function-identity-arguments="a_context_namespace character varying" overload-function-count="1" proc-language="sql" function-signature="get_context_type(a_context_namespace character varying)">
                        <complex-attribute name="sql"><![CDATA[
  select upper(context_type) 
 			from aws_oracle_context.context 
 			where context_namespace = $1;  
]]></complex-attribute>
                        <category _I_D="0d9294bd-6d41-477d-9272-6fd1ad92bfea" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="538c5823-0c0d-4548-88fa-b269273ec293" name="get_extpack_variable" subcategories-loading="none" object-loading="extended" context="get_extpack_variable" is-trigger-function="0" unique-function-name="get_extpack_variable" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean" is-returning-set="f" ret-datatype="text" function-arguments="variable_name text, missing_ok boolean DEFAULT true" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304124" volatility="VOLATILE" is-window="f" function-identity-arguments="variable_name text, missing_ok boolean" overload-function-count="1" proc-language="plpgsql" function-signature="get_extpack_variable(variable_name text, missing_ok boolean)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    RETURN aws_oracle_ext.get_package_variable
    (
        variable_name => get_extpack_variable.variable_name
    );
   
EXCEPTION 
    WHEN OTHERS THEN

        IF missing_ok THEN
        
            RETURN NULL;

        ELSE

            RAISE;

        END IF;

END;
]]></complex-attribute>
                        <category _I_D="ac3bfa54-d5e6-4aae-866e-350deaf8f0ee" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0967798e-ab51-437a-9a68-96f727fce2e8" name="get_id_by_name" subcategories-loading="none" object-loading="extended" context="get_id_by_name" is-trigger-function="0" unique-function-name="get_id_by_name" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="int8" function-arguments="object_name text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304380" volatility="VOLATILE" is-window="f" function-identity-arguments="object_name text" overload-function-count="1" proc-language="plpgsql" function-signature="get_id_by_name(object_name text)">
                        <complex-attribute name="sql"><![CDATA[
declare res bigint;
begin
  execute concat('select x''', substring(encode(digest($1, 'sha1'), 'hex'), 1, 16), '''::bigint') into res;
  return res;  
end;
]]></complex-attribute>
                        <category _I_D="6a9a6fd7-830a-4a0d-8751-c525c9516113" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="45c5d7e4-ffe2-4dd7-8cf5-90350081b776" name="get_jobs" subcategories-loading="none" object-loading="extended" context="get_jobs" is-trigger-function="0" unique-function-name="get_jobs" is-aggregate="f" language-name="plpgsql" arguments-datatypes="timestamp without time zone,integer,bigint,character varying,character varying" is-returning-set="t" ret-datatype="table" function-arguments="p_next_date_before timestamp without time zone DEFAULT CURRENT_TIMESTAMP, p_limit integer DEFAULT 1" schema-id="304013" function-type="RET_DATASET" count-arguments="2" function-id="304488" volatility="VOLATILE" is-window="f" function-identity-arguments="p_next_date_before timestamp without time zone, p_limit integer" overload-function-count="1" proc-language="plpgsql" function-signature="get_jobs(p_next_date_before timestamp without time zone, p_limit integer)">
                        <complex-attribute name="sql"><![CDATA[
  declare
    l_this_date timestamp with time zone := clock_timestamp();
  begin
    return query 
      update aws_oracle_ext.jobs j
         set this_date = l_this_date
        from (
          select jj.job
            from aws_oracle_ext.jobs jj
           where jj.this_date is null
             and broken <> 'Y'
             and jj.next_date <= p_next_date_before
             and pg_try_advisory_xact_lock( jj.job )
           limit p_limit
             for update
        ) jj
       where j.job = jj.job
      returning j.job, j.what, j.search_path;
  end;
]]></complex-attribute>
                        <category _I_D="01910d8d-b3a8-45d8-83d6-75a96f27972e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5b907593-1406-4790-a912-b328224475fe" name="get_ora_sqlcode" subcategories-loading="none" object-loading="extended" context="get_ora_sqlcode" is-trigger-function="0" unique-function-name="get_ora_sqlcode" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="int4" function-arguments="ora_exception character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304489" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ora_exception character varying" overload-function-count="1" proc-language="plpgsql" function-signature="get_ora_sqlcode(ora_exception character varying)" comment="&amp;#x000a;  Returns an appropriate Oracle error code for Oracle built-in exception.&amp;#x000a;&amp;#x000a;  Parameters:&amp;#x000a;    ora_exception -- name of Oracle built-in exception&amp;#x000a;">
                        <complex-attribute name="sql"><![CDATA[
  declare
    l_ora_code aws_oracle_ext.mapped_error_codes.ora_code%type;
  begin
    select ora_code into strict l_ora_code
      from aws_oracle_ext.mapped_error_codes c
     where c.ora_exception = upper( get_ora_sqlcode.ora_exception )
       and ora_code is not null;

    return l_ora_code;
  exception
    when no_data_found then
      raise exception no_data_found 
      using message = format( 'No error code is found for the Oracle built-in exception (%s)', ora_exception )
          , detail =  concat_ws
              ( 'There is no mapping found for the Oracle error code in the current version of Extension Pack: ', ora_exception )
          , hint = 'Check the documentation on error code mappings, please.';
  end;
]]></complex-attribute>
                        <category _I_D="7a282e54-a6e2-44e1-a5a3-3d0b9a6c2c82" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ba0ac8a9-af14-4c55-85f5-6f2bd350ca20" name="get_ora_sqlcode_by_pg" subcategories-loading="none" object-loading="extended" context="get_ora_sqlcode_by_pg" is-trigger-function="0" unique-function-name="get_ora_sqlcode_by_pg" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="int4" function-arguments="pg_code character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305265" volatility="VOLATILE" is-window="f" function-identity-arguments="pg_code character varying" overload-function-count="1" proc-language="plpgsql" function-signature="get_ora_sqlcode_by_pg(pg_code character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare
    l_ora_code aws_oracle_ext.mapped_error_codes.ora_code%type;
  begin
    select ora_code into strict l_ora_code
      from aws_oracle_ext.mapped_error_codes c
     where c.pg_code = upper( get_ora_sqlcode_by_pg.pg_code )
       and ora_code is not null;

    return l_ora_code;
  exception
    when no_data_found then
      raise exception no_data_found 
      using message = format( 'No error code mapping is found for the PostgreSQL error code (%s)', pg_code )
          , detail =  concat_ws
              ('', 'There is no mapping found for the PostgreSQL error code in the current version of Extension Pack: ', pg_code )
          , hint = 'Check the documentation on error code mappings, please.'    ;
          
    when too_many_rows then
      raise exception too_many_rows 
      using message = format( 'More than one error code mapping is found for the PostgreSQL error code (%s)', pg_code )
          , detail =  concat_ws
              ('', 'More than one row found for the PostgreSQL error code in the current version of Extension Pack: ', pg_code )
          , hint = 'Check the documentation on error code mappings, please.'    ;
  end;
]]></complex-attribute>
                        <category _I_D="a2e1c5b4-dbc9-4c9a-a48e-8d89a1168f9e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="abbb869c-79f6-420b-923a-e986dcd5b277" name="get_package_variable" subcategories-loading="none" object-loading="extended" context="get_package_variable" is-trigger-function="0" unique-function-name="get_package_variable" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="schema_name text DEFAULT 'AWS_ORACLE_EXT'::text, package_name text DEFAULT 'AWS_ORACLE_ENV'::text, variable_name text DEFAULT ''::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304058" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name text, package_name text, variable_name text" overload-function-count="1" proc-language="plpgsql" function-signature="get_package_variable(schema_name text, package_name text, variable_name text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vschema_name TEXT := schema_name;
    vpackage_name TEXT := package_name;
BEGIN
    
    IF COALESCE(schema_name, 'AWS_ORACLE_EXT') <> 'AWS_ORACLE_EXT' AND

        COALESCE(package_name, 'AWS_ORACLE_ENV') <> 'AWS_ORACLE_ENV' THEN

        vschema_name := aws_oracle_ext.check_identifier_case(schema_name);
        vpackage_name := aws_oracle_ext.check_identifier_case(package_name);
    
        IF aws_oracle_ext.check_identifier_case(variable_name) <> 'init$$' THEN
        
            EXECUTE CONCAT
            (
                'SELECT ',
                schema_name,
                '.',
                package_name,
                '$Init()'
            );
    
        END IF;

    END IF;
    
    RETURN NULLIF
    (
        aws_oracle_ext.get_package_variable_v8
        (
            sn => vschema_name,
            pn => vpackage_name,
            vn => aws_oracle_ext.check_identifier_case(variable_name)
        ),
        ''
    );

END;
]]></complex-attribute>
                        <category _I_D="1477e2f0-3696-4289-8a73-30747820de54" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="674a7f6c-a7ce-429a-8226-ea10eecbd9ca" name="get_package_variable_object" subcategories-loading="none" object-loading="extended" context="get_package_variable_object" is-trigger-function="0" unique-function-name="get_package_variable_object" is-aggregate="f" language-name="plpgsql" arguments-datatypes="name,name,name" is-returning-set="f" ret-datatype="text" function-arguments="schema_name name, package_name name, object_name name" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304490" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name name, package_name name, object_name name" overload-function-count="1" proc-language="plpgsql" function-signature="get_package_variable_object(schema_name name, package_name name, object_name name)">
                        <complex-attribute name="sql"><![CDATA[
  begin
    execute 'select ' || schema_name || '.' || package_name || '$Init()';

    return aws_oracle_ext.get_package_variable
        ( schema_name := schema_name
        , package_name := package_name
        , variable_name := object_name || '$OBJ' );
  end;
]]></complex-attribute>
                        <category _I_D="23020c88-6ca5-4d4c-904f-16e89d753515" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="220d3026-32ec-4075-ba4e-c7223dce9186" name="get_package_variable_object_field" subcategories-loading="none" object-loading="extended" context="get_package_variable_object_field" is-trigger-function="0" unique-function-name="get_package_variable_object_field" is-aggregate="f" language-name="plpgsql" arguments-datatypes="name,name,name,text" is-returning-set="f" ret-datatype="text" function-arguments="schema_name name, package_name name, variable_name name, field_name text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304491" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name name, package_name name, variable_name name, field_name text" overload-function-count="1" proc-language="plpgsql" function-signature="get_package_variable_object_field(schema_name name, package_name name, variable_name name, field_name text)">
                        <complex-attribute name="sql"><![CDATA[
  begin
    execute 'select ' || schema_name || '.' || package_name || '$Init()';

    return aws_oracle_ext.get_package_variable
      ( schema_name, package_name, variable_name || '.' || field_name );
  end;
]]></complex-attribute>
                        <category _I_D="d48c8e44-b243-4138-82d5-d02d52f8c576" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f59cc795-a2e5-4c92-b24d-0f194ac94aa9" name="get_package_variable_v8" subcategories-loading="none" object-loading="extended" context="get_package_variable_v8" is-trigger-function="0" unique-function-name="get_package_variable_v8" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="sn text, pn text, vn text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304059" volatility="VOLATILE" is-window="f" function-identity-arguments="sn text, pn text, vn text" overload-function-count="1" proc-language="plv8" function-signature="get_package_variable_v8(sn text, pn text, vn text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
if (!aws_oracle_ext.hasOwnProperty(sn)) plv8.elog(ERROR, `unknown variable ${sn}.${pn}.${vn}.`);
if (!aws_oracle_ext[sn].hasOwnProperty(pn)) plv8.elog(ERROR, `unknown variable ${sn}.${pn}.${vn}.`);
if (!aws_oracle_ext[sn][pn].hasOwnProperty(vn)) plv8.elog(ERROR, `unknown variable ${sn}.${pn}.${vn}.`);

if (aws_oracle_ext[sn][pn][vn] instanceof Tree) plv8.elog(ERROR, `variable ${sn}.${pn}.${vn} has type Collection`);

return aws_oracle_ext[sn][pn][vn];

]]></complex-attribute>
                        <category _I_D="b04ad915-d0f1-428c-b3da-5400c899d2a1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="40db3d35-fb1b-40a8-8476-69d0304b5599" name="get_pg_sqlstate" subcategories-loading="none" object-loading="extended" context="get_pg_sqlstate" is-trigger-function="0" unique-function-name="get_pg_sqlstate" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="varchar" function-arguments="ora_code integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304492" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ora_code integer" overload-function-count="1" proc-language="plpgsql" function-signature="get_pg_sqlstate(ora_code integer)" comment="&amp;#x000a;  Returns a mapped PostgreSQL error code for Oracle error code, if a mapping exists.&amp;#x000a;&amp;#x000a;  Parameters:&amp;#x000a;    ora_code -- Oracle integer error code like those SQLCODE returns&amp;#x000a;">
                        <complex-attribute name="sql"><![CDATA[
  declare
    l_pg_code aws_oracle_ext.mapped_error_codes.pg_code%type;
  begin
    select pg_code into strict l_pg_code
      from aws_oracle_ext.mapped_error_codes c
     where c.ora_code = get_pg_sqlstate.ora_code
       and pg_code is not null;

    return l_pg_code;
  exception
    when no_data_found then
      raise exception no_data_found 
      using message = format( 'No error code mapping is found for the Oracle error code (%s)', ora_code )
          , detail =  concat_ws
              ( 'There is no mapping found for the Oracle error code in the current version of Extension Pack: ', ora_code )
          , hint = 'Check the documentation on error code mappings, please.'    ;
  end;
]]></complex-attribute>
                        <category _I_D="9ae69b86-03c8-4c41-adf1-0a8e3e156ce2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="29e49955-d766-47f0-aed5-c110b020130d" name="get_sequence_value" subcategories-loading="none" object-loading="extended" context="get_sequence_value" is-trigger-function="0" unique-function-name="get_sequence_value" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="int8" function-arguments="aschemaname character varying, asequencename character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304243" volatility="VOLATILE" is-window="f" function-identity-arguments="aschemaname character varying, asequencename character varying" overload-function-count="1" proc-language="plpgsql" function-signature="get_sequence_value(aschemaname character varying, asequencename character varying)" comment="Returns the sequence current value">
                        <complex-attribute name="sql"><![CDATA[
declare
  lVal bigint;
begin
  EXECUTE 'SELECT last_value from '||quote_ident(aSchemaName)||'.'||quote_ident(aSequenceName) into lVal;
  return lVal;    
  exception when others then
    return null;
end;
]]></complex-attribute>
                        <category _I_D="a1a08c45-fa02-47b4-90d6-f3cf849d545d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="42574011-7800-4e26-8e06-fe460158c802" name="get_service_setting" subcategories-loading="none" object-loading="extended" context="get_service_setting" is-trigger-function="0" unique-function-name="get_service_setting" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="p_service character varying, p_setting character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304493" volatility="VOLATILE" is-window="f" function-identity-arguments="p_service character varying, p_setting character varying" overload-function-count="1" proc-language="sql" function-signature="get_service_setting(p_service character varying, p_setting character varying)">
                        <complex-attribute name="sql"><![CDATA[
  select value from aws_oracle_ext.service_settings where service = p_service and setting = p_setting;
]]></complex-attribute>
                        <category _I_D="1d1ed09a-e27b-4dfe-a823-3fe490a9588d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4c0a2cbd-a8d0-46a2-ae20-f800adaa6e50" name="get_user_oid_by_name" subcategories-loading="none" object-loading="extended" context="get_user_oid_by_name" is-trigger-function="0" unique-function-name="get_user_oid_by_name" is-aggregate="f" language-name="sql" arguments-datatypes="name" is-returning-set="f" ret-datatype="int8" function-arguments="p_user_name name" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304437" volatility="VOLATILE" is-window="f" function-identity-arguments="p_user_name name" overload-function-count="1" proc-language="sql" function-signature="get_user_oid_by_name(p_user_name name)" comment="This function returns OID for the specified database user name.">
                        <complex-attribute name="sql"><![CDATA[
SELECT oid::BIGINT
  FROM pg_catalog.pg_roles
 WHERE rolname = p_user_name
]]></complex-attribute>
                        <category _I_D="aa013788-4646-441f-9fe1-ad7494c4e264" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="36166a50-315f-4d59-ac4b-1c91a310b5cb" name="get_version" subcategories-loading="none" object-loading="extended" context="get_version" is-trigger-function="0" unique-function-name="get_version" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pcomponentname character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304494" volatility="VOLATILE" is-window="f" function-identity-arguments="pcomponentname character varying" overload-function-count="1" proc-language="sql" function-signature="get_version(pcomponentname character varying)">
                        <complex-attribute name="sql"><![CDATA[
	SELECT componentversion 
	  FROM aws_oracle_ext.versions
	 WHERE extpackcomponentname = pComponentName;
]]></complex-attribute>
                        <category _I_D="62ef167c-27d8-4bf3-b497-37becee189fd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="36cd4060-c8ea-44fd-9635-952634d8ca71" name="getglobalvariable" subcategories-loading="none" object-loading="extended" context="getglobalvariable" is-trigger-function="0" unique-function-name="getglobalvariable" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="proutinename text, pvariable text, ptp anyelement" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304104" volatility="STABLE" is-window="f" function-identity-arguments="proutinename text, pvariable text, ptp anyelement" overload-function-count="1" proc-language="plv8" function-signature="getglobalvariable(proutinename text, pvariable text, ptp anyelement)">
                        <complex-attribute name="sql"><![CDATA[
'use strict';
  if (typeof(require) !== 'function') {
    const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
    initColl();
  }
  const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
  let parts = parser(proutinename);
  if (parts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
  const sn = parts[0].text;
  const pn = parts[2].text;
  
  let doSQLInit = (typeof(aws_oracle_ext) === 'undefined');
  
  if (!doSQLInit) doSQLInit = !aws_oracle_ext.hasOwnProperty(sn);
  
  if (!doSQLInit) doSQLInit = !aws_oracle_ext[sn].hasOwnProperty(pn);
  
  if (!doSQLInit) doSQLInit = !aws_oracle_ext[sn][pn].hasOwnProperty('Init$$');
  
  if (doSQLInit) {
    let x = '$$';
    for (let i = 0; i < 16; i++) {
        if (sn.includes(x) || pn.includes(x)) {
            x = `$aws${(+((new Date).setMilliseconds(i))).toString(36)}$`;
            } 
        else {
            break;
            }
        }
    plv8.execute(`do language plpgsql ${x}begin PERFORM ${sn}.${pn}$Init(); end;${x}`);
    }
  
  parts = parser(pvariable);
  const getField = require('PackageTools').getRecordField;
  const result = getField(aws_oracle_ext[sn][pn], parts);
  return result;

]]></complex-attribute>
                        <category _I_D="6828ceac-310c-41ab-b45e-92537e17159f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dcc45cbd-53d3-4d88-851e-0db3d0d12e0f" name="getpathparts" subcategories-loading="none" object-loading="extended" context="getpathparts" is-trigger-function="0" unique-function-name="getpathparts" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="_text" function-arguments="ppath text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305276" volatility="VOLATILE" is-window="f" function-identity-arguments="ppath text" overload-function-count="1" proc-language="plpgsql" function-signature="getpathparts(ppath text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    
    IF ppath !~ '[^\[\]]+\[.+\]' THEN

        RETURN NULL;

    END IF;

    RETURN REGEXP_SPLIT_TO_ARRAY
    (
        REPLACE
        (
            REPLACE
            (
                ppath,
                '[',
                '.'
            ),
            ']',
            ''
        ),
        '\.'
    );
END;
]]></complex-attribute>
                        <category _I_D="b7c7e85a-4300-4bea-8e4b-3e62827dcc77" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f1fb6d33-d9c4-419c-a120-4dffb0fdccec" name="greatest" subcategories-loading="none" object-loading="extended" context="greatest" is-trigger-function="0" unique-function-name="greatest" is-aggregate="f" language-name="sql" arguments-datatypes="anyarray" is-returning-set="f" ret-datatype="anyelement" function-arguments="VARIADIC anyarray" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305266" volatility="VOLATILE" is-window="f" function-identity-arguments="VARIADIC anyarray" overload-function-count="1" proc-language="sql" function-signature="greatest(VARIADIC anyarray)">
                        <complex-attribute name="sql"><![CDATA[
  SELECT unnest($1)
  ORDER BY 1 DESC NULLS FIRST
  LIMIT 1;
]]></complex-attribute>
                        <category _I_D="a37e9e2c-6e4f-415b-b0ad-58ea7f85d511" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7957d405-8b6e-4d96-a8c4-d2b775d3dc11" name="has_column_privilege" subcategories-loading="none" object-loading="extended" context="has_column_privilege" is-trigger-function="0" unique-function-name="has_column_privilege" is-aggregate="f" language-name="plpgsql" arguments-datatypes="name,name,name" is-returning-set="f" ret-datatype="bool" function-arguments="schema_name name, table_name name, column_name name" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304244" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name name, table_name name, column_name name" overload-function-count="1" proc-language="plpgsql" function-signature="has_column_privilege(schema_name name, table_name name, column_name name)">
                        <complex-attribute name="sql"><![CDATA[
begin
    return has_column_privilege(quote_ident($1 || '.'||$2), $3, 'SELECT,INSERT,UPDATE,REFERENCES');
    exception 
   		when others then return null;
end
]]></complex-attribute>
                        <category _I_D="ea588bff-17a1-400d-8c68-de5e195d3d70" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7f2a7601-7c5c-43cb-9494-9e8b395b0b3c" name="hex_to_int" subcategories-loading="none" object-loading="extended" context="hex_to_int" is-trigger-function="0" unique-function-name="hex_to_int" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="int4" function-arguments="hexval text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304619" volatility="IMMUTABLE" is-window="f" function-identity-arguments="hexval text" overload-function-count="1" proc-language="plpgsql" function-signature="hex_to_int(hexval text)" comment="Convert hex string to integer.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  result  int;
BEGIN
  EXECUTE 'SELECT x' || quote_literal(hexval) || '::int' INTO result;
  --EXECUTE 'SELECT x''' || hexval || '''::int' INTO result;
  RETURN result;
END; 
]]></complex-attribute>
                        <category _I_D="fc648980-1c96-49ab-84ba-d8d3101c7a09" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d7c0e192-40ca-47ac-91e5-75ed5157489c" name="htf$address" subcategories-loading="none" object-loading="extended" context="htf$address" is-trigger-function="0" unique-function-name="htf$address" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cvalue text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304635" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cvalue text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$address(cvalue text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<address',
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', 'clear="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(cnowrap,' nowrap="nowrap"'),
                     aws_oracle_ext.htf$ifnotnull(cattributes,concat_ws('', ' ', cattributes)),
                     '>',
                     cvalue,
                     '</address>');

]]></complex-attribute>
                        <category _I_D="04cee095-de26-4efa-b6e7-9de8beea38c3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9e726b1b-1db7-4524-ad33-b8c8c0f84a82" name="htf$anchor" subcategories-loading="none" object-loading="extended" context="htf$anchor" is-trigger-function="0" unique-function-name="htf$anchor" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="curl text, ctext text, cname text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304637" volatility="IMMUTABLE" is-window="f" function-identity-arguments="curl text, ctext text, cname text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$anchor(curl text, ctext text, cname text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('', 
        '<A HREF="',
        curl,
        '"',
        CASE
            WHEN cname IS NOT NULL THEN
                CONCAT_WS('', ' NAME="', cname, '"')
            ELSE
                ''
        END,
        CASE
            WHEN cattributes IS NOT NULL THEN
                CONCAT_WS('', ' ', cattributes)
            ELSE
                ''
        END,
        '>',
        ctext,
        '</A>'
    );

]]></complex-attribute>
                        <category _I_D="8edddcd5-693c-4f57-b919-347e1fb3c05c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="77e78903-5a7d-412f-a818-84d162e0323c" name="htf$anchor2" subcategories-loading="none" object-loading="extended" context="htf$anchor2" is-trigger-function="0" unique-function-name="htf$anchor2" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="curl text, ctext text, cname text DEFAULT NULL::text, ctarget text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304636" volatility="IMMUTABLE" is-window="f" function-identity-arguments="curl text, ctext text, cname text, ctarget text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$anchor2(curl text, ctext text, cname text, ctarget text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('', 
        '<A HREF="',
        curl,
        '"',
        CASE
            WHEN cname IS NOT NULL THEN
                CONCAT_WS('', ' NAME="', cname, '"')
            ELSE
                ''
        END,
        CASE
            WHEN ctarget IS NOT NULL THEN
                CONCAT_WS('', ' TARGET="', ctarget, '"')
            ELSE
                ''
        END,
        CASE
            WHEN cattributes IS NOT NULL THEN
                CONCAT_WS('', ' ', cattributes)
            ELSE
                ''
        END,
        '>',
        ctext,
        '</A>'
    );

]]></complex-attribute>
                        <category _I_D="e0a1525d-e57e-4c90-8673-00c0965f12be" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ee86df3d-4cd0-47d9-9bd8-05a96e2b7417" name="htf$appletclose" subcategories-loading="none" object-loading="extended" context="htf$appletclose" is-trigger-function="0" unique-function-name="htf$appletclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304638" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$appletclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</applet>';

]]></complex-attribute>
                        <category _I_D="f15e238a-ed81-4b02-989b-3ceb9a2d6aa0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d959ea65-d41f-4f98-8e2b-b828b78bb453" name="htf$appletopen" subcategories-loading="none" object-loading="extended" context="htf$appletopen" is-trigger-function="0" unique-function-name="htf$appletopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric,numeric,text" is-returning-set="f" ret-datatype="text" function-arguments="ccode text, cwidth numeric, cheight numeric, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304639" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ccode text, cwidth numeric, cheight numeric, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$appletopen(ccode text, cwidth numeric, cheight numeric, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<applet code=',
                     ccode,
                     ' width=',cwidth,
                     ' height=',cheight,
                     aws_oracle_ext.htf$ifnotnull(cattributes,concat_ws('',' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="fb62ce84-cd1c-479d-b230-f41d60506a2d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0135f50b-e965-445e-ae1b-24c897567630" name="htf$area" subcategories-loading="none" object-loading="extended" context="htf$area" is-trigger-function="0" unique-function-name="htf$area" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="ccoords text, cshape text DEFAULT NULL::text, chref text DEFAULT NULL::text, cnohref text DEFAULT NULL::text, ctarget text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304640" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ccoords text, cshape text, chref text, cnohref text, ctarget text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$area(ccoords text, cshape text, chref text, cnohref text, ctarget text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

      SELECT CONCAT_WS('',
                       '<area',
                       aws_oracle_ext.htf$ifnotnull(cshape,' shape="'||cshape||'"'),
                       ' coords="',
                       ccoords,'"',
                       aws_oracle_ext.htf$ifnotnull(chref, concat_ws('', ' href="', chref, '"')),
                       aws_oracle_ext.htf$ifnotnull(cnohref, concat_ws('', ' nohref="nohref"')),
                       aws_oracle_ext.htf$ifnotnull(ctarget, concat_ws('', ' target="', ctarget, '"')),
                       aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                       ' />');

]]></complex-attribute>
                        <category _I_D="920329b9-556b-4690-9ec6-03ef18057dca" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="db49dba4-e61d-4a91-9dae-264fbd989602" name="htf$base" subcategories-loading="none" object-loading="extended" context="htf$base" is-trigger-function="0" unique-function-name="htf$base" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctarget text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304642" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctarget text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$base(ctarget text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<base',
                     aws_oracle_ext.htf$ifnotnull(ctarget, concat_ws('', ' target="', ctarget, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' href="',
                     case when aws_oracle_ext.owa_util$get_cgi_env('REQUEST_PROTOCOL') is null then 'http'
                          else lower('REQUEST_PROTOCOL')
                      end,
                     '://',
                     aws_oracle_ext.owa_util$get_cgi_env('SERVER_NAME'),
                     ':',
                     aws_oracle_ext.owa_util$get_cgi_env('SERVER_PORT'),
                     aws_oracle_ext.owa_util$get_cgi_env('SCRIPT_NAME'),
                     aws_oracle_ext.owa_util$get_cgi_env('PATH_INFO'),
                     '" />');

]]></complex-attribute>
                        <category _I_D="8a4de356-82f6-4d21-8187-b2b366610f5a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="89dc6066-5feb-49d9-9ae1-75582cfb4a3e" name="htf$basefont" subcategories-loading="none" object-loading="extended" context="htf$basefont" is-trigger-function="0" unique-function-name="htf$basefont" is-aggregate="f" language-name="sql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="text" function-arguments="nsize numeric, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304641" volatility="IMMUTABLE" is-window="f" function-identity-arguments="nsize numeric, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$basefont(nsize numeric, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('' ,
                     '<basefont size="', 
                     nsize ,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="c4649180-73b3-4c71-87d5-e8c59ad39425" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="14a58ad2-8666-4150-806f-aa3a2295792e" name="htf$bgsound" subcategories-loading="none" object-loading="extended" context="htf$bgsound" is-trigger-function="0" unique-function-name="htf$bgsound" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="csrc text, cloop text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304643" volatility="IMMUTABLE" is-window="f" function-identity-arguments="csrc text, cloop text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$bgsound(csrc text, cloop text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<bgsound src="',
                     csrc,
                     '"',
                     aws_oracle_ext.htf$IFNOTNULL(cloop, concat_ws('', ' loop="', cloop, '"')),
                     aws_oracle_ext.htf$IFNOTNULL(cattributes, concat_ws('',' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="a5bb1e3e-92af-48c5-8736-4646fa55db9e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fc72faac-62a0-4499-8b89-60be5c30a5fc" name="htf$big" subcategories-loading="none" object-loading="extended" context="htf$big" is-trigger-function="0" unique-function-name="htf$big" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304644" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$big(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<big',
                     aws_oracle_ext.htf$IFNOTNULL(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</big>');

]]></complex-attribute>
                        <category _I_D="1d95d6bb-15f3-4611-be25-7b5ebe582818" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a29b7eb4-ba17-4ac6-902a-a4a0926e3bba" name="htf$blockquoteclose" subcategories-loading="none" object-loading="extended" context="htf$blockquoteclose" is-trigger-function="0" unique-function-name="htf$blockquoteclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304645" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$blockquoteclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</blockquote>';

]]></complex-attribute>
                        <category _I_D="3c42b668-216c-4255-986f-aef490972f48" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c26dbf5a-d97e-49a3-853a-c5a8df31c368" name="htf$blockquoteopen" subcategories-loading="none" object-loading="extended" context="htf$blockquoteopen" is-trigger-function="0" unique-function-name="htf$blockquoteopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304646" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$blockquoteopen(cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<blockquote',
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(cnowrap, concat_ws('', ' nowrap="nowrap"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="4c82b9ff-f5eb-4141-ac0f-c0cbac4d00a1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="78cfdea7-82ee-4455-8369-93930c26bacf" name="htf$bold" subcategories-loading="none" object-loading="extended" context="htf$bold" is-trigger-function="0" unique-function-name="htf$bold" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304647" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$bold(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<b',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</b>');

]]></complex-attribute>
                        <category _I_D="f60c339d-16b8-4f63-b877-3fdbf64883c7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3e490bb4-308e-4682-a71d-806ac88b69f4" name="htf$br" subcategories-loading="none" object-loading="extended" context="htf$br" is-trigger-function="0" unique-function-name="htf$br" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304648" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$br(cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<br',
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="6f1eff41-11a8-42fc-ba8b-ecb895c5a193" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="203b211a-7af7-4c64-b97a-9c32a6eef68c" name="htf$center" subcategories-loading="none" object-loading="extended" context="htf$center" is-trigger-function="0" unique-function-name="htf$center" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304651" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="sql" function-signature="htf$center(ctext text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<center>',
                     ctext,
                     '</center>');

]]></complex-attribute>
                        <category _I_D="ceb1185f-e170-4e18-aef6-3a12acd3c424" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="417bbda9-f7fd-4eec-a817-7c7f7853d6f3" name="htf$centerclose" subcategories-loading="none" object-loading="extended" context="htf$centerclose" is-trigger-function="0" unique-function-name="htf$centerclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304649" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$centerclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</center>';

]]></complex-attribute>
                        <category _I_D="67e086eb-5dbd-4655-b48a-5ad109a70c82" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="321cdf32-51af-4a61-be20-479e8be525f7" name="htf$centeropen" subcategories-loading="none" object-loading="extended" context="htf$centeropen" is-trigger-function="0" unique-function-name="htf$centeropen" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304650" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$centeropen()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '<center>';

]]></complex-attribute>
                        <category _I_D="362d34af-8736-48c2-94a3-c8012ae2d89e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0893107c-d22b-4b0d-b051-934641296ca2" name="htf$cite" subcategories-loading="none" object-loading="extended" context="htf$cite" is-trigger-function="0" unique-function-name="htf$cite" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304652" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$cite(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<cite',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</cite>');

]]></complex-attribute>
                        <category _I_D="4644a26e-bfc4-488d-a678-3112985f51be" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="440d2643-e912-411c-ab79-336507fd803a" name="htf$code" subcategories-loading="none" object-loading="extended" context="htf$code" is-trigger-function="0" unique-function-name="htf$code" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304653" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$code(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<code',
                     aws_oracle_ext.htf$IFNOTNULL(cattributes, concat_ws('', ' ', cattributes)),
                     '>', 
                     ctext, 
                     '</code>');

]]></complex-attribute>
                        <category _I_D="f9ad72fa-1344-4ca3-a6a3-81de9308a973" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e22078b8-8a95-48aa-8787-c1ef83d9b936" name="htf$comment" subcategories-loading="none" object-loading="extended" context="htf$comment" is-trigger-function="0" unique-function-name="htf$comment" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304654" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="sql" function-signature="htf$comment(ctext text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<!-- ',
                     ctext,
                     ' --');

]]></complex-attribute>
                        <category _I_D="5fe8cb52-246f-47e7-849d-30680a09b2ac" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="23a1350d-0465-4ea2-a302-0afb608ef325" name="htf$dfn" subcategories-loading="none" object-loading="extended" context="htf$dfn" is-trigger-function="0" unique-function-name="htf$dfn" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304655" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$dfn(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<dfn',
                     aws_oracle_ext.htf$IFNOTNULL(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</dfn>');

]]></complex-attribute>
                        <category _I_D="0e4c85b2-befd-4d24-a2d0-dacf70cf29ca" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e74a444a-1b82-43f7-a231-fc0cf3cc183a" name="htf$dirlistclose" subcategories-loading="none" object-loading="extended" context="htf$dirlistclose" is-trigger-function="0" unique-function-name="htf$dirlistclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304656" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$dirlistclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</dir>';

]]></complex-attribute>
                        <category _I_D="c06fc6b7-b8d9-47e1-8260-58e9d9b90545" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9d1af5c9-f747-4ef0-81d6-b53dd1ccef7c" name="htf$dirlistopen" subcategories-loading="none" object-loading="extended" context="htf$dirlistopen" is-trigger-function="0" unique-function-name="htf$dirlistopen" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304657" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$dirlistopen()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '<dir>';

]]></complex-attribute>
                        <category _I_D="7f06fcfa-3b9f-425d-922b-0639e511d22f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5bdb4d50-17d2-4182-9061-5579adbd7d46" name="htf$div" subcategories-loading="none" object-loading="extended" context="htf$div" is-trigger-function="0" unique-function-name="htf$div" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304658" volatility="IMMUTABLE" is-window="f" function-identity-arguments="calign text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$div(calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<div',
                  aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                  aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                  '>');

]]></complex-attribute>
                        <category _I_D="342dd7ed-83c8-4db0-8588-58f418cd683b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1f8f5caf-149e-4013-94f2-dbdd94ef679d" name="htf$dlistclose" subcategories-loading="none" object-loading="extended" context="htf$dlistclose" is-trigger-function="0" unique-function-name="htf$dlistclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304659" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$dlistclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</dl>';

]]></complex-attribute>
                        <category _I_D="6b803c3c-7c82-4220-86d5-17871131c1bb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c71c55ae-7e27-4b2f-9502-4165b2e74b9e" name="htf$dlistdef" subcategories-loading="none" object-loading="extended" context="htf$dlistdef" is-trigger-function="0" unique-function-name="htf$dlistdef" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304660" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$dlistdef(ctext text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('', '<dd',
                  aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="'||cclear||'"')),
                  aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                  '>',ctext);

]]></complex-attribute>
                        <category _I_D="4d05483f-bb6e-4cbd-ba9e-87b9d54707ad" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b64bd8b7-5857-47b7-9093-59015e5785bd" name="htf$dlistopen" subcategories-loading="none" object-loading="extended" context="htf$dlistopen" is-trigger-function="0" unique-function-name="htf$dlistopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304661" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$dlistopen(cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<dl',
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="', cclear,'"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('',' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="38dc3b03-5c59-43b8-9108-5c8ee9aa7518" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cb330452-2801-433f-88e5-89d7b3185c05" name="htf$dlistterm" subcategories-loading="none" object-loading="extended" context="htf$dlistterm" is-trigger-function="0" unique-function-name="htf$dlistterm" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304662" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$dlistterm(ctext text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<dt',
                     aws_oracle_ext.htf$IFNOTNULL(cclear, concat_ws('', ' clear="', cclear, '"')),
                     aws_oracle_ext.htf$IFNOTNULL(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext);

]]></complex-attribute>
                        <category _I_D="133f59bf-e3e1-4e7d-933f-d7a1f11e689f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d9a180a3-9674-4d97-964e-9ffc4b005770" name="htf$em" subcategories-loading="none" object-loading="extended" context="htf$em" is-trigger-function="0" unique-function-name="htf$em" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304663" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$em(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<em',
                     aws_oracle_ext.htf$ifnotnull(cattributes,concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</em>');

]]></complex-attribute>
                        <category _I_D="7eaabf08-8aca-4bf3-8635-ea775da59b45" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1ce923ab-2a6a-40e6-a7ef-af4c04dc0acb" name="htf$emphasis" subcategories-loading="none" object-loading="extended" context="htf$emphasis" is-trigger-function="0" unique-function-name="htf$emphasis" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304664" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$emphasis(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.htf$em(ctext,cattributes);

]]></complex-attribute>
                        <category _I_D="ca50a6c3-7e6e-462b-90e2-58070c0c485b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="95417beb-03d1-4a1e-8f5b-021cdb5053c2" name="htf$escape_sc" subcategories-loading="none" object-loading="extended" context="htf$escape_sc" is-trigger-function="0" unique-function-name="htf$escape_sc" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304665" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="sql" function-signature="htf$escape_sc(ctext text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT replace(
             replace(
             replace(
             replace(ctext, '&', concat_ws('', '&', 'amp;')),
                            '"', concat_ws('', '&', 'quot;')),
                            '<', concat_ws('', '&', 'lt;')),
                            '>', concat_ws('', '&', 'gt;'));

]]></complex-attribute>
                        <category _I_D="df38d857-b2f1-4d8c-ba17-67c41960fa19" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5d87bea5-80df-4c39-bf91-0a0bf50cb06f" name="htf$escape_url" subcategories-loading="none" object-loading="extended" context="htf$escape_url" is-trigger-function="0" unique-function-name="htf$escape_url" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_url text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304666" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_url text" overload-function-count="1" proc-language="sql" function-signature="htf$escape_url(p_url text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT replace(aws_oracle_ext.htf$escape_sc(p_url), '%', '%25');

]]></complex-attribute>
                        <category _I_D="9aebbe8e-33e0-4b03-b1ef-1f2bfad68c69" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c8d86673-c8c2-4e26-b2f9-6691102d2c13" name="htf$fontclose" subcategories-loading="none" object-loading="extended" context="htf$fontclose" is-trigger-function="0" unique-function-name="htf$fontclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304667" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$fontclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</font>';

]]></complex-attribute>
                        <category _I_D="f9879a78-b009-4842-a247-c69f7e4df3bc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="800ba681-f5ab-4f47-a42f-a342a138cf8f" name="htf$fontopen" subcategories-loading="none" object-loading="extended" context="htf$fontopen" is-trigger-function="0" unique-function-name="htf$fontopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="ccolor text DEFAULT NULL::text, cface text DEFAULT NULL::text, csize text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304668" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ccolor text, cface text, csize text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$fontopen(ccolor text, cface text, csize text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<font',
                     aws_oracle_ext.htf$ifnotnull(ccolor, concat_ws('', ' color="', ccolor, '"')),
                     aws_oracle_ext.htf$ifnotnull(cface, concat_ws('', ' face="', cface, '"')),
                     aws_oracle_ext.htf$ifnotnull(csize, concat_ws('', ' size="', csize, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="ddd198a6-c990-41c6-9ca5-dbc2d40ea496" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e708c554-ff5d-4926-b7df-c7beb46c657a" name="htf$format_cell" subcategories-loading="none" object-loading="extended" context="htf$format_cell" is-trigger-function="0" unique-function-name="htf$format_cell" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="columnvalue text, format_numbers text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304669" volatility="VOLATILE" is-window="f" function-identity-arguments="columnvalue text, format_numbers text" overload-function-count="1" proc-language="plpgsql" function-signature="htf$format_cell(columnvalue text, format_numbers text)">
                        <complex-attribute name="sql"><![CDATA[
begin

   if format_numers is null then
      return aws_oracle_ext.htf$tableData(columnValue);
   end if;

   return aws_oracle_ext.htf$tableData(coalesce(ltrim(aws_oracle_ext.to_char(aws_oracle_ext.to_number(columnValue),
                                                                    format_numbers)),
                                                '(null)'),
                                       'right');
end;
]]></complex-attribute>
                        <category _I_D="3404dd62-0e59-4b05-b0b5-61ca2fc564f1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d6f38e32-6e2b-4621-8c4d-7f8f18d2d6a0" name="htf$formcheckbox" subcategories-loading="none" object-loading="extended" context="htf$formcheckbox" is-trigger-function="0" unique-function-name="htf$formcheckbox" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, cvalue text DEFAULT 'on'::text, cchecked text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304670" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, cvalue text, cchecked text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formcheckbox(cname text, cvalue text, cchecked text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<input type="checkbox" name="',
                     cname,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(cvalue, concat_ws('', ' value="', cvalue, '"')),
                     aws_oracle_ext.htf$ifnotnull(cchecked, ' checked="checked"'),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="03d8e655-5ce8-40d8-9522-62a669abd77f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fcb3c799-aeeb-4736-ae83-81035252ca77" name="htf$formclose" subcategories-loading="none" object-loading="extended" context="htf$formclose" is-trigger-function="0" unique-function-name="htf$formclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304671" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$formclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</form>';

]]></complex-attribute>
                        <category _I_D="6fe7fc76-280a-4f2b-a0c3-9accd730d1de" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4f806425-b211-4b45-b23e-a7e567371a2c" name="htf$formfile" subcategories-loading="none" object-loading="extended" context="htf$formfile" is-trigger-function="0" unique-function-name="htf$formfile" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, caccept text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304672" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, caccept text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formfile(cname text, caccept text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<input type="file"',
                     aws_oracle_ext.htf$ifnotnull(cname, concat_ws('', ' name="', cname, '"')),
                     aws_oracle_ext.htf$ifnotnull(caccept, concat_ws('', ' accept="', caccept, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="1434fcd3-c7cd-4f67-8f80-edcd2ca041f2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3bf87840-ca04-47f1-a909-debce9c16419" name="htf$formhidden" subcategories-loading="none" object-loading="extended" context="htf$formhidden" is-trigger-function="0" unique-function-name="htf$formhidden" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, cvalue text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304673" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, cvalue text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formhidden(cname text, cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<input type="hidden" name="',
                     cname,
                     '"',
                     ' value="',
                     cvalue,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="cd801381-24ad-456d-8022-9d478be92a09" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d1768150-c0aa-438e-8bee-0a04b132a2ca" name="htf$formimage" subcategories-loading="none" object-loading="extended" context="htf$formimage" is-trigger-function="0" unique-function-name="htf$formimage" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, csrc text, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304674" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, csrc text, calign text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formimage(cname text, csrc text, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<input type="image" name="',
                     cname,
                     '"',
                     ' src="',
                     csrc,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="7a633262-7427-4178-a7eb-b1bee1e76b00" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="95d1871f-5cfc-44b8-a43e-eefbc4dd3337" name="htf$formopen" subcategories-loading="none" object-loading="extended" context="htf$formopen" is-trigger-function="0" unique-function-name="htf$formopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="curl text, cmethod text DEFAULT 'POST'::text, ctarget text DEFAULT NULL::text, cenctype text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304675" volatility="IMMUTABLE" is-window="f" function-identity-arguments="curl text, cmethod text, ctarget text, cenctype text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formopen(curl text, cmethod text, ctarget text, cenctype text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT CONCAT_WS('',
        '<FORM ACTION="',
        curl,
        '" METHOD="',
        cmethod,
        '"',
        CASE
            WHEN ctarget IS NOT NULL THEN
                CONCAT_WS('', ' TARGET="', ctarget, '"')
            ELSE
                ''
        END,
        CASE
            WHEN cenctype IS NOT NULL THEN
                CONCAT_WS('', ' ENCTYPE="', cenctype, '"')
            ELSE
                ''
        END,
        CASE
            WHEN cattributes IS NOT NULL THEN
                CONCAT_WS('', ' ', cattributes)
            ELSE
                ''
        END,
        '>'
    );

]]></complex-attribute>
                        <category _I_D="aa881817-8b96-497d-a0a0-abd745662833" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9a5fb364-5cb8-4d13-8d20-650f4d81c4ca" name="htf$formpassword" subcategories-loading="none" object-loading="extended" context="htf$formpassword" is-trigger-function="0" unique-function-name="htf$formpassword" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, csize text, cmaxlength text DEFAULT NULL::text, cvalue text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304676" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, csize text, cmaxlength text, cvalue text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formpassword(cname text, csize text, cmaxlength text, cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('', 
        '<INPUT TYPE="password" NAME="',
        cname,
        '" SIZE="',
        csize,
        CASE
            WHEN cmaxlength IS NOT NULL THEN
                CONCAT_WS('', '" MAXLENGTH="', cmaxlength, '"')
            ELSE
                ''
        END,
        CASE
            WHEN cvalue IS NOT NULL THEN
                CONCAT_WS('', ' VALUE="', cvalue, '"')
            ELSE
                ''
        END,
        CASE
            WHEN cattributes IS NOT NULL THEN
                CONCAT_WS('', ' ', cattributes)
            ELSE
                ''
        END,
        '>'
    );

]]></complex-attribute>
                        <category _I_D="bbf83059-5368-4627-8aa5-3f0e5e93c436" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cedef034-727a-4868-a106-962036d19589" name="htf$formradio" subcategories-loading="none" object-loading="extended" context="htf$formradio" is-trigger-function="0" unique-function-name="htf$formradio" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, cvalue text, cchecked text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304677" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, cvalue text, cchecked text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formradio(cname text, cvalue text, cchecked text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<input type="radio" name="',
                      cname,
                     'value="',
                     cvalue,
                     aws_oracle_ext.htf$ifnotnull(cchecked,' checked="checked"'),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="f4ebe3c3-c2ef-4491-9ec5-6aafe735708c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6a2b9a90-8a15-4766-b378-c1752dbd6deb" name="htf$formreset" subcategories-loading="none" object-loading="extended" context="htf$formreset" is-trigger-function="0" unique-function-name="htf$formreset" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="cvalue text DEFAULT 'Reset'::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304678" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cvalue text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formreset(cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('', 
                     '<input type="reset" value="',
                     cvalue,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="48b741b0-b8b7-491b-8090-8df01007203d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2cd7afee-a133-4d89-96d5-2e02a0f29218" name="htf$formselectclose" subcategories-loading="none" object-loading="extended" context="htf$formselectclose" is-trigger-function="0" unique-function-name="htf$formselectclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304679" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$formselectclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</select>';

]]></complex-attribute>
                        <category _I_D="e56cbf80-876e-4edc-a108-151ffa064904" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9379b42b-d9dd-40cd-b65e-a6fc3ac4ca47" name="htf$formselectopen" subcategories-loading="none" object-loading="extended" context="htf$formselectopen" is-trigger-function="0" unique-function-name="htf$formselectopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,numeric,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, cprompt text DEFAULT NULL::text, nsize numeric DEFAULT NULL::numeric, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304680" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, cprompt text, nsize numeric, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formselectopen(cname text, cprompt text, nsize numeric, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     cprompt,
                     '<select name="',
                     cname,
                     aws_oracle_ext.htf$ifnotnull(aws_oracle_ext.to_char(nsize), concat_ws('', ' size="', nsize, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="c48e265e-1681-4844-b36c-a06a48c776e5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4a92599b-5b5f-4a3a-b94a-62b32e14ea4b" name="htf$formselectoption" subcategories-loading="none" object-loading="extended" context="htf$formselectoption" is-trigger-function="0" unique-function-name="htf$formselectoption" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cvalue text, cselected text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304681" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cvalue text, cselected text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formselectoption(cvalue text, cselected text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<option',
                     aws_oracle_ext.htf$ifnotnull(cselected, concat_ws('', ' selected="selected"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '</option>');

]]></complex-attribute>
                        <category _I_D="152a480b-2f7f-4388-a301-7f57effe7e37" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dc160234-b24b-41e9-82d1-5581087d6937" name="htf$formsubmit" subcategories-loading="none" object-loading="extended" context="htf$formsubmit" is-trigger-function="0" unique-function-name="htf$formsubmit" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text DEFAULT NULL::text, cvalue text DEFAULT 'Submit'::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304682" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, cvalue text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formsubmit(cname text, cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<input type="submit"',
                      aws_oracle_ext.htf$ifnotnull(cname, concat_ws('', ' name="', cname, '"')),
                      aws_oracle_ext.htf$ifnotnull(cvalue, concat_ws('', ' value="', cvalue, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="ac6d1f9a-d971-405e-a15c-ddb0deb2b94c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="397adb3d-9dc8-4e0e-8a78-fd54aa9e7c88" name="htf$formtext" subcategories-loading="none" object-loading="extended" context="htf$formtext" is-trigger-function="0" unique-function-name="htf$formtext" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, csize text DEFAULT NULL::text, cmaxlength text DEFAULT NULL::text, cvalue text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304688" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, csize text, cmaxlength text, cvalue text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formtext(cname text, csize text, cmaxlength text, cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<input type="text" name="',
                     cname,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(csize, concat_ws('', ' size="', csize, '"')),
                     aws_oracle_ext.htf$ifnotnull(cmaxlength, concat_ws('', ' maxlength="', cmaxlength, '"')),
                     aws_oracle_ext.htf$ifnotnull(cvalue, concat_ws('', ' value="', cvalue, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '/>');

]]></complex-attribute>
                        <category _I_D="5c675368-f21b-41fd-bede-4e7993c5d67f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="99ad3b95-247f-4ae7-ae34-dadd3a2a0d9d" name="htf$formtextarea" subcategories-loading="none" object-loading="extended" context="htf$formtextarea" is-trigger-function="0" unique-function-name="htf$formtextarea" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric,numeric,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, nrows numeric, ncolumns numeric, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304687" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, nrows numeric, ncolumns numeric, calign text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formtextarea(cname text, nrows numeric, ncolumns numeric, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<textarea name="',
                     cname,
                     '"',
                     ' rows="',
                     aws_oracle_ext.to_char(nrows),
                     '"',
                     ' cols="',
                     aws_oracle_ext.to_char(ncolumns),
                     '"',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '></textarea>');

]]></complex-attribute>
                        <category _I_D="063bd7ac-97bf-4a6f-b66c-59b0ce15c220" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2a9b55f0-046f-4a96-8cea-7ad008952d0e" name="htf$formtextarea2" subcategories-loading="none" object-loading="extended" context="htf$formtextarea2" is-trigger-function="0" unique-function-name="htf$formtextarea2" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric,numeric,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, nrows numeric, ncolumns numeric, calign text DEFAULT NULL::text, cwrap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304683" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, nrows numeric, ncolumns numeric, calign text, cwrap text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formtextarea2(cname text, nrows numeric, ncolumns numeric, calign text, cwrap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<textarea name="',
                     cname,
                     '"',
                     ' rows="',
                     aws_oracle_ext.to_char(nrows),
                     '"',
                     ' cols="',
                     aws_oracle_ext.to_char(ncolumns),
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cwrap, concat_ws('', ' wrap="', cwrap, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '></textarea>');

]]></complex-attribute>
                        <category _I_D="d69b48c1-f93f-4384-887e-145ba2667342" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cfbe1c79-242f-4ad4-80c1-9004851f481e" name="htf$formtextareaclose" subcategories-loading="none" object-loading="extended" context="htf$formtextareaclose" is-trigger-function="0" unique-function-name="htf$formtextareaclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304684" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$formtextareaclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</textarea>';

]]></complex-attribute>
                        <category _I_D="35d37e46-be61-44b0-94f3-4fe3969612fb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="be784f5e-38e2-450b-bceb-3fd2251ecefe" name="htf$formtextareaopen" subcategories-loading="none" object-loading="extended" context="htf$formtextareaopen" is-trigger-function="0" unique-function-name="htf$formtextareaopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric,numeric,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, nrows numeric, ncolumns numeric, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304686" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, nrows numeric, ncolumns numeric, calign text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formtextareaopen(cname text, nrows numeric, ncolumns numeric, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<textarea name="',
                     cname,
                     '"',
                     ' rows="',
                     aws_oracle_ext.to_char(nrows),
                     '"',
                     ' cols="',
                     aws_oracle_ext.to_char(ncolumns),
                     '"',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="35af4a01-6e65-440c-a789-1ee9ecc92620" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0aad2241-39d6-4363-825b-7a9d045f4f2e" name="htf$formtextareaopen2" subcategories-loading="none" object-loading="extended" context="htf$formtextareaopen2" is-trigger-function="0" unique-function-name="htf$formtextareaopen2" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric,numeric,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, nrows numeric, ncolumns numeric, calign text DEFAULT NULL::text, cwrap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304685" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, nrows numeric, ncolumns numeric, calign text, cwrap text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formtextareaopen2(cname text, nrows numeric, ncolumns numeric, calign text, cwrap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<textarea name="',
                     cname,
                     '"',
                     ' rows="',
                     aws_oracle_ext.to_char(nrows),
                     '"',
                     ' cols="',
                     aws_oracle_ext.to_char(ncolumns),
                     '"',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cwrap, concat_ws('', ' wrap="', cwrap, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="6fc720fc-59be-4136-b741-818b8f3e3986" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f52e4410-68d4-45b9-922a-c8c628625587" name="htf$frame" subcategories-loading="none" object-loading="extended" context="htf$frame" is-trigger-function="0" unique-function-name="htf$frame" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="csrc text, cname text DEFAULT NULL::text, cmarginwidth text DEFAULT NULL::text, cmarginheight text DEFAULT NULL::text, cscrolling text DEFAULT NULL::text, cnoresize text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="7" function-id="304691" volatility="IMMUTABLE" is-window="f" function-identity-arguments="csrc text, cname text, cmarginwidth text, cmarginheight text, cscrolling text, cnoresize text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$frame(csrc text, cname text, cmarginwidth text, cmarginheight text, cscrolling text, cnoresize text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<frame src="',
                     csrc,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(cname, concat_ws('', ' name="', cname, '"')),
                     aws_oracle_ext.htf$ifnotnull(cmarginwidth, concat_ws('', ' marginwidth="', cmarginwidth, '"')),
                     aws_oracle_ext.htf$ifnotnull(cmarginheight, concat_ws('', ' marginheight="', cmarginheight, '"')),
                     aws_oracle_ext.htf$ifnotnull(cscrolling, concat_ws('', ' scrolling="', cscrolling, '"')),
                     aws_oracle_ext.htf$ifnotnull(cnoresize, concat_ws('', ' noresize="noresize"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '/>');

]]></complex-attribute>
                        <category _I_D="ce6f8af1-cb90-482f-9965-df9070535543" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e6250445-43d7-4c32-ba02-798c23583748" name="htf$framesetclose" subcategories-loading="none" object-loading="extended" context="htf$framesetclose" is-trigger-function="0" unique-function-name="htf$framesetclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304689" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$framesetclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</frameset>';

]]></complex-attribute>
                        <category _I_D="d122ec2e-2a34-4708-b096-1fdbe7d82572" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="de8fe16a-d478-4665-ac29-c677cdf8c06d" name="htf$framesetopen" subcategories-loading="none" object-loading="extended" context="htf$framesetopen" is-trigger-function="0" unique-function-name="htf$framesetopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="crows text DEFAULT NULL::text, ccols text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304690" volatility="IMMUTABLE" is-window="f" function-identity-arguments="crows text, ccols text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$framesetopen(crows text, ccols text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<frameset',
                     aws_oracle_ext.htf$ifnotnull(crows, concat_ws('', ' rows="', crows, '"')),
                     aws_oracle_ext.htf$ifnotnull(ccols, concat_ws('', ' cols="', ccols, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="179f471a-c43d-4ce1-8431-02d3d1dcd95d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e9a0a7a4-d731-407b-bea8-9c1f061dea28" name="htf$header" subcategories-loading="none" object-loading="extended" context="htf$header" is-trigger-function="0" unique-function-name="htf$header" is-aggregate="f" language-name="sql" arguments-datatypes="numeric,text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="nsize numeric, cheader text, calign text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304692" volatility="IMMUTABLE" is-window="f" function-identity-arguments="nsize numeric, cheader text, calign text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$header(nsize numeric, cheader text, calign text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<',
                     'h',
                     aws_oracle_ext.to_char(least(abs(nsize),6)),
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(cnowrap, concat_ws('', ' nowrap="nowrap"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     cheader,
                     '</',
                     'h',
                     aws_oracle_ext.to_char(least(abs(nsize),6)),
                     '>');

]]></complex-attribute>
                        <category _I_D="3ba83143-2883-4b6c-8bb0-ce5472003429" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e7378b5b-e2a8-40fd-832e-01deb0013335" name="htf$hr" subcategories-loading="none" object-loading="extended" context="htf$hr" is-trigger-function="0" unique-function-name="htf$hr" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cclear text DEFAULT NULL::text, csrc text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304693" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cclear text, csrc text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$hr(cclear text, csrc text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<hr',
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(csrc, concat_ws('', ' src="', csrc, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '/>');

]]></complex-attribute>
                        <category _I_D="d88f7148-c1c9-49b4-9934-92f30a57a136" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7a108db9-7dab-4842-9e02-bfaf3d1dee11" name="htf$htitle" subcategories-loading="none" object-loading="extended" context="htf$htitle" is-trigger-function="0" unique-function-name="htf$htitle" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctitle text, nsize numeric DEFAULT 1, calign text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304695" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctitle text, nsize numeric, calign text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$htitle(ctitle text, nsize numeric, calign text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     aws_oracle_ext.htf$title(ctitle),
                     aws_oracle_ext.htf$header(nsize,ctitle,calign,cnowrap,cclear,cattributes));

]]></complex-attribute>
                        <category _I_D="ea32067f-063f-42d4-95ac-9ee1512add6d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2f9c6505-f71f-45f2-a1c8-19d58016dc44" name="htf$ifnotnull" subcategories-loading="none" object-loading="extended" context="htf$ifnotnull" is-trigger-function="0" unique-function-name="htf$ifnotnull" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="str1 text, str2 text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304634" volatility="IMMUTABLE" is-window="f" function-identity-arguments="str1 text, str2 text" overload-function-count="1" proc-language="sql" function-signature="htf$ifnotnull(str1 text, str2 text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT case when str1 is null then null
		            else str2
		       end;
]]></complex-attribute>
                        <category _I_D="6c8a5bd5-059c-4cfc-8c6f-c29b3c50afd0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="aa88b19e-694d-4083-9001-e061c1249a47" name="htf$img" subcategories-loading="none" object-loading="extended" context="htf$img" is-trigger-function="0" unique-function-name="htf$img" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="curl text, calign text DEFAULT NULL::text, calt text DEFAULT NULL::text, cismap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304697" volatility="IMMUTABLE" is-window="f" function-identity-arguments="curl text, calign text, calt text, cismap text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$img(curl text, calign text, calt text, cismap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<img src="',
                     curl,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="',calign,'"')),
                     aws_oracle_ext.htf$ifnotnull(calt, concat_ws('', ' alt="',calt,'"')),
                     aws_oracle_ext.htf$ifnotnull(cismap, concat_ws('', ' ismap="ismap"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ',cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="4e03c374-896f-4e6d-b705-bf24a5f94b03" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2fb20fb4-0707-4c11-a5bb-fb42e9e8e4c0" name="htf$img2" subcategories-loading="none" object-loading="extended" context="htf$img2" is-trigger-function="0" unique-function-name="htf$img2" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="curl text, calign text DEFAULT NULL::text, calt text DEFAULT NULL::text, cismap text DEFAULT NULL::text, cusemap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304696" volatility="IMMUTABLE" is-window="f" function-identity-arguments="curl text, calign text, calt text, cismap text, cusemap text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$img2(curl text, calign text, calt text, cismap text, cusemap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<img src="',
                     curl,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="',calign,'"')),
                     aws_oracle_ext.htf$ifnotnull(calt, concat_ws('', ' alt="',calt,'"')),
                     aws_oracle_ext.htf$ifnotnull(cismap, concat_ws('', ' ismap="ismap"')),
                     aws_oracle_ext.htf$ifnotnull(cusemap, concat_ws('', ' usemap="',cusemap,'"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ',cattributes)),
                     ' />');
   
]]></complex-attribute>
                        <category _I_D="1e992371-5922-4cd5-b1f0-0500e757b6ca" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dc385c62-16ad-44a1-9538-425f95211382" name="htf$isindex" subcategories-loading="none" object-loading="extended" context="htf$isindex" is-trigger-function="0" unique-function-name="htf$isindex" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="cprompt text DEFAULT NULL::text, curl text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304698" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cprompt text, curl text" overload-function-count="1" proc-language="sql" function-signature="htf$isindex(cprompt text, curl text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<isindex',
                     aws_oracle_ext.htf$IFNOTNULL(cprompt, concat_ws('', ' prompt="',cprompt,'"')),
                     aws_oracle_ext.htf$IFNOTNULL(curl, concat_ws('', ' href="',curl,'"')),
                     '>');
]]></complex-attribute>
                        <category _I_D="9594df16-c799-4efc-9672-42f1fcf5a3e0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7381632a-372f-4569-8e82-2e087b8a4f34" name="htf$italic" subcategories-loading="none" object-loading="extended" context="htf$italic" is-trigger-function="0" unique-function-name="htf$italic" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304699" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$italic(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<i',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ',cattributes)),
                     '>',
                     ctext,
                     '</i>');

]]></complex-attribute>
                        <category _I_D="8b38e3c0-9dd9-4bba-bd7e-0234edce150d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1c237cc0-766c-432e-b409-34af858cd447" name="htf$kbd" subcategories-loading="none" object-loading="extended" context="htf$kbd" is-trigger-function="0" unique-function-name="htf$kbd" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304700" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$kbd(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<kbd',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ',cattributes)),
                     '>',
                     ctext,
                     '</kbd>');

]]></complex-attribute>
                        <category _I_D="0322e12c-d782-4b0a-b168-d69d4325813d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1193bf80-10cd-450d-aef3-3e1408b810d6" name="htf$keyboard" subcategories-loading="none" object-loading="extended" context="htf$keyboard" is-trigger-function="0" unique-function-name="htf$keyboard" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304701" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$keyboard(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.htf$kbd(ctext,cattributes);

]]></complex-attribute>
                        <category _I_D="635504ca-5053-403b-a034-4eee52837bd6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c59d4a18-5f87-4f13-b04c-6290c8751066" name="htf$line" subcategories-loading="none" object-loading="extended" context="htf$line" is-trigger-function="0" unique-function-name="htf$line" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cclear text DEFAULT NULL::text, csrc text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304702" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cclear text, csrc text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$line(cclear text, csrc text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.htf$hr(cclear, csrc, cattributes);

]]></complex-attribute>
                        <category _I_D="ffd9a1b6-92df-4bdf-b020-65fcb45c678a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f3a00083-54ff-4cf5-9be7-2ba597241940" name="htf$linkrel" subcategories-loading="none" object-loading="extended" context="htf$linkrel" is-trigger-function="0" unique-function-name="htf$linkrel" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="crel text, curl text, ctitle text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304703" volatility="IMMUTABLE" is-window="f" function-identity-arguments="crel text, curl text, ctitle text" overload-function-count="1" proc-language="sql" function-signature="htf$linkrel(crel text, curl text, ctitle text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<link rel="',
                     crel,
                     '"',
                     ' href="',
                     curl,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(ctitle, concat_ws('', ' title="',ctitle,'"')),
                     '>');

]]></complex-attribute>
                        <category _I_D="2cdc2dbe-90cb-4bd3-b999-607702565dc4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="70f38544-0a5f-4d86-b7f1-17bd8907f6cd" name="htf$linkrev" subcategories-loading="none" object-loading="extended" context="htf$linkrev" is-trigger-function="0" unique-function-name="htf$linkrev" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="crev text, curl text, ctitle text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304704" volatility="IMMUTABLE" is-window="f" function-identity-arguments="crev text, curl text, ctitle text" overload-function-count="1" proc-language="sql" function-signature="htf$linkrev(crev text, curl text, ctitle text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<link rev="',
                     crev,
                     '"',
                     ' href="',
                     curl,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(ctitle, concat_ws('', ' title="',ctitle,'"')),
                     '>');

]]></complex-attribute>
                        <category _I_D="cef55e56-5573-4190-8bc9-3ce6333f38b0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c9244682-b4b9-4193-a7ab-99370c6aa87d" name="htf$listheader" subcategories-loading="none" object-loading="extended" context="htf$listheader" is-trigger-function="0" unique-function-name="htf$listheader" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304705" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$listheader(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<lh',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ',cattributes)),
                     '>',
                     ctext,
                     '</lh>');

]]></complex-attribute>
                        <category _I_D="d725940b-2ab4-4f52-96a2-fa7ce8f87c30" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="65e7064f-c748-4d75-abeb-6e1fbd645643" name="htf$listingclose" subcategories-loading="none" object-loading="extended" context="htf$listingclose" is-trigger-function="0" unique-function-name="htf$listingclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304706" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$listingclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</listing>';

]]></complex-attribute>
                        <category _I_D="01de9673-a2a2-43b6-bd07-d17b43fa5361" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="57620ca4-ac03-46fc-af24-f09419b52ede" name="htf$listingopen" subcategories-loading="none" object-loading="extended" context="htf$listingopen" is-trigger-function="0" unique-function-name="htf$listingopen" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304707" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$listingopen()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '<listing>';

]]></complex-attribute>
                        <category _I_D="1be18337-b84a-4ebb-9b55-fe1ab93a488b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="26c56689-d60b-4648-bd7c-83d46bcb8a32" name="htf$listitem" subcategories-loading="none" object-loading="extended" context="htf$listitem" is-trigger-function="0" unique-function-name="htf$listitem" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cdingbat text DEFAULT NULL::text, csrc text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304708" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cclear text, cdingbat text, csrc text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$listitem(ctext text, cclear text, cdingbat text, csrc text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<li'||
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="',cclear,'"')),
                     aws_oracle_ext.htf$ifnotnull(cdingbat, concat_ws('', ' dingbat="',cdingbat,'"')),
                     aws_oracle_ext.htf$ifnotnull(csrc, concat_ws('', ' src="',csrc,'"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ',cattributes)),
                     '>',
                     ctext);

]]></complex-attribute>
                        <category _I_D="fc65c6c5-45ed-44a2-b89a-79ff7b37e22e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="39b3098f-cb75-490e-b7d3-a9b7dd888468" name="htf$mailto" subcategories-loading="none" object-loading="extended" context="htf$mailto" is-trigger-function="0" unique-function-name="htf$mailto" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="caddress text, ctext text, cname text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304709" volatility="IMMUTABLE" is-window="f" function-identity-arguments="caddress text, ctext text, cname text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$mailto(caddress text, ctext text, cname text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.htf$anchor(concat_ws('', 'mailto:', caddress),
                                     ctext,
                                     cname,
                                     cattributes);

]]></complex-attribute>
                        <category _I_D="23c2e23f-6ef0-4e83-9a93-a2b4ede4d302" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e8758d36-966e-433b-9436-845188195b8a" name="htf$mapclose" subcategories-loading="none" object-loading="extended" context="htf$mapclose" is-trigger-function="0" unique-function-name="htf$mapclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304710" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$mapclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</map>';

]]></complex-attribute>
                        <category _I_D="352d4bb4-562d-4d09-be7c-434cb3800f90" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bb41b3bb-d652-47ba-a635-725bfcc78f71" name="htf$mapopen" subcategories-loading="none" object-loading="extended" context="htf$mapopen" is-trigger-function="0" unique-function-name="htf$mapopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304711" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$mapopen(cname text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('', 
                     '<map name="',
                     cname,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ',cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="e9c01823-3398-4179-ba46-dd06470de4a9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7d2baab0-3c9a-492c-8eb9-0f0837275b43" name="htf$menulistclose" subcategories-loading="none" object-loading="extended" context="htf$menulistclose" is-trigger-function="0" unique-function-name="htf$menulistclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304712" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$menulistclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</menu>';

]]></complex-attribute>
                        <category _I_D="b8880f63-d9a6-43cf-8fe1-2c2d81573f9c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6d838fb6-fe40-4f49-ad36-c5c06af59db3" name="htf$menulistopen" subcategories-loading="none" object-loading="extended" context="htf$menulistopen" is-trigger-function="0" unique-function-name="htf$menulistopen" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304713" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$menulistopen()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '<menu>';

]]></complex-attribute>
                        <category _I_D="d50d9ec5-7c38-4f87-b5f6-fade078c0e94" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4505e0df-df22-49a0-a308-5996eaf7122f" name="htf$meta" subcategories-loading="none" object-loading="extended" context="htf$meta" is-trigger-function="0" unique-function-name="htf$meta" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="chttp_equiv text, cname text, ccontent text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304714" volatility="IMMUTABLE" is-window="f" function-identity-arguments="chttp_equiv text, cname text, ccontent text" overload-function-count="1" proc-language="sql" function-signature="htf$meta(chttp_equiv text, cname text, ccontent text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('', 
                     '<meta http-equiv="',
                     chttp_equiv,
                     '" name="',
                     cname,
                     '" content="',
                     ccontent,
                     '">')

]]></complex-attribute>
                        <category _I_D="51841082-2f52-4153-bfb9-fff280ab6a18" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3c7eba69-2fed-4c78-b594-832f192191fb" name="htf$nextid" subcategories-loading="none" object-loading="extended" context="htf$nextid" is-trigger-function="0" unique-function-name="htf$nextid" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="cidentifier text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304715" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cidentifier text" overload-function-count="1" proc-language="sql" function-signature="htf$nextid(cidentifier text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<nextid n="',
                     cidentifier,
                     '>');

]]></complex-attribute>
                        <category _I_D="3894154a-1f4c-469b-8bf3-9b069aec1c4c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6df3d535-3c3f-438d-941c-7fb9964b9949" name="htf$nl" subcategories-loading="none" object-loading="extended" context="htf$nl" is-trigger-function="0" unique-function-name="htf$nl" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304716" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$nl(cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

  SELECT aws_oracle_ext.htf$br(cclear, cattributes);

]]></complex-attribute>
                        <category _I_D="c411de2d-616e-4bf7-89b2-f0969ddeeea6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0afbfea5-ab8e-4de1-837e-080e65b843b8" name="htf$nobr" subcategories-loading="none" object-loading="extended" context="htf$nobr" is-trigger-function="0" unique-function-name="htf$nobr" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304717" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="sql" function-signature="htf$nobr(ctext text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<nobr>',
                     ctext,
                     '</nobr>');

]]></complex-attribute>
                        <category _I_D="6936f917-0f24-47ca-93ec-2376a23e4d1a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5ac557e2-2623-40b5-b062-9736beb835ef" name="htf$noframesclose" subcategories-loading="none" object-loading="extended" context="htf$noframesclose" is-trigger-function="0" unique-function-name="htf$noframesclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304718" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$noframesclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</noframes>';

]]></complex-attribute>
                        <category _I_D="b368f7b8-bb99-4818-b3b1-4f65be997793" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="51f75234-c4dd-4e2e-8037-31a991be1679" name="htf$noframesopen" subcategories-loading="none" object-loading="extended" context="htf$noframesopen" is-trigger-function="0" unique-function-name="htf$noframesopen" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304719" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$noframesopen()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '<noframes>';

]]></complex-attribute>
                        <category _I_D="dda332d0-ae20-4954-914b-4020a85f30b6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="eddbfb8b-cb10-4c7f-b7a9-72f3bf65c5ed" name="htf$olistclose" subcategories-loading="none" object-loading="extended" context="htf$olistclose" is-trigger-function="0" unique-function-name="htf$olistclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304720" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$olistclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</ol>';

]]></complex-attribute>
                        <category _I_D="deb2a259-42b3-4862-b6e2-126510168521" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b75feb2a-9601-4bbd-bdd1-49489bd86057" name="htf$olistopen" subcategories-loading="none" object-loading="extended" context="htf$olistopen" is-trigger-function="0" unique-function-name="htf$olistopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cclear text DEFAULT NULL::text, cwrap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304721" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cclear text, cwrap text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$olistopen(cclear text, cwrap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<ol',
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(cwrap, concat_ws('', ' wrap="', cwrap, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');
                     
]]></complex-attribute>
                        <category _I_D="106fae4e-6c2b-4e3a-bb85-b6be23c2ec29" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e7b1bfe8-e391-4361-a9f2-e43e17528859" name="htf$para" subcategories-loading="none" object-loading="extended" context="htf$para" is-trigger-function="0" unique-function-name="htf$para" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304724" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$para()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '<p>';

]]></complex-attribute>
                        <category _I_D="a822a7bd-3ac4-473c-ad76-87e88c90a129" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ff4f38df-84f1-4ec7-97ab-6bcce70000e6" name="htf$paragraph" subcategories-loading="none" object-loading="extended" context="htf$paragraph" is-trigger-function="0" unique-function-name="htf$paragraph" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="calign text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304722" volatility="IMMUTABLE" is-window="f" function-identity-arguments="calign text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$paragraph(calign text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<p',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' calign="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(cnowrap, concat_ws('', ' nowrap="', cnowrap, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="3a2464cc-e7ef-42bb-8232-fe1574ecb285" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c0486871-d3f2-46c9-8c1d-ec86a5ad1a76" name="htf$param" subcategories-loading="none" object-loading="extended" context="htf$param" is-trigger-function="0" unique-function-name="htf$param" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, cvalue text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304723" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, cvalue text" overload-function-count="1" proc-language="sql" function-signature="htf$param(cname text, cvalue text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('', 
                     '<param name=',
                     cname,
                     ' value= "',
                     cvalue,
                     '" >');

]]></complex-attribute>
                        <category _I_D="f0db3c24-5a5a-4cbf-b5fd-be5a8ab17b8b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b37f60f0-e85e-4ae2-9029-c64583df8535" name="htf$plaintext" subcategories-loading="none" object-loading="extended" context="htf$plaintext" is-trigger-function="0" unique-function-name="htf$plaintext" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304725" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$plaintext(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<plaintext',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</plaintext>');

]]></complex-attribute>
                        <category _I_D="399b6f60-22d7-4073-8edc-3e5e81c97599" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="87a9ae21-4b4b-4201-97a8-7487e9cf4841" name="htf$preclose" subcategories-loading="none" object-loading="extended" context="htf$preclose" is-trigger-function="0" unique-function-name="htf$preclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304726" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$preclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</pre>';

]]></complex-attribute>
                        <category _I_D="5f785230-4d8f-4686-b155-368cbc60f263" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7430cecb-9c23-4040-bfeb-e0993c75fb3e" name="htf$preopen" subcategories-loading="none" object-loading="extended" context="htf$preopen" is-trigger-function="0" unique-function-name="htf$preopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cclear text DEFAULT NULL::text, cwidth text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304727" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cclear text, cwidth text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$preopen(cclear text, cwidth text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('', 
                     '<pre',
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(cwidth, concat_ws('', ' width="', cwidth, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),  
                     '>');

]]></complex-attribute>
                        <category _I_D="d2958c56-a2bf-403b-a337-adad50d8e9ae" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f0841572-6e9b-4d80-a70c-fbc210e210d0" name="htf$s" subcategories-loading="none" object-loading="extended" context="htf$s" is-trigger-function="0" unique-function-name="htf$s" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304731" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$s(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<s',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</s>');

]]></complex-attribute>
                        <category _I_D="2cc46ed0-c512-421f-b3e3-c2f3395f12f4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5a6d1ff2-35aa-46f0-861f-29f9c11867d2" name="htf$sample" subcategories-loading="none" object-loading="extended" context="htf$sample" is-trigger-function="0" unique-function-name="htf$sample" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304728" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$sample(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<samp',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</samp>');

]]></complex-attribute>
                        <category _I_D="84f3cea3-fc12-4c1f-81bb-1817184dceca" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="743697f5-2890-4ccc-b768-851feb4932bc" name="htf$script" subcategories-loading="none" object-loading="extended" context="htf$script" is-trigger-function="0" unique-function-name="htf$script" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="cscript text, clanguage text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304729" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cscript text, clanguage text" overload-function-count="1" proc-language="sql" function-signature="htf$script(cscript text, clanguage text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<script'||
                     aws_oracle_ext.htf$ifnotnull(clanguage, concat_ws('', ' language="', clanguage, '"')),
                     '>',
                     cscript,
                     '</script>');

]]></complex-attribute>
                        <category _I_D="b69a3f70-1ca5-4374-9e1d-36bd9d5c728e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="74fd1084-cc1f-45e1-a833-ceafc4f09456" name="htf$small" subcategories-loading="none" object-loading="extended" context="htf$small" is-trigger-function="0" unique-function-name="htf$small" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304730" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$small(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
        '<SMALL',
        CASE
            WHEN cattributes IS NOT NULL THEN
                CONCAT_WS('', ' ', cattributes)
            ELSE
                ''
        END,
        '>',
        ctext,
        '</SMALL>'
    );

]]></complex-attribute>
                        <category _I_D="f619d8d4-bac2-4cb8-b2eb-f04559c03341" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9a836f40-6b84-49ba-9058-53217a7bd64f" name="htf$strike" subcategories-loading="none" object-loading="extended" context="htf$strike" is-trigger-function="0" unique-function-name="htf$strike" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304732" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$strike(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<strike',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</strike>');

]]></complex-attribute>
                        <category _I_D="c799ab6f-360d-443b-a57c-83deb3cce4e5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="868be0b7-a5e2-4f3c-8d75-72bc7c9014c1" name="htf$strong" subcategories-loading="none" object-loading="extended" context="htf$strong" is-trigger-function="0" unique-function-name="htf$strong" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304733" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$strong(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<strong',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</strong>');

]]></complex-attribute>
                        <category _I_D="9ac3aafc-9636-431d-bb75-f43b2d4d6375" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1fb951c6-b4ae-4b3d-8f64-f00af348a218" name="htf$style" subcategories-loading="none" object-loading="extended" context="htf$style" is-trigger-function="0" unique-function-name="htf$style" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="cstyle text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304734" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cstyle text" overload-function-count="1" proc-language="sql" function-signature="htf$style(cstyle text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<style>',
                     cstyle,
                     '</style>');

]]></complex-attribute>
                        <category _I_D="66e95ce3-8e6f-4b88-b36b-82be7c3e2dad" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0da47a6d-6116-48dd-a1e6-b830cdb47496" name="htf$sub" subcategories-loading="none" object-loading="extended" context="htf$sub" is-trigger-function="0" unique-function-name="htf$sub" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304735" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, calign text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$sub(ctext text, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<sub',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),  
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</sub>');

]]></complex-attribute>
                        <category _I_D="4ccab6ff-bd69-406a-b4c2-714dbc36112e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d3addbc1-3b4b-41ca-a53e-c4e68b26bed9" name="htf$sup" subcategories-loading="none" object-loading="extended" context="htf$sup" is-trigger-function="0" unique-function-name="htf$sup" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304736" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, calign text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$sup(ctext text, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<sup',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</sup>');

]]></complex-attribute>
                        <category _I_D="3c01394d-a830-4905-9ce3-aeced5a6fee3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="13c955e4-467f-412d-bc47-c67948ad7f0c" name="htf$tablecaption" subcategories-loading="none" object-loading="extended" context="htf$tablecaption" is-trigger-function="0" unique-function-name="htf$tablecaption" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="ccaption text, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304737" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ccaption text, calign text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$tablecaption(ccaption text, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<caption',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ccaption,
                     '</caption>');

]]></complex-attribute>
                        <category _I_D="eb2ee44c-ab52-492f-8230-92db26e35144" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="74817195-4378-4bc1-adfc-0216d7c07db6" name="htf$tableclose" subcategories-loading="none" object-loading="extended" context="htf$tableclose" is-trigger-function="0" unique-function-name="htf$tableclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304738" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$tableclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</table>';

]]></complex-attribute>
                        <category _I_D="ade865e1-481b-4fd5-ad8e-f56538db6191" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2acc48a4-a911-4961-8286-da05ec8abd66" name="htf$tabledata" subcategories-loading="none" object-loading="extended" context="htf$tabledata" is-trigger-function="0" unique-function-name="htf$tabledata" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cvalue text DEFAULT NULL::text, calign text DEFAULT NULL::text, cdp text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, crowspan text DEFAULT NULL::text, ccolspan text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="7" function-id="304739" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cvalue text, calign text, cdp text, cnowrap text, crowspan text, ccolspan text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$tabledata(cvalue text, calign text, cdp text, cnowrap text, crowspan text, ccolspan text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<td',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cdp, concat_ws('', ' dp="', cdp, '"')),
                     aws_oracle_ext.htf$ifnotnull(crowspan, concat_ws('', ' rowspan="', crowspan, '"')),
                     aws_oracle_ext.htf$ifnotnull(ccolspan, concat_ws('', ' colspan="', ccolspan, '"')),
                     aws_oracle_ext.htf$ifnotnull(cnowrap, concat_ws('', ' nowrap="nowrap"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     cvalue,
                     '</td>');

]]></complex-attribute>
                        <category _I_D="c6b51777-b05d-43f6-b63d-c41ee1b16845" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="67f0b87e-478b-41cd-8108-c508cf0c5682" name="htf$tableheader" subcategories-loading="none" object-loading="extended" context="htf$tableheader" is-trigger-function="0" unique-function-name="htf$tableheader" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cvalue text DEFAULT NULL::text, calign text DEFAULT NULL::text, cdp text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, crowspan text DEFAULT NULL::text, ccolspan text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="7" function-id="304740" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cvalue text, calign text, cdp text, cnowrap text, crowspan text, ccolspan text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$tableheader(cvalue text, calign text, cdp text, cnowrap text, crowspan text, ccolspan text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<th',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cdp, concat_ws('', ' dp="', cdp, '"')),
                     aws_oracle_ext.htf$ifnotnull(crowspan, concat_ws('', ' rowspan="', crowspan, '"')),
                     aws_oracle_ext.htf$ifnotnull(ccolspan, concat_ws('', ' colspan="', ccolspan, '"')),
                     aws_oracle_ext.htf$ifnotnull(cnowrap, concat_ws('', ' nowrap="nowrap"')),               
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     cvalue,
                     '</th>');

]]></complex-attribute>
                        <category _I_D="1c21bb26-343c-480e-a68b-5ef5a1ce768e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="12c50443-7f5e-42ef-a63a-4d40a033b2ec" name="htf$tableopen" subcategories-loading="none" object-loading="extended" context="htf$tableopen" is-trigger-function="0" unique-function-name="htf$tableopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cborder text DEFAULT NULL::text, calign text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304741" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cborder text, calign text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$tableopen(cborder text, calign text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<table ',
                     aws_oracle_ext.htf$ifnotnull(cborder, concat_ws('', ' ', cborder)), 
                     aws_oracle_ext.htf$ifnotnull(cnowrap, concat_ws('', ' nowrap="nowrap"')),
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clearn="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="ed714cf0-388e-45eb-bb1c-7564bc77f36d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8baf08d9-0800-4228-a62d-b7321effce3f" name="htf$tablerowclose" subcategories-loading="none" object-loading="extended" context="htf$tablerowclose" is-trigger-function="0" unique-function-name="htf$tablerowclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304742" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$tablerowclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</tr>';

]]></complex-attribute>
                        <category _I_D="966a1835-4214-4dc5-aa88-5aefb40cfbd7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f672b992-f699-43bb-aac8-7d672986976a" name="htf$tablerowopen" subcategories-loading="none" object-loading="extended" context="htf$tablerowopen" is-trigger-function="0" unique-function-name="htf$tablerowopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="calign text DEFAULT NULL::text, cvalign text DEFAULT NULL::text, cdp text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304743" volatility="IMMUTABLE" is-window="f" function-identity-arguments="calign text, cvalign text, cdp text, cnowrap text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$tablerowopen(calign text, cvalign text, cdp text, cnowrap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<tr',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cvalign, concat_ws('', ' valign="', cvalign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cdp, concat_ws('', ' dp="', cdp, '"')),
                     aws_oracle_ext.htf$ifnotnull(cnowrap, concat_ws('', ' nowrap="nowrap"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');
 
]]></complex-attribute>
                        <category _I_D="4383e6e6-7264-4010-b3b3-671e0a40bb71" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a863ce0a-fb7e-4296-bf3a-6f82c7740dc5" name="htf$teletype" subcategories-loading="none" object-loading="extended" context="htf$teletype" is-trigger-function="0" unique-function-name="htf$teletype" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304744" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$teletype(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<tt',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</tt>');

]]></complex-attribute>
                        <category _I_D="7c1fa91b-30ce-4911-a6df-17da86be2905" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7703f2dd-2b62-4e10-9b0d-abbfb39ae53f" name="htf$title" subcategories-loading="none" object-loading="extended" context="htf$title" is-trigger-function="0" unique-function-name="htf$title" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="ctitle text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304694" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctitle text" overload-function-count="1" proc-language="sql" function-signature="htf$title(ctitle text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<TITLE>',
                     ctitle,
                     '</TITLE>'
                    );

]]></complex-attribute>
                        <category _I_D="9eae8df3-f30d-4222-bbc0-ee49e5228e31" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7842b73e-7453-4cc3-bedd-c14576c8ee68" name="htf$ulistclose" subcategories-loading="none" object-loading="extended" context="htf$ulistclose" is-trigger-function="0" unique-function-name="htf$ulistclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304745" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$ulistclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</ul>';

]]></complex-attribute>
                        <category _I_D="fa632c52-5d2f-4d95-bf4d-067e2d763943" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9e7cf8a8-16b4-48d5-8295-0701f236a517" name="htf$ulistopen" subcategories-loading="none" object-loading="extended" context="htf$ulistopen" is-trigger-function="0" unique-function-name="htf$ulistopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cclear text DEFAULT NULL::text, cwrap text DEFAULT NULL::text, cdingbat text DEFAULT NULL::text, csrc text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304746" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cclear text, cwrap text, cdingbat text, csrc text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$ulistopen(cclear text, cwrap text, cdingbat text, csrc text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<ul',
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(cwrap, concat_ws('', ' wrap="', cwrap, '"')),
                     aws_oracle_ext.htf$ifnotnull(cdingbat, concat_ws('', ' dingbat="', cdingbat, '"')),
                     aws_oracle_ext.htf$ifnotnull(csrc, concat_ws('', ' csrc="', csrc)),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="053556a7-bed1-4424-b7a6-c8d1d294e610" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2d398104-cab9-4411-95f2-5498a449e62e" name="htf$underline" subcategories-loading="none" object-loading="extended" context="htf$underline" is-trigger-function="0" unique-function-name="htf$underline" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304747" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$underline(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<u',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</u>');

]]></complex-attribute>
                        <category _I_D="8f0d1d8b-4ffb-4138-8772-d26db9d313fb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c7ce8b0a-82ed-420e-b320-05cb5b00705c" name="htf$variable" subcategories-loading="none" object-loading="extended" context="htf$variable" is-trigger-function="0" unique-function-name="htf$variable" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304748" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$variable(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<var',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</var>');

]]></complex-attribute>
                        <category _I_D="439195c6-d52e-43ce-8f57-eefd88e1d6ec" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="364ccada-c9c1-4829-8d56-3012927f8f4f" name="htf$wbr" subcategories-loading="none" object-loading="extended" context="htf$wbr" is-trigger-function="0" unique-function-name="htf$wbr" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304749" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$wbr()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '<wbr>';

]]></complex-attribute>
                        <category _I_D="d2f63e5e-c169-4df3-90f7-9fce2b6eaaa9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="04bc868f-d03e-47a0-b473-25e3e4693e15" name="htp$address" subcategories-loading="none" object-loading="extended" context="htp$address" is-trigger-function="0" unique-function-name="htp$address" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cvalue text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304750" volatility="VOLATILE" is-window="f" function-identity-arguments="cvalue text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$address(cvalue text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

  PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$address(cvalue, cnowrap, cclear, cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="1e02a890-0fd6-4844-986a-88012e693080" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="55297f44-f3dc-4f4f-879f-213f5af1d1cb" name="htp$anchor" subcategories-loading="none" object-loading="extended" context="htp$anchor" is-trigger-function="0" unique-function-name="htp$anchor" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="curl text, ctext text, cname text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304752" volatility="VOLATILE" is-window="f" function-identity-arguments="curl text, ctext text, cname text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$anchor(curl text, ctext text, cname text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$anchor(curl,ctext,cname,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="a89c7617-edae-4fa0-8942-e798d2fcea59" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0317e517-9853-4206-89de-5dbde867afa3" name="htp$anchor2" subcategories-loading="none" object-loading="extended" context="htp$anchor2" is-trigger-function="0" unique-function-name="htp$anchor2" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="curl text, ctext text, cname text DEFAULT NULL::text, ctarget text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304751" volatility="VOLATILE" is-window="f" function-identity-arguments="curl text, ctext text, cname text, ctarget text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$anchor2(curl text, ctext text, cname text, ctarget text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$anchor2(curl,ctext,cname,ctarget,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="d66595be-4bc4-4c5b-955e-1987d6dca0fa" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="da70234f-dfae-4d9e-a47a-b61da715c1bd" name="htp$appletclose" subcategories-loading="none" object-loading="extended" context="htp$appletclose" is-trigger-function="0" unique-function-name="htp$appletclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304753" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$appletclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$appletClose());
    
END;
]]></complex-attribute>
                        <category _I_D="ac47c07c-e964-4d13-825a-a7f0a0d2940b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="479eafad-d73e-4bcc-b85e-2df503f869f7" name="htp$appletopen" subcategories-loading="none" object-loading="extended" context="htp$appletopen" is-trigger-function="0" unique-function-name="htp$appletopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric,numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ccode text, cwidth numeric, cheight numeric, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304754" volatility="VOLATILE" is-window="f" function-identity-arguments="ccode text, cwidth numeric, cheight numeric, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$appletopen(ccode text, cwidth numeric, cheight numeric, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$appletOpen());
    
END;
]]></complex-attribute>
                        <category _I_D="fc96b1e2-b573-48f4-9ce1-67ac9cb86ef3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="90e57f3c-33fd-4dac-9896-7e1f0a2f321b" name="htp$area" subcategories-loading="none" object-loading="extended" context="htp$area" is-trigger-function="0" unique-function-name="htp$area" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ccoords text, cshape text DEFAULT NULL::text, chref text DEFAULT NULL::text, cnohref text DEFAULT NULL::text, ctarget text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304755" volatility="VOLATILE" is-window="f" function-identity-arguments="ccoords text, cshape text, chref text, cnohref text, ctarget text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$area(ccoords text, cshape text, chref text, cnohref text, ctarget text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$area(ccoords,cshape,chref,cnohref,ctarget,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="97ff25ee-37a6-47ed-8b99-23ce5969a67a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ff539b37-c54d-4557-b9ed-1074f47c01fa" name="htp$base" subcategories-loading="none" object-loading="extended" context="htp$base" is-trigger-function="0" unique-function-name="htp$base" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctarget text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304757" volatility="VOLATILE" is-window="f" function-identity-arguments="ctarget text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$base(ctarget text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$base(ctarget,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="d7af1fa4-941b-4ef0-a842-6d57a97c0cea" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="19adb66c-2f2b-44d5-b82d-7a5e9ef7b8ab" name="htp$basefont" subcategories-loading="none" object-loading="extended" context="htp$basefont" is-trigger-function="0" unique-function-name="htp$basefont" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="void" function-arguments="nsize numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304756" volatility="VOLATILE" is-window="f" function-identity-arguments="nsize numeric" overload-function-count="1" proc-language="plpgsql" function-signature="htp$basefont(nsize numeric)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$basefont(nsize));
    
END;
]]></complex-attribute>
                        <category _I_D="0f95ef9e-d591-4db3-9e1e-65f7403f4aa3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="51dfc6fc-f6ff-4c09-9f07-a528ac0feeb2" name="htp$bgsound" subcategories-loading="none" object-loading="extended" context="htp$bgsound" is-trigger-function="0" unique-function-name="htp$bgsound" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="csrc text, cloop text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304758" volatility="VOLATILE" is-window="f" function-identity-arguments="csrc text, cloop text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$bgsound(csrc text, cloop text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$bgsound(csrc,cloop,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="38ce23a2-6560-4329-92e3-a8f6b2617f9d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bdf4e544-4a22-478d-a9de-55c18ae5c8de" name="htp$big" subcategories-loading="none" object-loading="extended" context="htp$big" is-trigger-function="0" unique-function-name="htp$big" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304759" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$big(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$big(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="4fb41a7a-660a-4915-8260-2fb9b28aa15d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8c11c97c-877f-4df5-849b-f016aa89c772" name="htp$blockquoteclose" subcategories-loading="none" object-loading="extended" context="htp$blockquoteclose" is-trigger-function="0" unique-function-name="htp$blockquoteclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304760" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$blockquoteclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$blockquoteClose());
    
END;
]]></complex-attribute>
                        <category _I_D="61b26277-18a5-4187-958a-c27cf444395d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4e27748c-cef9-4217-a6ea-9f55b9a5ebcd" name="htp$blockquoteopen" subcategories-loading="none" object-loading="extended" context="htp$blockquoteopen" is-trigger-function="0" unique-function-name="htp$blockquoteopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304761" volatility="VOLATILE" is-window="f" function-identity-arguments="cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$blockquoteopen(cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$blockquoteOpen(cnowrap,cclear,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="d182d899-468b-45bf-b8dd-1a70f8a1778a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5a78ac96-99f7-4743-b475-c25e10e3f86f" name="htp$bodyclose" subcategories-loading="none" object-loading="extended" context="htp$bodyclose" is-trigger-function="0" unique-function-name="htp$bodyclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304762" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$bodyclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$bodyClose());
    
END;
]]></complex-attribute>
                        <category _I_D="6d15b9fc-f037-4b41-8971-4db8cf55c7d3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0b4e13f7-fd4f-4ff9-8c0a-0d0494eeb010" name="htp$bodyopen" subcategories-loading="none" object-loading="extended" context="htp$bodyopen" is-trigger-function="0" unique-function-name="htp$bodyopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="cbackground text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304763" volatility="VOLATILE" is-window="f" function-identity-arguments="cbackground text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$bodyopen(cbackground text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$bodyOpen(cbackground,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="b964bfb5-aa33-420a-ad63-cd6b2c8f2735" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="45593bf9-a812-4b48-bde3-aff8c9c08960" name="htp$bold" subcategories-loading="none" object-loading="extended" context="htp$bold" is-trigger-function="0" unique-function-name="htp$bold" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304764" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$bold(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$bold(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="1e5d72a4-23bb-41fc-b99c-a088a6dab48d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3176faf7-ba53-4b5a-8a4f-a501d9b09b86" name="htp$br" subcategories-loading="none" object-loading="extended" context="htp$br" is-trigger-function="0" unique-function-name="htp$br" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304765" volatility="VOLATILE" is-window="f" function-identity-arguments="cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$br(cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$nl(cclear,cattributes);
    
END;
]]></complex-attribute>
                        <category _I_D="9724a7f2-7793-45ec-8242-072d928f40eb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a9421f35-6abb-4690-bfca-ae8b06d7018a" name="htp$center" subcategories-loading="none" object-loading="extended" context="htp$center" is-trigger-function="0" unique-function-name="htp$center" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304768" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$center(ctext text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$center(ctext));
    
END;
]]></complex-attribute>
                        <category _I_D="62a7b2ec-637f-4f0c-ae27-a4bae5a6195d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="55278cb7-eca2-4430-a286-55409a226b36" name="htp$centerclose" subcategories-loading="none" object-loading="extended" context="htp$centerclose" is-trigger-function="0" unique-function-name="htp$centerclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304766" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$centerclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$centerClose());
    
END;
]]></complex-attribute>
                        <category _I_D="468ff1a6-79f9-40bd-a995-d7552d2b813f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="838823e0-041a-4aa4-9a03-3fa2299d0476" name="htp$centeropen" subcategories-loading="none" object-loading="extended" context="htp$centeropen" is-trigger-function="0" unique-function-name="htp$centeropen" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304767" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$centeropen()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$centerOpen());
    
END;
]]></complex-attribute>
                        <category _I_D="d8d4dfc7-244d-473c-bb1c-1aa3fda31104" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d3411f91-75ae-42c0-b287-4c0dd4866561" name="htp$cite" subcategories-loading="none" object-loading="extended" context="htp$cite" is-trigger-function="0" unique-function-name="htp$cite" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304769" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$cite(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$cite(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="4fa1c66a-96ad-4a99-9524-6dfe1a95a363" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b19eebaf-fc72-4fd3-8b7d-146403281a39" name="htp$code" subcategories-loading="none" object-loading="extended" context="htp$code" is-trigger-function="0" unique-function-name="htp$code" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304770" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$code(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$code(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="c4dd51f0-1bb4-434e-ad8e-ba8a665b8b0e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="08832ff2-a9ea-43dc-902e-5a8e935d8b00" name="htp$comment" subcategories-loading="none" object-loading="extended" context="htp$comment" is-trigger-function="0" unique-function-name="htp$comment" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304771" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$comment(ctext text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$comment(ctext));
    
END;
]]></complex-attribute>
                        <category _I_D="507d962b-97b8-4944-8bf9-ea66f210ee1b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cfa63d4a-5acf-47d5-b725-5bf206eadfbb" name="htp$dfn" subcategories-loading="none" object-loading="extended" context="htp$dfn" is-trigger-function="0" unique-function-name="htp$dfn" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304772" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$dfn(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$dfn(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="368ae38b-ad45-4bab-9012-1b9e14ca211b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dea6bcbc-7534-4220-9bc2-5e49ca099fd9" name="htp$dirlistclose" subcategories-loading="none" object-loading="extended" context="htp$dirlistclose" is-trigger-function="0" unique-function-name="htp$dirlistclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304773" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$dirlistclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$dirlistClose());
    
END;
]]></complex-attribute>
                        <category _I_D="77d7dc18-8e44-4c28-8533-b812c9868761" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7d8c7689-73dc-4b35-b8ef-056100ed873f" name="htp$dirlistopen" subcategories-loading="none" object-loading="extended" context="htp$dirlistopen" is-trigger-function="0" unique-function-name="htp$dirlistopen" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304774" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$dirlistopen()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.dirlistOpen());
    
END;
]]></complex-attribute>
                        <category _I_D="e30f80c1-5fc1-4756-87e3-26a1ba1ec60c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4e28742f-f996-4b23-aa27-119311dbfcfc" name="htp$div" subcategories-loading="none" object-loading="extended" context="htp$div" is-trigger-function="0" unique-function-name="htp$div" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304775" volatility="VOLATILE" is-window="f" function-identity-arguments="calign text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$div(calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.div(calign,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="237d6a5b-6ff6-47ca-95de-29fc3c9bd3c2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c8b9cdfa-f010-48c5-954d-97af99da56b4" name="htp$dlistclose" subcategories-loading="none" object-loading="extended" context="htp$dlistclose" is-trigger-function="0" unique-function-name="htp$dlistclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304776" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$dlistclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.dlistClose());
    
END;
]]></complex-attribute>
                        <category _I_D="b8e2ac8e-5b29-4c5c-8aea-e42caff59fe2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="853b5fd3-7de1-418c-96cf-8bc631f90a0a" name="htp$dlistdef" subcategories-loading="none" object-loading="extended" context="htp$dlistdef" is-trigger-function="0" unique-function-name="htp$dlistdef" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304784" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$dlistdef(ctext text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.dlistDef(ctext,cclear,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="1d944cc4-87fb-48be-97d2-3a1964b7bef1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="467756a1-4244-456e-b5dd-61737630a6f6" name="htp$dlistopen" subcategories-loading="none" object-loading="extended" context="htp$dlistopen" is-trigger-function="0" unique-function-name="htp$dlistopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304785" volatility="VOLATILE" is-window="f" function-identity-arguments="cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$dlistopen(cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.dlistOpen(cclear,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="b321035c-4a09-4eb0-8e61-3c85e3602bdc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="01f24a9b-45aa-4e3d-9a1a-f825f846499f" name="htp$dlistterm" subcategories-loading="none" object-loading="extended" context="htp$dlistterm" is-trigger-function="0" unique-function-name="htp$dlistterm" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304786" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$dlistterm(ctext text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.dlistTerm(ctext,cclear,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="037715cd-cd93-4a0b-8363-b92228b4f01f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d98684b6-76f5-4563-9ffa-66a9be34f3b1" name="htp$em" subcategories-loading="none" object-loading="extended" context="htp$em" is-trigger-function="0" unique-function-name="htp$em" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304788" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$em(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.em(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="2c900b5b-449e-41b2-a82f-873abdc64e66" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0ec5d7d0-2fad-4761-8b7a-7e7be576c932" name="htp$emphasis" subcategories-loading="none" object-loading="extended" context="htp$emphasis" is-trigger-function="0" unique-function-name="htp$emphasis" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304787" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$emphasis(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$emphasis(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="73e1bdf0-760a-410b-ac86-408fcc95a628" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="67bcdc57-1630-4f25-a2d9-015937c885f2" name="htp$escape_sc" subcategories-loading="none" object-loading="extended" context="htp$escape_sc" is-trigger-function="0" unique-function-name="htp$escape_sc" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304875" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$escape_sc(ctext text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

  PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$escape_sc(ctext));
    
END;
]]></complex-attribute>
                        <category _I_D="2bb3c390-97b9-4cb2-a9d5-9c6de78b990a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f4296360-e357-4da2-a0f3-5f310bd097d0" name="htp$fontclose" subcategories-loading="none" object-loading="extended" context="htp$fontclose" is-trigger-function="0" unique-function-name="htp$fontclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304789" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$fontclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$fontClose);
    
END;
]]></complex-attribute>
                        <category _I_D="0ff87712-9b6e-4cef-98b3-b6132a3acbd9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7f93cfce-9ba6-4935-8d4b-30b589014979" name="htp$fontopen" subcategories-loading="none" object-loading="extended" context="htp$fontopen" is-trigger-function="0" unique-function-name="htp$fontopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ccolor text DEFAULT NULL::text, cface text DEFAULT NULL::text, csize text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304790" volatility="VOLATILE" is-window="f" function-identity-arguments="ccolor text, cface text, csize text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$fontopen(ccolor text, cface text, csize text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$fontOpen(ccolor,cface,csize,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="2d2bd3d3-b27c-4d03-b577-3684e38c8818" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7e8a086d-23df-49bd-8730-96f8b964c5f1" name="htp$formcheckbox" subcategories-loading="none" object-loading="extended" context="htp$formcheckbox" is-trigger-function="0" unique-function-name="htp$formcheckbox" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, cvalue text DEFAULT 'on'::text, cchecked text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304791" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, cvalue text, cchecked text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formcheckbox(cname text, cvalue text, cchecked text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formCheckbox(cname,cvalue,cchecked,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="0a6e549f-9fec-44b2-9f0b-12924bbb1577" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6e50a670-cb21-4373-9b7b-70ecae3ea471" name="htp$formclose" subcategories-loading="none" object-loading="extended" context="htp$formclose" is-trigger-function="0" unique-function-name="htp$formclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304792" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formClose());
    
END;
]]></complex-attribute>
                        <category _I_D="17255b5d-f995-4ddb-a873-99eb4f6543ba" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8d2a13b4-b3e8-4908-b164-9835df67fd38" name="htp$formfile" subcategories-loading="none" object-loading="extended" context="htp$formfile" is-trigger-function="0" unique-function-name="htp$formfile" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, caccept text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304793" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, caccept text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formfile(cname text, caccept text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formFile(cname,caccept,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="5ee0cb4b-e10e-4e85-aadb-7b4e6675f7a7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d172c2dc-c5c4-445c-9660-2e22bee57a89" name="htp$formhidden" subcategories-loading="none" object-loading="extended" context="htp$formhidden" is-trigger-function="0" unique-function-name="htp$formhidden" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, cvalue text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304794" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, cvalue text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formhidden(cname text, cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formHidden(cname,cvalue,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="1c569ffe-c7ff-41ba-b8a8-13e86486f98e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c9b23568-5a3a-4778-89a0-32d10fce584c" name="htp$formimage" subcategories-loading="none" object-loading="extended" context="htp$formimage" is-trigger-function="0" unique-function-name="htp$formimage" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, csrc text, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304795" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, csrc text, calign text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formimage(cname text, csrc text, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formImage(cname,csrc,calign,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="455da3ba-d80f-413a-b065-319b73536336" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="29308bb7-499d-4c93-bc17-61298406903c" name="htp$formopen" subcategories-loading="none" object-loading="extended" context="htp$formopen" is-trigger-function="0" unique-function-name="htp$formopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="curl text, cmethod text DEFAULT 'post'::text, ctarget text DEFAULT NULL::text, cenctype text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304796" volatility="VOLATILE" is-window="f" function-identity-arguments="curl text, cmethod text, ctarget text, cenctype text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formopen(curl text, cmethod text, ctarget text, cenctype text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formOpen(curl,cmethod,ctarget,cenctype,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="78af76e1-7d51-4859-989a-47c5f6d7112d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e77c85b5-2e5b-491f-82ec-342edef6a0fe" name="htp$formpassword" subcategories-loading="none" object-loading="extended" context="htp$formpassword" is-trigger-function="0" unique-function-name="htp$formpassword" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, csize text DEFAULT NULL::text, cmaxlength text DEFAULT NULL::text, cvalue text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304797" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, csize text, cmaxlength text, cvalue text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formpassword(cname text, csize text, cmaxlength text, cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formPassword(cname,csize,cmaxlength,cvalue,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="ea193a9d-00ed-4f20-8df0-f163f4dfd656" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7de941e5-143d-4d10-8a69-1a5a4cc1b859" name="htp$formradio" subcategories-loading="none" object-loading="extended" context="htp$formradio" is-trigger-function="0" unique-function-name="htp$formradio" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, cvalue text, cchecked text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304798" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, cvalue text, cchecked text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formradio(cname text, cvalue text, cchecked text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formRadio(cname,cvalue,cchecked,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="68d0f08e-7c13-4964-8520-b8025db6fb33" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="668e1529-bc3e-40fb-8fa2-8f62919242e1" name="htp$formreset" subcategories-loading="none" object-loading="extended" context="htp$formreset" is-trigger-function="0" unique-function-name="htp$formreset" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="cvalue text DEFAULT 'Reset'::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304799" volatility="VOLATILE" is-window="f" function-identity-arguments="cvalue text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formreset(cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formReset(cvalue,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="6da860a2-104c-4285-9b33-7a7406bce1c9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ab451845-33a8-4666-afa2-6535157a1ecf" name="htp$formselectclose" subcategories-loading="none" object-loading="extended" context="htp$formselectclose" is-trigger-function="0" unique-function-name="htp$formselectclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304800" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formselectclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formSelectClose());
    
END;
]]></complex-attribute>
                        <category _I_D="b6837e47-86a5-4d0b-80d4-d37826d27b56" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ae60d470-0c37-4cb4-bdac-0b155ee1d942" name="htp$formselectopen" subcategories-loading="none" object-loading="extended" context="htp$formselectopen" is-trigger-function="0" unique-function-name="htp$formselectopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, cprompt text DEFAULT NULL::text, nsize numeric DEFAULT NULL::numeric, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304801" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, cprompt text, nsize numeric, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formselectopen(cname text, cprompt text, nsize numeric, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.formSelectOpen(cname,cprompt,nsize,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="ebc17cbf-ec3c-47d5-b7d8-182fd6d3b70f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1002a2f2-bc92-4fea-8348-53506e15ed10" name="htp$formselectoption" subcategories-loading="none" object-loading="extended" context="htp$formselectoption" is-trigger-function="0" unique-function-name="htp$formselectoption" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cvalue text, cselected text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304802" volatility="VOLATILE" is-window="f" function-identity-arguments="cvalue text, cselected text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formselectoption(cvalue text, cselected text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formSelectOption(cvalue,cselected,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="37718329-8d60-474b-ac83-0bf07c560c12" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f3832259-62ee-40a8-904d-0d4242696738" name="htp$formsubmit" subcategories-loading="none" object-loading="extended" context="htp$formsubmit" is-trigger-function="0" unique-function-name="htp$formsubmit" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text DEFAULT NULL::text, cvalue text DEFAULT 'Submit'::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304803" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, cvalue text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formsubmit(cname text, cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formSubmit(cname,cvalue,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="b3624d30-91c3-4ce8-93bd-b1a07453a411" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4bbac770-af41-42ae-80ab-f999956efd67" name="htp$formtext" subcategories-loading="none" object-loading="extended" context="htp$formtext" is-trigger-function="0" unique-function-name="htp$formtext" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, csize text DEFAULT NULL::text, cmaxlength text DEFAULT NULL::text, cvalue text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304809" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, csize text, cmaxlength text, cvalue text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formtext(cname text, csize text, cmaxlength text, cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formText(cname,csize,cmaxlength,cvalue,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="9ded1ad8-5a55-48b1-9f02-adcd17e46290" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1c00de0c-28cc-4204-89a2-1c15a7c5a653" name="htp$formtextarea" subcategories-loading="none" object-loading="extended" context="htp$formtextarea" is-trigger-function="0" unique-function-name="htp$formtextarea" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric,numeric,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, nrows numeric, ncolumns numeric, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304808" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, nrows numeric, ncolumns numeric, calign text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formtextarea(cname text, nrows numeric, ncolumns numeric, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formTextarea(cname,nrows,ncolumns,calign,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="93797d2e-29f6-44a0-accf-35ef24118c12" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4f56b2e2-5050-4261-b9f9-d93b37ad53d8" name="htp$formtextarea2" subcategories-loading="none" object-loading="extended" context="htp$formtextarea2" is-trigger-function="0" unique-function-name="htp$formtextarea2" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric,numeric,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, nrows numeric, ncolumns numeric, calign text DEFAULT NULL::text, cwrap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304804" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, nrows numeric, ncolumns numeric, calign text, cwrap text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formtextarea2(cname text, nrows numeric, ncolumns numeric, calign text, cwrap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formTextarea2(cname,nrows,ncolumns,calign,cwrap,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="04e37635-f1a2-4e9e-9313-7a92eac16325" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e28e5cda-e965-43cf-8d77-2042a82a977d" name="htp$formtextareaclose" subcategories-loading="none" object-loading="extended" context="htp$formtextareaclose" is-trigger-function="0" unique-function-name="htp$formtextareaclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304805" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formtextareaclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formTextareaClose);
    
END;
]]></complex-attribute>
                        <category _I_D="8cb57194-8d51-4476-9a76-8ceac3ba2032" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5402ef2d-e4f3-44d7-bba9-1a3169393527" name="htp$formtextareaopen" subcategories-loading="none" object-loading="extended" context="htp$formtextareaopen" is-trigger-function="0" unique-function-name="htp$formtextareaopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric,numeric,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, nrows numeric, ncolumns numeric, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304807" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, nrows numeric, ncolumns numeric, calign text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formtextareaopen(cname text, nrows numeric, ncolumns numeric, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formTextareaOpen(cname,nrows,ncolumns,calign,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="d9e9f0dc-2a3b-43ef-9051-718773aed326" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="392d713a-99cd-4326-9b8c-21e5b52a34ea" name="htp$formtextareaopen2" subcategories-loading="none" object-loading="extended" context="htp$formtextareaopen2" is-trigger-function="0" unique-function-name="htp$formtextareaopen2" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric,numeric,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, nrows numeric, ncolumns numeric, calign text DEFAULT NULL::text, cwrap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304806" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, nrows numeric, ncolumns numeric, calign text, cwrap text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formtextareaopen2(cname text, nrows numeric, ncolumns numeric, calign text, cwrap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formTextareaOpen2(cname,nrows,ncolumns,calign,cwrap,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="c666356e-b9eb-4f14-9211-275927bbbc74" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="887ac001-93c4-4015-865f-6dd408cfd2eb" name="htp$frame" subcategories-loading="none" object-loading="extended" context="htp$frame" is-trigger-function="0" unique-function-name="htp$frame" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="csrc text, cname text DEFAULT NULL::text, cmarginwidth text DEFAULT NULL::text, cmarginheight text DEFAULT NULL::text, cscrolling text DEFAULT NULL::text, cnoresize text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="7" function-id="304812" volatility="VOLATILE" is-window="f" function-identity-arguments="csrc text, cname text, cmarginwidth text, cmarginheight text, cscrolling text, cnoresize text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$frame(csrc text, cname text, cmarginwidth text, cmarginheight text, cscrolling text, cnoresize text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$frame( csrc, cname, cmarginwidth, cmarginheight, cscrolling, cnoresize, cattributes ));
    
END;
]]></complex-attribute>
                        <category _I_D="d4b0d339-f4ca-45df-9787-4794bc8543b9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="79542d1b-a728-4e31-b168-0879e1d7d1ad" name="htp$framesetclose" subcategories-loading="none" object-loading="extended" context="htp$framesetclose" is-trigger-function="0" unique-function-name="htp$framesetclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304810" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$framesetclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$framesetClose);
    
END;
]]></complex-attribute>
                        <category _I_D="cb43e445-2b9b-428d-a8ed-8774491d6bc5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e4f4520d-6e3b-4710-bd24-044ca931c401" name="htp$framesetopen" subcategories-loading="none" object-loading="extended" context="htp$framesetopen" is-trigger-function="0" unique-function-name="htp$framesetopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="crows text DEFAULT NULL::text, ccols text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304811" volatility="VOLATILE" is-window="f" function-identity-arguments="crows text, ccols text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$framesetopen(crows text, ccols text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$framesetOpen( crows, ccols, cattributes ));
    
END;
]]></complex-attribute>
                        <category _I_D="957f3202-00b1-4aa1-a37c-72392da25f02" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9d11bda4-be22-4b1b-9e23-a447e341c22e" name="htp$get_page" subcategories-loading="none" object-loading="extended" context="htp$get_page" is-trigger-function="0" unique-function-name="htp$get_page" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="t" ret-datatype="table" function-arguments="ppagepart text" schema-id="304013" function-type="RET_DATASET" count-arguments="1" function-id="304890" volatility="VOLATILE" is-window="f" function-identity-arguments="ppagepart text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$get_page(ppagepart text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vPagePart TEXT;
    vHeaderPosition BIGINT;
    rec RECORD;
    headerExists BOOLEAN DEFAULT FALSE;
BEGIN

    IF COALESCE(pPagePart, NULL) NOT IN ('headers', 'body') THEN

        vPagePart := 'body';

    ELSE

        vPagePart := pPagePart;

    END IF;

    FOR rec IN
    (
        SELECT id,
            column_value
        FROM aws_htbuf_arr
        ORDER BY id
    ) LOOP

        IF rec.column_value = E'\n\n' THEN

            vHeaderPosition := rec.id;
            headerExists := TRUE;
            EXIT;

        END IF;

        IF rec.column_value ~ '^\n$' THEN

            IF vHeaderPosition IS NOT NULL THEN

                vHeaderPosition := rec.id;
                headerExists := TRUE;
                EXIT;

            ELSE

                vHeaderPosition := rec.id;

            END IF;

        END IF;

        IF rec.column_value ~ '\n$' AND rec.column_value !~ '^\n$' THEN

            vHeaderPosition := rec.id;

        END IF;

        IF rec.column_value !~ '\n$' AND vHeaderPosition IS NOT NULL THEN

            vHeaderPosition := NULL;

        END IF;


    END LOOP;

    IF NOT headerExists THEN

        vHeaderPosition := NULL;

    END IF;

    IF vPagePart = 'headers' THEN

        RETURN QUERY
        SELECT aha.column_value
        FROM aws_htbuf_arr aha
        WHERE aha.id < vHeaderPosition
        ORDER BY id;

    ELSE

        RETURN QUERY
        SELECT aha.column_value
        FROM aws_htbuf_arr aha
        WHERE aha.id > COALESCE(vHeaderPosition, 0)
        ORDER BY id;

    END IF;

    RETURN;

END;    
]]></complex-attribute>
                        <category _I_D="a7178ee1-58fd-4741-a237-1d8dbfd8c701" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dbbfa80d-efc0-47b3-b36d-b58d41f49fd5" name="htp$headclose" subcategories-loading="none" object-loading="extended" context="htp$headclose" is-trigger-function="0" unique-function-name="htp$headclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304813" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$headclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$headClose());
    
END;
]]></complex-attribute>
                        <category _I_D="df57614c-2e41-4c4b-99d5-4d9a3a882866" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="91115367-3930-44ba-85c1-75a0805e1b62" name="htp$header" subcategories-loading="none" object-loading="extended" context="htp$header" is-trigger-function="0" unique-function-name="htp$header" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="nsize numeric, cheader text, calign text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304814" volatility="VOLATILE" is-window="f" function-identity-arguments="nsize numeric, cheader text, calign text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$header(nsize numeric, cheader text, calign text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$header(nsize,cheader,calign,cnowrap,cclear,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="a75b60b1-4e56-42ac-88d7-2651d4e4f481" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fd406cd9-210b-4014-8a51-4a5ce8c3eb7a" name="htp$headopen" subcategories-loading="none" object-loading="extended" context="htp$headopen" is-trigger-function="0" unique-function-name="htp$headopen" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304815" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$headopen()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$headOpen());
    
END;
]]></complex-attribute>
                        <category _I_D="9fc4b8b7-585f-441a-9ab1-6a1cb0d412c9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5a31c41f-9859-4c70-93fd-efa22efa63be" name="htp$hr" subcategories-loading="none" object-loading="extended" context="htp$hr" is-trigger-function="0" unique-function-name="htp$hr" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cclear text DEFAULT NULL::text, csrc text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304816" volatility="VOLATILE" is-window="f" function-identity-arguments="cclear text, csrc text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$hr(cclear text, csrc text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$hr(cclear, csrc, cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="357db96c-aaf9-40f6-9870-f703f2bbed2b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="30284534-17c4-47be-82e3-e74a3413c3c2" name="htp$htitle" subcategories-loading="none" object-loading="extended" context="htp$htitle" is-trigger-function="0" unique-function-name="htp$htitle" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctitle text, nsize numeric DEFAULT 1, calign text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304817" volatility="VOLATILE" is-window="f" function-identity-arguments="ctitle text, nsize numeric, calign text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$htitle(ctitle text, nsize numeric, calign text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$htitle(ctitle,nsize,calign,cnowrap,cclear,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="c3c6de8b-4c14-418b-aa1b-66e09da898ad" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c2bdb2b7-3408-4a71-b7cc-60057662e8ad" name="htp$htmlclose" subcategories-loading="none" object-loading="extended" context="htp$htmlclose" is-trigger-function="0" unique-function-name="htp$htmlclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304818" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$htmlclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$htmlClose());
    
END;
]]></complex-attribute>
                        <category _I_D="82ff001e-646e-465d-8d2b-807008718295" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f1bcfa49-4873-4452-bc45-e55bcb3ce99a" name="htp$htmlopen" subcategories-loading="none" object-loading="extended" context="htp$htmlopen" is-trigger-function="0" unique-function-name="htp$htmlopen" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304819" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$htmlopen()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$htmlOpen);
    
END;
]]></complex-attribute>
                        <category _I_D="d740953d-2a45-49db-b453-a98fe88ccd83" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ad41dca1-ae9d-4d8d-84ca-16831807a2cc" name="htp$img" subcategories-loading="none" object-loading="extended" context="htp$img" is-trigger-function="0" unique-function-name="htp$img" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="curl text, calign text DEFAULT NULL::text, calt text DEFAULT NULL::text, cismap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304821" volatility="VOLATILE" is-window="f" function-identity-arguments="curl text, calign text, calt text, cismap text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$img(curl text, calign text, calt text, cismap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$img(curl,calign,calt,cismap,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="0110961a-5100-420d-9919-6a3e1bf2c6d2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e16be5a5-a3b8-40f1-b89c-a3d9d5a64955" name="htp$img2" subcategories-loading="none" object-loading="extended" context="htp$img2" is-trigger-function="0" unique-function-name="htp$img2" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="curl text, calign text DEFAULT NULL::text, calt text DEFAULT NULL::text, cismap text DEFAULT NULL::text, cusemap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304820" volatility="VOLATILE" is-window="f" function-identity-arguments="curl text, calign text, calt text, cismap text, cusemap text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$img2(curl text, calign text, calt text, cismap text, cusemap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$img2(curl,calign,calt,cismap,cusemap,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="d3e3bd34-48d3-4938-ad29-44d17af1ed80" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d5b3831e-4f05-49cd-9aa1-fafea3afb6d0" name="htp$init" subcategories-loading="none" object-loading="extended" context="htp$init" is-trigger-function="0" unique-function-name="htp$init" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304625" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htp$init()">
                        <complex-attribute name="sql"><![CDATA[

    CREATE TEMPORARY TABLE IF NOT EXISTS aws_cgi_env
    (
        id BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        cgi_var_name TEXT NULL,
        cgi_var_val TEXT NULL,
        CONSTRAINT ht_headers_pk PRIMARY KEY (id)
    );

    CREATE TEMPORARY TABLE IF NOT EXISTS aws_htbuf_arr
    (
        id BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        column_value TEXT NULL,
        CONSTRAINT htbuf_arr_pk PRIMARY KEY (id)
    );

    TRUNCATE TABLE aws_htbuf_arr;

    CREATE TEMPORARY TABLE IF NOT EXISTS aws_cgi_cookie
    (
        cookie_name TEXT NOT NULL,
        cookie_val_id BIGINT NOT null GENERATED ALWAYS AS IDENTITY,
        cookie_val TEXT NULL,
        CONSTRAINT aws_cgi_cookies_pk PRIMARY KEY (cookie_name)
    );

    TRUNCATE TABLE aws_cgi_cookie;

]]></complex-attribute>
                        <category _I_D="ae08ee9c-040a-4be6-9250-77dcacd11be8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="df7dd367-f070-4177-b1df-956685f3e66e" name="htp$isindex" subcategories-loading="none" object-loading="extended" context="htp$isindex" is-trigger-function="0" unique-function-name="htp$isindex" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="cprompt text DEFAULT NULL::text, curl text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304822" volatility="VOLATILE" is-window="f" function-identity-arguments="cprompt text, curl text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$isindex(cprompt text, curl text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$isindex(cprompt, curl));
    
END;
]]></complex-attribute>
                        <category _I_D="358e78c3-aaa5-4e33-9e0a-0c5743a92bab" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="77630900-8a5d-4423-b31b-853c7b348718" name="htp$italic" subcategories-loading="none" object-loading="extended" context="htp$italic" is-trigger-function="0" unique-function-name="htp$italic" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304823" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$italic(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$italic(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="fb0d24a9-7748-4878-9957-d91408b0e9fc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="83551911-f6db-4ae1-a3e3-6a460a80f508" name="htp$kbd" subcategories-loading="none" object-loading="extended" context="htp$kbd" is-trigger-function="0" unique-function-name="htp$kbd" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304824" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$kbd(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$kbd(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="13d13850-8a1a-47d6-8082-5fbe10bf3e68" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8fe3ad7d-3e8c-4e4f-8679-861f3128f3bb" name="htp$keyboard" subcategories-loading="none" object-loading="extended" context="htp$keyboard" is-trigger-function="0" unique-function-name="htp$keyboard" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304825" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$keyboard(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$keyboard(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="039aa77e-2bfd-4bf8-8ecf-4d3e019fb53c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bc29fd18-4e5d-490e-a3fe-f9ce517a5bef" name="htp$line" subcategories-loading="none" object-loading="extended" context="htp$line" is-trigger-function="0" unique-function-name="htp$line" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cclear text DEFAULT NULL::text, csrc text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304826" volatility="VOLATILE" is-window="f" function-identity-arguments="cclear text, csrc text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$line(cclear text, csrc text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$hr(cclear, csrc, cattributes);
    
END;
]]></complex-attribute>
                        <category _I_D="25ff3bdc-cb6d-42f4-9751-2070c6f436f6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="04bacab7-fd36-4e37-ae79-462c24ac4e45" name="htp$linkrel" subcategories-loading="none" object-loading="extended" context="htp$linkrel" is-trigger-function="0" unique-function-name="htp$linkrel" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="crel text, curl text, ctitle text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304827" volatility="VOLATILE" is-window="f" function-identity-arguments="crel text, curl text, ctitle text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$linkrel(crel text, curl text, ctitle text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$linkRel(crel, curl, ctitle));
    
END;
]]></complex-attribute>
                        <category _I_D="19c788cf-8e6d-4ee9-b743-e3e463841613" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1d174e8b-0dc5-4a27-beb4-efbb5a55fc85" name="htp$linkrev" subcategories-loading="none" object-loading="extended" context="htp$linkrev" is-trigger-function="0" unique-function-name="htp$linkrev" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="crev text, curl text, ctitle text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304828" volatility="VOLATILE" is-window="f" function-identity-arguments="crev text, curl text, ctitle text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$linkrev(crev text, curl text, ctitle text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$linkRev(crev, curl, ctitle));
    
END;
]]></complex-attribute>
                        <category _I_D="2c12266d-7290-48ef-8bda-cfb00a56650d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f1839f6f-c428-48fa-9dfe-994e4e20cc43" name="htp$listheader" subcategories-loading="none" object-loading="extended" context="htp$listheader" is-trigger-function="0" unique-function-name="htp$listheader" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304829" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$listheader(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$listHeader(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="21fb4bad-7245-4c73-868f-4bca603e6e8c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7ef20364-a7ce-4980-be72-1dcb431071be" name="htp$listingclose" subcategories-loading="none" object-loading="extended" context="htp$listingclose" is-trigger-function="0" unique-function-name="htp$listingclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304830" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$listingclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$listingClose());
    
END;
]]></complex-attribute>
                        <category _I_D="6a423425-95ce-4270-87c3-905b692aebaf" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4bca86fc-bd13-4414-9541-4a4396dba299" name="htp$listingopen" subcategories-loading="none" object-loading="extended" context="htp$listingopen" is-trigger-function="0" unique-function-name="htp$listingopen" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304831" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$listingopen()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$listingOpen());
    
END;
]]></complex-attribute>
                        <category _I_D="1d980b37-e09d-42e6-ae9e-5541914a9a10" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c8613830-3c7c-4bb6-a063-9bd3a6520a70" name="htp$listitem" subcategories-loading="none" object-loading="extended" context="htp$listitem" is-trigger-function="0" unique-function-name="htp$listitem" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cdingbat text DEFAULT NULL::text, csrc text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304832" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cclear text, cdingbat text, csrc text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$listitem(ctext text, cclear text, cdingbat text, csrc text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$listItem(ctext,cclear,cdingbat,csrc,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="aa1b5959-b905-4fe4-bb0a-b19b0b0feceb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b99a1e11-033e-4616-9b7b-d04e15d59827" name="htp$mailto" subcategories-loading="none" object-loading="extended" context="htp$mailto" is-trigger-function="0" unique-function-name="htp$mailto" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="caddress text, ctext text, cname text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304833" volatility="VOLATILE" is-window="f" function-identity-arguments="caddress text, ctext text, cname text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$mailto(caddress text, ctext text, cname text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$mailto(caddress,ctext,cname,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="1799637b-c954-4aa4-b112-34ddabc4b1bf" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e7a11432-b940-47de-9077-652158848f51" name="htp$mapclose" subcategories-loading="none" object-loading="extended" context="htp$mapclose" is-trigger-function="0" unique-function-name="htp$mapclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304834" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$mapclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$mapClose());
    
END;
]]></complex-attribute>
                        <category _I_D="49b11c45-c3ad-40a0-949c-bada121155de" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="23cdc180-67d6-41ef-bdfc-3f33649d1177" name="htp$mapopen" subcategories-loading="none" object-loading="extended" context="htp$mapopen" is-trigger-function="0" unique-function-name="htp$mapopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304835" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$mapopen(cname text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$mapOpen(cname,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="6dbedb91-4036-4454-86e6-131a7fca9b37" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="819507c8-6c2c-410c-b4fb-8c8894cede4d" name="htp$menulistclose" subcategories-loading="none" object-loading="extended" context="htp$menulistclose" is-trigger-function="0" unique-function-name="htp$menulistclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304836" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$menulistclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$menulistClose());
    
END;
]]></complex-attribute>
                        <category _I_D="58b11ca2-8f20-4480-b61c-15735db858f9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d61f8cd2-e1ff-402f-a55a-ae57123e217e" name="htp$menulistopen" subcategories-loading="none" object-loading="extended" context="htp$menulistopen" is-trigger-function="0" unique-function-name="htp$menulistopen" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304837" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$menulistopen()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$menulistOpen());
    
END;
]]></complex-attribute>
                        <category _I_D="bce8d637-c14e-4060-91d6-a4aa68552d06" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8477d3bd-47c1-4c50-81cd-9adc5dec0ae1" name="htp$meta" subcategories-loading="none" object-loading="extended" context="htp$meta" is-trigger-function="0" unique-function-name="htp$meta" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="chttp_equiv text, cname text, ccontent text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304838" volatility="VOLATILE" is-window="f" function-identity-arguments="chttp_equiv text, cname text, ccontent text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$meta(chttp_equiv text, cname text, ccontent text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$meta(chttp_equiv, cname, ccontent));
    
END;
]]></complex-attribute>
                        <category _I_D="185e9432-3613-4fc5-80ff-509193ed5511" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f18b71c8-6b9f-423b-9baa-48baf2de4a7f" name="htp$nextid" subcategories-loading="none" object-loading="extended" context="htp$nextid" is-trigger-function="0" unique-function-name="htp$nextid" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="cidentifier text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304839" volatility="VOLATILE" is-window="f" function-identity-arguments="cidentifier text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$nextid(cidentifier text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$nextid(cidentifier));
    
END;
]]></complex-attribute>
                        <category _I_D="76e697d6-6c43-450c-848b-37d74b33f8e0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="79038c4a-4170-45cf-92f7-62aa30fe15ea" name="htp$nl" subcategories-loading="none" object-loading="extended" context="htp$nl" is-trigger-function="0" unique-function-name="htp$nl" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304840" volatility="VOLATILE" is-window="f" function-identity-arguments="cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$nl(cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$nl(cclear,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="fe56ebb7-ce63-4235-93de-8be384982d0a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="538fa85e-9a56-4cb2-962e-6583b7d03179" name="htp$nobr" subcategories-loading="none" object-loading="extended" context="htp$nobr" is-trigger-function="0" unique-function-name="htp$nobr" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304841" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$nobr(ctext text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$nobr(ctext));
    
END;
]]></complex-attribute>
                        <category _I_D="7232c158-92c1-47d3-a0d1-d872634771ad" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="90df87a0-00c2-41dc-b524-a5724bd1bda2" name="htp$noframesclose" subcategories-loading="none" object-loading="extended" context="htp$noframesclose" is-trigger-function="0" unique-function-name="htp$noframesclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304842" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$noframesclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$noframesClose());
    
END;
]]></complex-attribute>
                        <category _I_D="c6d45427-3089-42bc-aaa9-368279b01b55" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="34b7221a-ce84-46d5-a981-5d9237bd5ef4" name="htp$noframesopen" subcategories-loading="none" object-loading="extended" context="htp$noframesopen" is-trigger-function="0" unique-function-name="htp$noframesopen" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304843" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$noframesopen()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$noframesOpen());
    
END;
]]></complex-attribute>
                        <category _I_D="c1147a88-4c8c-4082-a713-cc07698f1123" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f73830bb-822c-441f-a5ee-ed454a6ab9a6" name="htp$olistclose" subcategories-loading="none" object-loading="extended" context="htp$olistclose" is-trigger-function="0" unique-function-name="htp$olistclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304844" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$olistclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$olistClose());
    
END;
]]></complex-attribute>
                        <category _I_D="817a00bd-ae40-4bc6-9926-33fec40edf6b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="23351da5-f77b-478e-8757-315c4a6c10cd" name="htp$olistopen" subcategories-loading="none" object-loading="extended" context="htp$olistopen" is-trigger-function="0" unique-function-name="htp$olistopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cclear text DEFAULT NULL::text, cwrap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304845" volatility="VOLATILE" is-window="f" function-identity-arguments="cclear text, cwrap text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$olistopen(cclear text, cwrap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$olistOpen(cclear,cwrap,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="52a65b2b-0ecf-4937-9c52-802735f813da" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d2faf488-10bd-40f6-86cf-5e83aba99a2d" name="htp$p" subcategories-loading="none" object-loading="extended" context="htp$p(cbuf text)" is-trigger-function="0" unique-function-name="htp$p(cbuf text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="cbuf text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304885" volatility="VOLATILE" is-window="f" function-identity-arguments="cbuf text" overload-function-count="3" proc-language="plpgsql" function-signature="htp$p(cbuf text)" unique-suffix="(cbuf text)" routine-number="304885">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    INSERT INTO aws_htbuf_arr(column_value)
    SELECT CONCAT(
        cbuf,
        E'\n'
    );
    
END;
]]></complex-attribute>
                        <category _I_D="0d83a9b9-ef84-4e5d-a410-803623197ab4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="02e885cf-c917-4daa-9e4f-d212a794f9cf" name="htp$p" subcategories-loading="none" object-loading="extended" context="htp$p(dbuf timestamp without time zone)" is-trigger-function="0" unique-function-name="htp$p(dbuf timestamp without time zone)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="timestamp without time zone" is-returning-set="f" ret-datatype="void" function-arguments="dbuf timestamp without time zone" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304886" volatility="VOLATILE" is-window="f" function-identity-arguments="dbuf timestamp without time zone" overload-function-count="3" proc-language="plpgsql" function-signature="htp$p(dbuf timestamp without time zone)" unique-suffix="(dbuf timestamp without time zone)" routine-number="304886">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    INSERT INTO aws_htbuf_arr(column_value)
    SELECT CONCAT(
        aws_oracle_ext.to_char(dbuf),
        E'\n'
    );
    
END;
]]></complex-attribute>
                        <category _I_D="2b2e5afb-6b82-4ed5-866a-a41013207110" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="46909b46-7e44-450c-895a-40aae009545c" name="htp$p" subcategories-loading="none" object-loading="extended" context="htp$p(nbuf double precision)" is-trigger-function="0" unique-function-name="htp$p(nbuf double precision)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision" is-returning-set="f" ret-datatype="void" function-arguments="nbuf double precision" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304876" volatility="VOLATILE" is-window="f" function-identity-arguments="nbuf double precision" overload-function-count="3" proc-language="plpgsql" function-signature="htp$p(nbuf double precision)" unique-suffix="(nbuf double precision)" routine-number="304876">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    INSERT INTO aws_htbuf_arr(column_value)
    SELECT CONCAT(
        aws_oracle_ext.to_char(nbuf),
        E'\n'
    );
    
END;
]]></complex-attribute>
                        <category _I_D="f33a8732-6c5e-4c43-8594-1af89b64fdab" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8a5c2ef2-fe80-4f53-b005-100332b4a91a" name="htp$para" subcategories-loading="none" object-loading="extended" context="htp$para" is-trigger-function="0" unique-function-name="htp$para" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304848" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$para()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

  PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$para());
    
END;
]]></complex-attribute>
                        <category _I_D="8ca5c5e9-5802-4c0a-b5fd-8c770b6bedfb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c04282ce-8eb3-4a52-87f1-6798691cae0a" name="htp$paragraph" subcategories-loading="none" object-loading="extended" context="htp$paragraph" is-trigger-function="0" unique-function-name="htp$paragraph" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="calign text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304846" volatility="VOLATILE" is-window="f" function-identity-arguments="calign text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$paragraph(calign text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$paragraph(calign,cnowrap,cclear,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="cd4d7709-eb1b-4014-b51e-1ea5713dd16f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5570a9c5-6e3c-4b41-81c5-0548e6d2bc21" name="htp$param" subcategories-loading="none" object-loading="extended" context="htp$param" is-trigger-function="0" unique-function-name="htp$param" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, cvalue text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304847" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, cvalue text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$param(cname text, cvalue text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$param(cname,cvalue));
    
END;
]]></complex-attribute>
                        <category _I_D="bdd28225-0853-4a8c-80a3-a046cc50ef16" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1c59b126-c280-43d4-a2f1-44c601b8de0c" name="htp$plaintext" subcategories-loading="none" object-loading="extended" context="htp$plaintext" is-trigger-function="0" unique-function-name="htp$plaintext" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304849" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$plaintext(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$plaintext(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="7c3b2a3f-4d2a-4aef-9097-8293786ee4e5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="84296505-d925-48e3-857f-42b928917301" name="htp$preclose" subcategories-loading="none" object-loading="extended" context="htp$preclose" is-trigger-function="0" unique-function-name="htp$preclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304850" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$preclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$$preClose());
    
END;
]]></complex-attribute>
                        <category _I_D="f4215c0e-e605-44d6-9d37-8a8c82d35e03" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5235384d-0744-49f2-b11a-a11d24b5f529" name="htp$preopen" subcategories-loading="none" object-loading="extended" context="htp$preopen" is-trigger-function="0" unique-function-name="htp$preopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cclear text DEFAULT NULL::text, cwidth text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304851" volatility="VOLATILE" is-window="f" function-identity-arguments="cclear text, cwidth text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$preopen(cclear text, cwidth text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$preOpen(cclear,cwidth,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="06d19f6f-3757-4b9f-b070-ff59d279b4ea" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="89c767e0-e322-4256-8891-c1cd331efae2" name="htp$print" subcategories-loading="none" object-loading="extended" context="htp$print(cbuf text)" is-trigger-function="0" unique-function-name="htp$print(cbuf text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="cbuf text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304879" volatility="VOLATILE" is-window="f" function-identity-arguments="cbuf text" overload-function-count="3" proc-language="plpgsql" function-signature="htp$print(cbuf text)" unique-suffix="(cbuf text)" routine-number="304879">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    INSERT INTO aws_htbuf_arr(column_value)
    SELECT CONCAT(
        cbuf,
        E'\n'
    );
    
END;
]]></complex-attribute>
                        <category _I_D="1aec24d9-7b63-48cb-a261-0155c1a266d3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e45e5c81-266b-48aa-8638-a76b904195d9" name="htp$print" subcategories-loading="none" object-loading="extended" context="htp$print(dbuf timestamp without time zone)" is-trigger-function="0" unique-function-name="htp$print(dbuf timestamp without time zone)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="timestamp without time zone" is-returning-set="f" ret-datatype="void" function-arguments="dbuf timestamp without time zone" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304880" volatility="VOLATILE" is-window="f" function-identity-arguments="dbuf timestamp without time zone" overload-function-count="3" proc-language="plpgsql" function-signature="htp$print(dbuf timestamp without time zone)" unique-suffix="(dbuf timestamp without time zone)" routine-number="304880">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    INSERT INTO aws_htbuf_arr(column_value)
    SELECT CONCAT(
        aws_oracle_ext.to_char(dbuf),
        E'\n'
    );
    
END;
]]></complex-attribute>
                        <category _I_D="8d44da4e-3dc0-4e93-8798-6e9f7a8f7291" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9d03793c-7b3f-4c8c-a874-7302ba050166" name="htp$print" subcategories-loading="none" object-loading="extended" context="htp$print(nbuf double precision)" is-trigger-function="0" unique-function-name="htp$print(nbuf double precision)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision" is-returning-set="f" ret-datatype="void" function-arguments="nbuf double precision" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304877" volatility="VOLATILE" is-window="f" function-identity-arguments="nbuf double precision" overload-function-count="3" proc-language="plpgsql" function-signature="htp$print(nbuf double precision)" unique-suffix="(nbuf double precision)" routine-number="304877">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    INSERT INTO aws_htbuf_arr(column_value)
    SELECT CONCAT(
        aws_oracle_ext.to_char(nbuf),
        E'\n'
    );
    
END;
]]></complex-attribute>
                        <category _I_D="31512c4c-5c02-4bea-aa79-09d23053ab00" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bb49421d-b326-484f-a358-744683fcfb6c" name="htp$prints" subcategories-loading="none" object-loading="extended" context="htp$prints" is-trigger-function="0" unique-function-name="htp$prints" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304878" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$prints(ctext text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$escape_sc(ctext));
    
END;
]]></complex-attribute>
                        <category _I_D="5042f525-05b3-4283-adf9-f062fffef608" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e81fa0bc-8bde-452e-a4db-3376fddf5e31" name="htp$prn" subcategories-loading="none" object-loading="extended" context="htp$prn(cbuf text)" is-trigger-function="0" unique-function-name="htp$prn(cbuf text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="cbuf text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304882" volatility="VOLATILE" is-window="f" function-identity-arguments="cbuf text" overload-function-count="3" proc-language="plpgsql" function-signature="htp$prn(cbuf text)" unique-suffix="(cbuf text)" routine-number="304882">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    INSERT INTO aws_htbuf_arr(column_value)
    SELECT CONCAT(
        cbuf
    );
    
END;
]]></complex-attribute>
                        <category _I_D="726c6265-7379-49f7-94b3-0ef6bf5113d8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="abc34fa4-ad31-41bf-9edb-575842364140" name="htp$prn" subcategories-loading="none" object-loading="extended" context="htp$prn(dbuf timestamp without time zone)" is-trigger-function="0" unique-function-name="htp$prn(dbuf timestamp without time zone)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="timestamp without time zone" is-returning-set="f" ret-datatype="void" function-arguments="dbuf timestamp without time zone" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304883" volatility="VOLATILE" is-window="f" function-identity-arguments="dbuf timestamp without time zone" overload-function-count="3" proc-language="plpgsql" function-signature="htp$prn(dbuf timestamp without time zone)" unique-suffix="(dbuf timestamp without time zone)" routine-number="304883">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    INSERT INTO aws_htbuf_arr(column_value)
    SELECT CONCAT(
        aws_oracle_ext.to_char(dbuf)
    );
    
END;
]]></complex-attribute>
                        <category _I_D="0066ad47-b9f1-4c57-ba35-c9f552c6fc09" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3768582a-9da1-4d6a-a9c8-368704a2fa84" name="htp$prn" subcategories-loading="none" object-loading="extended" context="htp$prn(nbuf double precision)" is-trigger-function="0" unique-function-name="htp$prn(nbuf double precision)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision" is-returning-set="f" ret-datatype="void" function-arguments="nbuf double precision" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304881" volatility="VOLATILE" is-window="f" function-identity-arguments="nbuf double precision" overload-function-count="3" proc-language="plpgsql" function-signature="htp$prn(nbuf double precision)" unique-suffix="(nbuf double precision)" routine-number="304881">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    INSERT INTO aws_htbuf_arr(column_value)
    SELECT CONCAT(
        aws_oracle_ext.to_char(nbuf)
    );
    
END;
]]></complex-attribute>
                        <category _I_D="aeb1084f-a884-4a25-b1df-fed546e4fac6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dbd07fe9-80d7-4486-bf48-ceeb15073e45" name="htp$ps" subcategories-loading="none" object-loading="extended" context="htp$ps" is-trigger-function="0" unique-function-name="htp$ps" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304884" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$ps(ctext text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$escape_sc(ctext));
    
END;
]]></complex-attribute>
                        <category _I_D="48f99c0b-8362-4c81-b3e2-93a8ccadc2ee" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="64507b1a-aa4c-42c9-8812-4c425d153bb5" name="htp$putraw" subcategories-loading="none" object-loading="extended" context="htp$putraw" is-trigger-function="0" unique-function-name="htp$putraw" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bytea,integer" is-returning-set="f" ret-datatype="void" function-arguments="bbuf bytea, buflen integer DEFAULT NULL::integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304887" volatility="VOLATILE" is-window="f" function-identity-arguments="bbuf bytea, buflen integer" overload-function-count="1" proc-language="plpgsql" function-signature="htp$putraw(bbuf bytea, buflen integer)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    NULL;
    
END;
]]></complex-attribute>
                        <category _I_D="38f5b7fb-e3c6-4974-9929-151a885ff87a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8c332109-a7d4-4109-8f5c-58b1a72e14aa" name="htp$s" subcategories-loading="none" object-loading="extended" context="htp$s" is-trigger-function="0" unique-function-name="htp$s" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304855" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$s(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$s(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="0ce40996-a0ea-4e85-bc5f-c5a619d2495c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a85ef6d3-5b02-460a-bc14-eb2dfe378c93" name="htp$sample" subcategories-loading="none" object-loading="extended" context="htp$sample" is-trigger-function="0" unique-function-name="htp$sample" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304852" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$sample(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$sample(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="9193b6fb-114b-4e05-857d-51cf81b3890f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ec6d9209-78de-479c-a873-1c2fe1b38257" name="htp$script" subcategories-loading="none" object-loading="extended" context="htp$script" is-trigger-function="0" unique-function-name="htp$script" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="cscript text, clanguage text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304853" volatility="VOLATILE" is-window="f" function-identity-arguments="cscript text, clanguage text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$script(cscript text, clanguage text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$script(cscript, clanguage));
    
END;
]]></complex-attribute>
                        <category _I_D="16ef9b7a-246e-4303-9f31-2a9f87d03342" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c383f235-ce72-420e-8349-00754f707788" name="htp$small" subcategories-loading="none" object-loading="extended" context="htp$small" is-trigger-function="0" unique-function-name="htp$small" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304854" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$small(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$small(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="5e417944-4849-4f70-98d9-3b7cc3d7172f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f95ee9c8-d29a-44db-b909-ebd172414dca" name="htp$strike" subcategories-loading="none" object-loading="extended" context="htp$strike" is-trigger-function="0" unique-function-name="htp$strike" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304856" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$strike(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$strike(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="2d27377b-05af-4cc3-ad76-a4151f61fc88" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8c1bac6c-9aff-47a9-97c0-f33628a1b2cf" name="htp$strong" subcategories-loading="none" object-loading="extended" context="htp$strong" is-trigger-function="0" unique-function-name="htp$strong" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304857" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$strong(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$strong(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="1638c3b0-dada-4d58-b933-1c2dd86dcbbd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3682cdf7-83f4-482e-87cf-47dcdf333419" name="htp$style" subcategories-loading="none" object-loading="extended" context="htp$style" is-trigger-function="0" unique-function-name="htp$style" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="cstyle text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304858" volatility="VOLATILE" is-window="f" function-identity-arguments="cstyle text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$style(cstyle text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$style(cstyle));
    
END;
]]></complex-attribute>
                        <category _I_D="7fc1cf18-8abd-4372-9214-26d2f7069997" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ecbd9b3d-8d27-4f29-b955-a38228aabeed" name="htp$sub" subcategories-loading="none" object-loading="extended" context="htp$sub" is-trigger-function="0" unique-function-name="htp$sub" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304859" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, calign text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$sub(ctext text, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$sub(ctext,calign,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="450d0b87-4b38-4b9b-807f-705c3f521eb8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e0d4a95f-96fd-4611-9645-f4db4bd2d574" name="htp$sup" subcategories-loading="none" object-loading="extended" context="htp$sup" is-trigger-function="0" unique-function-name="htp$sup" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304860" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, calign text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$sup(ctext text, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$sup(ctext,calign,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="070b57ea-a904-4e48-9e15-f3741e9786ab" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a1c33400-856b-44ff-8c51-36f3ce56f1a7" name="htp$tablecaption" subcategories-loading="none" object-loading="extended" context="htp$tablecaption" is-trigger-function="0" unique-function-name="htp$tablecaption" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ccaption text, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304861" volatility="VOLATILE" is-window="f" function-identity-arguments="ccaption text, calign text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$tablecaption(ccaption text, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$tableCaption(ccaption,calign,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="2df53984-fe22-4e01-addc-ba14cd866dd8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bed387c2-3399-47e7-bc40-cff8b8894fa3" name="htp$tableclose" subcategories-loading="none" object-loading="extended" context="htp$tableclose" is-trigger-function="0" unique-function-name="htp$tableclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304862" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$tableclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$tableClose());
    
END;
]]></complex-attribute>
                        <category _I_D="a1df6670-7426-4f99-83a7-ecdd0de32d9b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1d22314b-cfda-478f-bd1f-fe123cb64d34" name="htp$tabledata" subcategories-loading="none" object-loading="extended" context="htp$tabledata" is-trigger-function="0" unique-function-name="htp$tabledata" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cvalue text DEFAULT NULL::text, calign text DEFAULT NULL::text, cdp text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, crowspan text DEFAULT NULL::text, ccolspan text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="7" function-id="304863" volatility="VOLATILE" is-window="f" function-identity-arguments="cvalue text, calign text, cdp text, cnowrap text, crowspan text, ccolspan text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$tabledata(cvalue text, calign text, cdp text, cnowrap text, crowspan text, ccolspan text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$tableData(cvalue,calign,cdp,cnowrap,crowspan,ccolspan,cattributes));

END;
]]></complex-attribute>
                        <category _I_D="fb1673e7-f4a3-4ac9-80f5-4778028a82cb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3dfaf2ba-3b6e-4422-a51f-ec122e348bd9" name="htp$tableheader" subcategories-loading="none" object-loading="extended" context="htp$tableheader" is-trigger-function="0" unique-function-name="htp$tableheader" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cvalue text DEFAULT NULL::text, calign text DEFAULT NULL::text, cdp text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, crowspan text DEFAULT NULL::text, ccolspan text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="7" function-id="304864" volatility="VOLATILE" is-window="f" function-identity-arguments="cvalue text, calign text, cdp text, cnowrap text, crowspan text, ccolspan text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$tableheader(cvalue text, calign text, cdp text, cnowrap text, crowspan text, ccolspan text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$tableHeader(cvalue,calign,cdp,cnowrap,crowspan,ccolspan,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="4cb41748-2065-459d-a010-a8fc5107eaf8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="564de2f9-ba29-4a93-907e-0cbdd0d8a23d" name="htp$tableopen" subcategories-loading="none" object-loading="extended" context="htp$tableopen" is-trigger-function="0" unique-function-name="htp$tableopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cborder text DEFAULT NULL::text, calign text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304865" volatility="VOLATILE" is-window="f" function-identity-arguments="cborder text, calign text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$tableopen(cborder text, calign text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$tableOpen(cborder,calign,cnowrap,cclear,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="8a7845f1-8a50-4e5b-8709-7c1480650720" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="737ee2bc-2053-4a97-a54c-ce5478c34c88" name="htp$tablerowclose" subcategories-loading="none" object-loading="extended" context="htp$tablerowclose" is-trigger-function="0" unique-function-name="htp$tablerowclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304866" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$tablerowclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$tableClose());
    
END;
]]></complex-attribute>
                        <category _I_D="c6f48d79-a2ab-44b9-841a-cc39c239dc1a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="51e65fb4-e089-4ff4-b586-8402fd947f9b" name="htp$tablerowopen" subcategories-loading="none" object-loading="extended" context="htp$tablerowopen" is-trigger-function="0" unique-function-name="htp$tablerowopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="calign text DEFAULT NULL::text, cvalign text DEFAULT NULL::text, cdp text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304867" volatility="VOLATILE" is-window="f" function-identity-arguments="calign text, cvalign text, cdp text, cnowrap text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$tablerowopen(calign text, cvalign text, cdp text, cnowrap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$tableRowOpen(calign,cvalign,cdp,cnowrap,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="e42a51e5-6ea0-4771-b5e2-0aa76ed5327f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="eefebf85-486a-4d4c-865c-cdb5289e8808" name="htp$teletype" subcategories-loading="none" object-loading="extended" context="htp$teletype" is-trigger-function="0" unique-function-name="htp$teletype" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304868" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$teletype(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$teletype(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="3a778ea7-1981-415a-b60f-6dd42678e020" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fc54efd9-d721-4ee7-960c-3e16caa6654f" name="htp$title" subcategories-loading="none" object-loading="extended" context="htp$title" is-trigger-function="0" unique-function-name="htp$title" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="ctitle text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304869" volatility="VOLATILE" is-window="f" function-identity-arguments="ctitle text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$title(ctitle text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$title(ctitle));
    
END;
]]></complex-attribute>
                        <category _I_D="0673cb16-3983-4363-9a62-71fb37a612db" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9550209d-4d76-43c5-829a-287b9032e2ef" name="htp$ulistclose" subcategories-loading="none" object-loading="extended" context="htp$ulistclose" is-trigger-function="0" unique-function-name="htp$ulistclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304870" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$ulistclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$ulistClose());
    
END;
]]></complex-attribute>
                        <category _I_D="4b22da86-752e-47b5-8542-d751d6a06367" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="510b6899-4522-434d-aa23-ddaf21f43928" name="htp$ulistopen" subcategories-loading="none" object-loading="extended" context="htp$ulistopen" is-trigger-function="0" unique-function-name="htp$ulistopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cclear text DEFAULT NULL::text, cwrap text DEFAULT NULL::text, cdingbat text DEFAULT NULL::text, csrc text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304871" volatility="VOLATILE" is-window="f" function-identity-arguments="cclear text, cwrap text, cdingbat text, csrc text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$ulistopen(cclear text, cwrap text, cdingbat text, csrc text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$ulistOpen(cclear,cwrap,cdingbat,csrc,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="1f0c3464-cca1-42d3-96ec-2b8705299257" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7ff7a281-e94d-41b1-b48b-db9f8cf26815" name="htp$underline" subcategories-loading="none" object-loading="extended" context="htp$underline" is-trigger-function="0" unique-function-name="htp$underline" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304872" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$underline(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$underline(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="797d7ea0-afe2-4694-84bc-bd5c6e9a92fa" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="26028c98-285e-4153-98e7-79ecc59aaea1" name="htp$variable" subcategories-loading="none" object-loading="extended" context="htp$variable" is-trigger-function="0" unique-function-name="htp$variable" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304873" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$variable(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$variable(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="e1514ea9-8e25-405c-991f-fda842c1ebf9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b08087a6-4896-485f-8348-0e10130c9810" name="htp$wbr" subcategories-loading="none" object-loading="extended" context="htp$wbr" is-trigger-function="0" unique-function-name="htp$wbr" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304874" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$wbr()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$wbr());
    
END;
]]></complex-attribute>
                        <category _I_D="355cd4f5-0532-4916-a22a-bea32c51350a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c65c18b2-b05f-4a5a-80ee-fd70e5f65e60" name="immutable_concat" subcategories-loading="none" object-loading="extended" context="immutable_concat" is-trigger-function="0" unique-function-name="immutable_concat" is-aggregate="f" language-name="sql" arguments-datatypes="text[]" is-returning-set="f" ret-datatype="text" function-arguments="VARIADIC param_args text[]" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305263" volatility="IMMUTABLE" is-window="f" function-identity-arguments="VARIADIC param_args text[]" overload-function-count="1" proc-language="sql" function-signature="immutable_concat(VARIADIC param_args text[])">
                        <complex-attribute name="sql"><![CDATA[
SELECT array_to_string($1,'');
]]></complex-attribute>
                        <category _I_D="8ef1fb2a-e4c7-4d51-8136-c5b35ba3baf4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="621f9206-6a52-4f5a-a273-049675d59e9f" name="immutable_concat_ws" subcategories-loading="none" object-loading="extended" context="immutable_concat_ws" is-trigger-function="0" unique-function-name="immutable_concat_ws" is-aggregate="f" language-name="sql" arguments-datatypes="text,text[]" is-returning-set="f" ret-datatype="text" function-arguments="text, VARIADIC param_args text[]" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305264" volatility="IMMUTABLE" is-window="f" function-identity-arguments="text, VARIADIC param_args text[]" overload-function-count="1" proc-language="sql" function-signature="immutable_concat_ws(text, VARIADIC param_args text[])">
                        <complex-attribute name="sql"><![CDATA[
SELECT array_to_string($2,$1);
]]></complex-attribute>
                        <category _I_D="d5ed28c9-df48-49bf-8c0c-10840503eabd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="33a1ec70-992d-4a0f-b67a-f80543e1508f" name="increment_rowcount" subcategories-loading="none" object-loading="extended" context="increment_rowcount" is-trigger-function="0" unique-function-name="increment_rowcount" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bigint,boolean" is-returning-set="f" ret-datatype="int8" function-arguments="INOUT rc bigint, is_found boolean" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304495" volatility="VOLATILE" is-window="f" function-identity-arguments="INOUT rc bigint, is_found boolean" overload-function-count="1" proc-language="plpgsql" function-signature="increment_rowcount(INOUT rc bigint, is_found boolean)" comment="&amp;#x000a;  Increments the variable emulating the ROWCOUNT cursor attribute's behaviour in Oracle. &amp;#x000a;  Must be called whenever an explicit cursor's fetch occured, if the migrated object's &amp;#x000a;  code contains the ROWCOUNT cursor attribute.&amp;#x000a;&amp;#x000a;  Parameters:&amp;#x000a;    rc       -- variable emulating the ROWCOUNT attribute for the explicit cursor&amp;#x000a;    is_found -- value of the emulated FOUND curcor attribute, should be always set &amp;#x000a;                to FOUND when calling the function&amp;#x000a;&amp;#x000a;  Returns:&amp;#x000a;    Conditionally increased value of the rc parameter&amp;#x000a;">
                        <complex-attribute name="sql"><![CDATA[
begin
  rc := rc + case when is_found then 1 else 0 end;
end;
]]></complex-attribute>
                        <category _I_D="f5d74be7-2e89-4678-8053-76487f813693" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4182928d-6ac5-4265-bd11-4e887237c91b" name="init_context_struct" subcategories-loading="none" object-loading="extended" context="init_context_struct" is-trigger-function="0" unique-function-name="init_context_struct" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305104" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="init_context_struct()">
                        <complex-attribute name="sql"><![CDATA[
   	create temporary table if not exists context_local(
	  context_namespace text not null,
	  attribute_name text not null,  
	  attribute_value text,
	  user_name text,
	  cliend_id text,
	  signature text,
	  backend_start timestamp not null default now(),				  
	  pid int default pg_backend_pid(),
  	  constraint un_context_local unique (context_namespace, attribute_name)
	) on commit preserve rows;


	create unlogged table if not exists aws_oracle_context.context_global(
	  context_namespace text not null references aws_oracle_context.context on delete cascade,
	  attribute_name text not null,  
	  attribute_value text,
	  user_name text,
	  cliend_id text,
	  signature text,
	  backend_start timestamp not null default now(),				  
	  pid int default pg_backend_pid()
  	  ,constraint un_context_global unique (context_namespace, attribute_name, cliend_id)
	);
]]></complex-attribute>
                        <category _I_D="74136278-9b33-4517-98e4-141ea2124a6e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a8341f77-fcad-4baf-b2fc-0bf2cba487bf" name="instr" subcategories-loading="none" object-loading="extended" context="instr" is-trigger-function="0" unique-function-name="instr" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,numeric,numeric" is-returning-set="f" ret-datatype="numeric" function-arguments="p_str text, p_substr text, p_pos numeric DEFAULT 1, p_occurrence numeric DEFAULT 1" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304496" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_str text, p_substr text, p_pos numeric, p_occurrence numeric" overload-function-count="1" proc-language="sql" function-signature="instr(p_str text, p_substr text, p_pos numeric, p_occurrence numeric)" comment="This function searches a string for a substring using characters and returns the position in the string that is the first character of a specified occurrence of the substring.">
                        <complex-attribute name="sql"><![CDATA[


    SELECT
        CASE

            WHEN LENGTH($1) = 0 OR LENGTH($2) = 0 THEN NULL::NUMERIC

            WHEN TRUNC($4) = 0 THEN 1/TRUNC($4)

            WHEN $4 < 0 THEN SQRT($4)

            ELSE

                (

                    WITH RECURSIVE t(str, shift, pos, tail, o, n) AS 
                    (
                        SELECT CASE WHEN TRUNC($3) < 0 THEN REVERSE($1) ELSE $1 END AS str,
                            0 AS shift,
                            CASE WHEN TRUNC($3) < 0 THEN -1 * TRUNC($3)::INT ELSE TRUNC($3)::INT END AS pos,
                            CASE WHEN TRUNC($3) < 0 THEN REVERSE($1) ELSE $1 END AS tail,
                            0 AS o,
                            CASE WHEN TRUNC($3) < 0 THEN REVERSE($2) ELSE $2 END AS n
                        UNION ALL
                        SELECT str,
                            shift + pos AS shift,
                            STRPOS(SUBSTR(str, shift + pos), n) AS pos,
                            SUBSTR(str, shift + pos) AS tail,
                            o + 1 AS o,
                            n
                        FROM t
                        WHERE pos <> 0
                    )
                    ,r AS
                    (
                        SELECT t.str,
                            t.shift,
                            t.pos,
                            t.tail,
                            t.o,
                            CASE
                                WHEN TRUNC($3) > 0 THEN
                                    t.pos + t.shift - 1
                                ELSE
                                    LENGTH(t.str) - t.pos - t.shift + 2
                            END cc
                        FROM t
                        WHERE t.o = TRUNC($4)
                        AND t.pos <> 0
                    )
                    SELECT COALESCE
                    (
                        (
                            SELECT r.cc
                            FROM r
                        ),
                        0
                    )::NUMERiC
                )

        END;

]]></complex-attribute>
                        <category _I_D="0a83dbfb-1114-4097-be38-ac2be9417314" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5f320ce8-ff35-48e8-a667-303d03134303" name="instrb" subcategories-loading="none" object-loading="extended" context="instrb" is-trigger-function="0" unique-function-name="instrb" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="int4" function-arguments="text, text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304497" volatility="VOLATILE" is-window="f" function-identity-arguments="text, text" overload-function-count="1" proc-language="sql" function-signature="instrb(text, text)" comment="Returns the byte position of a specified string in the input string.">
                        <complex-attribute name="sql"><![CDATA[
  SELECT POSITION($2::bytea IN $1::bytea);
]]></complex-attribute>
                        <category _I_D="8396cf56-82f8-4709-8e5d-ce53365ac88f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="19d993e5-2953-48c5-b329-6cd7ee72b876" name="is_package_initialized" subcategories-loading="none" object-loading="extended" context="is_package_initialized" is-trigger-function="0" unique-function-name="is_package_initialized" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="bool" function-arguments="schema_name text, package_name text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304498" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name text, package_name text" overload-function-count="1" proc-language="plpgsql" function-signature="is_package_initialized(schema_name text, package_name text)" comment="&amp;#x000a; Checks a flag for the migrated package that it has already been initialized in the current session, &amp;#x000a; to prevent a re-execution for the initialization function.&amp;#x000a; &amp;#x000a; Parameters:&amp;#x000a;  schema_name -- migrated schema&amp;#x000a;  package_name -- migrated package&amp;#x000a;">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    RETURN aws_oracle_ext.get_package_variable
    (
        schema_name => is_package_initialized.schema_name,
        package_name => is_package_initialized.package_name,
        variable_name => 'Init$$'
    )::BOOLEAN;

EXCEPTION
    WHEN OTHERS THEN

        RETURN FALSE;

END;
]]></complex-attribute>
                        <category _I_D="82430369-e2f7-41db-825c-f01695c936f1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b90e9cb9-6c8c-431b-8b13-5c120fdde642" name="isopen" subcategories-loading="none" object-loading="extended" context="isopen" is-trigger-function="0" unique-function-name="isopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="bool" function-arguments="p_cursor_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305101" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="isopen(p_cursor_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  RETURN EXISTS(SELECT 1 FROM pg_cursors WHERE name = lower(p_cursor_name));
END;
]]></complex-attribute>
                        <category _I_D="97d330ca-02d4-4f21-8bba-76050a919728" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="51e58765-37fe-4758-84f6-c32e07c8410c" name="json_set_by_path" subcategories-loading="none" object-loading="extended" context="json_set_by_path" is-trigger-function="0" unique-function-name="json_set_by_path" is-aggregate="f" language-name="plpgsql" arguments-datatypes="jsonb,text,anyelement" is-returning-set="f" ret-datatype="jsonb" function-arguments="src jsonb, ppath text, pvalue anyelement" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305272" volatility="IMMUTABLE" is-window="f" function-identity-arguments="src jsonb, ppath text, pvalue anyelement" overload-function-count="1" proc-language="plpgsql" function-signature="json_set_by_path(src jsonb, ppath text, pvalue anyelement)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    pathParts TEXT[];
    valuetype TEXT;
    vres JSONB;
    vpart TEXT;
    vdatatype TEXT;
    vproxy JSONB;
    vleaf JSONB;
BEGIN

    SELECT JSONB_TYPEOF
    (
        JSONB_BUILD_OBJECT
        (
            'tst',
            pvalue
        ) -> 'tst'
    )
    INTO valuetype;

    pathParts := REGEXP_SPLIT_TO_ARRAY
    (
        REPLACE
        (
            REPLACE
            (
                ppath,
                '[',
                '.'
            ),
            ']',
            ''
        ),
        '\.'
    );



    SELECT
        CASE
            WHEN pt.typtype = 'b' THEN
                'base'
            ELSE
                'udt'
        END
    INTO vdatatype
    FROM pg_type pt
    WHERE pt.oid = PG_TYPEOF(pvalue); 

    IF NOT FOUND THEN

        vdatatype := 'udt';

    END IF;

    -- simple case
    IF CARDINALITY(pathParts) = 2 THEN

        IF vdatatype = 'base' THEN

            vres := JSONB_BUILD_OBJECT
            (
                'column_value',
                TO_JSONB(pvalue)
            );

        ELSE

            SELECT TO_JSONB(z)
            INTO vres
            FROM JSONB_POPULATE_RECORD
            (
                pvalue,
                TO_JSONB(pvalue)
            ) z;

        END IF;

        RETURN vres;

    END IF;

    IF vdatatype = 'base' THEN

        IF valuetype = 'null' THEN

            vproxy := 'null'::JSONB;
        
        ELSE
        
            vproxy := TO_JSONB(pvalue);

        END IF;

    ELSE

        SELECT TO_JSONB(z)
        INTO vproxy
        FROM JSONB_POPULATE_RECORD
        (
            pvalue,
            TO_JSONB(pvalue)
        ) z;

    END IF;
        
    FOR i IN REVERSE CARDINALITY(pathParts)..3 LOOP

        vleaf := src #> pathParts[3:i-1];
        vres := JSONB_SET
        (
            CASE
                WHEN vleaf IS NOT NULL AND JSONB_TYPEOF(vleaf) = 'object' THEN
                    vleaf
                ELSE
                    '{}'::JSONB
                END,
            ARRAY[pathParts[i]],
            CASE
                WHEN i = CARDINALITY(pathParts) THEN
                    vproxy
                ELSE
                    vres
            END
        );

    END LOOP;

    RETURN src || vres;

END;
]]></complex-attribute>
                        <category _I_D="1bc1b304-6dda-4461-80cd-f970f7be82c7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d0e1d839-0e58-42ee-910d-0e98ddb12e5f" name="last_day" subcategories-loading="none" object-loading="extended" context="last_day(pdate date)" is-trigger-function="0" unique-function-name="last_day(pdate date)" is-aggregate="f" language-name="sql" arguments-datatypes="date" is-returning-set="f" ret-datatype="date" function-arguments="pdate date" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304499" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pdate date" overload-function-count="3" proc-language="sql" function-signature="last_day(pdate date)" unique-suffix="(pdate date)" routine-number="304499">
                        <complex-attribute name="sql"><![CDATA[

    SELECT (
        DATE_TRUNC('month', pDate) +'1month'::INTERVAL - '1 day'::INTERVAL
    )::DATE;

]]></complex-attribute>
                        <category _I_D="c57c5d7a-e1e1-4150-9b3d-45d6adccc76c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="df9e9ed0-3571-47b6-abb5-83cb41b793f7" name="last_day" subcategories-loading="none" object-loading="extended" context="last_day(pdate timestamp with time zone)" is-trigger-function="0" unique-function-name="last_day(pdate timestamp with time zone)" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp with time zone" is-returning-set="f" ret-datatype="timestamptz" function-arguments="pdate timestamp with time zone" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304501" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pdate timestamp with time zone" overload-function-count="3" proc-language="sql" function-signature="last_day(pdate timestamp with time zone)" unique-suffix="(pdate timestamp with time zone)" routine-number="304501">
                        <complex-attribute name="sql"><![CDATA[
  
    SELECT MAKE_TIMESTAMPTZ
    (
        EXTRACT('YEAR' FROM pDate)::INT,
        EXTRACT('MONTH' FROM pDate)::INT,
        EXTRACT('DAY' FROM (DATE_TRUNC('MONTH', pDate) +'1MONTH'::INTERVAL -'1 DAY'::INTERVAL))::INT,
        EXTRACT('HOUR' FROM PDATE)::INT,
        EXTRACT('MIN' FROM PDATE)::INT,
        EXTRACT('SEC' FROM PDATE)
    );

]]></complex-attribute>
                        <category _I_D="f1765db0-2208-49c7-a4e3-44ea97aafbba" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4cf65bfb-f078-43d5-8104-9693c1afe7b2" name="last_day" subcategories-loading="none" object-loading="extended" context="last_day(pdate timestamp without time zone)" is-trigger-function="0" unique-function-name="last_day(pdate timestamp without time zone)" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone" is-returning-set="f" ret-datatype="timestamp" function-arguments="pdate timestamp without time zone" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304500" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pdate timestamp without time zone" overload-function-count="3" proc-language="sql" function-signature="last_day(pdate timestamp without time zone)" unique-suffix="(pdate timestamp without time zone)" routine-number="304500">
                        <complex-attribute name="sql"><![CDATA[

    SELECT MAKE_TIMESTAMP
    (
        EXTRACT('YEAR' FROM pDate)::INT,
        EXTRACT('MONTH' FROM pDate)::INT,
        EXTRACT('DAY' FROM (DATE_TRUNC('MONTH', pDate) + '1MONTH'::INTERVAL - '1 DAY'::INTERVAL))::INT,
        EXTRACT('HOUR' FROM pDate)::INT,
        EXTRACT('MIN' FROM pDate)::INT,
        EXTRACT('SEC' FROM pDate)
    );

]]></complex-attribute>
                        <category _I_D="4abef562-f6b9-4677-a458-c21f08071eef" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8fb58231-dbc9-462d-98dc-6dc985cbc7f4" name="least" subcategories-loading="none" object-loading="extended" context="least" is-trigger-function="0" unique-function-name="least" is-aggregate="f" language-name="sql" arguments-datatypes="anyarray" is-returning-set="f" ret-datatype="anyelement" function-arguments="VARIADIC anyarray" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305267" volatility="VOLATILE" is-window="f" function-identity-arguments="VARIADIC anyarray" overload-function-count="1" proc-language="sql" function-signature="least(VARIADIC anyarray)">
                        <complex-attribute name="sql"><![CDATA[
  SELECT unnest($1)
  ORDER BY 1 ASC NULLS FIRST
  LIMIT 1;
]]></complex-attribute>
                        <category _I_D="ccec363a-d368-48b2-8fa4-c79644ed9886" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="310f8f44-680d-46b6-a961-0c8a15f82082" name="limit" subcategories-loading="none" object-loading="extended" context="limit" is-trigger-function="0" unique-function-name="limit" is-aggregate="f" language-name="sql" arguments-datatypes="anyelement" is-returning-set="f" ret-datatype="int4" function-arguments="parray anyelement" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304503" volatility="STABLE" is-window="f" function-identity-arguments="parray anyelement" overload-function-count="1" proc-language="sql" function-signature="limit(parray anyelement)" comment="Implements Oracle Collection method limit">
                        <complex-attribute name="sql"><![CDATA[
    /*the function is depricated. collection_%METHOD_NAME% has to be used instead*/
    SELECT
    COALESCE
    (
        SUBSTRING(SUBSTRING(pg_get_constraintdef(pc.oid) FROM '<=\s*\d+') FROM '\d+')::INTEGER,
        SUBSTRING(SUBSTRING(pg_get_constraintdef(pc.oid) FROM '<\s*\d+') FROM '\d+')::INTEGER - 1
    )
    FROM pg_constraint pc
    JOIN pg_type pt ON pt.oid = pc.contypid
    WHERE pt.typname = SUBSTRING(PG_TYPEOF(parray)::TEXT FROM POSITION('.' IN PG_TYPEOF(parray)::TEXT) + 1)
    AND pt.typcategory = 'A'
    AND pt.typtype = 'd'
    AND pc.conname LIKE '%_lim';

]]></complex-attribute>
                        <category _I_D="2095b27e-f377-4afd-a7b4-1411ac9160a0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d34c83e5-9324-4167-bbf6-810c04242fae" name="lnnvl" subcategories-loading="none" object-loading="extended" context="lnnvl" is-trigger-function="0" unique-function-name="lnnvl" is-aggregate="f" language-name="sql" arguments-datatypes="boolean" is-returning-set="f" ret-datatype="bool" function-arguments="boolean" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304603" volatility="IMMUTABLE" is-window="f" function-identity-arguments="boolean" overload-function-count="1" proc-language="sql" function-signature="lnnvl(boolean)" comment="Evaluates if a value is false or unknown">
                        <complex-attribute name="sql"><![CDATA[
SELECT NOT COALESCE($1, FALSE::BOOL)
/*
CASE $1
  WHEN FALSE THEN TRUE::BOOL
  WHEN TRUE THEN FALSE::BOOL
  ELSE TRUE::BOOL --NULL
END
*/
]]></complex-attribute>
                        <category _I_D="8da25c90-9e6f-4978-aa64-1e1aa96a9b24" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="edc469c1-d6e3-49b1-9fa3-8ae008129d74" name="localtimestamp" subcategories-loading="none" object-loading="extended" context="localtimestamp" is-trigger-function="0" unique-function-name="localtimestamp" is-aggregate="f" language-name="sql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="timestamp" function-arguments="p_precision integer DEFAULT 6" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304504" volatility="STABLE" is-window="f" function-identity-arguments="p_precision integer" overload-function-count="1" proc-language="sql" function-signature="localtimestamp(p_precision integer)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT 
    CASE
    
        WHEN p_precision = 0 THEN LOCALTIMESTAMP(0)
        WHEN p_precision = 1 THEN LOCALTIMESTAMP(1)
        WHEN p_precision = 2 THEN LOCALTIMESTAMP(3)
        WHEN p_precision = 4 THEN LOCALTIMESTAMP(4)
        WHEN p_precision = 5 THEN LOCALTIMESTAMP(5)

        ELSE LOCALTIMESTAMP

    END;
    
]]></complex-attribute>
                        <category _I_D="3126b243-017d-4965-8128-89e4d3f026df" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7a453009-3eee-4b3b-9975-cc57775e7c41" name="months_between" subcategories-loading="none" object-loading="extended" context="months_between" is-trigger-function="0" unique-function-name="months_between" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone,timestamp without time zone" is-returning-set="f" ret-datatype="numeric" function-arguments="enddate1 timestamp without time zone, startdate2 timestamp without time zone" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304505" volatility="IMMUTABLE" is-window="f" function-identity-arguments="enddate1 timestamp without time zone, startdate2 timestamp without time zone" overload-function-count="1" proc-language="sql" function-signature="months_between(enddate1 timestamp without time zone, startdate2 timestamp without time zone)">
                        <complex-attribute name="sql"><![CDATA[

SELECT
    CASE
        WHEN DATE_TRUNC('DAY', $1) = DATE_TRUNC('DAY', $2) THEN
        
            0::NUMERIC

        WHEN EXTRACT(DAY FROM $1) = EXTRACT(DAY FROM $2) THEN

            ROUND
            (
                EXTRACT(YEARS FROM AGE($1, $2)) * 12 +
                EXTRACT(MONTHS FROM AGE($1, $2))  +
                EXTRACT(DAYS FROM AGE($1, $2)) /31 +
                EXTRACT(HOURS FROM AGE($1, $2)) /31 /24 +
                EXTRACT(SECONDS FROM AGE($1, $2)) /86400 /31
            )::NUMERIC

        WHEN DATE_TRUNC('DAY', aws_oracle_ext.last_day($1)) = DATE_TRUNC('DAY', $1) AND
            DATE_TRUNC('DAY', aws_oracle_ext.last_day($2)) = DATE_TRUNC('DAY', $2) THEN

            FLOOR
            (
                EXTRACT(YEARS FROM AGE($1, $2)) * 12 +
                EXTRACT(MONTHS FROM AGE($1, $2))  +
                EXTRACT(DAYS FROM AGE($1, $2)) /31 +
                EXTRACT(HOURS FROM AGE($1, $2)) /31 /24 +
                EXTRACT(SECONDS FROM AGE($1, $2)) /86400 /31
            )::NUMERIC

        ELSE

            (
                EXTRACT(YEARS FROM AGE($1, $2)) * 12 +
                EXTRACT(MONTHS FROM AGE($1, $2))  +
                EXTRACT(DAYS FROM AGE($1, $2)) /31 +
                EXTRACT(HOURS FROM AGE($1, $2)) /31 /24 +
                EXTRACT(SECONDS FROM AGE($1, $2)) /86400 /31
            )::NUMERIC

    END;

]]></complex-attribute>
                        <category _I_D="460dfc70-c847-4276-94f7-0f74f60d1395" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="773c64a3-6027-4873-9616-5c41bef44daf" name="multiset_operator" subcategories-loading="none" object-loading="extended" context="multiset_operator" is-trigger-function="0" unique-function-name="multiset_operator" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,anyelement,text,text,boolean" is-returning-set="f" ret-datatype="text" function-arguments="poperator text, pfirsttable text, psecondtable text, pcollectiontype anyelement, pmode text DEFAULT 'ALL'::text, pstoreto text DEFAULT NULL::text, pisglobal boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="7" function-id="304506" volatility="VOLATILE" is-window="f" function-identity-arguments="poperator text, pfirsttable text, psecondtable text, pcollectiontype anyelement, pmode text, pstoreto text, pisglobal boolean" overload-function-count="1" proc-language="plpgsql" function-signature="multiset_operator(poperator text, pfirsttable text, psecondtable text, pcollectiontype anyelement, pmode text, pstoreto text, pisglobal boolean)" comment="Emulates MULTISET OPERATORS for Nested tables. Please, note collection members order (differs from Oracle)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vSQL VARCHAR;
	vResultTable TEXT;
	vType VARCHAR;
    vFirstStorageTable VARCHAR;
    vSecondStorageTable VARCHAR;
    vResultStorageTable VARCHAR;

BEGIN

	vType := PG_TYPEOF(pCollectionType)::text;
	
    IF pIsGlobal THEN

        PERFORM aws_oracle_ext.array$copy
        (
            p_source_param_name => pFirstTable::JSONB ->> 'Array Name',
            p_source_procedure_name => pFirstTable::JSONB ->> 'Procedure Name',
            p_dest_param_name => 'ml1$'||(pFirstTable::JSONB ->> 'Array Name'),
            p_dest_procedure_name => pFirstTable::JSONB ->> 'Procedure Name'
        );

        PERFORM aws_oracle_ext.array$copy
        (
            p_source_param_name => pSecondTable::JSONB ->> 'Array Name',
            p_source_procedure_name => pSecondTable::JSONB ->> 'Procedure Name',
            p_dest_param_name => 'ml2$'||(pSecondTable::JSONB ->> 'Array Name'),
            p_dest_procedure_name => pSecondTable::JSONB ->> 'Procedure Name'
        );

        PERFORM aws_oracle_ext.array$create_storage_table
        (
            p_array_name => 'ml1$'||(pFirstTable::JSONB ->> 'Array Name'),
            p_procedure_name => pFirstTable::JSONB ->> 'Procedure Name',
            p_cast_type_name => vType
        );

        PERFORM aws_oracle_ext.array$create_storage_table
        (
            p_array_name => 'ml2$'||(pSecondTable::JSONB ->> 'Array Name'),
            p_procedure_name => pSecondTable::JSONB ->> 'Procedure Name',
            p_cast_type_name => vType
        );

        vFirstStorageTable := aws_oracle_ext.array$get_storage_table_name
        (
            --pFirstTable::JSONB ->> 'Array Name',
            p_array_path_without_indexes => 'ml1$'||(pFirstTable::JSONB ->> 'Array Name'),
            p_procedure_name => pFirstTable::JSONB ->> 'Procedure Name'
        );

        vSecondStorageTable := aws_oracle_ext.array$get_storage_table_name
        (
            --pSecondTable::JSONB ->> 'Array Name',
            p_array_path_without_indexes => 'ml2$'||(pSecondTable::JSONB ->> 'Array Name'),
            p_procedure_name => pSecondTable::JSONB ->> 'Procedure Name'
        );

        vResultStorageTable := aws_oracle_ext.array$get_storage_table_name
        (
            pStoreTo::JSONB ->> 'Array Name',
            pStoreTo::JSONB ->> 'Procedure Name'
        );

        IF vFirstStorageTable IS NULL OR
            vSecondStorageTable IS NULL OR
            vResultStorageTable IS NULL THEN

            RAISE USING MESSAGE := 'STG';

        END IF;

        vSql := CONCAT
        (
            'TRUNCATE TABLE ',
            vResultStorageTable
        );

        EXECUTE vSql;

        vSql := CONCAT
        (
            'ALTER SEQUENCE aws_oracle_ext$sq_',
            vResultStorageTable,
            ' RESTART WITH 1'
        );

        EXECUTE vSql;


        vSQL := CONCAT
        (
            'INSERT INTO ',
            vResultStorageTable,
            '(record_body)',
            CHR(10),
            'SELECT ROW_TO_JSON(mltst) FROM ('
            'SELECT f.* FROM ',
            vFirstStorageTable,
            ' CROSS JOIN LATERAL JSONB_POPULATE_RECORD(NULL::',
            vType,
            ', record_body) f',
            CHR(10),
            pOperator,
            ' ',
            pMode,
            CHR(10),
            'SELECT s.* FROM ',
            vSecondStorageTable,
            ' CROSS JOIN LATERAL JSONB_POPULATE_RECORD(NULL::',
            vType,
            ', record_body) s',
            CHR(10),
            ') mltst'
        );

        EXECUTE vSQL;

        PERFORM aws_oracle_ext.array$drop
        (
            p_array_name => 'ml1$'||(pFirstTable::JSONB ->> 'Array Name'),
            p_procedure_name => pFirstTable::JSONB ->> 'Procedure Name'
        );

        PERFORM aws_oracle_ext.array$drop
        (
            p_array_name => 'ml2$'||(pSecondTable::JSONB ->> 'Array Name'),
            p_procedure_name => pSecondTable::JSONB ->> 'Procedure Name'
        );

    ELSE
	
        vSQL := CONCAT(
            'SELECT ARRAY(',
            CHR(10),
            'SELECT UNNEST(CAST($1 '|| 'AS '||vType||'))',
            CHR(10),
            pOperator,
            ' ',
            pMode,
            CHR(10),
            'SELECT UNNEST(CAST ($2 AS '||vType||'))',
            CHR(10),
            ')::TExt'
        );

        EXECUTE vSQL USING pFirstTable, pSecondTable INTO vResultTable;

    END IF;

    RETURN vResultTable;
END;
]]></complex-attribute>
                        <category _I_D="db228bcf-8ad8-4d11-9300-069807c72864" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c9aa647d-028e-46d6-af73-0c1d4f288a24" name="nanvl" subcategories-loading="none" object-loading="extended" context="nanvl(double precision, character varying)" is-trigger-function="0" unique-function-name="nanvl(double precision, character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="double precision,character varying" is-returning-set="f" ret-datatype="float8" function-arguments="double precision, character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304605" volatility="IMMUTABLE" is-window="f" function-identity-arguments="double precision, character varying" overload-function-count="6" proc-language="sql" function-signature="nanvl(double precision, character varying)" unique-suffix="(double precision, character varying)" routine-number="304605" comment="Returns a substitute value when a value is not a number (NaN)">
                        <complex-attribute name="sql"><![CDATA[ SELECT CASE WHEN $1 = 'NaN' THEN $2::FLOAT8 ELSE $1 END; ]]></complex-attribute>
                        <category _I_D="1aebf959-41bf-4a11-b091-45994d38fb8c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6a14c726-2f44-4002-937e-f221540a5b6c" name="nanvl" subcategories-loading="none" object-loading="extended" context="nanvl(double precision, double precision)" is-trigger-function="0" unique-function-name="nanvl(double precision, double precision)" is-aggregate="f" language-name="sql" arguments-datatypes="double precision,double precision" is-returning-set="f" ret-datatype="float8" function-arguments="double precision, double precision" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304608" volatility="IMMUTABLE" is-window="f" function-identity-arguments="double precision, double precision" overload-function-count="6" proc-language="sql" function-signature="nanvl(double precision, double precision)" unique-suffix="(double precision, double precision)" routine-number="304608" comment="Returns a substitute value when a value is not a number (NaN)">
                        <complex-attribute name="sql"><![CDATA[ SELECT CASE WHEN $1 = 'NaN' THEN $2 ELSE $1 END; ]]></complex-attribute>
                        <category _I_D="0564ea46-38c0-4dca-96ef-b429ecbe2f12" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3a1a4fc4-6bad-4c89-8608-f5b3007a7ace" name="nanvl" subcategories-loading="none" object-loading="extended" context="nanvl(numeric, character varying)" is-trigger-function="0" unique-function-name="nanvl(numeric, character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="numeric,character varying" is-returning-set="f" ret-datatype="numeric" function-arguments="numeric, character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304604" volatility="IMMUTABLE" is-window="f" function-identity-arguments="numeric, character varying" overload-function-count="6" proc-language="sql" function-signature="nanvl(numeric, character varying)" unique-suffix="(numeric, character varying)" routine-number="304604" comment="Returns a substitute value when a value is not a number (NaN)">
                        <complex-attribute name="sql"><![CDATA[ SELECT CASE WHEN $1 = 'NaN' THEN $2::NUMERIC ELSE $1 END; ]]></complex-attribute>
                        <category _I_D="dea513dd-93d9-498d-a95a-7874fa98032b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="47ced177-cd32-4309-b9ea-6381dacff068" name="nanvl" subcategories-loading="none" object-loading="extended" context="nanvl(numeric, numeric)" is-trigger-function="0" unique-function-name="nanvl(numeric, numeric)" is-aggregate="f" language-name="sql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="numeric" function-arguments="numeric, numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304607" volatility="IMMUTABLE" is-window="f" function-identity-arguments="numeric, numeric" overload-function-count="6" proc-language="sql" function-signature="nanvl(numeric, numeric)" unique-suffix="(numeric, numeric)" routine-number="304607" comment="Returns a substitute value when a value is not a number (NaN)">
                        <complex-attribute name="sql"><![CDATA[ SELECT CASE WHEN $1 = 'NaN' THEN $2 ELSE $1 END; ]]></complex-attribute>
                        <category _I_D="671e6e7e-e37d-4f7d-b5ae-aa001779b325" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6adb9235-09f2-4358-9164-30925658ecdf" name="nanvl" subcategories-loading="none" object-loading="extended" context="nanvl(real, character varying)" is-trigger-function="0" unique-function-name="nanvl(real, character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="real,character varying" is-returning-set="f" ret-datatype="float4" function-arguments="real, character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304606" volatility="IMMUTABLE" is-window="f" function-identity-arguments="real, character varying" overload-function-count="6" proc-language="sql" function-signature="nanvl(real, character varying)" unique-suffix="(real, character varying)" routine-number="304606" comment="Returns a substitute value when a value is not a number (NaN)">
                        <complex-attribute name="sql"><![CDATA[ SELECT CASE WHEN $1 = 'NaN' THEN $2::FLOAT4 ELSE $1 END; ]]></complex-attribute>
                        <category _I_D="e66a0750-71a7-47b2-9ba3-3b93735f76cf" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="90e23d71-d468-419f-9968-758031cd9211" name="nanvl" subcategories-loading="none" object-loading="extended" context="nanvl(real, real)" is-trigger-function="0" unique-function-name="nanvl(real, real)" is-aggregate="f" language-name="sql" arguments-datatypes="real,real" is-returning-set="f" ret-datatype="float4" function-arguments="real, real" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304609" volatility="IMMUTABLE" is-window="f" function-identity-arguments="real, real" overload-function-count="6" proc-language="sql" function-signature="nanvl(real, real)" unique-suffix="(real, real)" routine-number="304609" comment="Returns a substitute value when a value is not a number (NaN)">
                        <complex-attribute name="sql"><![CDATA[ SELECT CASE WHEN $1 = 'NaN' THEN $2 ELSE $1 END; ]]></complex-attribute>
                        <category _I_D="a2f145d2-469c-4fa6-b645-68f3657576fd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="43d7aa86-adb0-476e-b961-df2366df3744" name="nested_table$add_fields_to_array" subcategories-loading="none" object-loading="extended" context="nested_table$add_fields_to_array" is-trigger-function="0" unique-function-name="nested_table$add_fields_to_array" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bigint,text" is-returning-set="f" ret-datatype="void" function-arguments="p_array_id bigint, p_fields text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304064" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_array_id bigint, p_fields text" overload-function-count="1" proc-language="plpgsql" function-signature="nested_table$add_fields_to_array(p_array_id bigint, p_fields text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
END;
]]></complex-attribute>
                        <category _I_D="7c74f66e-85b4-41ce-baa7-230219b8fd22" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cc22a3ab-ca18-4c28-9544-6db8996e7f4e" name="nested_table$assign" subcategories-loading="none" object-loading="extended" context="nested_table$assign" is-trigger-function="0" unique-function-name="nested_table$assign" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304083" volatility="VOLATILE" is-window="f" function-identity-arguments="p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying" overload-function-count="1" proc-language="plv8" function-signature="nested_table$assign(p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const chk = plv8.find_function("aws_oracle_ext.collectioncheck");
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");

const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");
let pathParts = parser(p_source_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const srcsn = pathParts[0].text;
const srcp = pathParts[2].text;
const srccol = caseCheck(p_source_param_name);
chk(srcsn, srcp, srccol);

pathParts = parser(p_dest_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
    
const dtssn = pathParts[0].text;
const dstp = pathParts[2].text;

const dstcol = caseCheck(p_dest_param_name);
chk(dtssn, dstp, dstcol);

aws_oracle_ext[dtssn][dstp][dstcol] = aws_oracle_ext[srcsn][srcp][srccol].clone();


]]></complex-attribute>
                        <category _I_D="17561cc6-d9a2-457d-a8c5-a721bd632570" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9e0a07fd-17cf-41be-978e-045589d73da2" name="nested_table$clear_procedure" subcategories-loading="none" object-loading="extended" context="nested_table$clear_procedure" is-trigger-function="0" unique-function-name="nested_table$clear_procedure" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304082" volatility="VOLATILE" is-window="f" function-identity-arguments="p_procedure_name character varying" overload-function-count="1" proc-language="sql" function-signature="nested_table$clear_procedure(p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT aws_oracle_ext.collections_delete_by_routine
    (
        p_routine_name => p_procedure_name
    );
]]></complex-attribute>
                        <category _I_D="301ee83a-7f10-4555-a526-62a319545995" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4909204a-8476-4ad7-b01a-211959b34cc4" name="nested_table$count" subcategories-loading="none" object-loading="extended" context="nested_table$count" is-trigger-function="0" unique-function-name="nested_table$count" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="int8" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304065" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="1" proc-language="sql" function-signature="nested_table$count(p_array_path character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT aws_oracle_ext.collection_count
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path
    );
]]></complex-attribute>
                        <category _I_D="d2c010d4-3377-4592-ba19-99d7ae745392" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1b778c95-74d2-482d-ba87-6922c1a85ae9" name="nested_table$create_array" subcategories-loading="none" object-loading="extended" context="nested_table$create_array" is-trigger-function="0" unique-function-name="nested_table$create_array" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,bigint" is-returning-set="f" ret-datatype="int8" function-arguments="p_array_name character varying, p_procedure_name character varying, p_parent_array_id bigint DEFAULT NULL::bigint" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304063" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_name character varying, p_procedure_name character varying, p_parent_array_id bigint" overload-function-count="1" proc-language="plv8" function-signature="nested_table$create_array(p_array_name character varying, p_procedure_name character varying, p_parent_array_id bigint)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");
const pathParts = parser(p_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;
const indexBy = 'BIGINT';
const tree = new Tree(52);
tree.indexBy = indexBy;
tree.collectionType = 'NT';

if (typeof(aws_oracle_ext) === 'undefined') aws_oracle_ext = {};
if (!aws_oracle_ext.hasOwnProperty(sn)) aws_oracle_ext[sn] = {};
if (!aws_oracle_ext[sn].hasOwnProperty(pn)) aws_oracle_ext[sn][pn] = {};

aws_oracle_ext[sn][pn][caseCheck(p_array_name)] = tree;

return -1;

]]></complex-attribute>
                        <category _I_D="f18a1aaf-1ae2-408d-b30f-55dd1e1c9e1b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8f0ada53-050f-4bc5-8097-37d9a2f03078" name="nested_table$create_storage_table" subcategories-loading="none" object-loading="extended" context="nested_table$create_storage_table" is-trigger-function="0" unique-function-name="nested_table$create_storage_table" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,character varying,boolean" is-returning-set="f" ret-datatype="void" function-arguments="p_array_name character varying, p_procedure_name character varying, p_cast_type_name character varying, pwithdata boolean DEFAULT true" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304066" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_name character varying, p_procedure_name character varying, p_cast_type_name character varying, pwithdata boolean" overload-function-count="1" proc-language="plv8" function-signature="nested_table$create_storage_table(p_array_name character varying, p_procedure_name character varying, p_cast_type_name character varying, pwithdata boolean)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");
const pathParts = parser(p_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;
const chk = plv8.find_function("aws_oracle_ext.collectioncheck");
const srccol = caseCheck(p_array_name);
chk(sn, pn, srccol);
aws_oracle_ext[sn][pn][srccol].rowType = p_cast_type_name;

]]></complex-attribute>
                        <category _I_D="ce9dc6cc-7026-422d-b0aa-4c8de0022048" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c9edee60-a9f3-4a7d-8574-e5ab0b0e9b2d" name="nested_table$delete" subcategories-loading="none" object-loading="extended" context="nested_table$delete(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="nested_table$delete(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304068" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying" overload-function-count="3" proc-language="sql" function-signature="nested_table$delete(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)" routine-number="304068">
                        <complex-attribute name="sql"><![CDATA[
    SELECT aws_oracle_ext.collection_element_delete
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_start => p_array_key
    );
]]></complex-attribute>
                        <category _I_D="6aa9bce1-a1ed-47df-b8b3-fac564cc0293" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="37a11c69-c6ef-4d93-bc2f-f93faa836dc0" name="nested_table$delete" subcategories-loading="none" object-loading="extended" context="nested_table$delete(p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="nested_table$delete(p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304069" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying" overload-function-count="3" proc-language="sql" function-signature="nested_table$delete(p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying)" routine-number="304069">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_element_delete
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_start => p_array_key_from,
        p_end => p_array_key_until
    );

]]></complex-attribute>
                        <category _I_D="66510a61-7e4b-4fa9-a005-0958b754e208" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0eac39f0-b6c6-4a72-b4a7-95e41e291f10" name="nested_table$delete" subcategories-loading="none" object-loading="extended" context="nested_table$delete(p_array_path character varying, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="nested_table$delete(p_array_path character varying, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304067" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="3" proc-language="sql" function-signature="nested_table$delete(p_array_path character varying, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_procedure_name character varying)" routine-number="304067">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_element_delete
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path
    );
]]></complex-attribute>
                        <category _I_D="2841202f-d443-4889-9581-a67bbf85bfdc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0084413d-3236-4d2f-9072-942270ee1f54" name="nested_table$exists" subcategories-loading="none" object-loading="extended" context="nested_table$exists" is-trigger-function="0" unique-function-name="nested_table$exists" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying" is-returning-set="f" ret-datatype="bool" function-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304070" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying" overload-function-count="1" proc-language="sql" function-signature="nested_table$exists(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT aws_oracle_ext.collection_element_exists
	(
		p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_idx => p_array_key
	);

]]></complex-attribute>
                        <category _I_D="8fe6197c-7db1-4d91-95e1-1a7e76a45ca1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6b60e697-a679-4d66-95b5-48206a7bd388" name="nested_table$extend" subcategories-loading="none" object-loading="extended" context="nested_table$extend(p_array_path character varying, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="nested_table$extend(p_array_path character varying, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304073" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="3" proc-language="sql" function-signature="nested_table$extend(p_array_path character varying, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_procedure_name character varying)" routine-number="304073">
                        <complex-attribute name="sql"><![CDATA[
SELECT aws_oracle_ext.nested_table$extend
(
    p_array_path,
    NULL,
    NULL,
    p_procedure_name
);
]]></complex-attribute>
                        <category _I_D="db648eca-7cd5-40cc-adcd-b396bbf94eeb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="897dc950-beec-4abc-8dce-76dedcbc7164" name="nested_table$extend" subcategories-loading="none" object-loading="extended" context="nested_table$extend(p_array_path character varying, p_quantity_of_elements bigint, p_element_for_copy bigint, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="nested_table$extend(p_array_path character varying, p_quantity_of_elements bigint, p_element_for_copy bigint, p_procedure_name character varying)" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,bigint,bigint,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_quantity_of_elements bigint, p_element_for_copy bigint, p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304071" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_quantity_of_elements bigint, p_element_for_copy bigint, p_procedure_name character varying" overload-function-count="3" proc-language="plv8" function-signature="nested_table$extend(p_array_path character varying, p_quantity_of_elements bigint, p_element_for_copy bigint, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_quantity_of_elements bigint, p_element_for_copy bigint, p_procedure_name character varying)" routine-number="304071">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

pathParts = parser(p_array_path);
const pathlength = pathParts.length;
if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}
const vn = pathParts[0].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");
chk(sn, pn, vn);

const errorMessage = `PLS-00306: wrong number or types of arguments in call to 'EXTEND'`;

if (aws_oracle_ext[sn][pn][vn] != null) {
  if (aws_oracle_ext[sn][pn][vn].collectionType !== 'NT') {
    plv8.elog(ERROR, errorMessage);
  }
}

const quantity = p_quantity_of_elements === null ? 1 : Number(p_quantity_of_elements);
if (isNaN(quantity)) {
  plv8.elog(ERROR, errorMessage);
}

const srcIdx = p_element_for_copy === null ? null : Number(p_element_for_copy);

if ( srcIdx !== null &&  isNaN(srcIdx)) {
  plv8.elog(ERROR, errorMessage);
}

let fillValue = null;

if (srcIdx !== null) {
  fillValue = aws_oracle_ext[sn][pn][vn].getValue(srcIdx);
  if (typeof(fillValue) === 'undefined') {
    plv8.elog(ERROR, `ORA-06533: Subscript beyond count`);
  }
  if (typeof(fillValue) === 'object' && fillValue == emptyCollectionElement) {
    plv8.elog(ERROR, `ORA-01403: no data found`);
  }
}

let lastIdx = 0;
const cnt = aws_oracle_ext[sn][pn][vn].count();
if (cnt > 0 ) {
  aws_oracle_ext[sn][pn][vn].walkDesc(null,null, function(key, value){
    lastIdx = key;
    return true;
  });
}

for (let i = 1; i<= quantity; i++) {
  lastIdx++;
  aws_oracle_ext[sn][pn][vn].putValue(lastIdx, fillValue);  
}

]]></complex-attribute>
                        <category _I_D="24e79dcb-5348-49ce-bed8-5fd53a4ce3a1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="11f97ab7-b0e1-4094-9db3-3e48eff0a8b7" name="nested_table$extend" subcategories-loading="none" object-loading="extended" context="nested_table$extend(p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="nested_table$extend(p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,bigint,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304072" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying" overload-function-count="3" proc-language="sql" function-signature="nested_table$extend(p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying)" routine-number="304072">
                        <complex-attribute name="sql"><![CDATA[
SELECT aws_oracle_ext.nested_table$extend
(
    p_array_path,
    p_quantity_of_elements,
    NULL,
    p_procedure_name
);
]]></complex-attribute>
                        <category _I_D="a69b9e3c-141e-4e98-af44-6c328b4b5ad6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c9267972-a191-4317-b864-4fca1952862c" name="nested_table$first" subcategories-loading="none" object-loading="extended" context="nested_table$first" is-trigger-function="0" unique-function-name="nested_table$first" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_path character varying, p_procedure_name character varying, p_def anyelement DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304074" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying, p_def anyelement" overload-function-count="1" proc-language="sql" function-signature="nested_table$first(p_array_path character varying, p_procedure_name character varying, p_def anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_first
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_tp => p_def
    );

]]></complex-attribute>
                        <category _I_D="f5d2c813-05f8-4f71-b060-9f5be60a570b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="13c42755-1f76-4b4b-95ec-f58da3ba0d6e" name="nested_table$get_value" subcategories-loading="none" object-loading="extended" context="nested_table$get_value" is-trigger-function="0" unique-function-name="nested_table$get_value" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_value_path character varying, p_procedure_name character varying, p_value_datatype anyelement DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304075" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_value_path character varying, p_procedure_name character varying, p_value_datatype anyelement" overload-function-count="1" proc-language="plpgsql" function-signature="nested_table$get_value(p_array_value_path character varying, p_procedure_name character varying, p_value_datatype anyelement)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vret JSONB;
BEGIN

    vret := aws_oracle_ext.collection_element_get
	(
		p_routine_name => p_procedure_name,
        p_collection_path => p_array_value_path
	);

    IF vret IS NULL THEN

        RAISE NO_DATA_FOUND;

    END IF;

    RETURN JSONB_POPULATE_RECORD
    (
        p_value_datatype,
        vret
    );

END;
]]></complex-attribute>
                        <category _I_D="c0505f5e-f704-4b05-b8b2-c13e7a12dd96" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="10885434-2f04-449e-92aa-2b569d05b6a7" name="nested_table$is_null" subcategories-loading="none" object-loading="extended" context="nested_table$is_null" is-trigger-function="0" unique-function-name="nested_table$is_null" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="bool" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304085" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="1" proc-language="plv8" function-signature="nested_table$is_null(p_array_path character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot')
  plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_array_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);

const collectionType = aws_oracle_ext[sn][pn][vn] === null ? 'NT' : aws_oracle_ext[sn][pn][vn].collectionType;

if (collectionType === 'ASSOC') {
  plv8.elog(ERROR, 'Incorrect collection type');
}

return aws_oracle_ext[sn][pn][vn] === null;

]]></complex-attribute>
                        <category _I_D="ba096ea1-e4be-4f1d-bd0a-9762239e7c3b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4d8b5d8c-fce0-4365-93c1-b1c5e2183041" name="nested_table$last" subcategories-loading="none" object-loading="extended" context="nested_table$last" is-trigger-function="0" unique-function-name="nested_table$last" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_path character varying, p_procedure_name character varying, p_def anyelement DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304076" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying, p_def anyelement" overload-function-count="1" proc-language="sql" function-signature="nested_table$last(p_array_path character varying, p_procedure_name character varying, p_def anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_last
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_tp => p_def
    );

]]></complex-attribute>
                        <category _I_D="033c6ca0-2657-4dea-a9d8-07ea2c50b7ce" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="630ccec7-8ae9-46c5-bee6-1958de73641d" name="nested_table$next" subcategories-loading="none" object-loading="extended" context="nested_table$next" is-trigger-function="0" unique-function-name="nested_table$next" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304077" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement" overload-function-count="1" proc-language="sql" function-signature="nested_table$next(p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_next
	(
		p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_idx => p_array_key,
        p_tp => p_def
	);

]]></complex-attribute>
                        <category _I_D="99b20f79-791f-4250-9b46-f907d4daaad0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1f89ee57-02d1-4ffb-baf9-f8a3a1e32dc6" name="nested_table$prior" subcategories-loading="none" object-loading="extended" context="nested_table$prior" is-trigger-function="0" unique-function-name="nested_table$prior" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304078" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement" overload-function-count="1" proc-language="sql" function-signature="nested_table$prior(p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_prior
	(
		p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_idx => p_array_key,
        p_tp => p_def
	);

]]></complex-attribute>
                        <category _I_D="ad7c4884-6257-498c-bbc1-9bed823a7a5a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0ea8309a-a750-4154-9e74-8246deddfd9c" name="nested_table$set_null" subcategories-loading="none" object-loading="extended" context="nested_table$set_null" is-trigger-function="0" unique-function-name="nested_table$set_null" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304084" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="1" proc-language="plv8" function-signature="nested_table$set_null(p_array_path character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_array_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);

const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;

if (collectionType === 'ASSOC') {
  plv8.elog(ERROR, 'Incorrect collection type');
}

aws_oracle_ext[sn][pn][vn] = null;

]]></complex-attribute>
                        <category _I_D="b14a3397-a1ee-4c47-925d-fc72ff361c83" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="353533f7-d44b-485a-b99c-fbc5e926988c" name="nested_table$set_value" subcategories-loading="none" object-loading="extended" context="nested_table$set_value" is-trigger-function="0" unique-function-name="nested_table$set_value" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,anyelement" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_procedure_name character varying, p_value anyelement" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304079" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying, p_value anyelement" overload-function-count="1" proc-language="sql" function-signature="nested_table$set_value(p_array_path character varying, p_procedure_name character varying, p_value anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_element_set
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_val => p_value
    );

]]></complex-attribute>
                        <category _I_D="381c9e7b-e7d4-473e-beb2-792790983c86" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="11de5eea-4501-4e4d-8f09-2b5be15739b8" name="nested_table$trim" subcategories-loading="none" object-loading="extended" context="nested_table$trim(p_array_path character varying, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="nested_table$trim(p_array_path character varying, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304081" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="2" proc-language="sql" function-signature="nested_table$trim(p_array_path character varying, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_procedure_name character varying)" routine-number="304081">
                        <complex-attribute name="sql"><![CDATA[
SELECT aws_oracle_ext.collection_element_trim
(
    p_routine_name => p_procedure_name,
    p_collection_path => p_array_path,
    p_n => 1
);
]]></complex-attribute>
                        <category _I_D="a3d4e146-a77d-4285-90e9-bf30a026d4f2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ecd85820-f445-4a62-b006-0629622f031a" name="nested_table$trim" subcategories-loading="none" object-loading="extended" context="nested_table$trim(p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="nested_table$trim(p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,bigint,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304080" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying" overload-function-count="2" proc-language="sql" function-signature="nested_table$trim(p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying)" routine-number="304080">
                        <complex-attribute name="sql"><![CDATA[
SELECT aws_oracle_ext.collection_element_trim
(
    p_routine_name => p_procedure_name,
    p_collection_path => p_array_path,
    p_n => p_quantity_of_elements
);
]]></complex-attribute>
                        <category _I_D="38c3db9d-a01b-421e-9248-8d544f9023be" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2f35e4cf-e2b2-4fe5-893e-362ba93430d7" name="next" subcategories-loading="none" object-loading="extended" context="next" is-trigger-function="0" unique-function-name="next" is-aggregate="f" language-name="sql" arguments-datatypes="anyarray,integer" is-returning-set="f" ret-datatype="int4" function-arguments="pcollection anyarray, n integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304507" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pcollection anyarray, n integer" overload-function-count="1" proc-language="sql" function-signature="next(pcollection anyarray, n integer)">
                        <complex-attribute name="sql"><![CDATA[  
    /*the function is depricated. collection_%METHOD_NAME% has to be used instead*/
    SELECT
        CASE
            WHEN COALESCE(ARRAY_LENGTH(pcollection, 1), 0) = 0 THEN
                NULL
            WHEN n >= ARRAY_LENGTH(pcollection, 1) THEN
                NULL
            WHEN n < 1 THEN
                1::INT
            ELSE 
                n + 1
        END;

]]></complex-attribute>
                        <category _I_D="9f6d7bfc-41c5-4e17-851d-67e5e50e5a70" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5149e987-e456-4ff0-8677-dd01656ae450" name="next_day" subcategories-loading="none" object-loading="extended" context="next_day" is-trigger-function="0" unique-function-name="next_day" is-aggregate="f" language-name="plv8" arguments-datatypes="timestamp without time zone,text" is-returning-set="f" ret-datatype="timestamp" function-arguments="ddate timestamp without time zone, cchar text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304111" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ddate timestamp without time zone, cchar text" overload-function-count="1" proc-language="plv8" function-signature="next_day(ddate timestamp without time zone, cchar text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
   const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
   initColl();
 }
 let dnum;
 const weekdays = ['Mon', 'Tue', 'WED', 'THU', 'FRI', 'SAT', 'SUN'];
 for (let i=0; i < 7; i++) {
  let re = RegExp(weekdays[i], "i");
  if (re.test(cchar)) dnum = i + 1;
 }
 const dn = ddate.getDay();
 const odn = dn == 0 ? 7 : dn + 1;
 const off = odn > dnum ? 7 + dnum - odn + 1 : dnum - odn + 1;
 return new Date(ddate.getTime() + (off*24*60*60*1000));
]]></complex-attribute>
                        <category _I_D="b0fe3856-1e8e-41e6-adfb-66c6ab51a9b0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="90d52d02-36b6-4673-8b8f-0414a24aecf4" name="nls_parameters_init" subcategories-loading="none" object-loading="extended" context="nls_parameters_init" is-trigger-function="0" unique-function-name="nls_parameters_init" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean" is-returning-set="f" ret-datatype="void" function-arguments="pterritory text DEFAULT NULL::text, precalc boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304370" volatility="VOLATILE" is-window="f" function-identity-arguments="pterritory text, precalc boolean" overload-function-count="1" proc-language="plpgsql" function-signature="nls_parameters_init(pterritory text, precalc boolean)" comment="Set some NLS session parameters on first to_char/to_date/to_number call">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vNlsTerritory TEXT;
    vctype TEXT;
    rec RECORD;
    vrecalc BOOLEAN DEFAULT FALSE;
BEGIN
    
    IF precalc THEN

        vrecalc := TRUE;

    ELSE

        vrecalc := CASE WHEN COALESCE(UPPER(aws_oracle_ext.get_extpack_variable(variable_name => 'RECALCNLS', missing_ok => TRUE)), 'TRUE') <> 'TRUE' THEN FALSE ELSE TRUE END;

    END IF;
    
    IF vrecalc THEN

        IF pterritory IS NULL THEN

            SELECT SPLIT_PART(pd.datctype::TEXT, '.', 1)
            INTO vctype
            FROM pg_database pd
            WHERE pd.datname = CURRENT_DATABASE();

            SELECT ap.nls_territory
            INTO vNlsTerritory
            FROM aws_oracle_ext.nls_parameters ap
            WHERE ap.pg_territory_ux = vctype
            ORDER BY 1
            LIMIT 1;

            IF NOT FOUND THEN

                vNlsTerritory := 'AMERICA';

            END IF;
        ELSE

            SELECT ap.nls_territory
            INTO vNlsTerritory
            FROM aws_oracle_ext.nls_parameters ap
            WHERE ap.nls_territory = pterritory;

            IF NOT FOUND THEN

                vNlsTerritory := 'AMERICA';

            END IF;

        END IF;
        
        FOR rec IN
        (
            SELECT anp.nls_territory,
                anp.params_dictionary ->> 'NLS_CURRENCY' AS NLS_CURRENCY,
                anp.params_dictionary ->> 'NLS_ISO_CURRENCY' AS NLS_ISO_CURRENCY,
                anp.params_dictionary ->> 'NLS_DATE_FORMAT' AS NLS_DATE_FORMAT,
                anp.params_dictionary ->> 'NLS_DUAL_CURRENCY' AS NLS_DUAL_CURRENCY,
                anp.params_dictionary ->> 'NLS_NUMERIC_CHARACTERS' AS NLS_NUMERIC_CHARACTERS,
                anp.params_dictionary ->> 'NLS_CALENDAR' AS nls_calendar,
                anp.params_dictionary ->> 'NLS_CHARACTERSET' AS nls_characterset,
                anp.params_dictionary ->> 'NLS_COMP' AS nls_comp,
                anp.params_dictionary ->> 'NLS_DATE_LANGUAGE' AS nls_date_language,
                anp.params_dictionary ->> 'NLS_LANGUAGE' AS nls_language,
                anp.params_dictionary ->> 'NLS_LENGTH_SEMANTICS' AS nls_length_semantics,
                anp.params_dictionary ->> 'NLS_NCHAR_CHARACTERSET' AS nls_nchar_characterset,
                anp.params_dictionary ->> 'NLS_NCHAR_CONV_EXCP' AS nls_nchar_conv_excp,
                anp.params_dictionary ->> 'NLS_SORT' AS nls_sort,
                anp.params_dictionary ->> 'NLS_TERRITORY' AS nls_territory,
                anp.params_dictionary ->> 'NLS_TIMESTAMP_FORMAT' AS nls_timestamp_format,
                anp.params_dictionary ->> 'NLS_TIMESTAMP_TZ_FORMAT' AS nls_timestamp_tz_format,
                anp.params_dictionary ->> 'NLS_TIME_FORMAT' AS nls_time_format,
                anp.params_dictionary ->> 'NLS_TIME_TZ_FORMAT' AS nls_time_tz_format

            FROM aws_oracle_ext.nls_parameters anp
            WHERE anp.nls_territory = vNlsTerritory
        )
        LOOP

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_TERRITORY',
                variable_value => rec.nls_territory::TEXT
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_CURRENCY',
                variable_value => rec.nls_currency::TEXT
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_ISO_CURRENCY',
                variable_value => rec.nls_iso_currency::TEXT
            );
            
            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_DATE_FORMAT',
                variable_value => rec.nls_date_format::TEXT
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_DUAL_CURRENCY',
                variable_value => rec.nls_dual_currency::TEXT
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_NUMERIC_CHARACTERS',
                variable_value => rec.nls_numeric_characters::TEXT
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_CALENDAR',
                variable_value => rec.nls_calendar
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_CHARACTERSET',
                variable_value => rec.nls_characterset
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_COMP',
                variable_value => rec.nls_comp
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_DATE_LANGUAGE',
                variable_value => rec.nls_date_language
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_LANGUAGE',
                variable_value => rec.nls_language
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_LENGTH_SEMANTICS',
                variable_value => rec.nls_length_semantics
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_NCHAR_CHARACTERSET',
                variable_value => rec.nls_nchar_characterset
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_NCHAR_CONV_EXCP',
                variable_value => rec.nls_nchar_conv_excp
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_SORT',
                variable_value => rec.nls_sort
            );
            
            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_TERRITORY',
                variable_value => rec.nls_territory
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_TIMESTAMP_FORMAT',
                variable_value => rec.nls_timestamp_format
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_TIMESTAMP_TZ_FORMAT',
                variable_value => rec.nls_timestamp_tz_format
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_TIME_FORMAT',
                variable_value => rec.nls_timestamp_tz_format
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_TIME_TZ_FORMAT',
                variable_value => rec.nls_timestamp_tz_format
            );

        END LOOP;

    PERFORM aws_oracle_ext.set_package_variable
    (
        variable_name => 'RECALCNLS',
        variable_value => FALSE::TEXT
    );

    END IF;

END;

]]></complex-attribute>
                        <category _I_D="d1e6ca7c-a229-4f10-ab16-5078858d9e31" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0c34dee2-254e-4c38-8104-5b65fbc133a4" name="number_limit_correct" subcategories-loading="none" object-loading="extended" context="number_limit_correct" is-trigger-function="0" unique-function-name="number_limit_correct" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="numeric" function-arguments="pval numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304508" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pval numeric" overload-function-count="1" proc-language="plpgsql" function-signature="number_limit_correct(pval numeric)" comment="Check if value is in range for Oracle Number">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    IF pVal < -1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    OR pVal > 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    THEN

        RAISE USING MESSAGE := 'ORA-01426: numeric overflow', HINT := '-01426';

    END IF;

    RETURN pVal;
    
END;
]]></complex-attribute>
                        <category _I_D="c07dbfc6-8555-4b77-b966-6f80f2ec405b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="19f2ef6c-d8c2-4371-b84f-c73814cbaeb2" name="owa$init_cgi_env" subcategories-loading="none" object-loading="extended" context="owa$init_cgi_env" is-trigger-function="0" unique-function-name="owa$init_cgi_env" is-aggregate="f" language-name="plpgsql" arguments-datatypes="json" is-returning-set="f" ret-datatype="void" function-arguments="pparams json" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304626" volatility="VOLATILE" is-window="f" function-identity-arguments="pparams json" overload-function-count="1" proc-language="plpgsql" function-signature="owa$init_cgi_env(pparams json)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    CREATE TEMPORARY TABLE IF NOT EXISTS aws_cgi_env
    (
        id BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        cgi_var_name TEXT NULL,
        cgi_var_val TEXT NULL,
        CONSTRAINT ht_headers_pk PRIMARY KEY (id)
    );

    TRUNCATE TABLE aws_cgi_env;

    INSERT INTO aws_cgi_env(cgi_var_name, cgi_var_val)
    SELECT * FROM JSON_EACH_TEXT(pParams);

    INSERT INTO aws_cgi_env(cgi_var_name, cgi_var_val)
    VALUES ('REMOTE_USER', CURRENT_SCHEMA());


END;
]]></complex-attribute>
                        <category _I_D="c28e2d00-0af6-4d68-8be5-7872ad18aae7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1637e971-30fb-4932-9e0b-03cd8843c15e" name="owa_cookie$get" subcategories-loading="none" object-loading="extended" context="owa_cookie$get" is-trigger-function="0" unique-function-name="owa_cookie$get" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="json" function-arguments="name text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304632" volatility="VOLATILE" is-window="f" function-identity-arguments="name text" overload-function-count="1" proc-language="plpgsql" function-signature="owa_cookie$get(name text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    http_cookie TEXT;
    vResult JSON;
BEGIN

    http_cookie := aws_oracle_ext.owa_util$get_cgi_env('HTTP_COOKIE');

    TRUNCATE TABLE aws_cgi_cookie;

    IF LENGTH(COALESCE(TRIM(http_cookie),'')) <> 0 THEN

        INSERT INTO aws_cgi_cookie(cookie_name, cookie_val)
        SELECT
            SUBSTR
            (
                LTRIM(v),
                1,
                STRPOS
                (
                    LTRIM(v),
                    '='
                ) - 1
            ),
            SUBSTR
            (
                LTRIM(v),
                STRPOS(LTRIM(v), '=') + 1
            )
        FROM REGEXP_SPLIT_TO_TABLE(SUBSTR(http_cookie, 1, LENGTH(http_cookie) - 1), ';') v;

    END IF;

    SELECT JSON_BUILD_OBJECT
    (
        'name', cookie_name
        ,
        'vals', vals
        ,
        'num_vals', num_vals
    )
    INTO vResult
    FROM
    (
        SELECT cookie_name,
            COUNT(cookie_val_id) AS num_vals,
        ARRAY_AGG(cookie_val) AS vals
        FROM aws_cgi_cookie 
        WHERE cookie_name = name
        GROUP BY cookie_name
    ) z;

    IF vResult IS NULL THEN

        vResult := JSON_BUILD_OBJECT
        (
            'name', name
            ,
            'num_vals', 0
        );

    END IF;


    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="e96172a3-e36d-430e-8002-1b76a76eeae6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c0adcef1-aefa-4d7a-bcc9-88ebd98192bb" name="owa_cookie$send" subcategories-loading="none" object-loading="extended" context="owa_cookie$send" is-trigger-function="0" unique-function-name="owa_cookie$send" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,timestamp without time zone,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="name text, value text, expires timestamp without time zone DEFAULT NULL::timestamp without time zone, path text DEFAULT NULL::text, domain text DEFAULT NULL::text, secure text DEFAULT NULL::text, httponly text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="7" function-id="304633" volatility="VOLATILE" is-window="f" function-identity-arguments="name text, value text, expires timestamp without time zone, path text, domain text, secure text, httponly text" overload-function-count="1" proc-language="plpgsql" function-signature="owa_cookie$send(name text, value text, expires timestamp without time zone, path text, domain text, secure text, httponly text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$print
    (
        CONCAT
        (
            'Set-Cookie: ',
            name,
            '=',
            value,
            ';',
            CASE
                WHEN expires IS NOT NULL THEN
                    CONCAT(' expires=', aws_oracle_ext.to_char(expires, 'DD-Mon-YYYY HH24:MI:SS', 'NLS_DATE_LANGUAGE=en_US'), ';')
                ELSE
                    ''
            END,
            CASE
                WHEN path IS NOT NULL THEN
                    CONCAT(' path=', path, ';')
                ELSE
                    ''
            END,
            CASE
                WHEN domain IS NOT NULL THEN
                    CONCAT(' domain=', domain, ';')
                ELSE
                    ''
            END,
            CASE
                WHEN secure IS NOT NULL THEN
                    ' secure;'
                ELSE
                    ''
            END,
            CASE
                WHEN httponly IS NOT NULL THEN
                    ' HttpOnly'
                ELSE
                    ''
            END
        )
    );

END;
]]></complex-attribute>
                        <category _I_D="ca7b80ae-73f8-4b61-a0d6-05a0977298bf" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a5803359-bb22-4a4b-95bf-14c9906d2b8b" name="owa_util$get_cgi_env" subcategories-loading="none" object-loading="extended" context="owa_util$get_cgi_env" is-trigger-function="0" unique-function-name="owa_util$get_cgi_env" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="param_name text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304629" volatility="VOLATILE" is-window="f" function-identity-arguments="param_name text" overload-function-count="1" proc-language="plpgsql" function-signature="owa_util$get_cgi_env(param_name text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult TEXT;
BEGIN

    SELECT cgi_var_val
    INTO vResult
    FROM aws_cgi_env
    WHERE UPPER(cgi_var_name) = UPPER(param_name)
    ORDER BY id
    LIMIT 1;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="7c36685a-ff26-4c0e-85c2-388940198a11" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="950c9078-dd87-430f-98fb-f5cb0041c042" name="owa_util$get_owa_service_path" subcategories-loading="none" object-loading="extended" context="owa_util$get_owa_service_path" is-trigger-function="0" unique-function-name="owa_util$get_owa_service_path" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304630" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="owa_util$get_owa_service_path()">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    script_name TEXT;
BEGIN

    script_name := aws_oracle_ext.owa_util$get_cgi_env('SCRIPT_NAME');

    script_name := CONCAT
    (
        script_name,
        CASE
            WHEN SUBSTR(script_name,-1) = '/' then
                ''
            ELSE
                '/'
        END
    );
    
    RETURN script_name;

END;
]]></complex-attribute>
                        <category _I_D="31909be6-9831-434c-96f9-b7b716e26ca1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9057fe92-b5d8-4e36-8c8e-9c63ee976026" name="owa_util$http_header_close" subcategories-loading="none" object-loading="extended" context="owa_util$http_header_close" is-trigger-function="0" unique-function-name="owa_util$http_header_close" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304889" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="owa_util$http_header_close()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$prn(E'\n');
    
END;
]]></complex-attribute>
                        <category _I_D="860d27ce-2ba0-4a8b-ba30-b672ee43c79c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f20f918c-cf2f-4382-a7f5-0e723fe4c4a6" name="owa_util$mime_header" subcategories-loading="none" object-loading="extended" context="owa_util$mime_header" is-trigger-function="0" unique-function-name="owa_util$mime_header" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean,text" is-returning-set="f" ret-datatype="void" function-arguments="ccontent_type text DEFAULT 'text/html'::text, bclose_header boolean DEFAULT true, ccharset text DEFAULT 'MaGiC_KeY'::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304888" volatility="VOLATILE" is-window="f" function-identity-arguments="ccontent_type text, bclose_header boolean, ccharset text" overload-function-count="1" proc-language="plpgsql" function-signature="owa_util$mime_header(ccontent_type text, bclose_header boolean, ccharset text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    charset VARCHAR(40);
BEGIN

    IF ccharset = 'MaGiC_KeY' THEN

        IF UPPER(ccontent_type) LIKE 'TEXT%' THEN

            charset := aws_oracle_ext.owa_util$get_cgi_env('REQUEST_IANA_CHARSET');
            
            IF charset IS NULL THEN
               
                PERFORM aws_oracle_ext.htp$prn
                (
                    CONCAT
                    (
                        'Content-type: ',
                        ccontent_type,
                        E'\n'
                    )
                );

            ELSE

                PERFORM aws_oracle_ext.htp$prn
                (
                    CONCAT
                    (
                        'Content-type: ',
                        ccontent_type,
                        '; charset=',
                        charset,
                        E'\n'
                    )
                );

            END IF;

         ELSE

            PERFORM aws_oracle_ext.htp$prn
            (
                CONCAT
                (
                    'Content-type: ',
                    ccontent_type,
                    E'\n'
                )
            );

        END IF;

    ELSE
         
         IF charset IS NULL THEN

            PERFORM aws_oracle_ext.htp$prn
            (
                CONCAT
                (
                    'Content-type: ',
                    ccontent_type,
                    E'\n'
                )
            );

         ELSE
            
            PERFORM aws_oracle_ext.htp$prn
            (
                CONCAT
                (
                    'Content-type: ',
                    ccontent_type,
                    '; charset=',
                    charset,
                    E'\n'
                )
            );

         END IF;

    END IF;

    IF bclose_header THEN

        PERFORM aws_oracle_ext.owa_util$http_header_close();

    END IF;

END;
]]></complex-attribute>
                        <category _I_D="f5a852ca-8037-499e-aa9f-86393e6eed2f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a668464c-f130-42cc-9a29-f8d6c7dff8b1" name="owa_util$print_cgi_env" subcategories-loading="none" object-loading="extended" context="owa_util$print_cgi_env" is-trigger-function="0" unique-function-name="owa_util$print_cgi_env" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304628" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="owa_util$print_cgi_env()">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    rec RECORD;
BEGIN

    FOR rec IN
    (
        SELECT cgi_var_name,
            cgi_var_val
        FROM aws_cgi_env
        ORDER BY id
    ) LOOP
        
        PERFORM aws_oracle_ext.htp$print
        (
            CONCAT
            (
                rec.cgi_var_name,
                ' = ',
                rec.cgi_var_val,
                aws_oracle_ext.htf$nl()
            )
        );

    END LOOP;
    
END;
]]></complex-attribute>
                        <category _I_D="a27ee97c-d0a2-4613-a749-f7dd0fba5679" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f6dbdf3c-8ccd-4480-903a-90d9218b3e3d" name="owa_util$redirect_url" subcategories-loading="none" object-loading="extended" context="owa_util$redirect_url" is-trigger-function="0" unique-function-name="owa_util$redirect_url" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean" is-returning-set="f" ret-datatype="void" function-arguments="curl text, bclose_header boolean DEFAULT true" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304631" volatility="VOLATILE" is-window="f" function-identity-arguments="curl text, bclose_header boolean" overload-function-count="1" proc-language="plpgsql" function-signature="owa_util$redirect_url(curl text, bclose_header boolean)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.owa_util$status_line
    (
        nstatus      => 302,
        bclose_header => FALSE
    );
    
    PERFORM aws_oracle_ext.htp$prn
    (
        CONCAT
        (
            'Location: ',
            curl,
            E'\n'
        )
    );

    IF bclose_header THEN

        PERFORM aws_oracle_ext.owa_util$http_header_close();

    END IF;

END;
]]></complex-attribute>
                        <category _I_D="6c8ec81e-1279-4ab9-8e96-e288a30348f6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5ee71a09-4091-4821-8052-decc0a219f0f" name="owa_util$status_line" subcategories-loading="none" object-loading="extended" context="owa_util$status_line" is-trigger-function="0" unique-function-name="owa_util$status_line" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text,boolean" is-returning-set="f" ret-datatype="void" function-arguments="nstatus numeric, creason text DEFAULT NULL::text, bclose_header boolean DEFAULT true" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304627" volatility="VOLATILE" is-window="f" function-identity-arguments="nstatus numeric, creason text, bclose_header boolean" overload-function-count="1" proc-language="plpgsql" function-signature="owa_util$status_line(nstatus numeric, creason text, bclose_header boolean)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$prn
    (
        CONCAT
        (
            'Status: ',
            nstatus,
            ' ',
            creason,
            E'\n'
        )
    );

    IF (bclose_header) THEN
        
        PERFORM aws_oracle_ext.owa_util$http_header_close();

    END IF;
    
END;
]]></complex-attribute>
                        <category _I_D="f527f279-b785-45ce-88d0-f21dfad9bcb6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1f0e401e-c5f6-44f0-916d-6e2d0933bdf3" name="owa_wrapper" subcategories-loading="none" object-loading="extended" context="owa_wrapper" is-trigger-function="0" unique-function-name="owa_wrapper" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,json" is-returning-set="f" ret-datatype="void" function-arguments="proutinepath text, pparams json" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304891" volatility="VOLATILE" is-window="f" function-identity-arguments="proutinepath text, pparams json" overload-function-count="1" proc-language="plpgsql" function-signature="owa_wrapper(proutinepath text, pparams json)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vSchema TEXT;
    vRoutineName TEXT;
    vRarray TEXT[];
    vStatusCode SMALLINT DEFAULT 404;
    vStatusDescription TEXT;
    vRoutineExists SMALLINT DEFAULT 0;
    rec RECORD;
    vParamsPassed TEXT[];
    vParamsExpected TEXT[];
    vSQL TEXT;
    vDefaults JSONB;
    vArgs TEXT;
BEGIN

    vRarray := REGEXP_SPLIT_TO_ARRAY(pRoutinePath, '\.');

    IF ARRAY_LENGTH(vRarray, 1) = 1 THEN

        vSchema := CURRENT_SCHEMA();
        vRoutineName := vRarray[1];

    ELSE

        vSchema := vRarray[1];

        vRoutineName := ARRAY_TO_STRING(ARRAY_REMOVE(vRarray, vSchema), '');

    END IF;

    IF vSchema IS NOT NULL THEN

        SELECT COUNT(*)
        INTO vRoutineExists
        FROM pg_proc p
        JOIN pg_namespace n ON p.pronamespace = n.oid
        WHERE n.nspname = TRIM(LOWER(vSchema))
        AND p.proname = TRIM(LOWER(vRoutineName));

    END IF;

    IF vRoutineExists = 1 THEN

        SELECT COALESCE(
            ARRAY_AGG(V),
            ARRAY[]::TEXT[]
        )
        INTO vParamsPassed
        FROM JSON_OBJECT_KEYS(pParams) AS v;

        <<procsearch>>
        FOR rec IN
        (
            SElECT p.oid,
                p.proname,
                p.proargnames,
                p.pronargdefaults,
                p.proargtypes
            FROM pg_proc p
            JOIN pg_namespace n ON p.pronamespace = n.oid
            WHERE n.nspname = TRIM(LOWER(vSchema))
            AND p.proname = TRIM(LOWER(vRoutineName))
        )
        LOOP

            CASE
                
                WHEN rec.proargnames IS NULL AND vParamsPassed = ARRAY[]::TEXT[] THEN

                    vArgs := '';

                WHEN rec.pronargdefaults > 0 AND vParamsPassed <@ rec.proargnames AND rec.proargnames IS NOT NULL THEN

                    FOR i IN 1..ARRAY_LENGTH(rec.proargnames, 1) LOOP

                        IF NOT pParams::JSONB ? rec.proargnames[i]
                            AND PG_GET_FUNCTION_ARG_DEFAULT(rec.oid, i) IS NULL THEN

                            RAISE SQLSTATE '42883';

                        END IF;

                        vArgs := CONCAT(
                            vArgs,
                            rec.proargnames[i],
                            ' => ',
                            CASE
                                WHEN pParams::JSONB ? rec.proargnames[i] THEN
                                    CONCAT(
                                        CASE WHEN rec.proargtypes[i - 1] <> 701 AND LENGTH(COALESCE(pParams->rec.proargnames[i]->>0, '')) <> 0 THEN E'\'' ELSE '' END,
                                        CASE WHEN LENGTH(COALESCE(pParams->rec.proargnames[i]->>0, '')) = 0 THEN 'NULL' ELSE pParams->rec.proargnames[i]->>0 END,
                                        CASE WHEN rec.proargtypes[i - 1] <> 701 AND LENGTH(COALESCE(pParams->rec.proargnames[i]->>0, '')) <> 0 THEN E'\'' ELSE '' END,
                                        '::',
                                        CASE WHEN rec.proargtypes[i - 1] = 701 THEN 'DOUBLE PRECISION' ELSE 'TEXT' END      
                                    )
                                ELSE
                                    PG_GET_FUNCTION_ARG_DEFAULT(rec.oid, i)
                            END,
                            CASE WHEN i = ARRAY_LENGTH(rec.proargnames, 1) THEN '' ELSE ',' END
                        );

                    END LOOP;

                WHEN rec.pronargdefaults = 0 AND 
                    (JSONB_ARRAY_LENGTH(TO_JSONB(vParamsPassed)) = ARRAY_LENGTH(rec.proargnames, 1)) AND
                    TO_JSONB(vParamsPassed) ?& rec.proargnames THEN

                    FOR i IN 1..ARRAY_LENGTH(rec.proargnames, 1) LOOP

                        vArgs := CONCAT(
                            vArgs,
                            rec.proargnames[i],
                            ' => ',
                            CASE WHEN rec.proargtypes[i - 1] <> 701 THEN E'\'' ELSE '' END,
                            pParams->rec.proargnames[i]->>0,
                            CASE WHEN rec.proargtypes[i - 1] <> 701 THEN E'\'' ELSE '' END,
                            '::',
                            CASE WHEN rec.proargtypes[i - 1] = 701 THEN 'DOUBLE PRECISION' ELSE 'TEXT' END,
                            CASE WHEN i = ARRAY_LENGTH(rec.proargnames, 1) THEN '' ELSE ',' END
                        );

                    END LOOP;

                ELSE

                    CONTINUE procsearch;

            END CASE;

        END LOOP procsearch;

        IF vArgs IS NOT NULL THEN

            vSQL := CONCAT(
                'SELECT ',
                TRIM(LOWER(vSchema)),
                '.',
                TRIM(LOWER(vRoutineName)),
                '(',
                vArgs,
                ')'
            );

        END IF;

        IF vSQL IS NULL THEN

            RAISE SQLSTATE '42883';

        ELSE

            EXECUTE vSQL;

        END IF;

    ELSE
        
        RAISE SQLSTATE '42883';

    END IF;

EXCEPTION
    
    WHEN SQLSTATE '42883' THEN
        
        PERFORM aws_oracle_ext.owa_util$status_line(404);
        
END;
]]></complex-attribute>
                        <category _I_D="dadbea1b-946e-41d9-9536-b38e02f603a5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0335854c-61e2-43fc-8681-5c24cf6c7a6a" name="packageinitialize" subcategories-loading="none" object-loading="extended" context="packageinitialize" is-trigger-function="0" unique-function-name="packageinitialize" is-aggregate="f" language-name="plv8" arguments-datatypes="text,boolean" is-returning-set="f" ret-datatype="bool" function-arguments="proutinename text, pforce boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304093" volatility="VOLATILE" is-window="f" function-identity-arguments="proutinename text, pforce boolean" overload-function-count="1" proc-language="plv8" function-signature="packageinitialize(proutinename text, pforce boolean)">
                        <complex-attribute name="sql"><![CDATA[
'use strict';
  if (typeof(require) !== 'function') {
    const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
    initColl();
  }
  const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
  let parts = parser(proutinename);
  if (parts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
  const sn = parts[0].text;
  const pn = parts[2].text;
  let doInit = false;
  if (pforce) {
    let curMask = sn.charAt(0) === '"' ? sn.substring(1) : sn;
    curMask = sn.charAt(0) === '"' ? curMask.slice(0, -1) : curMask;
    curMask += '$';
    curMask += pn.charAt(0) === '"' ? pn.substring(1) : pn;
    curMask = pn.charAt(0) === '"' ? curMask.slice(0, -1) : curMask;
    const cursors = plv8.execute(`
SELECT pc.name FROM pg_catalog.pg_cursors pc where name like '%$${curMask}$%'
`);
    for (let i = 0; i < cursors.length; i++) {
      try{
        plv8.subtransaction(function(){
          plv8.execute(`CLOSE ${cursors[i].name}`);
        });
      } catch(e) {
      }
    }
    if (typeof(aws_oracle_ext) !== 'undefined') {
     if (aws_oracle_ext.hasOwnProperty(sn)) {
        delete aws_oracle_ext[sn][pn];
      }
    }
    return doInit;
  }
  if (typeof(aws_oracle_ext) === 'undefined') {
  aws_oracle_ext = {};
    doInit = true;
  }
  if (!aws_oracle_ext.hasOwnProperty(sn)) {
    aws_oracle_ext[sn] = {};
    doInit = true;
  }
  if (!aws_oracle_ext[sn].hasOwnProperty(pn)) {
    aws_oracle_ext[sn][pn] = {};
    doInit = true;
  }

  if (!aws_oracle_ext[sn][pn].hasOwnProperty('Init$$')) doInit = true;
  
  if (doInit) aws_oracle_ext[sn][pn]['Init$$'] = true;
  return doInit;


]]></complex-attribute>
                        <category _I_D="354c334c-4516-42f7-beb8-6bc8837a7d55" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f2b7017b-f12b-47a0-ad6c-3b96860dbd55" name="plv8_require" subcategories-loading="none" object-loading="extended" context="plv8_require" is-trigger-function="0" unique-function-name="plv8_require" is-aggregate="f" language-name="plv8" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304024" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plv8" function-signature="plv8_require()">
                        <complex-attribute name="sql"><![CDATA[
moduleCache = {};

load = function(key, source) {
  var module = {exports: {}};
  eval("(function(module, exports) {" + source + "; })")(module, module.exports);
      
  // store in cache
  moduleCache[key] = module.exports;
  return module.exports;
};

require = function(module) {
  if(moduleCache[module]) return moduleCache[module];

  var rows = plv8.execute(
      "select source from aws_oracle_ext.plv8_js_modules where module = $1", 
      [module]
  );

  if(rows.length === 0) {
    plv8.elog(NOTICE, 'Could not load module: ' + module);
    return null;
  }

  return load(module, rows[0].source);
};

// Grab modules worth auto-loading at context start and let them cache
var query = 'select module, source from aws_oracle_ext.plv8_js_modules where autoload = true';
plv8.execute(query).forEach(function(row) {
  load(row.module, row.source);
});

TreeUtility = require('TreeUtility');
Tree = require('Tree');
Object.prototype.clone=TreeUtility.clone;
emptyCollectionElement = Object.freeze(Object.create(null));
aws_oracle_ext = {};

]]></complex-attribute>
                        <category _I_D="35b3f729-ab27-45cc-9b2b-7b497652860c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1c41a992-df47-49bd-b637-00209d8b25a0" name="prior" subcategories-loading="none" object-loading="extended" context="prior" is-trigger-function="0" unique-function-name="prior" is-aggregate="f" language-name="sql" arguments-datatypes="anyarray,integer" is-returning-set="f" ret-datatype="int4" function-arguments="pcollection anyarray, n integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304509" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pcollection anyarray, n integer" overload-function-count="1" proc-language="sql" function-signature="prior(pcollection anyarray, n integer)">
                        <complex-attribute name="sql"><![CDATA[  
    /*the function is depricated. collection_%METHOD_NAME% has to be used instead*/
    SELECT
        CASE
            WHEN n < 2 OR COALESCE(ARRAY_LENGTH(pcollection, 1), 0) = 0 THEN
                NULL
            WHEN n > ARRAY_LENGTH(pcollection, 1) THEN
                ARRAY_LENGTH(pcollection, 1)
            ELSE
                n - 1
        END;

]]></complex-attribute>
                        <category _I_D="e81a34a9-aec7-41e6-80c1-d0ae2519aceb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b399c508-f698-4cad-b82a-6a77c0f8a80b" name="record_to_json" subcategories-loading="none" object-loading="extended" context="record_to_json" is-trigger-function="0" unique-function-name="record_to_json" is-aggregate="f" language-name="sql" arguments-datatypes="anyelement" is-returning-set="f" ret-datatype="json" function-arguments="anyelement" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305350" volatility="IMMUTABLE" is-window="f" function-identity-arguments="anyelement" overload-function-count="1" proc-language="sql" function-signature="record_to_json(anyelement)">
                        <complex-attribute name="sql"><![CDATA[
SELECT ROW_TO_JSON(z.*)
        FROM JSON_POPULATE_RECORD
        (
            $1,
            TO_JSON($1)
        ) z;
]]></complex-attribute>
                        <category _I_D="aa0b5ef4-a3c8-4fb4-869e-e7359fe225f5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2131f9e6-7ced-492b-8777-203a71938187" name="record_to_jsonb" subcategories-loading="none" object-loading="extended" context="record_to_jsonb" is-trigger-function="0" unique-function-name="record_to_jsonb" is-aggregate="f" language-name="sql" arguments-datatypes="anyelement" is-returning-set="f" ret-datatype="jsonb" function-arguments="anyelement" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305275" volatility="IMMUTABLE" is-window="f" function-identity-arguments="anyelement" overload-function-count="1" proc-language="sql" function-signature="record_to_jsonb(anyelement)">
                        <complex-attribute name="sql"><![CDATA[
SELECT TO_JSONB(z)
        FROM JSONB_POPULATE_RECORD
        (
            $1,
            TO_JSONB($1)
        ) z;
]]></complex-attribute>
                        <category _I_D="31521782-f3fc-4b8b-87fd-ff87520d70c6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e2f160b0-7027-4d72-8c0d-13733d098b33" name="regexp_count" subcategories-loading="none" object-loading="extended" context="regexp_count" is-trigger-function="0" unique-function-name="regexp_count" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,numeric,text" is-returning-set="f" ret-datatype="int4" function-arguments="p_src_string text, p_regexp_pat text, p_position numeric DEFAULT 1, p_match_param text DEFAULT 'c'::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304510" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_src_string text, p_regexp_pat text, p_position numeric, p_match_param text" overload-function-count="1" proc-language="plpgsql" function-signature="regexp_count(p_src_string text, p_regexp_pat text, p_position numeric, p_match_param text)" comment="Returns a count of the number of times that a regular expression pattern is matched in a string. If the pattern expression is not found and no argument is null, the result is 0.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_res_count INTEGER;
    v_position INTEGER;
    v_match_param TEXT;
    v_src_string TEXT;
BEGIN
    -- Extracting INT value of position
    v_position := floor(p_position);

    -- Removing spaces from match_param
    v_match_param := trim(p_match_param);

    -- Preparing source string for further work
    v_src_string := substr(p_src_string, v_position);

    -- Block of input parameters validation checks
    IF (coalesce(p_src_string, '') = '' OR
        coalesce(p_regexp_pat, '') = '' OR
        p_position IS NULL)
    THEN
        RETURN NULL;
    ELSIF (v_position <= 0) THEN
        /* The value of the argument for parameter in position "3" (start position)
           should be greater than or equal to 1 */
        RAISE USING MESSAGE := format('Argument ''%s'' is out of range.', v_position),
                    DETAIL := 'The value of the argument should be greater than or equal to 1.',
                    HINT := '-1428';
    ELSIF (coalesce(v_match_param, '') = '') THEN
        v_match_param := 'c';
    ELSIF (v_match_param !~ 'i|c|n|m|x') THEN
        /* The value of the argument for parameter in position "4" (match parameter)
           must be one of the following: "i", "c", "n", "m", "x" */
        RAISE USING MESSAGE := 'Illegal argument for function.',
                    DETAIL := 'The value of the argument must be one of the following: "i", "c", "n", "m", "x".',
                    HINT := '-1760';
    END IF;

    -- Translate regexp flags (match parameter) between matching engines
    v_match_param := concat('g', v_match_param);
    v_match_param := regexp_replace(v_match_param, 'm|x', '', 'g');
    v_match_param := CASE
                        WHEN v_match_param !~ 'n' THEN v_match_param || 'p'
                        ELSE regexp_replace(v_match_param, 'n', '', 'g')
                     END;

    -- Find the count of matches which correspond to the supplied regexp mask
    SELECT COUNT(regexpval)::INTEGER
      INTO v_res_count
      FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) AS rownum,
                   regexpval
              FROM (SELECT unnest(regexp_matches(v_src_string,
                                                 p_regexp_pat,
                                                 v_match_param)) AS regexpval
                   ) AS regexpvals
             WHERE char_length(regexpval) > 0
           ) AS rankexpvals;

    RETURN v_res_count;
END;
]]></complex-attribute>
                        <category _I_D="92177c58-701f-43e8-9a7d-713d2362e7c0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fbc96b81-f211-4297-a710-184e648d4669" name="regexp_instr" subcategories-loading="none" object-loading="extended" context="regexp_instr" is-trigger-function="0" unique-function-name="regexp_instr" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,numeric,numeric,numeric,text" is-returning-set="f" ret-datatype="int4" function-arguments="p_src_string text, p_regexp_pat text, p_position numeric DEFAULT 1, p_occurrence numeric DEFAULT 1, p_retopt numeric DEFAULT 0, p_match_param text DEFAULT 'c'::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304511" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_src_string text, p_regexp_pat text, p_position numeric, p_occurrence numeric, p_retopt numeric, p_match_param text" overload-function-count="1" proc-language="plpgsql" function-signature="regexp_instr(p_src_string text, p_regexp_pat text, p_position numeric, p_occurrence numeric, p_retopt numeric, p_match_param text)" comment="This function returns the starting or ending position of the matched substring, depending on the value of the return_option argument.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_retopt INTEGER;
    v_position INTEGER;
    v_occurrence INTEGER;
    v_match_param TEXT;
    v_src_string TEXT;
    v_instr_pos INTEGER;
    v_srcstr_len INTEGER;
    v_resposition INTEGER;
    v_regexpres_row RECORD;
    v_match_count INTEGER := 0;
BEGIN
    -- Extracting INT value of position
    v_position := floor(p_position);

    -- Preparing source string for further work
    v_src_string := substr(p_src_string, v_position);

    -- Extracting INT value of occurrence
    v_occurrence := floor(p_occurrence);

    -- Extracting INT value of return option
    v_retopt := floor(p_retopt);

    -- Removing spaces from match_param
    v_match_param := trim(p_match_param);

    v_srcstr_len := char_length(v_src_string);

    -- Block of input parameters validation checks
    IF (coalesce(p_src_string, '') = '' OR
        coalesce(p_regexp_pat, '') = '' OR
        p_position IS NULL OR
        p_occurrence IS NULL OR
        p_retopt IS NULL)
    THEN
        RETURN NULL;
    ELSIF (v_position <= 0) THEN
        /* The value of the argument for parameter in position "3" (start position)
           should be greater than or equal to 1 */
        RAISE USING MESSAGE := format('Argument ''%s'' is out of range.', v_position),
                    DETAIL := 'The value of the argument should be greater than or equal to 1.',
                    HINT := '-1428';
    ELSIF (v_occurrence <= 0) THEN
        /* The value of the argument for parameter in position "4" (occurrence of match)
           should be greater than or equal to 1 */
        RAISE USING MESSAGE := format('Argument ''%s'' is out of range.', v_position),
                    DETAIL := 'The value of the argument should be greater than or equal to 1.',
                    HINT := '-1428';
    ELSIF (v_retopt < 0) THEN
        /* The value of the argument for parameter in position "5" (return option)
           should be either 0 or 1 */
        RAISE USING MESSAGE := format('Argument ''%s'' is out of range.', v_retopt),
                    DETAIL := 'The value of the argument should be either 0 or 1.',
                    HINT := '-1428';
    ELSIF (coalesce(v_match_param, '') = '') THEN
        v_match_param := 'c';
    ELSIF (v_match_param !~ 'i|c|n|m|x') THEN
        /* The value of the argument for parameter in position "6" (match parameter)
           must be one of the following: "i", "c", "n", "m", "x" */
        RAISE USING MESSAGE := 'Illegal argument for function.',
                    DETAIL := 'The value of the argument must be one of the following: "i", "c", "n", "m", "x".',
                    HINT := '-1760';
    END IF;

    -- Translate regexp flags (match parameter) between matching engines
    v_match_param := concat('g', v_match_param);
    v_match_param := regexp_replace(v_match_param, 'm|x', '', 'g');
    v_match_param := CASE
                        WHEN v_match_param !~ 'n' THEN v_match_param || 'p'
                        ELSE regexp_replace(v_match_param, 'n', '', 'g')
                     END;

    -- Find the position of the particular occurrence of the regexp match
    FOR v_regexpres_row IN
    (SELECT rownum,
            regexpval,
            char_length(regexpval) AS value_len
       FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) AS rownum,
                    regexpval
               FROM (SELECT unnest(regexp_matches(v_src_string,
                                                  p_regexp_pat,
                                                  v_match_param)) AS regexpval
                    ) AS regexpvals
              WHERE char_length(regexpval) > 0
            ) AS rankexpvals
      ORDER BY rownum ASC)
    LOOP
        v_src_string := substr(v_src_string, strpos(v_src_string, v_regexpres_row.regexpval) + v_regexpres_row.value_len);
        v_resposition := v_srcstr_len - char_length(v_src_string) - v_regexpres_row.value_len + 1;

        IF (v_position > 1) THEN
            v_resposition := v_resposition + v_position - 1;
        END IF;

        IF (v_retopt > 0) THEN
            v_resposition := v_resposition + v_regexpres_row.value_len;
        END IF;

        v_match_count := v_regexpres_row.rownum;
        EXIT WHEN v_match_count = v_occurrence;
    END LOOP;

    v_instr_pos := CASE
                      WHEN v_match_count != v_occurrence THEN 0
                      ELSE v_resposition
                   END;

    RETURN v_instr_pos;
END;
]]></complex-attribute>
                        <category _I_D="c15c2dd2-8332-455e-9991-17619ddbdf7d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ae98d32f-65db-457f-a9ee-65f610437bb3" name="regexp_like" subcategories-loading="none" object-loading="extended" context="regexp_like" is-trigger-function="0" unique-function-name="regexp_like" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="bool" function-arguments="p_src_string text, p_regexp_pat text, p_match_param text DEFAULT 'c'::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304512" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_src_string text, p_regexp_pat text, p_match_param text" overload-function-count="1" proc-language="plpgsql" function-signature="regexp_like(p_src_string text, p_regexp_pat text, p_match_param text)" comment="This function returns a boolean value indicating if the regular expression pattern is found in a string.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_match_param TEXT;
    v_like_flag BOOLEAN := FALSE;
BEGIN
    -- Removing spaces from match_param
    v_match_param := trim(p_match_param);

    -- Block of input parameters validation checks
    IF (coalesce(p_src_string, '') = '' OR
        coalesce(p_regexp_pat, '') = '')
    THEN
        RETURN v_like_flag;
    ELSIF (coalesce(v_match_param, '') = '') THEN
        v_match_param := 'c';
    ELSIF (v_match_param !~ 'i|c|n|m|x') THEN
        /* The value of the argument for parameter in position "3" (match parameter)
           must be one of the following: "i", "c", "n", "m", "x" */
        RAISE USING MESSAGE := 'Illegal argument for function.',
                    DETAIL := 'The value of the argument must be one of the following: "i", "c", "n", "m", "x".',
                    HINT := '-1760';
    END IF;

    -- Translate regexp flags (match parameter) between matching engines
    v_match_param := concat('g', v_match_param);
    v_match_param := regexp_replace(v_match_param, 'm|x', '', 'g');
    v_match_param := CASE
                        WHEN v_match_param !~ 'n' THEN v_match_param || 'p'
                        ELSE regexp_replace(v_match_param, 'n', '', 'g')
                     END;

    -- Finding if there is a match regarding supplied regexp mask
    v_like_flag := EXISTS(SELECT regexp_matches(p_src_string, p_regexp_pat, v_match_param));

    RETURN v_like_flag;
END;
]]></complex-attribute>
                        <category _I_D="3d500db6-dd6c-482c-b490-d699f4154f93" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7b9aa770-f6bc-4002-bf97-a51666dc1e15" name="regexp_replace" subcategories-loading="none" object-loading="extended" context="regexp_replace" is-trigger-function="0" unique-function-name="regexp_replace" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,numeric,numeric,text" is-returning-set="f" ret-datatype="text" function-arguments="p_src_string text, p_regexp_pat text, p_replace_string text DEFAULT ''::text, p_position numeric DEFAULT 1, p_occurrence numeric DEFAULT 0, p_match_param text DEFAULT 'c'::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304513" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_src_string text, p_regexp_pat text, p_replace_string text, p_position numeric, p_occurrence numeric, p_match_param text" overload-function-count="1" proc-language="plpgsql" function-signature="regexp_replace(p_src_string text, p_regexp_pat text, p_replace_string text, p_position numeric, p_occurrence numeric, p_match_param text)" comment="This function returns a modified version of the source string where occurrences of the regular expression pattern found in the source string are replaced with the specified replacement string">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_res_string TEXT;
    v_regexp_val TEXT;
    v_res_position INTEGER;
    v_regexpres_row RECORD;
    v_position INTEGER;
    v_occurrence INTEGER;
    v_match_param TEXT;
    v_src_string TEXT;
    v_srcstr_len INTEGER;
    v_match_count INTEGER := 0;
BEGIN
    -- Extracting INT value of position
    v_position := floor(p_position);

    -- Extracting INT value of occurrence
    v_occurrence := floor(p_occurrence);

    -- Removing spaces from match_param
    v_match_param := trim(p_match_param);

    -- Preparing source string for further work
    v_src_string := substr(p_src_string, v_position);

    v_srcstr_len := char_length(v_src_string);

    /* Possible combinations of the input parameters
       (processing some of them) */
    IF (char_length(v_src_string) != 0 AND
        char_length(coalesce(p_regexp_pat, '')) = 0)
    THEN
        RETURN p_src_string;
    END IF;

    -- Block of input parameters validation checks
    IF (coalesce(p_src_string, '') = '' OR
        coalesce(p_regexp_pat, '') = '' OR
        p_position IS NULL OR
        p_occurrence IS NULL)
    THEN
        RETURN v_res_string;
    ELSIF (v_position <= 0) THEN
        /* The value of the argument for parameter in position "4" (start position)
           should be greater than or equal to 1 */
        RAISE USING MESSAGE := format('Argument ''%s'' is out of range.', v_position),
                    DETAIL := 'The value of the argument should be greater than or equal to 1.',
                    HINT := '-1428';
    ELSIF (v_occurrence < 0) THEN
        /* The value of the argument for parameter in position "5" (occurrence of match)
           should be greater than or equal to 1 */
        RAISE USING MESSAGE := format('Argument ''%s'' is out of range.', v_position),
                    DETAIL := 'The value of the argument should be greater than or equal to 0.',
                    HINT := '-1428';
    ELSIF (coalesce(v_match_param, '') = '') THEN
        v_match_param := 'c';
    ELSIF (v_match_param !~ 'i|c|n|m|x') THEN
        /* The value of the argument for parameter in position "6" (match parameter)
           must be one of the following: "i", "c", "n", "m", "x" */
        RAISE USING MESSAGE := 'Illegal argument for function.',
                    DETAIL := 'The value of the argument must be one of the following: "i", "c", "n", "m", "x".',
                    HINT := '-1760';
    END IF;

    -- Translate regexp flags (match parameter) between matching engines
    v_match_param := concat('g', v_match_param);
    v_match_param := regexp_replace(v_match_param, 'm|x', '', 'g');
    v_match_param := CASE
                        WHEN v_match_param !~ 'n' THEN v_match_param || 'p'
                        ELSE regexp_replace(v_match_param, 'n', '', 'g')
                     END;

    -- Replace all occurrences of match if particular one isn't specified
    IF (v_occurrence = 0) THEN
        v_res_string := regexp_replace(v_src_string,
                                       p_regexp_pat,
                                       coalesce(p_replace_string, ''),
                                       v_match_param);

        v_res_string := concat(substr(p_src_string, 1, v_position - 1), v_res_string);
    -- Replace the particular occurrence of the regexp match (specified as `p_occurrence` param)
    ELSE
        FOR v_regexpres_row IN
        (SELECT rownum,
                regexpval,
                char_length(regexpval) AS value_len
           FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) AS rownum,
                        regexpval
                   FROM (SELECT unnest(regexp_matches(v_src_string,
                                                      p_regexp_pat,
                                                      v_match_param)) AS regexpval
                        ) AS regexpvals
                  WHERE char_length(regexpval) > 0
                ) AS rankexpvals
          ORDER BY rownum ASC)
        LOOP
            v_regexp_val := v_regexpres_row.regexpval;
            v_src_string := substr(v_src_string, strpos(v_src_string, v_regexp_val) + v_regexpres_row.value_len);
            v_res_position := v_srcstr_len - char_length(v_src_string) - v_regexpres_row.value_len + 1;

            IF (p_position > 1) THEN
                v_res_position := v_res_position + p_position - 1;
            END IF;

            v_match_count := v_regexpres_row.rownum;
            EXIT WHEN v_match_count = v_occurrence;
        END LOOP;

        IF (v_match_count = v_occurrence) THEN
            v_res_string := concat(substr(p_src_string, 0, v_res_position),
                                   p_replace_string,
                                   substr(p_src_string, v_res_position + char_length(v_regexp_val)));
        END IF;
    END IF;

    v_res_string := coalesce(v_res_string, p_src_string);

    RETURN nullif(v_res_string, '');
END;
]]></complex-attribute>
                        <category _I_D="b02904ad-a1a6-431a-b468-ff17cb1d5d96" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="059a3493-49fd-4f97-9279-a88cf00c1cf4" name="regexp_substr" subcategories-loading="none" object-loading="extended" context="regexp_substr" is-trigger-function="0" unique-function-name="regexp_substr" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,numeric,numeric,text" is-returning-set="f" ret-datatype="text" function-arguments="p_src_string text, p_regexp_pat text, p_position numeric DEFAULT 1, p_occurrence numeric DEFAULT 1, p_match_param text DEFAULT 'c'::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304515" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_src_string text, p_regexp_pat text, p_position numeric, p_occurrence numeric, p_match_param text" overload-function-count="1" proc-language="plpgsql" function-signature="regexp_substr(p_src_string text, p_regexp_pat text, p_position numeric, p_occurrence numeric, p_match_param text)" comment="This function returns one occurrence of a substring of a string that matches the regular expression pattern. If the pattern expression is not found, the result is the null value.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_res_string TEXT;
    v_regexp_val TEXT;
    v_position INTEGER;
    v_occurrence INTEGER;
    v_match_param TEXT;
    v_src_string TEXT;
    v_regexpres_row RECORD;
    v_match_count INTEGER := 0;
BEGIN
    -- Extracting INT value of position
    v_position := floor(p_position);

    -- Extracting INT value of occurrence
    v_occurrence := floor(p_occurrence);

    -- Removing spaces from match_param
    v_match_param := trim(p_match_param);

    -- Preparing source string for further work
    v_src_string := substr(p_src_string, v_position);

    -- Block of input parameters validation checks
    IF (coalesce(p_src_string, '') = '' OR
        coalesce(p_regexp_pat, '') = '' OR
        p_position IS NULL OR
        p_occurrence IS NULL)
    THEN
        RETURN v_res_string;
    ELSIF (v_position <= 0) THEN
        /* The value of the argument for parameter in position "3" (start position)
           should be greater than or equal to 1 */
        RAISE USING MESSAGE := format('Argument ''%s'' is out of range.', v_position),
                    DETAIL := 'The value of the argument should be greater than or equal to 1.',
                    HINT := '-1428';
    ELSIF (v_occurrence < 0) THEN
        /* The value of the argument for parameter in position "4" (occurrence of match)
           should be greater than or equal to 1 */
        RAISE USING MESSAGE := format('Argument ''%s'' is out of range.', v_position),
                    DETAIL := 'The value of the argument should be greater than or equal to 1.',
                    HINT := '-1428';
    ELSIF (coalesce(v_match_param, '') = '') THEN
        v_match_param := 'c';
    ELSIF (v_match_param !~ 'i|c|n|m|x') THEN
        /* The value of the argument for parameter in position "5" (match parameter)
           must be one of the following: "i", "c", "n", "m", "x" */
        RAISE USING MESSAGE := 'Illegal argument for function.',
                    DETAIL := 'The value of the argument must be one of the following: "i", "c", "n", "m", "x".',
                    HINT := '-1760';
    END IF;

    -- Translate regexp flags (match parameter) between matching engines
    v_match_param := concat('g', v_match_param);
    v_match_param := regexp_replace(v_match_param, 'm|x', '', 'g');
    v_match_param := CASE
                        WHEN v_match_param !~ 'n' THEN v_match_param || 'p'
                        ELSE regexp_replace(v_match_param, 'n', '', 'g')
                     END;

    -- Find the particular occurrence of the regexp match (specified as `p_occurrence` param)
    FOR v_regexpres_row IN
    (SELECT rownum,
            regexpval,
            char_length(regexpval) AS value_len
       FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) AS rownum,
                    regexpval
               FROM (SELECT unnest(regexp_matches(v_src_string,
                                                  p_regexp_pat,
                                                  v_match_param)) AS regexpval
                    ) AS regexpvals
              WHERE char_length(regexpval) > 0
            ) AS rankexpvals
      ORDER BY rownum ASC)
    LOOP
        v_match_count := v_regexpres_row.rownum;
        v_regexp_val := v_regexpres_row.regexpval;
        v_src_string := substr(v_src_string, strpos(v_src_string, v_regexp_val) + v_regexpres_row.value_len);

        IF (v_match_count = v_occurrence) THEN
            v_res_string := v_regexp_val;
            EXIT;
        END IF;
    END LOOP;

    RETURN v_res_string;
END;
]]></complex-attribute>
                        <category _I_D="e6f7cedd-9ea0-44e1-b4aa-285209513007" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5c4c70a4-0c81-4cb4-8f30-85793e23bbca" name="return_v$nls_parameters" subcategories-loading="none" object-loading="extended" context="return_v$nls_parameters" is-trigger-function="0" unique-function-name="return_v$nls_parameters" is-aggregate="f" language-name="plpgsql" is-returning-set="t" ret-datatype="nls_param" schema-id="304013" function-type="RET_DATASET" count-arguments="0" function-id="304371" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="return_v$nls_parameters()">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    ret aws_oracle_ext.nls_param;
    vjsonrow JSON;
BEGIN
    PERFORM aws_oracle_ext.nls_parameters_init();

    WITH by_default AS
    (
        SELECT params_dictionary ->> 'NLS_CALENDAR' AS NLS_CALENDAR,
            params_dictionary ->> 'NLS_CHARACTERSET' AS NLS_CHARACTERSET,
            params_dictionary ->> 'NLS_COMP' AS NLS_COMP,
            params_dictionary ->> 'NLS_CURRENCY' AS NLS_CURRENCY,
            params_dictionary ->> 'NLS_DATE_FORMAT' AS NLS_DATE_FORMAT,
            params_dictionary ->> 'NLS_DATE_LANGUAGE' AS NLS_DATE_LANGUAGE,
            params_dictionary ->> 'NLS_DUAL_CURRENCY' AS NLS_DUAL_CURRENCY,
            params_dictionary ->> 'NLS_ISO_CURRENCY' AS NLS_ISO_CURRENCY,
            params_dictionary ->> 'NLS_LANGUAGE' AS NLS_LANGUAGE,
            params_dictionary ->> 'NLS_LENGTH_SEMANTICS' AS NLS_LENGTH_SEMANTICS,
            params_dictionary ->> 'NLS_NCHAR_CHARACTERSET' AS NLS_NCHAR_CHARACTERSET,
            params_dictionary ->> 'NLS_NCHAR_CONV_EXCP' AS NLS_NCHAR_CONV_EXCP,
            params_dictionary ->> 'NLS_NUMERIC_CHARACTERS' AS NLS_NUMERIC_CHARACTERS,
            params_dictionary ->> 'NLS_SORT' AS NLS_SORT,
            params_dictionary ->> 'NLS_TERRITORY' AS NLS_TERRITORY,
            params_dictionary ->> 'NLS_TIMESTAMP_FORMAT' AS NLS_TIMESTAMP_FORMAT,
            params_dictionary ->> 'NLS_TIMESTAMP_TZ_FORMAT' AS NLS_TIMESTAMP_TZ_FORMAT,
            params_dictionary ->> 'NLS_TIME_FORMAT' AS nls_time_format,
            params_dictionary ->> 'NLS_TIME_TZ_FORMAT' AS nls_time_tz_format
        FROM aws_oracle_ext.nls_parameters
        WHERE nls_territory ='AMERICA'
    ),
    cur_nls as
    (
        SELECT params_dictionary ->> 'NLS_CALENDAR' AS NLS_CALENDAR,
            params_dictionary ->> 'NLS_CHARACTERSET' AS NLS_CHARACTERSET,
            params_dictionary ->> 'NLS_COMP' AS NLS_COMP,
            params_dictionary ->> 'NLS_CURRENCY' AS NLS_CURRENCY,
            params_dictionary ->> 'NLS_DATE_FORMAT' AS NLS_DATE_FORMAT,
            params_dictionary ->> 'NLS_DATE_LANGUAGE' AS NLS_DATE_LANGUAGE,
            params_dictionary ->> 'NLS_DUAL_CURRENCY' AS NLS_DUAL_CURRENCY,
            params_dictionary ->> 'NLS_ISO_CURRENCY' AS NLS_ISO_CURRENCY,
            params_dictionary ->> 'NLS_LANGUAGE' AS NLS_LANGUAGE,
            params_dictionary ->> 'NLS_LENGTH_SEMANTICS' AS NLS_LENGTH_SEMANTICS,
            params_dictionary ->> 'NLS_NCHAR_CHARACTERSET' AS NLS_NCHAR_CHARACTERSET,
            params_dictionary ->> 'NLS_NCHAR_CONV_EXCP' AS NLS_NCHAR_CONV_EXCP,
            params_dictionary ->> 'NLS_NUMERIC_CHARACTERS' AS NLS_NUMERIC_CHARACTERS,
            params_dictionary ->> 'NLS_SORT' AS NLS_SORT,
            params_dictionary ->> 'NLS_TERRITORY' AS NLS_TERRITORY,
            params_dictionary ->> 'NLS_TIMESTAMP_FORMAT' AS NLS_TIMESTAMP_FORMAT,
            params_dictionary ->> 'NLS_TIMESTAMP_TZ_FORMAT' AS NLS_TIMESTAMP_TZ_FORMAT,
            params_dictionary ->> 'NLS_TIME_FORMAT' AS nls_time_format,
            params_dictionary ->> 'NLS_TIME_TZ_FORMAT' AS nls_time_tz_format
        FROM aws_oracle_ext.nls_parameters
        WHERE nls_territory = aws_oracle_ext.get_package_variable(variable_name => 'NLS_TERRITORY')
    ), vals as
    (
    SELECT COALESCE(aws_oracle_ext.get_package_variable(variable_name => 'NLS_CALENDAR'), cn.nls_calendar, bd.nls_calendar) AS nls_calendar,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_CHARACTERSET'), cn.nls_characterset, bd.nls_characterset) AS nls_characterset,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_COMP'), cn.nls_comp, bd.nls_comp) AS nls_comp,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_CURRENCY'), cn.nls_currency, bd.nls_currency) AS nls_currency,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_DATE_FORMAT'), cn.nls_date_format, bd.nls_date_format) AS nls_date_format,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_DATE_LANGUAGE'), cn.nls_date_language, bd.nls_date_language) AS nls_date_language,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_DUAL_CURRENCY'), cn.nls_dual_currency, bd.nls_dual_currency) AS nls_dual_currency,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_ISO_CURRENCY'), cn.nls_iso_currency, bd.nls_iso_currency) AS nls_iso_currency,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_LANGUAGE'), cn.nls_language, bd.nls_language) AS nls_language,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_LENGTH_SEMANTICS'), cn.nls_length_semantics, bd.nls_length_semantics) AS nls_length_semantics,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_NCHAR_CHARACTERSET'), cn.nls_nchar_characterset, bd.nls_nchar_characterset) AS nls_nchar_characterset,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_NCHAR_CONV_EXCP'), cn.nls_nchar_conv_excp, bd.nls_nchar_conv_excp) AS nls_nchar_conv_excp,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_NUMERIC_CHARACTERS'), cn.nls_numeric_characters, bd.nls_numeric_characters) AS nls_numeric_characters,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_SORT'), cn.nls_sort, bd.nls_sort) AS nls_sort,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_TERRITORY'), cn.nls_territory, bd.nls_territory) AS nls_territory,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_TIMESTAMP_FORMAT'), cn.nls_timestamp_format, bd.nls_timestamp_format) AS nls_timestamp_format,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_TIMESTAMP_TZ_FORMAT'), cn.nls_timestamp_tz_format, bd.nls_timestamp_tz_format) AS nls_timestamp_tz_format,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_TIME_FORMAT'), cn.nls_time_format, bd.nls_time_format) AS nls_time_format,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_TIME_TZ_FORMAT'), cn.nls_time_tz_format, bd.nls_time_tz_format) AS nls_time_tz_format
    FROM by_default bd
    LEFT JOIN cur_nls cn ON 1=1
    )
    SELECT ROW_TO_JSON(vals)
    INTO vjsonrow
    FROM vals;

    FOR ret IN
    SELECT UPPER(parameter),
        value,
        0 AS con_id
    FROM json_each_text(vjsonrow) AS t(parameter, value)
    LOOP

        RETURN NEXT ret;

    END LOOP;


END;
]]></complex-attribute>
                        <category _I_D="bc2ac880-bc8e-45cb-a18b-143996650556" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cf080991-5327-4d9b-a364-27c69233a23f" name="round" subcategories-loading="none" object-loading="extended" context="round(date)" is-trigger-function="0" unique-function-name="round(date)" is-aggregate="f" language-name="sql" arguments-datatypes="date" is-returning-set="f" ret-datatype="date" function-arguments="date" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304614" volatility="IMMUTABLE" is-window="f" function-identity-arguments="date" overload-function-count="6" proc-language="sql" function-signature="round(date)" unique-suffix="(date)" routine-number="304614" comment="Round dates according to the specified format">
                        <complex-attribute name="sql"><![CDATA[ 
SELECT $1;
]]></complex-attribute>
                        <category _I_D="1a120802-65f7-427f-ad50-b277580f5fda" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b05ac225-2cae-45a1-8703-94771a28f85d" name="round" subcategories-loading="none" object-loading="extended" context="round(value date, fmt text)" is-trigger-function="0" unique-function-name="round(value date, fmt text)" is-aggregate="f" language-name="sql" arguments-datatypes="date,text" is-returning-set="f" ret-datatype="date" function-arguments="value date, fmt text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304613" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value date, fmt text" overload-function-count="6" proc-language="sql" function-signature="round(value date, fmt text)" unique-suffix="(value date, fmt text)" routine-number="304613" comment="Round dates according to the specified format">
                        <complex-attribute name="sql"><![CDATA[ 
SELECT aws_oracle_ext.round($1::TIMESTAMP(0), $2)::DATE;
]]></complex-attribute>
                        <category _I_D="c4dc9d2d-51d0-4caa-808e-dbc44ea69789" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9f573dc5-4e40-4380-a2c2-76cbae99dc26" name="round" subcategories-loading="none" object-loading="extended" context="round(value timestamp with time zone)" is-trigger-function="0" unique-function-name="round(value timestamp with time zone)" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp with time zone" is-returning-set="f" ret-datatype="timestamptz" function-arguments="value timestamp with time zone" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304616" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value timestamp with time zone" overload-function-count="6" proc-language="sql" function-signature="round(value timestamp with time zone)" unique-suffix="(value timestamp with time zone)" routine-number="304616" comment="Round dates according to the specified format">
                        <complex-attribute name="sql"><![CDATA[ 
SELECT aws_oracle_ext.round($1, 'DDD');
]]></complex-attribute>
                        <category _I_D="0a0cbae2-e8b1-48ac-a89e-1c665f410bec" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="852ec595-e7dd-4445-9bf4-679705a1c0b4" name="round" subcategories-loading="none" object-loading="extended" context="round(value timestamp with time zone, fmt text)" is-trigger-function="0" unique-function-name="round(value timestamp with time zone, fmt text)" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp with time zone,text" is-returning-set="f" ret-datatype="timestamptz" function-arguments="value timestamp with time zone, fmt text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304615" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value timestamp with time zone, fmt text" overload-function-count="6" proc-language="sql" function-signature="round(value timestamp with time zone, fmt text)" unique-suffix="(value timestamp with time zone, fmt text)" routine-number="304615" comment="Round dates according to the specified format">
                        <complex-attribute name="sql"><![CDATA[ 
SELECT NULL::TIMESTAMP WITH TIME ZONE;
]]></complex-attribute>
                        <category _I_D="607a0ba1-1d17-43db-8ed1-adb4da812a95" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5496ab9b-ce25-4c75-8e10-48e6f64d2b4d" name="round" subcategories-loading="none" object-loading="extended" context="round(value timestamp without time zone)" is-trigger-function="0" unique-function-name="round(value timestamp without time zone)" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone" is-returning-set="f" ret-datatype="timestamp" function-arguments="value timestamp without time zone" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304612" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value timestamp without time zone" overload-function-count="6" proc-language="sql" function-signature="round(value timestamp without time zone)" unique-suffix="(value timestamp without time zone)" routine-number="304612" comment="Round dates according to the specified format">
                        <complex-attribute name="sql"><![CDATA[ 
SELECT aws_oracle_ext.round($1, 'DDD'); 
]]></complex-attribute>
                        <category _I_D="be0f0ee0-e4be-4270-8c99-b3b5da1b9d83" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="abcb1a81-5da3-4a18-a504-db232a9c5c3f" name="round" subcategories-loading="none" object-loading="extended" context="round(value timestamp without time zone, fmt text)" is-trigger-function="0" unique-function-name="round(value timestamp without time zone, fmt text)" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone,text" is-returning-set="f" ret-datatype="timestamp" function-arguments="value timestamp without time zone, fmt text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304611" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value timestamp without time zone, fmt text" overload-function-count="6" proc-language="sql" function-signature="round(value timestamp without time zone, fmt text)" unique-suffix="(value timestamp without time zone, fmt text)" routine-number="304611" comment="Round dates according to the specified format">
                        <complex-attribute name="sql"><![CDATA[
WITH cte0 AS (
SELECT
UPPER(fmt) AS fmt,
date_part('year',$1)::int AS y,
date_part('month',$1)::int AS m,
date_part('day',$1)::int AS d,
--
make_date(date_part('year',$1)::int, 1, 1) AS firstDayOfYear,
date_part('isodow',make_date(date_part('year',$1)::int, 1, 1))::int - 1 AS weekdayOfYear,
date_part('isodow',$1)::int - 1 AS weekdayOfMonth,
date_part('isodow',make_date(date_part('year',$1)::int, date_part('month',$1)::int, 1))::int - 1 AS weekdayOfMonth_W
)
, cte1 AS (
SELECT
cte0.*,
DATE_PART('isodow',$1)::int AS z_DAY,
DATE_PART('day',$1 - make_date(y, 1, 1))::int % 7 AS z_WW,
DATE_PART('day',$1 - make_date(y, m, 1))::int % 7 AS z_W,
--
weekdayOfYear - weekdayOfMonth AS diffDay,
CASE
  WHEN weekdayOfYear > 3
  THEN firstDayOfYear - weekdayOfYear * interval '1 day' + interval '1 week'
  ELSE firstDayOfYear - weekdayOfYear * interval '1 day'
END AS isoYear,
weekdayOfMonth_W - weekdayOfMonth AS diffDay_W
FROM cte0)
, cte2 AS (
SELECT
cte1.*,
date_part('isodow'
         ,make_date(date_part('year',isoYear)::int
                   ,date_part('month',isoYear)::int
                   ,date_part('day',isoYear)::int))::int - 1 AS isoWeekdayOfYear
FROM cte1)
, cte AS (
SELECT
cte2.*,
isoWeekdayOfYear - weekdayOfYear AS diffDay_IW
FROM cte2)
SELECT
/* ---------------------------------------------------------------------------- */
CASE
--Century
WHEN cte.fmt IN ('CC', 'SCC') THEN
  CASE
  WHEN date_part('year',$1)::int % 100 > 50
  THEN make_date(floor(date_part('year',$1) / 100)::int * 100 + 101, 1, 1)
  ELSE make_date(floor(date_part('year',$1) / 100)::int * 100 + 1, 1, 1)
  END
--Year
WHEN cte.fmt IN ('SYYYY','YYYY','YEAR','SYEAR','YYY','YY','Y') THEN
  CASE
  WHEN date_part('month',$1) > 6
  THEN date_trunc('year',$1) + interval '1 year'
  ELSE date_trunc('year',$1)
  END
--ISO Year
WHEN cte.fmt IN ('IYYY','IYY','IY','I') THEN
  CASE
  WHEN date_part('month', $1) <= 6
  THEN aws_oracle_ext.trunc($1::timestamp,'IYYY')
  ELSE aws_oracle_ext.trunc($1::timestamp + interval '1 year','IYYY')
  END
--Quarter
WHEN cte.fmt IN ('Q') THEN
  CASE
  WHEN date_part('month',$1) IN (1,4,7,10) OR (date_part('month',$1) IN (2,5,8,11) AND date_part('day',$1) <= 15)
  THEN make_date(date_part('year',$1)::int
                ,date_part('month',$1)::int - (date_part('month',$1)::int - 1) % 3
                ,1)
  WHEN date_part('month',$1) IN (3,6,9,12) OR (date_part('month',$1) IN (2,5,8,11) AND date_part('day',$1) > 15)
  THEN make_date(date_part('year',$1)::int + floor(date_part('month',$1)/11)::int
                ,(date_part('month',$1)::int + ((12 - date_part('month',$1)::int + 1) % 3)) % 12
                ,1)
  END
--Month
WHEN cte.fmt IN ('MONTH','MON','MM','RM') THEN
  CASE
  WHEN date_part('day',$1) >= 16
  THEN date_trunc('month',$1) + interval '1 month'
  ELSE date_trunc('month',$1)
  END
--Week (First day of the year/Same day of the week as the first day of the year)
WHEN cte.fmt IN ('WW') THEN
  CASE
  WHEN z_WW < 4
  THEN date_trunc('day',$1 - z_WW * interval '1 day')
  ELSE date_trunc('day',$1 - z_WW * interval '1 day' + 7 * interval '1 day')
  END
--Week (Monday of that week/Same day of the week as the first day of the ISO year)
WHEN cte.fmt IN ('IW') THEN
  CASE
  WHEN date_part('isodow',$1) < 4 OR (date_part('isodow',$1) = 4 AND date_part('hour',$1) <= 11)
  THEN date_trunc('week',$1)
  ELSE date_trunc('week',$1 + interval '1 week')
  END
--Week (First weekday on which the first day of the month falls/Same day of the week as the first day of the month)
WHEN cte.fmt IN ('W') THEN
  CASE
  WHEN z_W < 4
  THEN date_trunc('day',$1 - z_W * interval '1 day')
  ELSE date_trunc('day',$1 - z_W * interval '1 day' + 7 * interval '1 day')
  END
--Day
WHEN cte.fmt IN ('DDD', 'DD', 'J') THEN
  CASE
  WHEN date_part('hour',$1) > 11
  THEN date_trunc('day',$1) + interval '1 day'
  ELSE date_trunc('day',$1)
  END
--Starting day of the week
WHEN cte.fmt IN ('DAY', 'DY', 'D') THEN
  CASE
  WHEN y > 0
  THEN
    CASE
    WHEN z_DAY < 4
    THEN date_trunc('day',$1 - z_DAY * interval '1 day')
    ELSE date_trunc('day',$1 - z_DAY * interval '1 day' + 7 * interval '1 day')
    END
  ELSE
    CASE
    WHEN z_DAY > 0
    THEN date_trunc('day', $1 + (5 - CASE WHEN z_DAY > 1 THEN z_DAY ELSE z_DAY + 7 END) * interval '1 day')
    ELSE date_trunc('day', $1 + (5 - 7) * interval '1 day')
    END
  END
--Hour
WHEN cte.fmt IN ('HH24', 'HH12', 'HH') THEN
  CASE
  WHEN date_part('minute',$1) >= 30
  THEN date_trunc('hour',$1) + interval '1 hour'
  ELSE date_trunc('hour',$1)
  END
--Minute
WHEN cte.fmt IN ('MI') THEN
  CASE
  WHEN date_part('second',$1) >= 30
  THEN date_trunc('minute',$1) + interval '1 minute'
  ELSE date_trunc('minute',$1)
  END
END AS date_round
/* ---------------------------------------------------------------------------- */
FROM cte;
]]></complex-attribute>
                        <category _I_D="25cec744-b9f7-47c0-9b34-ef140153cafc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a036a0e0-f131-4cff-9b63-247af50bea26" name="rowidtochar" subcategories-loading="none" object-loading="extended" context="rowidtochar" is-trigger-function="0" unique-function-name="rowidtochar" is-aggregate="f" language-name="sql" arguments-datatypes="aws_oracle_data.rowid" is-returning-set="f" ret-datatype="text" function-arguments="p_rowid aws_oracle_data.rowid" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305110" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_rowid aws_oracle_data.rowid" overload-function-count="1" proc-language="sql" function-signature="rowidtochar(p_rowid aws_oracle_data.rowid)">
                        <complex-attribute name="sql"><![CDATA[
   SELECT p_rowid::text;
]]></complex-attribute>
                        <category _I_D="2f7480b3-cb13-4e95-866b-08c39bc7126c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ce73d5be-23f0-4d1c-92c0-60394310bfe7" name="sdo_closest_points" subcategories-loading="none" object-loading="extended" context="sdo_closest_points" is-trigger-function="0" unique-function-name="sdo_closest_points" is-aggregate="f" language-name="plpgsql" arguments-datatypes="geometry,geometry,character varying,double precision,geometry,geometry" is-returning-set="f" ret-datatype="record" function-arguments="ip_geom1 geometry, ip_geom2 geometry, ip_unit character varying, INOUT op_dist double precision, INOUT op_geoma geometry, INOUT op_geomb geometry" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304516" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ip_geom1 geometry, ip_geom2 geometry, ip_unit character varying, INOUT op_dist double precision, INOUT op_geoma geometry, INOUT op_geomb geometry" overload-function-count="1" proc-language="plpgsql" function-signature="sdo_closest_points(ip_geom1 geometry, ip_geom2 geometry, ip_unit character varying, INOUT op_dist double precision, INOUT op_geoma geometry, INOUT op_geomb geometry)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
BEGIN 
   op_geoma := ST_CLOSESTPOINT(ip_geom1, ip_geom2);
   op_geomb := ST_CLOSESTPOINT(ip_geom2, ip_geom1);
   op_dist  := ST_DISTANCE(op_geoma, op_geomb);
 
  if ip_unit is not null then 
  case 
    when ip_unit = 'KM' or ip_unit = 'KILOMETER' then op_dist := op_dist/1000;   
    when ip_unit = 'CM' or ip_unit = 'CENTIMETER' then op_dist := op_dist/0.01;
    when ip_unit = 'MM' or ip_unit = 'MILLIIMETER' then op_dist := op_dist/0.001;
    when ip_unit = 'MILE'                           then op_dist := op_dist/1609.344;
    when ip_unit = 'NAUT_MILE'                       then op_dist := op_dist/1852;
    when ip_unit = 'SURVEY_FOOT'                      then op_dist := op_dist/0.3048006096012;
    when ip_unit = 'FOOT'                            then op_dist := op_dist/0.3048;
    when ip_unit = 'INCH'                           then op_dist := op_dist/0.0254;
    when ip_unit = 'YARD'                          then op_dist := op_dist/0.9144;
    when ip_unit = 'CHAIN'                        then op_dist := op_dist/20.1168;
    when ip_unit = 'ROD'                           then op_dist := op_dist/5.0292;
    when ip_unit = 'ROD'                            then op_dist := op_dist/5.0292;
    when ip_unit = 'LINK'                            then op_dist := op_dist/0.201166194975966;
    when ip_unit = 'MOD_USFT'                         then op_dist := op_dist/0.304812252984506;
    when ip_unit = 'CL_FT'                             then op_dist := op_dist/0.3047972651151;
    when ip_unit = 'IND_FT'                           then op_dist := op_dist/0.304799517990042;
    when ip_unit = 'LINK_BEN'                        then op_dist := op_dist/0.201167824943759;
    when ip_unit = 'LINK_SRS'                       then op_dist := op_dist/0.201167651215526;
    when ip_unit = 'CHN_BEN'                       then op_dist := op_dist/20.1167824943759;
    when ip_unit = 'CHN_SRS'                      then op_dist := op_dist/20.1167651215526;
    when ip_unit = 'IND_YARD'                      then op_dist := op_dist/0.914398553970127;
    when ip_unit = 'SRS_YARD'                       then op_dist := op_dist/0.914398414616029;
    when ip_unit = 'FATHOM'                          then op_dist := op_dist/1.8288;
    when ip_unit = 'British foot (1936)'              then op_dist := op_dist/0.3048007491;
  end case;
 end if; 
END;
]]></complex-attribute>
                        <category _I_D="40c4fc77-7b84-4e8f-8a0a-65277416fa4e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a47dc24e-167f-4dde-88b1-dcd8a1a36425" name="sdo_gtype" subcategories-loading="none" object-loading="extended" context="sdo_gtype" is-trigger-function="0" unique-function-name="sdo_gtype" is-aggregate="f" language-name="sql" arguments-datatypes="geometry" is-returning-set="f" ret-datatype="float8" function-arguments="ip_geom1 geometry" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304517" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ip_geom1 geometry" overload-function-count="1" proc-language="sql" function-signature="sdo_gtype(ip_geom1 geometry)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT
    (
        ST_CoordDim(ip_geom1)::VARCHAR,
        '00',
        CASE GeometryType(ip_geom1)
            WHEN 'POINT' THEN '1'
            WHEN 'LINESTRING' THEN '2'
            WHEN 'CIRCULARSTRING' THEN '2'
            WHEN 'COMPOUNDCURVE' THEN '2'
            WHEN 'POLYGON' THEN '3'
            WHEN 'GEOMETRYCOLLECTION' THEN '4'
            WHEN 'MULTIPOINT' THEN '5'
            WHEN 'MULTILINESTRING' THEN '6'
            WHEN 'MULTICURVE' THEN '6'
            WHEN 'MULTIPOLYGON' THEN '7'
            WHEN 'SOLID' THEN '8'
            WHEN 'MULTISOLID' THEN '9'
            ELSE '0'  
        END 
    )::DOUBLE PRECISION;

]]></complex-attribute>
                        <category _I_D="e9ee5abb-511d-4997-b626-02527ffb86f9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8c52a267-510e-457b-97b5-3a6fae1d2d27" name="sdo_length" subcategories-loading="none" object-loading="extended" context="sdo_length" is-trigger-function="0" unique-function-name="sdo_length" is-aggregate="f" language-name="sql" arguments-datatypes="geometry" is-returning-set="f" ret-datatype="float8" function-arguments="ip_geom geometry" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304518" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ip_geom geometry" overload-function-count="1" proc-language="sql" function-signature="sdo_length(ip_geom geometry)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT
        CASE
            WHEN GeometryType(ip_geom) IN ('LINESTRING','MULTILINESTRING') THEN
                st_length(ip_geom)::DOUBLE PRECISION
            WHEN GeometryType(ip_geom) IN ('POLYGON','MULTIPOLYGON') THEN
                st_perimeter(ip_geom)::DOUBLE PRECISION
        END;

]]></complex-attribute>
                        <category _I_D="0b2f8632-4f17-4e9b-ae1c-e2e1265226cc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="51be6f25-5c51-4516-b41e-be56067aa3f6" name="session_env_restore" subcategories-loading="none" object-loading="extended" context="session_env_restore" is-trigger-function="0" unique-function-name="session_env_restore" is-aggregate="f" language-name="plv8" arguments-datatypes="json" is-returning-set="f" ret-datatype="bool" function-arguments="session_env json" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304091" volatility="VOLATILE" is-window="f" function-identity-arguments="session_env json" overload-function-count="1" proc-language="plv8" function-signature="session_env_restore(session_env json)">
                        <complex-attribute name="sql"><![CDATA[
  if (typeof(require) !== 'function') {
    const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
    initColl();
  }
  if (session_env == null || typeof(session_env) !== 'object') {
    plv8.elog(ERROR, 'Incorrect argument for session_env_restore call!');
  }
  let result = false;
  const schemas = Object.getOwnPropertyNames(session_env);
  const setVariable = function setVariable(schema, package, variable, value) {
    if(typeof(value) !== 'object' || value == null || value instanceof Date) {
      if (!(aws_oracle_ext[schema][package][variable] instanceof Tree)) {
        aws_oracle_ext[schema][package][variable] = value;
      }
    } else {
      if (!value.hasOwnProperty('collectionType')) {
        aws_oracle_ext[schema][package][variable] = value;
      } else {
        const tree = value.indexBy == 'BIGINT' ? new Tree(52)  : new Tree(52, TreeUtility.stringCompare);
        tree.indexBy = value.indexBy;
        tree.collectionType = value.collectionType;
        tree.rowType = value.rowType;
        for (let i = 0; i < value.value.length; i++) {
          let v;
          if (!value.value[i].v.hasOwnProperty('empty')) {
            v = value.value[i].v;
          } else {
            v = emptyCollectionElement;
          }
          tree.putValue(value.value[i].k, v);
        }
        aws_oracle_ext[schema][package][variable] = tree;
      }
    }
  };

  for (let i = 0; i < schemas.length; i++) {
    if (schemas[i] !== 'aws_oracle_ext') {
      const packages = Object.getOwnPropertyNames(session_env[schemas[i]]);
      for (let j = 0; j < packages.length; j++) {
        if (typeof(aws_oracle_ext) === 'undefined') {
          aws_oracle_ext = {};
          if (!result) result = true;
        }
        if (!aws_oracle_ext.hasOwnProperty(schemas[i])) {
          aws_oracle_ext[schemas[i]] = {};
          if (!result) result = true;
        }
        if(!aws_oracle_ext[schemas[i]].hasOwnProperty(packages[j])) {
          aws_oracle_ext[schemas[i]][packages[j]] = {};
          if (!result) result = true;
        }
        const initSql = `SELECT ${schemas[i]}.${packages[j]}$Init()`;
        if (!aws_oracle_ext[schemas[i]][packages[j]].hasOwnProperty('Init$$')) {
          plv8.execute(initSql);
        }
        const vars = Object.getOwnPropertyNames(session_env[schemas[i]][packages[j]]);
        for (let k = 0; k < vars.length; k++) {
          if (vars[k] !== 'Init$$') {
            setVariable(schemas[i], packages[j], vars[k],  session_env[schemas[i]][packages[j]][vars[k]]);
            if (!result) result = true;
          }
        }       
      }
    }
  }
  return result;

]]></complex-attribute>
                        <category _I_D="b92499ac-703b-4497-b10a-060a782efa8d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5d7345ac-4a7e-449e-82d7-9f7301564f80" name="session_env_store" subcategories-loading="none" object-loading="extended" context="session_env_store" is-trigger-function="0" unique-function-name="session_env_store" is-aggregate="f" language-name="plv8" arguments-datatypes="text,boolean" is-returning-set="f" ret-datatype="json" function-arguments="setting_list text, use_setting_list boolean DEFAULT true" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304090" volatility="VOLATILE" is-window="f" function-identity-arguments="setting_list text, use_setting_list boolean" overload-function-count="1" proc-language="plv8" function-signature="session_env_store(setting_list text, use_setting_list boolean)">
                        <complex-attribute name="sql"><![CDATA[
  if (setting_list == null) return null;

  const result = {};
  if (typeof(aws_oracle_ext) === 'undefined') return result;
  if (typeof(require) !== 'function') {
    const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
    initColl();
  }
  const schemas = Object.getOwnPropertyNames(aws_oracle_ext);

  const returnValue = function returnValue(schema, package, variable) {
    let result;
    if (aws_oracle_ext[schema][package][variable] instanceof Tree) {

      let res = [];
      let collectionType;
      aws_oracle_ext[schema][package][variable].walkAsc(null, null, function(key,value) {
        if (typeof(collectionType) === 'undefined') collectionType = aws_oracle_ext[schema][package][variable].collectionType;
        if (collectionType === 'ASSOC') {
          res.push({k: key, v: value});
        } else {
          const pvalue = value !== emptyCollectionElement ? value : {empty: true};
          res.push({k: key, v: pvalue});
        }
      });
      result = {
        value: res,
        collectionType: collectionType,
        indexBy: aws_oracle_ext[schema][package][variable].indexBy,
        rowType: aws_oracle_ext[schema][package][variable].rowType
      };
    } else {
      result = aws_oracle_ext[schema][package][variable];
    }
    return result;
  };

  if (!use_setting_list) {

    for (let i = 0; i < schemas.length; i++) {
      
    if (schemas[i] !== 'aws_oracle_ext') {
      if (!result.hasOwnProperty(schemas[i])) result[schemas[i]] = {};
      const packages = Object.getOwnPropertyNames(aws_oracle_ext[schemas[i]]);
      for (let j = 0; j < packages.length; j++) {

        if(!result[schemas[i]].hasOwnProperty(packages[j])) result[schemas[i]][packages[j]] = {};
        const vars = Object.getOwnPropertyNames(aws_oracle_ext[schemas[i]][packages[j]]);
        for (let k = 0; k < vars.length; k++) {
          if (vars[k] !== 'init$$') {
            result[schemas[i]][packages[j]][vars[k]] = returnValue(schemas[i], packages[j], vars[k]);
          }
        }

      }
    }

    }

  } else {

    const split = require('StringUtils').splitBy;
    const passed = split(setting_list, ',', ['"'])
      .filter((item) => item !=='');

    if (passed.length > 0) {

      const searchList = {};
      const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");

      for (let i = 0; i < passed.length; i++) {

        const varray = split(passed[i], '.', '"' )
          .filter((item) => item !=='');
        if (varray.length != 3) plv8.elog(ERROR, `Incorrect filter entry ${passed[i]}`);
        const sn = caseCheck(varray[0]);
        const pn = caseCheck(varray[1]);
        const vn = caseCheck(varray[2]);
        if (!searchList.hasOwnProperty(sn)) searchList[sn] = {};
        if (!searchList[sn].hasOwnProperty(pn)) searchList[sn][pn] = {};
        searchList[sn][pn][vn] = null;

      }

      const s = Object.getOwnPropertyNames(searchList);
      const schemasFiltered = schemas.filter(function(item) {
        return s.includes(item);
      });

      for (let i = 0; i < schemasFiltered.length; i++) {

        if (!result.hasOwnProperty(schemasFiltered[i])) result[schemasFiltered[i]] = {};
        const p = Object.getOwnPropertyNames(searchList[schemasFiltered[i]]);
        const packagesFiltered = Object.getOwnPropertyNames(aws_oracle_ext[schemasFiltered[i]]).filter(function(item) {
          return p.includes(item);

        });

        for (let j = 0; j < packagesFiltered.length; j++) {
          const v = Object.getOwnPropertyNames(searchList[schemasFiltered[i]][packagesFiltered[j]]);

          const varsFiltered = Object.getOwnPropertyNames(aws_oracle_ext[schemasFiltered[i]][packagesFiltered[j]]).filter(function(item) {
            return v.includes(item);
          });

          for (let k = 0; k < varsFiltered.length; k++) {

            if(!result[schemasFiltered[i]].hasOwnProperty(packagesFiltered[j])) result[schemasFiltered[i]][packagesFiltered[j]] = {};
            result[schemasFiltered[i]][packagesFiltered[j]][varsFiltered[k]] = returnValue(schemasFiltered[i], packagesFiltered[j], varsFiltered[k]);

          }

        }
      }
    }
  }
  return result;

]]></complex-attribute>
                        <category _I_D="53ac2df5-ca99-4128-ab14-69b2bafc3071" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="979c8e4a-eff3-4429-a246-9a7dce014738" name="sessiontimezone" subcategories-loading="none" object-loading="extended" context="sessiontimezone" is-trigger-function="0" unique-function-name="sessiontimezone" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304519" volatility="STABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sessiontimezone()">
                        <complex-attribute name="sql"><![CDATA[
  	
      SELECT  COALESCE(CURRENT_SETTING('TIMEZONE', TRUE), 'UTC');
      
]]></complex-attribute>
                        <category _I_D="a729fe75-1388-4806-b3e6-ad39bf53a5f5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="400de369-b6e5-4d8d-a83b-f3bd6825aa50" name="set_application_name" subcategories-loading="none" object-loading="extended" context="set_application_name" is-trigger-function="0" unique-function-name="set_application_name" is-aggregate="f" language-name="plpgsql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="void" function-arguments="p_app_name jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305252" volatility="VOLATILE" is-window="f" function-identity-arguments="p_app_name jsonb" overload-function-count="1" proc-language="plpgsql" function-signature="set_application_name(p_app_name jsonb)">
                        <complex-attribute name="sql"><![CDATA[
begin
  	execute 'set application_name = ' || quote_ident(p_app_name::json::text);
end;
]]></complex-attribute>
                        <category _I_D="30dd1ab4-d7be-4af6-96b6-657f20ff4dd4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9026a0e8-4723-469c-b0a8-8a3cd8ab36cc" name="set_extpack_variable" subcategories-loading="none" object-loading="extended" context="set_extpack_variable" is-trigger-function="0" unique-function-name="set_extpack_variable" is-aggregate="f" language-name="sql" arguments-datatypes="text,anyelement" is-returning-set="f" ret-datatype="void" function-arguments="variable_name text, variable_value anyelement DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304125" volatility="VOLATILE" is-window="f" function-identity-arguments="variable_name text, variable_value anyelement" overload-function-count="1" proc-language="sql" function-signature="set_extpack_variable(variable_name text, variable_value anyelement)">
                        <complex-attribute name="sql"><![CDATA[
SELECT aws_oracle_ext.set_package_variable
(
    variable_name => $1,
    variable_value => $2
);
]]></complex-attribute>
                        <category _I_D="57d1d408-137e-43cb-a0d1-a4472910da90" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="06972515-c20a-40b5-bd28-d6dfc372b2a6" name="set_package_initialized" subcategories-loading="none" object-loading="extended" context="set_package_initialized" is-trigger-function="0" unique-function-name="set_package_initialized" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="schema_name text, package_name text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304520" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name text, package_name text" overload-function-count="1" proc-language="plpgsql" function-signature="set_package_initialized(schema_name text, package_name text)" comment="&amp;#x000a; Sets a flag for the migrated package in state uninitialized in the current session, &amp;#x000a; to a re-execution for the initialization function.&amp;#x000a; &amp;#x000a; Parameters:&amp;#x000a;  schema_name -- migrated schema&amp;#x000a;  package_name -- migrated package&amp;#x000a;">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.set_package_variable
    (
        schema_name => set_package_initialized.schema_name,
        package_name => set_package_initialized.package_name,
        variable_name => 'Init$$',
        variable_value => TRUE
    );

END;
]]></complex-attribute>
                        <category _I_D="07d80c05-4ecd-46dc-bd17-66e55debbb84" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dcf6f751-69ab-4bf0-b84b-c5b550f237ed" name="set_package_uninitialized" subcategories-loading="none" object-loading="extended" context="set_package_uninitialized" is-trigger-function="0" unique-function-name="set_package_uninitialized" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="schema_name text, package_name text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304521" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name text, package_name text" overload-function-count="1" proc-language="plpgsql" function-signature="set_package_uninitialized(schema_name text, package_name text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.set_package_variable
    (
        schema_name => set_package_uninitialized.schema_name,
        package_name => set_package_uninitialized.package_name,
        variable_name => 'Init$$',
        variable_value => FALSE
    );

END;
]]></complex-attribute>
                        <category _I_D="7ae5b7ac-756f-40e2-a34d-509da3e3c140" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="152f8cd7-f42a-45ac-8c71-d32934e8015b" name="set_package_variable" subcategories-loading="none" object-loading="extended" context="set_package_variable" is-trigger-function="0" unique-function-name="set_package_variable" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,anyelement" is-returning-set="f" ret-datatype="void" function-arguments="schema_name text DEFAULT 'AWS_ORACLE_EXT'::text, package_name text DEFAULT 'AWS_ORACLE_ENV'::text, variable_name text DEFAULT ''::text, variable_value anyelement DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304060" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name text, package_name text, variable_name text, variable_value anyelement" overload-function-count="1" proc-language="plpgsql" function-signature="set_package_variable(schema_name text, package_name text, variable_name text, variable_value anyelement)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vschema_name TEXT := schema_name;
    vpackage_name TEXT := package_name;
BEGIN

    IF COALESCE(schema_name, 'AWS_ORACLE_EXT') <> 'AWS_ORACLE_EXT' AND

        COALESCE(package_name, 'AWS_ORACLE_ENV') <> 'AWS_ORACLE_ENV' THEN

        vschema_name := aws_oracle_ext.check_identifier_case(schema_name);
        vpackage_name := aws_oracle_ext.check_identifier_case(package_name);
    
        IF aws_oracle_ext.check_identifier_case(variable_name) <> 'init$$' THEN
        
            EXECUTE CONCAT
            (
                'SELECT ',
                schema_name,
                '.',
                package_name,
                '$Init()'
            );
    
        END IF;

    END IF;
    
    PERFORM aws_oracle_ext.set_package_variable_v8
    (
        sn => vschema_name,
        pn => vpackage_name,
        vn => aws_oracle_ext.check_identifier_case(variable_name),
        vv => variable_value::TEXT
    );

END;
]]></complex-attribute>
                        <category _I_D="c2e45c59-24e4-46dd-98a2-58675f9523e9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="45f9616b-ce33-4852-92ce-4f0aaa525642" name="set_package_variable_object" subcategories-loading="none" object-loading="extended" context="set_package_variable_object" is-trigger-function="0" unique-function-name="set_package_variable_object" is-aggregate="f" language-name="plpgsql" arguments-datatypes="name,name,name,anyelement" is-returning-set="f" ret-datatype="void" function-arguments="schema_name name, package_name name, object_name name, object_value anyelement" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304523" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name name, package_name name, object_name name, object_value anyelement" overload-function-count="1" proc-language="plpgsql" function-signature="set_package_variable_object(schema_name name, package_name name, object_name name, object_value anyelement)">
                        <complex-attribute name="sql"><![CDATA[  
  begin
    perform aws_oracle_ext.set_package_variable
      ( schema_name := schema_name
      , package_name := package_name
      , variable_name := object_name || '$OBJ'
      , variable_value := object_value::text );

    perform aws_oracle_ext.set_package_variable
      ( schema_name := schema_name
      , package_name := package_name
      , variable_name := object_name || '$TYPE'
      , variable_value := pg_typeof( object_value ) );
  end;
]]></complex-attribute>
                        <category _I_D="818cfff1-0e2d-4c8a-8b0c-8d73a6b29b52" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7df182bd-845f-4bb7-b6f1-c80e1151dacc" name="set_package_variable_object_field" subcategories-loading="none" object-loading="extended" context="set_package_variable_object_field" is-trigger-function="0" unique-function-name="set_package_variable_object_field" is-aggregate="f" language-name="plpgsql" arguments-datatypes="name,name,name,text,anyelement" is-returning-set="f" ret-datatype="void" function-arguments="schema_name name, package_name name, variable_name name, field_name text, field_value anyelement" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304522" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name name, package_name name, variable_name name, field_name text, field_value anyelement" overload-function-count="1" proc-language="plpgsql" function-signature="set_package_variable_object_field(schema_name name, package_name name, variable_name name, field_name text, field_value anyelement)">
                        <complex-attribute name="sql"><![CDATA[
  begin
    perform aws_oracle_ext.set_package_variable
      ( schema_name, package_name, variable_name || '.' || field_name, field_value );
  end;
]]></complex-attribute>
                        <category _I_D="2848557a-b239-4d43-9558-754707b447fd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="04f1598c-ef90-4bc8-ad5b-58a9e5ae5616" name="set_package_variable_v8" subcategories-loading="none" object-loading="extended" context="set_package_variable_v8" is-trigger-function="0" unique-function-name="set_package_variable_v8" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="sn text, pn text, vn text, vv text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304061" volatility="VOLATILE" is-window="f" function-identity-arguments="sn text, pn text, vn text, vv text" overload-function-count="1" proc-language="plv8" function-signature="set_package_variable_v8(sn text, pn text, vn text, vv text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
if (typeof(aws_oracle_ext) === 'undefined')aws_oracle_ext = {};
if (!aws_oracle_ext.hasOwnProperty(sn)) aws_oracle_ext[sn] = {};
if (!aws_oracle_ext[sn].hasOwnProperty(pn)) aws_oracle_ext[sn][pn] = {};

if (!(aws_oracle_ext[sn][pn][vn] instanceof Tree)) aws_oracle_ext[sn][pn][vn] = vv;

]]></complex-attribute>
                        <category _I_D="e85c65c1-62e5-4895-aa9f-8f83bc12266a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8362ca4a-5536-4cfa-b1b8-3760f27c41e7" name="set_service_setting" subcategories-loading="none" object-loading="extended" context="set_service_setting" is-trigger-function="0" unique-function-name="set_service_setting" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_service character varying, p_setting character varying, p_value character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304524" volatility="VOLATILE" is-window="f" function-identity-arguments="p_service character varying, p_setting character varying, p_value character varying" overload-function-count="1" proc-language="sql" function-signature="set_service_setting(p_service character varying, p_setting character varying, p_value character varying)">
                        <complex-attribute name="sql"><![CDATA[
  WITH 
  upd AS (
       UPDATE aws_oracle_ext.service_settings
       SET    value = p_value
       WHERE  service_settings.service = p_service
         AND  service_settings.setting = p_setting
       RETURNING service_settings.service, service_settings.setting
  )
  INSERT INTO aws_oracle_ext.service_settings(service, setting, value)
  SELECT p_service, p_setting, p_value
  WHERE  ( p_service, p_setting ) NOT IN (SELECT service, setting FROM upd);
]]></complex-attribute>
                        <category _I_D="a5db3240-1b6b-444d-a4cf-fd21b344866d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3f8a8d16-01e7-41af-a49c-914b429c31eb" name="set_version" subcategories-loading="none" object-loading="extended" context="set_version" is-trigger-function="0" unique-function-name="set_version" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="pcomponentversion character varying, pcomponentname character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304525" volatility="VOLATILE" is-window="f" function-identity-arguments="pcomponentversion character varying, pcomponentname character varying" overload-function-count="1" proc-language="plpgsql" function-signature="set_version(pcomponentversion character varying, pcomponentname character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  rowcount smallint;
BEGIN
	UPDATE aws_oracle_ext.versions 
	   SET componentversion = pComponentVersion
	 WHERE extpackcomponentname = pComponentName;	 
	GET DIAGNOSTICS rowcount = ROW_COUNT;
	
	IF rowcount < 1 THEN
	 INSERT INTO aws_oracle_ext.versions(extpackcomponentname,componentversion) 
	      VALUES (pComponentName,pComponentVersion);
	END IF;
END;
]]></complex-attribute>
                        <category _I_D="c77258e2-aa4a-488f-8786-1de9a957ac59" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f05dd271-a6fd-4133-958a-cbc9ff9a394b" name="setglobalvariable" subcategories-loading="none" object-loading="extended" context="setglobalvariable" is-trigger-function="0" unique-function-name="setglobalvariable" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,anyelement,json" is-returning-set="f" ret-datatype="void" function-arguments="proutinename text, pvariable text, pval anyelement DEFAULT NULL::text, poptions json DEFAULT NULL::json" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304101" volatility="VOLATILE" is-window="f" function-identity-arguments="proutinename text, pvariable text, pval anyelement, poptions json" overload-function-count="1" proc-language="plv8" function-signature="setglobalvariable(proutinename text, pvariable text, pval anyelement, poptions json)">
                        <complex-attribute name="sql"><![CDATA[
'use strict';
  if (typeof(require) !== 'function') {
    const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
    initColl();
  }
  const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
  const PackageTools = require('PackageTools');
  let parts = parser(proutinename);
  if (parts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
  const sn = parts[0].text;
  const pn = parts[2].text;
  
  parts = parser(pvariable);
  const recordTarget = parts.length == 1 ? false : true;
  const vn = parts[0].text;
  const valuePath = parts.slice(1);
  let writable = true;

  let isConstant = false;
  let srcGlobal = false;
  if (poptions != null && typeof(poptions) === 'object') {
    if (poptions.hasOwnProperty('constant')) isConstant = true;
    if (poptions.hasOwnProperty('srcGlobal')) srcGlobal = true;
  }

  if (typeof(aws_oracle_ext) === 'undefined')aws_oracle_ext = {};
  if (!aws_oracle_ext.hasOwnProperty(sn)) aws_oracle_ext[sn] = {};
  if (!aws_oracle_ext[sn].hasOwnProperty(pn)) aws_oracle_ext[sn][pn] = {};
  
  if (!aws_oracle_ext[sn][pn].hasOwnProperty('Init$$')) {
    let x = '$$';
    for (let i = 0; i < 16; i++) {
        if (sn.includes(x) || pn.includes(x)) {
            x = `$aws${(+((new Date).setMilliseconds(i))).toString(36)}$`;
            } 
        else {
            break;
            }
        }
    plv8.execute(`do language plpgsql ${x}begin PERFORM ${sn}.${pn}$Init(); end;${x}`);
  }
  
  

  let val;

  if (!srcGlobal) {
    val = pval;
  } else {
    parts = parser(poptions['srcGlobal']);
    const srcsn = parts[0].text;
    const srcpn = parts[2].text;
    const srcvaluePath = parts.slice(4);
    const srcvn = srcvaluePath[0].text;
    if (sn === srcsn && pn === srcpn && PackageTools.partsCompare(valuePath, srcvaluePath)) return;
    if (srcvaluePath.length == 1) {
      val = aws_oracle_ext[srcsn][srcpn][srcvn];
    } else {
      val = PackageTools.getRecordField(aws_oracle_ext[srcsn][srcpn][srcvn], srcvaluePath.slice(1));
    }
  }
  let isRecord = false;
  if (typeof(val) === 'undefined' || val == null || typeof(val) !== 'object' || val instanceof Date) {
    if (isConstant) writable = false;
  } else {
    isRecord = true;
    writable = false;
    if (isConstant) {
      val = PackageTools.deepFreeze(val);
    }
  }
  if (!aws_oracle_ext[sn][pn].hasOwnProperty(vn)) {
    Object.defineProperty(aws_oracle_ext[sn][pn], vn,
      {
        value: val,
        writable : writable,
        enumerable : true,
        configurable : false
      }
    );
  } else {
    if (!recordTarget) {
      if (!isRecord && (typeof(aws_oracle_ext[sn][pn][vn]) !== 'object' || aws_oracle_ext[sn][pn][vn] == null || aws_oracle_ext[sn][pn][vn] instanceof Date)) {
        aws_oracle_ext[sn][pn][vn] = val;
      } else {
        PackageTools.deepCopy(val, aws_oracle_ext[sn][pn][vn]);
      }
    } else {
      PackageTools.setRecordField(aws_oracle_ext[sn][pn][vn], valuePath, val);
    }
  }

]]></complex-attribute>
                        <category _I_D="274e1d84-39eb-4b34-88de-ce29cab63f49" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d37f1e1c-6ba2-4b01-8e9c-bfc677e981a2" name="sp_get_dbmail" subcategories-loading="none" object-loading="extended" context="sp_get_dbmail" is-trigger-function="0" unique-function-name="sp_get_dbmail" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,bigint,xml" is-returning-set="t" ret-datatype="table" function-arguments="p_limit integer DEFAULT 1" schema-id="304013" function-type="RET_DATASET" count-arguments="1" function-id="304526" volatility="VOLATILE" is-window="f" function-identity-arguments="p_limit integer" overload-function-count="1" proc-language="plpgsql" function-signature="sp_get_dbmail(p_limit integer)">
                        <complex-attribute name="sql"><![CDATA[
declare
  l_now timestamp with time zone := clock_timestamp();
begin
  return query
    update aws_oracle_ext.mail_messages m
       set read_at = l_now
      from ( 
        select mm.id 
          from aws_oracle_ext.mail_messages mm 
         where mm.read_at is null
           and pg_try_advisory_xact_lock( mm.id )
         limit p_limit 
           for update
      ) i
     where m.id = i.id
    returning m.id, xmlelement( name mail, null, xmlconcat( xmlelement(name source, null, m.sender ), xmlelement( name rawmessage, null, m.body ) ) ) ;
end;
]]></complex-attribute>
                        <category _I_D="7069a335-076f-47ec-8fb3-346f4a840b4e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4e32d67e-39b2-44ee-8dfa-043e01baa52a" name="sp_set_dbmail" subcategories-loading="none" object-loading="extended" context="sp_set_dbmail" is-trigger-function="0" unique-function-name="sp_set_dbmail" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bigint,integer,character varying,timestamp with time zone" is-returning-set="f" ret-datatype="void" function-arguments="par_mail_id bigint, par_sent_status integer, par_message character varying DEFAULT NULL::character varying, par_processed_at timestamp with time zone DEFAULT clock_timestamp()" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304527" volatility="VOLATILE" is-window="f" function-identity-arguments="par_mail_id bigint, par_sent_status integer, par_message character varying, par_processed_at timestamp with time zone" overload-function-count="1" proc-language="plpgsql" function-signature="sp_set_dbmail(par_mail_id bigint, par_sent_status integer, par_message character varying, par_processed_at timestamp with time zone)">
                        <complex-attribute name="sql"><![CDATA[
begin
  update aws_oracle_ext.mail_messages m
     set processed_at = par_processed_at
       , error_text = par_message
   where m.id = par_mail_id;
end;
]]></complex-attribute>
                        <category _I_D="724de2e2-fa88-4260-a53c-9989af16dade" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="72d04c43-6f87-4756-8e7c-3633dfcba368" name="spell" subcategories-loading="none" object-loading="extended" context="spell" is-trigger-function="0" unique-function-name="spell" is-aggregate="f" language-name="plv8" arguments-datatypes="internal,internal,internal" is-returning-set="f" ret-datatype="text" function-arguments="pval internal, pmodel internal, poptions internal" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304108" volatility="VOLATILE" is-window="f" function-identity-arguments="pval internal, pmodel internal, poptions internal" overload-function-count="1" proc-language="plv8" function-signature="spell(pval internal, pmodel internal, poptions internal)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const StringUtils = require('StringUtils');
const models = {
  "SSSP": () => pval.getSeconds(),
  "Y,YYYSP": () => pval.getFullYear(),
  "SYYYYSP": () => pval.getFullYear(),
  "YYYYSP": () => pval.getFullYear(),
  "YYYSP": () => String(pval.getFullYear()).substring(1),
  "YYSP": () => String(pval.getFullYear()).substring(2),
  "YSP": () => String(pval.getFullYear()).substring(3),
  "SCCSP": () => Math.ceil((pval.getFullYear() - 1) / 100),
  "CCSP": () => Math.ceil((pval.getFullYear() - 1) / 100),
  "RRRRSP": () => pval.getFullYear(),
  "RRSP": () => String(pval.getFullYear()).substring(2),
  "HH24SP": () => pval.getHours(),
  "HH12SP": () => {let hours = pval.getHours() % 12; return (hours == 0 ? 12 : hours);},
  "HHSP": () => {let hours = pval.getHours() % 12; return (hours == 0 ? 12 : hours);},
  "DDDSP": () => (Date.UTC(pval.getFullYear(), pval.getMonth(), pval.getDate()) - Date.UTC(pval.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000,
  "DDSP": () => pval.getDate(),
  "MISP": () => pval.getMinutes(),
  "MMSP": () => pval.getMonth() + 1,
  "QSP": () => Math.ceil(pval.getMonth() / 3),
  "WWSP": () => Math.floor((((Date.UTC(pval.getFullYear(), pval.getMonth(), pval.getDate()) - Date.UTC(pval.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000) + 6) / 7),
  "WSP": Math.ceil(pval.getDate() / 7),
  "IYYYSP": () => {let date = new Date(pval.getTime()); date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7); return date.getFullYear(); },
  "IYYSP": () => {let date = new Date(pval.getTime()); date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7); return String(date.getFullYear()).substring(1); },
  "IYSP": () => {let date = new Date(pval.getTime()); date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7); return String(date.getFullYear()).substring(2); },
  "ISP": () => {let date = new Date(pval.getTime()); date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7); return String(date.getFullYear()).substring(3); },
  "IWSP": () => {
    let date = new Date(pval.getTime());
    date.setHours(0, 0, 0, 0);
    date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
    let week1 = new Date(date.getFullYear(), 0, 4);
    return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);
  },
  "JSP": () => Math.floor(pval.getTime() /86400000 - (pval.getTimezoneOffset() / 1440) + 2440587.5) + 1,
  "FFSP": () => poptions.microseconds * 1000000000,
  "TZHSP": () => Math.abs(poptions.tzh),
  "TZMSP": () => Math.abs(poptions.tzm),
};
  
  let res = StringUtils.numToWords(models[pmodel.toUpperCase()]());

  if (/^[A-Z]\,?[A-Z]/.test(pmodel)) res = res.toUpperCase();
  if(/^[A-Z][a-z]/.test(pmodel)) {
    if (res.indexOf('-') == -1) {
      res = StringUtils.toTitleCase(res);
    } else {
      let tmpres = StringUtils.toTitleCase(res.replaceAll('-', ' '));
      const dashIndexes = [];
      [...res].forEach((e, idx) => {
        if (e === '-') dashIndexes.push(idx);
      });
      for (let i = 0; i < dashIndexes.length; i++) {
        tmpres = StringUtils.replaceAtposition(tmpres, dashIndexes[i], '-');
      }
      res = tmpres;
    }
  }
  return res.trim();

]]></complex-attribute>
                        <category _I_D="4881ba79-2f79-42ec-874d-2c846f2a59e8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="99517617-559f-460c-808c-73766546e99f" name="spell_timestamp" subcategories-loading="none" object-loading="extended" context="spell_timestamp" is-trigger-function="0" unique-function-name="spell_timestamp" is-aggregate="f" language-name="plv8" arguments-datatypes="timestamp without time zone,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval timestamp without time zone, pfmt character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304109" volatility="STABLE" is-window="f" function-identity-arguments="pval timestamp without time zone, pfmt character varying" overload-function-count="1" proc-language="plv8" function-signature="spell_timestamp(pval timestamp without time zone, pfmt character varying)">
                        <complex-attribute name="sql"><![CDATA[
const options ={};
let fmt = pfmt;
if (/FF[1-9]?SP/i.test(pfmt)) {
    fmt = fmt.replace(/[1-9]/,'');
    let plan = plv8.prepare('select extract(epoch from $1) AS e', [ 'timestamp' ]);
    const rows = plan.execute([ pval ]);
    let stMs = String(rows[0].e);
   	stMs = stMs.slice(stMs.indexOf('.')).substring(0,6);
   	options.microseconds = Number(stMs);

    plan.free();
}
const spell = plv8.find_function("aws_oracle_ext.spell");
return spell(pval, fmt, options);
]]></complex-attribute>
                        <category _I_D="015cb8f0-7151-4579-86bf-c5ac6bc899c0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3deb64e3-cbd6-460b-8c15-151a4dbb9208" name="spell_timestamptz" subcategories-loading="none" object-loading="extended" context="spell_timestamptz" is-trigger-function="0" unique-function-name="spell_timestamptz" is-aggregate="f" language-name="plv8" arguments-datatypes="timestamp with time zone,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval timestamp with time zone, pfmt character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304110" volatility="STABLE" is-window="f" function-identity-arguments="pval timestamp with time zone, pfmt character varying" overload-function-count="1" proc-language="plv8" function-signature="spell_timestamptz(pval timestamp with time zone, pfmt character varying)">
                        <complex-attribute name="sql"><![CDATA[
const options ={};
const spell = plv8.find_function("aws_oracle_ext.spell");
let fmt = pfmt;
if (/FF[1-9]?SP/i.test(pfmt)) {
    fmt = fmt.replace(/[1-9]/,'');
    let plan = plv8.prepare('select extract(epoch from $1) AS e', [ 'timestamptz' ]);
    const rows = plan.execute([ pval ]);
    let stMs = String(rows[0].e);
   	stMs = stMs.slice(stMs.indexOf('.')).substring(0,6);
   	options.microseconds = Number(stMs);

    plan.free();
    return spell(pval, pfmt, options);
}
if (/TZHSP/i.test(pfmt)) {
    let plan = plv8.prepare('select extract(TIMEZONE_HOUR from $1) AS e', [ 'timestamptz' ]);
    const rows = plan.execute([ pval ]);
   	options.tzh = rows[0].e;

    plan.free();
    return spell(pval, pfmt, options);
}

if (/TZMSP/i.test(pfmt)) {
    let plan = plv8.prepare('select extract(TIMEZONE_MINUTES from $1) AS e', [ 'timestamptz' ]);
    const rows = plan.execute([ pval ]);
   	options.tzm = rows[0].e;

    plan.free();
    return spell(pval, pfmt, options);
}


]]></complex-attribute>
                        <category _I_D="685abec2-a4f0-4b46-b994-17b35b38ae51" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="43edc89f-c431-47e3-854f-f20af2ff03d1" name="sqs_aa_lambda_payload" subcategories-loading="none" object-loading="extended" context="sqs_aa_lambda_payload" is-trigger-function="0" unique-function-name="sqs_aa_lambda_payload" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="fn_name text, fn_args text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304999" volatility="VOLATILE" is-window="f" function-identity-arguments="fn_name text, fn_args text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_aa_lambda_payload(fn_name text, fn_args text)">
                        <complex-attribute name="sql"><![CDATA[
begin
	return aws_oracle_ext.awslambda_fn(fn_name, fn_args::json)::text;
end;
]]></complex-attribute>
                        <category _I_D="1e6d2a24-9a89-47f0-81ae-73e59bb5203e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dd5c712a-e5c7-4582-85e0-c06d6b7e892b" name="sqs_aq_create_queue" subcategories-loading="none" object-loading="extended" context="sqs_aq_create_queue" is-trigger-function="0" unique-function-name="sqs_aq_create_queue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="pvqueuename text, pvqueueattributes text DEFAULT aws_oracle_ext.sqs_default_queue_attributes()" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305000" volatility="VOLATILE" is-window="f" function-identity-arguments="pvqueuename text, pvqueueattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_aq_create_queue(pvqueuename text, pvqueueattributes text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	/*create queue*/
	LambdaArn constant varchar(250) := aws_oracle_ext.sqs_lu_inited_funcarn('CREATE_QUEUE');
	QueueName constant varchar(30) := 'QueueName';
	lvJSON text;
	lvResult text;
begin
	--
	if pvQueueName = '' then
		raise exception 'invalid value NULL, QUEUE_NAME should be defined'
		using hint  = 'Please check your user Queue name';
	end if;

	with q as (select key, pvQueueName as value
	             from json_each_text(pvQueueAttributes::json)
	            where lower(key) = lower(QueueName)
	           union all
	           select key, value
	             from json_each_text(pvQueueAttributes::json)
	            where lower(key) != lower(QueueName))
	select json_object(array_agg(key), array_agg(value))::text
	  into lvJSON
	 from (
	       select QueueName as key, pvQueueName as value
	       where not exists (select 1 from q where lower(key) = lower(QueueName))
			union all
		  select key, value from q
			) a;

	lvResult = aws_oracle_ext.sqs_aa_lambda_payload(LambdaArn, lvJSON);
	return lvResult;
end;
]]></complex-attribute>
                        <category _I_D="ac97825f-512d-4958-9023-d5518f669982" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="62a8c4e9-b739-4515-a717-647c6eb8b35f" name="sqs_aq_delete_message" subcategories-loading="none" object-loading="extended" context="sqs_aq_delete_message" is-trigger-function="0" unique-function-name="sqs_aq_delete_message" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="pvqueueurl text, pvreceipthandle text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305005" volatility="VOLATILE" is-window="f" function-identity-arguments="pvqueueurl text, pvreceipthandle text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_aq_delete_message(pvqueueurl text, pvreceipthandle text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	/*delete message*/
	LambdaArn constant varchar(4000) := aws_oracle_ext.sqs_lu_inited_funcarn('DELETE_MESSAGE');
	QueueUrl constant varchar(30) := 'QueueUrl';
	ReceiptHandle constant varchar(30) := 'ReceiptHandle';
	Service constant varchar(30) := 'sqs';
	lvJSON text;
	lvResult text;
begin
	with q (key, value) as (values (QueueUrl, pvQueueUrl), (ReceiptHandle, pvReceiptHandle)
	       )
    select json_object(array_agg(key), array_agg(value))
      into lvJSON
     from q;

    lvResult = aws_oracle_ext.sqs_aa_lambda_payload(LambdaArn, lvJSON);

    return lvResult;
end;
]]></complex-attribute>
                        <category _I_D="8293d3af-6d8a-4892-b95f-f8710d847bb5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7e1db9c3-72ba-449f-a28b-87d1f87af621" name="sqs_aq_delete_queue" subcategories-loading="none" object-loading="extended" context="sqs_aq_delete_queue" is-trigger-function="0" unique-function-name="sqs_aq_delete_queue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="pvqueueurl text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305001" volatility="VOLATILE" is-window="f" function-identity-arguments="pvqueueurl text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_aq_delete_queue(pvqueueurl text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	/*delete queue*/
	LambdaArn constant varchar(250) := aws_oracle_ext.sqs_lu_inited_funcarn('DELETE_QUEUE');
	QueueUrl constant varchar(30) := 'QueueUrl';
	AttributeNames constant varchar(30) := 'AttributeNames';
	lvJSON text;
	lvResult text;
begin
	lvJSON = json_object(array_agg(QueueUrl), array_agg(pvQueueUrl));
	lvResult = aws_oracle_ext.sqs_aa_lambda_payload(LambdaArn, lvJSON);
	return lvResult;
end;
]]></complex-attribute>
                        <category _I_D="09b0671e-c1e8-4d94-908e-2c30a4cf3fd8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="498f0654-0ca3-4ee3-a635-791e8ad7d403" name="sqs_aq_get_message" subcategories-loading="none" object-loading="extended" context="sqs_aq_get_message" is-trigger-function="0" unique-function-name="sqs_aq_get_message" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="pvqueueurl text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305002" volatility="VOLATILE" is-window="f" function-identity-arguments="pvqueueurl text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_aq_get_message(pvqueueurl text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	/*receive message*/
	LambdaArn constant varchar(250) := aws_oracle_ext.sqs_lu_inited_funcarn('GET_MESSAGE');
	QueueUrl constant varchar(30) := 'QueueUrl';
	lvJSON text;
	lvResult text;
begin
	lvJSON = json_object(array_agg(QueueUrl), array_agg(pvQueueUrl));
	lvResult = aws_oracle_ext.sqs_aa_lambda_payload(LambdaArn, lvJSON);
	return lvResult;
end;
]]></complex-attribute>
                        <category _I_D="4162d427-5f30-4328-8f15-f7490273ca98" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6b98e633-ed20-4346-9eb7-11fccabbbc42" name="sqs_aq_get_messages_body" subcategories-loading="none" object-loading="extended" context="sqs_aq_get_messages_body" is-trigger-function="0" unique-function-name="sqs_aq_get_messages_body" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,character varying,character varying,character varying,text" is-returning-set="t" ret-datatype="table" function-arguments="pvqueueurl text" schema-id="304013" function-type="RET_DATASET" count-arguments="1" function-id="305003" volatility="VOLATILE" is-window="f" function-identity-arguments="pvqueueurl text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_aq_get_messages_body(pvqueueurl text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lvStatusCode text;
	lvResult json;
begin
	lvResult := aws_oracle_ext.sqs_aq_get_message(pvQueueUrl)::json;

	lvStatusCode := trim(both '"' from json_extract_path(lvResult, 'statusCode')::text);

	if lvStatusCode = '200' then
		return query
		select "MessageId" as MessageId, "ReceiptHandle" as ReceiptHandle, "MD5OfBody" as MD5OfBody, "Body" as Body
		from json_to_recordset(json_extract_path(lvResult, aws_oracle_ext.sqs_queue_body())
		                      ) as x("MessageId" varchar(250),
		                             "ReceiptHandle" varchar(4000),
		                             "MD5OfBody" varchar(250),
		                             "Body" text);

    else
	    return query
	    select null::varchar(250) as MessageId, null::varchar(4000) as ReceiptHandle,
	           null::varchar(250) as MD5OfBody, lvResult::text as Body;
    end if;
end;
]]></complex-attribute>
                        <category _I_D="03b76f29-0f4e-4b56-97f5-eb52da0b475b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="65942351-bd67-4e45-8c8f-e9a79711da47" name="sqs_aq_send_message" subcategories-loading="none" object-loading="extended" context="sqs_aq_send_message" is-trigger-function="0" unique-function-name="sqs_aq_send_message" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="pvqueueurl text, pvmessagebody text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305004" volatility="VOLATILE" is-window="f" function-identity-arguments="pvqueueurl text, pvmessagebody text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_aq_send_message(pvqueueurl text, pvmessagebody text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	QueueUrl constant varchar(30) := 'QueueUrl';
	MessageBody constant varchar(30) := 'MessageBody';
	LambdaArn constant varchar(250) := sqs_lu_inited_funcarn('SEND_MESSAGE');
	lvJSON text;
	lvResult text;
begin
	with q (key, value) as (values (QueueUrl, pvQueueUrl), (MessageBody, pvMessageBody)
	       )
    select json_object(array_agg(key), array_agg(value))
      into lvJSON
     from q;

    lvResult = sqs_aa_lambda_payload(LambdaArn, lvJSON);

    return lvResult;
end;
]]></complex-attribute>
                        <category _I_D="a42392d6-1a31-4d51-aa53-3e1fc600d88b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="589a122c-768f-4b8a-9587-a4ade27bd651" name="sqs_before" subcategories-loading="none" object-loading="extended" context="sqs_before" is-trigger-function="0" unique-function-name="sqs_before" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304952" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_before()">
                        <complex-attribute name="sql"><![CDATA[ select 2]]></complex-attribute>
                        <category _I_D="5633e6a3-6d32-403e-b76b-4dae2d88aec0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e019b2b9-130d-4227-9bc0-3cc283b44a99" name="sqs_browse" subcategories-loading="none" object-loading="extended" context="sqs_browse" is-trigger-function="0" unique-function-name="sqs_browse" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304953" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_browse()">
                        <complex-attribute name="sql"><![CDATA[ select 1]]></complex-attribute>
                        <category _I_D="19071407-525a-4699-bda5-4416f683819c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="de7d13c5-4490-4d1a-8292-1d007794692b" name="sqs_default_error" subcategories-loading="none" object-loading="extended" context="sqs_default_error" is-trigger-function="0" unique-function-name="sqs_default_error" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304954" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_default_error()">
                        <complex-attribute name="sql"><![CDATA[select 'ERROR.Something gone wrong!']]></complex-attribute>
                        <category _I_D="7b57d403-eb58-4987-8b29-53306afb5f41" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="084f2225-8c3a-48a8-b2c0-c5a5af9eb07a" name="sqs_default_queue_attributes" subcategories-loading="none" object-loading="extended" context="sqs_default_queue_attributes" is-trigger-function="0" unique-function-name="sqs_default_queue_attributes" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304955" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_default_queue_attributes()">
                        <complex-attribute name="sql"><![CDATA[select '{"QueueName": "", "FifoQueue": "true", "Policy": ""}']]></complex-attribute>
                        <category _I_D="b669ebba-bc23-4caa-b4db-184f923a1d14" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9edab796-6097-4d1f-be6e-f67201d7c36c" name="sqs_expired" subcategories-loading="none" object-loading="extended" context="sqs_expired" is-trigger-function="0" unique-function-name="sqs_expired" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304956" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_expired()">
                        <complex-attribute name="sql"><![CDATA[ select 3]]></complex-attribute>
                        <category _I_D="d8622035-8fb3-4f5a-bf66-33caf53e1c79" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bebe7bdb-84c1-45af-aeca-6ebbcef8958c" name="sqs_first_message" subcategories-loading="none" object-loading="extended" context="sqs_first_message" is-trigger-function="0" unique-function-name="sqs_first_message" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304957" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_first_message()">
                        <complex-attribute name="sql"><![CDATA[ select 1]]></complex-attribute>
                        <category _I_D="a468ecc3-4fae-4823-8c37-b68c9b6a37a5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a740197c-13a0-4a60-84b9-41d3047d8bc6" name="sqs_forever" subcategories-loading="none" object-loading="extended" context="sqs_forever" is-trigger-function="0" unique-function-name="sqs_forever" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304958" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_forever()">
                        <complex-attribute name="sql"><![CDATA[ select -1]]></complex-attribute>
                        <category _I_D="314deee5-659a-4f01-96fb-6afee8c6767e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9599b6a4-dcfd-4bb8-a6d2-e83d3e18b0f4" name="sqs_immediate" subcategories-loading="none" object-loading="extended" context="sqs_immediate" is-trigger-function="0" unique-function-name="sqs_immediate" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304959" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_immediate()">
                        <complex-attribute name="sql"><![CDATA[ select 1]]></complex-attribute>
                        <category _I_D="580ee89a-0944-4b7c-a975-bf3258dada37" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="590780d3-c0e6-44a1-a52a-034b3610c9df" name="sqs_init_aq$_agent" subcategories-loading="none" object-loading="extended" context="sqs_init_aq$_agent" is-trigger-function="0" unique-function-name="sqs_init_aq$_agent" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,double precision" is-returning-set="f" ret-datatype="sqs_aq$_agent" function-arguments="name text DEFAULT NULL::text, address text DEFAULT NULL::text, protocol double precision DEFAULT NULL::double precision" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304982" volatility="IMMUTABLE" is-window="f" function-identity-arguments="name text, address text, protocol double precision" overload-function-count="1" proc-language="sql" function-signature="sqs_init_aq$_agent(name text, address text, protocol double precision)">
                        <complex-attribute name="sql"><![CDATA[ select (name, address, coalesce(protocol, 0)):: aws_oracle_ext.SQS_AQ$_AGENT;]]></complex-attribute>
                        <category _I_D="166d80b0-13ab-47fe-93ba-e29e751a1769" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dc31d326-ed21-4f22-a923-5261f10cd729" name="sqs_init_aq$_sig_prop" subcategories-loading="none" object-loading="extended" context="sqs_init_aq$_sig_prop" is-trigger-function="0" unique-function-name="sqs_init_aq$_sig_prop" is-aggregate="f" language-name="sql" arguments-datatypes="bytea,text,text,text,text,bytea" is-returning-set="f" ret-datatype="sqs_aq$_sig_prop" function-arguments="signature bytea DEFAULT NULL::bytea, canalgo text DEFAULT NULL::text, digalgo text DEFAULT NULL::text, sigalgo text DEFAULT NULL::text, certificate text DEFAULT NULL::text, digval bytea DEFAULT NULL::bytea" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304983" volatility="IMMUTABLE" is-window="f" function-identity-arguments="signature bytea, canalgo text, digalgo text, sigalgo text, certificate text, digval bytea" overload-function-count="1" proc-language="sql" function-signature="sqs_init_aq$_sig_prop(signature bytea, canalgo text, digalgo text, sigalgo text, certificate text, digval bytea)">
                        <complex-attribute name="sql"><![CDATA[ select (signature, canalgo, digalgo, sigalgo, certificate, digval)::aws_oracle_ext.SQS_aq$_sig_prop;
]]></complex-attribute>
                        <category _I_D="aa0591cf-0388-42fc-bbfb-a2d3a969a953" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="635b9950-5731-4030-9cb8-d56b835b62e2" name="sqs_init_dbms_aq$dequeue_options_t" subcategories-loading="none" object-loading="extended" context="sqs_init_dbms_aq$dequeue_options_t" is-trigger-function="0" unique-function-name="sqs_init_dbms_aq$dequeue_options_t" is-aggregate="f" language-name="sql" arguments-datatypes="text,integer,integer,integer,integer,bytea,text,text,json,text,integer" is-returning-set="f" ret-datatype="dbms_aq$dequeue_options_t" function-arguments="consumer_name text DEFAULT NULL::text, dequeue_mode integer DEFAULT NULL::integer, navigation integer DEFAULT NULL::integer, visibility integer DEFAULT NULL::integer, wait integer DEFAULT NULL::integer, msgid bytea DEFAULT NULL::bytea, correlation text DEFAULT NULL::text, deq_condition text DEFAULT NULL::text, signature json DEFAULT NULL::json, transformation text DEFAULT NULL::text, delivery_mode integer DEFAULT NULL::integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="11" function-id="304984" volatility="IMMUTABLE" is-window="f" function-identity-arguments="consumer_name text, dequeue_mode integer, navigation integer, visibility integer, wait integer, msgid bytea, correlation text, deq_condition text, signature json, transformation text, delivery_mode integer" overload-function-count="1" proc-language="sql" function-signature="sqs_init_dbms_aq$dequeue_options_t(consumer_name text, dequeue_mode integer, navigation integer, visibility integer, wait integer, msgid bytea, correlation text, deq_condition text, signature json, transformation text, delivery_mode integer)">
                        <complex-attribute name="sql"><![CDATA[ select (
consumer_name ,
coalesce(dequeue_mode, aws_oracle_ext.sqs_remove()),
coalesce(navigation,aws_oracle_ext.sqs_next_message()),
coalesce(visibility,aws_oracle_ext.sqs_on_commit()),
coalesce(wait, aws_oracle_ext.sqs_forever()),
msgid,
correlation,
deq_condition,
json_populate_record(null::aws_oracle_ext.SQS_aq$_sig_prop, signature),
transformation,
coalesce(delivery_mode, aws_oracle_ext.sqs_persistent())
                      )::aws_oracle_ext.dbms_aq$dequeue_options_t;]]></complex-attribute>
                        <category _I_D="3b9e0c9e-1bed-4ebd-8168-fbb7c6316e6a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="69324313-e3b1-402c-a63f-d0d68cbd7d21" name="sqs_init_dbms_aq$enqueue_options_t" subcategories-loading="none" object-loading="extended" context="sqs_init_dbms_aq$enqueue_options_t" is-trigger-function="0" unique-function-name="sqs_init_dbms_aq$enqueue_options_t" is-aggregate="f" language-name="sql" arguments-datatypes="integer,bytea,integer,text,integer" is-returning-set="f" ret-datatype="dbms_aq$enqueue_options_t" function-arguments="visibility integer DEFAULT NULL::integer, relative_msgid bytea DEFAULT NULL::bytea, sequence_deviation integer DEFAULT NULL::integer, transformation text DEFAULT NULL::text, delivery_mode integer DEFAULT NULL::integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304985" volatility="IMMUTABLE" is-window="f" function-identity-arguments="visibility integer, relative_msgid bytea, sequence_deviation integer, transformation text, delivery_mode integer" overload-function-count="1" proc-language="sql" function-signature="sqs_init_dbms_aq$enqueue_options_t(visibility integer, relative_msgid bytea, sequence_deviation integer, transformation text, delivery_mode integer)">
                        <complex-attribute name="sql"><![CDATA[ select (coalesce(visibility, aws_oracle_ext.sqs_on_commit()),
                      relative_msgid, sequence_deviation, transformation,
                      coalesce(delivery_mode, aws_oracle_ext.sqs_persistent())
                      )::aws_oracle_ext.dbms_aq$enqueue_options_t;]]></complex-attribute>
                        <category _I_D="1aae4fe3-5c16-4520-96fe-ca142c326f69" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="408af1e6-956e-4d4d-ae88-db5bb6e4cdbd" name="sqs_init_dbms_aq$message_properties_t" subcategories-loading="none" object-loading="extended" context="sqs_init_dbms_aq$message_properties_t" is-trigger-function="0" unique-function-name="sqs_init_dbms_aq$message_properties_t" is-aggregate="f" language-name="sql" arguments-datatypes="integer,integer,integer,text,integer,json,text,timestamp without time zone,integer,json,bytea,json,text,text,integer" is-returning-set="f" ret-datatype="dbms_aq$message_properties_t" function-arguments="priority integer DEFAULT NULL::integer, delay integer DEFAULT NULL::integer, expiration integer DEFAULT NULL::integer, correlation text DEFAULT NULL::text, attempts integer DEFAULT NULL::integer, recipient_list json DEFAULT NULL::json, exception_queue text DEFAULT NULL::text, enqueue_time timestamp without time zone DEFAULT NULL::timestamp without time zone, state integer DEFAULT NULL::integer, sender_id json DEFAULT NULL::json, original_msgid bytea DEFAULT NULL::bytea, signature json DEFAULT NULL::json, transaction_group text DEFAULT NULL::text, user_property text DEFAULT NULL::text, delivery_mode integer DEFAULT NULL::integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="15" function-id="304986" volatility="IMMUTABLE" is-window="f" function-identity-arguments="priority integer, delay integer, expiration integer, correlation text, attempts integer, recipient_list json, exception_queue text, enqueue_time timestamp without time zone, state integer, sender_id json, original_msgid bytea, signature json, transaction_group text, user_property text, delivery_mode integer" overload-function-count="1" proc-language="sql" function-signature="sqs_init_dbms_aq$message_properties_t(priority integer, delay integer, expiration integer, correlation text, attempts integer, recipient_list json, exception_queue text, enqueue_time timestamp without time zone, state integer, sender_id json, original_msgid bytea, signature json, transaction_group text, user_property text, delivery_mode integer)">
                        <complex-attribute name="sql"><![CDATA[ select (
coalesce(priority,1),
coalesce(delay, aws_oracle_ext.sqs_no_delay()),
coalesce(expiration, aws_oracle_ext.sqs_never()),
correlation,
attempts,
recipient_list,
exception_queue,
enqueue_time,
state,
json_populate_record(null::aws_oracle_ext.sqs_aq$_agent, sender_id),
original_msgid,
json_populate_record(null::aws_oracle_ext.sqs_aq$_sig_prop, signature),
transaction_group,
user_property,
coalesce(delivery_mode, aws_oracle_ext.sqs_persistent())
)::aws_oracle_ext.dbms_aq$message_properties_t;]]></complex-attribute>
                        <category _I_D="7e05ea9a-464e-4b9b-9111-3237ede27dcf" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="752db39d-cc20-4855-9c21-0bd5c0a3d0ef" name="sqs_locked" subcategories-loading="none" object-loading="extended" context="sqs_locked" is-trigger-function="0" unique-function-name="sqs_locked" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304960" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_locked()">
                        <complex-attribute name="sql"><![CDATA[ select 2]]></complex-attribute>
                        <category _I_D="46cb6f00-9e83-4611-8957-084191fc40af" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="12125824-2d99-487d-83a3-9fadb856cac6" name="sqs_lu_create_queue_table" subcategories-loading="none" object-loading="extended" context="sqs_lu_create_queue_table" is-trigger-function="0" unique-function-name="sqs_lu_create_queue_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="pvtablename text, pvtypename text, pvtableschema text DEFAULT ''::text, pvtypeschema text DEFAULT ''::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304987" volatility="VOLATILE" is-window="f" function-identity-arguments="pvtablename text, pvtypename text, pvtableschema text, pvtypeschema text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_lu_create_queue_table(pvtablename text, pvtypename text, pvtableschema text, pvtypeschema text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lrT aws_oracle_ext.sqs_queues_tables%rowtype;

	TABLE_DDL  text = 'CREATE TABLE %s.%s '
						'(q_name VARCHAR(61), '
						'msgid BYTEA, '
						'corrid VARCHAR(128), '
						'priority DOUBLE PRECISION, '
						'state DOUBLE PRECISION, '
						'delay TIMESTAMP (6) WITHOUT TIME ZONE, '
						'expiration DOUBLE PRECISION, '
						'time_manager_info TIMESTAMP (6) WITHOUT TIME ZONE, '
						'local_order_no DOUBLE PRECISION, '
						'chain_no DOUBLE PRECISION, '
						'cscn DOUBLE PRECISION, '
						'dscn DOUBLE PRECISION, '
						'enq_time TIMESTAMP (6) WITHOUT TIME ZONE, '
						'enq_uid VARCHAR(30), '
						'enq_tid VARCHAR(30), '
						'deq_time TIMESTAMP (6) WITHOUT TIME ZONE, '
						'deq_uid VARCHAR(30), '
						'deq_tid VARCHAR(30), '
						'retry_count DOUBLE PRECISION, '
						'exception_qschema VARCHAR(30), '
						'exception_queue VARCHAR(30), '
						'step_no DOUBLE PRECISION, '
						'recipient_key DOUBLE PRECISION, '
						'dequeue_msgid BYTEA, '
						'sender_name VARCHAR(30), '
						'sender_address VARCHAR(1024), '
						'sender_protocol DOUBLE PRECISION, '
						'user_data %s.%s, '
						'user_prop VARCHAR(8000), '
						'primary KEY (MSGID)'
						')';
	REGISTER_TABLE text = 'INSERT INTO aws_oracle_ext.sqs_queues_tables '
						  '(tschema, tname, tdatatypeschema, tdatatypename) '
						  'VALUES '
						  '(%s, %s, %s, %s)';
	EXECUTE_BLOCK text = '%s;'
				         '%s;';
begin
	lrT.tschema := lower(coalesce(nullif(pvTableSchema, ''), current_schema()));
	lrT.tname := lower(pvTableName);
	lrT.tdatatypeschema := lower(coalesce(nullif(pvTypeSchema, ''), current_schema()));
	lrT.tdatatypename := lower(pvTypeName);

	select t.user_defined_type_schema,
		   t.user_defined_type_name
	  into lrT.tdatatypeschema,
	       lrT.tdatatypename
	  from information_schema.user_defined_types t
	 where t.user_defined_type_schema = lrT.tdatatypeschema
	   and t.user_defined_type_name = lrT.tdatatypename;

	if nullif(lrT.tdatatypeschema, '') is not null and nullif(lrT.tdatatypename, '') is not null then

		TABLE_DDL := format(TABLE_DDL, lrT.tschema, lrT.tname, lrT.tdatatypeschema, lrT.tdatatypename);
		REGISTER_TABLE := format(REGISTER_TABLE, quote_literal(lrT.tschema), quote_literal(lrT.tname), quote_literal(lrT.tdatatypeschema), quote_literal(lrT.tdatatypename));

		EXECUTE_BLOCK := format(EXECUTE_BLOCK, TABLE_DDL, REGISTER_TABLE);

		EXECUTE EXECUTE_BLOCK;
	else
		raise exception '%', aws_oracle_ext.sqs_default_error();
	end if;
end;
]]></complex-attribute>
                        <category _I_D="0a162ac0-0d2c-4d2a-890b-24fc432720d5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="591086bc-4c0a-439d-a197-fb38deb04471" name="sqs_lu_define_table" subcategories-loading="none" object-loading="extended" context="sqs_lu_define_table" is-trigger-function="0" unique-function-name="sqs_lu_define_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="record" function-arguments="pvtablename text, OUT ovschemaname text, OUT ovtablename text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304988" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pvtablename text, OUT ovschemaname text, OUT ovtablename text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_lu_define_table(pvtablename text, OUT ovschemaname text, OUT ovtablename text)">
                        <complex-attribute name="sql"><![CDATA[
begin
	ovtablename := coalesce(nullif(split_part(lower(pvtablename), '.', 2), ''), lower(pvtablename));

	if lower(pvtablename) = ovtablename then
		ovschemaname = current_schema();
	else
		ovschemaname := split_part(lower(pvtablename), '.', 1);
	end if;
end;
]]></complex-attribute>
                        <category _I_D="fc815854-74de-497a-858b-4d4e0f2db7c3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2b43fae6-eced-434a-b30a-e4b1c0c7434c" name="sqs_lu_define_type" subcategories-loading="none" object-loading="extended" context="sqs_lu_define_type" is-trigger-function="0" unique-function-name="sqs_lu_define_type" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="record" function-arguments="pvtypename text, OUT ovschemaname text, OUT ovtypename text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304989" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pvtypename text, OUT ovschemaname text, OUT ovtypename text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_lu_define_type(pvtypename text, OUT ovschemaname text, OUT ovtypename text)">
                        <complex-attribute name="sql"><![CDATA[
begin
	select a.ovschemaname, a.ovtablename
	  into ovschemaname, ovtypename
 	from aws_oracle_ext.sqs_lu_define_table(pvtypename) a;
end;
]]></complex-attribute>
                        <category _I_D="a55949a6-6a20-4be1-9154-ad69e44cf320" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8ccfcc4c-8c8c-44ac-9803-70fa4f021225" name="sqs_lu_delete_queue_message" subcategories-loading="none" object-loading="extended" context="sqs_lu_delete_queue_message" is-trigger-function="0" unique-function-name="sqs_lu_delete_queue_message" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="queue text, msgid text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304992" volatility="VOLATILE" is-window="f" function-identity-arguments="queue text, msgid text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_lu_delete_queue_message(queue text, msgid text)">
                        <complex-attribute name="sql"><![CDATA[
declare
DELETE_DDL  text = 'DELETE FROM %s.%s t'
						' WHERE t.q_name = %s and'
						' t.msgid = %s';

lrT aws_oracle_ext.sqs_queues_tables%rowtype;
begin
	lrT := aws_oracle_ext.sqs_lu_inited_queuetbl(pvname := queue);
	DELETE_DDL := format(DELETE_DDL, lrT.tschema, lrT.tname, quote_literal(queue), quote_literal(msgid));

	EXECUTE DELETE_DDL;
end;
]]></complex-attribute>
                        <category _I_D="56f59543-b72f-4010-8f8b-ea79764c8344" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="eeb4214a-3edf-44f6-bb81-6c96b2ebf2b8" name="sqs_lu_delete_queue_table" subcategories-loading="none" object-loading="extended" context="sqs_lu_delete_queue_table" is-trigger-function="0" unique-function-name="sqs_lu_delete_queue_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="pvqueuename text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304990" volatility="VOLATILE" is-window="f" function-identity-arguments="pvqueuename text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_lu_delete_queue_table(pvqueuename text)">
                        <complex-attribute name="sql"><![CDATA[
begin
	DELETE FROM aws_oracle_ext.sqs_queues_settings WHERE qname = pvqueuename;
end;
]]></complex-attribute>
                        <category _I_D="251aef43-05e3-4c4f-ab88-23ad847b59fc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="746a2cc8-139b-4d98-8643-7b461fb342da" name="sqs_lu_drop_queue_table" subcategories-loading="none" object-loading="extended" context="sqs_lu_drop_queue_table" is-trigger-function="0" unique-function-name="sqs_lu_drop_queue_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="pvtablename text, pvschemaname text DEFAULT ''::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304993" volatility="VOLATILE" is-window="f" function-identity-arguments="pvtablename text, pvschemaname text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_lu_drop_queue_table(pvtablename text, pvschemaname text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lvSchemaName text := coalesce(nullif(pvschemaname, ''), current_schema());
	lvTableName text := pvtablename;
	UNREGISTER_TABLE text := 'DELETE FROM aws_oracle_ext.sqs_queues_tables WHERE tschema = %s and tname = %s';
	TABLE_DDL  text := 'DROP TABLE %s.%s';
	EXECUTE_BLOCK text := '%s;'
	                      '%s;';
	lnQueueRegistered int;
begin

  select count(1)
    into lnQueueRegistered
	from aws_oracle_ext.sqs_vw_queues_settings q
	where q.tschema = lvSchemaName
      and q.tname = lvTableName;

    if lnQueueRegistered = 0 then
		UNREGISTER_TABLE := format(UNREGISTER_TABLE, quote_literal(lvSchemaName),quote_literal(pvTableName));
		TABLE_DDL := format(TABLE_DDL, lvSchemaName, pvTableName);
		EXECUTE_BLOCK := format(EXECUTE_BLOCK, UNREGISTER_TABLE, TABLE_DDL);
		EXECUTE EXECUTE_BLOCK;
	else
		raise exception '%', aws_oracle_ext.sqs_default_error();
	end if;

end;
]]></complex-attribute>
                        <category _I_D="f601dcd9-06a7-4d2a-81e2-ecaa1cf3a73a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ec967713-b8c5-455e-ba6a-775bb159f963" name="sqs_lu_inited_funcarn" subcategories-loading="none" object-loading="extended" context="sqs_lu_inited_funcarn" is-trigger-function="0" unique-function-name="sqs_lu_inited_funcarn" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="varchar" function-arguments="pvaction text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304994" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pvaction text" overload-function-count="1" proc-language="sql" function-signature="sqs_lu_inited_funcarn(pvaction text)">
                        <complex-attribute name="sql"><![CDATA[
	select f.Arn
	  from aws_oracle_ext.sqs_functions_settings f
	 where f.fAction = pvAction
	;
]]></complex-attribute>
                        <category _I_D="924be19b-3216-4841-a216-547101fe08d2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0b243a87-12d0-40f0-b546-9b42bec6cc2c" name="sqs_lu_inited_queuetbl" subcategories-loading="none" object-loading="extended" context="sqs_lu_inited_queuetbl" is-trigger-function="0" unique-function-name="sqs_lu_inited_queuetbl" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="sqs_queues_tables" function-arguments="pvname text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304995" volatility="VOLATILE" is-window="f" function-identity-arguments="pvname text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_lu_inited_queuetbl(pvname text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lrT aws_oracle_ext.sqs_queues_tables%rowtype;
	lnTID integer;
begin

	select -1 id, tschema, tname, tdatatypeschema, tdatatypename
	  into lrT
	  from aws_oracle_ext.sqs_vw_queues_settings q
	 where q.qName = pvName
	;

	if lrT.Id is null or lrT.tname is null or lrT.tdatatypename is null then

	   select tableid
	   	 into lnTID
		 from aws_oracle_ext.sqs_queues_settings s
		where s.qname = pvname;

		if lnTID is null then
			raise exception '% does not exist or does not define', pvname
			using hint  = '-24010';
		else
			raise exception 'invalid value. Queue table or type does not exist or does not define for queue %', pvname
			using hint  = '-24000';
		end if;

	end if;

	return lrT;
end;
]]></complex-attribute>
                        <category _I_D="037e05f0-dad2-4b3e-9d7b-1b67b1553177" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="91e64281-468c-4b43-850b-ada3a56132ea" name="sqs_lu_inited_queueurl" subcategories-loading="none" object-loading="extended" context="sqs_lu_inited_queueurl" is-trigger-function="0" unique-function-name="sqs_lu_inited_queueurl" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="varchar" function-arguments="pvname text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304996" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pvname text" overload-function-count="1" proc-language="sql" function-signature="sqs_lu_inited_queueurl(pvname text)">
                        <complex-attribute name="sql"><![CDATA[
	select q.Url
	  from aws_oracle_ext.sqs_queues_settings q
	 where q.qName = pvName
	;
]]></complex-attribute>
                        <category _I_D="509ad435-de51-48b2-9bc0-3d0a32e00d2c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c7f93b3a-41ee-48aa-b941-3677c01aa0a5" name="sqs_lu_insert_func_arn" subcategories-loading="none" object-loading="extended" context="sqs_lu_insert_func_arn" is-trigger-function="0" unique-function-name="sqs_lu_insert_func_arn" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="varchar" function-arguments="pvaction text, pvfunctionname text, pvarn text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304997" volatility="VOLATILE" is-window="f" function-identity-arguments="pvaction text, pvfunctionname text, pvarn text" overload-function-count="1" proc-language="sql" function-signature="sqs_lu_insert_func_arn(pvaction text, pvfunctionname text, pvarn text)">
                        <complex-attribute name="sql"><![CDATA[
	with d (action_, functionname, arn) as
			  (select upper(pvaction) , lower(pvfunctionname) , lower(pvarn)
				where upper(pvaction) = any ('{DELETE_QUEUE,SEND_MESSAGE,DELETE_MESSAGE,CREATE_QUEUE,GET_MESSAGE,INIT_QUEUES}')
 		  		  and lower(pvfunctionname) = split_part(lower(pvarn), ':', 7)
 		  		  and pvfunctionname != ''
 		  		  and pvarn != ''
 	          )
	insert into aws_oracle_ext.sqs_functions_settings select action_, functionname, arn from d
	on conflict(faction) do
		update set fname = lower(pvfunctionname),
		           arn = lower(pvarn)
	returning fname;
]]></complex-attribute>
                        <category _I_D="995b8b95-1d9a-4026-af0e-88f1a4bd8acb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fabec083-b8d3-416e-be41-614f037dab80" name="sqs_lu_insert_queue_table" subcategories-loading="none" object-loading="extended" context="sqs_lu_insert_queue_table" is-trigger-function="0" unique-function-name="sqs_lu_insert_queue_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="json,json" is-returning-set="f" ret-datatype="void" function-arguments="queue_table_record json, msg_record json" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304998" volatility="VOLATILE" is-window="f" function-identity-arguments="queue_table_record json, msg_record json" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_lu_insert_queue_table(queue_table_record json, msg_record json)">
                        <complex-attribute name="sql"><![CDATA[
declare
USER_DATA text = 'json_populate_record(null::%s.%s, %s)';
TABLE_DDL  text = 'INSERT INTO %s.%s ('
						'q_name, msgid, corrid, '
						'priority, state, delay, '
						'expiration, time_manager_info, local_order_no, '
						'chain_no, cscn, dscn, '
						'enq_time, enq_uid, enq_tid, '
						'deq_time, deq_uid,  deq_tid, '
						'retry_count, exception_qschema, exception_queue, '
						'step_no, recipient_key, dequeue_msgid, '
						'sender_name, sender_address, sender_protocol, '
						'user_data, user_prop'
						')'
						'VALUES ( '
							'%s, %s::bytea, null, '
							'0, 0, null, '
							'null, null, 0, '
							'0, 0, 0, '
							'now(), current_user, txid_current() , '
							'null, null, null, '
							'0, null, null, '
							'0, 0, null::bytea, '
							'null, null, 0, '
							'%s, null'
							')';

lrT aws_oracle_ext.sqs_queues_tables%rowtype;
lrM aws_oracle_ext.sqs_queue_record;
begin
	lrT := json_populate_record(lrT, queue_table_record);
 	lrM := json_populate_record(lrM, msg_record);

	USER_DATA := format(USER_DATA, lrT.tdatatypeschema, lrT.tdatatypename, quote_literal(lrM.user_data));
	TABLE_DDL := format(TABLE_DDL, lrT.tschema, lrT.tname, quote_literal(lrM.q_name), quote_literal(lrM.msgid), USER_DATA);

	EXECUTE TABLE_DDL;
end;
]]></complex-attribute>
                        <category _I_D="1f566c5e-e1f3-4ebd-9e5d-881068981f1a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1939a3dd-0936-4d99-a5d2-1f68f9cb5897" name="sqs_namespace_anonymous" subcategories-loading="none" object-loading="extended" context="sqs_namespace_anonymous" is-trigger-function="0" unique-function-name="sqs_namespace_anonymous" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304961" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_namespace_anonymous()">
                        <complex-attribute name="sql"><![CDATA[ select 0]]></complex-attribute>
                        <category _I_D="5091e9f5-0619-415e-a18a-7d5a1fe1ba2c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9b5cf926-697d-4546-8928-76e9cc4f5832" name="sqs_namespace_aq" subcategories-loading="none" object-loading="extended" context="sqs_namespace_aq" is-trigger-function="0" unique-function-name="sqs_namespace_aq" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304963" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_namespace_aq()">
                        <complex-attribute name="sql"><![CDATA[ select 1]]></complex-attribute>
                        <category _I_D="9178f116-c165-4ee4-827c-0af2af925503" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="905d65fe-37db-467e-80a2-4f6f6a9e690d" name="sqs_never" subcategories-loading="none" object-loading="extended" context="sqs_never" is-trigger-function="0" unique-function-name="sqs_never" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304962" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_never()">
                        <complex-attribute name="sql"><![CDATA[ select -1]]></complex-attribute>
                        <category _I_D="b103fc6d-fcfc-4ff4-a72f-ee4177f6257e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6100dc63-465a-41d0-904e-35897a51193a" name="sqs_next_message" subcategories-loading="none" object-loading="extended" context="sqs_next_message" is-trigger-function="0" unique-function-name="sqs_next_message" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304964" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_next_message()">
                        <complex-attribute name="sql"><![CDATA[ select 3]]></complex-attribute>
                        <category _I_D="0fc88c45-c65c-469d-b866-859abb60fbce" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ea2a8511-4d14-4bcf-86c5-3648ce9ae80d" name="sqs_no_delay" subcategories-loading="none" object-loading="extended" context="sqs_no_delay" is-trigger-function="0" unique-function-name="sqs_no_delay" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304965" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_no_delay()">
                        <complex-attribute name="sql"><![CDATA[ select 0]]></complex-attribute>
                        <category _I_D="3b7635ef-45c9-42ed-b855-e356c4e953f5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cd9c6e22-e598-45bf-9ac0-030c8f5da614" name="sqs_no_wait" subcategories-loading="none" object-loading="extended" context="sqs_no_wait" is-trigger-function="0" unique-function-name="sqs_no_wait" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304966" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_no_wait()">
                        <complex-attribute name="sql"><![CDATA[ select 0]]></complex-attribute>
                        <category _I_D="391cc4e2-80b0-4031-8649-3e2bb581d8a2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4af71e97-e5b4-4de8-b17d-bac20fabdfd6" name="sqs_none" subcategories-loading="none" object-loading="extended" context="sqs_none" is-trigger-function="0" unique-function-name="sqs_none" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304967" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_none()">
                        <complex-attribute name="sql"><![CDATA[ select 0]]></complex-attribute>
                        <category _I_D="151cbb60-5101-4256-944e-ca183038f108" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4687bd84-a9e4-4a96-ae22-2b8580c6249e" name="sqs_normal_queue" subcategories-loading="none" object-loading="extended" context="sqs_normal_queue" is-trigger-function="0" unique-function-name="sqs_normal_queue" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304968" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_normal_queue()">
                        <complex-attribute name="sql"><![CDATA[ select 0]]></complex-attribute>
                        <category _I_D="8a4b6fd7-f332-46a7-b9ea-9c26f007cbec" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f36b3cd0-e10e-4484-a922-4b3233a3eae0" name="sqs_ntfn_grouping_forever" subcategories-loading="none" object-loading="extended" context="sqs_ntfn_grouping_forever" is-trigger-function="0" unique-function-name="sqs_ntfn_grouping_forever" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304969" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_ntfn_grouping_forever()">
                        <complex-attribute name="sql"><![CDATA[ select -1]]></complex-attribute>
                        <category _I_D="e0106b93-4837-419c-a46d-44c78563bb22" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5ce0a44e-0264-4f0d-8087-d78d8f145146" name="sqs_ntfn_grouping_type_last" subcategories-loading="none" object-loading="extended" context="sqs_ntfn_grouping_type_last" is-trigger-function="0" unique-function-name="sqs_ntfn_grouping_type_last" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304970" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_ntfn_grouping_type_last()">
                        <complex-attribute name="sql"><![CDATA[ select 2]]></complex-attribute>
                        <category _I_D="822ae2aa-4dbf-4fe6-ba94-84d7721367e5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d95fa462-1083-4dd0-b10a-76bdb9ec87dd" name="sqs_ntfn_grouping_type_summary" subcategories-loading="none" object-loading="extended" context="sqs_ntfn_grouping_type_summary" is-trigger-function="0" unique-function-name="sqs_ntfn_grouping_type_summary" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304971" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_ntfn_grouping_type_summary()">
                        <complex-attribute name="sql"><![CDATA[ select 1]]></complex-attribute>
                        <category _I_D="ff8f7792-03db-47c5-ba05-5056ce1c0099" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ef8e52c8-b883-47db-962b-7dbebf805f55" name="sqs_on_commit" subcategories-loading="none" object-loading="extended" context="sqs_on_commit" is-trigger-function="0" unique-function-name="sqs_on_commit" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304972" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_on_commit()">
                        <complex-attribute name="sql"><![CDATA[ select 2]]></complex-attribute>
                        <category _I_D="574fe312-7182-4b7f-96a4-82c449d80970" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8398b609-d667-4047-afca-8937ff7812ea" name="sqs_persistent" subcategories-loading="none" object-loading="extended" context="sqs_persistent" is-trigger-function="0" unique-function-name="sqs_persistent" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304973" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_persistent()">
                        <complex-attribute name="sql"><![CDATA[select 1]]></complex-attribute>
                        <category _I_D="a42b1490-7e37-4a64-9a9c-e8df55599acd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b896c152-02bd-49f0-9068-5230a8c1f27f" name="sqs_processed" subcategories-loading="none" object-loading="extended" context="sqs_processed" is-trigger-function="0" unique-function-name="sqs_processed" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304974" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_processed()">
                        <complex-attribute name="sql"><![CDATA[ select 2]]></complex-attribute>
                        <category _I_D="70a034ee-8e71-4eb1-b916-6e90a591c2a9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ef9bc32f-68c4-4e0c-99f9-c853bb2dbcde" name="sqs_queue_body" subcategories-loading="none" object-loading="extended" context="sqs_queue_body" is-trigger-function="0" unique-function-name="sqs_queue_body" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304975" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_queue_body()">
                        <complex-attribute name="sql"><![CDATA[select 'body']]></complex-attribute>
                        <category _I_D="521b9a9a-ab0c-403b-be22-084157276522" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="561a1244-633c-4f50-be1b-b28b79aceb43" name="sqs_queue_fifo" subcategories-loading="none" object-loading="extended" context="sqs_queue_fifo" is-trigger-function="0" unique-function-name="sqs_queue_fifo" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304976" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_queue_fifo()">
                        <complex-attribute name="sql"><![CDATA[select 'fifo']]></complex-attribute>
                        <category _I_D="40c99d41-370b-45a7-a1e9-47db7cbdefd4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6f2f026d-8ff5-40f8-8240-91ba80ea6c27" name="sqs_ready" subcategories-loading="none" object-loading="extended" context="sqs_ready" is-trigger-function="0" unique-function-name="sqs_ready" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304977" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_ready()">
                        <complex-attribute name="sql"><![CDATA[ select 0]]></complex-attribute>
                        <category _I_D="f9269484-67b1-442a-9fef-f54f959ecdb8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d789fb9d-3aa2-4ed0-b0b4-f248c09b8fe8" name="sqs_remove" subcategories-loading="none" object-loading="extended" context="sqs_remove" is-trigger-function="0" unique-function-name="sqs_remove" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304978" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_remove()">
                        <complex-attribute name="sql"><![CDATA[ select 3]]></complex-attribute>
                        <category _I_D="6fd7b8d7-3f00-4f61-9abf-6500b6521538" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="df894ad3-ad34-43a8-9c4e-e9dcdd74b4b7" name="sqs_remove_nodata" subcategories-loading="none" object-loading="extended" context="sqs_remove_nodata" is-trigger-function="0" unique-function-name="sqs_remove_nodata" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304979" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_remove_nodata()">
                        <complex-attribute name="sql"><![CDATA[ select 4]]></complex-attribute>
                        <category _I_D="fead1152-29ca-4b52-9c18-0170f3421300" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9f7a6f89-213a-4a09-acef-5ca9d4c5b36f" name="sqs_top" subcategories-loading="none" object-loading="extended" context="sqs_top" is-trigger-function="0" unique-function-name="sqs_top" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304980" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_top()">
                        <complex-attribute name="sql"><![CDATA[ select 3]]></complex-attribute>
                        <category _I_D="9798d5c9-4aae-4c4e-802a-3177cd4f8299" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a8ee335e-7008-455c-b88d-76949fcabcc7" name="sqs_waiting" subcategories-loading="none" object-loading="extended" context="sqs_waiting" is-trigger-function="0" unique-function-name="sqs_waiting" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304981" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_waiting()">
                        <complex-attribute name="sql"><![CDATA[ select 1]]></complex-attribute>
                        <category _I_D="b92978d9-43ef-446e-93a7-0109b7ca5629" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="06093d0b-d29e-49a2-8ced-94522f0259b0" name="strip_sql_comments" subcategories-loading="none" object-loading="extended" context="strip_sql_comments" is-trigger-function="0" unique-function-name="strip_sql_comments" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean,text[],boolean" is-returning-set="f" ret-datatype="text" function-arguments="p_sql_statement text, p_skip_hints boolean DEFAULT false, p_adv_quote_tags text[] DEFAULT ARRAY[''::text], p_validate_multiline boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304439" volatility="VOLATILE" is-window="f" function-identity-arguments="p_sql_statement text, p_skip_hints boolean, p_adv_quote_tags text[], p_validate_multiline boolean" overload-function-count="1" proc-language="plpgsql" function-signature="strip_sql_comments(p_sql_statement text, p_skip_hints boolean, p_adv_quote_tags text[], p_validate_multiline boolean)" comment="This function removes single and multi-line comments from SQL statement. Available validation (check for unpaired) of multi-line comments within SQL statement. Oracle Database Optimizer Hints removal can be skipped as well.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    i_tag RECORD;
    v_tag_pos INTEGER;
    v_tag_len INTEGER;
    v_adv_tag TEXT;
    v_reversed_sql TEXT;
    v_sql_statement TEXT;
    i_multi_comment RECORD;
    v_unpaired_cnt INTEGER;
    v_comm_startpos INTEGER;
    v_comm_endpos INTEGER;
    v_comm_length INTEGER;
    v_adv_quote_tags TEXT[];
    v_adv_tag_idx INTEGER[];
    v_idx_offset INTEGER := 0;
    v_hints_single_regexp TEXT;
    v_hints_multi_regexp TEXT;
    v_hints_list_regexp TEXT;
    v_dml_multi_regexp TEXT;
    v_singlecomm_cnt INTEGER;
    v_adv_quote_tag_cnt INTEGER;
    v_left_multicomm_cnt INTEGER;
    v_right_multicomm_cnt INTEGER;
    v_adv_quote_tag_idx TEXT[];
    v_single_comm_idx INTEGER[];
    v_literal_start_idx INTEGER[];
    v_literal_end_idx INTEGER[];
    v_left_multicomm_idx INTEGER[];
    v_right_multicomm_idx INTEGER[];
    v_ambiguously_comm_pos INTEGER;
    v_within_literal_res SMALLINT := 0;
    v_dml_keywords_regexp CONSTANT TEXT := 'SELECT|INSERT|UPDATE|DELETE|MERGE';
    -- Full list of Oracle Database Optimizer Hints
    v_hints_list CONSTANT TEXT[] := ARRAY['ALL_ROWS', 'FIRST_ROWS', 'FIRST_ROWS_1', 'FIRST_ROWS_100', 'CHOOSE', 'RULE', 'NO_PUSH_PRED',
                                          'CLUSTER', 'FULL', 'HASH', 'ROWID', 'INDEX', 'NO_INDEX', 'INDEX_ASC', 'INDEX_DESC', 'USE_NL',
                                          'INDEX_COMBINE', 'INDEX_FFS', 'ORDERED', 'ORDERED_PREDICATES', 'STAR', 'DRIVING_SITE', 'NL_SJ',
                                          'HASH_SJ', 'MERGE_SJ', 'LEADING', 'USE_HASH', 'USE_MERGE', 'NOPARALLEL', 'PARALLEL_INDEX',
                                          'PARALLEL', 'PQ_DISTRIBUTE', 'NOPARALLEL_INDEX', 'STAR_TRANSFORMATION', 'USE_NL_WITH_INDEX',
                                          'NO_EXPAND', 'FACT', 'NOFACT', 'MERGE', 'NO_MERGE', 'REWRITE', 'NOREWRITE', 'USE_CONCAT',
                                          'APPEND', 'NOAPPEND', 'CACHE', 'NOCACHE', 'PUSH_PRED', 'AND_EQUAL', 'PUSH_SUBQ', 'NO_PUSH_SUBQ',
                                          'BYPASS_RECURSIVE_CHECK', 'BYPASS_UJVC', 'CACHE_CB', 'CACHE_TEMP_TABLE', 'CIV_GB',
                                          'COLLECTIONS_GET_REFS', 'CUBE_GB', 'CURSOR_SHARING_EXACT', 'DEREF_NO_REWRITE', 'DML_UPDATE',
                                          'DOMAIN_INDEX_NO_SORT', 'DOMAIN_INDEX_SORT', 'DYNAMIC_SAMPLING', 'DYNAMIC_SAMPLING_EST_CDN',
                                          'EXPAND_GSET_TO_UNION', 'FORCE_SAMPLE_BLOCK', 'GBY_CONC_ROLLUP', 'GLOBAL_TABLE_HINTS',
                                          'HWM_BROKERED', 'IGNORE_ON_CLAUSE', 'IGNORE_WHERE_CLAUSE', 'INDEX_RRS', 'INDEX_SS', 'UNNEST',
                                          'INDEX_SS_ASC', 'INDEX_SS_DESC', 'LIKE_EXPAND', 'LOCAL_INDEXES', 'MV_MERGE', 'NO_FILTERING',
                                          'NESTED_TABLE_GET_REFS', 'NESTED_TABLE_SET_REFS', 'NESTED_TABLE_SET_SETID', 'REMOTE_MAPPED',
                                          'NO_EXPAND_GSET_TO_UNION', 'NO_FACT', 'NO_ORDER_ROLLUPS', 'NO_PRUNE_GSETS', 'NO_STATS_GSETS',
                                          'NO_UNNEST', 'NOCPU_COSTING OVERFLOW_NOMOVE', 'PIV_GB', 'PIV_SSF', 'PQ_MAP', 'SCN_ASCENDING',
                                          'RESTORE_AS_INTERVALS', 'SAVE_AS_INTERVALS', 'SKIP_EXT_OPTIMIZER', 'PQ_NOMAP', 'TIV_SSF',
                                          'USE_TTT_FOR_GSETS', 'SQLLDR', 'SYS_DL_CURSOR', 'SYS_PARALLEL_TXN', 'SYS_RID_ORDER', 'PQ_SKEW',
                                          'HASH_AJ', 'INDEX_JOIN', 'NO_INDEX_FFS', 'NO_INDEX_SS', 'NO_QUERY_TRANSFORMATION', 'BITMAP',
                                          'NO_STAR_TRANSFORMATION', 'NO_USE_NL', 'NO_USE_MERGE', 'NO_USE_HASH', 'NO_PARALLEL', 'NL_AJ',
                                          'NO_PARALLEL_INDEX', 'QB_NAME', 'SPREAD_MIN_ANALYSIS', 'MERGE_AJ', 'NO_REWRITE', 'NO_USE_BAND',
                                          'CLUSTERING', 'NO_CLUSTERING', 'NATIVE_FULL_OUTER_JOIN', 'NO_NATIVE_FULL_OUTER_JOIN', 'TIV_GB',
                                          'NO_ZONEMAP', 'USE_BAND', 'NO_INMEMORY_PRUNING', 'INMEMORY_PRUNING', 'NO_PQ_CONCURRENT_UNION',
                                          'ENABLE_PARALLEL_DML', 'DISABLE_PARALLEL_DML', 'PQ_CONCURRENT_UNION', 'USE_CUBE', 'INMEMORY',
                                          'CHANGE_DUPKEY_ERROR_INDEX', 'IGNORE_ROW_ON_DUPKEY_INDEX', 'RETRY_ON_ROW_CHANGE', 'PQ_FILTER',
                                          'GATHER_OPTIMIZER_STATISTICS', 'NO_GATHER_OPTIMIZER_STATISTICS', 'GROUPING', 'PX_JOIN_FILTER',
                                          'MODEL_MIN_ANALYSIS', 'NO_PX_JOIN_FILTER', 'NO_XMLINDEX_REWRITE', 'NO_XML_QUERY_REWRITE',
                                          'NO_PQ_SKEW', 'APPEND_VALUES', 'CONTAINERS', 'NOCACHE', 'FRESH_MV', 'MONITOR', 'NO_MONITOR',
                                          'OPT_PARAM', 'CACHE', 'NOCACHE', 'NO_USE_CUBE', 'NO_INMEMORY'];
BEGIN
    v_sql_statement := trim(p_sql_statement);

    -- Checking for ambiguously defined multi-line comments
    v_ambiguously_comm_pos := position('*/*' in v_sql_statement);

    IF (v_ambiguously_comm_pos > 0) THEN
        RAISE escape_character_conflict;
    END IF;

    -- Composing complete hints regexp (HINT1|HINT2|HINTn)
    v_hints_list_regexp := array_to_string(v_hints_list, '|');

    IF (p_skip_hints) THEN
        v_dml_multi_regexp := format('(%s)\s*$', v_dml_keywords_regexp);
        v_hints_multi_regexp := format('^/\*\+\s*(%s)', v_hints_list_regexp);

        -- Composing regexp to remove single-line comments but skip Optimizer Hints
        v_hints_single_regexp := format('(?<!(?:%s)\s*)--\+\s*(%s).*|(?<=(?:%s)\s*)--\+(?!\s*(?:%s)).*|(?<=(?:\s*))--(?!\+).*',
                                        v_dml_keywords_regexp,
                                        v_hints_list_regexp,
                                        v_dml_keywords_regexp,
                                        v_hints_list_regexp);
    ELSE
        v_hints_single_regexp := '\s*--.*';
    END IF;

    -- Removing distinct and NULL values
    SELECT array_agg(DISTINCT adv_quote_tag)
      INTO v_adv_quote_tags
      FROM unnest(p_adv_quote_tags) tags (adv_quote_tag)
     WHERE adv_quote_tag IS NOT NULL;

    -- Determining the count of advanced quoting tags
    v_adv_quote_tag_cnt := coalesce(array_length(v_adv_quote_tags, 1), 0);

    IF (v_adv_quote_tag_cnt > 0)
    THEN
        -- Determining positions of each advanced quoting tag ($q$, $Q$, ...)
        FOREACH v_adv_tag IN ARRAY v_adv_quote_tags
        LOOP
            v_idx_offset := 0;
            v_adv_tag_idx := '{}'::INTEGER[];

            v_tag_len = char_length(v_adv_tag);
            v_tag_pos = position(v_adv_tag IN v_sql_statement);

            WHILE (v_tag_pos > 0)
            LOOP
                v_idx_offset := v_idx_offset + v_tag_pos;

                IF (aws_oracle_ext.regexp_count(substring(v_sql_statement, v_idx_offset), '''') % 2 = 1)
                THEN
                    v_idx_offset := v_idx_offset + v_tag_len;
                    v_tag_pos = position(v_adv_tag IN substring(v_sql_statement, v_idx_offset)) - 1;

                    CONTINUE;
                END IF;

                v_adv_tag_idx := array_append(v_adv_tag_idx, v_idx_offset);

                v_idx_offset := v_idx_offset + v_tag_len;
                v_tag_pos = position(v_adv_tag IN substring(v_sql_statement, v_idx_offset)) - 1;
            END LOOP;

            v_adv_quote_tag_idx := array_append(v_adv_quote_tag_idx, array_to_string(v_adv_tag_idx, ','));
            v_adv_tag_idx := '{}'::INTEGER[];
            v_adv_tag := NULL;
        END LOOP;

        -- Merging advanced quoting ($q$..$q$) sections
        FOR i_tag IN
        (WITH adv_quote_tags AS (
         SELECT tags,
                generate_subscripts(tags, 1) tag_num
           FROM (VALUES (v_adv_quote_tags)) adv_quote_tags (tags)
         ),
         adv_quote_tag_idx AS (
         SELECT tags[tag_num] tag,
                unnest(string_to_array((v_adv_quote_tag_idx)[tag_num], ','))::INTEGER tag_idx
           FROM adv_quote_tags
          ORDER BY tag_idx ASC)

         SELECT ROW_NUMBER() OVER (ORDER BY tag_idx) tag_num,
                tag_idx.*
           FROM adv_quote_tag_idx tag_idx)
        LOOP
            IF (v_adv_tag IS NULL)
            THEN
                v_adv_tag := i_tag.tag;
                v_literal_start_idx := array_append(v_literal_start_idx, i_tag.tag_idx);

                CONTINUE;
            END IF;

            CONTINUE WHEN i_tag.tag <> v_adv_tag;

            v_literal_end_idx := array_append(v_literal_end_idx,
                                              i_tag.tag_idx + char_length(v_adv_tag));
            v_adv_tag := NULL;
        END LOOP;

        -- Rearming offset
        v_idx_offset := 0;
    END IF;

    -- Counting single-line comments in SQL statement
    SELECT COUNT(1)
      INTO v_singlecomm_cnt
      FROM regexp_matches(v_sql_statement, '--', 'ngi');

    -- Searching for `literal` single-line comments
    FOR i_comment_num IN 1..v_singlecomm_cnt
    LOOP
        v_comm_startpos := aws_oracle_ext.regexp_instr(v_sql_statement, '--', p_occurrence => i_comment_num);

        -- Single-line comment is part of a string literal (single quotes)
        IF (aws_oracle_ext.regexp_count(v_sql_statement, '''', v_comm_startpos) % 2 = 1)
        THEN
            v_single_comm_idx := array_append(v_single_comm_idx, v_comm_startpos);

            CONTINUE;
        ELSIF (v_adv_quote_tag_cnt > 0) THEN
            SELECT COUNT(1)
              INTO v_within_literal_res
              FROM unnest(v_literal_start_idx,
                          v_literal_end_idx) adv_tag_positions (tag_start, tag_end)
             WHERE v_comm_startpos BETWEEN tag_start + 1
                                       AND tag_end;

            -- Single-line comment is part of a string literal (advanced quoting)
            IF (coalesce(v_within_literal_res, 0) > 0)
            THEN
                v_single_comm_idx := array_append(v_single_comm_idx, v_comm_startpos);

                CONTINUE;
            END IF;
        END IF;

        v_reversed_sql := reverse(substring(v_sql_statement, 1, v_comm_startpos));

        -- Single-line comment located inside multi-line comment
        IF (v_comm_startpos - CASE
                                 WHEN position('*/' in v_reversed_sql) = 0 THEN v_comm_startpos
                                 ELSE position('*/' in v_reversed_sql)
                              END > CASE
                                       WHEN position('/*' in v_reversed_sql) = 0 THEN 0
                                       ELSE v_comm_startpos
                                    END - position('/*' in v_reversed_sql))
        THEN
            v_single_comm_idx := array_append(v_single_comm_idx, v_comm_startpos);
        END IF;
    END LOOP;

    FOR i_comment_num IN 1..coalesce(array_length(v_single_comm_idx, 1), 0)
    LOOP
        -- Masking `literal` single-line comments with "<_($-$$-$)_>"
        v_sql_statement := overlay(v_sql_statement placing '<_($-$$-$)_>' -- 10 = length('<_($-$$-$)_>') - length('--')
                                                      from (v_single_comm_idx[i_comment_num] + (i_comment_num - 1) * 10)
                                                       for 2);
    END LOOP;

    -- Removing non-masked single-line comments
    v_sql_statement := regexp_replace(v_sql_statement, v_hints_single_regexp, '', 'ngi');

    -- Restoring masked single-line comments back to its originals
    v_sql_statement := replace(v_sql_statement, '<_($-$$-$)_>', '--');

    SELECT COUNT(1)
      INTO v_left_multicomm_cnt
      FROM regexp_matches(v_sql_statement, '/\*', 'ngi');

    FOR i_comment_num IN 1..v_left_multicomm_cnt
    LOOP
        v_within_literal_res := 0;
        v_comm_startpos := aws_oracle_ext.regexp_instr(v_sql_statement, '/\*', p_occurrence => i_comment_num);

        IF (v_adv_quote_tag_cnt > 0)
        THEN
            SELECT COUNT(1)
              INTO v_within_literal_res
              FROM unnest(v_literal_start_idx,
                          v_literal_end_idx) adv_tag_positions (tag_start, tag_end)
             WHERE v_comm_startpos BETWEEN tag_start + 1
                                       AND tag_end;

            v_within_literal_res := coalesce(v_within_literal_res, 0);
        END IF;

        -- Skip multi-line comments found inside string literals
        IF (aws_oracle_ext.regexp_count(v_sql_statement, '''', v_comm_startpos) % 2 = 0 AND v_within_literal_res = 0)
        THEN
            v_left_multicomm_idx := array_append(v_left_multicomm_idx, v_comm_startpos);
        END IF;
    END LOOP;

    SELECT COUNT(1)
      INTO v_right_multicomm_cnt
      FROM regexp_matches(v_sql_statement, '\*/', 'ngi');

    FOR i_comment_num IN 1..v_right_multicomm_cnt
    LOOP
        v_within_literal_res := 0;
        v_comm_endpos := aws_oracle_ext.regexp_instr(v_sql_statement, '\*/', p_occurrence => i_comment_num);

        IF (v_adv_quote_tag_cnt > 0)
        THEN
            SELECT COUNT(1)
              INTO v_within_literal_res
              FROM unnest(v_literal_start_idx,
                          v_literal_end_idx) adv_tag_positions (tag_start, tag_end)
             WHERE v_comm_endpos BETWEEN tag_start + 1
                                     AND tag_end;

            v_within_literal_res := coalesce(v_within_literal_res, 0);
        END IF;

        -- Skip multi-line comments found inside string literals
        IF (aws_oracle_ext.regexp_count(v_sql_statement, '''', v_comm_endpos) % 2 = 0 AND v_within_literal_res = 0)
        THEN
            v_right_multicomm_idx := array_append(v_right_multicomm_idx, v_comm_endpos);
        END IF;
    END LOOP;

    -- Removing multi-line comments
    FOR i_multi_comment IN
    (WITH src_data AS (
     SELECT left_part,
            right_part,
            coalesce(LAG(right_part, 1) OVER (ORDER BY right_part), 0) prev_right
       FROM unnest(v_left_multicomm_idx,
                   v_right_multicomm_idx) AS src (left_part, right_part)
     ),
     pair_set AS (
     SELECT (SELECT MIN(left_part)
               FROM src_data src2
              WHERE src2.left_part < src1.right_part
                AND src2.left_part > src1.prev_right
            ) left_part,
            src1.right_part
       FROM src_data src1
     UNION ALL
     SELECT left_part,
            NULL
       FROM src_data
      WHERE left_part > (SELECT MAX(right_part)
                           FROM src_data))
     SELECT *
       FROM pair_set
      WHERE NOT (left_part IS NULL AND
                 right_part IS NULL))
    LOOP
        v_comm_startpos := i_multi_comment.left_part;
        v_comm_endpos := i_multi_comment.right_part + 2; -- length of "*/"

        -- Checking if there are any unpaired multi-line comments
        IF (coalesce(v_comm_startpos, v_comm_endpos) = v_comm_endpos OR
            coalesce(v_comm_endpos, v_comm_startpos) = v_comm_startpos)
        THEN
            IF (p_validate_multiline) THEN
                -- Found unpaired multi-line comment
                RAISE invalid_xml_comment;
            ELSE
                CONTINUE;
            END IF;
        ELSIF (p_skip_hints) THEN
            IF (substring(v_sql_statement, 1, v_comm_startpos - v_idx_offset - 1) ~* v_dml_multi_regexp AND
                substring(v_sql_statement, v_comm_startpos - v_idx_offset) ~* v_hints_multi_regexp)
            THEN
                -- Skip hint removal
                CONTINUE;
            END IF;
        END IF;

        -- Offsetting comment start/stop indexes
        v_comm_length := v_comm_endpos - v_comm_startpos;
        v_comm_startpos := v_comm_startpos - v_idx_offset;
        v_idx_offset := v_idx_offset + v_comm_length - 1;

        -- Removing multi-line comment by substituting it with a space symbol
        v_sql_statement := overlay(v_sql_statement placing ' ' from v_comm_startpos
                                                       for v_comm_length);
    END LOOP;

    /* Removing any unnecessary blank strings and spaces
       from the beginning and the end of SQL statement */
    RETURN regexp_replace(v_sql_statement, '^\s*(?=\S*)|(?<=\S*)\s*$', '', 'gi');
EXCEPTION
    -- SQL statement contains ambiguously defined multi-line comment
    WHEN escape_character_conflict THEN
        RAISE USING MESSAGE := 'SQL statement contains ambiguously defined multi-line comment.',
                    DETAIL := format('Supplied SQL statement contains ambiguously defined (*/*) multi-line comment at position %s.', v_ambiguously_comm_pos),
                    HINT := 'Correct the SQL statement so that any multi-line comment opening\closing tag be explicitly defined.';
    -- SQL statement contains unpaired multi-line comment
    WHEN invalid_xml_comment THEN
        RAISE USING MESSAGE := 'SQL statement contains unpaired multi-line comment.',
                    DETAIL := 'Supplied SQL statement contains unpaired multi-line comment. Oracle error ''ORA-01742: comment not terminated properly''.',
                    HINT := 'Correct the SQL statement so that any multi-line comment has its own opening\closing tag.';
END;
]]></complex-attribute>
                        <category _I_D="2138325e-536a-4b1a-bc9d-bf6d154142a4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f5b16ca9-3ed6-4552-9dc5-458199937fd9" name="substr" subcategories-loading="none" object-loading="extended" context="substr(text, numeric)" is-trigger-function="0" unique-function-name="substr(text, numeric)" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric" is-returning-set="f" ret-datatype="text" function-arguments="text, numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304599" volatility="IMMUTABLE" is-window="f" function-identity-arguments="text, numeric" overload-function-count="2" proc-language="sql" function-signature="substr(text, numeric)" unique-suffix="(text, numeric)" routine-number="304599" comment="Implements Oracle SUBSTR(). Original PostgreSQL SUBSTR() uses different logic with negative arguments and rejects numeric argoments for position">
                        <complex-attribute name="sql"><![CDATA[
    
    SELECT
        CASE
            WHEN ABS(TRUNC($2)::INTEGER) > LENGTH($1) THEN
                
                NULL::TEXT

            WHEN TRUNC($2)::INTEGER >= 0 THEN

                SUBSTR($1, CASE WHEN TRUNC($2)::INTEGER = 0 THEN 1 ELSE TRUNC($2)::INTEGER END)

            ELSE
                
                SUBSTR($1, LENGTH($1) + TRUNC($2)::INTEGER + 1)
        END;

]]></complex-attribute>
                        <category _I_D="a9b0c1e2-8c82-4663-a550-25966d58c222" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="017a6312-93ea-433d-b965-436bd5e32167" name="substr" subcategories-loading="none" object-loading="extended" context="substr(text, numeric, numeric)" is-trigger-function="0" unique-function-name="substr(text, numeric, numeric)" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric,numeric" is-returning-set="f" ret-datatype="text" function-arguments="text, numeric, numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304600" volatility="IMMUTABLE" is-window="f" function-identity-arguments="text, numeric, numeric" overload-function-count="2" proc-language="sql" function-signature="substr(text, numeric, numeric)" unique-suffix="(text, numeric, numeric)" routine-number="304600" comment="Implements Oracle SUBSTR(). Original PostgreSQL SUBSTR() uses different logic with negative arguments and rejects numeric argoments for position and length">
                        <complex-attribute name="sql"><![CDATA[
    
    SELECT
        CASE
            WHEN TRUNC($3)::INTEGER <= 0 THEN

                NULL::TEXT

            WHEN ABS(TRUNC($2)::INTEGER) > LENGTH($1) THEN
                
                NULL::TEXT

            WHEN TRUNC($2)::INTEGER >= 0 THEN

                SUBSTR($1, CASE WHEN TRUNC($2)::INTEGER = 0 THEN 1 ELSE TRUNC($2)::INTEGER END, TRUNC($3)::INTEGER)

            ELSE
                
                SUBSTR($1, LENGTH($1) + TRUNC($2)::INTEGER + 1, TRUNC($3)::INTEGER)
        END;

]]></complex-attribute>
                        <category _I_D="2fabd1df-888e-4dcd-a8a7-14343bd67a4e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0b702235-04a0-4c2f-af86-240f0bfe9e53" name="substrb" subcategories-loading="none" object-loading="extended" context="substrb(text, numeric)" is-trigger-function="0" unique-function-name="substrb(text, numeric)" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric" is-returning-set="f" ret-datatype="text" function-arguments="text, numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304601" volatility="IMMUTABLE" is-window="f" function-identity-arguments="text, numeric" overload-function-count="2" proc-language="sql" function-signature="substrb(text, numeric)" unique-suffix="(text, numeric)" routine-number="304601" comment="Implements Oracle SUBSTRB(). Original PostgreSQL SUBSTRB() uses different logic with negative arguments and rejects numeric argoments for position">
                        <complex-attribute name="sql"><![CDATA[
    
    SELECT
        CASE
            WHEN ABS(TRUNC($2)::INTEGER) > OCTET_LENGTH($1) THEN
                
                NULL::TEXT

            WHEN TRUNC($2)::INTEGER >= 0 THEN

                CONVERT_FROM(SUBSTR($1::BYTEA, CASE WHEN TRUNC($2)::INTEGER = 0 THEN 1 ELSE TRUNC($2)::INTEGER END),'UTF8')

            ELSE
                
                CONVERT_FROM(SUBSTR($1::BYTEA, OCTET_LENGTH($1) + TRUNC($2)::INTEGER + 1),'UTF8')
        END;

]]></complex-attribute>
                        <category _I_D="3630122d-fd71-4b5f-82e7-a73ae43f3598" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="497b1990-6ec8-425d-b77a-eb11f8070c73" name="substrb" subcategories-loading="none" object-loading="extended" context="substrb(text, numeric, numeric)" is-trigger-function="0" unique-function-name="substrb(text, numeric, numeric)" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric,numeric" is-returning-set="f" ret-datatype="text" function-arguments="text, numeric, numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304602" volatility="IMMUTABLE" is-window="f" function-identity-arguments="text, numeric, numeric" overload-function-count="2" proc-language="sql" function-signature="substrb(text, numeric, numeric)" unique-suffix="(text, numeric, numeric)" routine-number="304602" comment="Implements Oracle SUBSTRB(). Original PostgreSQL SUBSTRB() uses different logic with negative arguments and rejects numeric argoments for position and length">
                        <complex-attribute name="sql"><![CDATA[
    
    SELECT
        CASE
            WHEN TRUNC($3)::INTEGER <= 0 THEN

                NULL::TEXT

            WHEN ABS(TRUNC($2)::INTEGER) > OCTET_LENGTH($1) THEN
                
                NULL::TEXT

            WHEN TRUNC($2)::INTEGER >= 0 THEN
                
                CONVERT_FROM(SUBSTR($1::BYTEA, CASE WHEN TRUNC($2)::INTEGER = 0 THEN 1 ELSE TRUNC($2)::INTEGER END, TRUNC($3)::INTEGER),'UTF8')

            ELSE
                
                CONVERT_FROM(SUBSTR($1::BYTEA, OCTET_LENGTH($1) + TRUNC($2)::INTEGER + 1, TRUNC($3)::INTEGER),'UTF8')
        END;

]]></complex-attribute>
                        <category _I_D="61adb722-5639-4209-a8fc-c0f88a428dcf" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="153535ae-511c-4238-93c4-7d3f569e97b7" name="sys_anydata$accessbdouble" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessbdouble" is-trigger-function="0" unique-function-name="sys_anydata$accessbdouble" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="float8" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305278" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessbdouble(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.BINARY_DOUBLE')
   AND ($1 ->> 'SYS.BINARY_DOUBLE' <> '') 
  THEN
	 ($1->> 'SYS.BINARY_DOUBLE')::DOUBLE PRECISION
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="44edcf80-17f1-4a99-af89-7baa66f5f73a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8258499a-df71-4a62-ad02-342c53741ca8" name="sys_anydata$accessbfile" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessbfile" is-trigger-function="0" unique-function-name="sys_anydata$accessbfile" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="varchar" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305279" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessbfile(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.BFILE' THEN
     ($1->> 'SYS.BFILE')::CHARACTER VARYING
  ELSE
    NULL
  END;
]]></complex-attribute>
                        <category _I_D="c54e169f-0929-46a7-90d3-d593615bb231" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d1fdf5a1-2ac6-452c-8e91-168a32aa7ee1" name="sys_anydata$accessbfloat" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessbfloat" is-trigger-function="0" unique-function-name="sys_anydata$accessbfloat" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="float4" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305280" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessbfloat(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.BINARY_FLOAT')
   AND ($1 ->> 'SYS.BINARY_FLOAT' <> '') 
  THEN
	 ($1->> 'SYS.BINARY_FLOAT')::REAL
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="0739cb00-ece1-4ec9-b34d-0d83c3c2925d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9b9f785a-de23-45da-b7ee-71e5afc35ec9" name="sys_anydata$accessblob" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessblob" is-trigger-function="0" unique-function-name="sys_anydata$accessblob" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="bytea" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305281" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessblob(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.BLOB')
   AND ($1 ->> 'SYS.BLOB' <> '') 
  THEN
	 ($1->> 'SYS.BLOB')::BYTEA
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="70b4cf60-5105-4a35-b4c9-45d07e503ab3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c43af2fa-8015-4d08-b9c8-1f33eda51115" name="sys_anydata$accesschar" subcategories-loading="none" object-loading="extended" context="sys_anydata$accesschar" is-trigger-function="0" unique-function-name="sys_anydata$accesschar" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="bpchar" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305282" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accesschar(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.CHAR')
   AND ($1 ->> 'SYS.CHAR' <> '') 
  THEN
	 ($1->> 'SYS.CHAR')::CHARACTER
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="6fadb742-aa1f-46be-ac1c-688f43c982b0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3d84c02d-768f-4bea-8dcc-927b28255d2f" name="sys_anydata$accessclob" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessclob" is-trigger-function="0" unique-function-name="sys_anydata$accessclob" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="text" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305283" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessclob(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.CLOB' 
    AND ($1 ->> 'SYS.CLOB' <> '')
  THEN
     ($1->> 'SYS.CLOB')
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="a30683f7-2ce0-418d-ae85-642b70092946" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c88186fe-7234-491c-9bb0-0dc76b72e180" name="sys_anydata$accessdate" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessdate" is-trigger-function="0" unique-function-name="sys_anydata$accessdate" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="timestamp" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305284" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessdate(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.DATE' AND ($1 ->> 'SYS.DATE' <> '') 
  THEN
     ($1 ->> 'SYS.DATE')::TIMESTAMP(0) WITHOUT TIME ZONE    
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="3ec819e8-90a2-4943-87b5-b81c61dce803" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e3307b0d-1ad0-40da-89c4-4a56df78d564" name="sys_anydata$accessintervalds" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessintervalds" is-trigger-function="0" unique-function-name="sys_anydata$accessintervalds" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="interval" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305285" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessintervalds(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.INTERVAL_DAY_SECOND')
   AND ($1 ->> 'SYS.INTERVAL_DAY_SECOND' <> '') 
  THEN
	 ($1->> 'SYS.INTERVAL_DAY_SECOND')::INTERVAL DAY TO SECOND
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="179ff12d-6dd4-45fd-8f0f-f72e2f592f9d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0d287cd7-246c-4596-a052-6a3c1c60835f" name="sys_anydata$accessintervalym" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessintervalym" is-trigger-function="0" unique-function-name="sys_anydata$accessintervalym" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="interval" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305286" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessintervalym(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.INTERVAL_YEAR_MONTH')
   AND ($1 ->> 'SYS.INTERVAL_YEAR_MONTH' <> '') 
  THEN
	 ($1->> 'SYS.INTERVAL_YEAR_MONTH')::INTERVAL YEAR TO MONTH
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="9ee15e9e-09f9-43a2-bfb8-ab48b4161b13" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d8fdf04e-7d24-48df-89aa-57ec9bdcc2da" name="sys_anydata$accessnchar" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessnchar" is-trigger-function="0" unique-function-name="sys_anydata$accessnchar" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="bpchar" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305287" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessnchar(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.NCHAR')
   AND ($1 ->> 'SYS.NCHAR' <> '') 
  THEN
	 ($1->> 'SYS.NCHAR')
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="95327db3-f1a3-4b6c-9f60-c26136d70272" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cdf919b3-b08b-477e-b40f-a384458f2fe4" name="sys_anydata$accessnclob" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessnclob" is-trigger-function="0" unique-function-name="sys_anydata$accessnclob" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="text" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305288" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessnclob(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.NCLOB')
   AND ($1 ->> 'SYS.NCLOB' <> '') 
  THEN
	 ($1->> 'SYS.NCLOB')
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="31012520-e875-4108-a44d-eaedc38b8731" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0f89ef2c-db7a-413c-983d-8c883b8a9326" name="sys_anydata$accessnumber" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessnumber" is-trigger-function="0" unique-function-name="sys_anydata$accessnumber" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="numeric" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305289" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessnumber(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.NUMBER')
   AND ($1 ->> 'SYS.NUMBER' <> '') 
  THEN
	 ($1->> 'SYS.NUMBER')::NUMERIC
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="458c6fac-d93f-4262-991a-ccbbbfb287d5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4fe3dd33-6dc9-4884-83b0-6287177aa849" name="sys_anydata$accessnvarchar2" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessnvarchar2" is-trigger-function="0" unique-function-name="sys_anydata$accessnvarchar2" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="text" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305290" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessnvarchar2(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.NVARCHAR2')
   AND ($1 ->> 'SYS.NVARCHAR2' <> '') 
  THEN
	 ($1->> 'SYS.NVARCHAR2')
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="790b4616-1bbe-4395-b084-ef78557fc5c8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1d3d2e57-e34b-4de9-bd11-d91a3579f1d9" name="sys_anydata$accessraw" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessraw" is-trigger-function="0" unique-function-name="sys_anydata$accessraw" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="bytea" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305291" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessraw(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.RAW')
   AND ($1 ->> 'SYS.RAW' <> '') 
  THEN
	 ($1->> 'SYS.RAW')::BYTEA
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="e4dd320a-697e-4233-bc7b-48c76b1027b0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f701e5df-3fd6-4f6a-a7b9-be53aa670bfb" name="sys_anydata$accesstimestamp" subcategories-loading="none" object-loading="extended" context="sys_anydata$accesstimestamp" is-trigger-function="0" unique-function-name="sys_anydata$accesstimestamp" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="timestamp" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305292" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accesstimestamp(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.TIMESTAMP' AND ($1 ->> 'SYS.TIMESTAMP' <> '') THEN
     ($1 ->> 'SYS.TIMESTAMP')::TIMESTAMP WITHOUT TIME ZONE    
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="c160da20-570a-49b9-9361-5ee70fa5ee78" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4de83be1-eadb-48be-b5f7-222528c9069d" name="sys_anydata$accesstimestampltz" subcategories-loading="none" object-loading="extended" context="sys_anydata$accesstimestampltz" is-trigger-function="0" unique-function-name="sys_anydata$accesstimestampltz" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="timestamp" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305293" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accesstimestampltz(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.TIMESTAMP_WITH_LTZ' AND ($1 ->> 'SYS.TIMESTAMP_WITH_LTZ' <> '') THEN
     ($1 ->> 'SYS.TIMESTAMP_WITH_LTZ')::TIMESTAMP WITHOUT TIME ZONE
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="1c2bcc2b-876c-4868-bb7d-6fc7952b0037" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="82625823-9e26-4e2a-bb72-9ab508145b0a" name="sys_anydata$accesstimestamptz" subcategories-loading="none" object-loading="extended" context="sys_anydata$accesstimestamptz" is-trigger-function="0" unique-function-name="sys_anydata$accesstimestamptz" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="timestamptz" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305294" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accesstimestamptz(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.TIMESTAMP_WITH_TIMEZONE' AND ($1 ->> 'SYS.TIMESTAMP_WITH_TIMEZONE' <> '') THEN
     ($1 ->> 'SYS.TIMESTAMP_WITH_TIMEZONE')::TIMESTAMP WITH TIME ZONE
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="732b4fe1-fd5a-4946-97f8-81e86bd407f5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7787653f-a647-442d-ad26-0904a4b7f32b" name="sys_anydata$accessurowid" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessurowid" is-trigger-function="0" unique-function-name="sys_anydata$accessurowid" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="text" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305295" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessurowid(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.UROWID') AND ($1 ->> 'SYS.UROWID' <> '') 
  THEN
	 ($1->> 'SYS.UROWID')
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="bef5d66a-4d99-4518-afa7-0b550efcf12d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a5c30de8-9f0f-4496-87a5-b153f6c63ea6" name="sys_anydata$accessvarchar" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessvarchar" is-trigger-function="0" unique-function-name="sys_anydata$accessvarchar" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="text" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305297" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessvarchar(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.VARCHAR')
   AND ($1 ->> 'SYS.VARCHAR' <> '') 
  THEN
	 ($1->> 'SYS.VARCHAR')
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="a2f03777-fba2-4302-bf5d-61d92cc35109" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="804dc836-d324-4f11-b803-aee5dce2dc4c" name="sys_anydata$accessvarchar2" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessvarchar2" is-trigger-function="0" unique-function-name="sys_anydata$accessvarchar2" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="text" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305296" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessvarchar2(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.VARCHAR2')
   AND ($1 ->> 'SYS.VARCHAR2' <> '') 
  THEN
	 ($1->> 'SYS.VARCHAR2')
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="c617ff90-2cac-42bd-a6d8-a441284481be" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="db7672e8-4961-4dd6-93b6-5489c220a90a" name="sys_anydata$convertbdouble" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertbdouble" is-trigger-function="0" unique-function-name="sys_anydata$convertbdouble" is-aggregate="f" language-name="sql" arguments-datatypes="double precision" is-returning-set="f" ret-datatype="jsonb" function-arguments="value double precision" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305298" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value double precision" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertbdouble(value double precision)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.BINARY_DOUBLE', $1);
]]></complex-attribute>
                        <category _I_D="42658897-d20e-4c3b-a269-5b9d81a4bb6d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e484531f-0e9b-4f3a-872d-79b1abf5f683" name="sys_anydata$convertbfile" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertbfile" is-trigger-function="0" unique-function-name="sys_anydata$convertbfile" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="jsonb" function-arguments="value character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305299" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value character varying" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertbfile(value character varying)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.BFILE', $1);    
]]></complex-attribute>
                        <category _I_D="c964b7bd-1804-4b2b-946d-a5b3ebc07ef5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e6f83f5b-5d55-49e8-8607-7b3da99dc36d" name="sys_anydata$convertbfloat" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertbfloat" is-trigger-function="0" unique-function-name="sys_anydata$convertbfloat" is-aggregate="f" language-name="sql" arguments-datatypes="real" is-returning-set="f" ret-datatype="jsonb" function-arguments="value real" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305300" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value real" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertbfloat(value real)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.BINARY_FLOAT', $1);    
]]></complex-attribute>
                        <category _I_D="e2f9babd-ba7c-41c2-b661-eda6c3caea16" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f29c477d-a631-43b8-be34-d7092a756d4f" name="sys_anydata$convertblob" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertblob" is-trigger-function="0" unique-function-name="sys_anydata$convertblob" is-aggregate="f" language-name="sql" arguments-datatypes="bytea" is-returning-set="f" ret-datatype="jsonb" function-arguments="value bytea" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305301" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value bytea" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertblob(value bytea)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.BLOB', $1);    
]]></complex-attribute>
                        <category _I_D="5d44fad2-2f68-4fa1-946b-95a9e68f3a54" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f7fe1fb9-159b-47d0-9eb7-c2e1e7315d94" name="sys_anydata$convertchar" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertchar" is-trigger-function="0" unique-function-name="sys_anydata$convertchar" is-aggregate="f" language-name="sql" arguments-datatypes="character" is-returning-set="f" ret-datatype="jsonb" function-arguments="value character" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305302" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value character" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertchar(value character)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.CHAR', $1);     
]]></complex-attribute>
                        <category _I_D="61987be0-1dab-4495-9598-aa66a91fda0c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6d4d3940-d554-485f-a85c-27f037b370ff" name="sys_anydata$convertclob" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertclob" is-trigger-function="0" unique-function-name="sys_anydata$convertclob" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="jsonb" function-arguments="value text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305312" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value text" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertclob(value text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.CLOB', $1);     
]]></complex-attribute>
                        <category _I_D="0de9543e-37e5-4f94-a61c-9c5a1473071b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4f918551-7957-48b4-9423-5155a71cb01d" name="sys_anydata$convertdate" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertdate" is-trigger-function="0" unique-function-name="sys_anydata$convertdate" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone" is-returning-set="f" ret-datatype="jsonb" function-arguments="value timestamp without time zone" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305313" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value timestamp without time zone" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertdate(value timestamp without time zone)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.DATE', $1);  
]]></complex-attribute>
                        <category _I_D="18ecdf32-6efd-4a75-bb51-4779a780f113" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="befeffa2-3571-46d9-af5d-3405594aaaee" name="sys_anydata$convertintervalds" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertintervalds" is-trigger-function="0" unique-function-name="sys_anydata$convertintervalds" is-aggregate="f" language-name="sql" arguments-datatypes="interval" is-returning-set="f" ret-datatype="jsonb" function-arguments="value interval" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305303" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value interval" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertintervalds(value interval)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.INTERVAL_DAY_SECOND', $1);  
]]></complex-attribute>
                        <category _I_D="90fe36f8-efa6-4383-9127-003e9ef57b5c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4366b494-a95a-4801-878b-d47529222ace" name="sys_anydata$convertintervalym" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertintervalym" is-trigger-function="0" unique-function-name="sys_anydata$convertintervalym" is-aggregate="f" language-name="sql" arguments-datatypes="interval" is-returning-set="f" ret-datatype="jsonb" function-arguments="value interval" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305304" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value interval" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertintervalym(value interval)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.INTERVAL_YEAR_MONTH', $1);  
]]></complex-attribute>
                        <category _I_D="054b5673-2cf4-44e1-9f5d-a0cfd436032a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bd2ec284-98b1-4013-9ef9-9d1b53a6cef0" name="sys_anydata$convertnchar" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertnchar" is-trigger-function="0" unique-function-name="sys_anydata$convertnchar" is-aggregate="f" language-name="sql" arguments-datatypes="character" is-returning-set="f" ret-datatype="jsonb" function-arguments="value character" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305305" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value character" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertnchar(value character)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.NCHAR', $1);  
]]></complex-attribute>
                        <category _I_D="345a3f2d-5e28-40ad-b798-66245a89034c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="87c505ce-8778-4f7e-a0af-6fbadcf293d4" name="sys_anydata$convertnclob" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertnclob" is-trigger-function="0" unique-function-name="sys_anydata$convertnclob" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="jsonb" function-arguments="value text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305306" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value text" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertnclob(value text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.NCLOB', $1);  
]]></complex-attribute>
                        <category _I_D="63648d1d-902b-4264-9107-306e5b4a7afe" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="035e4209-c3fb-41df-8533-5c70554a5c05" name="sys_anydata$convertnumber" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertnumber" is-trigger-function="0" unique-function-name="sys_anydata$convertnumber" is-aggregate="f" language-name="sql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="jsonb" function-arguments="value numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305314" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value numeric" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertnumber(value numeric)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.NUMBER', $1);  
]]></complex-attribute>
                        <category _I_D="cd4a26cd-6024-476e-8fe0-85ff6941de3a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9e0aac69-bac6-4476-ba2e-f67494ba2092" name="sys_anydata$convertnvarchar2" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertnvarchar2" is-trigger-function="0" unique-function-name="sys_anydata$convertnvarchar2" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="jsonb" function-arguments="value text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305307" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value text" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertnvarchar2(value text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.NVARCHAR2', $1);    
]]></complex-attribute>
                        <category _I_D="9bca0871-4bdd-4d49-9424-b20fa1b2b804" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f67c5ff5-b4e5-4401-96d7-a53b5d68e583" name="sys_anydata$convertraw" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertraw" is-trigger-function="0" unique-function-name="sys_anydata$convertraw" is-aggregate="f" language-name="sql" arguments-datatypes="bytea" is-returning-set="f" ret-datatype="jsonb" function-arguments="value bytea" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305308" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value bytea" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertraw(value bytea)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.RAW', $1);     
]]></complex-attribute>
                        <category _I_D="d483e3f5-2d4b-423c-9951-e0dbdd14652a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4ee2233a-73fa-44cb-a6d5-2b9f31b83b9e" name="sys_anydata$converttimestamp" subcategories-loading="none" object-loading="extended" context="sys_anydata$converttimestamp" is-trigger-function="0" unique-function-name="sys_anydata$converttimestamp" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone" is-returning-set="f" ret-datatype="jsonb" function-arguments="value timestamp without time zone" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305315" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value timestamp without time zone" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$converttimestamp(value timestamp without time zone)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.TIMESTAMP', $1);     
]]></complex-attribute>
                        <category _I_D="644989f0-b257-4186-ae7f-7df20108efca" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="175ca2c5-156e-470b-b8b4-5e0e92bcf81c" name="sys_anydata$converttimestampltz" subcategories-loading="none" object-loading="extended" context="sys_anydata$converttimestampltz" is-trigger-function="0" unique-function-name="sys_anydata$converttimestampltz" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone" is-returning-set="f" ret-datatype="jsonb" function-arguments="value timestamp without time zone" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305309" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value timestamp without time zone" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$converttimestampltz(value timestamp without time zone)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.TIMESTAMP_WITH_LTZ', $1);     
]]></complex-attribute>
                        <category _I_D="e264cc1b-6cb7-4f4d-a46a-598076af4db3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d6813edd-84c4-4bce-ade6-8f4937720485" name="sys_anydata$converttimestamptz" subcategories-loading="none" object-loading="extended" context="sys_anydata$converttimestamptz" is-trigger-function="0" unique-function-name="sys_anydata$converttimestamptz" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp with time zone" is-returning-set="f" ret-datatype="jsonb" function-arguments="value timestamp with time zone" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305310" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value timestamp with time zone" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$converttimestamptz(value timestamp with time zone)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.TIMESTAMP_WITH_TIMEZONE', $1);        
]]></complex-attribute>
                        <category _I_D="9e4bb6c5-5f19-4906-b746-cd6c9cc598c0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f3fa8f86-d4f6-4817-83f6-3ed2d4e7d98b" name="sys_anydata$converturowid" subcategories-loading="none" object-loading="extended" context="sys_anydata$converturowid" is-trigger-function="0" unique-function-name="sys_anydata$converturowid" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="jsonb" function-arguments="value text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305311" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value text" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$converturowid(value text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.UROWID', $1); 
]]></complex-attribute>
                        <category _I_D="c9eaf8a4-7c91-45d7-b93a-f50eec0ad009" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0bc9467f-81dc-4acc-931c-4ccd2fc67a87" name="sys_anydata$convertvarchar" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertvarchar" is-trigger-function="0" unique-function-name="sys_anydata$convertvarchar" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="jsonb" function-arguments="value text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305316" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value text" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertvarchar(value text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.VARCHAR', $1); 
]]></complex-attribute>
                        <category _I_D="08acdba9-3170-4972-86dc-71a81017768c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c2899d34-cf10-47f0-95a0-27d8caccc2b1" name="sys_anydata$convertvarchar2" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertvarchar2" is-trigger-function="0" unique-function-name="sys_anydata$convertvarchar2" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="jsonb" function-arguments="value text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305317" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value text" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertvarchar2(value text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.VARCHAR2', $1);
]]></complex-attribute>
                        <category _I_D="72e1c4ba-4602-4e41-84fd-284da2d940f7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ec9370bf-7088-408f-b34a-1905edb10a51" name="sys_anydata$gettypename" subcategories-loading="none" object-loading="extended" context="sys_anydata$gettypename" is-trigger-function="0" unique-function-name="sys_anydata$gettypename" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="varchar" function-arguments="jsonb_value jsonb" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305277" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$gettypename(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
  SELECT
  case
      WHEN jsonb_value ? 'SYS.NUMBER' then 'SYS.NUMBER'
      WHEN jsonb_value ? 'SYS.DATE' then 'SYS.DATE'
      WHEN jsonb_value ? 'SYS.CHAR' then 'SYS.CHAR'
      WHEN jsonb_value ? 'SYS.VARCHAR' then 'SYS.VARCHAR'
      WHEN jsonb_value ? 'SYS.VARCHAR2' then 'SYS.VARCHAR2'
      WHEN jsonb_value ? 'SYS.RAW' then 'SYS.RAW'
      WHEN jsonb_value ? 'SYS.CLOB' then 'SYS.CLOB'
      WHEN jsonb_value ? 'SYS.BLOB' then 'SYS.BLOB'
      WHEN jsonb_value ? 'SYS.BFILE' then 'SYS.BFILE'
      WHEN jsonb_value ? 'SYS.TIMESTAMP' then 'SYS.TIMESTAMP'
      WHEN jsonb_value ? 'SYS.TIMESTAMP_WITH_TIMEZONE' then 'SYS.TIMESTAMP_WITH_TIMEZONE'
      WHEN jsonb_value ? 'SYS.TIMESTAMP_WITH_LTZ' then 'SYS.TIMESTAMP_WITH_LTZ'
      WHEN jsonb_value ? 'SYS.INTERVAL_YEAR_MONTH' then 'SYS.INTERVAL_YEAR_MONTH'
      WHEN jsonb_value ? 'SYS.INTERVAL_DAY_SECOND' then 'SYS.INTERVAL_DAY_SECOND'
      WHEN jsonb_value ? 'SYS.NCHAR' then 'SYS.NCHAR'
      WHEN jsonb_value ? 'SYS.NVARCHAR2' then 'SYS.NVARCHAR2'
      WHEN jsonb_value ? 'SYS.NCLOB' then 'SYS.NCLOB'
      WHEN jsonb_value ? 'SYS.BINARY_FLOAT' then 'SYS.BINARY_FLOAT'
      WHEN jsonb_value ? 'SYS.BINARY_DOUBLE' then 'SYS.BINARY_DOUBLE'
      WHEN jsonb_value ? 'SYS.UROWID' then 'SYS.UROWID'
      ELSE NULL
  end;
]]></complex-attribute>
                        <category _I_D="65b106a7-6ba8-4169-91c4-88752eab2428" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f0956567-fea3-4c57-be29-f9ec9e95e5a0" name="sys_context" subcategories-loading="none" object-loading="extended" context="sys_context" is-trigger-function="0" unique-function-name="sys_context" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="namespace character varying, attribute character varying, username character varying DEFAULT NULL::character varying, client_id character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304528" volatility="VOLATILE" is-window="f" function-identity-arguments="namespace character varying, attribute character varying, username character varying, client_id character varying" overload-function-count="1" proc-language="plpgsql" function-signature="sys_context(namespace character varying, attribute character varying, username character varying, client_id character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  v_res character varying;
  l_namespace text;
  l_attribute text;

begin
  
  l_namespace := aws_oracle_ext.format_identifier_case(namespace);
  l_attribute := aws_oracle_ext.format_identifier_case(attribute);
  
  case l_namespace
    when 'USERENV' then 
      v_res = aws_oracle_ext.SYS_CONTEXT_USERENV(l_attribute);
    when 'CLIENTCONTEXT'  then 
     v_res = aws_oracle_ext.get_extpack_variable(variable_name => l_namespace||'_'||l_attribute)::character varying; 
  else 
    v_res = aws_oracle_ext.get_application_context(l_namespace, l_attribute, username, client_id);
  end case;

  return v_res;
  
  exception 
    when internal_error then return null; 
end;
]]></complex-attribute>
                        <category _I_D="4c39d329-70a3-4a8d-99a9-86fe84b3464e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2ea8b11d-b173-4bce-8198-5eef0a68a178" name="sys_context_userenv" subcategories-loading="none" object-loading="extended" context="sys_context_userenv" is-trigger-function="0" unique-function-name="sys_context_userenv" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="parameter character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305256" volatility="STABLE" is-window="f" function-identity-arguments="parameter character varying" overload-function-count="1" proc-language="plpgsql" function-signature="sys_context_userenv(parameter character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare l_context json;
begin 
  case upper(parameter)
    when 'ACTION' then return (select action_name from aws_oracle_ext.dbms_application_info$read_module());
    when 'AUDITED_CURSORID' then return null;
    when 'AUTHENTICATED_IDENTITY' then return null;
    when 'AUTHENTICATION_DATA' then return null;
    when 'AUTHENTICATION_METHOD' then return null;
	when 'AUTHENTICATION_TYPE' then return null;
    when 'BG_JOB_ID' then return null;
    when 'CLIENT_IDENTIFIER' then return aws_oracle_ext.get_extpack_variable(upper(parameter));     
    when 'CLIENT_INFO' then return (select client_info from aws_oracle_ext.dbms_application_info$read_client_info());
    when 'CURRENT_BIND' then return null;
    when 'CURRENT_SCHEMA' then return current_schema::character varying;
    when 'CURRENT_SCHEMAID' then return null;
    when 'CURRENT_SQL' then return (select query from pg_stat_activity where pid = pg_backend_pid())::character varying;
    when 'CURRENT_SQL_LENGTH' then return char_length((select query from pg_stat_activity where pid = pg_backend_pid()))::character varying;
	when 'CURRENT_USER' then return current_user::character varying;
	when 'CURRENT_USERID' then return (select usesysid from pg_catalog.pg_user where usename = current_user limit 1)::character varying;	
    when 'DB_DOMAIN' then return null;
    when 'DB_NAME' then return current_database()::character varying;    
    when 'DB_UNIQUE_NAME' then return current_database()::character varying;        
    when 'ENTRYID' then return null;            
    when 'ENTERPRISE_IDENTITY' then return null;            
    when 'FG_JOB_ID' then return null;            
    when 'GLOBAL_CONTEXT_MEMORY' then return '0'::character varying;                
    when 'GLOBAL_UID' then return '0'::character varying; 
    when 'HOST' then return (select client_hostname from pg_stat_activity where pid = pg_backend_pid())::character varying;
    when 'IDENTIFICATION_TYPE' then return null;            
    when 'INSTANCE' then return null;            
    when 'INSTANCE_NAME' then return inet_server_addr()::character varying;           
    when 'IP_ADDRESS' then return inet_client_addr()::character varying;  
    when 'ISDBA'  then return (select usesuper from pg_catalog.pg_user where usename = user limit 1)::character varying;
    when 'LANG' then return (select pg_encoding_to_char(encoding) from pg_database where datname = current_database())::character varying;
    when 'LANGUAGE' then return (select datctype from pg_database where datname = current_database())::character varying;    
    when 'MODULE' then return (select module_name from aws_oracle_ext.dbms_application_info$read_module());            
    when 'NETWORK_PROTOCOL' then return null;                
    when 'NLS_CALENDAR' then return aws_oracle_ext.get_extpack_variable(upper(parameter));     
    when 'NLS_CURRENCY' then return aws_oracle_ext.get_extpack_variable(upper(parameter));
    when 'NLS_DATE_FORMAT' then return aws_oracle_ext.get_extpack_variable(upper(parameter));     
    when 'NLS_DATE_LANGUAGE' then return aws_oracle_ext.get_extpack_variable(upper(parameter));     
    when 'NLS_SORT' then return aws_oracle_ext.get_extpack_variable(upper(parameter));     
    when 'NLS_TERRITORY' then return aws_oracle_ext.get_extpack_variable(upper(parameter));     
    when 'OS_USER' then return null;            
    when 'POLICY_INVOKER' then return null;                
    when 'PROXY_ENTERPRISE_IDENTITY' then return null;            
    when 'PROXY_GLOBAL_UID' then return null;                
    when 'PROXY_USER' then return null;            
    when 'PROXY_USERID' then return null;                
    when 'SERVER_HOST' then  return inet_server_addr()::character varying;           
    when 'SERVICE_NAME' then return null;                
    when 'SESSION_USER' then return SESSION_USER::character varying;            
    when 'SESSION_USERID' then return (select usesysid from pg_catalog.pg_user where usename = user limit 1)::character varying;
    when 'SESSIONID' then return pg_backend_pid()::character varying;
    when 'SID' then return null;                
    when 'STATEMENTID' then return null;                
    when 'TERMINAL' then return null;                
    else raise exception 'invalid parameter';  
  end case;
  
  exception
    when internal_error then
      return null;
end;
]]></complex-attribute>
                        <category _I_D="e27d0686-9eb4-4a2f-836c-c13a86e19293" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="893c3800-c3f1-428f-a5ef-f730d3fc8928" name="sys_guid" subcategories-loading="none" object-loading="extended" context="sys_guid" is-trigger-function="0" unique-function-name="sys_guid" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="text" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304530" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="sys_guid()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    IF (NOT aws_oracle_ext.is_package_initialized('SYS_GUID', 'INITIALIZE')) THEN
        CREATE EXTENSION IF NOT EXISTS pgcrypto SCHEMA public;

        PERFORM aws_oracle_ext.set_package_initialized('SYS_GUID', 'INITIALIZE');
    END IF;

    RETURN upper(replace(public.gen_random_uuid()::TEXT, '-', ''));
END;
]]></complex-attribute>
                        <category _I_D="f8815562-3ec1-486c-bcd6-1ae7484786a4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2c1ea0f4-e0e4-4826-b5b0-368b0d3c373b" name="sysdate" subcategories-loading="none" object-loading="extended" context="sysdate" is-trigger-function="0" unique-function-name="sysdate" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="timestamp" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304529" volatility="STABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sysdate()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT
    (
        COALESCE
        (
            MAX(tz_offset),
            0
        )::TEXT,
        ' HOURS'
    )::INTERVAL + clock_timestamp()::TIMESTAMP(0) 
    FROM aws_oracle_data.aws_oracle_ext_session_local_tz;
    
]]></complex-attribute>
                        <category _I_D="929a167d-5a38-440b-a729-ad8700374577" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8e0ec473-afa4-48a6-8c3c-a89d8ad12a7b" name="systimestamp" subcategories-loading="none" object-loading="extended" context="systimestamp" is-trigger-function="0" unique-function-name="systimestamp" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="timestamptz" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304531" volatility="STABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="systimestamp()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT
    (
        COALESCE
        (
            MAX(tz_offset),
            0
        )::TEXT,
        ' HOURS'
    )::INTERVAL + clock_timestamp() 
    FROM aws_oracle_data.aws_oracle_ext_session_local_tz;
    
]]></complex-attribute>
                        <category _I_D="a2abb61a-d0fa-40b4-b0b5-96638f93fc44" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="96346a32-a2c0-4cc5-a79e-3e81c592b582" name="table" subcategories-loading="none" object-loading="extended" context="table" is-trigger-function="0" unique-function-name="table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,character varying,character varying,bigint[]" is-returning-set="t" ret-datatype="record" function-arguments="pval anyelement, pvaltype character varying, ptypetocast character varying DEFAULT NULL::character varying, pindexes bigint[] DEFAULT NULL::bigint[]" schema-id="304013" function-type="RET_DATASET" count-arguments="4" function-id="304062" volatility="VOLATILE" is-window="f" function-identity-arguments="pval anyelement, pvaltype character varying, ptypetocast character varying, pindexes bigint[]" overload-function-count="1" proc-language="plpgsql" function-signature="table(pval anyelement, pvaltype character varying, ptypetocast character varying, pindexes bigint[])">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vSQL TEXT;
    vcol TEXT;
    vcolumns TEXT[];
    vpos SMALLINT DEFAULT 0;
BEGIN

    CASE
        WHEN pValType = 'NESTED' THEN

            IF pIndexes IS NOT NULL THEN

                vSQL := CONCAT
                (
                    'SELECT CAST(ROW(src.v) AS ',
                    pTypeToCast,
                    ')',
                    CHR(10),
                    'FROM UNNEST($1) WITH ORDINALITY AS src(v, rownum)',
                    CHR(10),
                    'JOIN UNNEST($2) WITH ORDINALITY AS lim(v, rownum) ON src.rownum = lim.v',
                    CHR(10),
                    'ORDER BY lim.rownum'
                );

                RETURN QUERY EXECUTE vSQL USING pVal, pIndexes;
            
            ELSE

                vSQL := CONCAT('SELECT CAST(ROW(v) AS ', pTypeToCast, ') FROM UNNEST($1) WITH ORDINALITY AS v');
                RETURN QUERY EXECUTE vSQL USING pVal;

            END IF;
                        
        WHEN pValType = 'NESTEDREC' THEN

            vSQL := CONCAT
            (
                'SELECT ARRAY(SELECT JSON_OBJECT_KEYS(ROW_TO_JSON(s)) FROM ',
                '(',
                'SELECT (NULL::',
                pTypeToCast,
                ').*',
                ') AS s)'
            );

            EXECUTE vSQL INTO vcolumns;

            vSQL := '';

            vpos := CARDINALITY(vcolumns);

            FOREACH vcol IN ARRAY vcolumns LOOP

                vpos := vpos - 1;

                vSQL := CONCAT
                (
                    vSQL,
                    'src.',
                    vcol,
                    CASE WHEN vpos <> 0  THEN ', ' ELSE '' END
                );

            END LOOP;

            IF pIndexes IS NOT NULL THEN

                vSQL := CONCAT
                (
                    'SELECT ROW(',
                    vSQL,
                    ')::',
                    pTypeToCast,
                    ' FROM UNNEST($1) WITH ORDINALITY AS src JOIN UNNEST($2) WITH ORDINALITY AS lim(v, rownum) ON src.ordinality = lim.v ORDER BY lim.rownum'
                );

                RETURN QUERY EXECUTE vSQL USING pVal, pIndexes;

            ELSE

                vSQL := CONCAT
                (
                    'SELECT ROW(',
                    vSQL,
                    ')::',
                    pTypeToCast,
                    ' FROM UNNEST($1) WITH ORDINALITY AS src'
                );

                RETURN QUERY EXECUTE vSQL USING pVal;

            END IF;

        WHEN pValType = 'ASSOC' THEN

            IF PG_TYPEOF(pVal)::TEXT <> 'jsonb' THEN

                RAISE USING MESSAGE := 'Associative array is incorrect. Please, specify procedure name and array path';

            END IF;

            vSQL := FORMAT
            (
                $$
SELECT JSONB_POPULATE_RECORD(null::%s, z.*)
FROM aws_oracle_ext.collection_to_table
(
    p_val => $1,
    pindexes => $2
) AS z
                $$,
                pTypeToCast
            );

            RETURN QUERY EXECUTE vSQL USING pVal, pindexes;

        ELSE
            NULL;
    END CASE;

END;
]]></complex-attribute>
                        <category _I_D="fad28a79-d680-47b6-ab20-eb802856d57c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="96f920f2-6f97-4398-b138-e71afe2d3364" name="to_base" subcategories-loading="none" object-loading="extended" context="to_base" is-trigger-function="0" unique-function-name="to_base" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="text" function-arguments="p_dec numeric, p_base numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304622" volatility="VOLATILE" is-window="f" function-identity-arguments="p_dec numeric, p_base numeric" overload-function-count="1" proc-language="plpgsql" function-signature="to_base(p_dec numeric, p_base numeric)" comment="Convert decimal to any specified base">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  l_str CHARACTER VARYING(255) DEFAULT '';
  l_num NUMERIC(78,1) DEFAULT p_dec;
  l_hex CHARACTER VARYING(16) DEFAULT '0123456789abcdef';
BEGIN
  IF TRUNC (p_dec) <> p_dec OR p_dec < 0
  THEN
    RAISE plpgsql_error;
  END IF;

  LOOP
    l_str := SUBSTR(l_hex, (MOD(l_num, p_base) + 1)::int, 1) || l_str;
    l_num := TRUNC(l_num / p_base);
    EXIT WHEN l_num = 0;
  END LOOP;

  RETURN l_str;
END;
]]></complex-attribute>
                        <category _I_D="a3bdff04-cf34-401c-bdaf-e8576bb40f80" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="448006d9-64df-4e55-875f-d47f92bbbc6d" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval character varying)" is-trigger-function="0" unique-function-name="to_char(pval character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304553" volatility="VOLATILE" is-window="f" function-identity-arguments="pval character varying" overload-function-count="19" proc-language="plpgsql" function-signature="to_char(pval character varying)" unique-suffix="(pval character varying)" routine-number="304553" comment="to_char convertion VARCHAR2 as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL AND pVal <> '' THEN
    
        vResult := aws_oracle_ext.to_char_formatter
        (
            pVal => pVal
        );
    END IF;

    RETURN vResult;
    
END;
]]></complex-attribute>
                        <category _I_D="9aa7f3d3-1194-4251-b574-f9e2ed0bf8a6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="310b159a-455f-4794-ae51-eb2d3d2b1f58" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval character)" is-trigger-function="0" unique-function-name="to_char(pval character)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character" is-returning-set="f" ret-datatype="varchar" function-arguments="pval character" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304532" volatility="VOLATILE" is-window="f" function-identity-arguments="pval character" overload-function-count="19" proc-language="plpgsql" function-signature="to_char(pval character)" unique-suffix="(pval character)" routine-number="304532" comment="to_char convertion CHAR as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult VARCHAR DEFAULT NULL;
    vargs TEXT;
BEGIN

    IF pVal IS NOT NULL AND pVal <> '' THEN
        

        vResult := aws_oracle_ext.to_char_formatter
        (
            pVal => pVal
        );

    END IF;

    RETURN vResult;
    
END;
]]></complex-attribute>
                        <category _I_D="457c883a-6e6c-4c83-9698-794ab1045155" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6d1cb194-3a9b-4f03-bb46-55ef1fe16a46" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval date)" is-trigger-function="0" unique-function-name="to_char(pval date)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="date" is-returning-set="f" ret-datatype="varchar" function-arguments="pval date" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304549" volatility="VOLATILE" is-window="f" function-identity-arguments="pval date" overload-function-count="19" proc-language="plpgsql" function-signature="to_char(pval date)" unique-suffix="(pval date)" routine-number="304549">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt VARCHAR;
BEGIN

    SELECT value
    INTO vFmt
    FROM aws_oracle_ext.v$nls_parameters
    WHERE parameter = 'NLS_DATE_FORMAT';

    RETURN aws_oracle_ext.to_char
    (
        pVal => pVal::TIMESTAMP(0),
        pFmt => vFmt
    );

END;
]]></complex-attribute>
                        <category _I_D="e19883af-141f-4bf8-a603-176faf88611a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="897ea3b4-c003-48e3-bc4e-cadc072cc9c4" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval date, pfmt character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_char(pval date, pfmt character varying, pnlsparam character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="date,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval date, pfmt character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304554" volatility="VOLATILE" is-window="f" function-identity-arguments="pval date, pfmt character varying, pnlsparam character varying" overload-function-count="19" proc-language="sql" function-signature="to_char(pval date, pfmt character varying, pnlsparam character varying)" unique-suffix="(pval date, pfmt character varying, pnlsparam character varying)" routine-number="304554">
                        <complex-attribute name="sql"><![CDATA[
    SELECT aws_oracle_ext.to_char
    (
        $1::TIMESTAMP(0),
        $2,
        $3
    );
]]></complex-attribute>
                        <category _I_D="278176a5-96ca-4cdc-9939-86732f71f8a9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3d5eeb44-3928-4300-a233-22c76c631398" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval double precision)" is-trigger-function="0" unique-function-name="to_char(pval double precision)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision" is-returning-set="f" ret-datatype="varchar" function-arguments="pval double precision" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304533" volatility="VOLATILE" is-window="f" function-identity-arguments="pval double precision" overload-function-count="19" proc-language="plpgsql" function-signature="to_char(pval double precision)" unique-suffix="(pval double precision)" routine-number="304533" comment="to_char convertion Number as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt     VARCHAR;
    vResult  VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL THEN
        

        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => '', -- not used
            pNoNumberFormat => '' -- value is just a flag
        );

        vResult := vFmt;

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="9cefc7b9-f0ae-492a-becb-57c987690765" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="833db925-dc24-4482-8fb7-504a60e5ff68" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval double precision, pfmt character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_char(pval double precision, pfmt character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval double precision, pfmt character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304534" volatility="VOLATILE" is-window="f" function-identity-arguments="pval double precision, pfmt character varying, pnlsparam character varying" overload-function-count="19" proc-language="plpgsql" function-signature="to_char(pval double precision, pfmt character varying, pnlsparam character varying)" unique-suffix="(pval double precision, pfmt character varying, pnlsparam character varying)" routine-number="304534" comment="to_char convertion Number as Oracle does. Some Format models could return incorrect results. Only NLS_DATE_LANGUAGE is allowed for NLS param. Value must be correct as lc_time value">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt     VARCHAR;
    vResult  VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL THEN

        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => pFmt,
            pNlsParam => pNlsParam
        );

        vResult := vFmt;

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="270b5b03-6da7-43d6-b7f5-8a88a3d7a51f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="aa74a065-b377-436a-b7c5-ce770bf17a7f" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval integer)" is-trigger-function="0" unique-function-name="to_char(pval integer)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="varchar" function-arguments="pval integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304537" volatility="VOLATILE" is-window="f" function-identity-arguments="pval integer" overload-function-count="19" proc-language="plpgsql" function-signature="to_char(pval integer)" unique-suffix="(pval integer)" routine-number="304537" comment="to_char convertion Number as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt     VARCHAR;
    vResult  VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL THEN

        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => '', -- not used
            pNoNumberFormat => '' -- value is just a flag
        );

        vResult := vFmt;

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="5d84d6c2-e8e9-4d0c-bc1d-d1aafe22e8c7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="81d8d0a8-1041-41d4-92a8-dd9443a7970c" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval integer, pfmt character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_char(pval integer, pfmt character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval integer, pfmt character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304538" volatility="VOLATILE" is-window="f" function-identity-arguments="pval integer, pfmt character varying, pnlsparam character varying" overload-function-count="19" proc-language="plpgsql" function-signature="to_char(pval integer, pfmt character varying, pnlsparam character varying)" unique-suffix="(pval integer, pfmt character varying, pnlsparam character varying)" routine-number="304538" comment="to_char convertion Number as Oracle does. Some Format models could return incorrect results. Only NLS_DATE_LANGUAGE is allowed for NLS param. Value must be correct as lc_time value">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt     VARCHAR;
    vResult  VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL THEN
        

        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => pFmt,
            pNlsParam => pNlsParam
        );

        vResult := vFmt;

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="76ba6765-7ab1-4a1e-9547-800d552a1b38" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c20fb790-0f4c-458e-9b82-1234c906b0ae" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval interval)" is-trigger-function="0" unique-function-name="to_char(pval interval)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="interval" is-returning-set="f" ret-datatype="varchar" function-arguments="pval interval" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304539" volatility="VOLATILE" is-window="f" function-identity-arguments="pval interval" overload-function-count="19" proc-language="plpgsql" function-signature="to_char(pval interval)" unique-suffix="(pval interval)" routine-number="304539" comment="to_char convertion interval with TZ as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    RETURN aws_oracle_ext.to_char
    (
        pVal => pVal,
        pFmt => 'd' -- won't be used, just to pass something correct
    );
    
END;
]]></complex-attribute>
                        <category _I_D="02854022-d7bc-4f47-8c29-7398b60e01ec" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="05637a00-3e37-4f06-87ab-e43f1f9868d9" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval interval, pfmt character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_char(pval interval, pfmt character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="interval,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval interval, pfmt character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304540" volatility="VOLATILE" is-window="f" function-identity-arguments="pval interval, pfmt character varying, pnlsparam character varying" overload-function-count="19" proc-language="plpgsql" function-signature="to_char(pval interval, pfmt character varying, pnlsparam character varying)" unique-suffix="(pval interval, pfmt character varying, pnlsparam character varying)" routine-number="304540" comment="to_char convertion interval with TZ as Oracle does. Some Format models could return incorrect results. Only NLS_DATE_LANGUAGE is allowed for NLS param. Value must be correct as lc_time value">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult VARCHAR DEFAULT NULL;
    vFmt VARCHAR;
BEGIN

    IF pVal IS NOT NULL THEN
        
        IF LENGTH(pFmt) <> 0 THEN

            vFmt := aws_oracle_ext.to_char_formatter
            (
                pVal      => pVal,
                pFormat   => pFmt,
                pNlsParam => pNlsParam
            );
            -- it is year to month 
            IF pVal::TEXT ~* 'YEAR' OR pVal::TEXT ~* 'MON' THEN

                vResult := CONCAT
                (
                    COALESCE(SUBSTRING(EXTRACT(year FROM pVal)::TEXT FROM '-'),'+'),
                    CASE
                        WHEN EXTRACT(year FROM pVal) < 2 THEN
                            LPAD(SUBSTRING(EXTRACT(year FROM pVal)::TEXT FROM '\d+'), 2, '0')
                        ELSE
                            SUBSTRING(EXTRACT(year FROM pVal)::TEXT FROM '\d+')
                    END,
                    '-',
                    LPAD(ABS(EXTRACT(month FROM pVal))::TEXT, 2, '0')
                );
            -- it is day to second
            ELSE

                vResult := CONCAT
                (
                    COALESCE(SUBSTRING(EXTRACT(day FROM pVal)::TEXT FROM '\-'),'+'),
                    LPAD(SUBSTRING(EXTRACT(day FROM pVal)::TEXT FROM '\d+'), 2, '0'),
                    ' ',
                    LPAD(EXTRACT(hour FROM pVal)::TEXT, 2, '0'),
                    ':',
                    LPAD(EXTRACT(minute FROM pVal)::TEXT, 2, '0'),
                    ':',
                    CASE 
                        WHEN STRPOS(pVal::TEXT, '.') >0 THEN
                            REGEXP_REPLACE(LPAD(EXTRACT(microseconds FROM pVal)::TEXT, 8, '0'), '(\d\d)(\d+)', '\1.\2')
                        ELSE
                            LPAD(EXTRACT(seconds FROM pVal)::TEXT, 2, '0')
                    END
                );

            END IF;

        END IF;

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="d8c023f1-815f-477f-a797-b981f2c100f8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="60acf5bd-46aa-4b15-8100-9bac174bb9a6" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval numeric)" is-trigger-function="0" unique-function-name="to_char(pval numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="varchar" function-arguments="pval numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304541" volatility="VOLATILE" is-window="f" function-identity-arguments="pval numeric" overload-function-count="19" proc-language="plpgsql" function-signature="to_char(pval numeric)" unique-suffix="(pval numeric)" routine-number="304541" comment="to_char convertion Number as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt     VARCHAR;
    vResult  VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL THEN
        
        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => '', -- not used
            pNoNumberFormat => '' -- value is just a flag
        );

        vResult := vFmt;

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="94ace053-33e2-4124-a226-1cbed50af8c4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f2fb8b22-442f-402f-8c44-90f0ba4b7d3a" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval numeric, pfmt character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_char(pval numeric, pfmt character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval numeric, pfmt character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304542" volatility="VOLATILE" is-window="f" function-identity-arguments="pval numeric, pfmt character varying, pnlsparam character varying" overload-function-count="19" proc-language="plpgsql" function-signature="to_char(pval numeric, pfmt character varying, pnlsparam character varying)" unique-suffix="(pval numeric, pfmt character varying, pnlsparam character varying)" routine-number="304542" comment="to_char convertion Number as Oracle does. Some Format models could return incorrect results. Only NLS_DATE_LANGUAGE is allowed for NLS param. Value must be correct as lc_time value">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt     VARCHAR;
    vResult  VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL THEN

        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => pFmt,
            pNlsParam => pNlsParam
        );

        vResult := vFmt;

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="62d68c64-1d5e-4b91-b14d-53e6cda0a6e5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="af339f53-17b2-4f5a-ae5f-0b236b0c9cbc" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval real)" is-trigger-function="0" unique-function-name="to_char(pval real)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="real" is-returning-set="f" ret-datatype="varchar" function-arguments="pval real" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304545" volatility="VOLATILE" is-window="f" function-identity-arguments="pval real" overload-function-count="19" proc-language="plpgsql" function-signature="to_char(pval real)" unique-suffix="(pval real)" routine-number="304545" comment="to_char convertion Number as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt     VARCHAR;
    vResult  VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL THEN

        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => '', -- not used
            pNoNumberFormat => '' -- value is just a flag
        );

        vResult := vFmt;

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="960e0291-8266-45af-88fd-453655797e9d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="35debfaf-7ed8-4e27-8d1c-f2827aabec68" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval real, pfmt character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_char(pval real, pfmt character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="real,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval real, pfmt character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304546" volatility="VOLATILE" is-window="f" function-identity-arguments="pval real, pfmt character varying, pnlsparam character varying" overload-function-count="19" proc-language="plpgsql" function-signature="to_char(pval real, pfmt character varying, pnlsparam character varying)" unique-suffix="(pval real, pfmt character varying, pnlsparam character varying)" routine-number="304546" comment="to_char convertion Number as Oracle does. Some Format models could return incorrect results. Only NLS_DATE_LANGUAGE is allowed for NLS param. Value must be correct as lc_time value">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt     VARCHAR;
    vResult  VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL THEN

        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => pFmt,
            pNlsParam => pNlsParam
        );

        vResult := vFmt;

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="24a84998-da0d-425a-a1e7-0ba8e9402568" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a9d3810c-cffd-4fc8-a731-19f5afe23b36" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval text)" is-trigger-function="0" unique-function-name="to_char(pval text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="varchar" function-arguments="pval text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304547" volatility="VOLATILE" is-window="f" function-identity-arguments="pval text" overload-function-count="19" proc-language="plpgsql" function-signature="to_char(pval text)" unique-suffix="(pval text)" routine-number="304547" comment="to_char convertion CLOB as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL AND pVal <> '' THEN
        
            vResult := aws_oracle_ext.to_char_formatter
            (
                pVal => pVal
            );

    END IF;

    RETURN vResult;
    
END;
]]></complex-attribute>
                        <category _I_D="79d2b6ed-ba31-475f-9905-fa2b244ade3e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="081edbc4-f933-417c-99a2-ecd9255a1cd4" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval timestamp with time zone)" is-trigger-function="0" unique-function-name="to_char(pval timestamp with time zone)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="timestamp with time zone" is-returning-set="f" ret-datatype="varchar" function-arguments="pval timestamp with time zone" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304551" volatility="VOLATILE" is-window="f" function-identity-arguments="pval timestamp with time zone" overload-function-count="19" proc-language="plpgsql" function-signature="to_char(pval timestamp with time zone)" unique-suffix="(pval timestamp with time zone)" routine-number="304551" comment="to_char convertion timestamp with TZ as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt VARCHAR;
BEGIN

    SELECT value
    INTO vFmt
    FROM aws_oracle_ext.v$nls_parameters
    WHERE parameter = 'NLS_TIMESTAMP_TZ_FORMAT';

    RETURN aws_oracle_ext.to_char
    (
        pVal => pVal,
        pFmt => vFmt
    );
    
END;
]]></complex-attribute>
                        <category _I_D="169a42ff-5916-49a7-b0c4-b10d8b343cba" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3d4f597c-b975-4974-98e8-eabb6ea5f1cc" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval timestamp with time zone, pfmt character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_char(pval timestamp with time zone, pfmt character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="timestamp with time zone,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval timestamp with time zone, pfmt character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304552" volatility="VOLATILE" is-window="f" function-identity-arguments="pval timestamp with time zone, pfmt character varying, pnlsparam character varying" overload-function-count="19" proc-language="plpgsql" function-signature="to_char(pval timestamp with time zone, pfmt character varying, pnlsparam character varying)" unique-suffix="(pval timestamp with time zone, pfmt character varying, pnlsparam character varying)" routine-number="304552" comment="to_char convertion timestamp with TZ as Oracle does. Some Format models could return incorrect results. Only NLS_DATE_LANGUAGE is allowed for NLS param. Value must be correct as lc_time value">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult VARCHAR DEFAULT NULL;
    vFmt VARCHAR;
BEGIN

    IF pVal IS NOT NULL THEN

        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => pFmt,
            pNlsParam => pNlsParam
        );

        vResult := TO_CHAR(pVal, vFmt);

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="62c4241b-0bbd-429f-8cb6-d4b1f2824781" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="eb8a6cfe-4bbd-46a6-ae6c-7a20e8ac3f3f" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval timestamp without time zone)" is-trigger-function="0" unique-function-name="to_char(pval timestamp without time zone)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="timestamp without time zone" is-returning-set="f" ret-datatype="varchar" function-arguments="pval timestamp without time zone" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304548" volatility="VOLATILE" is-window="f" function-identity-arguments="pval timestamp without time zone" overload-function-count="19" proc-language="plpgsql" function-signature="to_char(pval timestamp without time zone)" unique-suffix="(pval timestamp without time zone)" routine-number="304548" comment="to_char convertion date or timestamp without TZ as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt VARCHAR;
BEGIN

    IF SUBSTRING(TO_CHAR(EXTRACT('epoch' FROM pVal), '9999999999D9999999'),12,6) = '.00000' THEN

        SELECT value
        INTO vFmt
        FROM aws_oracle_ext.v$nls_parameters
        WHERE parameter = 'NLS_DATE_FORMAT';

    ELSE

        SELECT value
        INTO vFmt
        FROM aws_oracle_ext.v$nls_parameters
        WHERE parameter = 'NLS_TIMESTAMP_FORMAT';

    END IF;

    RETURN aws_oracle_ext.to_char
    (
        pVal => pVal,
        pFmt => vFmt
    );

END;
]]></complex-attribute>
                        <category _I_D="3a117cb4-e8f3-441c-898c-48f99330cd31" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f2095dbe-46db-4033-90a2-9b2538e693ba" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval timestamp without time zone, pfmt character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_char(pval timestamp without time zone, pfmt character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="timestamp without time zone,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval timestamp without time zone, pfmt character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304550" volatility="VOLATILE" is-window="f" function-identity-arguments="pval timestamp without time zone, pfmt character varying, pnlsparam character varying" overload-function-count="19" proc-language="plpgsql" function-signature="to_char(pval timestamp without time zone, pfmt character varying, pnlsparam character varying)" unique-suffix="(pval timestamp without time zone, pfmt character varying, pnlsparam character varying)" routine-number="304550" comment="to_char convertion date or timestamp without TZ as Oracle does. Some Format models could return incorrect results. Only NLS_DATE_LANGUAGE is allowed for NLS param. Value must be correct as lc_time value">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult VARCHAR DEFAULT NULL;
    vFmt VARCHAR;
BEGIN

    IF pVal IS NOT NULL THEN

        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => pFmt,
            pNlsParam => pNlsParam
        );

        vResult := TO_CHAR(pVal, vFmt);

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="7d387d6f-a47e-4fa4-9110-fb7f8000b197" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="71e730b5-d0a9-41eb-88b7-8a18bcad93e4" name="to_char_formatter" subcategories-loading="none" object-loading="extended" context="to_char_formatter" is-trigger-function="0" unique-function-name="to_char_formatter" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,character varying,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval anyelement, pformat character varying DEFAULT NULL::character varying, pnlsparam character varying DEFAULT NULL::character varying, pnonumberformat character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304535" volatility="VOLATILE" is-window="f" function-identity-arguments="pval anyelement, pformat character varying, pnlsparam character varying, pnonumberformat character varying" overload-function-count="1" proc-language="plpgsql" function-signature="to_char_formatter(pval anyelement, pformat character varying, pnlsparam character varying, pnonumberformat character varying)" comment="Utility function making to_char results similar to expected on Oracle side">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt VARCHAR;
    rec RECORD;
    vResult VARCHAR;
    vDataType VARCHAR;
    vIsDateTime BOOLEAN DEFAULT FALSE;
    cAllowedDatatypes CONSTANT VARCHAR[] := ARRAY
    [
        -- numeric
        'REAL',
        'DOUBLE PRECISION',
        'NUMERIC',
        'INTEGER',
        --datetime
        'INTERVAL',
        'TIMESTAMP WITHOUT TIME ZONE',
        'TIMESTAMP WITH TIME ZONE',
        -- char
        'CHARACTER',
        'CHARACTER VARYING',
        'TEXT'

    ];
    cpellmodels CONSTANT TEXT[] := ARRAY
    [
        'SSSP',
        'Y,YYYSP',
        'SYYYYSP',
        'YYYYSP',
        'YYYSP',
        'YYSP',
        'YSP',
        'SCCSP',
        'CCSP',
        'RRRRSP',
        'RRSP',
        'HH24SP',
        'HH12SP',
        'HHSP',
        'DDDSP',
        'DDSP',
        'DSP',
        'MISP',
        'MMSP',
        'QSP',
        'TZHSP',
        'TZMSP',
        'FFSP',
        'FF1SP',
        'FF2SP',
        'FF3SP',
        'FF4SP',
        'FF5SP',
        'FF6SP',
        'FF7SP',
        'FF8SP',
        'FF9SP'
    ];
    vIsNumeric BOOLEAN DEFAULT FALSE;
    vIsChar BOOLEAN DEFAULT FALSE;

    verrorMessages CONSTANT VARCHAR[] := ARRAY
    [
        'ORA-01722: invalid number', --1
        'ORA-01821: date format not recognized', --2
        'ORA-01822: era format code is not valid with this calendar', --3
        'not implemented', --4
        'ORA-12702: invalid NLS parameter string used in SQL function', --5
        'ORA-01481: invalid number format model', --6
        'ORA-22835: Buffer too small for CLOB to CHAR', --7
        'ORA-00902: invalid datatype' --8
    ];

    v_lctime VARCHAR;
    vNlsParam VARCHAR;
    vNlsParamCopy VARCHAR;
    vDayMaxLengh INTEGER;
    vDyMaxLengh INTEGER;
    vMonthMaxLength INTEGER;
    vMonMaxLength INTEGER;
    --used to calculate localized day/month names
    cDayMonthNumbers CONSTANT INTEGER[] := ARRAY[1,2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
    vTm VARCHAR;

    vtail VARCHAR;
    vfm VARCHAR;

    vurrisset BOOLEAN DEFAULT FALSE;
    vGroupSeparator VARCHAR(2) DEFAULT NULL;
    vDecimalSeparator VARCHAR(2) DEFAULT NULL;
    vCurrencySymbol VARCHAR;
    vIsoCurrency VARCHAR;
    vDualCurrency VARCHAR;
    bd BOOLEAN DEFAULT FALSE;
    vln INTEGER;

BEGIN

    vDataType := UPPER(PG_TYPEOF(pVal)::TEXT);

    IF ARRAY_POSITION(cAllowedDatatypes,  vDataType) IS NULL THEN

        RAISE USING MESSAGE := verrorMessages[8];

    END IF;

    CASE
        WHEN vDataType IN
        (
            'INTERVAL',
            'TIMESTAMP WITHOUT TIME ZONE',
            'TIMESTAMP WITH TIME ZONE'
        ) THEN

            vIsDateTime := TRUE;

        WHEN vDataType IN
        (
            'REAL',
            'DOUBLE PRECISION',
            'NUMERIC',
            'INTEGER'
        ) THEN

            vIsNumeric := TRUE;

        ELSE

            vIsChar := TRUE; 

    END CASE;

    IF (vIsDateTime OR  (vIsNumeric AND pNoNumberFormat IS NULL)) AND (pFormat IS NULL OR pFormat = '') THEN

        IF vIsNumeric AND pFormat = '' THEN

            vResult := '#';
        
        ELSE

            vResult := NULL;

        END IF;

    ELSE

        CASE
            WHEN vIsDateTime AND vDataType <> 'INTERVAL' AND pFormat ~* '^FX$' THEN

                vResult := NULL;

            WHEN vIsDateTime THEN

                IF pNlsParam IS NOT NULL THEN

                    bd := TRUE;

                    vNlsParam := REPLACE(pNlsParam,' ', '');

                    SELECT STRING_AGG(TRIM(nls),'')
                    INTO vNlsParam
                    FROM  REGEXP_SPLIT_TO_TABLE
                    ( 
                        vNlsParam,
                        'NLS_',
                        'i'
                    ) nls
                    WHERE TRIM(nls) <> '' AND TRIM(nls) !~* 'CALENDAR';

                    IF vNlsParam IS NOT NULL THEN

                        IF vNlsParam  !~* 'DATE_LANGUAGE=' THEN

                            RAISE USING MESSAGE := verrorMessages[5];

                        END IF;

                        -- store original language
                        v_lctime := CURRENT_SETTING('lc_time');

                        vNlsParam := REGEXP_REPLACE(vNlsParam, 'DATE_LANGUAGE=', '', 'i');

                        -- try to set NLS
                        BEGIN

                            vTm := SET_CONFIG
                            (
                                'lc_time',
                                vNlsParam,
                                TRUE
                            );

                        EXCEPTION 
                            WHEN OTHERS THEN

                                RAISE USING MESSAGE := verrorMessages[5]; 
                        END;

                    END IF;

                END IF;

                IF NOT bd THEN

                    SELECT f.dmodelto
                    INTO vResult
                    FROM aws_oracle_data.dfmt f
                    WHERE f.dmodel = pFormat;

                    IF FOUND THEN

                        RETURN vResult;

                    END IF;

                END IF;
        
                vtail:= pFormat;

                LOOP

                    SELECT ok, tail, fm
                    INTO vFmt, vtail, vfm
                    FROM aws_oracle_ext.to_char_parser
                    (
                        pStr  => vtail,
                        pType => 'datetime',
                        pFm   => vfm
                    );

                    IF vFmt !~ '"' THEN

                        IF vDataType IN ('TIMESTAMP WITHOUT TIME ZONE', 'TIMESTAMP WITH TIME ZONE') THEN

                            IF vFmt ~* 'SP$' THEN

                                IF EXISTS (SELECT 1 FROM UNNEST(cpellmodels) t WHERE t = UPPER(vFmt)) THEN

                                    bd := TRUE;
                                    IF vDataType = 'TIMESTAMP WITH TIME ZONE' THEN

                                        vFmt := aws_oracle_ext.spell_timestamptz
                                        (
                                            pval => pVal,
                                            pfmt => vFmt
                                        );

                                    ELSE

                                        vFmt := aws_oracle_ext.spell_timestamp
                                        (
                                            pval => pVal,
                                            pfmt => vFmt
                                        );

                                    END IF;
                                    vFmt := CONCAT
                                    (
                                        '"',
                                        vFmt,
                                        '"'
                                    );

                                    vResult := CONCAT(vResult, vFmt);
                                    EXIT WHEN vtail IS NULL;
                                    CONTINUE;

                                END IF;

                            END IF;

                        END IF;

                        -- exact set of dates is chosen to be sure about day names
                        --calculate max day of week name length for language
                        IF vDataType <> 'INTERVAL' THEN

                            IF vFmt ~* '^tmMON$' OR vFmt ~* '^tmMONTH$' OR vFmt ~* '^tmDAY$' OR vFmt ~* '^tmDY$' THEN

                                bd := TRUE;

                                SELECT MAX(LENGTH(TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0') , '102017'), 'ddmmyyyy'),'TMDAY'))),
                                            MAX(LENGTH(TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '102017'), 'ddmmyyyy'),'TMDY')))
                                INTO vDayMaxLengh,
                                    vDyMaxLengh
                                FROM UNNEST(cDayMonthNumbers) AS val
                                WHERE val BETWEEN 2 AND 8;

                                --calculate max month name length for language
                                SELECT MAX(LENGTH(TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '2017'), 'mmyyyy'),'TMMONTH'))),
                                    MAX(LENGTH(TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '2017'), 'mmyyyy'),'TMMON')))
                                INTO vMonthMaxLength,
                                    vMonMaxLength
                                FROM UNNEST(cDayMonthNumbers) AS val;

                            END IF;

                        END IF;

                        IF vDataType <> 'INTERVAL' THEN
    
                            FOR rec IN
                            (
                                SELECT fm.fmt
                                FROM aws_oracle_ext.format_models fm
                                WHERE fm.tp = 'datetime'
                                AND fm.grp = UPPER(SUBSTR(vFmt,1,1))
                                AND
                                (
                                    fm.fmt LIKE '%SP%' OR
                                    fm.fmt IN ('SYEAR', 'YEAR')
                                )
                            )
                            LOOP

                                
                                IF vFmt ~* CONCAT('^', rec.fmt, '$') THEN

                                    RAISE USING MESSAGE := verrorMessages[4];
                                
                                END IF;

                            END LOOP;


                            IF vFmt ~* '^E$' OR vFmt ~* '^EE$' THEN

                                RAISE USING MESSAGE := verrorMessages[3];

                            END IF;
                       
                        END IF;

                        IF vFmt ~* 'TZ[HM]' AND vDataType = 'TIMESTAMP WITHOUT TIME ZONE' THEN

                            FOR rec IN
                            (
                                SELECT fm.fmt
                                FROM aws_oracle_ext.format_models fm
                                WHERE fm.tp = 'datetime'
                                AND fm.grp = UPPER(SUBSTR(vFmt,1,1))
                                AND 
                                (
                                    fm.fmt LIKE 'TZH%' OR 
                                    fm.fmt LIKE 'TZM%'
                                )
                            )
                            LOOP

                                IF vFmt ~* CONCAT('^', rec.fmt) THEN

                                    RAISE USING MESSAGE := verrorMessages[2];

                                END IF;

                            END LOOP;

                        END IF;

                        IF vDataType <> 'INTERVAL' THEN
                        
                            IF vDataType = 'TIMESTAMP WITHOUT TIME ZONE' THEN

                                bd := TRUE;

                                vFmt := REGEXP_REPLACE(vFmt, 'tzr', '"+00:00"', 'ig');

                            END IF;

                            vFmt := REGEXP_REPLACE(vFmt, 'tzd', '', 'ig');

                            -- Unable to calculate TS correctly, will produce
                            -- Oracle behavior 9:01:01 AM
                            IF vFmt ~* 'TS' THEN

                                bd := TRUE;
                            
                                vFmt := REGEXP_REPLACE
                                (
                                    vFmt,
                                    'ts',
                                    CONCAT
                                    (
                                        '"',
                                        TRIM(TO_CHAR(pVal, 'hh'),'0'),
                                        ':',
                                        TO_CHAR(pVal, 'mi'),
                                        ':',
                                        TO_CHAR(pVal, 'ss'),
                                        ' ',
                                        TO_CHAR(pVal, 'AM'),
                                        '"'
                                    ),
                                    'ig'
                                );

                            END IF;

                            -- X will be .
                            IF vFmt !~* 'FX' AND vFmt ~* '^x' THEN

                                vFmt := REGEXP_REPLACE(vFmt, 'x', '.', 'ig');

                            END IF;

                            -- Fix cases
                            vFmt := REPLACE(vFmt, 'A.d.', 'A.D.');
                            vFmt := REPLACE(vFmt, 'A.m.', 'A.M.');
                            vFmt := REPLACE(vFmt, 'B.c.', 'B.C.');
                            vFmt := REPLACE(vFmt, 'P.m.', 'P.M.');

                            FOR rec IN
                            (
                                SELECT
                                    ARRAY_TO_STRING
                                    (
                                        REGEXP_MATCHES(vFmt, 'Rm|Ad|Bc|Pm|Am', 'g'),
                                        ''
                                    ) case_match
                            ) LOOP

                                vFmt := REPLACE
                                (
                                    vFmt,
                                    rec.case_match,
                                    CONCAT
                                    (
                                        '"',
                                        INITCAP(TO_CHAR(pVal, UPPER(rec.case_match))),
                                        '"'
                                    )
                                );

                                bd := TRUE;

                            END LOOP;

                            -- PG 13+ does not need THIS
                            -- PG has SSSS, but Oracle SSSSS, so we need to convert SSSSS to SSSS
                            -- ssss to ss + ss
                            IF NOT (current_setting('server_version_num')::int) >= 130000 THEN

                                IF vFmt ~* '^FMS{2}$' OR vFmt ~* '^S{2}$' THEN

                                    bd := TRUE;

                                    vFmt := CONCAT
                                    (
                                        '"',
                                        TO_CHAR(pVal, 'ss'),
                                        '"'
                                    );

                                END IF;

                                IF vFmt ~* '^FMS{5}$' OR vFmt ~* '^S{5}$' THEN

                                        bd := TRUE;

                                        vFmt := CONCAT
                                        (
                                            '"',
                                            TO_CHAR(pVal, REGEXP_REPLACE(vFmt, 's{5}', 'ssss', 'i')),
                                            '"'
                                        );

                                END IF;

                            END IF;

                            -- PG has ID, but Oracle use it as I + D, no ID
                            IF vFmt ~* '^i$' THEN
                                
                                bd := TRUE;

                                vFmt := 
                                    CONCAT
                                    (
                                        '"',
                                        TO_CHAR(pVal, 'I'),
                                        '"'
                                    );
                            
                            END IF;

                            /* PG unable to convert TH if contains lower case letters in model */
                            IF vFmt ~* 'TH' AND vFmt !~* 'MONTH' AND vFmt ~ '[[:lower:]]' THEN

                                bd := TRUE;

                                vFmt := CONCAT
                                (
                                    '"',
                                    REGEXP_REPLACE(TO_CHAR(pVal, vFmt), '(\d+)(\D+)', '\1', 'i'),
                                    LOWER(REGEXP_REPLACE(TO_CHAR(pVal, UPPER(vFmt)), '(\d+)(\D+)', '\2', 'i')),
                                    '"'
                                );
                            
                            END IF;

                            -- hard to calculate correct DS format, will set to fmmm/fmdd/fmyyyy
                            IF vFmt ~* 'ds' THEN

                                bd := TRUE;
                            
                                vFmt := REGEXP_REPLACE
                                (
                                    vFmt,
                                    'ds',
                                    CONCAT
                                    (
                                        '"',
                                        LTRIM(TO_CHAR(pVal, 'mm'), '0'),
                                        '/',
                                        LTRIM(TO_CHAR(pVal, 'dd'), '0'),
                                        '/',
                                        LTRIM(TO_CHAR(pVal, 'yyyy'), '0'), 
                                        '"'
                                    ),
                                    'ig'
                                );

                            END IF;

                            IF vFmt ~* 'SYYYY' THEN

                                bd := TRUE;
                            
                                vFmt := REGEXP_REPLACE
                                (
                                    vFmt,
                                    'syyyy',
                                    CONCAT
                                    (
                                        '"',
                                        CASE
                                            WHEN TO_CHAR(pVal,'BC') = 'BC' THEN
                                                CONCAT('-', TO_CHAR(pVal, 'YYYY'))
                                            ELSE
                                                CONCAT(' ', TO_CHAR(pVal, 'YYYY'))
                                        END,
                                        '"'
                                    ),
                                    'ig'
                                );

                            END IF;

                            IF vFmt ~* 'CC' AND vFmt !~* 'SCC' THEN

                                bd := TRUE;

                                vFmt := REGEXP_REPLACE
                                (
                                    vFmt,
                                    'cc',
                                    CONCAT
                                    (
                                        '"',
                                        CASE
                                            WHEN TO_CHAR(pVal,'BC') = 'BC' THEN
                                                REPLACE(TO_CHAR(pVal, 'CC'),'-','')
                                            ELSE
                                                TO_CHAR(pVal, 'CC')
                                        END,
                                        '"'
                                    ),
                                    'ig'
                                );

                            END IF;

                            IF vFmt ~* 'SCC' THEN

                                bd := TRUE;

                                vFmt := REGEXP_REPLACE
                                (
                                    vFmt,
                                    'scc',
                                    CONCAT
                                    (
                                        '"',
                                        CASE
                                            WHEN TO_CHAR(pVal,'BC') = 'BC' THEN
                                                TO_CHAR(pVal, 'CC')
                                            ELSE
                                                CONCAT(' ', TO_CHAR(pVal, 'CC'))
                                        END,
                                        '"'
                                    ),
                                    'ig'
                                );

                            END IF;

                            IF vFmt ~* 'TZH' THEN

                                bd := TRUE;

                                vFmt := REGEXP_REPLACE
                                (
                                    vFmt,
                                    'tzh',
                                    CONCAT
                                    (
                                        '"',
                                        SUBSTRING(EXTRACT(TIMEZONE_HOUR FROM pVal)::TEXT FROM '\D'),
                                        LPAD
                                        (
                                            SUBSTRING(EXTRACT(TIMEZONE_HOUR FROM pVal)::TEXT FROM '\d+'),
                                            2,
                                            '0'
                                        ),
                                        '"'
                                    ),
                                    'ig'
                                );

                            END IF;

                            IF vFmt ~* 'TZM' THEN

                                bd := TRUE;

                                vFmt := REGEXP_REPLACE
                                (
                                    vFmt,
                                    'tzm',
                                    CONCAT
                                    (
                                        '"',
                                        SUBSTRING(EXTRACT(TIMEZONE_MINUTES FROM pVal)::TEXT FROM '\D'),
                                        LPAD
                                        (
                                            SUBSTRING(EXTRACT(TIMEZONE_MINUTES FROM pVal)::TEXT FROM '\d+'),
                                            2,
                                            '0'
                                        ),
                                        '"'
                                    ),
                                    'ig'
                                );

                            END IF;

                            IF vFmt ~* 'TZR' THEN

                                bd := TRUE;

                                vFmt := REGEXP_REPLACE
                                (
                                    vFmt,
                                    'tzr',
                                    CONCAT
                                    (
                                        '"',
                                        SUBSTRING(EXTRACT(TIMEZONE_HOUR FROM pVal)::TEXT FROM '\D'),
                                        LPAD
                                        (
                                            SUBSTRING(EXTRACT(TIMEZONE_HOUR FROM pVal)::TEXT FROM '\d+'),
                                            2,
                                            '0'
                                        ),
                                        ':',
                                        SUBSTRING(EXTRACT(TIMEZONE_MINUTES FROM pVal)::TEXT FROM '\D'),
                                        LPAD
                                        (
                                            SUBSTRING(EXTRACT(TIMEZONE_MINUTES FROM pVal)::TEXT FROM '\d+'),
                                            2,
                                            '0'
                                        ),
                                        '"'
                                    ),
                                    'ig'
                                );

                            END IF;

                            -- hard to calculate correct DL, set to hardcoded format
                            IF vFmt ~* '^DL' THEN

                                bd := TRUE;

                                vFmt := 
                                    CONCAT
                                    (
                                        '"',
                                        TRIM(TO_CHAR(pVal, 'TMDay')),
                                        ', ',
                                        TRIM(TO_CHAR(pVal, 'TMMonth')),
                                        ' ',
                                        TO_CHAR(pVal, 'dd'),
                                        ', ',
                                        TO_CHAR(pVal, 'yyyy'),
                                        
                                        '"'
                                    );

                            END IF;

                            -- PG13+ does not need this
                            --FF[1..9] FF = FF6 here
                            IF NOT (current_setting('server_version_num')::int) >= 130000 THEN
                            
                                IF vFmt ~* '^FF\d' THEN

                                    bd := TRUE;

                                    vln := SUBSTRING(vFmt FROM '\d')::INTEGER;

                                    IF vln < 6 THEN

                                        vFmt := CONCAT('"', SUBSTR(TO_CHAR(pVal, 'US'), 1, vln), '"');

                                    ELSE

                                        vFmt := CONCAT('"', RPAD(TO_CHAR(pVal, 'US'), vln, '0'), '"');

                                    END IF;

                                END IF;

                            END IF;

                            IF vFmt ~* '^tmMON$' THEN

                                bd := TRUE;

                                vFmt := CONCAT
                                (
                                    '"',
                                    RPAD(TO_CHAR(pVal, vFmt), vMonMaxLength),
                                    '"'
                                );

                            END IF;

                            IF vFmt ~* '^tmMONTH$' THEN

                                bd := TRUE;

                                vFmt := CONCAT
                                (
                                    '"',
                                    RPAD(TO_CHAR(pVal, vFmt), vMonthMaxLength),
                                    '"'
                                );

                            END IF;

                            IF vFmt ~* '^tmDAY$' THEN

                                bd := TRUE;

                                vFmt := CONCAT
                                (
                                    '"',
                                    RPAD(TO_CHAR(pVal, vFmt), vDayMaxLengh),
                                    '"'
                                );

                            END IF;

                            IF vFmt ~* '^tmDY$' THEN

                                bd := TRUE;

                                vFmt := CONCAT
                                (
                                    '"',
                                    RPAD(TO_CHAR(pVal, vFmt), vDyMaxLengh),
                                    '"'
                                );

                            END IF;

                        END IF;

                    END IF;

                    IF vResult ~ 'Dd' THEN

                        vResult := REPLACE(vResult, 'Dd', 'dd');

                    END IF;

                    IF vResult ~ 'dD' THEN

                        vResult := REPLACE(vResult, 'dD', 'dd');

                    END IF;

                    vResult := CONCAT(vResult, vFmt);

                    EXIT WHEN vtail IS NULL;

                END LOOP;

                IF NOT bd THEN

                    INSERT INTO aws_oracle_data.dfmt
                    VALUES(pFormat, vResult)
                    ON CONFLICT ON CONSTRAINT dfmt_pkey DO NOTHING;

                END IF;

                -- restore language setting if they were changed
                IF CURRENT_SETTING('lc_time') <> v_lctime THEN

                    vTm := SET_CONFIG('lc_time', v_lctime, TRUE);

                END IF;

            WHEN vIsNumeric AND pNoNumberFormat IS NULL AND pNlsParam = '' THEN

                vResult := NULL;

            WHEN vIsNumeric THEN

                IF pNoNumberFormat IS NULL THEN

                    IF pNlsParam IS NOT NULL THEN

                        bd := TRUE;

                        SELECT STRING_AGG(CASE WHEN nls ~* 'CALENDAR' THEN '' ELSE nls END, '')
                        INTO vNlsParamCopy
                        FROM REGEXP_SPLIT_TO_TABLE
                        ( 
                            TRIM(E'\n\ ' FROM pNlsParam),
                            'NLS_',
                        'i') nls;

                        -- check if paramters are allowed
                        IF pNlsParam ~ '^\s+$' THEN

                            RAISE USING MESSAGE := verrorMessages[5];

                        END IF;

                        vNlsParam := REGEXP_REPLACE
                        (
                            vNlsParamCopy,
                            $$NUMERIC_CHARACTERS\s*=\s*('?)(.+?)('?)$$,
                            '',
                            'i'
                        );

                        vNlsParam := REGEXP_REPLACE
                        (
                            vNlsParam,
                            $$ISO_CURRENCY\s*=\s*('?)(.+?)('?)$$,
                            '',
                            'i'
                        );
              
                        vNlsParam := REGEXP_REPLACE
                        (
                            vNlsParam,
                            $$CURRENCY\s*=\s*('?)(.+?)('?)$$,
                            '',
                            'i'
                        );

                        IF LENGTH(TRIM(E'\n\ ' FROM vNlsParam)) > 0 THEN

                            RAISE USING MESSAGE := verrorMessages[5];

                        END IF;
                        
                        -- Try to get set NLS parts
                        FOR rec IN 
                        (
                            SELECT REGEXP_MATCHES
                            (
                                vNlsParamCopy,
                                $$NUMERIC_CHARACTERS\s*=\s*('?)(.+?)('?)$$,
                                'i'
                            ) m
                        ) LOOP

                            vDecimalSeparator := SUBSTR((rec.m)[2], 1, 1);
                            
                            IF LENGTH(vDecimalSeparator) = 0 THEN

                                RAISE USING MESSAGE := verrorMessages[5];

                            END IF;

                            vGroupSeparator := SUBSTR((rec.m)[2], 2, 1);

                            IF LENGTH(vGroupSeparator) = 0 THEN

                                RAISE USING MESSAGE := verrorMessages[5];

                            END IF;

                        END LOOP;

                        FOR rec IN 
                        (
                            SELECT REGEXP_MATCHES
                            (
                                vNlsParamCopy,
                                $$CURRENCY\s*=\s*('?)(.+?)('?)$$,
                                'i'
                            ) m
                        ) LOOP

                            vCurrencySymbol := (rec.m)[2];

                            IF LENGTH(vCurrencySymbol) = 0 THEN

                                RAISE USING MESSAGE := verrorMessages[5];

                            END IF;

                        END LOOP;

                        FOR rec IN 
                        (
                            SELECT REGEXP_MATCHES
                            (
                                vNlsParamCopy,
                                $$ISO_CURRENCY\s*=\s*('?)(.+?)('?)$$,
                                'i'
                            ) m
                        ) LOOP

                            vIsoCurrency := (rec.m)[2];

                            IF LENGTH(vIsoCurrency) = 0 THEN

                                RAISE USING MESSAGE := verrorMessages[5];

                            END IF;

                            SELECT icl.code
                            INTO vIsoCurrency
                            FROM aws_oracle_ext.iso_currency_list icl
                            WHERE icl.nls_iso_currency = (rec.m)[2];

                        END LOOP;

                    END IF;

                    IF NOT bd THEN

                        SELECT f.nmodel
                        INTO vFmt
                        FROM aws_oracle_data.nfmt f
                        WHERE f.nmodel = pFormat;

                        IF FOUND THEN

                            vResult := TO_CHAR
                            (
                                pVal,
                                REGEXP_REPLACE(vFmt, 'FM', 'FM', 'i')
                            );

                        IF vResult ~ '#' AND NOT pFormat ~* '[^09GD\.]' THEN

                                vResult := REPEAT('#', LENGTH(pFormat) + 1);

                        END IF;
                            
                        RETURN vResult;

                        END IF;

                    END IF;

                    vtail:= pFormat;

                    LOOP

                        SELECT ok, tail, fm
                        INTO vFmt, vtail, vfm
                        FROM aws_oracle_ext.to_char_parser
                        (
                            pStr  => vtail,
                            pType => 'number',
                            pFm   => vfm
                        );
                        
                    
                        vResult := CONCAT(vResult, vFmt);

                        EXIT WHEN vtail IS NULL;

                    END LOOP;

                    /* Restrictions */
                    --A comma element cannot begin a number format model
                    IF SUBSTR(vResult, 1, 1) = ',' THEN

                        RAISE USING MESSAGE := verrorMessages[6];

                    END IF;
                    -- A comma cannot appear to the right of a decimal
                    -- character or period in a number format model
                    CASE 
                        WHEN vResult ~* '[\.D].*\,' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        --only one period in a number format model
                        WHEN vResult ~ '\..*\.' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- only one decimal character in a number format model
                        WHEN vResult ~* 'd.*d' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- group separator cannot appear to the right of a decimal 
                        -- character or period in a number format model
                        -- V also
                        WHEN vResult ~* '[\.DV].*g' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- Start with g is not allowed
                        WHEN vResult ~* '^G' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- It's not allowed to mix different type group and
                        -- decimal model symbols
                        WHEN vResult ~ '\.|\,' AND vResult ~* 'D|G' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- The MI format element can appear only in the last position 
                        -- of a number format model
                        WHEN vResult ~* 'MI.+' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        --The PR format element can appear only in the last position
                        -- of a number format model
                        WHEN vResult ~* 'PR.+' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- The S format element can appear only in the first 
                        -- or last position of a number format model
                        WHEN vResult ~* '[^S]+S[^S]+' OR vResult ~* 'S[^S]*S' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- You cannot precede this element with any other element
                        WHEN vResult ~* '.+TM' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- You can follow this element only with one 9 or 
                        -- one E (or e), but not with any combination of these
                        WHEN vResult ~* 'TM.{2,}' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        WHEN vResult ~* 'TM[^9e]' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- You can precede this element only with 0 (which returns leading zeroes)
                        -- or FM. Any other elements return an error
                        WHEN vResult ~* '.*X.?'
                            AND vResult !~* '^0+X{1,}$'
                            AND vResult !~* '^FMX{1,}$'
                            AND vResult !~* '^FM0{1,}X{1,}$'
                            AND vResult !~* '^X{1,}$' THEN

                                RAISE USING MESSAGE := verrorMessages[6];
                        -- only one $ allowed
                        WHEN vResult ~ '\$.*\$' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- only one C allowed
                        WHEN vResult ~* 'C.*C' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- only one L allowed
                        WHEN vResult ~* 'L.*L' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- only one U allowed
                        WHEN vResult ~* 'U.*U' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- C, L, $, U together is not allowed
                        WHEN vResult ~* 'C.*[\$LU]' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        WHEN vResult ~* '[UL\$].*C' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- only one V allowed
                        WHEN vResult ~* 'V.*V' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- V and period or decimal is not allowed
                        WHEN vResult ~* 'V.*[\.D]' OR vResult ~* '[\.D].*V' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- If RN - no other models allowed
                        WHEN vResult ~* '.+RN' OR vResult ~* 'RN.+' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- Only EEEE is not allowed. No chars after EEEE. No comma before EEEE
                        WHEN vResult ~* '^EEEE$' 
                            OR vResult ~* 'EEEE[^S]+' 
                            OR vResult ~* '\,.*EEEE'
                            OR vResult ~* 'EEEE.{2,}' THEN

                                RAISE USING MESSAGE := verrorMessages[6];
                        ELSE

                            NULL;
                    END CASE;

                    /* Some Oracle actions repeated */
                    IF UPPER(vResult) = 'S' THEN

                        bd := TRUE;

                        vResult := '#';

                    END IF;

                    IF vResult ~* 'U|C|L' THEN

                        bd := TRUE;

                        IF vResult ~* 'U' THEN

                            IF vDualCurrency IS NULL THEN

                                SELECT value
                                INTO vDualCurrency
                                FROM aws_oracle_ext.v$nls_parameters WHERE parameter = 'NLS_DUAL_CURRENCY';

                            END IF;

                            vResult := REGEXP_REPLACE(vResult, 'U',  CONCAT('"', vDualCurrency, '"') , 'i');
                            vurrisset := true;

                        END IF;

                        IF vResult ~* 'C' AND NOT vurrisset THEN

                            IF vIsoCurrency IS NULL THEN

                                SELECT icl.code
                                INTO vIsoCurrency
                                FROM aws_oracle_ext.iso_currency_list icl
                                WHERE icl.nls_iso_currency = (SELECT value
                                FROM aws_oracle_ext.v$nls_parameters WHERE parameter = 'NLS_ISO_CURRENCY');

                            END IF;

                            vResult := REGEXP_REPLACE(vResult, 'C',  CONCAT('"', vIsoCurrency, '"') , 'i');
                            vurrisset := true;

                        END IF;

                        IF vResult ~* 'L' AND NOT vurrisset THEN

                            IF vCurrencySymbol IS NULL THEN

                                SELECT value
                                INTO vCurrencySymbol
                                FROM aws_oracle_ext.v$nls_parameters
                                WHERE parameter = 'NLS_CURRENCY';

                            END IF;

                            vResult := REGEXP_REPLACE(vResult, 'L',  CONCAT('"', vCurrencySymbol, '"') , 'i');
                            vurrisset := true;

                        END IF;

                    END IF;

                    IF vResult ~ '\$' AND vResult !~ '"\$"' THEN

                        bd := TRUE;

                        vResult := CONCAT('"$"', REPLACE(vResult, '$', ''));

                    END IF;

                    IF vResult ~* 'TMe' THEN

                        vResult = REGEXP_REPLACE(vResult, 'TMe', '9.9EEEE', 'i');

                    END IF;

                    -- converting

                    CASE
                        WHEN vResult ~* 'X' AND vResult !~ '"' THEN

                            bd := TRUE;
                            
                            vResult := CONCAT
                            (
                                CASE
                                    WHEN vResult ~* 'FM' THEN
                                        ''
                                    ELSE
                                        ' '
                                    END,
                                LPAD
                                (
                                    CASE
                                        WHEN vResult ~ 'X' THEN
                                            UPPER(TO_HEX(ROUND(pVal,0)::INTEGER)::TEXT)
                                        ELSE TO_HEX(ROUND(pVal,0)::INTEGER)::TEXT
                                    END,
                                    LENGTH
                                    (
                                        REGEXP_REPLACE
                                        (
                                            vResult,
                                            'FM',
                                            '',
                                            'i'
                                        )
                                    ),
                                    '0'
                                )
                            );
                            
                        WHEN vResult ~* 'EEEE' THEN

                            bd := TRUE;

                            vResult := 
                            CASE 
                                WHEN vResult ~* 'FM' THEN 
                                    LTRIM
                                    (
                                        REPLACE
                                        (
                                            REGEXP_REPLACE
                                            (
                                                TO_CHAR
                                                (
                                                    pVal,
                                                    REGEXP_REPLACE(vResult, 'FM', '', 'i')
                                                ),
                                                '00(\d)',
                                                '0\1'
                                            ),
                                            'e',
                                            'E'
                                        )
                                    )
                                ELSE
                                    CONCAT(' ', REPLACE(REGEXP_REPLACE(TO_CHAR(pVal, vResult), '00(\d)', '0\1'), 'e', 'E'))
                            END;

                            IF vDecimalSeparator IS NOT NULL THEN

                                vFmt := REPLACE(TO_CHAR(1.1, 'FM9D9'),'1','');
                                vResult := REPLACE(vResult, vFmt, '#.');    
                                vResult := REPLACE(vResult, '#.', vDecimalSeparator);

                            END IF;

                        WHEN vResult ~* 'G|D' AND vDecimalSeparator IS NOT NULL AND vGroupSeparator IS NOT NULL THEN

                            bd := TRUE;
                            vResult := TO_CHAR(pVal, REGEXP_REPLACE(vResult, 'FM', 'FM', 'i'));

                            vFmt := REPLACE(TO_CHAR(1.1, 'FM9D9'),'1','');
                            vResult := REPLACE(vResult, vFmt, '#.');
                            vFmt := REPLACE(TO_CHAR(1111, 'FM9G999'),'1','');
                            vResult := REPLACE(vResult, vFmt, '#,');

                            vResult := REPLACE(vResult, '#,', vGroupSeparator);
                            vResult := REPLACE(vResult, '#.', vDecimalSeparator);
                        
                        --  case with format = '.999'  
                        WHEN vResult ~* '^\.(?=\d+$)' THEN  

                            bd := TRUE;
                            
                            vResult :=
                            REGEXP_REPLACE
                            (
                                TO_CHAR
                                    (
                                        pVal,
                                        REGEXP_REPLACE
                                        (
                                            vResult, 
                                            '^\.(?=\d+$)', 
                                            '0.', 
                                            'g'
                                        )
                                    ),
                                '^\ ?0\.',
                                ' .',
                                'g'
                            );
                        WHEN vResult ~* 'TM9?' THEN

                            vResult := pVal::TEXT;

                            IF vDecimalSeparator IS NOT NULL THEN

                                vResult := REPLACE(vResult, '.', vDecimalSeparator);

                            END IF;

						ELSE

                            vResult := TO_CHAR
                            (
                                pVal,
                                REGEXP_REPLACE(vResult, 'FM', 'FM', 'i')
                            );

                            IF vResult ~ '#' AND NOT pFormat ~* '[^09GD\.]' THEN

                                bd := TRUE;

                                vResult := REPEAT('#', LENGTH(pFormat) + 1);

                            END IF;

                            IF NOT bd THEN

                                INSERT INTO aws_oracle_data.nfmt
                                VALUES (pFormat)
                                ON CONFLICT ON CONSTRAINT nfmt_pkey DO NOTHING;

                            END IF;

                    END CASE;
                
                ELSE

                        IF pVal = 0 THEN

                            vResult := '0';
                            
                        ELSE

                            vResult := REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(pVal::TEXT, '^0\.(\d+)', '.\1'), '\.0{2,}$', ''), '\.$', '');

                            vResult := REGEXP_REPLACE(vResult, '^-0\.(\d+)', '-.\1');

                            IF vResult ~ '\.' THEN

                                vResult := REGEXP_REPLACE(REGEXP_REPLACE(vResult, '0+$', ''), '\.$', '');

                            END IF;
                        
                        END IF;

                END IF;
                
            ELSE

                IF pFormat IS NOT NULL THEN
                    
                    RAISE USING MESSAGE := verrorMessages[1];

                END IF;
                
                IF LENGTH(pVal) > 4000 THEN

                    RAISE USING MESSAGE := verrorMessages[7];

                END IF;

                vResult := pVal::VARCHAR;

        END CASE;

    END IF;

    RETURN vResult;

END;

]]></complex-attribute>
                        <category _I_D="07ce4cc1-250a-42ab-a1a1-9813925123b2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7bff635a-99c6-411d-9d37-053dc98af152" name="to_char_parser" subcategories-loading="none" object-loading="extended" context="to_char_parser" is-trigger-function="0" unique-function-name="to_char_parser" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying,character varying,character varying,character varying" is-returning-set="t" ret-datatype="table" function-arguments="pstr character varying, ptype character varying, pfm character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_DATASET" count-arguments="3" function-id="304543" volatility="VOLATILE" is-window="f" function-identity-arguments="pstr character varying, ptype character varying, pfm character varying" overload-function-count="1" proc-language="plpgsql" function-signature="to_char_parser(pstr character varying, ptype character varying, pfm character varying)" comment="Parse to_char format parameter value to check it against Oracle rules">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vRes VARCHAR;
    vStr VARCHAR;
    vPos INTEGER;
    vChunk VARCHAR;
    vGrp VARCHAR;
    vWrapTo VARCHAR;
    vYYYY VARCHAR;
    
    curDateFmtModels CURSOR (pGrp VARCHAR, pYYY VARCHAR) FOR
    SELECT fm.fmt,
        fm.wrapto
    FROM aws_oracle_ext.format_models fm
    WHERE tp = 'datetime'
    AND grp = pGrp
    AND (pYYY IS NULL OR (pYYY IS NOT NULL AND fm.fmt = pYYY))
    ORDER BY ord,
        fmt;

    eDateFormatNotRecognized CONSTANT VARCHAR := 'ORA-01821: date format not recognized';

    curNumberFmtModels CURSOR (pGrp VARCHAR) FOR
    SELECT fmt
    FROM aws_oracle_ext.format_models fm
    WHERE tp = 'number'
    AND grp = pGrp
    ORDER BY grp, ord;

    eInvalidNumberFormat CONSTANT VARCHAR := 'ORA-01481: invalid number format model';

    vModel VARCHAR;

    vFM VARCHAR;
BEGIN

    vStr := pStr;
    vPos := 1;

    vFm := COALESCE(pFm,'');

    CASE
        
        WHEN pType = 'number' THEN

            vGrp := UPPER(SUBSTR(vStr,1,1));
            
            OPEN curNumberFmtModels(vGrp);
            
            LOOP
                            
                FETCH curNumberFmtModels INTO vModel;
                
                EXIT WHEN NOT FOUND;

                vChunk := SUBSTR(vStr,1,  LENGTH(REPLACE(vModel, '\', '')));

                IF UPPER(vChunk) <> REPLACE(vModel, '\', '') THEN

                    vChunk := NULL;

                END IF;
                            
                IF vChunk IS NOT NULL THEN

                    vRes := CONCAT(vRes, SUBSTR(vStr, 1, LENGTH(vChunk)));
                    vPos := vPos + LENGTH(vChunk);
                    vStr := SUBSTR(vStr, vPos);

                    EXIT;

                END IF;

            END LOOP;

            CLOSE curNumberFmtModels;

            IF vChunk IS NULL THEN
                            
                RAISE USING MESSAGE := eInvalidNumberFormat;

            END IF;

        ELSE

            LOOP
            
                    -- special treat for FM/FX
                    IF UPPER(SUBSTR(vStr,1,2)) = 'FM' THEN

                        vFM := CASE WHEN vFM <> 'FM' THEN 'FM' ELSE '' END;
                        vStr := SUBSTR(vStr,3);
                    
                    END IF;

                    --If quotted - grab it
                    IF SUBSTR(vStr,1,1) = '"' THEN

                        vChunk := SUBSTRING(vStr FROM '"[^"]*"');

                        -- if unclosed quota - raise
                        IF vChunk IS NULL THEN

                            RAISE USING MESSAGE := eDateFormatNotRecognized;

                        END IF;

                        vRes := CONCAT(vFm, vRes, vChunk);
                        vPos := vPos + LENGTH(vChunk);
                        vStr := SUBSTR(vStr, vPos);

                        EXIT;

                    END IF;

                    -- spacers grab it
                    -- we will treat , and . specialy because of A.M. likes or Y,YYYY
                    IF SUBSTR(vStr,1,1) ~ '^[\.\,]' THEN

                        vChunk := SUBSTRING(vStr FROM '[\.\,]+');
                        vRes := CONCAT(vFM, vRes, vChunk);
                        vPos := vPos + LENGTH(vChunk);
                        vStr := SUBSTR(vStr, vPos);

                        EXIT;

                    END IF;

                    IF SUBSTR(vStr,1,1) ~ '[\s\!\\\/\#\$\%\&\''\(\)\*\+\\\-\:\;\<\=\>\?\@\[\]\^\_\`\{\|\}\~]' THEN
                        
                        vChunk := SUBSTRING(vStr FROM '[\s\!\\\/\#\$\%\&\''\(\)\*\+\\\-\:\;\<\=\>\?\@\[\]\^\_\`\{\|\}\~]+');
                        vRes := CONCAT(vFM, vRes, vChunk);
                        vPos := vPos + LENGTH(vChunk);
                        vStr := SUBSTR(vStr, vPos);

                        EXIT;

                    END IF;

                    vGrp := UPPER(SUBSTR(vStr,1,1));
                    
                    IF vGrp = 'Y' THEN
			
                        CASE
                            WHEN UPPER(SUBSTR(vStr,1,9)) IN ('Y,YYYTHSP', 'Y,YYYSPTH') THEN
                                vYYYY := REPLACE(UPPER(SUBSTR(vStr,1,9)),',','\,');
                            WHEN UPPER(SUBSTR(vStr,1,7)) IN ('Y,YYYTH', 'Y,YYYSP') THEN
                                vYYYY := REPLACE(UPPER(SUBSTR(vStr,1,7)),',','\,');
                            WHEN UPPER(SUBSTR(vStr,1,5)) = 'Y,YYY' THEN
                                vYYYY := REPLACE(UPPER(SUBSTR(vStr,1,5)),',','\,');
                            ELSE
                                vYYYY := NULL;
                        END CASE;

                    END IF;

                    OPEN curDateFmtModels(CASE WHEN vGrp = 'E' THEN 'Y' ELSE vGrp END, vYYYY);

                    LOOP
                        
                        FETCH curDateFmtModels INTO vModel, vWrapTo;
                        
                        EXIT WHEN NOT FOUND;
        
                        vChunk := SUBSTR(vStr,1,  LENGTH(REPLACE(vModel, '\', '')));

                        IF UPPER(vChunk) <> REPLACE(vModel, '\', '') THEN

                            vChunk := NULL;

                        END IF;
                        
                        IF vChunk IS NOT NULL THEN

                            vRes := CONCAT
                            (
                                vFM,
                                vRes,
                                CASE 
                                    WHEN vWrapTo IS NOT NULL THEN
                                        CASE 
                                            WHEN  vWrapTo = 'R->Y' THEN
                                                REPLACE(REPLACE(vChunk, 'R', 'Y'), 'r', 'y')
                                            ELSE
                                                REGEXP_REPLACE(SUBSTR(vStr, 1, LENGTH(vChunk)), CONCAT('(',SUBSTR(vStr, 1, LENGTH(vChunk)),')'), vWrapTo)
                                        END
                                    ELSE 
                                        SUBSTR(vStr, 1, LENGTH(vChunk)) 
                                END
                            );
                            vPos := vPos + LENGTH(vChunk);
                            vStr := SUBSTR(vStr, vPos);

                            EXIT;

                        END IF;

                    END LOOP;

                    CLOSE curDateFmtModels;

                    IF vChunk IS NULL THEN
                        
                        RAISE USING MESSAGE := eDateFormatNotRecognized;

                    END IF;

                    EXIT;

                END LOOP;

        END CASE;

    RETURN QUERY VALUES (vRes, CASE WHEN LENGTH(vStr) = 0 THEN NULL::VARCHAR ELSE vStr END, vFM);
        
END;
]]></complex-attribute>
                        <category _I_D="92b79a5c-5eaa-48ca-a421-f291d2e144a7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f1232e38-32a7-4479-a563-b627c15ca747" name="to_date" subcategories-loading="none" object-loading="extended" context="to_date(pval character varying)" is-trigger-function="0" unique-function-name="to_date(pval character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="timestamp" function-arguments="pval character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304557" volatility="VOLATILE" is-window="f" function-identity-arguments="pval character varying" overload-function-count="2" proc-language="plpgsql" function-signature="to_date(pval character varying)" unique-suffix="(pval character varying)" routine-number="304557" comment="Converts VARCHAR2 to DATE as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult TIMESTAMP DEFAULT NULL;
    vFmt VARCHAR;
BEGIN
    
    SELECT value
    INTO vFmt
    FROM aws_oracle_ext.v$nls_parameters
    WHERE parameter = 'NLS_DATE_FORMAT';

    vResult := aws_oracle_ext.to_date
    (
        pVal => pVal,
        pFmt => vFmt
    );

    RETURN vResult::TIMESTAMP(0);

END;
]]></complex-attribute>
                        <category _I_D="fde18abb-cff1-4fc6-b052-4a0d657d8588" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="70bacc73-c01e-4c86-92ae-bc1caf7f1bbd" name="to_date" subcategories-loading="none" object-loading="extended" context="to_date(pval character varying, pfmt character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_date(pval character varying, pfmt character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying" is-returning-set="f" ret-datatype="timestamp" function-arguments="pval character varying, pfmt character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304558" volatility="VOLATILE" is-window="f" function-identity-arguments="pval character varying, pfmt character varying, pnlsparam character varying" overload-function-count="2" proc-language="plpgsql" function-signature="to_date(pval character varying, pfmt character varying, pnlsparam character varying)" unique-suffix="(pval character varying, pfmt character varying, pnlsparam character varying)" routine-number="304558" comment="Converts VARCHAR2 to DATE as Oracle does. Some Format models could return incorrect results. Only NLS_DATE_LANGUAGE is allowed for NLS param. Value must be correct as lc_time value">
                        <complex-attribute name="sql"><![CDATA[
DECLARE

    vResult TIMESTAMP DEFAULT NULL;
    vFmt VARCHAR;
    vValFormatted VARCHAR;

BEGIN

    IF pVal IS NOT NULL AND pVal <> '' THEN
        
        IF pNlsParam IS NULL THEN

            SELECT f.dmodelto
            INTO vFmt
            FROM aws_oracle_data.tdfmt f
            WHERE f.dmodel = pFmt;

            IF FOUND THEN

                RETURN TO_TIMESTAMP(pVal, vFmt)::TIMESTAMP(0);

            END IF;

        END IF;
        
        SELECT vval,
            format
        INTO vValFormatted,
            vFmt
        FROM aws_oracle_ext.to_date_formatter
        (
            pVal      => pVal,
            pFormat   => pFmt,
            pNlsParam => pNlsParam
        );

        vResult := TO_TIMESTAMP(vValFormatted, vFmt);

    END IF;

    RETURN vResult::TIMESTAMP(0);

END;
]]></complex-attribute>
                        <category _I_D="dab21165-0ef3-4f09-9e39-89e70462607b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d673ba2d-54db-492d-b752-5524df469c69" name="to_date_formatter" subcategories-loading="none" object-loading="extended" context="to_date_formatter" is-trigger-function="0" unique-function-name="to_date_formatter" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying,character varying,character varying" is-returning-set="t" ret-datatype="table" function-arguments="pval character varying, pformat character varying DEFAULT NULL::character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_DATASET" count-arguments="3" function-id="304555" volatility="VOLATILE" is-window="f" function-identity-arguments="pval character varying, pformat character varying, pnlsparam character varying" overload-function-count="1" proc-language="plpgsql" function-signature="to_date_formatter(pval character varying, pformat character varying, pnlsparam character varying)" comment="Utility function making to_char results similar to expected on Oracle side">
                        <complex-attribute name="sql"><![CDATA[
DECLARE

    v_lctime VARCHAR;
    vNlsParam VARCHAR;

    vFmt VARCHAR;
    rec RECORD;
    vVal VARCHAR;
    vResult VARCHAR;

    vtail VARCHAR;
    vfm VARCHAR;

    verrorMessages CONSTANT VARCHAR[] := ARRAY
    [
        'ORA-01821: date format not recognized', --1
        'not implemented', --2
        'ORA-12702: invalid NLS parameter string used in SQL function', --3
        'ORA-01843: not a valid month', --4
        'ORA-01846: not a valid day of the week' --5
    ];
    --used to calculate localized day/month names
    cDayMonthNumbers CONSTANT INTEGER[] := ARRAY[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
    vMonthNumber INTEGER DEFAULT NULL;
    vLocalName VARCHAR;
    vGlobalName VARCHAR;
    vDayNumber INTEGER DEFAULT NULL;
    vIncompleteYear INTEGER;
    bd BOOLEAN DEFAULT FALSE;
BEGIN

    vVal := pVal;

    IF pFormat = '' THEN

        vResult := NULL;

    ELSE
    
        vtail:= pFormat;

        LOOP

            SELECT ok, tail, fm
            INTO vFmt, vtail, vfm
            FROM aws_oracle_ext.to_char_parser
            (
                pStr  => vtail,
                pType => 'datetime',
                pFm   => vfm
            );

            vResult := CONCAT(vResult, vFmt);

            EXIT WHEN vtail IS NULL;

        END LOOP;

    END IF;
    
    -- store original language
    v_lctime := CURRENT_SETTING('lc_time');

    IF pNlsParam IS NOT NULL THEN

        vNlsParam := REPLACE(pNlsParam,' ', '');

        SELECT STRING_AGG(TRIM(nls),'')
        INTO vNlsParam
        FROM  REGEXP_SPLIT_TO_TABLE
        ( 
            vNlsParam,
            'NLS_',
            'i'
        ) nls
        WHERE TRIM(nls) <> '' AND TRIM(nls) !~* 'CALENDAR';

        IF vNlsParam IS NOT NULL THEN

            IF vNlsParam  !~* 'DATE_LANGUAGE=' THEN

                RAISE USING MESSAGE := verrorMessages[3];

            END IF;

            vNlsParam := REGEXP_REPLACE(vNlsParam, 'DATE_LANGUAGE=', '', 'i');

            -- try to set NLS
            BEGIN

                PERFORM SET_CONFIG('lc_time', vNlsParam, TRUE);

            EXCEPTION 
                WHEN OTHERS THEN

                    RAISE USING MESSAGE := verrorMessages[3]; 
            END;
            
        END IF;

    END IF;

    --PG13+ does not need this
    IF NOT (current_setting('server_version_num')::int) >= 130000 THEN

        -- month literal
        IF vResult ~* 'TMMONTH' THEN

            FOR rec IN
            (
                WITH mnames AS
                (
                    SELECT val,
                        TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '2017'), 'mmyyyy'), 'TMMONTH') AS localMonthName,
                        TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '2017'), 'mmyyyy'), 'MONTH') AS monthName
                    FROM UNNEST(cDayMonthNumbers) AS val
                )
                SELECT m.val,
                    m.localMonthName,
                    m.monthName
                FROM mnames m
                WHERE pVal ~* m.localMonthName
            )
            LOOP

                vMonthNumber := rec.val;
                vLocalName := rec.localMonthName;
                vGlobalName := rec.monthName;

            END LOOP;

            IF vMonthNumber IS NULL THEN

                RAISE USING MESSAGE := verrorMessages[4];

            END IF;

            vResult := REGEXP_REPLACE(vResult, 'TMMONTH', 'MONTH', 'i');
            vVal := REGEXP_REPLACE(vVal, vLocalName, vGlobalName, 'i');
            bd := TRUE;

        END IF;

        IF vResult ~* 'TMMON' THEN

            FOR rec IN
            (
                WITH mnames AS
                (
                    SELECT val,
                        TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '2017'), 'mmyyyy'), 'TMMON') AS localMonthName,
                        TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '2017'), 'mmyyyy'), 'MON') AS monthName
                    FROM UNNEST(cDayMonthNumbers) AS val
                )
                SELECT m.val,
                    m.localMonthName,
                    m.monthName
                FROM mnames m
                WHERE pVal ~* m.localMonthName
            )
            LOOP

                vMonthNumber := rec.val;
                vLocalName := rec.localMonthName;
                vGlobalName := rec.monthName;

            END LOOP;

            IF vMonthNumber IS NULL THEN

                RAISE USING MESSAGE := verrorMessages[4];

            END IF;

                vResult := REGEXP_REPLACE(vResult, 'TMMON', 'MON', 'i');
                vVal := REGEXP_REPLACE(vVal, vLocalName, vGlobalName, 'i');
                bd := TRUE;

        END IF;
        -- day literal
        IF vResult ~* 'TMDAY' THEN

            FOR rec IN
            (
                WITH mnames AS
                (
                    SELECT val,
                        TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '102017'), 'ddmmyyyy'), 'TMDAY') AS localDayName,
                        TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '102017'), 'ddmmyyyy'), 'DAY') AS dayName
                    FROM UNNEST(cDayMonthNumbers) AS val
                    WHERE val BETWEEN 2 AND 8
                )
                SELECT m.val,
                    m.localDayName,
                    m.dayName
                FROM mnames m
                WHERE pVal ~* m.localDayName
            )
            LOOP

                vDayNumber := rec.val;
                vLocalName := rec.localDayName;
                vGlobalName := rec.dayName;

            END LOOP;

            IF vDayNumber IS NULL THEN

                RAISE USING MESSAGE := verrorMessages[5];

            END IF;

                vResult := REGEXP_REPLACE(vResult, 'TMDAY', 'DAY', 'i');
                vVal := REGEXP_REPLACE(vVal, vLocalName, vGlobalName, 'i');
                bd := TRUE;

        END IF;

        IF vResult ~* 'TMDY' THEN

            FOR rec IN
            (
                WITH mnames AS
                (
                    SELECT val,
                        TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '102017'), 'ddmmyyyy'), 'TMDY') AS localDayName,
                        TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '102017'), 'ddmmyyyy'), 'DY') AS dayName
                    FROM UNNEST(cDayMonthNumbers) AS val
                    WHERE val BETWEEN 2 AND 8
                )
                SELECT m.val,
                    m.localDayName,
                    m.dayName
                FROM mnames m
                WHERE pVal ~* m.localDayName
            )
            LOOP

                vDayNumber := rec.val;
                vLocalName := rec.localDayName;
                vGlobalName := rec.dayName;

            END LOOP;

            IF vDayNumber IS NULL THEN

                RAISE USING MESSAGE := verrorMessages[5];

            END IF;

                vResult := REGEXP_REPLACE(vResult, 'TMDY', 'DY', 'i');
                vVal := REGEXP_REPLACE(vVal, vLocalName, vGlobalName, 'i');
                bd := TRUE;

        END IF;

    END IF;

    IF vResult ~* 'MI' THEN
        
        vResult := REGEXP_REPLACE(vResult, 'MI', 'mi', 'i');

    END IF;

    IF vResult ~ 'Dd' THEN

        vResult := REPLACE(vResult, 'Dd', 'dd');

    END IF;

    IF vResult ~ 'dD' THEN

        vResult := REPLACE(vResult, 'dD', 'dd');

    END IF;

    -- try to calculate incomplete dates
    BEGIN

        vIncompleteYear := EXTRACT(YEAR FROM TO_TIMESTAMP(vVal, vResult));

    EXCEPTION
        WHEN OTHERS THEN

            vIncompleteYear := -1;
    END;

    IF vIncompleteYear = -1 THEN

        vVal := CONCAT
        (
            LPAD(EXTRACT(YEAR FROM CLOCK_TIMESTAMP()::TIMESTAMP(0))::TEXT, 4, '0'),
            CASE 
                WHEN vResult !~* 'MM|MON|MONTH' THEN LPAD(EXTRACT(MONTH FROM CLOCK_TIMESTAMP()::TIMESTAMP(0))::TEXT, 2, '0') ELSE '' END,
            vVal
        );
        bd := TRUE;

        vResult := CONCAT
        (
            'YYYY',
            CASE WHEN vResult !~* 'MM|MON|MONTH' THEN 'MM' ELSE '' END,
            vResult
        );

    END IF;

    -- restore language setting if they were changed
    IF CURRENT_SETTING('lc_time') <> v_lctime THEN

        v_lctime := SET_CONFIG('lc_time', v_lctime, TRUE);

    END IF;

    IF NOT bd THEN

        INSERT INTO aws_oracle_data.tdfmt
        VALUES(pFormat, vResult)
        ON CONFLICT ON CONSTRAINT tdfmt_pkey DO NOTHING;

    END IF;

    RETURN QUERY VALUES(vVal, vResult);

END;

]]></complex-attribute>
                        <category _I_D="b474e96a-40c9-4e48-931d-dc7ac0407ff0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2d01710c-3b0b-493c-8889-c5caced535ce" name="to_hex" subcategories-loading="none" object-loading="extended" context="to_hex" is-trigger-function="0" unique-function-name="to_hex" is-aggregate="f" language-name="sql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="text" function-arguments="p_dec numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304623" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_dec numeric" overload-function-count="1" proc-language="sql" function-signature="to_hex(p_dec numeric)" comment="Convert decimal to hexadecimal">
                        <complex-attribute name="sql"><![CDATA[
  SELECT aws_oracle_ext.to_base($1, 16); 
]]></complex-attribute>
                        <category _I_D="26cdbf98-446a-46d2-922d-74a2cb3bd934" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fc03e012-1d5e-49d8-9e62-4dd8424e1d6a" name="to_multi_byte" subcategories-loading="none" object-loading="extended" context="to_multi_byte" is-trigger-function="0" unique-function-name="to_multi_byte" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_str text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304617" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_str text" overload-function-count="1" proc-language="plpgsql" function-signature="to_multi_byte(p_str text)" comment="Returns char with all of its single-byte characters converted to their corresponding multibyte characters.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  db_encoding TEXT;

  TO_MULTI_BYTE_UTF8 CONSTANT TEXT[95] :=
  ARRAY
  [
	'\343\200\200',
	'\357\274\201',
	'\342\200\235',
	'\357\274\203',
	'\357\274\204',
	'\357\274\205',
	'\357\274\206',
	'\342\200\231',
	'\357\274\210',
	'\357\274\211',
	'\357\274\212',
	'\357\274\213',
	'\357\274\214',
	'\357\274\215',
	'\357\274\216',
	'\357\274\217',
	'\357\274\220',
	'\357\274\221',
	'\357\274\222',
	'\357\274\223',
	'\357\274\224',
	'\357\274\225',
	'\357\274\226',
	'\357\274\227',
	'\357\274\230',
	'\357\274\231',
	'\357\274\232',
	'\357\274\233',
	'\357\274\234',
	'\357\274\235',
	'\357\274\236',
	'\357\274\237',
	'\357\274\240',
	'\357\274\241',
	'\357\274\242',
	'\357\274\243',
	'\357\274\244',
	'\357\274\245',
	'\357\274\246',
	'\357\274\247',
	'\357\274\250',
	'\357\274\251',
	'\357\274\252',
	'\357\274\253',
	'\357\274\254',
	'\357\274\255',
	'\357\274\256',
	'\357\274\257',
	'\357\274\260',
	'\357\274\261',
	'\357\274\262',
	'\357\274\263',
	'\357\274\264',
	'\357\274\265',
	'\357\274\266',
	'\357\274\267',
	'\357\274\270',
	'\357\274\271',
	'\357\274\272',
	'\357\274\273',
	'\357\277\245',
	'\357\274\275',
	'\357\274\276',
	'\357\274\277',
	'\342\200\230',
	'\357\275\201',
	'\357\275\202',
	'\357\275\203',
	'\357\275\204',
	'\357\275\205',
	'\357\275\206',
	'\357\275\207',
	'\357\275\210',
	'\357\275\211',
	'\357\275\212',
	'\357\275\213',
	'\357\275\214',
	'\357\275\215',
	'\357\275\216',
	'\357\275\217',
	'\357\275\220',
	'\357\275\221',
	'\357\275\222',
	'\357\275\223',
	'\357\275\224',
	'\357\275\225',
	'\357\275\226',
	'\357\275\227',
	'\357\275\230',
	'\357\275\231',
	'\357\275\232',
	'\357\275\233',
	'\357\275\234',
	'\357\275\235',
	'\357\275\236',
	'\357\277\243'
  ];

  TO_MULTI_BYTE_EUCJP CONSTANT TEXT[95] :=
  ARRAY
  [
	'\241\241',
	'\241\252',
	'\241\311',
	'\241\364',
	'\241\360',
	'\241\363',
	'\241\365',
	'\241\307',
	'\241\312',
	'\241\313',
	'\241\366',
	'\241\334',
	'\241\244',
	'\241\335',
	'\241\245',
	'\241\277',
	'\243\260',
	'\243\261',
	'\243\262',
	'\243\263',
	'\243\264',
	'\243\265',
	'\243\266',
	'\243\267',
	'\243\270',
	'\243\271',
	'\241\247',
	'\241\250',
	'\241\343',
	'\241\341',
	'\241\344',
	'\241\251',
	'\241\367',
	'\243\301',
	'\243\302',
	'\243\303',
	'\243\304',
	'\243\305',
	'\243\306',
	'\243\307',
	'\243\310',
	'\243\311',
	'\243\312',
	'\243\313',
	'\243\314',
	'\243\315',
	'\243\316',
	'\243\317',
	'\243\320',
	'\243\321',
	'\243\322',
	'\243\323',
	'\243\324',
	'\243\325',
	'\243\326',
	'\243\327',
	'\243\330',
	'\243\331',
	'\243\332',
	'\241\316',
	'\241\357',
	'\241\317',
	'\241\260',
	'\241\262',
	'\241\306',
	'\243\341',
	'\243\342',
	'\243\343',
	'\243\344',
	'\243\345',
	'\243\346',
	'\243\347',
	'\243\350',
	'\243\351',
	'\243\352',
	'\243\353',
	'\243\354',
	'\243\355',
	'\243\356',
	'\243\357',
	'\243\360',
	'\243\361',
	'\243\362',
	'\243\363',
	'\243\364',
	'\243\365',
	'\243\366',
	'\243\367',
	'\243\370',
	'\243\371',
	'\243\372',
	'\241\320',
	'\241\303',
	'\241\321',
	'\241\301',
	'\241\261'
  ];

  map TEXT[];
  result TEXT;
BEGIN
  IF p_str ='' THEN RETURN NULL::TEXT; END IF;

  SELECT character_set_name FROM information_schema.character_sets INTO db_encoding;

  CASE db_encoding
    WHEN 'UTF8' THEN map := TO_MULTI_BYTE_UTF8;
    WHEN 'EUC_JP' THEN map := TO_MULTI_BYTE_EUCJP;
    WHEN 'PG_EUC_JIS_2004' THEN map := TO_MULTI_BYTE_EUCJP;
    ELSE RETURN p_str; --no need to convert
  END CASE;

  SELECT ARRAY_TO_STRING(ARRAY_AGG(CONCAT(CASE
                                            WHEN i BETWEEN 32 AND 126
                                            THEN CONVERT_FROM(DECODE(map[i - 32 + 1],'escape'),db_encoding)
                                            ELSE v
                                          END
                                         ,'')
                                  )
                        ,'')
    FROM (SELECT v, aws_oracle_ext.hex_to_int(LTRIM(v::BYTEA::text,'\x')) AS i
            FROM REGEXP_SPLIT_TO_TABLE(p_str,'') AS v) t
    INTO result;

  RETURN result;
END;
]]></complex-attribute>
                        <category _I_D="d8163bbc-fa62-4fb6-9f45-5716baa1fc26" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="aa7569e9-799d-4593-90b4-f540d4a1dc37" name="to_number" subcategories-loading="none" object-loading="extended" context="to_number(pval character varying)" is-trigger-function="0" unique-function-name="to_number(pval character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="numeric" function-arguments="pval character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304565" volatility="VOLATILE" is-window="f" function-identity-arguments="pval character varying" overload-function-count="6" proc-language="plpgsql" function-signature="to_number(pval character varying)" unique-suffix="(pval character varying)" routine-number="304565" comment="Converts VARCHAR to NUMBER when no additional params set">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult NUMERIC DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL AND pVal <> '' THEN

        vResult := aws_oracle_ext.to_number_formatter
        (
            pVal => pVal,
            pNoNumberFormat => 'Y'
        );

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="1eb805f7-6b7d-4527-9e2f-5b6ebace32fa" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b82eefee-13f5-4f1f-9b5e-e0def4ce5fa3" name="to_number" subcategories-loading="none" object-loading="extended" context="to_number(pval character varying, pformat character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_number(pval character varying, pformat character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying" is-returning-set="f" ret-datatype="numeric" function-arguments="pval character varying, pformat character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304566" volatility="VOLATILE" is-window="f" function-identity-arguments="pval character varying, pformat character varying, pnlsparam character varying" overload-function-count="6" proc-language="plpgsql" function-signature="to_number(pval character varying, pformat character varying, pnlsparam character varying)" unique-suffix="(pval character varying, pformat character varying, pnlsparam character varying)" routine-number="304566" comment="Converts VARCHAR to NUMBER. Some format models could return incorrect result. NLS params must be valid.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult NUMERIC DEFAULT NULL;
    vFormat VARCHAR;
BEGIN

    IF pVal IS NOT NULL AND pVal <> '' THEN

        IF pNlsParam IS NULL THEN

            SELECT f.nmodel
            INTO vFormat
            FROM aws_oracle_data.tnfmt f
            WHERE f.nmodel = pFormat;

            IF FOUND THEN

                 RETURN TO_NUMBER(pVal, vFormat);

            END IF;

        END IF;

        vResult := aws_oracle_ext.to_number_formatter
        (
            pVal      => pVal,
            pFormat   => pFormat,
            pNlsParam => pNlsParam
        );

    END IF;
    
    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="80dbde47-beb5-4b9a-aa93-7a46fa95001a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="46207d24-4c3c-4132-8612-6a1a318419e2" name="to_number" subcategories-loading="none" object-loading="extended" context="to_number(pval double precision)" is-trigger-function="0" unique-function-name="to_number(pval double precision)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision" is-returning-set="f" ret-datatype="numeric" function-arguments="pval double precision" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304559" volatility="VOLATILE" is-window="f" function-identity-arguments="pval double precision" overload-function-count="6" proc-language="plpgsql" function-signature="to_number(pval double precision)" unique-suffix="(pval double precision)" routine-number="304559" comment="Converts BINARY_DOUBLE to NUMBER, no additional params allowed">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    RETURN aws_oracle_ext.number_limit_correct(pVal::NUMERIC);

END;
]]></complex-attribute>
                        <category _I_D="c1b88402-d3ca-4106-921f-da1b2e7b0b6e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="337607d6-b28b-45f1-b14e-c1234cfff814" name="to_number" subcategories-loading="none" object-loading="extended" context="to_number(pval numeric)" is-trigger-function="0" unique-function-name="to_number(pval numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="numeric" function-arguments="pval numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304562" volatility="VOLATILE" is-window="f" function-identity-arguments="pval numeric" overload-function-count="6" proc-language="plpgsql" function-signature="to_number(pval numeric)" unique-suffix="(pval numeric)" routine-number="304562" comment="Converts NUMBER to NUMBER when no additional params set">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    RETURN aws_oracle_ext.number_limit_correct(pVal);

END;
]]></complex-attribute>
                        <category _I_D="43441afb-4a28-4ee8-8fd7-9bce85dd1e24" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d5f0b2a6-0886-4bb0-abff-9a1336d66d39" name="to_number" subcategories-loading="none" object-loading="extended" context="to_number(pval numeric, pformat character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_number(pval numeric, pformat character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,character varying,character varying" is-returning-set="f" ret-datatype="numeric" function-arguments="pval numeric, pformat character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304563" volatility="VOLATILE" is-window="f" function-identity-arguments="pval numeric, pformat character varying, pnlsparam character varying" overload-function-count="6" proc-language="plpgsql" function-signature="to_number(pval numeric, pformat character varying, pnlsparam character varying)" unique-suffix="(pval numeric, pformat character varying, pnlsparam character varying)" routine-number="304563" comment="Converts NUMBER to NUMBER when additional params are set. Some format models could return incorrect result. NLS params must be valid.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult NUMERIC DEFAULT NULL;
    vFormat VARCHAR;
BEGIN

    IF pVal IS NOT NULL THEN

        IF pNlsParam IS NULL THEN

            SELECT f.nmodel
            INTO vFormat
            FROM aws_oracle_data.tnfmt f
            WHERE f.nmodel = pFormat;

            IF FOUND THEN

                 RETURN TO_NUMBER(aws_oracle_ext.number_limit_correct(pVal), vFormat);

            END IF;

        END IF;

        vResult := aws_oracle_ext.to_number_formatter
        (
            pVal      => pVal,
            pFormat   => pFormat,
            pNlsParam => pNlsParam
        );

    END IF;
    
    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="c961d39e-882e-41c2-9a46-cd609c87008c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6766a62e-f7eb-44dc-b2c3-b4b7f7502eb2" name="to_number" subcategories-loading="none" object-loading="extended" context="to_number(pval real)" is-trigger-function="0" unique-function-name="to_number(pval real)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="real" is-returning-set="f" ret-datatype="numeric" function-arguments="pval real" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304564" volatility="VOLATILE" is-window="f" function-identity-arguments="pval real" overload-function-count="6" proc-language="plpgsql" function-signature="to_number(pval real)" unique-suffix="(pval real)" routine-number="304564" comment="Converts BINARY_FLOAT to NUMBER, no additional params allowed">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    RETURN aws_oracle_ext.number_limit_correct(pVal::NUMERIC);

END;
]]></complex-attribute>
                        <category _I_D="b5027ac5-74c8-47e1-9b68-cd9323bbe8ab" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="46501710-6816-46cf-bb3f-b68e4dfadd1b" name="to_number_formatter" subcategories-loading="none" object-loading="extended" context="to_number_formatter" is-trigger-function="0" unique-function-name="to_number_formatter" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,character varying,character varying,character varying" is-returning-set="f" ret-datatype="numeric" function-arguments="pval anyelement, pformat character varying DEFAULT NULL::character varying, pnlsparam character varying DEFAULT NULL::character varying, pnonumberformat character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304560" volatility="VOLATILE" is-window="f" function-identity-arguments="pval anyelement, pformat character varying, pnlsparam character varying, pnonumberformat character varying" overload-function-count="1" proc-language="plpgsql" function-signature="to_number_formatter(pval anyelement, pformat character varying, pnlsparam character varying, pnonumberformat character varying)" comment="Utility function making to_number results similar to expected on Oracle side">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    rec RECORD;
    cAllowedDatatypes CONSTANT VARCHAR[] := ARRAY
    [
        'NUMERIC',
        'INTEGER',
        'CHARACTER',
        'CHARACTER VARYING',
        'TEXT'
    ];
    vResult NUMERIC DEFAULT NULL;
    vDataType VARCHAR;
    verrorMessages CONSTANT VARCHAR[] := ARRAY
    [
        'ORA-00902: invalid datatype', --1
        'ORA-22835: Buffer too small for CLOB to CHAR', --2
        'ORA-01481: invalid number format model', --3
        'ORA-12702: invalid NLS parameter string used in SQL function', --4
        'ORA-01722: invalid number', --5
        'ORA-01481: invalid number format model' --6
    ];
    vNlsParam VARCHAR;
    vNlsParamCopy VARCHAR;
    vGroupSeparator VARCHAR(2) DEFAULT NULL;
    vDecimalSeparator VARCHAR(2) DEFAULT NULL;
    vCurrencySymbol VARCHAR;
    vIsoCurrency VARCHAR;
    vDualCurrency VARCHAR;
    vVal VARCHAR;
    vFmt VARCHAR;
    vtail VARCHAR;
    vfm VARCHAR;
    vTextResult VARCHAR;
    bd BOOLEAN DEFAULT FALSE;
    vurrisset BOOLEAN DEFAULT FALSE;
BEGIN

    vDataType := UPPER(PG_TYPEOF(pVal)::VARCHAR);

    IF ARRAY_POSITION(cAllowedDatatypes,  vDataType) IS NULL THEN

        RAISE USING MESSAGE := verrorMessages[1];

    END IF;

    vVal := pVal::TEXT;

    IF LENGTH(vVal) > 4000 THEN

        RAISE USING MESSAGE := verrorMessages[2];

    END IF;

    IF pNoNumberFormat IS NOT NULL THEN
        
        vResult := pVal::NUMERIC;
        bd := TRUE;

    ELSE

        CASE
            WHEN pNlsParam = '' THEN

                vResult := NULL;

            WHEN pNlsParam IS NOT NULL THEN

                SELECT STRING_AGG(CASE WHEN nls ~* 'CALENDAR' THEN '' ELSE nls END, '')
                INTO vNlsParamCopy
                FROM REGEXP_SPLIT_TO_TABLE
                ( 
                    TRIM(E'\n\ ' FROM pNlsParam),
                    'NLS_',
                'i') nls;
                
                vNlsParam := REGEXP_REPLACE
                (
                    vNlsParamCopy,
                    $$NUMERIC_CHARACTERS\s*=\s*('?)(.+?)('?)$$,
                    '',
                    'i'
                );

                vNlsParam := REGEXP_REPLACE
                (
                    vNlsParam,
                    $$ISO_CURRENCY\s*=\s*('?)(.+?)('?)$$,
                    '',
                    'i'
                );

                vNlsParam := REGEXP_REPLACE
                (
                    vNlsParam,
                    $$CURRENCY\s*=\s*('?)(.+?)('?)$$,
                    '',
                    'i'
                );

                IF LENGTH(TRIM(E'\n\ ' FROM vNlsParam)) > 0 THEN

                    RAISE USING MESSAGE := verrorMessages[4];

                END IF;

                -- Try to get set NLS parts
                FOR rec IN 
                (
                    SELECT REGEXP_MATCHES
                    (
                        vNlsParamCopy,
                        $$NUMERIC_CHARACTERS\s*=\s*('?)(.+?)('?)$$,
                        'i'
                    ) m
                ) LOOP

                    vDecimalSeparator := SUBSTR((rec.m)[2], 1, 1);
                  
                    IF LENGTH(vDecimalSeparator) = 0 THEN

                        RAISE USING MESSAGE := verrorMessages[4];

                    END IF;

                    vGroupSeparator := SUBSTR((rec.m)[2], 2, 1);

                    IF LENGTH(vGroupSeparator) = 0 THEN

                        RAISE USING MESSAGE := verrorMessages[4];

                    END IF;

                END LOOP;

                FOR rec IN 
                (
                    SELECT REGEXP_MATCHES
                    (
                        vNlsParamCopy,
                        $$CURRENCY\s*=\s*('?)(.+?)('?)$$,
                        'i'
                    ) m
                ) LOOP

                    vCurrencySymbol := (rec.m)[2];

                    IF LENGTH(vCurrencySymbol) = 0 THEN

                        RAISE USING MESSAGE := verrorMessages[4];

                    END IF;

                END LOOP;

                FOR rec IN 
                (
                    SELECT REGEXP_MATCHES
                    (
                        vNlsParamCopy,
                        $$ISO_CURRENCY\s*=\s*('?)(.+?)('?)$$,
                        'i'
                    ) m
                ) LOOP

                    vIsoCurrency := (rec.m)[2];

                    IF LENGTH(vIsoCurrency) = 0 THEN

                        RAISE USING MESSAGE := verrorMessages[4];

                    END IF;

                    SELECT icl.code
                    INTO vIsoCurrency
                    FROM aws_oracle_ext.iso_currency_list icl
                    WHERE icl.nls_iso_currency = (rec.m)[2];

                END LOOP;

            ELSE

                NULL;       

        END CASE;

        vtail:= pFormat;

        LOOP

            SELECT ok, tail, fm
            INTO vFmt, vtail, vfm
            FROM aws_oracle_ext.to_char_parser
            (
                pStr  => vtail,
                pType => 'number',
                pFm   => vfm
            );
            
        
            vTextResult := CONCAT(vTextResult, vFmt);

            EXIT WHEN vtail IS NULL;

        END LOOP;

        /* Restrictions */
            --A comma element cannot begin a number format model
        IF SUBSTR(vTextResult, 1, 1) = ',' THEN

            RAISE USING MESSAGE := verrorMessages[6];

        END IF;
        -- A comma cannot appear to the right of a decimal
        -- character or period in a number format model
        CASE 
            WHEN vTextResult ~* '[\.D].*\,' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            --only one period in a number format model
            WHEN vTextResult ~ '\..*\.' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- only one decimal character in a number format model
            WHEN vTextResult ~* 'd.*d' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- group separator cannot appear to the right of a decimal 
            -- character or period in a number format model
            -- V also
            WHEN vTextResult ~* '[\.DV].*g' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- Start with g is not allowed
            WHEN vTextResult ~* '^G' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- It's not allowed to mix different type group and
            -- decimal model symbols
            WHEN vTextResult ~ '\.|\,' AND vTextResult ~* 'D|G' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- The MI format element can appear only in the last position 
            -- of a number format model
            WHEN vTextResult ~* 'MI.+' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            --The PR format element can appear only in the last position
            -- of a number format model
            WHEN vTextResult ~* 'PR.+' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- The S format element can appear only in the first 
            -- or last position of a number format model
            WHEN vTextResult ~* '[^S]+S[^S]+' OR vTextResult ~* 'S[^S]*S' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- You cannot precede this element with any other element
            WHEN vTextResult ~* '.+TM' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- You can follow this element only with one 9 or 
            -- one E (or e), but not with any combination of these
            WHEN vTextResult ~* 'TM.{2,}' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            WHEN vTextResult ~* 'TM[^9e]' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- You can precede this element only with 0 (which returns leading zeroes)
            -- or FM. Any other elements return an error
            WHEN vTextResult ~* '.*X.?'
                AND vTextResult !~* '^0+X{1,}$'
                AND vTextResult !~* '^FMX{1,}$'
                AND vTextResult !~* '^FM0{1,}X{1,}$'
                AND vTextResult !~* '^X{1,}$' THEN

                    RAISE USING MESSAGE := verrorMessages[6];
            -- only one $ allowed
            WHEN vTextResult ~ '\$.*\$' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- only one C allowed
            WHEN vTextResult ~* 'C.*C' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- only one L allowed
            WHEN vTextResult ~* 'L.*L' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- only one U allowed
            WHEN vTextResult ~* 'U.*U' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- C, L, $, U together is not allowed
            WHEN vTextResult ~* 'C.*[\$LU]' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            WHEN vTextResult ~* '[UL\$].*C' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- only one V allowed
            WHEN vTextResult ~* 'V.*V' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- V and period or decimal is not allowed
            WHEN vTextResult ~* 'V.*[\.D]' OR vTextResult ~* '[\.D].*V' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- If RN - no other models allowed
            WHEN vTextResult ~* '.+RN' OR vTextResult ~* 'RN.+' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- Only EEEE is not allowed. No chars after EEEE. No comma before EEEE
            WHEN vTextResult ~* '^EEEE$' 
                OR vTextResult ~* 'EEEE[^S]+' 
                OR vTextResult ~* '\,.*EEEE'
                OR vTextResult ~* 'EEEE.{2,}' THEN

                    RAISE USING MESSAGE := verrorMessages[6];
            ELSE

                NULL;
        END CASE;
        
        -- converting
        IF vTextResult ~* 'U|C|L' THEN

            bd := TRUE;

                IF vTextResult ~* 'U' THEN

                    IF vDualCurrency IS NULL THEN

                        SELECT value
                        INTO vDualCurrency
                        FROM aws_oracle_ext.v$nls_parameters WHERE parameter = 'NLS_DUAL_CURRENCY';

                    END IF;

                    vVal := REGEXP_REPLACE(vVal, vDualCurrency, '$', 'i');
                    vTextResult := REGEXP_REPLACE(vTextResult, 'U', '$', 'i');
                    vurrisset := TRUE;

                END IF;

                IF vTextResult ~* 'C' AND NOT vurrisset THEN

                    IF vIsoCurrency IS NULL THEN

                        SELECT icl.code
                        INTO vIsoCurrency
                        FROM aws_oracle_ext.iso_currency_list icl
                        WHERE icl.nls_iso_currency = (SELECT value
                        FROM aws_oracle_ext.v$nls_parameters WHERE parameter = 'NLS_ISO_CURRENCY');

                    END IF;

                    vVal := REGEXP_REPLACE(vVal, vIsoCurrency, '$' , 'i');
                    vTextResult := REGEXP_REPLACE(vTextResult, 'C', '$', 'i');
                    vurrisset := TRUE;

                END IF;

                IF vTextResult ~* 'L'  AND NOT vurrisset THEN

                    IF vCurrencySymbol IS NULL THEN

                        SELECT value
                        INTO vCurrencySymbol
                        FROM aws_oracle_ext.v$nls_parameters
                        WHERE parameter = 'NLS_CURRENCY';

                    END IF;

                    vVal := REGEXP_REPLACE(vVal, vCurrencySymbol, '$' , 'i');
                    vTextResult := REGEXP_REPLACE(vTextResult, 'L', '$', 'i');

                    vurrisset := TRUE;

                END IF;

        END IF;

        IF vTextResult ~* 'G|D' AND vDecimalSeparator IS NOT NULL AND vGroupSeparator IS NOT NULL THEN

            bd := TRUE;

            vVal := REPLACE(vVal, vGroupSeparator, '#,');

            IF vDecimalSeparator = ',' THEN

                vVal := REGEXP_REPLACE(vVal, '([^#]),', '\1#.');

            ELSE

                vVal := REPLACE(vVal, vDecimalSeparator, '#.');

            END IF;

            vVal := REPLACE(vVal, '#.', '.');
            vVal := REPLACE(vVal, '#,', ',');

            vTextResult := REGEXP_REPLACE(vTextResult, 'D', '.', 'i');
            vTextResult := REGEXP_REPLACE(vTextResult, 'G', ',', 'ig');

        END IF;
        
        CASE
            WHEN vTextResult ~* 'X' THEN

                bd := TRUE;

                EXECUTE 'SELECT x''' || vVal || '''::BIGINT::NUMERIC' INTO vResult;

            WHEN vTextResult ~* 'EEEE' THEN

                bd := TRUE;

                vResult := vVal::NUMERIC;

            ELSE

                vResult := TO_NUMBER(vVal, vTextResult);

        END CASE;

    END IF;

    IF NOT bd THEN

        INSERT INTO aws_oracle_data.tnfmt
        VALUES(pFormat)
        ON CONFLICT ON CONSTRAINT tnfmt_pkey DO NOTHING;

    END IF;

    RETURN aws_oracle_ext.number_limit_correct(vResult);

END;
]]></complex-attribute>
                        <category _I_D="067320f7-1855-4dec-8446-b8649e675977" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="381ee8a8-a867-44d7-b6c5-e16d68b5d5af" name="to_oct" subcategories-loading="none" object-loading="extended" context="to_oct" is-trigger-function="0" unique-function-name="to_oct" is-aggregate="f" language-name="sql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="text" function-arguments="p_dec numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304624" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_dec numeric" overload-function-count="1" proc-language="sql" function-signature="to_oct(p_dec numeric)" comment="Convert decimal to octal">
                        <complex-attribute name="sql"><![CDATA[
  SELECT aws_oracle_ext.to_base($1, 8); 
]]></complex-attribute>
                        <category _I_D="feea79ed-cc99-4a32-975f-fab3a0ec4d4d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dba77886-e0d5-4e1b-aa7d-33b1768e8c0f" name="to_single_byte" subcategories-loading="none" object-loading="extended" context="to_single_byte" is-trigger-function="0" unique-function-name="to_single_byte" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_str text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304618" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_str text" overload-function-count="1" proc-language="plpgsql" function-signature="to_single_byte(p_str text)" comment="Returns char with all of its multibyte characters converted to their corresponding single-byte characters.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  db_encoding TEXT;

  TO_MULTI_BYTE_UTF8 CONSTANT TEXT[95] :=
  ARRAY
  [
	'\343\200\200',
	'\357\274\201',
	'\342\200\235',
	'\357\274\203',
	'\357\274\204',
	'\357\274\205',
	'\357\274\206',
	'\342\200\231',
	'\357\274\210',
	'\357\274\211',
	'\357\274\212',
	'\357\274\213',
	'\357\274\214',
	'\357\274\215',
	'\357\274\216',
	'\357\274\217',
	'\357\274\220',
	'\357\274\221',
	'\357\274\222',
	'\357\274\223',
	'\357\274\224',
	'\357\274\225',
	'\357\274\226',
	'\357\274\227',
	'\357\274\230',
	'\357\274\231',
	'\357\274\232',
	'\357\274\233',
	'\357\274\234',
	'\357\274\235',
	'\357\274\236',
	'\357\274\237',
	'\357\274\240',
	'\357\274\241',
	'\357\274\242',
	'\357\274\243',
	'\357\274\244',
	'\357\274\245',
	'\357\274\246',
	'\357\274\247',
	'\357\274\250',
	'\357\274\251',
	'\357\274\252',
	'\357\274\253',
	'\357\274\254',
	'\357\274\255',
	'\357\274\256',
	'\357\274\257',
	'\357\274\260',
	'\357\274\261',
	'\357\274\262',
	'\357\274\263',
	'\357\274\264',
	'\357\274\265',
	'\357\274\266',
	'\357\274\267',
	'\357\274\270',
	'\357\274\271',
	'\357\274\272',
	'\357\274\273',
	'\357\277\245',
	'\357\274\275',
	'\357\274\276',
	'\357\274\277',
	'\342\200\230',
	'\357\275\201',
	'\357\275\202',
	'\357\275\203',
	'\357\275\204',
	'\357\275\205',
	'\357\275\206',
	'\357\275\207',
	'\357\275\210',
	'\357\275\211',
	'\357\275\212',
	'\357\275\213',
	'\357\275\214',
	'\357\275\215',
	'\357\275\216',
	'\357\275\217',
	'\357\275\220',
	'\357\275\221',
	'\357\275\222',
	'\357\275\223',
	'\357\275\224',
	'\357\275\225',
	'\357\275\226',
	'\357\275\227',
	'\357\275\230',
	'\357\275\231',
	'\357\275\232',
	'\357\275\233',
	'\357\275\234',
	'\357\275\235',
	'\357\275\236',
	'\357\277\243'
  ];

  TO_MULTI_BYTE_EUCJP CONSTANT TEXT[95] :=
  ARRAY
  [
	'\241\241',
	'\241\252',
	'\241\311',
	'\241\364',
	'\241\360',
	'\241\363',
	'\241\365',
	'\241\307',
	'\241\312',
	'\241\313',
	'\241\366',
	'\241\334',
	'\241\244',
	'\241\335',
	'\241\245',
	'\241\277',
	'\243\260',
	'\243\261',
	'\243\262',
	'\243\263',
	'\243\264',
	'\243\265',
	'\243\266',
	'\243\267',
	'\243\270',
	'\243\271',
	'\241\247',
	'\241\250',
	'\241\343',
	'\241\341',
	'\241\344',
	'\241\251',
	'\241\367',
	'\243\301',
	'\243\302',
	'\243\303',
	'\243\304',
	'\243\305',
	'\243\306',
	'\243\307',
	'\243\310',
	'\243\311',
	'\243\312',
	'\243\313',
	'\243\314',
	'\243\315',
	'\243\316',
	'\243\317',
	'\243\320',
	'\243\321',
	'\243\322',
	'\243\323',
	'\243\324',
	'\243\325',
	'\243\326',
	'\243\327',
	'\243\330',
	'\243\331',
	'\243\332',
	'\241\316',
	'\241\357',
	'\241\317',
	'\241\260',
	'\241\262',
	'\241\306',
	'\243\341',
	'\243\342',
	'\243\343',
	'\243\344',
	'\243\345',
	'\243\346',
	'\243\347',
	'\243\350',
	'\243\351',
	'\243\352',
	'\243\353',
	'\243\354',
	'\243\355',
	'\243\356',
	'\243\357',
	'\243\360',
	'\243\361',
	'\243\362',
	'\243\363',
	'\243\364',
	'\243\365',
	'\243\366',
	'\243\367',
	'\243\370',
	'\243\371',
	'\243\372',
	'\241\320',
	'\241\303',
	'\241\321',
	'\241\301',
	'\241\261'
  ];

  map TEXT[];
  result TEXT;
BEGIN
  IF p_str ='' THEN RETURN NULL::TEXT; END IF;

  SELECT character_set_name FROM information_schema.character_sets INTO db_encoding;

  CASE db_encoding
    WHEN 'UTF8' THEN map := TO_MULTI_BYTE_UTF8;
    WHEN 'EUC_JP' THEN map := TO_MULTI_BYTE_EUCJP;
    WHEN 'PG_EUC_JIS_2004' THEN map := TO_MULTI_BYTE_EUCJP;
    ELSE RETURN p_str; --no need to convert
  END CASE;

  SELECT ARRAY_TO_STRING(ARRAY_AGG(CONCAT(CASE
                                            WHEN array_position(map,u) IS NOT NULL
                                            THEN CONVERT_FROM(DECODE(to_hex(array_position(map,u)+32-1),'hex'),db_encoding)
                                            ELSE v
                                          END
                                         ,'')
                                  )
                        ,'')
    FROM (SELECT v, encode(v::bytea,'escape') AS u
            FROM REGEXP_SPLIT_TO_TABLE(p_str,'') AS v) t
    INTO result;

  RETURN result;
END;
]]></complex-attribute>
                        <category _I_D="ee35d5d3-75c8-4642-9be4-f8e13c4ffd62" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cd372a5d-6f9b-41ee-bf69-75369fa222f6" name="trim" subcategories-loading="none" object-loading="extended" context="trim" is-trigger-function="0" unique-function-name="trim" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyarray,numeric" is-returning-set="f" ret-datatype="anyarray" function-arguments="parray anyarray, pn numeric DEFAULT NULL::numeric" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304567" volatility="VOLATILE" is-window="f" function-identity-arguments="parray anyarray, pn numeric" overload-function-count="1" proc-language="plpgsql" function-signature="trim(parray anyarray, pn numeric)" comment="Implements Oracle Collection method TRIM">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    
    vN INTEGER;
    vLength INTEGER;
BEGIN

    vLength := ARRAY_LENGTH(parray, 1);
    
    IF pn IS NULL THEN

        vN := 1;

    ELSE

        vN := ROUND(pn)::INTEGER;

    END IF;

    IF vN < 0 THEN 
    
        RAISE EXCEPTION USING MESSAGE := 'ORA-06502: PL/SQL: numeric or value error';

    END IF;
    
    IF vN > vLength THEN
    
        RAISE EXCEPTION USING MESSAGE := 'ORA-06533: Subscript beyond count';

    END IF;

    RETURN parray[1:vLength - vN];

END;
]]></complex-attribute>
                        <category _I_D="a560a198-7307-4e99-990c-0f134558fa3b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="28a68245-fc48-413b-84c0-814be8c3b66c" name="trunc" subcategories-loading="none" object-loading="extended" context="trunc" is-trigger-function="0" unique-function-name="trunc" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone,text" is-returning-set="f" ret-datatype="timestamp" function-arguments="p_date timestamp without time zone, p_fmt text DEFAULT 'DD'::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304568" volatility="VOLATILE" is-window="f" function-identity-arguments="p_date timestamp without time zone, p_fmt text" overload-function-count="1" proc-language="sql" function-signature="trunc(p_date timestamp without time zone, p_fmt text)" comment="This function returns the date with the time portion of the day truncated to a specific unit of measure. It operates according to the rules of the Gregorian calendar.">
                        <complex-attribute name="sql"><![CDATA[
    SELECT
        CASE
            WHEN LENGTH(p_fmt) = 0 THEN
                
                NULL::TIMESTAMP
            
            WHEN UPPER(p_fmt) IN
            (
                'CC', 'SCC', 'SYYYY', 'YYYY', 'YEAR', 'SYEAR', 'YYY', 'YY', 'Y', 'Q',
                'MONTH', 'MON', 'MM', 'RM', 'IW', 'DDD', 'DD', 'J', 'HH', 'HH12', 'HH24', 'MI'
            ) THEN

                DATE_TRUNC
                (
                    CASE
                        WHEN UPPER(p_fmt) IN ('CC', 'SCC') THEN 'CENTURY'
                        WHEN UPPER(p_fmt) IN ('SYYYY', 'YYYY', 'YEAR', 'SYEAR', 'YYY', 'YY', 'Y') THEN 'YEAR'
                        WHEN UPPER(p_fmt) = 'Q' THEN 'QUARTER'
                        WHEN UPPER(p_fmt) IN ('MONTH', 'MON', 'MM', 'RM') THEN 'MONTH'
                        WHEN UPPER(p_fmt) = 'IW' THEN 'WEEK'
                        WHEN UPPER(p_fmt) IN ('DDD', 'DD', 'J') THEN 'DAY'
                        WHEN UPPER(p_fmt) IN ('HH', 'HH12', 'HH24') THEN 'HOUR'
                        WHEN UPPER(p_fmt) = 'MI' THEN 'MINUTE'
                    END,
                    p_date
                )
            
            WHEN UPPER(p_fmt) IN ('IYYY', 'IYY', 'IY', 'I') THEN

                CASE
                    WHEN 
                    (
                        EXTRACT 
                        (
                            EPOCH FROM
                            aws_oracle_ext.next_day
                            (
                                TO_TIMESTAMP('01.01.' || extract(ISOYEAR from p_date)::INTEGER, 'DD.MM.YYYY')::TIMESTAMP,
                                'MONDAY'
                            ) - TO_TIMESTAMP('01.01.' || extract(ISOYEAR from p_date)::INTEGER, 'DD.MM.YYYY')::TIMESTAMP
                        )/86400
                    )::INTEGER >= 4 THEN

                        aws_oracle_ext.next_day
                        (
                            TO_TIMESTAMP('01.01.' || extract(ISOYEAR from p_date)::INTEGER, 'DD.MM.YYYY')::TIMESTAMP - INTERVAL '7' DAY,
                            'MONDAY'
                        )
                        
                    ELSE
                        aws_oracle_ext.next_day
                        (
                            TO_TIMESTAMP('01.01.' || extract(ISOYEAR from p_date)::INTEGER, 'DD.MM.YYYY')::TIMESTAMP,
                            'MONDAY'
                        )
                END

            WHEN UPPER(p_fmt) IN ('W', 'WW') THEN

                aws_oracle_ext.next_day
                (
                    DATE_TRUNC('DAY',p_date) - INTERVAL '7' DAY,
                    RTRIM
                    (
                        TO_CHAR
                        (
                            DATE_TRUNC
                            (
                                CASE
                                    WHEN UPPER(p_fmt) = 'W' THEN 'MONTH'
                                    ELSE 'YEAR'
                                END,
                                p_date
                            ),
                            'DAY'
                        )
                    )
                )

            WHEN UPPER(p_fmt) IN ('DAY', 'DY', 'D') THEN
            -- todo d is incorrect 

                aws_oracle_ext.next_day
                (
                    DATE_TRUNC('DAY',p_date) - INTERVAL '7' DAY,
                    'MONDAY'
                )

            ELSE

                DATE_TRUNC(p_fmt, p_date)

        END;

]]></complex-attribute>
                        <category _I_D="b0568df3-35f5-4f7c-9b2c-b42511b46a90" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c2ba9a72-724a-4dbe-8d2b-bfe969276ebf" name="unistr" subcategories-loading="none" object-loading="extended" context="unistr" is-trigger-function="0" unique-function-name="unistr" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304569" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p text" overload-function-count="1" proc-language="plpgsql" function-signature="unistr(p text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    res TEXT;
BEGIN

    EXECUTE CONCAT
    (
        $$SELECT E'$$,
        REPLACE(REPLACE(REPLACE(p,'\\','zZzZ'),'\','\u'),'zZzZ','\\'),
        $$'$$
    ) INTO RES;

    RETURN RES;

END;
]]></complex-attribute>
                        <category _I_D="036179b2-9161-45b2-acef-3c3e6a6034d1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="866a51ef-572a-4839-ad23-459e679d24c2" name="update_job" subcategories-loading="none" object-loading="extended" context="update_job" is-trigger-function="0" unique-function-name="update_job" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bigint,text" is-returning-set="f" ret-datatype="void" function-arguments="p_job bigint, p_error_message text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304570" volatility="VOLATILE" is-window="f" function-identity-arguments="p_job bigint, p_error_message text" overload-function-count="1" proc-language="plpgsql" function-signature="update_job(p_job bigint, p_error_message text)">
                        <complex-attribute name="sql"><![CDATA[
  declare
    l_failure boolean := p_error_message is not null and p_error_message <> '';
    l_interval aws_oracle_ext.jobs."interval"%type;
    l_next_date timestamp with time zone;
    l_now timestamp with time zone := clock_timestamp();
  begin
    begin
      select j.interval into strict l_interval from aws_oracle_ext.jobs j where j.job = p_job;
    exception
      when no_data_found then
        raise exception 'Job #% not found', p_job;
    end;
  
    execute 'select ' || l_interval into l_next_date;

    if l_next_date is not null or l_failure then
      update aws_oracle_ext.jobs j
         set last_date = case when l_failure then last_date else this_date end
           , this_date = null
           , failures = case when l_failure then failures + 1 else 0 end
           , broken = case when l_failure and failures + 1 > 16 then 'Y' else 'N' end
           , last_failure_message = case when l_failure then p_error_message end
           , next_date = coalesce( l_next_date, next_date )
           , total_time = total_time + case when l_failure then 0 else extract( second from l_now - this_date ) end
       where j.job = p_job
         and j.this_date is not null;
    end if;   

    if l_next_date is null and not l_failure then
      delete from aws_oracle_ext.jobs where job = p_job;
    end if;
  end;
]]></complex-attribute>
                        <category _I_D="ac30fd37-6fd6-44d1-acd2-ef9b369b4bee" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f727fa48-d331-4167-b8ec-59cc5cbc4a6a" name="userenv" subcategories-loading="none" object-loading="extended" context="userenv" is-trigger-function="0" unique-function-name="userenv" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="parameter character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304572" volatility="VOLATILE" is-window="f" function-identity-arguments="parameter character varying" overload-function-count="1" proc-language="plpgsql" function-signature="userenv(parameter character varying)">
                        <complex-attribute name="sql"><![CDATA[
begin
  if upper(parameter) in ('ISDBA', 'LANG', 'LANGUAGE', 'CLIENT_INFO', 'TERMINAL') then
  return aws_oracle_ext.SYS_CONTEXT_USERENV(parameter);
  else raise EXCEPTION 'invalid USERENV parameter';  
  end if;
end;
]]></complex-attribute>
                        <category _I_D="b2fca90d-9c77-4e86-9511-312a53a0bd3c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="519f0a3d-b082-4555-a004-e6d7645b5464" name="userenv_number" subcategories-loading="none" object-loading="extended" context="userenv_number" is-trigger-function="0" unique-function-name="userenv_number" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="int4" function-arguments="parameter character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304571" volatility="VOLATILE" is-window="f" function-identity-arguments="parameter character varying" overload-function-count="1" proc-language="plpgsql" function-signature="userenv_number(parameter character varying)">
                        <complex-attribute name="sql"><![CDATA[
begin
  if upper(parameter) = ('SESSIONID') then
    return pg_backend_pid();
  else 
    /*another  calls with the COMMITSCN and ENTRYID parameters have no analogs in PostgreSQL*/
    return NULL;
  end if;
end;
]]></complex-attribute>
                        <category _I_D="afa0e2cc-91d3-4a5e-abe2-476f0035dcf3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="85f1d21a-acc4-48e4-8e6a-68de7ddbf531" name="utl_encode$base64" subcategories-loading="none" object-loading="extended" context="utl_encode$base64" is-trigger-function="0" unique-function-name="utl_encode$base64" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304573" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="utl_encode$base64()" comment="Emulates UTL_ENCODE.BASE64 package constant">
                        <complex-attribute name="sql"><![CDATA[  
begin
  return 1;
end;
]]></complex-attribute>
                        <category _I_D="c1f075a2-bbef-44c3-8417-a15a83568a98" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3b1fafac-7078-4f45-91d7-aea62c818af1" name="utl_encode$mimeheader_decode" subcategories-loading="none" object-loading="extended" context="utl_encode$mimeheader_decode" is-trigger-function="0" unique-function-name="utl_encode$mimeheader_decode" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="buf character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304574" volatility="VOLATILE" is-window="f" function-identity-arguments="buf character varying" overload-function-count="1" proc-language="plpgsql" function-signature="utl_encode$mimeheader_decode(buf character varying)" comment="This function accepts as input an &quot;encoded word&quot; of the form:&amp;#x000a;=?&lt;charset&gt;?&lt;encoding&gt;?&lt;encoded text&gt;?= &amp;#x000a;=?ISO-8859-1?Q?Here is some encoded text?= &amp;#x000a;The &lt;encoded text&gt; is encapsulated in mime header tags which give the MIMEHEADER_DECODE function information about how to decode the string. &amp;#x000a;The mime header metadata tags are stripped from the input string and the &lt;encoded text&gt; is converted to the base database character set&amp;#x000a;">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  l_charset CHARACTER VARYING;
  encoding_flag  CHARACTER VARYING;
BEGIN
  l_charset := (regexp_matches(buf, '\=\?(.*?)\?', 'g'))[1];
  encoding_flag := (regexp_matches(buf, '\?(.)\?', 'g'))[1];

  if l_charset is null or encoding_flag is null then return null; end if;  

  buf := (regexp_matches(buf, concat(encoding_flag, '\?(.*?)\?\='), 'g'))[1];

  return decode(convert_from(buf::bytea, l_charset), case when encoding_flag = 'B' then 'base64' else 'escape' end); 
END
]]></complex-attribute>
                        <category _I_D="5de9353f-3902-4da8-87d1-b838e20fb37f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8b65e0d0-7951-4bfa-9d21-89d8ac8f35e2" name="utl_encode$mimeheader_encode" subcategories-loading="none" object-loading="extended" context="utl_encode$mimeheader_encode" is-trigger-function="0" unique-function-name="utl_encode$mimeheader_encode" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,integer" is-returning-set="f" ret-datatype="varchar" function-arguments="buf character varying, encode_charset character varying DEFAULT NULL::character varying, encoding_flag integer DEFAULT NULL::integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304575" volatility="VOLATILE" is-window="f" function-identity-arguments="buf character varying, encode_charset character varying, encoding_flag integer" overload-function-count="1" proc-language="plpgsql" function-signature="utl_encode$mimeheader_encode(buf character varying, encode_charset character varying, encoding_flag integer)" comment="The buf input parameter is the text to be encoded and becomes the &lt;encoded text&gt;.&amp;#x000a;The &lt;encoding&gt; value is either &quot;Q&quot; or &quot;B&quot; for quoted-printable encode or base64 encoding respectively. The ENCODING input parameter accepts as valid values UTL_ENCODE.QUOTED_PRINTABLE or UTL_ENCODE.BASE64 or NULL. If NULL, quoted-printable encoding is selected as a default value.&amp;#x000a;The &lt;charset&gt; value is specified as the input parameter encode_charset. If NULL, the database character set is selected as a default value.&amp;#x000a;">
                        <complex-attribute name="sql"><![CDATA[  
BEGIN
  if encode_charset is null then
    -- if encode_charset is null the current db charset will be used instead 
    SELECT pg_encoding_to_char(encoding) into encode_charset FROM pg_database WHERE datname = current_database();
  else 
    -- override encode_charset due mapping info
    encode_charset := aws_oracle_ext.get_charset_name(encode_charset);   
  end if;
  return concat('=?', 
		encode_charset, 
		case when encoding_flag = 1 then '?B?' else '?Q?' end, 
		encode(convert_to(buf, encode_charset)::bytea, case when encoding_flag = 1 then 'base64' else 'escape' end), 		
		'?=');
END;  
]]></complex-attribute>
                        <category _I_D="df40efde-14e5-48a8-b6c4-f3a8035fc89f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0216b54a-5c74-45d2-a11b-fea32ec58117" name="utl_encode$quoted_printable" subcategories-loading="none" object-loading="extended" context="utl_encode$quoted_printable" is-trigger-function="0" unique-function-name="utl_encode$quoted_printable" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="int4" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="304576" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="utl_encode$quoted_printable()" comment="Emulates UTL_ENCODE.BASE64 package constant">
                        <complex-attribute name="sql"><![CDATA[  
begin
  return 2;
end;
]]></complex-attribute>
                        <category _I_D="cc8f12f8-15df-49af-a103-f2cd33219ee7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="815d7e28-cd3a-4e5f-bb36-079e988da22b" name="utl_encode$text_decode" subcategories-loading="none" object-loading="extended" context="utl_encode$text_decode" is-trigger-function="0" unique-function-name="utl_encode$text_decode" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,integer" is-returning-set="f" ret-datatype="varchar" function-arguments="buf character varying, encode_charset character varying DEFAULT NULL::character varying, encoding_flag integer DEFAULT NULL::integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304577" volatility="VOLATILE" is-window="f" function-identity-arguments="buf character varying, encode_charset character varying, encoding_flag integer" overload-function-count="1" proc-language="plpgsql" function-signature="utl_encode$text_decode(buf character varying, encode_charset character varying, encoding_flag integer)" comment="This function converts the input text to the target character set as specified by the encode_charset parameter, if not NULL. The encoded text is converted to the base character set of database">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
BEGIN
  if encode_charset is not null then buf := convert_from(buf::bytea, encode_charset); end if;
  return decode(buf, case when encoding_flag = 1 then 'base64' else 'escape' end); 
END;
]]></complex-attribute>
                        <category _I_D="c87dc75f-4b27-4c94-a861-82bb4ca2072f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fb4f2584-469c-4fe1-a4f5-748a7f8c5e77" name="utl_encode$text_encode" subcategories-loading="none" object-loading="extended" context="utl_encode$text_encode" is-trigger-function="0" unique-function-name="utl_encode$text_encode" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,integer" is-returning-set="f" ret-datatype="varchar" function-arguments="buf character varying, encode_charset character varying DEFAULT NULL::character varying, encoding_flag integer DEFAULT NULL::integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304578" volatility="VOLATILE" is-window="f" function-identity-arguments="buf character varying, encode_charset character varying, encoding_flag integer" overload-function-count="1" proc-language="plpgsql" function-signature="utl_encode$text_encode(buf character varying, encode_charset character varying, encoding_flag integer)" comment="This function converts the input text to the target character set as specified by the encode_charset parameter, if not NULL. &amp;#x000a;The text is encoded to either base64 or quoted-printable format, as specified by the encoding parameter.">
                        <complex-attribute name="sql"><![CDATA[  
BEGIN
  if encode_charset is null then    
    SELECT pg_encoding_to_char(encoding) into encode_charset FROM pg_database WHERE datname = current_database();
  else 
    encode_charset := aws_oracle_ext.get_charset_name(encode_charset);   
  end if;
  return encode(convert_to(buf, encode_charset)::bytea, case when encoding_flag = 1 then 'base64' else 'escape' end);
END;  
]]></complex-attribute>
                        <category _I_D="44dfeac0-b6e6-4f61-93ae-bfb114eaa1b3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="928180c8-9f57-4168-8a6f-f2698462e3b3" name="utl_file$exceptions" subcategories-loading="none" object-loading="extended" context="utl_file$exceptions" is-trigger-function="0" unique-function-name="utl_file$exceptions" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="src_exception text" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305024" volatility="VOLATILE" is-window="f" function-identity-arguments="src_exception text" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$exceptions(src_exception text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    oracodes CONSTANT JSONB :=
    '
    {
        "invalid_path": {
            "code": -29280,
            "message": "invalid directory path"
        },
        "invalid_mode": {
            "code": -29281,
            "message": "invalid mode"
        },
        "invalid_filehandle": {
            "code": -29282,
            "message": "invalid file ID"
        },
        "invalid_operation": {
            "code": -29283,
            "message": "invalid file operation"
        },
        "read_error": {
            "code": -29284,
            "message": "file read error"
        },
        "write_error": {
            "code": -29285,
            "message": "file write error"
        },
        "internal_error": {
            "code": -29286,
            "message": "internal error"
        },
        "charsetmismatch": {
            "code": -29298,
            "message": "Character set mismatch"
        },
        "invalid_maxlinesize": {
            "code": -29287,
            "message": "invalid maximum line size"
        },
        "invalid_filename": {
            "code": -29288,
            "message": "invalid file name"
        },
        "access_denied": {
            "code": -29289,
            "message": "directory access denied"
        },
        "invalid_offset": {
            "code": -29290,
            "message": "invalid offset specified for seek"
        },
        "delete_failed": {
            "code": -29291,
            "message": "file remove operation failed"
        },
        "rename_failed": {
            "code": -29292,
            "message": "file rename operation failed"
        }
    }
    '::JSONB;
    vCode TEXT;
    vException TEXT;
    vMessage TEXT;
BEGIN

    vException := TRIM(LOWER(src_exception));

    IF vException = 'no_data_found' THEN

        RAISE no_data_found;

    END IF;

    IF NOT oracodes ? vException THEN

        RAISE UNDEFINED_OBJECT;

    ELSE

        vCode := oracodes -> vException ->> 'code' ;

        vMessage := oracodes -> vException ->> 'message';
        
        RAISE USING HINT = vCode, message = vMessage;

    END IF;

END;        
]]></complex-attribute>
                        <category _I_D="90fcd599-6caf-4441-8f47-454122d943c0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="976dc3fd-505e-497f-9a72-480d3b2df6d2" name="utl_file$fclose" subcategories-loading="none" object-loading="extended" context="utl_file$fclose" is-trigger-function="0" unique-function-name="utl_file$fclose" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_file$file_type&quot;" is-returning-set="f" ret-datatype="utl_file$file_type" function-arguments="INOUT file aws_oracle_ext.&quot;utl_file$file_type&quot;" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305026" volatility="VOLATILE" is-window="f" function-identity-arguments="INOUT file aws_oracle_ext.&quot;utl_file$file_type&quot;" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$fclose(INOUT file aws_oracle_ext.&quot;utl_file$file_type&quot;)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    DELETE FROM aws$utl_file_files
    WHERE id = file.id;

    IF NOT FOUND THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_filehandle');        

    END IF;

END;
]]></complex-attribute>
                        <category _I_D="b01d3ed2-df4e-4f06-8028-c87c86bfa7d7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="28435697-fb76-42d7-9321-9033e5c30e0a" name="utl_file$fclose_all" subcategories-loading="none" object-loading="extended" context="utl_file$fclose_all" is-trigger-function="0" unique-function-name="utl_file$fclose_all" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305030" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$fclose_all()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    TRUNCATE TABLE aws$utl_file_files;

END;
]]></complex-attribute>
                        <category _I_D="6f151cc4-ce1f-4670-975a-a5b988690148" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="10a658ca-1c49-4efa-8cd3-9c38286b891d" name="utl_file$fcopy" subcategories-loading="none" object-loading="extended" context="utl_file$fcopy" is-trigger-function="0" unique-function-name="utl_file$fcopy" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,integer,integer" is-returning-set="f" ret-datatype="void" function-arguments="src_location text, src_filename text, dest_location text, dest_filename text, start_line integer DEFAULT 1, end_line integer DEFAULT NULL::integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="305028" volatility="VOLATILE" is-window="f" function-identity-arguments="src_location text, src_filename text, dest_location text, dest_filename text, start_line integer, end_line integer" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$fcopy(src_location text, src_filename text, dest_location text, dest_filename text, start_line integer, end_line integer)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vDirectory TEXT;
    vsrcBucket TEXT;
    vdstBucket TEXT;
    vResponse JSON;
    vPayload JSON;
    vErrorMessage TEXT;
    vEXCEPTION TEXT;
BEGIN

    SELECT directory_name,
        s3bucket
    INTO vDirectory,
        vsrcBucket
    FROM aws_oracle_ext.directory
    WHERE directory_name = src_location;

    IF NOT FOUND THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_path');

    END IF;

    IF src_location <> dest_location THEN

        SELECT directory_name,
            s3bucket
        INTO vDirectory,
            vdstBucket
        FROM aws_oracle_ext.directory
        WHERE directory_name = dest_location;

        IF NOT FOUND THEN

            PERFORM aws_oracle_ext.utl_file$exceptions('invalid_path');

        END IF;

    ELSE

        vdstBucket := vsrcBucket;

    END IF;

    vPayload := JSON_BUILD_OBJECT
    (
        'Action', 'FCOPY',
        'srcBucket', vsrcBucket,
        'srcDIRECTORY', src_location,
        'srcFilename', src_filename,
        'dstBucket', vdstBucket,
        'dstDIRECTORY', dest_location,
        'dstFilename', dest_filename
    );

    vResponse := aws_oracle_ext.awslambda_fn
    (
        aws_oracle_ext.get_service_setting
        (
            'UTL_FILE',
            'LAMBDA_ARN' 
        ),
        vPayload
    );
    
    IF vResponse -> 'error' IS NOT NULL THEN

        vEXCEPTION := vResponse -> 'error' ->> 'EXCEPTION';

        IF vEXCEPTION = '-1' THEN

            vErrorMessage := vResponse -> 'error' ->> 'Description';
            RAISE USING MESSAGE = vErrorMessage;

        END IF;

        PERFORM aws_oracle_ext.utl_file$exceptions(vEXCEPTION);

    END IF;

END;
]]></complex-attribute>
                        <category _I_D="b219ddaa-6a58-4ad3-98d5-ef57560f0103" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3be5953e-d2d7-4f96-baa9-60577c3ff684" name="utl_file$fhstorage" subcategories-loading="none" object-loading="extended" context="utl_file$fhstorage" is-trigger-function="0" unique-function-name="utl_file$fhstorage" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="304013" function-type="RET_SCALAR" count-arguments="0" function-id="305020" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$fhstorage()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    CREATE TEMPORARY TABLE IF NOT EXISTS aws$utl_file_files
    (
        id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
        open_mode TEXT NOT NULL,
        directory_name TEXT NOT NULL,
        open_filename TEXT NOT NULL,
        max_linesize SMALLINT NOT NULL,
        fpos BIGINT NOT NULL DEFAULT 0,
        text_contents TEXT,
        CONSTRAINT uk_directory_file UNIQUE(directory_name, open_filename)
    );
END;
]]></complex-attribute>
                        <category _I_D="2196becd-6d8a-4c02-a52b-352d55891bb2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f7a49f99-9719-4043-905b-7e02f7b820d9" name="utl_file$fopen" subcategories-loading="none" object-loading="extended" context="utl_file$fopen" is-trigger-function="0" unique-function-name="utl_file$fopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,integer" is-returning-set="f" ret-datatype="utl_file$file_type" function-arguments="location text, filename text, open_mode text, max_linesize integer DEFAULT NULL::integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="305025" volatility="VOLATILE" is-window="f" function-identity-arguments="location text, filename text, open_mode text, max_linesize integer" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$fopen(location text, filename text, open_mode text, max_linesize integer)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult aws_oracle_ext.utl_file$file_type;
    vDirectory TEXT;
    vBucket TEXT;
    vResponse JSON;
    vPayload JSON;
    vErrorMessage TEXT;
    vEXCEPTION TEXT;
    vmax_linesize INTEGER;
BEGIN

    vmax_linesize := COALESCE(max_linesize, 1024);

    IF vmax_linesize NOT BETWEEN 1 AND 32767 THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_maxlinesize');

    END IF;

    IF ARRAY_POSITION(ARRAY['R', 'W', 'A', 'RB', 'WB', 'AB'], UPPER(open_mode)) IS NULL THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_mode');

    END IF;

    SELECT directory_name,
        s3bucket
    INTO vDirectory,
        vBucket
    FROM aws_oracle_ext.directory
    WHERE directory_name = location;

    IF NOT FOUND THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_path');

    END IF;

    vPayload := JSON_BUILD_OBJECT
    (
        'Action', 'FOPEN',
        'Bucket', vBucket,
        'DIRECTORY', vDirectory,
        'filename', filename,
        'openmode', open_mode
    );

    vResponse := aws_oracle_ext.awslambda_fn
    (
        aws_oracle_ext.get_service_setting
        (
            'UTL_FILE',
            'LAMBDA_ARN' 
        ),
        vPayload
    );
    
    IF vResponse -> 'error' IS NOT NULL THEN

        vEXCEPTION := vResponse -> 'error' ->> 'EXCEPTION';

        IF vEXCEPTION = '-1' THEN

            vErrorMessage := vResponse -> 'error' ->> 'Description';
            RAISE USING MESSAGE = vErrorMessage;

        END IF;

        PERFORM aws_oracle_ext.utl_file$exceptions(vEXCEPTION);

    END IF;

    IF vResponse::TEXT = 'null' THEN
    
        PERFORM aws_oracle_ext.utl_file$fhstorage();

        DELETE FROM aws$utl_file_files
        WHERE directory_name = vDirectory
        AND open_filename = filename;

        INSERT INTO aws$utl_file_files(open_mode, directory_name, open_filename, max_linesize)
        VALUES(LOWER(open_mode), vDirectory, filename, vmax_linesize)
        RETURNING id INTO vResult.id;

        vResult.datatype := 1;
        vResult.byte_mode := CASE WHEN UPPER(open_mode) LIKE '%B' THEN TRUE ELSE FALSE END;

    END IF;
    
    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="57141c06-aa6c-47d6-b407-4d98fccbb954" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6c794b93-e39b-4786-98a3-0b165952bbd4" name="utl_file$fremove" subcategories-loading="none" object-loading="extended" context="utl_file$fremove" is-trigger-function="0" unique-function-name="utl_file$fremove" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="location text, filename text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305027" volatility="VOLATILE" is-window="f" function-identity-arguments="location text, filename text" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$fremove(location text, filename text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vDirectory TEXT;
    vBucket TEXT;
    vResponse JSON;
    vPayload JSON;
    vErrorMessage TEXT;
    vEXCEPTION TEXT;
BEGIN

    SELECT directory_name,
        s3bucket
    INTO vDirectory,
        vBucket
    FROM aws_oracle_ext.directory
    WHERE directory_name = location;

    IF NOT FOUND THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_path');

    END IF;

    vPayload := JSON_BUILD_OBJECT
    (
        'Action', 'FREMOVE',
        'Bucket', vBucket,
        'DIRECTORY', vDirectory,
        'filename', filename
    );

    vResponse := aws_oracle_ext.awslambda_fn
    (
        aws_oracle_ext.get_service_setting
        (
            'UTL_FILE',
            'LAMBDA_ARN' 
        ),
        vPayload
    );
    
    IF vResponse -> 'error' IS NOT NULL THEN

        vEXCEPTION := vResponse -> 'error' ->> 'EXCEPTION';

        IF vEXCEPTION = '-1' THEN

            vErrorMessage := vResponse -> 'error' ->> 'Description';
            RAISE USING MESSAGE = vErrorMessage;

        END IF;

        PERFORM aws_oracle_ext.utl_file$exceptions(vEXCEPTION);

    END IF;
    
END;
]]></complex-attribute>
                        <category _I_D="0f2a19a4-4a72-4d79-b4a1-36f4bc1d1619" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9043a505-586c-47c9-8137-9bd501cec155" name="utl_file$get_line" subcategories-loading="none" object-loading="extended" context="utl_file$get_line" is-trigger-function="0" unique-function-name="utl_file$get_line" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_file$file_type&quot;,text,integer" is-returning-set="f" ret-datatype="text" function-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, OUT buffer text, len integer DEFAULT NULL::integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305029" volatility="VOLATILE" is-window="f" function-identity-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, OUT buffer text, len integer" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$get_line(file aws_oracle_ext.&quot;utl_file$file_type&quot;, OUT buffer text, len integer)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vDirectory TEXT;
    vBucket TEXT;
    vFilename TEXT;
    vOpenMode TEXT;
    vLen INTEGER;
    vOpenLen INTEGER;
    vResponse JSON;
    vPayload JSON;
    vErrorMessage TEXT;
    vEXCEPTION TEXT;
    vPos INTEGER;
    vData TEXT;
    vNl TEXT;
    vNLpos INTEGER;
    vText TEXT;
BEGIN

    SELECT f.open_mode,
        d.directory_name,
        f.open_filename,
        f.max_linesize,
        d.s3bucket,
        f.text_contents,
        f.fpos
    INTO vOpenMode,
        vDirectory,
        vFilename,
        vOpenLen,
        vBucket,
        vText,
        vPos
    FROM aws$utl_file_files f
    JOIN aws_oracle_ext.directory d ON d.directory_name = f.directory_name
    WHERE id = file.id;

    IF NOT FOUND THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_filehandle');

    END IF;

    IF UPPER(vOpenMode) <> 'R' THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_operation');

    END IF;

    IF vText IS NULL THEN

        vPayload := JSON_BUILD_OBJECT
        (
            'Action', 'GET_LINE',
            'Bucket', vBucket,
            'DIRECTORY', vDirectory,
            'filename', vFilename,
            'pos', 0,
            'len', 0
        );

        vResponse := aws_oracle_ext.awslambda_fn
        (
            aws_oracle_ext.get_service_setting
            (
                'UTL_FILE',
                'LAMBDA_ARN' 
            ),
            vPayload
        );
    
        IF vResponse -> 'error' IS NOT NULL THEN

            vEXCEPTION := vResponse -> 'error' ->> 'EXCEPTION';

            IF vEXCEPTION = '-1' THEN

                vErrorMessage := vResponse -> 'error' ->> 'Description';
                RAISE USING MESSAGE = vErrorMessage;

            END IF;

            PERFORM aws_oracle_ext.utl_file$exceptions(vEXCEPTION);

        END IF;

        vData := vResponse ->> 'data';

        vNl := COALESCE
        (
            aws_oracle_ext.get_service_setting
            (
                'UTL_FILE',
                'NEWLINE' 
            ),
            E'\n'
        );

        IF vNl <> E'\n' THEN
            
            vData := REPLACE(vData, vNl, E'\n');

        END IF;
    
        UPDATE aws$utl_file_files
        SET text_contents = vData;

        vText := vData;

    END IF;
    
    vData := SUBSTR(vText, vPos + 1);

    IF LENGTH(vData) = 0 THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('read_error');

    END IF;

    vNLpos := POSITION(E'\n' IN vData);

    IF (vNLpos = 0 AND LENGTH(vData) >= vOpenLen) OR (vNLpos > vOpenLen) THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('read_error');

    END IF;

    vLen := LEAST(len, vOpenLen);
    
    vData := SUBSTR
    (
        vData,
        1,
        CASE
            WHEN vNLpos <> 0 THEN
                LEAST(vLen, vNLpos)
            ELSE
                vLen
        END
    );

    vPos := LENGTH(vData);

    buffer := REPLACE(vData, E'\n', '');

    UPDATE aws$utl_file_files
    SET fpos = fpos + vPos;

END;
]]></complex-attribute>
                        <category _I_D="23d72974-2d08-4ec0-b53e-56d8e5e99bfd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="aca1050b-fa46-4e6f-93ee-f81facfc7f16" name="utl_file$get_raw" subcategories-loading="none" object-loading="extended" context="utl_file$get_raw" is-trigger-function="0" unique-function-name="utl_file$get_raw" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_file$file_type&quot;,bytea,integer" is-returning-set="f" ret-datatype="bytea" function-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, OUT buffer bytea, len integer DEFAULT NULL::integer" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305031" volatility="VOLATILE" is-window="f" function-identity-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, OUT buffer bytea, len integer" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$get_raw(file aws_oracle_ext.&quot;utl_file$file_type&quot;, OUT buffer bytea, len integer)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vDirectory TEXT;
    vBucket TEXT;
    vFilename TEXT;
    vOpenMode TEXT;
    vLen INTEGER;
    vOpenLen INTEGER;
    vResponse JSON;
    vPayload JSON;
    vErrorMessage TEXT;
    vEXCEPTION TEXT;
    vPos BIGINT;
    vData TEXT;
BEGIN

    SELECT f.open_mode,
        d.directory_name,
        f.open_filename,
        f.max_linesize,
        d.s3bucket,
        f.fpos
    INTO vOpenMode,
        vDirectory,
        vFilename,
        vOpenLen,
        vBucket,
        vPos
    FROM aws$utl_file_files f
    JOIN aws_oracle_ext.directory d ON d.directory_name = f.directory_name
    WHERE id = file.id;

    IF NOT FOUND THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_filehandle');

    END IF;

    IF UPPER(vOpenMode) <> 'RB' THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_operation');

    END IF;

    vLen := COALESCE(len, 32767);

    vPayload := JSON_BUILD_OBJECT
    (
        'Action', 'GET_RAW',
        'Bucket', vBucket,
        'DIRECTORY', vDirectory,
        'filename', vFilename,
        'pos', vPos,
        'len', vLen
    );

    vResponse := aws_oracle_ext.awslambda_fn
    (
        aws_oracle_ext.get_service_setting
        (
            'UTL_FILE',
            'LAMBDA_ARN' 
        ),
        vPayload
    );
    
    IF vResponse -> 'error' IS NOT NULL THEN

        vEXCEPTION := vResponse -> 'error' ->> 'EXCEPTION';

        IF vEXCEPTION = '-1' THEN

            vErrorMessage := vResponse -> 'error' ->> 'Description';
            RAISE USING MESSAGE = vErrorMessage;

        END IF;

        PERFORM aws_oracle_ext.utl_file$exceptions(vEXCEPTION);

    END IF;

    SELECT STRING_AGG(UPPER(LPAD(TO_HEX(v::INT), 2, '0')),''),
        COUNT(*)
    INTO vData, vPos
    FROM JSON_ARRAY_ELEMENTS_TEXT(vResponse -> 'data') AS v;

    buffer := DECODE(vData, 'hex');

    UPDATE aws$utl_file_files
    SET fpos = fpos + vPos;

END;
]]></complex-attribute>
                        <category _I_D="2b43a7e9-6be5-4837-8c6f-9c9afce54bd1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d0693f70-7e65-4f80-b184-a821892a6b6b" name="utl_file$is_open" subcategories-loading="none" object-loading="extended" context="utl_file$is_open" is-trigger-function="0" unique-function-name="utl_file$is_open" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_file$file_type&quot;" is-returning-set="f" ret-datatype="bool" function-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="305037" volatility="VOLATILE" is-window="f" function-identity-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$is_open(file aws_oracle_ext.&quot;utl_file$file_type&quot;)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult BOOLEAN DEFAULT FALSE;
BEGIN

    SELECT TRUE
    INTO
    vResult
    FROM aws$utl_file_files
    WHERE id = file.id;

    IF NOT FOUND THEN

        vResult := FALSE;

    END IF;

    RETURN vResult;

EXCEPTION
    WHEN undefined_table THEN
    
        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_filehandle');

END;
]]></complex-attribute>
                        <category _I_D="adaa674a-38f8-4a05-8011-e03fee79cbde" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a08c2dbf-817d-43c0-8614-e0f779801dd6" name="utl_file$new_line" subcategories-loading="none" object-loading="extended" context="utl_file$new_line" is-trigger-function="0" unique-function-name="utl_file$new_line" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_file$file_type&quot;,integer" is-returning-set="f" ret-datatype="void" function-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, lines integer DEFAULT 1" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305035" volatility="VOLATILE" is-window="f" function-identity-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, lines integer" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$new_line(file aws_oracle_ext.&quot;utl_file$file_type&quot;, lines integer)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vNl TEXT;
BEGIN

    vNl := COALESCE
    (
        CASE
            WHEN aws_oracle_ext.get_service_setting
            (
                'UTL_FILE',
                'NEWLINE' 
            ) = '\r\n' THEN
                E'\r\n'
            ELSE
                NULL
        END,
        E'\n'
    );

    vNl := REPEAT(vNl, lines);

    PERFORM aws_oracle_ext.utl_file$put(file, vNl);

END;
]]></complex-attribute>
                        <category _I_D="8af7de6c-14b2-4b53-8b4c-2c29060ad5f2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0ce0606f-5f91-426c-a92f-97fe2fc0f592" name="utl_file$put" subcategories-loading="none" object-loading="extended" context="utl_file$put" is-trigger-function="0" unique-function-name="utl_file$put" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_file$file_type&quot;,text" is-returning-set="f" ret-datatype="void" function-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, buffer text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305032" volatility="VOLATILE" is-window="f" function-identity-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, buffer text" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$put(file aws_oracle_ext.&quot;utl_file$file_type&quot;, buffer text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vDirectory TEXT;
    vBucket TEXT;
    vFilename TEXT;
    vOpenMode TEXT;
    vLen INTEGER;
    vOpenLen INTEGER;
    vResponse JSON;
    vPayload JSON;
    vErrorMessage TEXT;
    vEXCEPTION TEXT;
BEGIN

    SELECT f.open_mode,
        d.directory_name,
        f.open_filename,
        f.max_linesize,
        d.s3bucket
    INTO vOpenMode,
        vDirectory,
        vFilename,
        vOpenLen,
        vBucket
    FROM aws$utl_file_files f
    JOIN aws_oracle_ext.directory d ON d.directory_name = f.directory_name
    WHERE id = file.id;

    IF NOT FOUND THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_filehandle');

    END IF;

    IF NOT (UPPER(vOpenMode) LIKE 'W%' OR UPPER(vOpenMode) LIKE 'A%') THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_operation');

    END IF;

    vPayload := JSON_BUILD_OBJECT
    (
        'Action', 'PUT',
        'Bucket', vBucket,
        'DIRECTORY', vDirectory,
        'filename', vFilename,
        'buffer', SUBSTR(buffer, 1, 32767)
    );

    vResponse := aws_oracle_ext.awslambda_fn
    (
        aws_oracle_ext.get_service_setting
        (
            'UTL_FILE',
            'LAMBDA_ARN' 
        ),
        vPayload
    );
    
    IF vResponse -> 'error' IS NOT NULL THEN

        vEXCEPTION := vResponse -> 'error' ->> 'EXCEPTION';

        IF vEXCEPTION = '-1' THEN

            vErrorMessage := vResponse -> 'error' ->> 'Description';
            RAISE USING MESSAGE = vErrorMessage;

        END IF;

        PERFORM aws_oracle_ext.utl_file$exceptions(vEXCEPTION);

    END IF;

END;
]]></complex-attribute>
                        <category _I_D="7336d7fe-8eeb-47e6-b159-6ef160588686" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="70db3500-235e-4089-99cc-fd22dbd02683" name="utl_file$put_line" subcategories-loading="none" object-loading="extended" context="utl_file$put_line" is-trigger-function="0" unique-function-name="utl_file$put_line" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_file$file_type&quot;,text,boolean" is-returning-set="f" ret-datatype="void" function-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, buffer text, autoflush boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305034" volatility="VOLATILE" is-window="f" function-identity-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, buffer text, autoflush boolean" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$put_line(file aws_oracle_ext.&quot;utl_file$file_type&quot;, buffer text, autoflush boolean)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vNl TEXT;
BEGIN

    vNl := COALESCE
    (
        CASE
            WHEN aws_oracle_ext.get_service_setting
            (
                'UTL_FILE',
                'NEWLINE' 
            ) = '\r\n' THEN
                E'\r\n'
            ELSE
                NULL
        END,
        E'\n'
    );

    PERFORM  aws_oracle_ext.utl_file$put
    (
        $1,
        CONCAT
        (
            $2,
            vNl
        )
    );

END;
]]></complex-attribute>
                        <category _I_D="8dc36f62-ba21-4bc9-acfc-b0b5007ab22c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7b522d54-0d78-4800-a182-5d8f051acee4" name="utl_file$put_raw" subcategories-loading="none" object-loading="extended" context="utl_file$put_raw" is-trigger-function="0" unique-function-name="utl_file$put_raw" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_file$file_type&quot;,bytea,boolean" is-returning-set="f" ret-datatype="void" function-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, buffer bytea, autoflush boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305033" volatility="VOLATILE" is-window="f" function-identity-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, buffer bytea, autoflush boolean" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$put_raw(file aws_oracle_ext.&quot;utl_file$file_type&quot;, buffer bytea, autoflush boolean)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vDirectory TEXT;
    vBucket TEXT;
    vFilename TEXT;
    vOpenMode TEXT;
    vLen INTEGER;
    vOpenLen INTEGER;
    vResponse JSON;
    vPayload JSON;
    vErrorMessage TEXT;
    vEXCEPTION TEXT;
BEGIN

    SELECT f.open_mode,
        d.directory_name,
        f.open_filename,
        f.max_linesize,
        d.s3bucket
    INTO vOpenMode,
        vDirectory,
        vFilename,
        vOpenLen,
        vBucket
    FROM aws$utl_file_files f
    JOIN aws_oracle_ext.directory d ON d.directory_name = f.directory_name
    WHERE id = file.id;

    IF NOT FOUND THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_filehandle');

    END IF;

    IF UPPER(vOpenMode) NOT IN ('WB', 'AB') THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_operation');

    END IF;

    vPayload := JSON_BUILD_OBJECT
    (
        'Action', 'PUT_RAW',
        'Bucket', vBucket,
        'DIRECTORY', vDirectory,
        'filename', vFilename,
        'buffer', ENCODE(buffer, 'hex')
    );

    vResponse := aws_oracle_ext.awslambda_fn
    (
        aws_oracle_ext.get_service_setting
        (
            'UTL_FILE',
            'LAMBDA_ARN' 
        ),
        vPayload
    );

    IF vResponse -> 'error' IS NOT NULL THEN

        vEXCEPTION := vResponse -> 'error' ->> 'EXCEPTION';

        IF vEXCEPTION = '-1' THEN

            vErrorMessage := vResponse -> 'error' ->> 'Description';
            RAISE USING MESSAGE = vErrorMessage;

        END IF;

        PERFORM aws_oracle_ext.utl_file$exceptions(vEXCEPTION);
        
    END IF;

END;
]]></complex-attribute>
                        <category _I_D="e384981c-d9c1-4a6c-89eb-5e6a80bc2000" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e86ae7f9-577f-451a-abea-46a30c79b45c" name="utl_file$putf" subcategories-loading="none" object-loading="extended" context="utl_file$putf" is-trigger-function="0" unique-function-name="utl_file$putf" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_file$file_type&quot;,text,text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, format text, arg1 text DEFAULT NULL::text, arg2 text DEFAULT NULL::text, arg3 text DEFAULT NULL::text, arg4 text DEFAULT NULL::text, arg5 text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="7" function-id="305036" volatility="VOLATILE" is-window="f" function-identity-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, format text, arg1 text, arg2 text, arg3 text, arg4 text, arg5 text" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$putf(file aws_oracle_ext.&quot;utl_file$file_type&quot;, format text, arg1 text, arg2 text, arg3 text, arg4 text, arg5 text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vText TEXT;
    vNl TEXT;
    vAddNewLine BOOLEAN DEFAULT TRUE;
BEGIN

    vNl := COALESCE
    (
        CASE
            WHEN aws_oracle_ext.get_service_setting
            (
                'UTL_FILE',
                'NEWLINE' 
            ) = '\r\n' THEN
                E'\r\n'
            ELSE
                NULL
        END,
        E'\n'
    );

    IF SUBSTR(REVERSE(format), 1, 2) = '\n' THEN

        vAddNewLine := FALSE;
        
    END IF;
    
    vText := REPLACE(format, '\n', vNl);

    vText := format(vText, arg1, arg2, arg3, arg4, arg5);

    IF vAddNewLine THEN

        vText := CONCAT(vText, vNl);

    EnD IF;

    PERFORM aws_oracle_ext.utl_file$put(file, vText);

END;
]]></complex-attribute>
                        <category _I_D="209355ff-6c22-4a3b-88ca-887338a1b1e3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="91790511-4a08-4c20-b9cb-bc3a60328ef5" name="utl_smtp$auth" subcategories-loading="none" object-loading="extended" context="utl_smtp$auth" is-trigger-function="0" unique-function-name="utl_smtp$auth" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;,character varying,character varying,character varying" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, username character varying, password character varying, schemes character varying DEFAULT 'CRAM-MD5'::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="4" function-id="304579" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, username character varying, password character varying, schemes character varying" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$auth(c aws_oracle_ext.&quot;utl_smtp$connection&quot;, username character varying, password character varying, schemes character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare
  l_result aws_oracle_ext.utl_smtp$reply;
begin
  l_result.code := 235;
  l_result.text := 'Authentication successful';
  return l_result;
end;
]]></complex-attribute>
                        <category _I_D="3cb7cf1d-6f3c-49bc-96c9-911540a22930" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e5aa0993-ed40-4f49-87b6-3a63cb28f906" name="utl_smtp$close_connection" subcategories-loading="none" object-loading="extended" context="utl_smtp$close_connection" is-trigger-function="0" unique-function-name="utl_smtp$close_connection" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;" is-returning-set="f" ret-datatype="void" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304580" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$close_connection(c aws_oracle_ext.&quot;utl_smtp$connection&quot;)">
                        <complex-attribute name="sql"><![CDATA[
begin

  drop table if exists utl_smtp$new_message;
  drop table if exists utl_smtp$recipients;
  drop table if exists utl_smtp$connection;

  return;
end;
]]></complex-attribute>
                        <category _I_D="2e932d8f-22ae-4179-9963-dd54fa9ad713" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="61d1dbb1-1176-43b2-a78c-c61c070cde4e" name="utl_smtp$close_data" subcategories-loading="none" object-loading="extended" context="utl_smtp$close_data" is-trigger-function="0" unique-function-name="utl_smtp$close_data" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304581" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$close_data(c aws_oracle_ext.&quot;utl_smtp$connection&quot;)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  l_reply.code := 250;
  l_reply.text := 'Requested mail action okay, completed';

  return l_reply;
end;
]]></complex-attribute>
                        <category _I_D="c9076fa2-c51f-4207-b0fc-c0140ee3fb28" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="eab35592-af56-4228-a28b-10ea06d1c233" name="utl_smtp$data" subcategories-loading="none" object-loading="extended" context="utl_smtp$data" is-trigger-function="0" unique-function-name="utl_smtp$data" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;,character varying" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, body character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304582" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, body character varying" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$data(c aws_oracle_ext.&quot;utl_smtp$connection&quot;, body character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin

  insert into utl_smtp$new_message( msg_body ) values( body );

  l_reply.code := 250;
  l_reply.text := 'Requested mail action okay, completed';

  return l_reply;
end;
]]></complex-attribute>
                        <category _I_D="e50e904b-5d32-4d90-843f-ca3ead68aca9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7b9df18c-18d5-4372-aff8-8ca05f41572b" name="utl_smtp$ehlo" subcategories-loading="none" object-loading="extended" context="utl_smtp$ehlo" is-trigger-function="0" unique-function-name="utl_smtp$ehlo" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;,character varying" is-returning-set="f" ret-datatype="utl_smtp$replies" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, domain character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304583" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, domain character varying" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$ehlo(c aws_oracle_ext.&quot;utl_smtp$connection&quot;, domain character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  l_reply.code := 250;
  l_reply.text := '250-AUTH';
  return ARRAY[ l_reply ]::aws_oracle_ext.utl_smtp$replies;
end;
]]></complex-attribute>
                        <category _I_D="32c490c7-e6ba-4ee7-9b67-330084691309" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="62d4f00d-e15e-4063-92e2-da4db3074a57" name="utl_smtp$helo" subcategories-loading="none" object-loading="extended" context="utl_smtp$helo" is-trigger-function="0" unique-function-name="utl_smtp$helo" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;,character varying" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, domain character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304584" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, domain character varying" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$helo(c aws_oracle_ext.&quot;utl_smtp$connection&quot;, domain character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  l_reply.code := 250;
  l_reply.text := 'Hello ' || domain;
  return l_reply;
end;
]]></complex-attribute>
                        <category _I_D="43b03bb9-dd62-4d52-8088-c9dc7e785cd2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fb325608-86bb-4406-8813-33bd2743f042" name="utl_smtp$mail" subcategories-loading="none" object-loading="extended" context="utl_smtp$mail" is-trigger-function="0" unique-function-name="utl_smtp$mail" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;,character varying,character varying" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, sender character varying, parameters character varying DEFAULT ''::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304585" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, sender character varying, parameters character varying" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$mail(c aws_oracle_ext.&quot;utl_smtp$connection&quot;, sender character varying, parameters character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
  l_sender character varying := sender;
begin
  /* Temporary table to store message parts */
  drop table if exists utl_smtp$new_message;
  create temporary table if not exists utl_smtp$new_message
    ( msg_part serial
    , msg_body text );
  /* Temporary table to store recepients */
  drop table if exists utl_smtp$recipients;
  create temporary table if not exists utl_smtp$recipients
    ( num serial
    , address character varying( 512 ) );

  update tutl_smtp$connection set sender = l_sender;

  l_reply.code := 250;
  l_reply.text := 'Requested mail action okay, completed';
  return l_reply;
end;
]]></complex-attribute>
                        <category _I_D="004f2e18-9207-4496-998a-3f94fd2bf4a7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fe19f0c1-7cfc-4ae0-922b-23c84f1cf0c0" name="utl_smtp$noop" subcategories-loading="none" object-loading="extended" context="utl_smtp$noop" is-trigger-function="0" unique-function-name="utl_smtp$noop" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304586" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$noop(c aws_oracle_ext.&quot;utl_smtp$connection&quot;)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  l_reply.code := 250;
  l_reply.text := 'Requested mail action okay, completed';
  return l_reply;
end;
]]></complex-attribute>
                        <category _I_D="4edb0bc0-aec0-4a81-8415-8c536882a93f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9aca0630-f488-4708-a1d3-7bf8e79ac313" name="utl_smtp$open_connection" subcategories-loading="none" object-loading="extended" context="utl_smtp$open_connection" is-trigger-function="0" unique-function-name="utl_smtp$open_connection" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,double precision,double precision,character varying,character varying,boolean" is-returning-set="f" ret-datatype="utl_smtp$connection" function-arguments="host character varying, port double precision DEFAULT 25, tx_timeout double precision DEFAULT NULL::double precision, wallet_path character varying DEFAULT NULL::character varying, wallet_password character varying DEFAULT NULL::character varying, secure_connection_before_smtp boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="6" function-id="304588" volatility="VOLATILE" is-window="f" function-identity-arguments="host character varying, port double precision, tx_timeout double precision, wallet_path character varying, wallet_password character varying, secure_connection_before_smtp boolean" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$open_connection(host character varying, port double precision, tx_timeout double precision, wallet_path character varying, wallet_password character varying, secure_connection_before_smtp boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
  l_result aws_oracle_ext.utl_smtp$connection;
begin

  drop table if exists tutl_smtp$connection;

  create temporary table if not exists tutl_smtp$connection
    ( conn aws_oracle_ext.utl_smtp$connection
    , sender character varying );

  l_result.host := host;
  l_result.port := port;
  l_result.tx_timeout := tx_timeout;

  insert into tutl_smtp$connection( conn ) values( l_result );

  return l_result;

end;
]]></complex-attribute>
                        <category _I_D="d1906b35-ccbb-43eb-8fb3-9e8879f104cd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c0145cda-0f26-46bf-a93d-c11a840abb61" name="utl_smtp$open_connection2" subcategories-loading="none" object-loading="extended" context="utl_smtp$open_connection2" is-trigger-function="0" unique-function-name="utl_smtp$open_connection2" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,double precision,aws_oracle_ext.&quot;utl_smtp$connection&quot;,double precision,character varying,character varying,boolean" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="host character varying, port double precision DEFAULT 25, c aws_oracle_ext.&quot;utl_smtp$connection&quot; DEFAULT NULL::aws_oracle_ext.&quot;utl_smtp$connection&quot;, tx_timeout double precision DEFAULT NULL::double precision, wallet_path character varying DEFAULT NULL::character varying, wallet_password character varying DEFAULT NULL::character varying, secure_connection_before_smtp boolean DEFAULT false" schema-id="304013" function-type="RET_SCALAR" count-arguments="7" function-id="304587" volatility="VOLATILE" is-window="f" function-identity-arguments="host character varying, port double precision, c aws_oracle_ext.&quot;utl_smtp$connection&quot;, tx_timeout double precision, wallet_path character varying, wallet_password character varying, secure_connection_before_smtp boolean" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$open_connection2(host character varying, port double precision, c aws_oracle_ext.&quot;utl_smtp$connection&quot;, tx_timeout double precision, wallet_path character varying, wallet_password character varying, secure_connection_before_smtp boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
  l_conn aws_oracle_ext.utl_smtp$connection;
  
  l_result aws_oracle_ext.utl_smtp$reply;
begin
  l_conn := aws_oracle_ext.utl_smtp$open_connection
    ( host, port, tx_timeout, wallet_path, wallet_password, secure_connection_before_smtp );

  l_result.code := 220;
  l_result.text := host || ' Service ready.';

  return l_result;
end;
]]></complex-attribute>
                        <category _I_D="55ca31a0-8718-43b2-bd3b-50caa5a7d23c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6d576417-5768-47ff-b9c4-18deb805c806" name="utl_smtp$open_data" subcategories-loading="none" object-loading="extended" context="utl_smtp$open_data" is-trigger-function="0" unique-function-name="utl_smtp$open_data" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304589" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$open_data(c aws_oracle_ext.&quot;utl_smtp$connection&quot;)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  l_reply.code := 354;
  l_reply.text := 'Start mail input end <CRLF>.<CRLF>';

  return l_reply;
end;
]]></complex-attribute>
                        <category _I_D="23ac0bb3-a6f7-4280-8c4e-15ced8d86f55" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="809747dc-185a-4e5a-ae05-c1001de0bba9" name="utl_smtp$quit" subcategories-loading="none" object-loading="extended" context="utl_smtp$quit" is-trigger-function="0" unique-function-name="utl_smtp$quit" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304590" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$quit(c aws_oracle_ext.&quot;utl_smtp$connection&quot;)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE 
    l_response JSON;
    l_reply aws_oracle_ext.utl_smtp$reply;
    l_message TEXT;
    l_sender TEXT;
    vto TEXT[];
    verror TEXT;
BEGIN

    SELECT sender,
        message,
        recipient_list
    INTO strict l_sender,
        l_message,
        vto
    FROM
    (     
        SELECT ct.sender,
        (
            SELECT STRING_AGG(msg_body, '') AS msg_body 
            FROM
            (
                SELECT msg_body
                FROM utl_smtp$new_message
                order by msg_part 
            ) r
        ) AS message,
        (
            SELECT ARRAY_AGG(address)
            FROM utl_smtp$recipients
        ) AS recipient_list
        FROM tutl_smtp$connection ct
       ) x;

    l_response := aws_oracle_ext.awslambda_fn
    (
        aws_oracle_ext.get_service_setting
        (
            'MAIL',
            'LAMBDA_ARN'
        ),
        JSON_BUILD_OBJECT
        (
            'service', 'ses',
            'args', JSON_BUILD_OBJECT
            (
                'Destinations', vto,
                'source', l_sender,
                'rawmessage', JSON_BUILD_OBJECT
                (
                    'Data', l_message
                )
            )
        )
    );

    verror := l_response ->> 'Error';

    IF  COALESCE(verror, '') <> '' THEN

        RAISE EXCEPTION 'Email sending failed: %', verror;

    END IF;

    l_reply.code := 221;
    l_reply.text := 'Service closing transmission channel';
    
    RETURN l_reply;

END;
]]></complex-attribute>
                        <category _I_D="a0f1ece0-af42-4f60-b460-63169650d313" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4bbeaba5-0b80-493f-b4f6-b2dbb9bbd537" name="utl_smtp$rcpt" subcategories-loading="none" object-loading="extended" context="utl_smtp$rcpt" is-trigger-function="0" unique-function-name="utl_smtp$rcpt" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;,character varying,character varying" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, recipient character varying, parameters character varying DEFAULT NULL::character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304591" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, recipient character varying, parameters character varying" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$rcpt(c aws_oracle_ext.&quot;utl_smtp$connection&quot;, recipient character varying, parameters character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin

  insert into utl_smtp$recipients( address ) values( recipient );

  l_reply.code := 250;
  l_reply.text := 'Requested mail action okay, completed';
  return l_reply;
end;
]]></complex-attribute>
                        <category _I_D="320b4484-e63c-48cb-b087-f00618a1e8b0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f140f963-3034-4d58-9711-dec9de49a8dc" name="utl_smtp$rset" subcategories-loading="none" object-loading="extended" context="utl_smtp$rset" is-trigger-function="0" unique-function-name="utl_smtp$rset" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304592" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$rset(c aws_oracle_ext.&quot;utl_smtp$connection&quot;)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin

  delete from utl_mail$recipients;

  delete from utl_mail$new_message;

  l_reply.code := 250;
  l_reply.text := 'Requested mail action okay, completed';
  return l_reply;

end;
]]></complex-attribute>
                        <category _I_D="77052fb5-3a2f-4784-9663-5f7155b999b3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ddfc30e7-1d79-4537-a9f9-5367963fa2b3" name="utl_smtp$starttls" subcategories-loading="none" object-loading="extended" context="utl_smtp$starttls" is-trigger-function="0" unique-function-name="utl_smtp$starttls" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" schema-id="304013" function-type="RET_SCALAR" count-arguments="1" function-id="304593" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$starttls(c aws_oracle_ext.&quot;utl_smtp$connection&quot;)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  l_reply.code := 220;
  l_reply.text := 'Go ahead';
  return l_reply;
end;
]]></complex-attribute>
                        <category _I_D="d34a8b04-9ac1-4cec-857f-7109c20ca497" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="80e1282d-f43f-4293-99f3-1fbd3613d17d" name="utl_smtp$write_data" subcategories-loading="none" object-loading="extended" context="utl_smtp$write_data" is-trigger-function="0" unique-function-name="utl_smtp$write_data" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;,character varying" is-returning-set="f" ret-datatype="void" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, data character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304594" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, data character varying" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$write_data(c aws_oracle_ext.&quot;utl_smtp$connection&quot;, data character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  insert into utl_smtp$new_message( msg_body ) values( data );

  return;
end;
]]></complex-attribute>
                        <category _I_D="353e6a88-964f-4655-8ca5-97566bdbe22e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b8ea0ceb-ad5f-43b1-8f7a-8430578b129b" name="utl_smtp$write_raw_data" subcategories-loading="none" object-loading="extended" context="utl_smtp$write_raw_data" is-trigger-function="0" unique-function-name="utl_smtp$write_raw_data" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;,bytea" is-returning-set="f" ret-datatype="void" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, data bytea" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304595" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, data bytea" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$write_raw_data(c aws_oracle_ext.&quot;utl_smtp$connection&quot;, data bytea)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  insert into utl_smtp$new_message_data( msg_body ) values( data );

  return;
end;
]]></complex-attribute>
                        <category _I_D="65fca3f7-67c1-462d-a9c4-c4f0c98416a7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1513de0e-a86b-4551-a1f3-14fd700b0479" name="utl_url$escape" subcategories-loading="none" object-loading="extended" context="utl_url$escape" is-trigger-function="0" unique-function-name="utl_url$escape" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean,text" is-returning-set="f" ret-datatype="text" function-arguments="p_url text, p_escape_reserved boolean DEFAULT false, p_url_charset text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="304596" volatility="VOLATILE" is-window="f" function-identity-arguments="p_url text, p_escape_reserved boolean, p_url_charset text" overload-function-count="1" proc-language="plpgsql" function-signature="utl_url$escape(p_url text, p_escape_reserved boolean, p_url_charset text)" comment="This function returns a URL with illegal characters (and optionally reserved characters) escaped using the %2-digit-hex-code format.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
   v_err_message TEXT;
   v_encoded_url TEXT;
   v_temp_char VARCHAR;
   v_char_reqexp VARCHAR;
   v_url_charset VARCHAR;
   v_ascii_val INTEGER;
   v_temp_charcode BYTEA;
BEGIN
   /* Requires functions to be installed in "aws_oracle_ext" schema:
      - get_charset_name.
    */

   -- Determining the set of unescapable characters
   v_char_reqexp := CASE
                       WHEN p_escape_reserved THEN '[0-9a-zA-Z\-_.!~*`()]+'
                       ELSE '[0-9a-zA-Z\-_.!~*`();/?:@&=+$,\[\]]+'
                    END;

   -- Determining the charset for character encoding
   v_url_charset := CASE
                       WHEN p_url_charset IS NULL THEN pg_client_encoding()
                       ELSE aws_oracle_ext.get_charset_name(p_url_charset)
                    END;

   -- Iterating over all characters in the string
   FOR i_charpos IN 1..char_length(coalesce(p_url, ''))
   LOOP
      v_temp_char := substr(p_url, i_charpos, 1);

      -- Skipping unescapable characters and convert others
      IF (v_temp_char ~ v_char_reqexp) THEN
         v_encoded_url := concat(v_encoded_url, v_temp_char);
      ELSE
         -- Encoding character to selected charset
         v_temp_charcode := convert_to(v_temp_char, v_url_charset);
         
         -- Casting each character byte to hex and escaping it with "%"
         FOR i_charcode IN 1..octet_length(v_temp_charcode)
         LOOP
            v_temp_char := upper(encode(substring(v_temp_charcode, i_charcode, 1), 'hex'));
            v_encoded_url := concat(v_encoded_url, '%', v_temp_char);
         END LOOP;
      END IF;
   END LOOP;

   RETURN v_encoded_url;
EXCEPTION
   WHEN untranslatable_character THEN
      GET STACKED DIAGNOSTICS v_err_message = MESSAGE_TEXT;

      RAISE USING MESSAGE := format('Failed to encode character "%s" to %s charset (Oracle %s).',
                                    v_temp_char,
                                    upper(v_url_charset),
                                    upper(p_url_charset)),
                  DETAIL := concat(v_err_message, '.'),
                  HINT := format('Try to use another charset (not %s) in order to encode mentioned character (symbol).',
                                 upper(p_url_charset));
END;
]]></complex-attribute>
                        <category _I_D="021c0be3-f87a-492a-9ba4-49f182c391db" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a5f3363c-de9c-40cc-a83d-0b9ecedd57d9" name="utl_url$unescape" subcategories-loading="none" object-loading="extended" context="utl_url$unescape" is-trigger-function="0" unique-function-name="utl_url$unescape" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="p_url text, p_url_charset text DEFAULT NULL::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="304597" volatility="VOLATILE" is-window="f" function-identity-arguments="p_url text, p_url_charset text" overload-function-count="1" proc-language="plpgsql" function-signature="utl_url$unescape(p_url text, p_url_charset text)" comment="This function unescapes the escape character sequences to its original form in a URL, to convert the %XX escape character sequences to the original characters.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
   v_err_message TEXT;
   v_char_code TEXT;
   v_char_byte BYTEA;
   v_url_charset VARCHAR;
   v_decoded_url BYTEA := '';
BEGIN
   /* Requires functions to be installed in "aws_oracle_ext" schema:
      - get_charset_name.
    */

   -- Determining the charset for character decoding
   v_url_charset := CASE
                       WHEN p_url_charset IS NULL THEN pg_client_encoding()
                       ELSE aws_oracle_ext.get_charset_name(p_url_charset)
                    END;

   -- Iterating over all significant characters in the string
   FOR v_char_code IN
   (SELECT unnest(regexp_matches(p_url, '(%..|.)', 'g')) url_char)
   LOOP
      -- Unescaping "%XX" characters
      v_char_byte := CASE
                        WHEN v_char_code !~ '%' THEN v_char_code::BYTEA
                        ELSE decode(substring(v_char_code, 2, 2), 'hex')
                     END;

      -- Concatenating into resulting byte string
      v_decoded_url := v_decoded_url || v_char_byte;
   END LOOP;

   RETURN convert_from(v_decoded_url, v_url_charset);
EXCEPTION
   WHEN character_not_in_repertoire THEN
      GET STACKED DIAGNOSTICS v_err_message = MESSAGE_TEXT;

      RAISE USING MESSAGE := format('Failed to decode url byte string "%s" to %s charset (Oracle %s).',
                                    v_decoded_url::TEXT,
                                    upper(v_url_charset),
                                    upper(p_url_charset)),
                  DETAIL := concat(v_err_message, '.'),
                  HINT := format('Try to use another charset (not %s) or correct initial url string.',
                                 upper(p_url_charset));
END;
]]></complex-attribute>
                        <category _I_D="f1dbdb5c-69db-43ec-91e2-32a9d2cee859" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ff81f4e5-5b3f-4f63-9cfa-11e92400b0e5" name="within_distance" subcategories-loading="none" object-loading="extended" context="within_distance" is-trigger-function="0" unique-function-name="within_distance" is-aggregate="f" language-name="plpgsql" arguments-datatypes="geometry,numeric,geometry,numeric,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="ip_geom1 geometry, ip_dist numeric, ip_geom2 geometry, ip_tol numeric, ip_units character varying" schema-id="304013" function-type="RET_SCALAR" count-arguments="5" function-id="304598" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ip_geom1 geometry, ip_dist numeric, ip_geom2 geometry, ip_tol numeric, ip_units character varying" overload-function-count="1" proc-language="plpgsql" function-signature="within_distance(ip_geom1 geometry, ip_dist numeric, ip_geom2 geometry, ip_tol numeric, ip_units character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_dist  FLOAT;
    v_res   VARCHAR := 'FALSE';
    BEGIN
      v_dist := st_distance(ip_geom1, ip_geom2);
      if abs(v_dist - ip_dist) < ip_tol 
        then v_res := 'TRUE'; 
      end if; 
 RETURN v_res;
END;
]]></complex-attribute>
                        <category _I_D="573ec625-9399-40cc-84b9-c1c4b33f8c95" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d31909fd-66a1-45e6-b3d0-7c3d707bad3f" name="wrap_refcursor" subcategories-loading="none" object-loading="extended" context="wrap_refcursor" is-trigger-function="0" unique-function-name="wrap_refcursor" is-aggregate="f" language-name="plpgsql" arguments-datatypes="refcursor,refcursor" is-returning-set="f" ret-datatype="refcursor" function-arguments="refcursor, INOUT refcursor" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305251" volatility="VOLATILE" is-window="f" function-identity-arguments="refcursor, INOUT refcursor" overload-function-count="1" proc-language="plpgsql" function-signature="wrap_refcursor(refcursor, INOUT refcursor)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vstmt TEXT;
BEGIN
    
	vstmt := $1;

	SELECT pc.statement 
	INTO vstmt
	FROM pg_cursors pc
	WHERE pc.name = vstmt;

	OPEN $2 FOR EXECUTE vstmt;

	CLOSE $1;
    
END;
]]></complex-attribute>
                        <category _I_D="4beca7e0-da1a-46f4-948a-135475f135bd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d5a4b91f-e468-4da6-afa2-54a26c53835c" name="xmltype$tojson" subcategories-loading="none" object-loading="extended" context="xmltype$tojson" is-trigger-function="0" unique-function-name="xmltype$tojson" is-aggregate="f" language-name="plpgsql" arguments-datatypes="xml,json" is-returning-set="f" ret-datatype="json" function-arguments="pxml xml, ptargetjobj json" schema-id="304013" function-type="RET_SCALAR" count-arguments="2" function-id="305160" volatility="STABLE" is-window="f" function-identity-arguments="pxml xml, ptargetjobj json" overload-function-count="1" proc-language="plpgsql" function-signature="xmltype$tojson(pxml xml, ptargetjobj json)">
                        <complex-attribute name="sql"><![CDATA[
declare
    ILIMIT constant integer := 1024;
    PDELIMETER constant varchar(1) := '/';
    PROOT constant varchar(2) := '//';
    XVALUE constant varchar(7) := '/text()';
    XSCHEMA constant varchar(3) := 'xsi';
    XURI constant varchar(41) := 'http://www.w3.org/2001/XMLSchema-instance';

    mainData aws_oracle_ext.xmltype$txml2json[];
    dummyData aws_oracle_ext.xmltype$txml2json[];
    lnMx int;
    lnMn int;
begin

	if pXML is null or pTargetJObj is null then
	    raise exception 'XMLTYPE.Null Exception.' using hint = '29532';
	end if;

	with recursive rStructure (iNum, rNum, pNum, recFullKey, recKey, recValue, recValType)
	               as (select 0 as iNum,
		                      row_number() over () as rNum,
		                      0::bigint as pNum,
		                      t.key as recFullKey,
		                      t.key as recKey,
		                      t.value as recValue,
		                      json_typeof(t.value) as recValType
		                 from json_each(pTargetJObj) t
		                union all
		               select r.iNum + 1 as iNum,
		                       row_number() over () as rNum,
		                       r.rNum as pNum,
		                       r.recFullKey||PDELIMETER||t.key as recFullKey,
		                       t.key as recKey,
		                       t.value as recValue,
		                       json_typeof(t.value) as recValType
		                  from rStructure r left join json_each(r.recValue) t on r.recValue is not null
		                 where r.recValType = json_typeof(pTargetJObj)
		                   and r.iNum < ILIMIT
		               ),
				   rMatchData (iNum, rNum, pNum, recFullKey, recKey, recValue, recValType)
				   as (select r.iNum as iNum,
			              	  r.rNum as rNum,
			              	  r.pNum as pNum,
			              	  r.recFullKey as recFullKey,
			              	  r.recKey as recKey,
			              	  to_json(case when r.recValType != json_typeof(pTargetJObj) then
								              coalesce((xpath(PROOT||r.recFullKey||XVALUE, pXML, array[array[XSCHEMA, XURI]]))[1]::text,
								                       (xpath(PROOT||r.recFullKey, pXML, array[array[XSCHEMA, XURI]]))[1]::text
						                     		  )
					                       else null end
					                  ) as recValue,
			                  r.recValType as recValType
			             from rStructure r
			            where r.recFullKey is not null
			          )
    select array_agg(row(d.iNum, d.rNum, d.pNum, d.recKey, d.recValue)::aws_oracle_ext.xmltype$txml2json)
      into mainData
      from rMatchData d;

    select max(iNum), min(iNum)
      into lnMx, lnMn
      from unnest(mainData);

    select array_agg(row(d.iNum, null, d.pNum, null, d.recValue)::aws_oracle_ext.xmltype$txml2json)
      into dummyData
      from (select d1.iNum, d1.pNum, json_object_agg(d1.recKey, d1.recValue) recValue
              from unnest(mainData) d1
             where d1.iNum = lnMx
             group by d1.iNum, d1.pNum
           ) d;

    for i in reverse lnMx -1 .. lnMn loop
		 select array_agg(row(d.iNum, null, d.pNum, null, d.recValue)::aws_oracle_ext.xmltype$txml2json)
		   into dummyData
		   from (select d1.iNum, d1.pNum, json_object_agg(d1.recKey, coalesce(d1.recValue, g1.recValue)) recValue
				   from unnest(mainData) d1 left join unnest(dummyData) g1 on d1.iNum = g1.iNum -1 and d1.rNum = g1.pNum
				  where d1.iNum = i
				  group by d1.iNum, d1.pNum
		        ) d;
	end loop;

    return dummyData[1].recValue;
end; ]]></complex-attribute>
                        <category _I_D="9f13f0ab-d47f-411b-9c70-10cc260fe8ac" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                </category>
                <category _I_D="5ba1839c-c525-4feb-92c4-9b36d885b2a0" name="Trigger functions" order-num="9" objects-loading="empty" subcategories-loading="full" child-type="function"/>
                <category _I_D="109a4cec-7774-4eda-b93e-931f03bcfdb5" name="Procedures" order-num="10" objects-loading="extended" subcategories-loading="none" child-type="procedure">
                    <procedure _I_D="f6a39502-7264-43f1-acb6-cc59849f50aa" name="raise_ai_exception" arguments-datatypes="integer,text,text" subcategories-loading="none" object-loading="extended" context="raise_ai_exception" is-trigger-function="0" unique-function-name="raise_ai_exception" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" function-arguments="p_ai_code integer, p_message text, p_severity text DEFAULT 'CRITICAL'::text" schema-id="304013" function-type="RET_SCALAR" count-arguments="3" function-id="305349" volatility="VOLATILE" is-window="f" function-identity-arguments="p_ai_code integer, p_message text, p_severity text" overload-function-count="1" proc-language="plpgsql" function-signature="raise_ai_exception(p_ai_code integer, p_message text, p_severity text)">
                        <complex-attribute name="sql"><![CDATA[ 
declare
  l_stack text;
  l_object text;
  l_line integer;
begin
 get diagnostics l_stack = pg_context;
 
  select line[1], line[2]
    into l_object, l_line
    from regexp_matches(l_stack,'PL/pgSQL function (.*?)line (.*?) ', 'g') as stack_lines(line)
   limit 1 offset 1;
  
  if l_object is null then
  select line[1], line[2]
    into l_object, l_line
    from regexp_matches( l_stack, 'SQL function (\S+) statement (\d+)', 'g') as stack_lines(line)
    limit 1;
  end if;
  raise exception 
    using message = format('%I at line %s, AI %s [%s]: %s', l_object, l_line, p_ai_code, p_severity, p_message);
end;
]]></complex-attribute>
                        <category _I_D="ab88c21c-a9c4-4977-b03b-638688cd6205" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </procedure>
                </category>
                <category _I_D="d28bad0a-fed4-45b5-8bd6-8c9b186f8947" name="Sequences" order-num="11" objects-loading="extended" subcategories-loading="full" child-type="sequence">
                    <sequence _I_D="4c86409e-6d85-4095-bfa1-b2a6b05b6814" name="charset_mapping_id_seq" context="charset_mapping_id_seq" subcategories-loading="full" object-loading="extended" data-type="bigint" start-value="1" minimum-value="1" maximum-value="9223372036854775807" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL" last-value="230" cache-value="1"/>
                    <sequence _I_D="a61ae7c2-92c0-4fdc-9f31-c7c434acce44" name="jobs_job_seq" context="jobs_job_seq" subcategories-loading="full" object-loading="extended" data-type="bigint" start-value="1" minimum-value="1" maximum-value="9223372036854775807" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL" cache-value="1"/>
                    <sequence _I_D="6b8bdfa1-7ea3-44cc-9218-4caf67834a13" name="mail_messages_id_seq" context="mail_messages_id_seq" subcategories-loading="full" object-loading="extended" data-type="bigint" start-value="1" minimum-value="1" maximum-value="9223372036854775807" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL" cache-value="1"/>
                    <sequence _I_D="fc45f49f-7f37-4cbc-a8e5-3cbfd7042482" name="sqs_queues_tables_id_seq" context="sqs_queues_tables_id_seq" subcategories-loading="full" object-loading="extended" data-type="integer" start-value="1" minimum-value="1" maximum-value="2147483647" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL" cache-value="1"/>
                </category>
                <category _I_D="53d68ec5-f209-47c9-83a3-3263930a4061" name="User defined types" order-num="12" objects-loading="extended" subcategories-loading="none" child-type="type">
                    <type _I_D="94b80502-2827-4bb9-927f-0d2072c609fa" name="dbms_aq$dequeue_options_t" subcategories-loading="none" object-loading="extended" context="dbms_aq$dequeue_options_t" udt-type="STRUCTURED">
                        <category _I_D="e4ac6819-4664-42b7-b91b-90f7e0d31295" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="045dffa5-25e8-4aee-8de3-a756a045d402" name="dbms_aq$enqueue_options_t" subcategories-loading="none" object-loading="extended" context="dbms_aq$enqueue_options_t" udt-type="STRUCTURED">
                        <category _I_D="7a531a4c-efa4-4036-a870-34b48590186c" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="9d36d855-1adf-416d-9e7d-939e99e3bbd0" name="dbms_aq$message_properties_t" subcategories-loading="none" object-loading="extended" context="dbms_aq$message_properties_t" udt-type="STRUCTURED">
                        <category _I_D="9948e6fa-5c87-4452-bf45-fd98a3dc8b4a" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="a94eb1c9-a574-4b7a-bc34-e532daf45682" name="dbms_xmlgen$tcontext" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$tcontext" udt-type="STRUCTURED">
                        <category _I_D="f241fd83-d7d1-4e1e-afc1-0002bc871488" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="6e0b805c-96c0-40e5-a0c5-c2c7e4d5217e" name="dbms_xmlgen$tctxattributes" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$tctxattributes" udt-type="STRUCTURED">
                        <category _I_D="cd53739d-bfc5-4049-ab51-4e382212599c" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="1240bc69-b136-4f13-a30d-1c9060bb3172" name="dbms_xmlquery$tcontext" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$tcontext" udt-type="STRUCTURED">
                        <category _I_D="8ac36e36-2396-4cb4-9bf3-7347125373fb" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="519aa48e-045e-4ef5-a9e8-91b89b545dae" name="dbms_xmlquery$tctxattributes" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$tctxattributes" udt-type="STRUCTURED">
                        <category _I_D="3b267640-2778-42ef-9d49-f8c54162fff7" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="92d4e333-6f12-48b1-bcff-810d08c2aef6" name="dbms_xmlquery$tctxdictionary" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$tctxdictionary" udt-type="STRUCTURED">
                        <category _I_D="9afc6e45-c60c-4efb-a34e-5b6e61574984" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="3932f0bc-ca7f-4150-b6fd-56deddd3fd6d" name="nls_param" subcategories-loading="none" object-loading="extended" context="nls_param" udt-type="STRUCTURED">
                        <category _I_D="66743411-60f8-4ac8-a342-0e4e63a3b3ed" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="3696bf4b-4b9c-4f9c-b0dd-06bbae3431c2" name="sql$bulk_exceptions" subcategories-loading="none" object-loading="extended" context="sql$bulk_exceptions" udt-type="STRUCTURED">
                        <category _I_D="233646a1-0bb6-4f1b-8294-53d4ceafaac2" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="374858cd-7386-4c4f-b305-4527586fd41f" name="sqs_aq$_agent" subcategories-loading="none" object-loading="extended" context="sqs_aq$_agent" udt-type="STRUCTURED">
                        <category _I_D="cf84cb3c-c7d9-4c24-a870-0c4bf662561d" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="c7c0fbf2-4f79-435f-b127-ffe5995455de" name="sqs_aq$_sig_prop" subcategories-loading="none" object-loading="extended" context="sqs_aq$_sig_prop" udt-type="STRUCTURED">
                        <category _I_D="111bf9c5-9147-4f1e-9346-5413970bbe9a" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="7e401598-4ff7-4e00-a870-6ffeaf1003f6" name="sqs_queue_record" subcategories-loading="none" object-loading="extended" context="sqs_queue_record" udt-type="STRUCTURED">
                        <category _I_D="00b619ef-f07a-4235-80bf-8d5e76fb97c9" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="5c5bb6ab-8d4a-4adb-a3e1-171a0a1fb252" name="utl_file$file_type" subcategories-loading="none" object-loading="extended" context="utl_file$file_type" udt-type="STRUCTURED">
                        <category _I_D="6d2dcffb-7ba9-4d1a-bb69-fd03dc39f247" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="ca902068-1209-4a3a-a2e0-05aebe1ff65f" name="utl_smtp$connection" subcategories-loading="none" object-loading="extended" context="utl_smtp$connection" udt-type="STRUCTURED">
                        <category _I_D="aa4f8b92-e8e6-41f3-84a1-b376004f2272" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="035cf5a3-e340-4fdb-913e-ef7cd7aca785" name="utl_smtp$reply" subcategories-loading="none" object-loading="extended" context="utl_smtp$reply" udt-type="STRUCTURED">
                        <category _I_D="fa6e08fb-0f1e-4231-8174-e6862cce1c4a" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="af3b0bd1-f259-4795-9609-08ef66f4f542" name="xmltype$txml2json" subcategories-loading="none" object-loading="extended" context="xmltype$txml2json" udt-type="STRUCTURED">
                        <category _I_D="437b6e74-4f5e-4551-a482-d63546d2db6e" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                </category>
                <category _I_D="b61aba69-f7b6-4caa-81a8-68d69bbd2209" name="Domains" order-num="13" objects-loading="extended" subcategories-loading="none" child-type="domain">
                    <domain _I_D="3c798a32-abe2-4835-b49b-56a697d3a557" domain-schema="aws_oracle_ext" name="ora_exception" data-type="character varying" character-maximum-length="92" dt-name="character varying" dt-attr-1="92" is-nullable="N" context="ora_exception" subcategories-loading="none" object-loading="extended">
                        <category _I_D="1a43f1aa-4344-4bbd-a333-b696c1de85b4" name="Constraints" order-num="0" objects-loading="none" subcategories-loading="none" child-type="constraint"/>
                    </domain>
                    <domain _I_D="43f263bc-a60c-4127-b939-a5bf60a762ac" domain-schema="aws_oracle_ext" name="utl_smtp$replies" data-type="aws_oracle_ext.&quot;utl_smtp$reply&quot;[]" dt-name="aws_oracle_ext.&quot;utl_smtp$reply&quot;[]" is-nullable="Y" context="utl_smtp$replies" subcategories-loading="none" object-loading="extended" element-type="USER-DEFINED">
                        <category _I_D="07b1ccab-533d-44e7-a5c7-4122b9e0a768" name="Constraints" order-num="0" objects-loading="none" subcategories-loading="none" child-type="constraint"/>
                    </domain>
                </category>
                <category _I_D="0d43a46b-a35e-4413-b8c6-ddc366c0e3ae" name="Materialized Views" order-num="14" objects-loading="empty" subcategories-loading="full" child-type="materialized-view"/>
                <category _I_D="ab578a09-014b-4556-848f-fe7be7f2bf53" name="Aggregates" order-num="15" objects-loading="empty" subcategories-loading="full" child-type="aggregate"/>
            </schema>
            <schema _I_D="57dd236e-4cac-4418-9a06-e15c2228b558" name="aws_postgis" context="aws_postgis" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="49bc181f-1663-44c7-a227-0758a773c3a0" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="50165184-dd38-4a18-82a0-828175bb1db9" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="36967b24-04f3-4bdd-85a6-5bf059f0b61d" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="90a823d6-57b2-43f7-a67c-2c7e734d8984" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="38f8a749-72aa-4748-88d1-dc12b498c1b9" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="0c876f93-a51c-43c2-8a66-fb7de2e5c2e3" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="fba4ae97-eca3-4a14-85bf-9e111594af2c" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="0d2c2fd6-8be4-4429-b4d0-f0034a4f1f6b" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="e5d8218e-ef57-4627-857e-1383cf50d9e2" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="b70280e5-ff9e-4d0b-8871-dcc80ed0e479" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="2cd22489-97ae-4651-845e-e31efecbad99" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="ff2b0da2-7b8d-4401-800f-a41d60c90d2c" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="96352fe6-8c87-4f68-9831-05c326352492" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="83e340b8-5ca1-4f89-83ed-8bbe787e1e29" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="4c2d0ede-d137-42a9-b574-e8a5323ce3a0" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="f38ab2b4-03d7-43aa-91f4-8529b6ced5cd" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="fd28a0bd-c2d9-4da9-b9c0-2f936cdaadbd" name="camd" context="camd" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="378a70af-cc87-41eb-a482-eca94e776713" name="Tables" order-num="0" objects-loading="main" subcategories-loading="none" child-type="table">
                    <table _I_D="3a595b76-194c-4c58-8932-bca247793ee8" name="generator" context="generator" subcategories-loading="none" object-loading="main">
                        <category _I_D="46599d3e-3222-44b2-ad9d-73087a4fee2f" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="22901da7-30e5-462e-a9b6-28cdab201c61" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1b3d42a1-562a-40de-8d35-1033c71ceeac" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d424a8a0-ed7c-4759-a297-d1cb0fdf6b87" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="5"/>
                        <category _I_D="9f793f38-08d9-40b9-bc47-cc8bc245c5e4" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="a1da201c-2bb8-4c24-873d-83266eff100b" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="0e43c5a4-49b3-4c07-bf8c-eb2894eec948" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="9b4850db-2437-40a4-90a9-763e3acc6e40" name="plant" context="plant" subcategories-loading="none" object-loading="main">
                        <category _I_D="e0bba8ab-cf6d-4ca8-91b1-969e5be06d9e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e79caeb0-d940-4ee3-a5ff-d24883460ebe" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5f04480b-3867-4298-9536-1e8def1d468f" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ae5fbace-3383-40bc-97ec-31eaee8d3a3e" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="9"/>
                        <category _I_D="cae7efaa-59d1-4922-907e-f5bea3427c5c" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="7"/>
                        <category _I_D="166da344-9e9c-480a-87b1-b2101078e0e3" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="698137d0-7995-4ef1-a291-81c016811d86" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="0e8c0849-2ae7-4e3b-86d5-91f944de4ed7" name="program" context="program" subcategories-loading="none" object-loading="main">
                        <category _I_D="0951e0b5-fc45-4dc3-a2b2-8c5c5f380ad3" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f145ef5e-977c-4576-a284-a90762b72fe2" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="88b909b1-f3a0-4dfc-9731-58862bcd0ccc" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5dd7c425-0cf2-403f-89b0-89ff225aa08f" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="5"/>
                        <category _I_D="ebf9f27b-890c-4406-a23f-3017a354a499" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="73628df7-6be1-4c61-b1c7-f4d96cf7a1d7" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="9eb1a434-c2ab-4797-b190-393133bc5b66" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="d748ab45-ee4b-4036-a373-efc7492f8132" name="unit" context="unit" subcategories-loading="none" object-loading="main">
                        <category _I_D="43b30bf9-94b8-4b4c-b741-f1ac8394b4a2" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ad68647b-079b-4a6b-be99-04e71dbf21f3" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9b9b938a-26c7-440c-b310-95e20435253b" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f9c8099f-267e-432b-9c3f-8f07e394fbfc" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="5"/>
                        <category _I_D="e7d8aba8-0c03-4320-b68a-a09364fd55ee" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="091b6ad2-b610-4d22-b147-21e267535885" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="366ea235-0bf3-45e2-bd4c-da86743e502a" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="584c4f5f-931b-49a4-b778-396db518513e" name="unit_boiler_type" context="unit_boiler_type" subcategories-loading="none" object-loading="main">
                        <category _I_D="a52bde9c-b162-41c2-b471-b51ee1c0d4e7" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8a09e15a-90c8-4f93-bd15-144f8dfbcd9d" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0b0a9b41-e792-4a1d-b1b7-df586bd4c03f" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="33aa81b6-a0f7-4d1b-b698-1ad97448ccce" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="7ada6045-27e3-41ec-bcd6-a7dd3237792c" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="688b3040-d49e-473c-8752-186264522379" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="194a0d73-7c01-457e-843b-fc3d4d6d7225" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="166e0d40-cb3d-451f-ad93-31b274e2071f" name="unit_exemption" context="unit_exemption" subcategories-loading="none" object-loading="main">
                        <category _I_D="762cca9d-b336-47ef-99a7-5be97dcf1437" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3dc4b29c-86e6-45c5-9ca3-3ec319850525" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="74ec223a-da8a-4f09-9e8a-ea2547763d9b" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fb029bc4-019b-407a-bac4-26777ab63db2" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="2d7e9b2c-4927-4055-8032-45dfa92b1c65" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="870cf0f1-b7d5-4f1e-ab5c-0c0b159094bf" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="0dda3a8c-68c6-41d4-b7e1-0ea8d7ccbbf9" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="5e23d5c1-3bd4-4601-9d06-d87e04db7165" name="unit_generator" context="unit_generator" subcategories-loading="none" object-loading="main">
                        <category _I_D="b8d1e33b-4331-4d3d-9bb0-d186407365eb" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e9845cb5-bb07-47e5-bfad-8a3da59be25e" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d0324d96-a417-4039-ac0b-cbf678949fdc" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="96ebae14-64e5-4fb3-bcc0-35320a70e077" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="29f03d23-99b3-4ad5-a27a-2fbde3ef30d9" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="6dfa3210-aa37-4392-9a9a-883a0924b8ce" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="0c46f131-be9e-4486-966d-8b0de7470e9b" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="187b573b-b7b8-4b08-b3bc-55c9ea15ea22" name="unit_op_status" context="unit_op_status" subcategories-loading="none" object-loading="main">
                        <category _I_D="4210d1a7-48cb-4706-b3b1-9fd8a1c134ed" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7cfa1348-32e6-40b5-935d-4f4a48e5e0c3" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="175826c2-cc88-4c1b-85ee-b5fb9ed3301d" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="930d3ebc-96d8-4bff-b9af-e907ce846970" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="43d5d5b0-7e6a-4f46-9aed-6b9479859520" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="ecccd163-a263-40d1-abc1-22099c4542d7" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="4d35729e-ae17-40e1-affa-9585a68af523" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="2b96498e-59dd-4644-9f03-a9e627ace216" name="unit_program" context="unit_program" subcategories-loading="none" object-loading="main">
                        <category _I_D="0e0cc526-a0ce-4ac0-9b52-d4ab0e31e6e7" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ebddaee6-d733-4076-a827-e34e361f27c1" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2809172c-0199-4f8d-bb5e-721746b1f240" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b17cd21b-44c4-490f-8ed3-378df2768b86" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="7"/>
                        <category _I_D="8326bd17-cad9-4671-ba89-43c78bfb7139" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="7"/>
                        <category _I_D="288d6b11-94c2-40ee-9ad3-116b43503dc1" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="52d353de-86cc-441a-bcac-a9eced76a870" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                </category>
                <category _I_D="cf6941da-58bf-4a09-a15b-012a17ac6bc6" name="Foreign tables" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="foreigntable"/>
                <category _I_D="1f1d18d4-3e9f-4263-864b-908c623eea23" name="Views" order-num="2" objects-loading="empty" subcategories-loading="full" child-type="view"/>
                <category _I_D="75c3cc78-f6a7-4440-b85e-284e20e77b52" name="Collations" order-num="3" objects-loading="empty" subcategories-loading="full" child-type="collation"/>
                <category _I_D="55d21333-b783-445f-a1f6-d7b58f0772b0" name="Operators" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="operator"/>
                <category _I_D="172c65a5-b5fa-4fa1-88c7-866c829cf47a" name="Rules" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="rule"/>
                <category _I_D="2fbeb8a1-b1be-4aa5-a9e6-38a7883adc90" name="FTS Configurations" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="ftsconfiguration"/>
                <category _I_D="266ad3e8-97a0-424e-9001-3e5d413ac2d5" name="FTS Dictionaries" order-num="7" objects-loading="empty" subcategories-loading="full" child-type="ftsdictionary"/>
                <category _I_D="6e655e74-8112-49a5-ac26-a2b83f4a337b" name="Functions" order-num="8" objects-loading="empty" subcategories-loading="full" child-type="function"/>
                <category _I_D="0db00b47-29dc-4648-bd70-e7e8e80f89ff" name="Trigger functions" order-num="9" objects-loading="empty" subcategories-loading="full" child-type="function"/>
                <category _I_D="08c9934d-f6b9-4fc3-b6cc-b750e32e21f8" name="Procedures" order-num="10" objects-loading="empty" subcategories-loading="full" child-type="procedure"/>
                <category _I_D="882a066d-b8ff-4588-acd0-d45b349997a8" name="Sequences" order-num="11" objects-loading="empty" subcategories-loading="full" child-type="sequence"/>
                <category _I_D="e9f8eb15-a6c7-409a-ad7d-5f3f365feeda" name="User defined types" order-num="12" objects-loading="empty" subcategories-loading="full" child-type="type"/>
                <category _I_D="754b91b6-c3cb-441b-aa3a-81c68ae4710d" name="Domains" order-num="13" objects-loading="empty" subcategories-loading="full" child-type="domain"/>
                <category _I_D="59f71e07-f19c-4748-9cc5-1bc32c4d9994" name="Materialized Views" order-num="14" objects-loading="empty" subcategories-loading="full" child-type="materialized-view"/>
                <category _I_D="84f538e2-fbe9-48a6-94e8-b2b614b6c7d8" name="Aggregates" order-num="15" objects-loading="empty" subcategories-loading="full" child-type="aggregate"/>
            </schema>
            <schema _I_D="7ee1862d-3640-4549-989b-587f6e4c6878" name="camdaux" context="camdaux" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="62f8010c-f30c-4b8c-a4ae-38ea1caee2e4" name="Tables" order-num="0" objects-loading="main" subcategories-loading="none" child-type="table">
                    <table _I_D="54fbcbd3-6920-4e89-b924-ce4df803f9ad" name="api" context="api" subcategories-loading="none" object-loading="main">
                        <category _I_D="ee68a7a8-cbd5-4b41-97e1-85b1e87e364e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="93af3dad-de4d-4518-91f8-c6b8bf10f7bf" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ed06822c-733d-4076-8f92-f4f20eceef91" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1fafd99c-cb74-4dcc-bafe-cbe25b17bd2c" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="85737d06-ccd1-4bf6-af02-f15bbca5b39f" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="fb32f510-4f0d-4217-aa2d-4187431a9090" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="d4b3de23-9d12-4382-bed7-c241d6507021" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="19e3c534-115d-466f-98be-a6e93e9c4744" name="bulk_file_log" context="bulk_file_log" subcategories-loading="none" object-loading="main">
                        <category _I_D="49018b2d-089c-4566-a850-ecc8cb03e5f8" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6bb3e634-25b7-4752-8592-aaa0e7a70eca" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2225a390-571e-4c4a-ad52-9831044c55a2" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3150212c-93c9-4a8f-81ce-0e71c0697359" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="6"/>
                        <category _I_D="e178f653-174d-4c33-a9a3-87269200f18e" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="6"/>
                        <category _I_D="61d14513-2d25-4042-a1f0-7febfe27a28a" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="b8664a95-7d8e-40f8-a3f5-ef226751c900" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="afe7cf38-6cd7-4662-a591-ab62d429aee2" name="cors" context="cors" subcategories-loading="none" object-loading="main">
                        <category _I_D="1cd7c158-cbbb-4612-8cb8-5426e8071763" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b66fc973-672a-46b8-8584-b4837d150bd6" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="992dc3af-69a7-4de6-a300-e15bc9fdc9e7" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ad19e0a9-e18e-40fd-835c-d0da41574af4" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="e4934c4a-1d39-42d6-a0f5-76d5d31389ec" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="10ff045d-e0ef-4e06-b53a-5ad030dba541" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e9287fc0-e4be-4f07-bb30-1d2a561147b5" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="9706ce3f-56a6-4c72-a466-ab5be6cf18d7" name="cors_to_api" context="cors_to_api" subcategories-loading="none" object-loading="main">
                        <category _I_D="bb311fc8-00f8-446f-bffd-143e2cc8f5da" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="222cdb95-e1a0-4859-8c95-091edafb2ad5" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e28eb3a4-f4f1-4800-bc14-64dc1987c837" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="83cd1d82-264e-48d3-8cc2-30a1670f3dcf" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="cb303d1a-e2d9-4866-8138-abf573317ebb" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="7486c0e3-0b29-4b89-9756-a4bef0cb04c8" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="baccdef7-376f-4ea7-af97-3babd84782db" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="017de622-e154-46f1-89a1-a081b7174187" name="job_log" context="job_log" subcategories-loading="none" object-loading="main">
                        <category _I_D="53793972-9af7-4fa8-93eb-55dc76a71e1b" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="974d7c83-c72b-4b1e-ae46-c20d54041e0e" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="153eb5b8-e972-42ee-afec-ef469dcc67ff" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9585761d-e3e0-45a9-a370-8fcfb3d4b62d" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="2740fd40-15b3-4265-a4cb-e6b69f9df0d9" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="4"/>
                        <category _I_D="0146fd4c-e207-4463-ac5d-2be451ae3058" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="f8e1fe29-e5c2-4f46-9842-eeb8e96f58c9" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="09d5ac8f-1b20-4a8d-8d5f-9b14a76241ff" name="qrtz_blob_triggers" context="qrtz_blob_triggers" subcategories-loading="none" object-loading="main">
                        <category _I_D="672998fb-da74-46ce-8b98-05b9ac60c030" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3265357e-2dbc-4183-bd5c-a2aa2a9f0fc2" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="74ebcbd9-8c6a-4e73-bf11-8e63eb057252" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c1f812d8-0cbb-4f1b-aa2a-601443bf8043" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="53134714-a9cf-49bf-9ed3-78a05c413c2d" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="0fbb622c-572b-4c38-aed5-d26358f99706" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="4daa3a6a-692e-4f3b-9ea8-9ad6f27d7cc8" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="17136677-9664-454d-8ea6-2f094209181e" name="qrtz_calendars" context="qrtz_calendars" subcategories-loading="none" object-loading="main">
                        <category _I_D="bff72266-a16d-4bfa-bdc2-a1c346fb3adf" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5f73056b-0458-49fe-bbe7-d4f64167e2f2" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ad83f4b2-00d7-4f3b-bc8e-0b5b541a719d" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="14f7c546-161c-40b0-8468-422dc7d54873" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="2515c116-ceb8-46d4-8eb0-68f36ca60239" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="160ee181-7e80-4fe7-b14e-f7d2cf89f61b" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="b1c382d5-2cec-418d-ae3f-4a318467e3ec" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="e5befb2e-08b5-412c-b996-5046bd5eed2d" name="qrtz_cron_triggers" context="qrtz_cron_triggers" subcategories-loading="none" object-loading="main">
                        <category _I_D="72b0a058-40cd-40b4-a352-1f457faeca3c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3b2759c9-b94f-4f73-b0d0-1bf1e488149a" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b6b51022-64b6-4f41-a06a-9c3ba0030419" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8b837ed7-785f-42f6-8c4b-06dd520bcb4c" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="3f996cc8-2664-43b9-b073-16e8fb389713" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="67e20071-a33b-40a8-8c3c-c261ecd48bc4" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="6f0ccb45-6ef8-42a2-ab53-8a81851925cb" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="107b6d00-d836-4055-b104-9db7d4296f98" name="qrtz_fired_triggers" context="qrtz_fired_triggers" subcategories-loading="none" object-loading="main">
                        <category _I_D="a392c694-5f9d-414a-aad4-e99936efd6ac" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ad3642d0-ec05-4a86-b191-8d33a0e2a70c" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="dfd3a245-51ea-4456-aae1-7606c5a5533d" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="13a42211-e06e-49c9-a821-dee069af9454" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="7502dc46-9018-479b-8935-a639fd4356b2" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="7"/>
                        <category _I_D="4993e3e3-8a00-473b-868e-9e56d6cf97cc" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="abf06636-44e0-4194-81a3-b8f06cf71546" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="c56fc75c-7bba-4d31-8ad1-d897f9682325" name="qrtz_job_details" context="qrtz_job_details" subcategories-loading="none" object-loading="main">
                        <category _I_D="129f7c4d-6c9b-47b0-81a5-009c4c23c562" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ec246b5b-03c9-489a-9be5-79b1e69da004" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="56f0beec-4890-49fe-82f0-86ffd28092de" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1e0d8231-2b22-43b2-ac79-41fd2b078b44" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="7fcf08a2-7f47-434c-bf23-0ddeca40db1e" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="8b4e98af-9f5a-4c98-b006-d296f0687e35" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="531d6ece-46a2-4d06-8d80-6e542f8a834a" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="be9dcb04-e31e-4b03-98ab-442f161f09db" name="qrtz_locks" context="qrtz_locks" subcategories-loading="none" object-loading="main">
                        <category _I_D="0931fc0a-222f-4544-a6c2-e84a1447e4f7" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f6f53bfc-4262-440c-91ac-27ab818221b9" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8f3cc007-2690-4585-9e13-7a3b3467acbf" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1c6d0bec-98f7-4d7c-ae4d-121b76424809" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="b9db473f-ec5d-4800-99db-bd1d95f18030" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="3f938c2a-c14d-41ae-b26f-b0d063c44463" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="5c26ee3d-814c-4c7d-8c4f-a3e7e67115bf" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="4fdc1533-681f-4d94-9c44-1df664708629" name="qrtz_paused_trigger_grps" context="qrtz_paused_trigger_grps" subcategories-loading="none" object-loading="main">
                        <category _I_D="83beb275-c555-478b-8d16-85298530f124" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3e352ceb-36d8-4060-b5c6-c46847fd2ac4" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="080521e1-0547-40c1-b79b-dfb80f98cf82" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4081b991-fc3e-415c-9172-87212d43dd35" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="16b3651c-2a89-4f64-a9a2-0f560060e0c0" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="730690a5-e898-4e51-a0b8-71fd4e9e20c5" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="7dbbc66c-9f59-4900-8fd6-bf369f80f6b2" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="3ac98685-24a3-4361-af9a-696c68dacf2e" name="qrtz_scheduler_state" context="qrtz_scheduler_state" subcategories-loading="none" object-loading="main">
                        <category _I_D="f13b5537-dcb0-4e29-91c8-bbfade31f875" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bff82e4a-46b9-4c71-bcac-d8560399a5d2" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e3196687-8a63-403e-b52b-2642117c05ad" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d3675d68-9ff8-4c40-8552-6432d7b4162a" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="ceae2dc9-aa60-4983-8b1d-d64b69c45fc2" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="8db3499a-36ce-4fc7-9c4e-e01e17aa1012" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="90d19489-c3c6-4aa8-8f98-de91014732b4" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="e9975def-3cca-4ce2-9ea8-f70223066e15" name="qrtz_simple_triggers" context="qrtz_simple_triggers" subcategories-loading="none" object-loading="main">
                        <category _I_D="d80bb96b-f8f7-44c0-aed0-7814fd0c5a5c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="64c76ea9-532e-435e-a4e3-b4fc46a8a445" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d9a3b719-b50e-42f8-926d-4319c303ba47" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a7f4dafe-cb0a-49b7-a1b6-1b1082852807" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="2cd5fc41-08e0-4293-8a8e-edc363a1c2de" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="0dda5c59-6625-4c2f-add6-a1d833a817d3" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="de0b9572-5c84-4520-aedf-ff35b6fa7a74" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="5c57dedb-9d19-4bdd-86b0-4bfd749ab501" name="qrtz_simprop_triggers" context="qrtz_simprop_triggers" subcategories-loading="none" object-loading="main">
                        <category _I_D="37aaaff1-ab48-4a59-bccd-c649e509cce5" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="937b6699-26ed-4db0-8922-9f206174fc33" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5547f80f-2479-4d9c-94ce-99433bb09c62" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a7f59751-37ac-41a7-813b-fb699a10492a" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="e3ba77aa-9aff-4177-aa7a-a418fcf119d0" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="b444cd4b-2019-4c3b-add9-8da5ea841b64" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="47336c8b-cd9d-4691-baf3-bf26ea2dd6db" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="fefcda2d-0765-455a-8080-8eae66d8d355" name="qrtz_triggers" context="qrtz_triggers" subcategories-loading="none" object-loading="main">
                        <category _I_D="7b6e6d5b-a5b8-4a98-b9f5-dcea3f6efab0" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c580eb4d-585a-428c-8d47-99b432467b99" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7f919eb1-9f37-43e9-abd3-a8280a6584a1" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="44f6f994-65e3-46d6-a145-e33448300826" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="a959dfbc-6b8b-44b5-8438-9266c98bc235" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="4a71cc44-fe53-4a47-8fa1-88b9a5527613" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e4c851dc-ae86-42c3-b4f7-9d4f9fa5fd18" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                </category>
                <category _I_D="b0e9f081-2471-42f9-9e6b-241c62ac560e" name="Foreign tables" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="foreigntable"/>
                <category _I_D="8773779d-1dd6-4937-add6-939a35fb2c5c" name="Views" order-num="2" objects-loading="main" subcategories-loading="none" child-type="view">
                    <view _I_D="55b8b2f9-a0a0-4337-873b-9e1d96cd82f3" name="vw_allowance_based_compliance_bulk_files_to_generate" context="vw_allowance_based_compliance_bulk_files_to_generate" subcategories-loading="none" object-loading="main">
                        <category _I_D="da3efeb4-7a3a-49ce-a5dc-fbcbb705b87b" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e9ab887f-2643-40a2-a38a-6971dd1e2e6e" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="3ef10276-be8e-4e55-b875-3c5bd314d611" name="vw_allowance_transactions_bulk_files_to_generate" context="vw_allowance_transactions_bulk_files_to_generate" subcategories-loading="none" object-loading="main">
                        <category _I_D="eb1f4528-3d0d-4351-93d5-5e2d31c3d075" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="556393d0-39c8-4512-af10-688ee4aec7a1" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="a3223631-3555-42ed-8f29-3082c9a06cb6" name="vw_annual_emissions_bulk_files_per_quarter_to_generate" context="vw_annual_emissions_bulk_files_per_quarter_to_generate" subcategories-loading="none" object-loading="main">
                        <category _I_D="90cd8ab5-b54a-40b1-bc6e-2191475aa30a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ec0d8809-f3a4-48f8-9985-95d7793a690f" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="df30ac84-81bf-4e17-a062-3c5545be6dfc" name="vw_annual_emissions_bulk_files_per_state_to_generate" context="vw_annual_emissions_bulk_files_per_state_to_generate" subcategories-loading="none" object-loading="main">
                        <category _I_D="9567797a-a513-4705-bf75-316875b2c967" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="54084e5f-1c80-4067-9cd7-3b313a82c9b9" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="723b874d-86e8-407c-b9f9-3f8981d371b6" name="vw_annual_facility_bulk_files_to_generate" context="vw_annual_facility_bulk_files_to_generate" subcategories-loading="none" object-loading="main">
                        <category _I_D="f782dbd1-edb7-4b2b-b107-8bacb5086d19" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="45bd1679-02c6-48db-9317-6cf5df8691c2" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="5f042b04-17bc-455b-bc83-1d1fc6972139" name="vw_bulk_file_jobs_to_delete" context="vw_bulk_file_jobs_to_delete" subcategories-loading="none" object-loading="main">
                        <category _I_D="a4154150-d037-4a67-a2ae-2c2de47b7aa4" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="59db6802-68e5-48ec-bfbc-f017fc794b41" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="dfeffaed-47b9-4b49-a49f-639a78c6c8e6" name="vw_bulk_file_jobs_to_process" context="vw_bulk_file_jobs_to_process" subcategories-loading="none" object-loading="main">
                        <category _I_D="0e29c4f7-3029-473b-bf20-5f30a5de1f0d" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bf1d9a88-a95e-41d7-8aaa-bef4e480aebe" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="61d2ddd7-942e-40f2-a85d-5aaa36b12070" name="vw_emissions_based_compliance_bulk_files_to_generate" context="vw_emissions_based_compliance_bulk_files_to_generate" subcategories-loading="none" object-loading="main">
                        <category _I_D="d51f2e97-4713-48cb-9aa6-99a0276da9f7" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0d28362b-b45a-470a-b0b9-bdee2c7c1b8d" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                </category>
                <category _I_D="9190fb60-5043-4c4f-b1f6-d401e699fd96" name="Collations" order-num="3" objects-loading="empty" subcategories-loading="full" child-type="collation"/>
                <category _I_D="b564bd4f-e331-459c-b3d2-94c9fae03054" name="Operators" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="operator"/>
                <category _I_D="8c1e7534-e001-4c44-bfdd-58147e5ad8de" name="Rules" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="rule"/>
                <category _I_D="64a93afb-4f04-4b0e-8c5e-f63cc2634543" name="FTS Configurations" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="ftsconfiguration"/>
                <category _I_D="d903417b-4690-491c-9d20-caf422f0727a" name="FTS Dictionaries" order-num="7" objects-loading="empty" subcategories-loading="full" child-type="ftsdictionary"/>
                <category _I_D="7ec2b203-8cfb-42e2-b5b0-71b23a36e3e4" name="Functions" order-num="8" objects-loading="empty" subcategories-loading="full" child-type="function"/>
                <category _I_D="3bbfe3ca-cf97-4c55-9da1-21b8e8ba547b" name="Trigger functions" order-num="9" objects-loading="empty" subcategories-loading="full" child-type="function"/>
                <category _I_D="1f0b4ac7-4d48-47c8-baf9-d374e958e18c" name="Procedures" order-num="10" objects-loading="main" subcategories-loading="none" child-type="procedure">
                    <procedure _I_D="4deb5503-89b1-4840-a958-83d04e10546d" name="procedure_set_dm_emissions_user" subcategories-loading="none" object-loading="main" context="procedure_set_dm_emissions_user" is-trigger-function="0" unique-function-name="procedure_set_dm_emissions_user" is-aggregate="f" language-name="sql">
                        <category _I_D="c91be568-5241-4abf-a46c-cd555d6bfba7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </procedure>
                </category>
                <category _I_D="35a8b785-2f09-4771-afd6-8d93c7e280de" name="Sequences" order-num="11" objects-loading="main" subcategories-loading="full" child-type="sequence">
                    <sequence _I_D="1862cccd-9218-4769-a008-3aa8cd80d7c7" name="api_api_id_seq" context="api_api_id_seq" subcategories-loading="full" object-loading="main" data-type="integer" start-value="1" minimum-value="1" maximum-value="2147483647" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL" last-value="7"/>
                    <sequence _I_D="21cb17f9-d2c3-415a-b06b-825d6621c07d" name="cors_cors_id_seq" context="cors_cors_id_seq" subcategories-loading="full" object-loading="main" data-type="integer" start-value="1" minimum-value="1" maximum-value="2147483647" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL" last-value="22"/>
                </category>
                <category _I_D="3b85009b-0c32-43b7-9e54-406433ae2625" name="User defined types" order-num="12" objects-loading="empty" subcategories-loading="full" child-type="type"/>
                <category _I_D="901e6d70-4440-4d6c-b61c-d4a816479a6f" name="Domains" order-num="13" objects-loading="empty" subcategories-loading="full" child-type="domain"/>
                <category _I_D="9a774e05-a302-477a-b898-e497d5711936" name="Materialized Views" order-num="14" objects-loading="empty" subcategories-loading="full" child-type="materialized-view"/>
                <category _I_D="d608a59a-317e-4b03-b57c-0d170e2977a6" name="Aggregates" order-num="15" objects-loading="empty" subcategories-loading="full" child-type="aggregate"/>
            </schema>
            <schema _I_D="88679c48-85c6-416c-8f47-4e7ead2a05ca" name="camddmw" context="camddmw" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="83a55751-b58b-46c9-92e1-8b4bf4f63ced" name="Tables" order-num="0" objects-loading="main" subcategories-loading="none" child-type="table">
                    <table _I_D="e69ed4cd-76b9-4be0-a13d-e884a4a4f30e" name="account_compliance_dim" context="account_compliance_dim" subcategories-loading="none" object-loading="main">
                        <category _I_D="b75f1a7a-280b-459c-b3d5-2052c0c70492" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0f029fbb-4531-45b2-94cc-870af6c8a180" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6e48026e-dc20-49b5-bb58-78a49dce2d98" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="dd116046-9505-49fb-8433-4866dc6ac6d9" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="2598f278-2ad2-4929-833a-034989f5df52" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="c18a66f0-9c71-441f-8245-4bb6ce6f301c" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="82c4167a-0f92-4af7-8e57-61d4b4b35ffe" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="cb625437-391a-49c2-b131-8c10af88cbe6" name="account_fact" context="account_fact" subcategories-loading="none" object-loading="main">
                        <category _I_D="2b70f30b-74a1-4f52-931c-1e5c3584340c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1434a26b-b106-4a23-958f-74be84a6de1b" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7248a491-1eaa-4a32-b9d5-f0fd4fa3d43e" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4e3f5a03-6d47-4876-9dc0-4a731b6148dc" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="b6795628-12f9-4aef-b342-ff4b110ff01f" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="6"/>
                        <category _I_D="a1b61222-895b-4dc5-9074-e5ef2fb50c7d" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="590d49f3-9906-487a-9601-41c5654c5254" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="58eaf9d0-2d62-4b29-96aa-d0f633d88244" name="account_owner_dim" context="account_owner_dim" subcategories-loading="none" object-loading="main">
                        <category _I_D="dce6bdb5-e3bf-4d38-a00c-9f54756f9530" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b717216f-68f1-40e8-8ecc-d92dcdd3ced6" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="832f3542-f795-426f-9e56-6ebfe2fa4fd5" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="79cb029a-9bc0-4db4-a200-84e75570bc71" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="5d91af71-e1cd-4b9d-9644-4a9d24d048cf" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="5d71f13f-a30a-4e4f-86ee-ee871db54720" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="32699c31-8e6f-471c-a215-0becea2ce77e" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="edaa56a2-be35-4c00-b3e6-75e00d0f8b87" name="allowance_holding_dim" context="allowance_holding_dim" subcategories-loading="none" object-loading="main">
                        <category _I_D="3bb88387-e515-458c-b52e-f66beeeced18" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6beca85b-98e6-4da9-b62a-32543bdd9f3d" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="85b7c52b-9a01-4a0c-99e3-3da29569c7dc" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="293b6d41-224b-41d8-a0bb-9876ad016021" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="e57dcff2-aa02-4dfd-9f0e-32983bf8acc1" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="764a4eff-b6f0-40ca-8f53-3704009efb17" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="3c62a369-bf15-4148-a8ec-4f4bef54a8fc" name="Partitions" order-num="6" objects-loading="none" subcategories-loading="none" child-type="partition" mdl-expected-node-count="66"/>
                    </table>
                    <table _I_D="5e9e36a8-90a7-4d18-8dae-c31b2baf67b3" name="annual_unit_data" context="annual_unit_data" subcategories-loading="none" object-loading="main">
                        <category _I_D="b7a94b54-adf9-4f8a-96ae-ef82eb0546d1" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0b173f28-ac79-48a7-bb76-3cc534d7ef65" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="080723ac-2127-45a9-bd57-06fdc3627781" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="108d8fa2-a94d-4ff4-b320-e013a38583e4" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="e0213c2f-6d45-4ef1-b032-5be34f85ad53" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="60650d7f-356a-49a7-8043-09dfbec268ab" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="34ef564c-6d49-42d8-b41c-1ced4a3d5b5c" name="Partitions" order-num="6" objects-loading="none" subcategories-loading="none" child-type="partition" mdl-expected-node-count="5"/>
                    </table>
                    <table _I_D="3bb666d4-823d-48c2-aac9-59fdb4033c54" name="control_year_dim" context="control_year_dim" subcategories-loading="none" object-loading="main">
                        <category _I_D="0fe5c778-2b98-48e8-a983-59d735f49446" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="185839d5-b4d3-498e-9828-38f91e26c76e" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="39f20465-66e2-4460-a60a-65ab372bd8c2" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b0923ed4-6108-42a8-ba00-9b41c94562ee" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="9c08e18f-d8f8-45d5-b343-a1ccd81cb6b5" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="fc7f28c0-9057-4264-b0fd-2268d1772ac3" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="8e6f1958-233f-41be-bb05-59755b7de898" name="Partitions" order-num="6" objects-loading="none" subcategories-loading="none" child-type="partition" mdl-expected-node-count="43"/>
                    </table>
                    <table _I_D="ee0d2139-d3fc-4937-a5a6-330964759292" name="day_unit_data" context="day_unit_data" subcategories-loading="none" object-loading="main">
                        <category _I_D="085743c3-040b-4259-aa8b-81878771fea1" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f162c838-f59e-4027-a25a-991c02e1a4e6" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b6b9b7af-4988-45e0-ac43-a78d2f5604d9" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5a048461-c1ff-48f1-a065-fde861542fbe" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="48675009-1d04-4c96-857f-434e8eed64dd" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="37590b73-34eb-486f-b2d5-5c4ad849291a" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="f4900354-1863-4743-887f-f53d21faf954" name="Partitions" order-num="6" objects-loading="none" subcategories-loading="none" child-type="partition" mdl-expected-node-count="262"/>
                    </table>
                    <table _I_D="deebabba-4355-4f81-8713-aef0f25bb8f0" name="fuel_year_dim" context="fuel_year_dim" subcategories-loading="none" object-loading="main">
                        <category _I_D="cd5b3b9d-a288-488c-b3c2-5809990e864a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9cbbd941-6aef-42ea-b281-5a5e6f0888f2" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="47542269-bc9e-4923-b09f-5d9459d7e533" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e42c6f86-daf6-4d68-be07-3cc887c380bc" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="ee742938-0961-4cb7-a003-6097cb8155f2" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="a385adfe-9c57-499d-95e2-72c0249a80c3" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="4b4664c6-46e0-46af-aa1b-2a33d0b48d24" name="Partitions" order-num="6" objects-loading="none" subcategories-loading="none" child-type="partition" mdl-expected-node-count="28"/>
                    </table>
                    <table _I_D="05ae9051-856d-44f9-8380-2c4d22486c5d" name="hour_unit_data" context="hour_unit_data" subcategories-loading="none" object-loading="main">
                        <category _I_D="d7dd686c-b2fd-4374-81c3-4237cfa95ea9" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e48bfd76-2965-43c8-8316-4ef0e9935903" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ecfd1b22-7886-4c16-863b-cdb24dea13d8" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f1d0e7c3-2bd5-4288-ab8f-6b75384bf1ed" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="e5b4b6fe-954c-4422-ad54-91ccd0096eb2" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="2252b26b-f52a-4bf0-b7a0-a3d1e43d4b5f" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="3ee17c8d-9a23-4b3a-b058-b1d58a7a30c4" name="Partitions" order-num="6" objects-loading="none" subcategories-loading="none" child-type="partition" mdl-expected-node-count="262"/>
                    </table>
                    <table _I_D="681cae94-9bbc-45d0-85c3-8340c1337401" name="hour_unit_data_log" context="hour_unit_data_log" subcategories-loading="none" object-loading="main">
                        <category _I_D="588d01bd-b1e8-446c-a959-6c4a0152b2ad" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cf8a47b0-62fd-4b36-8243-9ee1a8434771" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b3907639-2782-4ed4-b3ea-b9e2dbaaef10" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2ce2051b-b16d-40e4-9360-9af80b3b59a7" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="707602fa-3aee-4603-a4ab-fba7f5ef51ca" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="6"/>
                        <category _I_D="fd7298f2-dda0-4972-bff7-619e279a82e5" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="da7f3e52-0015-445d-aadf-a37dfb4702c7" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="b0b5defe-b47b-4135-b92c-6e460f75b12b" name="hour_unit_mats_data" context="hour_unit_mats_data" subcategories-loading="none" object-loading="main">
                        <category _I_D="1fbd73b2-fedd-46db-9821-738c3e3adb54" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7ef4840f-9e4b-4cc4-8729-95ddafb9ecfa" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="718aab8e-1d2a-404d-9c4b-29742b0eef71" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6587c100-8315-4b07-99a1-c756a885fec2" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="9cf3de2e-263a-48a1-b50f-5d35e5e13f73" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="3b5c8ca7-8e08-45de-abf0-a04fe8f78181" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="71f7ab49-192c-4d41-a035-355d6052d311" name="Partitions" order-num="6" objects-loading="none" subcategories-loading="none" child-type="partition" mdl-expected-node-count="313"/>
                    </table>
                    <table _I_D="ebbc9493-ab0c-414d-b962-0dd4680547c8" name="hour_unit_mats_data_log" context="hour_unit_mats_data_log" subcategories-loading="none" object-loading="main">
                        <category _I_D="ca947312-5eac-4a2d-83e8-36e21d383f82" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e2a2cb9e-a84d-442b-b0e3-ab9a0f677cda" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6ad0b5a3-a47e-4daf-8ebd-d79d0b1a8550" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b5b1caa9-da89-4d19-a672-d31ccec6f505" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="9f8a11fc-e25f-49e9-aa5c-9d39e8a6a767" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="6"/>
                        <category _I_D="6fce59c6-63fd-422e-a15a-070e22a7feb3" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="3babeb43-4151-40d9-bbc1-6409069c49b8" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="2a2117e0-945d-4189-9169-c4710f6692cc" name="month_unit_data" context="month_unit_data" subcategories-loading="none" object-loading="main">
                        <category _I_D="07419a80-a0d0-4494-9afd-a8af84136bb7" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2e43ea9e-8449-47a2-a3b9-c352808411e7" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="52f651db-20e1-407e-9e59-ae59d9fc2082" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0b0cb0c2-d649-4b85-96c3-e57805ff6819" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="2e7b3128-6230-4c30-b9ab-5912ffc6d1ff" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="3f2ce3d1-2b8e-48f3-8872-3affa420d0af" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="7504cdd3-13d3-4016-9bb2-f45eb9b162f9" name="Partitions" order-num="6" objects-loading="none" subcategories-loading="none" child-type="partition" mdl-expected-node-count="60"/>
                    </table>
                    <table _I_D="f2a294dc-663d-4d3a-8b91-7c9b7f7defd6" name="owner_display_fact" context="owner_display_fact" subcategories-loading="none" object-loading="main">
                        <category _I_D="6e6a0c3d-488a-4161-a9c3-732fd5af5b8b" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8afd5c43-1801-4810-b992-71ffbdd0a9af" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1e7f36a7-bc22-4383-87a9-806d0dbcf5ee" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="19ea1e9a-6c62-48e9-9e80-0bc30a1308fd" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="db3a98b0-e71b-4d0e-b6e5-07048baa3a7b" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="b182c021-7473-42f3-a4e1-b34b7e80a3d1" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="7e6c58ac-fff3-498b-a260-7bbc972fd154" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="99ce3908-382e-42f7-b631-e643c8a97361" name="owner_year_dim" context="owner_year_dim" subcategories-loading="none" object-loading="main">
                        <category _I_D="94cea435-2e56-4512-a9d7-4e63e5f71190" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="29766536-9cef-4cd2-b05e-e50eab62bcc9" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9d34f9dc-a70c-40b3-95ea-32c312648d13" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0ced0594-4b6d-4871-8c4d-cea8a538644b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="5bd7ef69-e6d9-4c25-b6e1-7023b7c7c018" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="c81cb8da-247f-43b8-9e85-f763965f3b2a" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="f8725404-8d06-4c27-b36d-2c1471ae3b71" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="a35d7c6b-a9de-4bd8-a275-a1ac52438b33" name="ozone_unit_data" context="ozone_unit_data" subcategories-loading="none" object-loading="main">
                        <category _I_D="39a9d871-947f-4f7e-928a-124223f437de" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c30b572a-c9db-4544-8e30-784994b71b8c" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="78036d2e-cb4f-471d-afad-5889208111c0" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="98b8584d-f266-496c-8b3b-5dcd864001b0" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="eedb5002-b3dd-4804-96e0-f6fc4b002f85" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="492ffcef-b183-482f-bc5d-091a604e4452" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="a6c839ad-ad64-473c-9389-53730623206d" name="Partitions" order-num="6" objects-loading="none" subcategories-loading="none" child-type="partition" mdl-expected-node-count="5"/>
                    </table>
                    <table _I_D="449f32db-3a57-4cbd-85cc-ecce0dc2f62e" name="program_year_dim" context="program_year_dim" subcategories-loading="none" object-loading="main">
                        <category _I_D="4c6885fb-2acb-41b9-bc64-bdba12d26961" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7ab0bb99-7931-4763-87da-c929472c371c" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f4bae9d1-772d-451a-ac34-b0d153404a51" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2eb77c64-2bc2-435f-aa35-908f70982194" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="20f9e8f9-a3e0-4f45-865b-a86c53ea2a91" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="7b744156-8532-44b0-a988-522bb43661fc" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="cb558194-473e-4019-b6f0-0dbfe202d047" name="Partitions" order-num="6" objects-loading="none" subcategories-loading="none" child-type="partition" mdl-expected-node-count="43"/>
                    </table>
                    <table _I_D="3025691e-830e-409c-a1f4-a3be304ce559" name="quarter_unit_data" context="quarter_unit_data" subcategories-loading="none" object-loading="main">
                        <category _I_D="7371c1db-eb82-4020-b77b-3d0a46c27aa0" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b1ba2f90-c6fe-4e70-a3cb-81a9275ebff7" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1886db9a-294a-418d-96da-aa566f73f377" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1a37f58b-dae5-4d4e-a55a-26ff1a96a9ee" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="8c4357c4-556b-4a49-9158-b23fb5e4441b" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="131ff91d-a77b-4c6d-a3f7-c5e9cd17e901" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="4f7de6ef-a656-4798-ab77-406ac16a266f" name="Partitions" order-num="6" objects-loading="none" subcategories-loading="none" child-type="partition" mdl-expected-node-count="20"/>
                    </table>
                    <table _I_D="ad253e95-8582-48c3-83bd-24b5fe3d02a0" name="transaction_block_dim" context="transaction_block_dim" subcategories-loading="none" object-loading="main">
                        <category _I_D="5a7e2fc5-3d2f-4c69-8c25-b4519f2a3369" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f8e54d33-9f72-4bed-8ec3-6526c56fc1c4" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0d3c7c38-5ce9-470b-af53-04662f31845d" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="baf5aa1b-b51a-4094-9a8c-d9855cd61b61" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="5"/>
                        <category _I_D="12d124bb-bc6e-4ade-b8bf-5075a0a45f5a" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="9a018f2f-8325-4d89-9e55-bb41760f97cc" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="447a7d94-b575-469b-a18d-a31181daeff1" name="Partitions" order-num="6" objects-loading="none" subcategories-loading="none" child-type="partition" mdl-expected-node-count="3"/>
                    </table>
                    <table _I_D="f9d85d3d-2b92-4ef2-8a12-ccd0fd2cd2ec" name="transaction_fact" context="transaction_fact" subcategories-loading="none" object-loading="main">
                        <category _I_D="7bdde54e-1871-4fee-a65b-2e93ef546491" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="728dff4d-3113-4e79-b01e-2c5300c0e004" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="34cfac9d-1df0-4c19-85a6-c6a22f098492" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="dddf8d23-dfe3-405b-9a2a-df178820b441" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="acbbf51a-d539-4ead-808f-c5106a98cae9" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="4"/>
                        <category _I_D="8ae277fa-0cd2-4904-af85-fa5439e76e68" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="7fa2209f-dfc9-47d6-9356-356d16753040" name="Partitions" order-num="6" objects-loading="none" subcategories-loading="none" child-type="partition" mdl-expected-node-count="3"/>
                    </table>
                    <table _I_D="ba381ce3-fbe3-4677-80bf-a9ad03b39365" name="transaction_owner_dim" context="transaction_owner_dim" subcategories-loading="none" object-loading="main">
                        <category _I_D="94fb2991-bf1d-41b8-95f4-baca3f310285" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4157583e-f8c7-4e68-8d6c-3086056e112b" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="66ab1573-df39-46b3-94b3-e9862e086932" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="737d8f60-e630-4c3c-b545-937181751f3a" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="bfb291cd-aa3c-4cd3-8e90-1e4b68ae3f9d" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="e0f12fab-9420-4090-8d07-272116e9f8bf" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="a45be679-1715-4839-b61d-0715c7917350" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="a1a5e187-270c-434e-9966-b63139f23543" name="unit_compliance_dim" context="unit_compliance_dim" subcategories-loading="none" object-loading="main">
                        <category _I_D="401ed4ca-c0a1-416b-a4dc-69328c1c20cf" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1596ca5f-e632-4af9-a165-d1e0f8289f20" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4c7ce349-e31b-4814-87b3-1d20d6c20856" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c6cc8822-b15b-4dc4-845a-a328e983a03e" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="6ef2c1f3-009c-435c-8137-450a2c045c42" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="dc98e314-f289-4d26-a5a2-37ad428caa77" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="25252395-703d-4833-8c61-15a08d9404c6" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="c1a7dcd8-4c1b-4dbf-9960-c05456d7fa2b" name="unit_fact" context="unit_fact" subcategories-loading="none" object-loading="main">
                        <category _I_D="6be3a430-5feb-4d7f-acc5-42900085403f" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="814ee51f-c56d-4329-aa3d-28a883f3753b" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1a4d2b66-f1b4-4384-847a-a860a45253dc" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e852c533-c1c9-4684-a6fc-da992ceb9882" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="aef25041-de03-4e0e-ad40-96876bd79cd5" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="d7378068-ea2e-401c-93b4-8097cc6e0505" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="34beab71-4922-4642-9889-03d8e09af34a" name="Partitions" order-num="6" objects-loading="none" subcategories-loading="none" child-type="partition" mdl-expected-node-count="43"/>
                    </table>
                    <table _I_D="48f7f9e7-d0cb-4c2f-96c0-b18c4fc1e388" name="unit_type_year_dim" context="unit_type_year_dim" subcategories-loading="none" object-loading="main">
                        <category _I_D="89a49a84-e790-435f-beab-3298f33b2b38" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6ab86185-5fe8-4926-8b15-792468417f5f" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0f9fba15-7a70-4a76-88fc-c1380cee1332" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5d50b398-0429-4d2f-bcdb-437a6dc38450" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="82558b45-479b-40d0-8220-71041774b9d4" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="f0079f34-4a02-4063-91b5-f19a776d88e8" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="1b799315-8170-492d-a819-265fd62a382a" name="Partitions" order-num="6" objects-loading="none" subcategories-loading="none" child-type="partition" mdl-expected-node-count="43"/>
                    </table>
                </category>
                <category _I_D="0d9f907c-bc0f-46b2-a269-4bd4f5c41708" name="Foreign tables" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="foreigntable"/>
                <category _I_D="7fb616c7-ee60-4108-8298-5b20198906fc" name="Views" order-num="2" objects-loading="main" subcategories-loading="none" child-type="view">
                    <view _I_D="b2216a5c-8570-4bec-89df-e56cfee90df2" name="vw_annual_unit_data" context="vw_annual_unit_data" subcategories-loading="none" object-loading="main">
                        <category _I_D="451fdfa8-b9ce-4947-b396-4ba05731e469" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2fe44799-7150-4ef8-aea8-7f053e228884" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="92d29602-0181-42a2-af1b-93d47bd9ff9d" name="vw_day_unit_data" context="vw_day_unit_data" subcategories-loading="none" object-loading="main">
                        <category _I_D="b4a43a2c-632e-4bff-b041-b85f366a28d4" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ad3efb2e-2f9e-4508-be05-596555ec034f" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="234f28e3-9131-4c06-b251-76722e900474" name="vw_emissions_submissions_expected" context="vw_emissions_submissions_expected" subcategories-loading="none" object-loading="main">
                        <category _I_D="e7e4de63-86e7-4b97-9217-0009117645d4" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fc8083ca-e58b-4d59-a0a4-280ef02eb385" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="84b29786-1309-49cf-a2df-65acef9a4ea7" name="vw_emissions_submissions_gdm" context="vw_emissions_submissions_gdm" subcategories-loading="none" object-loading="main">
                        <category _I_D="62b31ef2-6cad-4eee-963d-a9e837e7506e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="edf17306-51ac-42ff-b315-14db6ef2aae4" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="1ba28d9e-4ff8-4302-bc58-45f41b160427" name="vw_emissions_submissions_progress" context="vw_emissions_submissions_progress" subcategories-loading="none" object-loading="main">
                        <category _I_D="137042e6-6e80-43a9-aa06-a0cf3dc3afb3" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c27a93d7-ba60-47f2-ba4a-808494463fc0" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="1a4b5289-07ff-4818-b946-b7883442a150" name="vw_emissions_submissions_received" context="vw_emissions_submissions_received" subcategories-loading="none" object-loading="main">
                        <category _I_D="b9a984b9-574e-4226-96e3-b7e0e9943b61" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="26eacb66-440e-4e0f-8893-7222804f76b9" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="284c6f5c-43cb-47b2-8094-9c22de84fd98" name="vw_facility_unit_attributes" context="vw_facility_unit_attributes" subcategories-loading="none" object-loading="main">
                        <category _I_D="51930292-2477-4bb7-9bf4-401b45356809" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d01854b2-817f-4a85-9253-906dc355daef" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="678ecf59-fbd6-4316-b119-efd14f659728" name="vw_hour_unit_data" context="vw_hour_unit_data" subcategories-loading="none" object-loading="main">
                        <category _I_D="5439866a-183c-4309-9a05-a0e22292ca0b" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f2b538a4-17ba-4c44-8be8-dfd5fa07b12a" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="5452f04d-2de1-4e76-abdd-c862cd0c8f68" name="vw_hour_unit_mats_data" context="vw_hour_unit_mats_data" subcategories-loading="none" object-loading="main">
                        <category _I_D="f76bfb63-1677-4abd-ad57-294c67f3d62e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="19e4784d-fc43-4d28-a7d3-26e1df903058" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="b434a3b0-fe1c-4eff-bec1-37ff916e424e" name="vw_month_unit_data" context="vw_month_unit_data" subcategories-loading="none" object-loading="main">
                        <category _I_D="3f669d17-abfa-40f4-9bc1-e3d059d0d604" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4de5bc83-01df-48ab-a351-137cef78092b" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="fab086d0-a5c4-4bd0-a7ef-c204f32c4feb" name="vw_ozone_unit_data" context="vw_ozone_unit_data" subcategories-loading="none" object-loading="main">
                        <category _I_D="92658684-65ae-4b30-82f2-80ba82f87423" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ce8caf5f-70a7-46e4-bef9-5e85030f4eb3" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="77e32711-ca97-4aec-b3bf-ab9b4ecc153d" name="vw_quarter_unit_data" context="vw_quarter_unit_data" subcategories-loading="none" object-loading="main">
                        <category _I_D="dd19d27e-9de3-49fe-8b02-cf69b4f9c122" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c470b91c-3ac1-464d-bb57-9f64e9a08d8b" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                </category>
                <category _I_D="619182b9-2e19-4db3-b67f-190b58a788bf" name="Collations" order-num="3" objects-loading="empty" subcategories-loading="full" child-type="collation"/>
                <category _I_D="9b681eab-028d-46fd-b962-2cce5a35b430" name="Operators" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="operator"/>
                <category _I_D="bc40cfed-60ea-4870-aec6-0ba848a230e0" name="Rules" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="rule"/>
                <category _I_D="5ad20a4a-256e-4760-b3f6-0498d0d6416a" name="FTS Configurations" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="ftsconfiguration"/>
                <category _I_D="a896aad0-ef3b-4083-a65e-464371cc3d1d" name="FTS Dictionaries" order-num="7" objects-loading="empty" subcategories-loading="full" child-type="ftsdictionary"/>
                <category _I_D="fad0a1f1-58cc-4684-81aa-a658b83ee130" name="Functions" order-num="8" objects-loading="empty" subcategories-loading="full" child-type="function"/>
                <category _I_D="52096abc-08a4-4d67-ac1a-d078990be049" name="Trigger functions" order-num="9" objects-loading="empty" subcategories-loading="full" child-type="function"/>
                <category _I_D="a0a4dab1-60c1-4855-87c7-edad6e218c5e" name="Procedures" order-num="10" objects-loading="main" subcategories-loading="none" child-type="procedure">
                    <procedure _I_D="898a8e44-4367-43f0-b37e-f0615e8de98e" name="hour_unit_data_sync" subcategories-loading="none" object-loading="main" context="hour_unit_data_sync" is-trigger-function="0" unique-function-name="hour_unit_data_sync" is-aggregate="f" language-name="plpgsql">
                        <category _I_D="adad2745-90ca-4ba2-b13e-1d72acc83dc0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </procedure>
                    <procedure _I_D="fc739b07-d9b5-481b-9305-0461a8eeb79c" name="hour_unit_mats_data_sync" subcategories-loading="none" object-loading="main" context="hour_unit_mats_data_sync" is-trigger-function="0" unique-function-name="hour_unit_mats_data_sync" is-aggregate="f" language-name="plpgsql">
                        <category _I_D="5dea9967-a149-4f8c-b41e-c46d6e192707" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </procedure>
                </category>
                <category _I_D="dcd31a68-613b-4a2d-8be7-64c66f16e45e" name="Sequences" order-num="11" objects-loading="empty" subcategories-loading="full" child-type="sequence"/>
                <category _I_D="0dcd0f33-952e-40a0-8314-ad6bf226f70e" name="User defined types" order-num="12" objects-loading="empty" subcategories-loading="full" child-type="type"/>
                <category _I_D="6f2ff284-461d-484f-a1bf-b5e23f76a15d" name="Domains" order-num="13" objects-loading="empty" subcategories-loading="full" child-type="domain"/>
                <category _I_D="eacbc1b5-edfd-498f-86cc-b8ee1dbfa0d5" name="Materialized Views" order-num="14" objects-loading="empty" subcategories-loading="full" child-type="materialized-view"/>
                <category _I_D="7345fe43-c3fb-4fb5-84fd-3d45bcb274c8" name="Aggregates" order-num="15" objects-loading="empty" subcategories-loading="full" child-type="aggregate"/>
            </schema>
            <schema _I_D="fdbc6cfe-e882-4ec2-9cb5-b58c8e82f989" name="camddmw_arch" context="camddmw_arch" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="6b8acefe-5440-42df-9c45-945f40943515" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="1fe666f6-0455-4de2-ae1b-46b2f3cae6a9" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="02d367a1-d3de-4496-90ff-fbd4be619447" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="738021cd-09d8-4fcd-95f2-9d888323fac4" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="720cc209-19d5-420c-8b78-ba47c708d837" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="a49244f4-c4f8-46af-b168-c61cbb9cc181" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="5f4c0ef9-8f72-4512-a87e-1dcbe435bfe9" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="69a26d25-bf2d-4a49-a434-496fbd6a11ee" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="91115da8-dfcf-4fda-bc21-6a871c1c84c7" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="ee47d7c8-67f1-44e0-b3fe-04c2b9bbcc7a" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="392e3428-c964-461e-b949-ea36fd78027f" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="02c2abf5-b6d8-4c00-b7fa-794c63020c87" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="c9152308-5f11-46ee-8508-f138c9430fb9" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="7b7c5243-12ad-4d4f-be07-be9895bcd2d0" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="0c159498-42f9-42f6-b383-79fa77e6ec92" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="cd3da462-cb9c-467d-958e-3673687e19e2" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="dfd439e0-b6f4-4175-b481-f52de18121b1" name="camdecmps" context="camdecmps" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="db22974e-8309-4124-ac53-a11c81214468" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="85d4bbc5-9b4d-4645-92d6-4a7124bfa344" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="68347b33-4359-4691-9b40-ac0d37e229b4" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="4fcbdcba-dd08-450f-8389-8e9a837eccc4" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="c66233ad-9e52-4f37-a4c0-7aa1a0d67369" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="665184c9-90fa-4e42-937a-2ad43378fc32" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="9f771f0c-7693-423a-a68f-62ccdfce6604" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="11a86d2a-7abd-41aa-97f2-72f9d0901873" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="111625f2-03c6-4bb1-810a-76fae3ea197b" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="b4997acf-bd09-4602-a510-2330099ed806" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="8f692c41-2b44-4c44-8313-dda48b5c20dc" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="a3910fb7-1b5f-4b6e-9e06-3f06e58a4d4b" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="fbc7fb22-98ed-4a00-8839-3b8c3dd6567a" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="8ef5fd3e-c650-487a-af7a-78d5145382e6" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="2778ccce-b628-4df6-8e77-99837177691a" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="8b164da6-9b5a-4484-9d87-dad7942b2655" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="e680e679-6d96-4169-8d2b-4354ff454e66" name="camdecmpsaux" context="camdecmpsaux" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="fabba909-56e8-4763-86eb-fd5ce5238d9b" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="584d859b-e07c-475b-9e86-8b423af95d86" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="c4786a7e-5fae-4874-b19e-f9b4617d987a" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="4eccdaf0-3eea-44ed-bb67-a6aefe6f3f2c" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="759b0581-605c-40c9-9fcd-f2b03d8bf5d8" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="229ace7c-4607-44dc-afa5-98ec8edaf73c" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="4532ce33-5b9f-47c3-a93f-2ff6d271653d" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="a2606d46-3989-48db-b299-b6f5f52d1c46" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="987fa3a2-4272-4de9-aad2-a0f670c794c3" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="325d89a8-5d4a-4150-b54e-61ad87a21b6c" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="100b3e96-6e26-46ed-80ba-0839b0a96436" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="3bb0ec27-59cd-4ff9-ab27-5815f2d5a78e" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="94508b5c-a121-47ca-bc22-c6d815e67a04" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="6083b266-9d88-4f28-9249-c8cb682edac7" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="dcb12f97-7c92-4550-9bbc-9f75a44f3509" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="2a0b663a-718d-404a-b41c-6cd5a9ba7633" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="1118f940-7680-411f-9622-9e356a992d97" name="camdecmpsmd" is-empty="N" context="camdecmpsmd" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:43:54">
                <category _I_D="6347e370-5498-4f1d-b133-eb65281ab793" name="Tables" order-num="0" objects-loading="main" subcategories-loading="none" child-type="table">
                    <table _I_D="8ceea083-fdfc-4788-9ec8-f513869b8c23" name="accuracy_test_method_code" context="accuracy_test_method_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="4eef7382-da53-4204-b50b-632149a1cdb2" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="13b746f8-3398-4897-aa05-d96db36bc78a" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="324c827a-101e-49eb-b69d-b74037197d68" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a0a3c0d7-b75c-490a-80d5-cb6779ed223b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="23510db9-a8d1-4181-b2a8-7ba97b323c29" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="a72b3009-112a-4261-93ad-803b720f231f" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="8f53527e-a8fe-4348-9a84-3185d7456806" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="111cf86c-10f7-4b16-bbbd-0adfecd6acf2" name="acquisition_method_code" context="acquisition_method_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="0086e6ee-2898-4668-9031-ca266c2db686" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6112d4f7-69e0-48ca-b6c2-8fbe6512c0f1" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d72db8c5-8d3e-4ae2-ae73-ed95c62f057f" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8ecf201a-d8d5-453f-949d-b77088175eb9" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="5fd1b319-9a79-41e4-b3d9-2085a527b189" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="eca9b60b-3d99-468f-8280-6306ba0c9d40" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="d82d94ae-ac73-4edf-957f-73aa06dc1c59" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="6fb3fb5d-b0c9-41fd-ba4f-3d9c94f81c75" name="analyzer_range_code" context="analyzer_range_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="08319db0-4a8f-4995-907e-2e1d75ceb1c0" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e1249e9c-dc3f-4824-acae-922d85277445" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a0f910a3-f3a9-4737-8c70-68a9fa282b22" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7f1e8298-c8d7-4cac-9c0f-cc7ce18afc2d" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="2bea2dfd-e6c6-413d-8f7a-af64598bea01" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="d03b9c5f-7242-49c8-873e-ea8561b82323" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="681ca3b7-71c1-4b74-866a-882c805dbb3b" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="6c11175f-ba99-48c6-84bd-e7797a1d355c" name="apportionment_type_code" context="apportionment_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="f7ef6220-5195-419d-b5c1-a3ffff0a3396" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="429b4226-bb32-413e-b0eb-fd98739f0413" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="65ede721-2b9c-4795-a827-81a99b3ca084" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ac807c75-ae29-44f7-9dce-f980f885ba12" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="19a902ba-8013-478c-9ce1-3fd95572fc7b" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="c828a70f-34f9-4470-ac7b-f76a48987986" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="4f8292f9-78aa-4652-b13d-7e1125841947" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="1523e12a-6dba-4770-a988-bac6752296ab" name="basis_code" context="basis_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="f2fed093-b836-412a-ae4c-3f762a01a9d7" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cdc19e78-cd2e-4158-baf5-446c8d284104" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1538973c-9787-4b28-bc7e-12b0b41e99df" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8b87037f-5b83-4102-8bc4-96d3e66a8762" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="8b402d55-13b1-499f-9e08-631173a4f54b" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="e0a284f9-2b35-4a9e-8003-47d921e0952a" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="55699dfb-0b29-448e-9ec7-c3d8760d34e2" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="2f31bdc2-fc74-4ead-b599-10c7bb2bfddc" name="bypass_approach_code" context="bypass_approach_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="55caaf34-c02e-4988-8eac-9e4691e6f9f2" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="33b4f51c-51a8-4df9-91e2-6b22fa8c6c56" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="aa14081b-1361-4708-bab1-e2a214f1e9e6" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cb751d30-37d4-44ee-b641-8f6ff6fe94da" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="28106d91-f360-4cc3-aa42-94163bb5261d" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="3412502b-1db8-42d4-8475-9b2658593f49" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="dfe24d99-58ce-459a-b1bc-762aebecb66e" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="a8e45885-e779-411c-8bf0-4d353e042f05" name="calibration_source_code" context="calibration_source_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="e91127e8-4adb-401c-87c6-bfc6da67c897" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d623bc93-7f06-4586-9848-aa8ecf93d8a1" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a82a1bde-0d87-4fbb-8266-eb620b49cf05" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="40ff8ffb-4c3f-4dcc-bdba-13b33af36591" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="465a7fba-fec5-45ec-b37e-be68a60cf68a" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="0ad63f45-039f-4899-a478-5b9bdb82684c" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="fad85d6b-f9b5-45c2-9fb5-80caf77bdbfd" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="9b735b0f-7ba6-4e2e-a41d-f54d49f735e8" name="calibration_standard_code" context="calibration_standard_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="f20e22ad-8580-47e8-9a1a-880c94557569" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="379ed974-0585-4b1f-b894-0dc83514b169" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="de46593e-b0f9-480f-a010-ab4e23233f00" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="25cd6462-26ca-41fb-ab19-1b1c194a38ab" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="de90dcc9-3ea6-4497-a89a-92c8f447bb7b" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="52285f39-c180-467d-bcd1-4d678f55ccb7" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="d133887c-765c-4f0c-be5a-6df1d9bd06a5" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="b5dd797a-0c67-408e-9b1c-996ee33aef0e" name="category_code" context="category_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="315a0f53-4438-4b02-ba2b-582f0960acc4" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="23abdc58-da23-424b-acdb-f8245e7b5dab" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="39eb2f03-ef0e-4aa7-8cbe-ec51a8d18b7d" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="331c597f-5221-4ee5-9cdd-f7b61a0f12dd" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="0e486b06-d84a-47f6-a768-fca36456a422" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="eca19b3e-17ae-4189-9aa4-0b27328cb509" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="5530380a-aeab-466e-9f2f-cebe1ffa18a7" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="d8aca803-0da0-4797-8649-989591d51276" name="check_applicability_code" context="check_applicability_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="e6f58372-3035-4f34-a7f1-dcd0bb40cda2" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bf6a2d30-cf4d-48c5-9b2f-ba39e6d1e603" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7c7b68f1-c901-406f-ab54-8d47a5435a9a" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8944be60-1b77-4dba-812a-d0c4259d3a39" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="430c41b8-5807-43a6-be14-d3659719a8f9" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="69c58428-40c5-40f8-98b8-7f2e60125f41" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="14ad2871-4a9e-4075-8c34-390dda56c54e" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="234d4a3b-fdfa-4061-bdec-d036820608c4" name="check_catalog" context="check_catalog" subcategories-loading="none" object-loading="main">
                        <category _I_D="6bf49ec4-2102-4706-800d-a0c1e856ef24" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="adc7a2f1-f901-4d3a-a259-ba64377602ba" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f7d68b73-8153-4590-aa91-2021d5eaaf37" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="21fe391b-815c-4f8f-b67b-a497a3695057" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="3df23418-03b5-4d6e-ba29-2fb686912d12" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="5"/>
                        <category _I_D="682ed06d-aaf3-4167-b264-4c4df140fd61" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="1f5f5b03-196e-413d-95d8-c67ba8c8fbec" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="633e7754-3d49-405a-9acc-10de07f99c02" name="check_catalog_parameter" context="check_catalog_parameter" subcategories-loading="none" object-loading="main">
                        <category _I_D="feaa943e-9520-47f2-bcbf-6498291232f9" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="65ed0281-da90-4f44-8140-78bbab221b1c" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="272dbdea-1345-4d7d-a15e-d5f18e3df15a" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0f99489f-d2c8-4d24-966e-fb790f2a8dff" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="35b486cf-ccfc-444f-a9a4-cddaa88e2dbc" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="a56ab4f7-92a9-4d11-b355-475461a5a3e6" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="157266dd-df9b-42a5-8244-dfa660531fd9" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="fc11285f-fd30-40bd-bbbf-114ad349c97a" name="check_catalog_plugin" context="check_catalog_plugin" subcategories-loading="none" object-loading="main">
                        <category _I_D="faaa251d-3e66-4b28-aff1-8a28b90f253a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e497bc72-06f1-47fa-a6ef-c611bccc80c0" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fa439059-fd97-420a-8af2-6e4045b79f60" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f3325077-4ddf-4b0b-8eaa-27136787e92c" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="f27cd357-9562-4ebd-b5ce-c8afe128d7e8" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="1858e0e5-69ed-4550-9cd9-4eac0afbe096" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="5093db19-c597-4d1a-9253-5b4cdfe8df3d" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="76d5cbc4-2887-47be-afeb-f64ec3bdec20" name="check_catalog_result" context="check_catalog_result" subcategories-loading="none" object-loading="main">
                        <category _I_D="1212a89c-5bb3-459b-8d11-028f5aaf119f" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1fb45262-4bc6-43d1-9b55-4e7481ba2120" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a38e7851-8480-43be-9dfd-4821d874e6f4" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="afa4d815-98e8-4023-8cf6-152704d77b6a" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="f8c9c0eb-38bf-4e51-aac0-ab330402d82a" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="b17c65df-51b6-4a43-af74-5cf67a0d9522" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="1e53f4d0-c0e3-445f-9b95-6b22a32409d0" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="21990c91-e41a-4082-bb8e-f7285432d9a5" name="check_data_type_code" context="check_data_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="50a8d77e-95aa-45fd-b229-71d094ecbd67" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1b8306c5-1929-44ae-ac1c-9ac058914e75" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e3277131-fec7-43c4-9bed-8f7a80cf8916" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ee7fadb0-0523-4989-b6a2-b4d8f071c544" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="ce195a3b-5d7e-4255-88aa-885e7f1962de" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="6f7ac525-c5e4-47e5-8537-9dea20f3c449" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e5b87816-db95-499b-993c-748daaf0fb85" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="a07635a8-25b5-4798-ad8e-4d2813f8ae50" name="check_operator_code" context="check_operator_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="5f447b2f-78b7-4f8e-91b6-0020d2d96fe2" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="78708cbc-8fb6-47c4-8876-7ae56a82a197" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="76bd2aa6-38df-45e0-9c06-3b3e354abbea" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ec423613-902f-4fd0-87c3-40fceb8cdd98" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="c1ef5d67-0446-438a-af15-d4481d771ab6" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="3dcabfe8-c257-43d1-824f-c38206dc968a" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="a71d4e50-9cac-4404-bf50-1cefce2df1ab" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="7ec7a918-dd2c-4bc8-b0cb-3437cc8ca518" name="check_operator_data_type" context="check_operator_data_type" subcategories-loading="none" object-loading="main">
                        <category _I_D="877f0bc9-f245-40dc-b1f6-3db996cf87de" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e3203f42-57bc-4922-8d2f-14925b354f90" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e1212743-b14e-4b89-a6dd-4f03a6cb7e60" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1c2b8dd5-932b-4c79-8a55-6252dac73b79" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="21609f72-bc7c-4c4d-a292-4314f08ed96e" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="84e69b5d-ca14-4b2e-b774-e2691246f550" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="0034b710-a4fb-4967-8a12-faa502346134" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="a60c6f40-29e0-4bf6-8297-877efe438c4a" name="check_parameter_code" context="check_parameter_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="5a9b7aa3-72a2-4593-ba5d-de045677e473" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="535a7b06-23b0-499d-a4cf-f493929efbff" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e77aee8d-a69b-4ce1-ba38-e12f9ebf65f5" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="69166667-76ef-4129-acb0-7d05b560e6ac" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="7573da22-5762-4c0c-9a26-c003715ef142" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="32e601dd-12db-45f8-be52-924a1b5a1ef1" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="d834ffe5-0e97-43cb-8025-7e17c2b8ff18" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="74bd2fb9-8f2f-4971-b98c-1b7c90bacf4e" name="check_parameter_type_code" context="check_parameter_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="14c3a13b-4a11-4e05-bc58-4e123d2cb4ea" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f0d7e243-2fd6-42bf-b481-0e565bd2e2f8" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="75648aae-094d-4072-bb40-8a3c684f1ea7" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5fefcf2f-8f7d-4966-8f87-49f526b7e6b7" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="2c493b5b-ce01-4f3c-997f-883c5740972a" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="35cae114-6fac-4ae2-82b6-b8e428196732" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="3f949814-b812-44c2-a620-412ce0dd8034" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="0cd64cbe-27a0-41b8-a3d8-5f3d431c4ab3" name="check_parameter_usage_code" context="check_parameter_usage_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="5a7c18f4-6eed-4c29-a545-3b2fdb0b808c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ae116999-bf33-4725-bb3c-1bca51df5fcd" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5b7b75d7-c13c-4283-968b-20db2a6906b9" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5b0b35aa-251e-44e0-9d96-b504ba4591d8" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="e52e5fc2-7513-45a3-9093-f58677b34955" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="64eaf945-079e-45d5-a5bb-9ccf93627355" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="584d69fb-fe06-47e1-9f41-1c65f05aca35" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="8b68b34f-32f3-4a97-96af-fa6a82ec18c7" name="check_status_code" context="check_status_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="241b0d9b-548f-4c9c-8fd9-04550b80e27a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2aed90b5-9280-4a5f-a1c3-2e47058d3e4e" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="246de83a-d87f-46be-9ae5-ce9ce58b3da0" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c5e24d36-6158-409f-93b0-182afff0390e" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="db3cb92b-23e6-4bb8-9e86-e6a693e514cc" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="5f6a873d-41c9-44f7-9980-f40e50b860c9" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="7c66925d-39b9-4258-a77c-87ce1e588d59" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="ce0a4e70-7d6b-443a-ac94-648b72399334" name="check_type_code" context="check_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="886203f7-a5be-4760-b391-96c445fa5e66" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="08f44911-a853-4e02-9da8-0b6722704b7f" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="48251762-e1a2-413e-8eed-2c28d0fe6a8a" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3577a14b-994b-4ba2-90ff-0ab05f03ec59" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="2493046c-f6b6-4e79-85af-97cb61b3cfad" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="679804ce-2cf5-4578-bd50-2ac908809c5d" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="32156566-509d-4538-a8d4-c584eb477265" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="491012e9-bdd5-4efd-9481-23ac021c9e91" name="component_type_code" context="component_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="b5140e7d-df31-4a32-8549-6a10fb208350" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c1f1cc7c-e774-4ca5-9b8b-e08102f943cd" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ecf78c94-5766-4c27-ae5d-de1018d7c618" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cb56ef98-f6c9-4129-a49c-5874fd0cc735" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="4d00f60b-c894-48e1-a5fa-2d594fce70b3" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="0821a0ee-0045-409a-889a-149a1c8fa151" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e7b49e7a-ba5e-421d-a8ba-45a6c8530632" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="232b971d-6e04-4eab-92f8-c5b626655f5a" name="configuration_type_code" context="configuration_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="7ba98090-df64-4089-a380-c9d454916ea6" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="34607ea8-4eb5-4710-abc1-a30ba3f1ba27" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bf44ae66-4ec7-4f2d-a322-60fbef9ed41b" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2b94d1fc-f553-42a6-86fe-ca0be73562de" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="37dbeb02-2481-4d91-9e33-028a67249771" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="1383fc99-38c1-4faa-99c3-cd5fa1d0652c" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="131d18a0-1b3b-4da4-8e62-e53a96b3fc24" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="436fe08e-8a12-4ada-a0a3-428c38a2b042" name="control_code" context="control_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="9b305d69-0f9e-437b-8343-fc6d4ec04e02" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b5ae47ff-45d9-46b7-a481-35f90c59caa6" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c813b8c2-e147-4b7a-bfa6-9550c2529319" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6cce1c6d-8fac-4ad8-883c-9ee609feb686" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="6220dd7b-6aef-41e0-9cd8-92914bff4fe9" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="ed7f21f8-1bb9-4db4-85aa-17cb11fd28d7" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="c0bca284-025b-4f36-9c94-45b2f881cda7" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="604f943b-355a-4c83-807d-c0b07b4427c3" name="control_equip_param_code" context="control_equip_param_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="28f02323-2227-463e-b7b4-b1f41e6a7998" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0855ed06-89dc-47be-969a-9d158b73f94a" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cddaffba-ab80-4ef4-befb-cef768266116" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0815883b-1db6-480c-8cb3-b4b0711e1955" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="c4b4fa55-5d69-4c22-85ac-b3665a0787d6" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="719e2aad-5823-458c-bf1c-ee154dd2919e" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="5cf15f8a-ba47-4c98-a0a0-584751f1c37d" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="349904bc-a87e-4b8e-9d01-d82613ddbc09" name="cross_check_catalog" context="cross_check_catalog" subcategories-loading="none" object-loading="main">
                        <category _I_D="6ab02e56-3d22-40de-8098-f3a6c2b79249" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7e87cea6-4a79-4951-bff3-ba860384d520" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3b0ff85c-b3ad-4312-a8a7-3b2f9991baae" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ceacc812-a0aa-4e83-b544-7d0b44ac9227" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="5f2fb278-a14f-4c6a-844e-22acc947d0ec" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="8ae3bf39-d19c-4ec4-a1b3-d32bad6f69ec" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="b05346b3-3101-49e1-a336-3e702e34f043" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="846ffecb-ecd0-4056-872a-2bb77e52ce2d" name="cross_check_catalog_value" context="cross_check_catalog_value" subcategories-loading="none" object-loading="main">
                        <category _I_D="fb188493-79f5-418e-b646-9b58041d8c2f" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b9bc32b8-e86e-4575-acd7-9db74cf4afe0" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fc1a1d23-47c5-4277-86ac-7574cadb6a1e" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d0522aae-e83a-4842-8721-1315b18d519c" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="207299cb-9993-47cc-b9fe-490043cbd115" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="b59c6ee9-78cb-4a74-aec1-3df434c413e2" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="676da712-6011-47d8-87e7-6aec25d57550" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="2be425a2-7dcf-4e39-b453-3ea27261a044" name="default_purpose_code" context="default_purpose_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="05b6b77e-39e1-472a-8aae-ec44dc34cc6e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a7d9074d-0e0b-4370-8093-020c15c3e868" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9c2003d7-901f-4c8f-b355-a79848da9734" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="859ac0b6-8f7b-4bd0-95d8-678fd28555d3" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="ef40c1d8-a64f-4290-b381-c92105ce7701" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="f511d3fc-4e8e-4604-b7e2-3b1590993b85" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="8ee28f57-957a-4140-a7ba-9d0f5839a08d" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="dee378c1-2ff1-4427-a27a-96938b19fa70" name="default_source_code" context="default_source_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="38534380-e3b7-4e4b-bfdb-886339cb4331" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1cc4f477-d9bb-4541-89c9-7ecb5fb1ff26" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e9c36773-8b37-4e48-a356-dc8a550d5061" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6fa9b11b-6920-47b7-a90e-ad4236417800" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="fc92197f-e882-46f3-9ddd-e596c325a952" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="99c28820-bbf2-4d4d-976c-81017ba4fb37" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="840dfbee-b28c-49fe-8f34-195cf8829d98" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="1e50a6e3-95e2-42a3-b961-4306c485a6bb" name="dem_method_code" context="dem_method_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="266632ec-23d8-4fcb-b085-115e46ab2d71" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="aad3ff69-6b51-43cb-9975-600a502a3afb" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2acaffa7-7d60-4efe-bb32-33d120a294a7" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7bca83b0-ed7f-42f7-afa0-b3461eab06b7" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="fa81e1a5-0c8f-482c-8bbc-0038af7a4646" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="76f21747-8d74-450a-8c68-e817966afd95" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="852843f8-db91-43a0-9e52-a275946039d3" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="1a205042-6f72-4c56-b474-eacb8dbd6902" name="dm_emissions_user_code" context="dm_emissions_user_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="c188e244-ee9a-45f8-984f-866fdb309884" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e6d22dd4-feea-4fe0-9571-f4f0bb5a20bc" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="654c8bc4-f9fe-472a-9cf9-291a3da67231" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="549ea9b8-8fc8-4180-b11d-8d229d9627f6" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="bfc08a7a-1f9f-42ea-aae9-780f96786fa6" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="82f14583-10d6-488b-bcdc-705459b440a8" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="ea39a4bf-c2e6-4b25-8609-afcea194eff9" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="2b8c5d9d-10a0-4e53-8f82-ef20fa271ee3" name="em_status_code" context="em_status_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="653f4dc3-706a-478e-87fa-0a71fa778caf" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="30831e92-2b60-44ea-984f-2ea7d56244c7" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0961fce6-19bd-414e-9fdc-f6bb5040f86e" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cd964253-bf30-45d1-b1c6-c6840463edaa" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="cc03c3f4-d17e-47fe-8421-36fe97982038" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="8336aa57-bc5b-408b-9315-97cb6cb7554c" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="a281b333-49a2-447a-a375-541573217af8" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="ab3bddb7-7336-419c-9e90-2698e66ed2d4" name="em_sub_type_code" context="em_sub_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="5eeb7633-aa5a-48bb-bdf2-020fe83747b2" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4c1dd1e4-efe9-4e36-b0b3-8b73b029d3d4" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="49c7820c-d228-4619-ac01-5e3531a442cd" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bd1ecf8c-7abe-4b71-86dc-ca6bb002a7c8" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="402ae729-1972-4fdd-b02d-87ef8d3266fd" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="9b0b014b-b17b-404d-882d-c1fb509a9987" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="4fb22999-7f81-4f7b-913c-0bdfeaeb1377" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="b5e70ae0-7a03-4329-b365-adc0ca7317a2" name="equation_code" context="equation_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="1e0b827b-b948-4727-8ad1-51ce58f2f2df" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="69117a1c-ddb6-4a03-84a8-e4b77ff02cf6" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6f0ab1ca-2962-4f0a-9337-c6d7af63c397" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="661a29e1-341a-4dec-a165-c1a782a18808" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="e1f164f9-5d6c-41ae-83f7-8a72c798ba11" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="31006258-c080-4319-9735-d5a1817062a2" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="ca08de99-41aa-4034-8fce-1b1fd6673081" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="38a7271d-e284-4d95-91ca-a7b408d1fcf1" name="es_match_data_type_code" context="es_match_data_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="9ac568e3-c047-47c2-8a3b-f659d9a0a575" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b9ceafef-6db8-4201-b187-cb1cf03883a7" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c0913939-0629-4362-8be6-7a092c231d64" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9c639029-329b-4da7-aa20-fdaa3c36a008" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="0ec89d4c-a50a-44d4-a703-c6ef39fa5b77" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="39ba8510-a112-42fa-9498-a894a1442b34" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="c4928fc4-084b-43be-aa51-62bf257450b8" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f5db9554-abed-4690-8787-b13638535c4c" name="es_match_loc_type_code" context="es_match_loc_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="374a4e73-3f37-4e66-ac77-bed24c3f4903" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4fdd810c-7944-4745-b5ac-78284e49efb4" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="55eca11b-590a-461d-b779-a316799b64ca" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1d1d5fd6-44ab-42dc-a129-5de48f4d6aea" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="00bf3ec3-2924-48ed-af74-080d83e84e9d" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="759295b8-1517-4652-b25e-d9caab884401" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="f4b5e098-1ab6-4528-a695-7bd0ea361742" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="add3c59c-5625-4f74-b6f9-25cedf702129" name="es_match_time_type_code" context="es_match_time_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="a45a642d-3564-4d01-ad84-19653c297500" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b88cf63a-a59f-423d-b974-8574488189da" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="089d52d8-b0df-4ff1-a3bc-9a439f63e0d0" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a197ff4f-badb-40cb-b316-ecc75747508a" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="ff85aa9b-89be-400c-bd49-af96fc76d2a5" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="9ffd9bc2-fd54-4468-8845-f14c48e88737" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="97565725-0d16-4f73-b79d-194e9b4e68f5" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f20ee68d-c8fc-4dde-911b-2770f7852cf1" name="es_reason_code" context="es_reason_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="8e34f4f0-454b-46b0-af01-19e4a09bb062" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7e4bb31c-7325-4842-a2d8-85cf4cf1b7bb" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="187014dc-5c66-4259-819e-242e5d493ab7" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="16e2a1ad-a09a-4187-880f-e4e2052869f4" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="a978bf9e-00d8-479f-b1c0-96c10d134396" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="f456cef2-3bf4-4c02-aad6-9ec884ee395e" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="d1d5b7e6-10cc-459a-aeca-a05054673ded" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="eff65efa-207c-4502-a798-99aad8f300a8" name="eval_score_code" context="eval_score_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="fba1be39-b65e-4a36-9ddf-d808b7d3a615" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0df2b3a5-515f-436d-a1f5-25130f6cae6e" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f8509382-4368-4c48-85f1-de08fb0213a2" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c8a7619e-17df-450e-a9e2-3f2f670dc918" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="03a01f99-95f1-48a5-8952-71b0642b8e9a" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="e9f5cd3b-92e1-4dd8-8245-8f7f3e87942a" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="32a4c53f-75c6-4f43-a9c2-6eceea3d22d9" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="d5b169f4-66bd-487a-a218-9b04e35c3f5c" name="eval_status_code" context="eval_status_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="04232b22-d3d6-4b64-b2e7-3463bd2036b4" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="198dca9e-9a95-4e36-a38c-d661750110b8" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c6f07e8e-4d3a-4781-8cfd-a30d3c368788" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d04335ad-8c6e-477e-b30f-158fcb93866b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="eccc4114-2453-4699-8005-576b3a751b33" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="6db18d5d-2d8a-4e7f-aefe-b684d36ee2e5" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="8f0630ff-3640-4fad-880d-a0b5faee776e" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="e0103b56-b440-4388-949d-92491637939e" name="file_type_code" context="file_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="c3a86c00-ab07-4757-8672-615c332bb0e8" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="671de39d-63ff-4f8d-b5ac-e70a9a5b62b5" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a0f12c77-54ef-431e-8097-0e9dc76968b4" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="997c11c7-97d9-4a98-a8fc-bc5ba36c13c4" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="ad8eb262-2562-423b-8e16-dbfeb7e53eed" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="f1c168b6-3487-47e0-97cd-d4da2d7fba26" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="cf0ac016-9278-489d-9d2c-7190a338b06b" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="cd718e89-3b28-4bd7-9a11-ce18e4482e47" name="fuel_code" context="fuel_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="5aabf5ae-e603-43b7-a732-e2310e1d097e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4cead8a3-b892-4a64-848b-5186326814f5" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="12dc33c0-2e30-47c3-b92d-5a184ace6279" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f1d6841a-14cd-4150-bb4f-441a6cd61008" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="69914f5c-63ae-4179-a903-1fdf783df074" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="ab4f8e28-f544-491a-a24e-72577e24446e" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="46a486ec-9a87-4102-91bc-ac09bf1634da" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="5b4a1821-a558-4eac-a396-827cf389de42" name="fuel_group_code" context="fuel_group_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="9e0f1443-2dc4-40c4-9821-5cf13cf5a41e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3114399d-617e-4fd9-804a-e70fbb18c242" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3ea3f280-bfad-4864-924b-cd594a6c2317" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="dd1e5430-296a-41b6-8dcf-0f46c6743268" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="be9ead78-f8f6-4e9a-aa56-e01130190805" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="a586dd7d-4ac2-4c3f-be7f-e5cf0b8e80f2" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="2aaf0006-0e68-488a-b773-4d300ec2f98b" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="de3e6e02-92ab-4b8d-9b17-3422b55a570d" name="fuel_indicator_code" context="fuel_indicator_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="ef0162c4-1aa4-40f6-bdfd-e148ce30beca" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0e9abdb5-c181-4fe6-b186-60751851b2c8" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b1b8f255-5328-48bc-9534-48b5c57468d8" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ffec19af-1df9-498a-9829-ba30edc2e333" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="f0f55931-bb76-4b77-98f9-b34523598724" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="ce2131cf-c735-40f2-9ab7-2e322d4636e5" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="b5715ff0-2b34-4816-b99d-a993718097ad" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="553b5539-28dc-428e-b133-cca1451d03c4" name="fuel_type_code" context="fuel_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="6dbfa613-2b16-4f4a-8df9-bcce6d33a9da" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0ce04f23-1486-40bb-90e0-8321035543a2" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="905da0cc-96b4-44bc-99ce-772181ecbc54" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="59ec4bff-e119-4262-af66-7fef62f6423c" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="be45d61d-9947-4967-9bac-e7e96d91a224" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="d5eaf7b5-3847-4181-8610-1ed3122ed8b1" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="5da11b05-c49d-488a-ac87-1e235c8dd280" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="bf5d73d6-ff04-483c-bad1-9b06a015cf05" name="injection_protocol_code" context="injection_protocol_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="7d0f3fbe-f463-435d-8773-503f5a456362" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="72a6afd0-6737-4da0-8b6b-03191c2a678e" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3ee1c0f4-baef-4cc5-9c55-db4188edb86d" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="90a823e7-b136-443d-b763-e49fd6b05cdc" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="0566ff3a-df93-4926-926e-17d611cc5819" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="ef66e874-24ee-4464-b2b8-c9b96b4eb057" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="92dd9a34-6b53-487e-aa0a-a9fdbcd12469" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="152bd31e-143c-4870-8827-1e190c209256" name="material_code" context="material_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="4d5d7a12-961b-4e8d-99d5-2aaf233abe6e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e3e6b796-ce4c-4f96-9cfe-d8d3b35a3a92" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="43c029c8-23fd-4a3f-97f4-104adc0d0a03" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d8f76821-2217-44aa-b973-4ce69d550014" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="3415475b-4370-4305-b180-0c2dd61fb110" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="4d1ef7ef-2be3-4175-bdfa-ea81e3618c3c" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="72a80fae-d126-4e07-b7b5-6a73f466991b" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="a6e34c7b-2b51-403a-9714-8a1a4a05c8a0" name="mats_method_code" context="mats_method_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="fa03d8ba-9087-4e26-a0f5-8f787bd6f366" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d0a0b05b-12d5-4120-96d9-2da307f4ca85" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="279db1d9-3f33-4d45-942b-ec13b7b88499" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="96e19320-e4ee-4a4c-a105-7552ddbd8469" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="755083ff-1a6a-4051-80f1-e67398e74d2b" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="d086ffb2-1e92-4029-b5cb-0b672d656cc4" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="89b2df4b-d618-4df0-b4bf-ae82eb92b0d2" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="24ddd859-31ce-4078-a175-db499c143f00" name="mats_method_parameter_code" context="mats_method_parameter_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="81a586fc-9876-415a-9aa0-6613b5361e0e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="05925566-d442-49d9-82a9-a55da8b4aa61" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e7533854-5f6a-4ca2-b681-9259c85f661f" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cf8b5337-2082-4e55-94cf-2e35ba60b5a7" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="a7ab6ea5-a9a3-4056-90a7-49f258dab3dd" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="fcccab8b-698b-485c-85cb-a3ef8d1095ad" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="5e459f2d-037e-4a35-a225-cd7a6f3c51ab" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="586f1496-dee2-46b8-b666-f51c7f42a28a" name="max_rate_source_code" context="max_rate_source_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="6d4900aa-ba61-4cc1-b068-bf0a1ab3ea4c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="86e4e908-8307-41ef-a516-2332e3fa3f4f" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7648f43d-d9d2-4093-8646-cb94580e4cac" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="150d6ea8-6ce2-485a-85da-8eab4bd19322" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="1516aa53-c05f-4e7b-b0c0-4313fe61b9f7" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="63f4da59-3a30-482f-b643-1a3c1f9bfbbb" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="3b777e7c-bb3a-450e-86ad-7610f2181b87" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="3157454f-95ba-4a0a-ba35-5e8c9511f3d1" name="method_code" context="method_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="1653215b-a58c-424f-877a-b290e9551bc9" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="155fc967-6615-4e41-ae62-735ba2eeeb7f" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b67513a0-52c2-465c-ac03-338f148d729f" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c66590f8-76ee-4c9c-8457-de09ee51d356" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="43330fa4-1cef-4fa9-a243-312ccd5eaae1" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="88501b1c-b865-40b0-90bc-1d810c2591e7" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="0c7bdf94-c944-4252-adb0-f4f486ab8c0b" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="953cfe18-dab0-4ed2-9c26-fd94af5cec6e" name="modc_code" context="modc_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="0b87b548-50f0-4966-b8d7-7e4a37971c43" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8b3307df-712a-4145-a994-0e9336721a53" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e84f7870-909d-429c-9eb8-4bb1572209c6" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d2dcd1bb-3013-412e-ac72-4f30ab17b1c0" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="6de1a1e1-31d7-42bf-9639-daef191d0b1b" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="2965576c-a7f2-4054-a2bd-c480156144e3" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="336eeef4-3bec-4450-99a7-23037aa3aadc" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="6c13d247-1097-426d-9e84-d98dab4ba6db" name="monitoring_plan_status_code" context="monitoring_plan_status_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="16cb29e1-0e3e-49b0-8bd9-860c3d31e5e2" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d929a501-4fa7-4c82-9b1f-82ad3b07c2be" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b591b37f-85e4-4495-a40c-a1f9315ab392" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1a19f150-f430-4332-8e17-ccc1417e654c" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="faa36678-930d-4fbf-9ddb-5698a54c679e" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="63ef44ab-4378-41c4-9110-0d1405ca5780" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="ef1095ed-5e87-40e9-ad35-eec284ff8466" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="a1f2a764-1e34-49f3-8620-8afc87d2e12e" name="op_supp_data_type_code" context="op_supp_data_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="1c43fa6f-1a7f-4442-bdea-0d33cc010cf4" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0688272a-a73c-41bc-9c85-c7e2eda40b64" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="392cf4f5-1d38-4dca-abef-8e740ebedf47" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2dba2971-49f2-4f60-967d-41cce09240aa" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="031da8fd-bef0-4ca8-b927-c4713b1f2d7a" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="b8269c26-e987-4fb3-906d-40071a7f8a3a" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="63a54096-17b2-41f0-87bf-877a5b6b7271" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="15cac5d4-3c2f-4031-88a8-de229cc0484f" name="operating_condition_code" context="operating_condition_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="b4c4f94a-83cc-4f88-88d9-6bb28996db97" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c4a5f63a-5715-4f13-86c0-4ff90ca7ed44" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c789316c-037f-4f7f-9bef-404d3a0c4237" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ac381523-3733-420e-8c24-67c5ba825acf" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="6e38e070-f9ce-49f9-a391-ed8f2c405161" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="7cb41009-4666-435b-b94c-61aa078c336d" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e927ec28-19e5-4233-a928-21cb60e33b31" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="65868998-9454-423c-9fe9-d9c4108c5933" name="operating_level_code" context="operating_level_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="dede11df-1649-4eb4-8c15-1b8d1cfccbe2" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3e05ae5e-5833-4610-9369-a300679dc622" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="422757d9-7d01-4a13-adde-b0356984aafc" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="76b148c3-cb59-4af9-987b-82b38a1ff6d6" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="892de766-fb60-490c-85c1-10b7e19a738a" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="7b2ab20b-00ec-4ae6-af9b-49b1a3c75d08" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="c6909fb5-1f98-421c-ad67-a324addaf1dd" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="42604971-35f0-448d-ae73-aea11b6ee1d6" name="parameter_code" context="parameter_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="296f9e49-0ccd-4c83-93f9-dae6d84b218f" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="93009090-8232-4b61-a4db-dc9064992efd" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0e7afa64-da35-4ed4-992e-7d8e3d46751b" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="99d4db03-c6fe-4a1a-a229-e2947574d460" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="68caacdc-a2a7-4947-a053-e7f40664b7ac" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="1fa7ab59-e34d-4622-9f06-c07883e26a05" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="2fdb78eb-b90a-4d4a-814d-b8791f290ba8" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="023db9b1-41fc-4294-96be-89dc8c802842" name="parameter_group_override_code" context="parameter_group_override_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="d13427d0-4add-45f3-bfb5-ec2e2c837ca2" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a625041f-b41c-4a22-b3ae-aaf547d0d845" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fe09fcbb-b328-45a5-9dd2-cff465f2b5d8" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7c515e90-9a46-4cc5-831e-e7b2d04d80d7" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="9efc9f2b-48ae-4df1-9d27-0507ec3f587a" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="aafe5b4f-1e77-4a86-8c60-6c514689a9eb" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="aa6e46b4-cd40-48a5-a61f-3777c8e2cb1a" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="b8f30554-a386-415a-99e6-30a06237ac15" name="parameter_method_to_formula" context="parameter_method_to_formula" subcategories-loading="none" object-loading="main">
                        <category _I_D="1cb713e5-7161-4084-a6a5-2994d170302f" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e71e7d9a-93c7-462e-94e8-ce91291cc37a" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6c7d9979-aa90-403b-afd1-40ba9ef01708" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6e9a934b-54aa-49e7-9dd7-7c9c45105402" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="6ae35fde-826b-454a-8f45-75de357e7c7d" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="518e67fb-d2ff-403d-a0cf-bbe5bf262108" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="d1ce285e-8c2f-4494-9d5e-07ff1c1240b9" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="388f2d0c-e84c-4872-bb8f-b3385bdd83c7" name="parameter_uom" context="parameter_uom" subcategories-loading="none" object-loading="main">
                        <category _I_D="05531bda-27a5-4d4b-ae17-1f219fcc704d" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="62c67ac3-24e1-49da-9e83-9108026f08ea" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5f7f1ec9-75e8-40af-b0d3-798425ef4d66" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="05ca8aed-71b4-48ac-943e-2411b6612a8c" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="4bfed5c9-354a-44a9-b7f5-a95f0b691ef6" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="ad900c5d-4f9c-4ea7-a428-da5c7b215084" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="38adfdcd-27ef-42c1-88fe-3664731d3ff5" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="6dd8c4ae-3bbe-4aee-9ca8-32b043275339" name="plugin_type_code" context="plugin_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="a43c687c-efab-45b8-8568-3f1d3598bf3b" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="400a5283-0cf8-4280-92be-1ff3ac74887d" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b709b286-fa6b-4396-b727-af29560f1ec0" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4312cf1a-9f19-4468-ac6c-fad9d45e234b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="e4819288-dedc-4ef7-9a8c-257afb5529af" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="424e4d09-0a69-4c1f-b847-ca5dfbd2d251" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e64d5842-16bc-4baf-8029-bab67c795ba9" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="4e118331-6933-492d-be8e-d617ad38f5a9" name="process_code" context="process_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="d838e2d4-8f48-4c2f-ac5d-f9e1eb79cb65" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4e9316db-2ca1-4df2-ac5a-05e7c87eebfe" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="448000a3-28ad-4859-a77a-86c0ac867d85" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="50bf3bb3-7dbf-46e9-b1a5-7b287fdb2fbd" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="77d3ef51-192b-42d0-ab32-de11d291b064" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="d7562645-bc83-4597-8e1d-718b06292253" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="367fe93c-a2b1-4b79-8618-bea81ac64e19" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="5b8a4741-2ec9-41c3-9dd5-12eb5f82e0c0" name="process_group_code" context="process_group_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="38e58f15-8f62-446e-a26b-153af428514f" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="35b4fdf4-ff9f-4dff-8986-3b8e18235e16" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="57234f6a-5f7b-4d7e-b325-268c647aca11" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="02b26786-49eb-490b-85d3-614c60b15807" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="2c73e23f-667c-4b03-8bc4-98d133426044" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="e0a8bdf6-2d95-4969-ba24-9f61f191b064" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="50c1cc02-20b2-4e3c-b45c-f3a81bdb3557" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="7eb470a2-f57b-4c49-906e-b36a495d3402" name="qual_data_type_code" context="qual_data_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="0c3c3c88-e326-47ed-a48e-970e14bb933e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a8cc8120-682e-4dfb-a724-5b4b0adaab51" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0de63a63-56a5-49de-ad40-95d2915d08d4" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0a723fa1-210e-4ff7-9eb4-6027068effb8" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="44e50ff1-123c-42a8-bc0c-ac0626f79f40" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="ee489257-4f85-4560-a7a1-033060a5428e" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="f81e0b1c-525b-4beb-86a3-2342b6e69d11" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="21ac1e44-4031-470c-90cd-a12fda9a3143" name="qual_lee_test_type_code" context="qual_lee_test_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="69db7a0a-2ae1-43a9-93f8-05d0887b0271" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="605e6cad-99b0-4202-859a-683bf8b879a7" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0808a37c-184d-41c9-a6c7-41247ac16703" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8c190df4-a2da-4704-8e1a-e317fb352d79" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="352989c0-3ee9-41a6-af13-3fe45a7941e8" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="2b3ac536-beff-411d-8f9b-4f5cc45fdae0" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="d00b7f86-ee4b-403f-b709-8a2b21847888" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="73bdce90-6cd4-4cfe-8fcf-e3d5e9f7858a" name="qual_type_code" context="qual_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="26fb2163-5702-4803-9330-136708ecd1d3" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ccaa3841-b389-45f4-8089-318dc2ef75f8" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="08cda48c-ffff-4ec1-bf71-a8c8a3ddcc15" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="eb9a6307-68ae-4b67-8516-5ebbc27c895d" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="178f3960-8de0-4b28-ae40-3f417a6945b0" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="c0462d8c-d743-4071-9480-91bd8cf4307a" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="0a9189dd-83cf-4189-a3d4-2def3f4cf97f" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="873f1776-97a6-4da4-b345-c2a059bc0a59" name="report_freq_code" context="report_freq_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="2f7efad2-839c-4ee6-8089-a32f39a5c7a0" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7a15daf0-3572-42c1-bad5-1fcc16f47c01" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fd39ec25-1113-4cd1-915b-81087f12f627" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0fe6740d-425c-4d6e-87b7-e38462f87b17" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="c5942d57-a352-4f66-95f9-8da7302368cc" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="409c1319-cf72-43ef-a5dd-70e164d364d8" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e2dfe5fb-4ee5-4f2a-8cbf-4d58131a423f" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="6f749bf0-9a66-4c39-90a2-074b803d5540" name="reporting_period" context="reporting_period" subcategories-loading="none" object-loading="main">
                        <category _I_D="c5a4da47-c201-4718-b645-ae4dac1fbd0a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="41b43b88-ff08-4d0a-8096-12e9c0c795d4" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="848807a5-2096-4b65-bcf7-47cb97d29231" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f0206586-62eb-472e-b053-98890f83bd6e" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="62ab7355-62f5-4f83-918a-4381119b0cff" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="c70800ab-d303-4447-b450-66e463ad2eba" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="0bedb173-7cb2-4f18-9856-1d91f3bbac01" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="a429805d-5478-4f38-8e3f-dff40f4a118e" name="response_catalog" context="response_catalog" subcategories-loading="none" object-loading="main">
                        <category _I_D="1f68b443-f811-411d-95f4-26f1a84e5546" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="498ad3aa-5b54-4a7e-a26f-3056b137e73d" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="aeb039e8-8730-4874-a056-ca9427c062bc" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a312b77d-80ac-4308-b896-3e3e42ef43bf" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="9612cd2a-db6d-4ae2-b589-edc98accb475" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="00f0c805-5179-47e6-ab94-53b88f360c9f" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e58a8738-2626-46eb-9205-6f4a5e1bb937" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="b2eb24c1-6731-4724-af1d-eb0fa2e62e4b" name="response_type_code" context="response_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="d510d038-995a-4526-bddc-39f6aa947c0a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="36b6094d-51fc-4e27-bbf5-6bae39425f26" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f2e4a63b-e479-4a10-9daa-656be1ada895" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d8b2ccbc-9b24-4d1d-a87c-7081f571d47a" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="127afc9f-14f4-4fc4-a625-508c4167ebaf" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="9f6e8950-9de3-4c61-a90e-079ef2b3f6da" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="8c97f332-926d-40c9-9898-7f119916a091" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="76bb25e2-458b-431f-918e-ca90ccc0642c" name="rule_check" context="rule_check" subcategories-loading="none" object-loading="main">
                        <category _I_D="1fcb8cbc-8313-41d6-8a44-9c6222575a31" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="02beab8c-32d8-4317-83aa-8f479624eff7" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ac887866-c737-4fcf-9d1d-4499e16b7103" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a599c7d0-cd03-4311-9856-941fd925b30a" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="b5349955-debc-4b66-9ec1-63a85626b743" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="4b1fbc73-880a-49bd-90a2-6442f4b7b9bd" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="bd7c4cf7-b632-4e55-91f5-a741529ec527" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="6430f050-0af7-45b0-99ea-86c2fb2a1f74" name="rule_check_condition" context="rule_check_condition" subcategories-loading="none" object-loading="main">
                        <category _I_D="17a6d12f-997d-4301-b642-960b0467e455" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="00d9b166-9495-4de5-9077-c751ca397d9d" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a36147f1-b60f-47dc-81a4-0131eb94a095" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="00bef8df-5c38-4df5-9aa7-1f81aa85a52d" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="151027fd-4ad3-4856-a1c6-b518a9251506" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="57689a48-2a48-4c03-a37e-b16e228d1762" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="4a863ddc-5ef7-481b-9555-8210e0bd5e94" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="032d5d31-1af9-4c6d-9003-0385a1fd01e1" name="severity_code" context="severity_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="5709981e-c661-4291-8926-0955bc6f8471" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d90039e5-9a4c-4cf1-9b37-e36e318e085f" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2e8a4c7b-e9fa-4f1f-b537-6cd7fce43196" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cb9d7fc6-0333-4f04-98ec-177cfc1def25" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="fd88d161-a911-466b-8182-cf6ccd5b9e75" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="ebbee755-0108-415e-99c4-6acc790b8965" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="c763b1ef-1040-46e4-82e1-e76ae03c273e" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="214ebe91-ec39-4def-bf87-2350048650f4" name="shape_code" context="shape_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="270a3b16-3d97-4d4e-bf51-43b5e331bee5" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3a936dff-cddb-4e2d-9855-992f888e9a7d" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ed453c27-fcc6-4446-b6dc-3b98879f6e97" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c1d495e1-5d6a-4134-8ce9-0e08fe76c610" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="98ff2f67-9eaf-418f-983e-3e4a6eec3142" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="e36919b8-8d11-444d-a8a6-9241f334dfd4" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="a3602095-f1f0-4c03-b6ba-3b689cbf11c3" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="fa8a2dc7-efd8-44e8-b990-8ac5e2b4802b" name="span_method_code" context="span_method_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="e69be96f-bdd1-4ec8-9d71-8017ae657167" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f4129664-97b1-4c2a-b979-136b001b3fd5" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="747d976f-147e-4507-9c90-6746e2afe23c" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="757a40d6-47c7-47e9-a4cf-de4fa0f3055f" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="26ffebc2-ea36-469b-a8ea-9d1fba49743d" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="f32c7b73-3c0b-4868-8a44-7bed64fd3809" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="77af07ef-27c1-4fc9-811f-2fefd4c39c92" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="d68aa6e7-bf12-42dd-a08e-168824814c86" name="span_scale_code" context="span_scale_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="a3709aa5-dcf2-4369-8d0c-3e9902e07980" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="baab042a-d3f1-49ac-9a0d-21f9bf5219c6" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="63629675-3643-4fea-b519-eb771e081277" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b9ee4723-3a5e-432b-b1fb-9da91ab8782f" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="43e3e91d-4958-4ac7-9f99-feea970d3b5e" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="aae75fe5-4f00-4edd-b7cc-5ac23b6be512" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="fbb2e205-01fb-462e-b899-296b93defecb" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="b458c52f-7555-4d71-a180-a6b064ab9cee" name="submission_availability_code" context="submission_availability_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="66669cb8-3a17-44fb-9e79-95f52ab9f6b5" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7d9f7c34-8644-4f41-bd2e-d422416d4c17" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="635f1847-4ffb-4b56-a8ab-4a76f2e90320" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d87cf153-beeb-4493-b1b2-2efce3e501d6" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="c03ee321-03f4-4c35-96dc-29730e300c19" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="42174927-515b-46ee-95c1-33bfcc9f9fae" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="2b5d79d3-cd5f-4869-a73f-19f3966795dd" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="5c5c8f48-a501-4e5e-a233-98be653cb536" name="substitute_data_code" context="substitute_data_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="45abb847-0618-46c9-bdb7-668827c24b3f" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ecd7be11-3103-493a-ae62-2f51b62ee72f" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="51f5993f-4cb5-4f46-8f53-ffaad02ff459" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ef66791a-c44c-4b63-87cd-87d55a51ded6" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="015d48d0-e31e-46e3-bd9a-c155888c19d4" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="38ee23d3-ee84-41c5-91dc-2b5abc93fae2" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="fb2172d5-b915-4275-b95a-8021f70fd2f1" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="e34745f9-944f-4c20-b53a-40584ac68439" name="system_designation_code" context="system_designation_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="07818016-11d4-4dc1-a473-69b058b302a1" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1ff89a2a-3ea6-4744-b838-a526abfdaf5c" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6615b370-a023-4063-97e9-254ee64a11b8" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ff19579b-9ace-4249-bfcd-1824dd264e96" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="151bdcda-59cf-400a-9830-f9c60b139bb7" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="d3798660-0dde-4f87-abf2-3f23d6176d6b" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="4a738674-7e3f-485c-ab57-d1e0fc5c9464" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="5b73d8d5-8d0c-4b09-8a92-b2a0eed86ed2" name="system_parameter" context="system_parameter" subcategories-loading="none" object-loading="main">
                        <category _I_D="6cbe50cf-1475-4e97-aa51-a8a9515b72b9" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="76e090e2-b0fd-444f-8856-66c1bb7882e4" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b514dd6b-1e74-4ea1-a209-9bbe62dfcaa1" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1c763a74-ff2e-42ae-97c9-557dd4b4fbdc" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="83c0bacf-403f-4d6e-a024-eadacc30d414" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="37f966c7-bb1a-4fd0-bb9f-e17f4433749e" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="1b2558d6-5ae9-4dae-8baa-d0d0e5548a48" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="58d2e6b0-de19-45a1-8efd-d54006eaa267" name="system_parameter_name" context="system_parameter_name" subcategories-loading="none" object-loading="main">
                        <category _I_D="8d6d7361-2a25-40e4-9ba4-0f38484f1e1e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9e228c55-514a-4771-b2c4-5636a59286d0" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="584ba238-8df8-4daf-a500-b8bcbd9c829d" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cf8ca111-e027-43f2-bd76-0a9155de72a1" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="6ad9d11e-17f4-4a7f-88ed-7cdd2edc3377" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="573e3012-2962-4917-8465-03ea987aab88" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="cd9daec7-bcb7-4b46-9f93-56b5baa6877a" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="1014c1b5-07ec-434e-820e-08c0acca5e21" name="system_type_code" context="system_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="7b932271-ec2e-4142-bae0-1b166866ebe4" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2b1b1d14-11df-4cc9-bc89-db13aba610d9" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="70f200ef-65e3-495a-9e9d-0db1506f350d" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="37e8715d-6d4a-4ee3-bbc5-dafe9fb700b3" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="61a42359-afa6-4d3b-b5b1-cdeb97ab761e" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="fb37e32f-c02f-46e7-8002-8b0b9cad3c89" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="ace2e949-8bf3-414b-aca9-d99345171ee5" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="207e6489-c709-47f0-94b3-f67f1a3c2a18" name="test_basis_code" context="test_basis_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="6cab648d-8657-4506-801d-fd4d591b52e0" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5ad1c0e7-e62e-4eee-8a7e-f0950cbd14f3" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d9e70c8b-3893-4a07-95d3-3338db3122b8" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6bca352d-9d17-4b9e-963f-434586bc0fd8" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="0672c86f-4db4-4019-aac3-6c1f91fcb6e6" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="22952cbd-8542-4a86-88d4-3ead5a02430d" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="01dd7b35-5431-494d-8497-dd46e8c954b9" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="824cb63a-adbc-4cb9-b239-9c9b6ca290c8" name="test_reason_code" context="test_reason_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="58ecb274-dafb-4a42-b134-fb26e6f7e7e6" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b4b79a94-2de4-447d-998f-02ff34ff551e" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0cf8c365-bece-4f28-a390-4052eb58d955" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5dea7bbf-6a6c-4ae8-b88a-34d13e9fae8f" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="61e60421-2ee8-4d43-ab6e-ccfc23888acf" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="9df887eb-0c8d-496d-9327-5d0f916e2257" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e77a081a-995e-4087-a96f-d38a1d0f7752" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="7c2da3e6-890d-4709-9c72-81b7975d7761" name="test_result_code" context="test_result_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="2aecddd3-d88e-45d5-8d36-5ce7b34989d4" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="aa7548c8-6d5f-458d-b5bd-e87de1934b5b" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f5ab4b09-21ef-4364-af94-4ba45eac6439" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c7313b40-a355-4466-93bc-b4661ea9d3ce" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="d1adcd07-03be-4b10-90aa-8aac127ecfaf" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="90732227-4d2b-4053-81ef-3889db7a54a4" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="373b30a7-d642-42df-8a57-ebf674ef2de3" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="7b1fab52-0da6-4d8d-8046-aabe250c9dac" name="test_type_code" context="test_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="06c4e9b4-2afb-4913-9844-bc26610b9b70" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2aa7ba38-7f46-4f74-b814-081112d70141" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1e78d65f-74fc-49f7-8b92-1f69f6e9e98e" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8c3ed6ed-8aa0-4802-9c5b-19283dbc8bbd" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="c59401ac-e0dc-4bec-9686-72767231c9f7" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="f4ec5d84-661b-41c9-bf9d-8e00ffba0121" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="ece96fe2-1a79-42e4-96cd-2d999bb7df22" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f9366247-f919-49da-89eb-d35d129399f7" name="units_of_measure_code" context="units_of_measure_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="644cf0e3-517b-4828-8b1f-658880c25db0" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e0dab555-0fdc-481b-8f82-e1374224a61c" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8196b0c1-3f2b-432c-bbcc-fdcaef5327ac" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="44a8d862-540d-4c00-bfd7-dabaf03001f8" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="4d1235fe-add3-421e-b178-f71255e06f3c" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="e9e8298b-2f91-4301-892f-8e569cbf6292" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="ce264e9f-b090-4af9-86f0-1a2aaed56798" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="5b0d97e3-1f9d-4385-bf28-53aefe0d0f1b" name="waf_method_code" context="waf_method_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="9203b59d-4f9a-444c-a560-75bacb77601a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7cdd908c-1624-4dd1-9aa8-6033138d98e9" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a3618b91-2936-47ef-b646-23af0489c39e" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7635876f-9b5a-4e45-a23a-9ecbead2074d" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="b3658b73-8f82-426d-b597-7ecc49b90661" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="74880d79-1f79-4a25-b01a-ff635f285bbf" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="ef462d53-3a70-407c-9f88-7d1de5201397" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="ddcb02d5-4a2d-4c86-beba-8497d2805b6e" name="qa_cert_event_code" transformed="2022-04-13 14:27:30" is-typed="N" comment="Lookup table of QA and certification event codes." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-13 14:27:56">
                        <category _I_D="c63e2868-0706-4fec-a20b-0a09940da575" name="Columns" order-num="0" child-type="column" transformed="2022-04-13 14:27:30" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_CODE,category Columns">
                            <column _I_D="513da5c5-7466-4d13-bd0f-966442fe0558" name="qa_cert_event_cd" table-schema="CAMDECMPSMD" table-name="QA_CERT_EVENT_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-04-13 14:27:30" ordinal-position="1" is-nullable="N" comment="Code used to identify QA and certification event. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_CODE,category Columns,column QA_CERT_EVENT_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="e0553607-51dd-4b45-b891-62b6e04491ec" name="qa_cert_event_cd_description" table-schema="CAMDECMPSMD" table-name="QA_CERT_EVENT_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-04-13 14:27:30" ordinal-position="2" is-nullable="N" comment="Description of QA cert event code. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_CODE,category Columns,column QA_CERT_EVENT_CD_DESCRIPTION" mdl-applying-result="applying-success"/>
                            <column _I_D="e9af08ff-82cd-4fb6-85cf-f2fdd8c72759" name="qa_cert_category" table-schema="CAMDECMPSMD" table-name="QA_CERT_EVENT_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-04-13 14:27:30" ordinal-position="3" is-nullable="Y" comment="Identifies the groups of event codes that make up an Initial or Recertification event. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_CODE,category Columns,column QA_CERT_CATEGORY" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="efb80115-3172-4561-a452-17b05a077808" name="Partition columns" order-num="1" child-type="column" transformed="2022-04-13 14:27:30" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_CODE,category Partition columns"/>
                        <category _I_D="c9f8ef5c-12e1-40e9-ba8d-181f114c34cf" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-04-13 14:27:30" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_CODE,category Subpartition columns"/>
                        <category _I_D="aac8d99e-e1d0-40cc-8c48-91ba3600ab9a" name="Constraints" order-num="4" child-type="constraint" transformed="2022-04-13 14:27:30" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_CODE,category Constraints">
                            <constraint _I_D="2fa2de73-1ed5-4e71-a978-bacff912174d" name="pk_qa_cert_event_code" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-04-13 14:27:30" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_CODE,category Constraints,constraint PK_QA_CERT_EVENT_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-13 14:27:56">
                                <category _I_D="449beca0-0a19-4be3-947b-41bc025776b1" name="Columns" order-num="0" transformed="2022-04-13 14:27:30" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_CODE,category Constraints,constraint PK_QA_CERT_EVENT_CODE,category Columns">
                                    <column _I_D="91cadb32-9ee5-4cfe-ba03-1e9cff4983ce" name="qa_cert_event_cd" transformed="2022-04-13 14:27:30" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_CODE,category Constraints,constraint PK_QA_CERT_EVENT_CODE,category Columns,column QA_CERT_EVENT_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="de6dfa9b-d891-48ba-9059-6913a22327f5" name="Indexes" order-num="5" child-type="index" transformed="2022-04-13 14:27:30" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_CODE,category Indexes"/>
                        <category _I_D="9eb9b309-85ed-4517-a6ca-2c273c7ab045" name="Triggers" order-num="6" child-type="trigger" transformed="2022-04-13 14:27:30" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_CODE,category Triggers"/>
                        <category _I_D="b215fe95-1605-4b2e-8a39-2126d360d043" name="Partitions" order-num="7" child-type="partition" transformed="2022-04-13 14:27:30" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_CODE,category Partitions"/>
                    </table>
                    <table _I_D="f9361749-b7d4-498f-8bac-ef7a575843e4" name="accuracy_spec_code" transformed="2022-04-14 13:02:11" is-typed="N" comment="Lookup table for accuracy specification code." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table ACCURACY_SPEC_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:06:51">
                        <category _I_D="5ef824f2-6ebc-4969-bc17-9b0e7ad1d6c3" name="Columns" order-num="0" child-type="column" transformed="2022-04-14 13:02:11" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table ACCURACY_SPEC_CODE,category Columns">
                            <column _I_D="40b33346-1feb-413e-884b-9416db4dfe4e" name="accuracy_spec_cd" table-schema="CAMDECMPSMD" table-name="ACCURACY_SPEC_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-04-14 13:02:11" ordinal-position="1" is-nullable="N" comment="Unique code value for a lookup table." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table ACCURACY_SPEC_CODE,category Columns,column ACCURACY_SPEC_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="8ac30483-10ac-44e7-adc6-38501d77f2b3" name="accuracy_spec_cd_description" table-schema="CAMDECMPSMD" table-name="ACCURACY_SPEC_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-04-14 13:02:11" ordinal-position="2" is-nullable="N" comment="Description of lookup code." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table ACCURACY_SPEC_CODE,category Columns,column ACCURACY_SPEC_CD_DESCRIPTION" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="942b4a8a-b698-4806-8c0a-dfdedc2ae839" name="Partition columns" order-num="1" child-type="column" transformed="2022-04-14 13:02:11" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table ACCURACY_SPEC_CODE,category Partition columns"/>
                        <category _I_D="aca671cb-3e19-46de-a58c-b779e80261ec" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-04-14 13:02:11" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table ACCURACY_SPEC_CODE,category Subpartition columns"/>
                        <category _I_D="34a561e8-2463-4246-b53b-e901986c9e98" name="Constraints" order-num="4" child-type="constraint" transformed="2022-04-14 13:02:11" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table ACCURACY_SPEC_CODE,category Constraints">
                            <constraint _I_D="eb6270f1-5a1b-4e57-b596-3ec63c5be5e2" name="pk_accuracy_spec_cd" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-04-14 13:02:11" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table ACCURACY_SPEC_CODE,category Constraints,constraint PK_ACCURACY_SPEC_CD" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:06:51">
                                <category _I_D="59b3248e-72ff-40db-9459-b088672f9f9f" name="Columns" order-num="0" transformed="2022-04-14 13:02:11" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table ACCURACY_SPEC_CODE,category Constraints,constraint PK_ACCURACY_SPEC_CD,category Columns">
                                    <column _I_D="87a95fff-8fe1-4e88-b8b7-d19ba75c411a" name="accuracy_spec_cd" transformed="2022-04-14 13:02:11" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table ACCURACY_SPEC_CODE,category Constraints,constraint PK_ACCURACY_SPEC_CD,category Columns,column ACCURACY_SPEC_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="b1d17e31-2a68-4679-a569-a9851ecfcdc9" name="Indexes" order-num="5" child-type="index" transformed="2022-04-14 13:02:11" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table ACCURACY_SPEC_CODE,category Indexes"/>
                        <category _I_D="ab106444-795e-4433-93b3-f4314c084246" name="Triggers" order-num="6" child-type="trigger" transformed="2022-04-14 13:02:11" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table ACCURACY_SPEC_CODE,category Triggers"/>
                        <category _I_D="bc9c6671-bc1f-489f-827d-36cc56051e4e" name="Partitions" order-num="7" child-type="partition" transformed="2022-04-14 13:02:11" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table ACCURACY_SPEC_CODE,category Partitions"/>
                    </table>
                    <table _I_D="bbe3887e-d9dc-44d9-ade3-922123301d39" name="aps_code" transformed="2022-04-14 13:17:19" is-typed="N" comment="Lookup table for alternate performance specification" partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table APS_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:19:37">
                        <category _I_D="9c0cef62-e869-44c5-b68f-3075f7cea371" name="Columns" order-num="0" child-type="column" transformed="2022-04-14 13:17:19" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table APS_CODE,category Columns">
                            <column _I_D="5d325d12-4cc5-4ac4-89e4-23fc4ba056f8" name="aps_cd" table-schema="CAMDECMPSMD" table-name="APS_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-04-14 13:17:19" ordinal-position="1" is-nullable="N" comment=" Code used to identify the alternate performance specification." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table APS_CODE,category Columns,column APS_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="a3a19c61-ec22-459b-8fcd-7139732129ed" name="aps_description" table-schema="CAMDECMPSMD" table-name="APS_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-04-14 13:17:19" ordinal-position="2" is-nullable="N" comment=" Description of alternate performance specification code." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table APS_CODE,category Columns,column APS_DESCRIPTION" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="7064aa7c-2c5b-4317-a82f-4c2f3e4cd905" name="Partition columns" order-num="1" child-type="column" transformed="2022-04-14 13:17:19" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table APS_CODE,category Partition columns"/>
                        <category _I_D="cfd9074a-f94c-48d6-a470-83a870486039" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-04-14 13:17:19" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table APS_CODE,category Subpartition columns"/>
                        <category _I_D="92847f3f-6700-40b4-9df4-f7018a683c6c" name="Constraints" order-num="4" child-type="constraint" transformed="2022-04-14 13:17:19" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table APS_CODE,category Constraints">
                            <constraint _I_D="436d3127-6d43-439a-93ae-d22ea2ecc48c" name="pk_aps_code" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-04-14 13:17:19" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table APS_CODE,category Constraints,constraint PK_APS_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:19:37">
                                <category _I_D="4bf93069-6487-4cc7-b12a-d4b8a56ee659" name="Columns" order-num="0" transformed="2022-04-14 13:17:19" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table APS_CODE,category Constraints,constraint PK_APS_CODE,category Columns">
                                    <column _I_D="063d3b67-bd0c-4cbe-994a-3629465e46e6" name="aps_cd" transformed="2022-04-14 13:17:19" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table APS_CODE,category Constraints,constraint PK_APS_CODE,category Columns,column APS_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="6887061f-8971-4ba6-84f5-8d66444cb939" name="Indexes" order-num="5" child-type="index" transformed="2022-04-14 13:17:19" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table APS_CODE,category Indexes"/>
                        <category _I_D="248b8a8f-3200-4537-9d08-dbb434104bdb" name="Triggers" order-num="6" child-type="trigger" transformed="2022-04-14 13:17:19" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table APS_CODE,category Triggers"/>
                        <category _I_D="a0c07329-ce4a-404f-b8ee-4089b897e637" name="Partitions" order-num="7" child-type="partition" transformed="2022-04-14 13:17:19" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table APS_CODE,category Partitions"/>
                    </table>
                    <table _I_D="125b3d2e-3f9a-4a42-ba31-3c1ff6f6a743" name="extension_exemption_code" transformed="2022-04-14 13:25:23" is-typed="N" comment="Lookup table of codes indicating type of test extension or exemption." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table EXTENSION_EXEMPTION_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:26:15">
                        <category _I_D="ff74ffd0-53b4-44a3-9534-ca0c8a539987" name="Columns" order-num="0" child-type="column" transformed="2022-04-14 13:25:23" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table EXTENSION_EXEMPTION_CODE,category Columns">
                            <column _I_D="f9ed761b-d20c-4de8-88a3-321541fdeae0" name="extens_exempt_cd" table-schema="CAMDECMPSMD" table-name="EXTENSION_EXEMPTION_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-04-14 13:25:23" ordinal-position="1" is-nullable="N" comment="Code used to identify the extension or exemption. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table EXTENSION_EXEMPTION_CODE,category Columns,column EXTENS_EXEMPT_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="04f05a43-a0de-4565-8e8d-eb47fa239753" name="extens_exemp_cd_description" table-schema="CAMDECMPSMD" table-name="EXTENSION_EXEMPTION_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-04-14 13:25:23" ordinal-position="2" is-nullable="N" comment="Description of lookup code. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table EXTENSION_EXEMPTION_CODE,category Columns,column EXTENS_EXEMP_CD_DESCRIPTION" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="81bf8019-b23a-4a9a-b739-297ac75c5324" name="Partition columns" order-num="1" child-type="column" transformed="2022-04-14 13:25:23" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table EXTENSION_EXEMPTION_CODE,category Partition columns"/>
                        <category _I_D="94fd922a-acf0-48e7-98a5-42ab9fcbe83f" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-04-14 13:25:23" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table EXTENSION_EXEMPTION_CODE,category Subpartition columns"/>
                        <category _I_D="b777798d-f773-476e-96e9-a1760d372da1" name="Constraints" order-num="4" child-type="constraint" transformed="2022-04-14 13:25:23" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table EXTENSION_EXEMPTION_CODE,category Constraints">
                            <constraint _I_D="0179993a-3133-437a-af15-6a38b51a13d4" name="pk_extension_exemption_code" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-04-14 13:25:23" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table EXTENSION_EXEMPTION_CODE,category Constraints,constraint PK_EXTENSION_EXEMPTION_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:26:15">
                                <category _I_D="b3c5dc71-52cb-466e-831e-322ee9481d0a" name="Columns" order-num="0" transformed="2022-04-14 13:25:23" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table EXTENSION_EXEMPTION_CODE,category Constraints,constraint PK_EXTENSION_EXEMPTION_CODE,category Columns">
                                    <column _I_D="231f751f-fcc7-4f2e-8960-f9ee9d50fa7b" name="extens_exempt_cd" transformed="2022-04-14 13:25:23" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table EXTENSION_EXEMPTION_CODE,category Constraints,constraint PK_EXTENSION_EXEMPTION_CODE,category Columns,column EXTENS_EXEMPT_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="48c6f03f-b51b-4c9d-89da-14a91ed5091c" name="Indexes" order-num="5" child-type="index" transformed="2022-04-14 13:25:23" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table EXTENSION_EXEMPTION_CODE,category Indexes"/>
                        <category _I_D="cfab2154-a5bd-48eb-9d10-fad1856ec163" name="Triggers" order-num="6" child-type="trigger" transformed="2022-04-14 13:25:23" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table EXTENSION_EXEMPTION_CODE,category Triggers"/>
                        <category _I_D="9c985934-f3c3-420f-acc2-5f5738c17ec8" name="Partitions" order-num="7" child-type="partition" transformed="2022-04-14 13:25:23" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table EXTENSION_EXEMPTION_CODE,category Partitions"/>
                    </table>
                    <table _I_D="7cc17e1e-6d47-47b8-83cc-7e895c7ae536" name="gas_level_code" transformed="2022-04-14 13:27:21" is-typed="N" comment="Lookup table of calibration gas level codes." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table GAS_LEVEL_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:27:59">
                        <category _I_D="200d4a04-08aa-42fc-95f6-7c7dcfb3aeb2" name="Columns" order-num="0" child-type="column" transformed="2022-04-14 13:27:21" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table GAS_LEVEL_CODE,category Columns">
                            <column _I_D="31fd81c8-524e-47d9-84c2-b07be83c7e68" name="gas_level_cd" table-schema="CAMDECMPSMD" table-name="GAS_LEVEL_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-04-14 13:27:21" ordinal-position="1" is-nullable="N" comment="Code used to identify calibration gas level. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table GAS_LEVEL_CODE,category Columns,column GAS_LEVEL_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="930942ac-0a02-42eb-9f5a-66d1f8c28a62" name="gas_level_description" table-schema="CAMDECMPSMD" table-name="GAS_LEVEL_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-04-14 13:27:21" ordinal-position="2" is-nullable="N" comment="Description of a gas level code. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table GAS_LEVEL_CODE,category Columns,column GAS_LEVEL_DESCRIPTION" mdl-applying-result="applying-success"/>
                            <column _I_D="67162598-debe-4d70-924a-6d5e752ff5bf" name="cal_category" table-schema="CAMDECMPSMD" table-name="GAS_LEVEL_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-04-14 13:27:21" ordinal-position="3" is-nullable="Y" comment="Identifies the entities for which a gas level code is applicable. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table GAS_LEVEL_CODE,category Columns,column CAL_CATEGORY" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="7c5442da-f093-4cd2-8537-d292f981561f" name="Partition columns" order-num="1" child-type="column" transformed="2022-04-14 13:27:21" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table GAS_LEVEL_CODE,category Partition columns"/>
                        <category _I_D="e772a8e3-b81b-4bd7-94f1-30b10364cb96" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-04-14 13:27:21" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table GAS_LEVEL_CODE,category Subpartition columns"/>
                        <category _I_D="0f7d25f4-1afb-4036-a191-9e468b0c9132" name="Constraints" order-num="4" child-type="constraint" transformed="2022-04-14 13:27:21" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table GAS_LEVEL_CODE,category Constraints">
                            <constraint _I_D="48a0ec15-76c9-4b51-9332-344e062159fe" name="pk_gas_level_code" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-04-14 13:27:21" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table GAS_LEVEL_CODE,category Constraints,constraint PK_GAS_LEVEL_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:27:59">
                                <category _I_D="d696b88b-6d69-4ffb-8ddf-542bf8f02e8e" name="Columns" order-num="0" transformed="2022-04-14 13:27:21" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table GAS_LEVEL_CODE,category Constraints,constraint PK_GAS_LEVEL_CODE,category Columns">
                                    <column _I_D="8a7f525e-6b97-496c-be5f-109a75b2b125" name="gas_level_cd" transformed="2022-04-14 13:27:21" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table GAS_LEVEL_CODE,category Constraints,constraint PK_GAS_LEVEL_CODE,category Columns,column GAS_LEVEL_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="f85b1d20-cf3b-4df8-b76e-4074f352c8c8" name="Indexes" order-num="5" child-type="index" transformed="2022-04-14 13:27:21" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table GAS_LEVEL_CODE,category Indexes"/>
                        <category _I_D="10e6f672-2820-478e-b6fe-bc50f30e791e" name="Triggers" order-num="6" child-type="trigger" transformed="2022-04-14 13:27:21" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table GAS_LEVEL_CODE,category Triggers"/>
                        <category _I_D="f0694063-ee93-478c-ba4a-72ba2e28e2d1" name="Partitions" order-num="7" child-type="partition" transformed="2022-04-14 13:27:21" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table GAS_LEVEL_CODE,category Partitions"/>
                    </table>
                    <table _I_D="b1c151f8-bbaa-4118-8915-6da545c9692b" name="pressure_measure_code" transformed="2022-04-14 13:30:17" is-typed="N" comment="Lookup table of pressure measurement device type codes." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PRESSURE_MEASURE_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:30:47">
                        <category _I_D="66421fb7-3dc8-4b12-a9de-8b5af9b807b7" name="Columns" order-num="0" child-type="column" transformed="2022-04-14 13:30:17" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PRESSURE_MEASURE_CODE,category Columns">
                            <column _I_D="2eebc0e2-b523-4b2a-b668-66e8f36239f6" name="pressure_meas_cd" table-schema="CAMDECMPSMD" table-name="PRESSURE_MEASURE_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-04-14 13:30:17" ordinal-position="1" is-nullable="N" comment="Code used to identify a pressure measurement device type. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PRESSURE_MEASURE_CODE,category Columns,column PRESSURE_MEAS_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="9030a79f-398f-4db3-81cb-a755b212ca1e" name="pressure_meas_cd_description" table-schema="CAMDECMPSMD" table-name="PRESSURE_MEASURE_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-04-14 13:30:17" ordinal-position="2" is-nullable="N" comment="Description of pressure measurement code. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PRESSURE_MEASURE_CODE,category Columns,column PRESSURE_MEAS_CD_DESCRIPTION" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="9ee976aa-aafb-4845-8e6c-0ab19151d3d9" name="Partition columns" order-num="1" child-type="column" transformed="2022-04-14 13:30:17" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PRESSURE_MEASURE_CODE,category Partition columns"/>
                        <category _I_D="ab302b5d-b67f-4a77-b61b-143329b0bc6f" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-04-14 13:30:17" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PRESSURE_MEASURE_CODE,category Subpartition columns"/>
                        <category _I_D="380ed83b-1fef-4853-8387-ca810240ae29" name="Constraints" order-num="4" child-type="constraint" transformed="2022-04-14 13:30:17" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PRESSURE_MEASURE_CODE,category Constraints">
                            <constraint _I_D="be26c0f8-81fe-4109-b2db-e97f411c02f9" name="pk_pressure_measure_code" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-04-14 13:30:17" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PRESSURE_MEASURE_CODE,category Constraints,constraint PK_PRESSURE_MEASURE_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:30:47">
                                <category _I_D="a04988b5-fd5e-4f88-b774-38706287d007" name="Columns" order-num="0" transformed="2022-04-14 13:30:17" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PRESSURE_MEASURE_CODE,category Constraints,constraint PK_PRESSURE_MEASURE_CODE,category Columns">
                                    <column _I_D="87d10385-032b-4636-85bd-cf140b4727d3" name="pressure_meas_cd" transformed="2022-04-14 13:30:17" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PRESSURE_MEASURE_CODE,category Constraints,constraint PK_PRESSURE_MEASURE_CODE,category Columns,column PRESSURE_MEAS_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="17da2efd-de20-4e2b-b747-f563c7a06909" name="Indexes" order-num="5" child-type="index" transformed="2022-04-14 13:30:17" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PRESSURE_MEASURE_CODE,category Indexes"/>
                        <category _I_D="f0ac0037-8d59-4480-a649-06d127245527" name="Triggers" order-num="6" child-type="trigger" transformed="2022-04-14 13:30:17" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PRESSURE_MEASURE_CODE,category Triggers"/>
                        <category _I_D="bdef6c82-13ed-49b4-b819-5ba776ceb0d7" name="Partitions" order-num="7" child-type="partition" transformed="2022-04-14 13:30:17" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PRESSURE_MEASURE_CODE,category Partitions"/>
                    </table>
                    <table _I_D="26b9c610-c44d-45e4-a602-bb9ccdbafa0a" name="probe_type_code" transformed="2022-04-14 13:31:53" is-typed="N" comment="Lookup table of reference methods for probe types." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PROBE_TYPE_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:32:13">
                        <category _I_D="e5757b1d-5a3e-4584-a0cb-e7c56c3a7bf0" name="Columns" order-num="0" child-type="column" transformed="2022-04-14 13:31:53" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PROBE_TYPE_CODE,category Columns">
                            <column _I_D="000b75b4-eb51-4515-9884-bd8cafebbdbc" name="probe_type_cd" table-schema="CAMDECMPSMD" table-name="PROBE_TYPE_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-04-14 13:31:53" ordinal-position="1" is-nullable="N" comment="Code used to identify a probe type. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PROBE_TYPE_CODE,category Columns,column PROBE_TYPE_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="04175197-e7d8-45d5-9fa0-0c34e98eeb01" name="probe_type_cd_description" table-schema="CAMDECMPSMD" table-name="PROBE_TYPE_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-04-14 13:31:53" ordinal-position="2" is-nullable="N" comment="Description of probe type code. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PROBE_TYPE_CODE,category Columns,column PROBE_TYPE_CD_DESCRIPTION" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="dcbf27c6-d437-4c0c-8eaa-a80a8945285b" name="Partition columns" order-num="1" child-type="column" transformed="2022-04-14 13:31:53" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PROBE_TYPE_CODE,category Partition columns"/>
                        <category _I_D="d4f0979c-cfb1-4511-8e8c-f92b9f6e003b" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-04-14 13:31:53" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PROBE_TYPE_CODE,category Subpartition columns"/>
                        <category _I_D="765118b9-b6cd-4be5-b00a-5ef9369942a5" name="Constraints" order-num="4" child-type="constraint" transformed="2022-04-14 13:31:53" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PROBE_TYPE_CODE,category Constraints">
                            <constraint _I_D="8d0c946d-82d3-472d-b4b1-f1e2ffe037ef" name="pk_probe_type_code" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-04-14 13:31:53" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PROBE_TYPE_CODE,category Constraints,constraint PK_PROBE_TYPE_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:32:13">
                                <category _I_D="4b308d9d-3486-45a4-9c8e-d3ce8602f78c" name="Columns" order-num="0" transformed="2022-04-14 13:31:53" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PROBE_TYPE_CODE,category Constraints,constraint PK_PROBE_TYPE_CODE,category Columns">
                                    <column _I_D="0bb4e532-7891-4694-883c-e2baea1a3ea0" name="probe_type_cd" transformed="2022-04-14 13:31:53" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PROBE_TYPE_CODE,category Constraints,constraint PK_PROBE_TYPE_CODE,category Columns,column PROBE_TYPE_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="ebced3bd-bd60-4da5-8d34-95e374e53971" name="Indexes" order-num="5" child-type="index" transformed="2022-04-14 13:31:53" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PROBE_TYPE_CODE,category Indexes"/>
                        <category _I_D="d144ff3b-163c-4b0d-a782-74e387df84a4" name="Triggers" order-num="6" child-type="trigger" transformed="2022-04-14 13:31:53" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PROBE_TYPE_CODE,category Triggers"/>
                        <category _I_D="880a214d-2606-4d0f-8fbf-18b663cdf89c" name="Partitions" order-num="7" child-type="partition" transformed="2022-04-14 13:31:53" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table PROBE_TYPE_CODE,category Partitions"/>
                    </table>
                    <table _I_D="0733f2f1-ac83-4399-b507-e931e495afa9" name="qa_cert_event_supp_data_code" transformed="2022-04-14 13:33:58" is-typed="N" comment="Lookup table for QA certification event supplemental data type." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_SUPP_DATA_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:34:41">
                        <category _I_D="88956895-96b4-4e3d-a313-3caf34373d30" name="Columns" order-num="0" child-type="column" transformed="2022-04-14 13:33:58" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_SUPP_DATA_CODE,category Columns">
                            <column _I_D="c86e5c83-90f0-4c5c-9659-0e32cc24cde1" name="qa_cert_event_supp_data_cd" table-schema="CAMDECMPSMD" table-name="QA_CERT_EVENT_SUPP_DATA_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-04-14 13:33:58" ordinal-position="1" is-nullable="N" comment="Code used to identify the QA certification event supplemental data type." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_SUPP_DATA_CODE,category Columns,column QA_CERT_EVENT_SUPP_DATA_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="e671180a-1a36-4746-a7d9-d53142224a31" name="qa_cert_event_supp_data_desc" table-schema="CAMDECMPSMD" table-name="QA_CERT_EVENT_SUPP_DATA_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-04-14 13:33:58" ordinal-position="2" is-nullable="N" comment="Description of lookup code." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_SUPP_DATA_CODE,category Columns,column QA_CERT_EVENT_SUPP_DATA_DESC" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="528ad8a3-b447-4493-b0a7-969474575804" name="Partition columns" order-num="1" child-type="column" transformed="2022-04-14 13:33:58" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_SUPP_DATA_CODE,category Partition columns"/>
                        <category _I_D="8549c9ad-06f7-44b1-882e-b41ff114278b" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-04-14 13:33:58" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_SUPP_DATA_CODE,category Subpartition columns"/>
                        <category _I_D="6be4f442-7d52-4a13-9ad5-8ee1d49da6b2" name="Constraints" order-num="4" child-type="constraint" transformed="2022-04-14 13:33:58" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_SUPP_DATA_CODE,category Constraints">
                            <constraint _I_D="85296a5f-97fc-4848-917e-7d5d6f6b8daf" name="pk_qa_cert_event_supp_data_cd" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-04-14 13:33:58" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_SUPP_DATA_CODE,category Constraints,constraint PK_QA_CERT_EVENT_SUPP_DATA_CD" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:34:41">
                                <category _I_D="64cfd933-0387-49e0-995d-8442a4c9630f" name="Columns" order-num="0" transformed="2022-04-14 13:33:58" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_SUPP_DATA_CODE,category Constraints,constraint PK_QA_CERT_EVENT_SUPP_DATA_CD,category Columns">
                                    <column _I_D="f9b7bb72-4a66-4a46-941d-d7ec8f433fa4" name="qa_cert_event_supp_data_cd" transformed="2022-04-14 13:33:58" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_SUPP_DATA_CODE,category Constraints,constraint PK_QA_CERT_EVENT_SUPP_DATA_CD,category Columns,column QA_CERT_EVENT_SUPP_DATA_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="5027dc0c-59a4-4045-87da-6dba89261cd4" name="Indexes" order-num="5" child-type="index" transformed="2022-04-14 13:33:58" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_SUPP_DATA_CODE,category Indexes"/>
                        <category _I_D="4261521a-97d2-4910-92d7-06f635c46c60" name="Triggers" order-num="6" child-type="trigger" transformed="2022-04-14 13:33:58" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_SUPP_DATA_CODE,category Triggers"/>
                        <category _I_D="9e1b436a-5a8c-4728-9ef3-4580a7a46275" name="Partitions" order-num="7" child-type="partition" transformed="2022-04-14 13:33:58" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table QA_CERT_EVENT_SUPP_DATA_CODE,category Partitions"/>
                    </table>
                    <table _I_D="065abbb9-a7e0-4e99-b6ce-0e65c14f6739" name="rata_frequency_code" transformed="2022-04-14 13:36:49" is-typed="N" comment="Lookup table that indicates whether the RATA requires a test in two or four quarters." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RATA_FREQUENCY_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:37:20">
                        <category _I_D="212acd14-fb28-4eab-8ffe-d7b9978456ff" name="Columns" order-num="0" child-type="column" transformed="2022-04-14 13:36:49" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RATA_FREQUENCY_CODE,category Columns">
                            <column _I_D="88cf222f-a8d9-41a4-b048-5594db2bdfb6" name="rata_frequency_cd" table-schema="CAMDECMPSMD" table-name="RATA_FREQUENCY_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-04-14 13:36:49" ordinal-position="1" is-nullable="N" comment="Code used to identify RATA frequency. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RATA_FREQUENCY_CODE,category Columns,column RATA_FREQUENCY_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="d3f91f18-596a-4210-921e-9bdb0f5b81ae" name="rata_frequency_cd_description" table-schema="CAMDECMPSMD" table-name="RATA_FREQUENCY_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-04-14 13:36:49" ordinal-position="2" is-nullable="Y" comment="Description of RATA frequency code. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RATA_FREQUENCY_CODE,category Columns,column RATA_FREQUENCY_CD_DESCRIPTION" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="20b7b81b-4581-429e-b9a8-5d7f7d21bc11" name="Partition columns" order-num="1" child-type="column" transformed="2022-04-14 13:36:49" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RATA_FREQUENCY_CODE,category Partition columns"/>
                        <category _I_D="663984ae-ead7-4245-8415-7459967030e3" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-04-14 13:36:49" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RATA_FREQUENCY_CODE,category Subpartition columns"/>
                        <category _I_D="a65566c5-de64-4663-aa71-218d49d20780" name="Constraints" order-num="4" child-type="constraint" transformed="2022-04-14 13:36:49" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RATA_FREQUENCY_CODE,category Constraints">
                            <constraint _I_D="aa9035d0-4ab4-4ff6-8cb2-972c44340136" name="pk_rata_frequency_code" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-04-14 13:36:49" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RATA_FREQUENCY_CODE,category Constraints,constraint PK_RATA_FREQUENCY_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:37:20">
                                <category _I_D="4a170c78-b98c-454e-b7b3-265a1e90dcf1" name="Columns" order-num="0" transformed="2022-04-14 13:36:49" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RATA_FREQUENCY_CODE,category Constraints,constraint PK_RATA_FREQUENCY_CODE,category Columns">
                                    <column _I_D="5079da8f-523c-4b70-b698-940c412c38a3" name="rata_frequency_cd" transformed="2022-04-14 13:36:49" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RATA_FREQUENCY_CODE,category Constraints,constraint PK_RATA_FREQUENCY_CODE,category Columns,column RATA_FREQUENCY_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="9b233d48-3598-4a1e-b3f0-77da2b581e88" name="Indexes" order-num="5" child-type="index" transformed="2022-04-14 13:36:49" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RATA_FREQUENCY_CODE,category Indexes"/>
                        <category _I_D="0ca361b4-92fd-41d9-bb47-f2a5508fe170" name="Triggers" order-num="6" child-type="trigger" transformed="2022-04-14 13:36:49" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RATA_FREQUENCY_CODE,category Triggers"/>
                        <category _I_D="e2a97eca-ea48-44ed-aa87-b6ab5da54581" name="Partitions" order-num="7" child-type="partition" transformed="2022-04-14 13:36:49" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RATA_FREQUENCY_CODE,category Partitions"/>
                    </table>
                    <table _I_D="c17b343b-e727-46df-a484-b340694c28c6" name="ref_method_code" transformed="2022-04-14 13:38:16" is-typed="N" comment="Lookup table of reference methods." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REF_METHOD_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:38:36">
                        <category _I_D="35ec1e6e-efab-4065-99d6-937e4a169846" name="Columns" order-num="0" child-type="column" transformed="2022-04-14 13:38:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REF_METHOD_CODE,category Columns">
                            <column _I_D="136431ed-582e-447a-ae6a-d74fa5fad798" name="ref_method_cd" table-schema="CAMDECMPSMD" table-name="REF_METHOD_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-04-14 13:38:16" ordinal-position="1" is-nullable="N" comment="Code used to identify a reference method. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REF_METHOD_CODE,category Columns,column REF_METHOD_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="605f6cad-b96f-4e61-931d-194fa263c615" name="ref_method_cd_description" table-schema="CAMDECMPSMD" table-name="REF_METHOD_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-04-14 13:38:16" ordinal-position="2" is-nullable="N" comment="Description of reference method code. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REF_METHOD_CODE,category Columns,column REF_METHOD_CD_DESCRIPTION" mdl-applying-result="applying-success"/>
                            <column _I_D="4ea53c63-8c41-42a4-b565-6c458d410795" name="parameter_cd" table-schema="CAMDECMPSMD" table-name="REF_METHOD_CODE" dt-name="CHARACTER VARYING" dt-attr-1="9" transformed="2022-04-14 13:38:16" ordinal-position="3" is-nullable="Y" comment="Unique code value for a lookup table." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REF_METHOD_CODE,category Columns,column PARAMETER_CD" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="1d8a9b88-c04c-465f-aec2-d1b16c1cdd99" name="Partition columns" order-num="1" child-type="column" transformed="2022-04-14 13:38:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REF_METHOD_CODE,category Partition columns"/>
                        <category _I_D="afff202e-2319-4357-b6b0-6d100ff810d8" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-04-14 13:38:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REF_METHOD_CODE,category Subpartition columns"/>
                        <category _I_D="35d983d0-a895-4bcc-a970-4e3806817f40" name="Constraints" order-num="4" child-type="constraint" transformed="2022-04-14 13:38:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REF_METHOD_CODE,category Constraints">
                            <constraint _I_D="8ede4938-a436-421c-8706-a2ee311b0f3b" name="pk_ref_method_code" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-04-14 13:38:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REF_METHOD_CODE,category Constraints,constraint PK_REF_METHOD_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:38:36">
                                <category _I_D="f70cf73e-52a4-4a82-909a-95114ccf122b" name="Columns" order-num="0" transformed="2022-04-14 13:38:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REF_METHOD_CODE,category Constraints,constraint PK_REF_METHOD_CODE,category Columns">
                                    <column _I_D="2f7c79c6-299c-45e7-a366-e1d80d207e49" name="ref_method_cd" transformed="2022-04-14 13:38:16" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REF_METHOD_CODE,category Constraints,constraint PK_REF_METHOD_CODE,category Columns,column REF_METHOD_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="b2ad7651-953e-4c3e-a06e-959ef3613834" name="Indexes" order-num="5" child-type="index" transformed="2022-04-14 13:38:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REF_METHOD_CODE,category Indexes">
                            <index _I_D="aead6fff-09d6-4eb5-a0f7-5dcbbbaa9f9b" name="idx_ref_method_cod_parameter" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-04-14 13:38:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REF_METHOD_CODE,category Indexes,index IDX_REF_METHOD_COD_PARAMETER" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:38:36">
                                <category _I_D="19c8d2ec-28bc-4371-8e74-409e6b9127ac" name="Columns" order-num="0" transformed="2022-04-14 13:38:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REF_METHOD_CODE,category Indexes,index IDX_REF_METHOD_COD_PARAMETER,category Columns">
                                    <column _I_D="2664e302-add4-4c42-b7d3-b7bde0ce8130" name="parameter_cd" transformed="2022-04-14 13:38:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REF_METHOD_CODE,category Indexes,index IDX_REF_METHOD_COD_PARAMETER,category Columns,column PARAMETER_CD" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                        </category>
                        <category _I_D="8775d9d4-7bd7-4e6a-9dd3-95a471f20838" name="Triggers" order-num="6" child-type="trigger" transformed="2022-04-14 13:38:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REF_METHOD_CODE,category Triggers"/>
                        <category _I_D="5927b5ae-c0e5-4d5f-90a3-be3e58e97d9c" name="Partitions" order-num="7" child-type="partition" transformed="2022-04-14 13:38:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REF_METHOD_CODE,category Partitions"/>
                    </table>
                    <table _I_D="30a9290a-561e-426e-935c-32fbc8f1cc7a" name="required_test_code" transformed="2022-04-14 13:40:00" is-typed="N" comment="Required test for an event." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REQUIRED_TEST_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:40:34">
                        <category _I_D="29911125-eb98-416b-874a-aeb31eba7e1b" name="Columns" order-num="0" child-type="column" transformed="2022-04-14 13:40:00" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REQUIRED_TEST_CODE,category Columns">
                            <column _I_D="d2503ce4-a3e8-4ad8-9bad-af8b810e7012" name="required_test_cd" table-schema="CAMDECMPSMD" table-name="REQUIRED_TEST_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-04-14 13:40:00" ordinal-position="1" is-nullable="N" comment="Code used to identify the test(s) required due to the event. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REQUIRED_TEST_CODE,category Columns,column REQUIRED_TEST_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="930a18c3-2d61-47f7-8e6e-218f8fa8c226" name="required_test_cd_description" table-schema="CAMDECMPSMD" table-name="REQUIRED_TEST_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-04-14 13:40:00" ordinal-position="2" is-nullable="N" comment="Description of lookup code. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REQUIRED_TEST_CODE,category Columns,column REQUIRED_TEST_CD_DESCRIPTION" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="2d21bfef-ebcf-46e6-bce4-ade61d517045" name="Partition columns" order-num="1" child-type="column" transformed="2022-04-14 13:40:00" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REQUIRED_TEST_CODE,category Partition columns"/>
                        <category _I_D="8f27a8e3-99e2-4868-90cf-da59162b75bb" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-04-14 13:40:00" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REQUIRED_TEST_CODE,category Subpartition columns"/>
                        <category _I_D="91cb391a-920d-4dd9-ba4c-c35f83200f4d" name="Constraints" order-num="4" child-type="constraint" transformed="2022-04-14 13:40:00" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REQUIRED_TEST_CODE,category Constraints">
                            <constraint _I_D="fe98c626-59a9-4880-bc48-9facacb14b12" name="pk_required_test_code" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-04-14 13:40:00" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REQUIRED_TEST_CODE,category Constraints,constraint PK_REQUIRED_TEST_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:40:34">
                                <category _I_D="7093fea0-270d-4407-8f34-18c2f934f787" name="Columns" order-num="0" transformed="2022-04-14 13:40:00" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REQUIRED_TEST_CODE,category Constraints,constraint PK_REQUIRED_TEST_CODE,category Columns">
                                    <column _I_D="7328d08a-29e8-45c3-8a32-296d1358c26a" name="required_test_cd" transformed="2022-04-14 13:40:00" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REQUIRED_TEST_CODE,category Constraints,constraint PK_REQUIRED_TEST_CODE,category Columns,column REQUIRED_TEST_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="80e14590-7d29-41ba-865b-35ffc893090b" name="Indexes" order-num="5" child-type="index" transformed="2022-04-14 13:40:00" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REQUIRED_TEST_CODE,category Indexes"/>
                        <category _I_D="41f9b161-082f-476e-9f00-c618918806da" name="Triggers" order-num="6" child-type="trigger" transformed="2022-04-14 13:40:00" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REQUIRED_TEST_CODE,category Triggers"/>
                        <category _I_D="9247114e-8436-4a21-a74c-19cc8002e438" name="Partitions" order-num="7" child-type="partition" transformed="2022-04-14 13:40:00" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table REQUIRED_TEST_CODE,category Partitions"/>
                    </table>
                    <table _I_D="8c3a451c-aca1-43bb-a7ca-0229da18b26b" name="run_status_code" transformed="2022-04-14 13:41:58" is-typed="N" comment="Lookup table for run status flag." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RUN_STATUS_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:42:17">
                        <category _I_D="b2748dba-29a1-464b-99ea-f0ea735f4175" name="Columns" order-num="0" child-type="column" transformed="2022-04-14 13:41:58" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RUN_STATUS_CODE,category Columns">
                            <column _I_D="323f019c-cf5a-4aa8-ba93-7c8de6854f44" name="run_status_cd" table-schema="CAMDECMPSMD" table-name="RUN_STATUS_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-04-14 13:41:58" ordinal-position="1" is-nullable="N" comment="Code used to identify run status. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RUN_STATUS_CODE,category Columns,column RUN_STATUS_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="ac78b2e4-394d-40b4-97c4-75a634227a87" name="run_status_description" table-schema="CAMDECMPSMD" table-name="RUN_STATUS_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-04-14 13:41:58" ordinal-position="2" is-nullable="Y" comment="Description of run status code. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RUN_STATUS_CODE,category Columns,column RUN_STATUS_DESCRIPTION" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="22097143-a76e-4fea-b2ad-1259bb732c1e" name="Partition columns" order-num="1" child-type="column" transformed="2022-04-14 13:41:58" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RUN_STATUS_CODE,category Partition columns"/>
                        <category _I_D="d2374acf-2868-4042-a205-dc5068f1ff1b" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-04-14 13:41:58" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RUN_STATUS_CODE,category Subpartition columns"/>
                        <category _I_D="98f99fb6-30ea-41f3-a34b-fd38b8dcdb56" name="Constraints" order-num="4" child-type="constraint" transformed="2022-04-14 13:41:58" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RUN_STATUS_CODE,category Constraints">
                            <constraint _I_D="56d216f8-a463-40bf-aab6-142917e1cf66" name="pk_run_status_code" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-04-14 13:41:58" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RUN_STATUS_CODE,category Constraints,constraint PK_RUN_STATUS_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:42:17">
                                <category _I_D="4c703609-5913-4623-8dfc-4b790764a684" name="Columns" order-num="0" transformed="2022-04-14 13:41:58" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RUN_STATUS_CODE,category Constraints,constraint PK_RUN_STATUS_CODE,category Columns">
                                    <column _I_D="43bfdfdc-0c49-445b-98b0-e67e549033ef" name="run_status_cd" transformed="2022-04-14 13:41:58" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RUN_STATUS_CODE,category Constraints,constraint PK_RUN_STATUS_CODE,category Columns,column RUN_STATUS_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="970ca301-4508-4cc8-b97d-1845b6c35fa1" name="Indexes" order-num="5" child-type="index" transformed="2022-04-14 13:41:58" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RUN_STATUS_CODE,category Indexes"/>
                        <category _I_D="0cfb0486-b289-4420-bb4a-544c4ad2ee42" name="Triggers" order-num="6" child-type="trigger" transformed="2022-04-14 13:41:58" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RUN_STATUS_CODE,category Triggers"/>
                        <category _I_D="c6c4375c-f384-4a35-ba14-a9543ba1a674" name="Partitions" order-num="7" child-type="partition" transformed="2022-04-14 13:41:58" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table RUN_STATUS_CODE,category Partitions"/>
                    </table>
                    <table _I_D="dab8c754-382a-48e2-acb4-041111fbae50" name="test_claim_code" transformed="2022-04-14 13:43:33" is-typed="N" comment="Lookup table for test claim codes." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TEST_CLAIM_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:43:54">
                        <category _I_D="000b8188-561c-438a-960f-218e8572e70d" name="Columns" order-num="0" child-type="column" transformed="2022-04-14 13:43:33" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TEST_CLAIM_CODE,category Columns">
                            <column _I_D="44dd2239-9c88-4e78-b15b-bc1826f64c10" name="test_claim_cd" table-schema="CAMDECMPSMD" table-name="TEST_CLAIM_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-04-14 13:43:33" ordinal-position="1" is-nullable="N" comment="Code used to indicate the type of test claim (i.e., single load, normal load exemption or operating range exemption). " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TEST_CLAIM_CODE,category Columns,column TEST_CLAIM_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="674d532a-cbd6-4f72-980c-9e6b873da0a7" name="test_claim_cd_description" table-schema="CAMDECMPSMD" table-name="TEST_CLAIM_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-04-14 13:43:33" ordinal-position="2" is-nullable="N" comment="Description of lookup code. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TEST_CLAIM_CODE,category Columns,column TEST_CLAIM_CD_DESCRIPTION" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="e7db3a2e-4c7e-448f-a391-9c88cc9696d6" name="Partition columns" order-num="1" child-type="column" transformed="2022-04-14 13:43:33" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TEST_CLAIM_CODE,category Partition columns"/>
                        <category _I_D="ca93e6f6-b3c0-4899-b708-cd790bcfb495" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-04-14 13:43:33" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TEST_CLAIM_CODE,category Subpartition columns"/>
                        <category _I_D="de2f33a4-c6ae-4cbf-b2a0-4c109912ff31" name="Constraints" order-num="4" child-type="constraint" transformed="2022-04-14 13:43:33" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TEST_CLAIM_CODE,category Constraints">
                            <constraint _I_D="18297dc5-62fe-4b48-bfa3-6fac7d5faa8d" name="pk_test_claim_code" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-04-14 13:43:33" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TEST_CLAIM_CODE,category Constraints,constraint PK_TEST_CLAIM_CODE" mdl-applying-result="applying-success" mdl-applied="2022-04-14 13:43:54">
                                <category _I_D="26892ab2-28bc-49f2-895b-e3cb8636deeb" name="Columns" order-num="0" transformed="2022-04-14 13:43:33" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TEST_CLAIM_CODE,category Constraints,constraint PK_TEST_CLAIM_CODE,category Columns">
                                    <column _I_D="70d0399b-4047-4af2-8d89-3586281baca8" name="test_claim_cd" transformed="2022-04-14 13:43:33" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TEST_CLAIM_CODE,category Constraints,constraint PK_TEST_CLAIM_CODE,category Columns,column TEST_CLAIM_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="981cd859-9d9e-4537-a897-7ab280c0447b" name="Indexes" order-num="5" child-type="index" transformed="2022-04-14 13:43:33" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TEST_CLAIM_CODE,category Indexes"/>
                        <category _I_D="987eb948-dd08-435b-98ef-17af38156483" name="Triggers" order-num="6" child-type="trigger" transformed="2022-04-14 13:43:33" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TEST_CLAIM_CODE,category Triggers"/>
                        <category _I_D="e892dfdf-11a9-457f-a263-0e0b90974c93" name="Partitions" order-num="7" child-type="partition" transformed="2022-04-14 13:43:33" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TEST_CLAIM_CODE,category Partitions"/>
                    </table>
                </category>
                <category _I_D="c715a58e-3306-4dbb-b1fe-af74022d9710" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="e33e961d-b8bc-42fb-82de-03b97167a07b" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="f599d3a3-bbd8-4dd5-824c-526038b7bc14" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="05f8d5c2-b1a3-4db4-926a-6b2ffedcac91" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="cde554ee-81a3-4e90-9084-94496d177938" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="7dfe9f87-224f-43ea-acf3-c7c75f9e62c6" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="90818b6e-31fe-4f34-8143-64f5e13e544b" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="14e14290-ac1d-489f-9be5-faa40ac4d24d" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="5ec2448c-c104-49f1-bb41-79fc0ce4003e" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="1e2de38e-eca0-44a9-823b-e30e475b9731" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="ad69c506-580d-44ea-aab8-7bc09ddb6236" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="6fa353b3-431c-4fd6-a678-3d9eccf54a66" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="a9545444-9dbb-4dbd-adc8-5a61bdaebc37" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="ac61dbf8-72e3-4c0b-bca3-1e741ffc1ff5" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="97ced22a-7651-46f4-b9a7-e13dd1ed671f" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="542b5b8d-eaea-4b67-94ee-fa8ae15cb5c4" name="camdecmpswks" context="camdecmpswks" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="165d581a-2544-4944-94ec-2effbfb45248" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="2fc5fe22-baf6-422d-9652-e0713689932d" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="11154270-bc5a-4dca-9aca-98686db5e5d1" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="2418c963-1d91-4794-bbb7-ff0892da7f43" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="193c6d76-5c10-493c-b06c-c4f00b2f7191" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="ec39da47-cb1a-4051-aac1-a8f2b09a4388" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="c8f4ff37-6fe8-49fa-b902-819a32edae9a" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="51c4f4a2-d611-4768-895a-735dbadc7d60" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="2d145076-fef1-40a0-8416-b035ef6427b5" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="05900f30-b9fa-4a9f-8277-e2b052014f31" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="6393d268-7ff9-48e4-bc0a-bdc853f50969" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="83455ad7-b096-448c-ba3a-0636e3ef93bf" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="2e7bd900-c662-437a-81c6-b39c44bedd1c" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="615824c9-3a28-4ba3-abb3-ba3b20c42506" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="af2c3152-d51c-4120-ab0d-7c0022872f1e" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="fe2e980f-caa3-420d-9c9a-5a24620197c5" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="79be9de3-398a-427a-840c-60655ac89dbb" name="camdmd" context="camdmd" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="5942dd1f-e8e4-44f8-8b57-f98b594370e9" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="d95ecd60-f6d5-4df8-adc5-8ca8a08b951e" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="c6a1b6c7-821d-41b2-bebf-e6284493ea33" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="71394512-464e-45a7-a927-27aeb40d8b83" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="028b1d78-aea6-4512-b220-373561746610" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="7afacf06-318d-4b97-b8d0-55280b9f9f72" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="c1740547-1ab7-4ac9-a3eb-5800ecc66255" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="d406e798-b5b0-462a-b182-b872abbb44d8" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="931d54d0-2885-4ccd-aa6f-28c75911027a" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="f8a8fcdc-bcfb-4b41-adda-f1894b48708a" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="c33a9814-e03a-483c-929c-5e054e0f7c7e" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="bf05e6b8-b521-47f9-945b-8bcac371e0b1" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="eb35efe5-7ee7-4d09-938c-0280a824c1e6" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="1e2ad9bf-2468-41d6-ad85-34e9f8774909" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="3263e5d2-c8fb-4a53-9f85-f181e8735136" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="9dd333c1-ed25-4d56-ac44-f46cd9388a9c" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="c34c606f-321c-4ba4-8771-3ce6e36f8b16" name="public" context="public" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="0e5e30ac-640f-4348-aef5-7711be9823dd" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="fb444469-f73b-45f8-bd5f-516bc79924a7" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="969cd96c-53b9-44c8-beb1-ad201f4a9d0a" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="84116114-79a1-4426-a4f0-8d5831d61c91" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="35a2fce0-1a6c-4c46-90ac-014453dfe10b" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="e47d9bb6-d335-4030-86a6-3df482de76cd" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="1c14e4b8-d02c-4151-b866-389616ded1b1" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="7ef0ab90-138b-489e-8ded-8d860f3607c6" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="1f4d786f-88ea-48ae-a3fb-32801208e284" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="513f7c54-de1f-47e9-b312-d83bc3cf153a" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="75c574ab-17c8-4715-a780-ac441510b04c" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="b9c6cab1-837f-4023-9a26-3e5c4831750f" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="7d308c96-e3fc-4c98-ad25-9939ebb5cec3" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="a67ead1d-ce3d-4a4b-a789-1d0f81fce71d" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="53a5a8a3-ac8a-4717-90db-ad71455427a5" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="e39e6d32-bfa0-464a-a069-bb2817b47881" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
        </category>
        <category _I_D="f7993fc1-0a9a-4072-8d49-84355ed9131a" name="Foreign Servers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="foreign-server"/>
        <category-group _I_D="fbe34b19-2d0e-42fd-ac24-0bae53cef6f7" name="Server Level Objects" order-num="2" objects-loading="none" subcategories-loading="none">
            <category _I_D="156ac9c9-dc16-4972-a2d9-9b42a8c0d67b" name="Contexts" order-num="0" objects-loading="none" subcategories-loading="none" child-type="context"/>
        </category-group>
        <category _I_D="0043fb20-09e1-49ac-a933-b7577849c4c5" name="SQL Scripts" script-root="true" disable-autocommit="true" data-format="DD-MON-RR" sql-plus-settings="{&quot;tnsAliases&quot;:[]}"/>
    </metadata>
</tree>