<?xml version="1.0" encoding="UTF-8"?>
<tree>
    <complex-attributes>
        <type name="materialized-view">
            <attr name="sql"></attr>
        </type>
        <type name="metadata">
            <attr name="vendor-engine"></attr>
        </type>
        <type name="view">
            <attr name="sql"></attr>
        </type>
        <type name="function">
            <attr name="sql"></attr>
        </type>
        <type name="constraint">
            <attr name="check-clause"></attr>
        </type>
        <type name="trigger">
            <attr name="trigger-definition"></attr>
            <attr name="comment"></attr>
            <attr name="sql"></attr>
        </type>
        <type name="procedure">
            <attr name="sql"></attr>
        </type>
    </complex-attributes>
    <metadata _I_D="0794f4bc-c997-4483-9c43-2f1736ca5e10" vendor="POSTGRESQL" nonquoted-case="lower" allow-similarly-named-objects="y" quoted-case="specified" name="uImcwuf4K9dyaxeL@localhost:15210/cgawsbrokerprodr97macy19l" product-version="12.3.0.0" vendor-engine-version="12.3" last-update-tree="2022-04-19 14:11:53" max-identifier-length="63">
        <complex-attribute name="vendor-engine"><![CDATA[PostgreSQL 12.3 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11), 64-bit]]></complex-attribute>
        <category _I_D="1100122a-b4ac-42fe-93cb-fcaef5b5a62c" name="Schemas" order-num="0" objects-loading="extended" subcategories-loading="none" child-type="schema">
            <schema _I_D="86b86f47-2ee1-4df3-9492-af8a3c98d6bd" name="aws_oracle_context" context="aws_oracle_context" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="1c1bc6c7-658a-4816-91b1-da9551936b16" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="f9479d8b-fb65-4ed8-b80c-7734013c8373" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="00e9fa76-cc29-493d-bd36-423e2d083fd9" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="2f008869-e66f-4f28-acfe-fd9ca14c1b5a" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="2bfa6e83-47db-4eda-ba51-8870a55fe374" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="dd1f4503-e724-488e-8cd8-20d285f61ff9" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="0026d06f-bad3-47da-92fa-f436e0575c73" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="bd1b7596-5ebb-4ae8-807e-624552d1ca82" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="250b8160-3218-411c-a3c7-fc81068c4dcf" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="5ec092d9-d854-4af1-b780-01442b1cf0f6" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="986a6188-3aef-4c19-af5c-6bff7ff8ef8c" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="c6733552-2880-4abc-aad3-406bf10b8936" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="a1644b73-e23f-4574-b28b-138aada98294" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="99690f37-d910-452f-93f6-b78de32c935b" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="1e60e2cd-8d82-42a8-8257-f25a6e812b32" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="de9e4048-7912-4701-89c9-fc26a4782b8f" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="f7b03c37-9a5e-4529-b13b-a257217a9376" name="aws_oracle_data" context="aws_oracle_data" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="94d8558c-2410-44d0-b0a7-c6c5fefda8ce" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="fb071b84-f9fe-4e1b-9eea-98cf066ab705" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="9881321e-687a-4913-8ae6-84a5ffad6448" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="414dee51-efd7-485d-8bb7-ed87c8e0ce90" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="1c11169f-a146-4369-b20f-8b1a4c3cfa11" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="6420430e-87d1-4ab2-8548-5c44e3424fe9" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="a957f87d-517b-47de-928d-638a8b97f7db" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="ff8f40e6-5164-47f6-ad35-e1f6be55064e" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="724cdb68-e5cd-440f-b8fa-42e0c445f145" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="43779cef-64c0-420f-937d-3fc09e76924b" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="6c3d3cf3-ccb9-42bf-b677-6481a3ad2f33" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="5334fd5d-38b9-4b7d-9ccd-b76c1b1682e6" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="763170ad-3533-4071-93f5-58441a148077" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="c13219fe-38a8-4e69-94a0-2f219409d3aa" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="c5a8745b-8ced-4c69-93a6-de40ff0606df" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="f265c62a-aa5f-460c-a5fa-e0592811899f" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="1ea6762e-be96-4314-9b4f-7033e51ebc1d" name="aws_oracle_ext" context="aws_oracle_ext" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="39c172b9-50f4-490e-a71b-47877b8704c1" name="Tables" order-num="0" objects-loading="extended" subcategories-loading="none" child-type="table">
                    <table _I_D="b832d92b-adc3-4f68-91c6-db96599eda55" name="charset_mapping" context="charset_mapping" subcategories-loading="none" object-loading="extended" is-typed="NO" comment="Oracle - PostgreSQL Charset mapping" partitioned="NO" is-unlogged="NO">
                        <category _I_D="62247b98-746f-493b-b79d-24ded59eed9d" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="df209fdf-d231-4ea5-b830-bd547e195479" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="22aaa137-47ee-49e1-a38a-7bd3b20ed256" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bb2a4711-e035-4946-8ac4-2d38cb87adae" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="48871afc-65ea-4741-bac2-3d6b8dd1ad3f" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="4116a4f7-6f3c-4c09-bd05-4498b46ce84e" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="c7e6edb0-feeb-4b7e-916f-566538ad1177" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="649b53eb-2685-44c6-a460-6cb89325030d" name="directory" context="directory" subcategories-loading="none" object-loading="extended" is-typed="NO" partitioned="NO" is-unlogged="NO">
                        <category _I_D="e67b8318-e512-43c1-a5b9-010fb5170a32" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="20bbdad7-8952-4e66-b58b-ce959e34c04d" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="548ad5fe-c125-4eb8-a9b1-69373ca04457" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1e470b68-7523-42df-bba9-d0f127cf8696" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="c1116c4f-e49b-460d-943e-a72a6c844001" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="3faae398-bb21-4b29-9789-a6d975cec2a1" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="0365c6f6-7293-49de-ae12-0ec46e82a8ea" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="44a01ce2-073d-4131-8f90-d74a5b7052e1" name="format_models" context="format_models" subcategories-loading="none" object-loading="extended" is-typed="NO" comment="Possible format models for to_char from Oracle" partitioned="NO" is-unlogged="NO">
                        <category _I_D="65ae3645-90dc-464d-b964-c86f2881deb8" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="04ac0b37-a458-4f18-986b-484123263f71" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="450bed06-1f70-475c-aeb9-e9550de87ce9" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6bfff992-f8c0-4906-b3a8-6efee9f0196f" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="92397a40-16cf-4c9f-a150-133b6dcfc530" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="f6e06c9a-1793-4e82-b8a4-232b577b57dc" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="c0c72565-e8fa-4b82-99f6-dbc1449d7332" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="b4d93b12-8d61-47a3-a91d-78a5a97f858b" name="jobs" context="jobs" subcategories-loading="none" object-loading="extended" is-typed="NO" comment="Jobs to be executed periodically" partitioned="NO" is-unlogged="NO">
                        <category _I_D="679f1c81-2e5c-4d20-ac5f-f2ac03122edb" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3ef7ffca-d234-4b87-8388-cae9611fe1da" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d956ea85-8f05-414c-a5dc-e40115fc87d7" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ef9777c6-7195-4679-b96f-cdf57d719ba7" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="46884221-92e0-4b14-ba80-ec236ca866eb" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="c65fe904-ff3b-49d5-81ac-1dc38e8f8bbf" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="00b54478-77e8-4ab4-8ab6-54e61d198199" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f3e304fe-e3c7-483a-9b03-28ff6395b9fe" name="mail_messages" context="mail_messages" subcategories-loading="none" object-loading="extended" is-typed="NO" comment="Mail messages with their statuses" partitioned="NO" is-unlogged="NO">
                        <category _I_D="d38614f5-efb6-472a-93fc-ee5854052946" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4f6aa5c8-5d66-4a26-a1e4-c6d06042b0a7" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6dd2a660-dd73-4940-9dfb-442c237d9484" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e4b2e95f-454d-4a2c-b52d-797c9e9d5efb" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="594d162e-6712-4973-9afd-a57df278dabd" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="d3cbfb4f-4b59-4ddf-a4cc-3980e0149b14" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="a9864db4-7ca3-4423-95fc-30089b645f75" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="b7cd4dc2-6582-44ff-84fb-d0aec8283b78" name="mapped_error_codes" context="mapped_error_codes" subcategories-loading="none" object-loading="extended" is-typed="NO" comment="Error code mapping from Oracle built-in errors to PostgreSQL ones" partitioned="NO" is-unlogged="NO">
                        <category _I_D="98b7015b-e8ba-4308-ba72-1982d7d0845e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d4f7212d-f004-4e8e-8aa1-fb1e222346b9" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="27983d03-fd9f-4f6c-aca7-f9bb6392a912" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5f7ef191-0fc9-4ef0-95d6-a6301a8ebb97" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="536213e7-3ec0-49c8-9951-f78f4de568a1" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="a6c66c8c-3404-493f-a0a4-4d3d6060f5e9" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="513ca796-8daa-4ce8-ac73-ea9cf3958b03" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="065febc2-0734-44d5-9b2c-deaa9d800fb5" name="nls_parameters" context="nls_parameters" subcategories-loading="none" object-loading="extended" is-typed="NO" comment="Dictionary to store NLS related params transfered from Oracle" partitioned="NO" is-unlogged="NO">
                        <category _I_D="d18d6f9c-686d-4f41-9eb9-87e120441277" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6060f559-ba48-4cb4-8b9c-b66ac81387a4" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="439b99fd-019a-463c-b666-19005e4aebfd" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="97e8a867-db1b-4362-9ace-031ed0c0ea07" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="6b203b14-129a-44f1-b386-b807959b4239" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="f85d8b06-b006-4324-aa31-ead0b4e37256" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="a9ea70bc-9045-4461-b7e6-d15c1e719e43" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="6321f428-7275-4b48-9e12-9a55004740a6" name="plv8_js_modules" context="plv8_js_modules" subcategories-loading="none" object-loading="extended" is-typed="NO" partitioned="NO" is-unlogged="NO">
                        <category _I_D="ffdd9bd9-7af2-4e24-b9b1-950d4382e92a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e65d7dec-bbc6-437f-88e4-35563ec55e89" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9213ecc9-94c2-4d75-b43c-3d9ebf0ce59e" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cdd2da32-7b9f-48f8-8d2e-efbe60989bb1" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="a966e496-b3a8-4359-947a-3191fbb65d91" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="0af705fc-7acd-4658-b5da-16ff2edf0294" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="ae606a66-0991-4a54-a2a7-f9a7877afc0b" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="0b533f6d-af39-480d-b363-058967f53635" name="service_settings" context="service_settings" subcategories-loading="none" object-loading="extended" is-typed="NO" comment="Settings for Extension Pack services" partitioned="NO" is-unlogged="NO">
                        <category _I_D="fa557ecd-3d48-4864-99f3-b318d20e33eb" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="20177c3d-a843-4e84-a319-1954dbc086b4" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a36da210-52d0-4d98-82dc-699a087751a8" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="622d9c10-0a46-4e32-aea3-8e3e7037ff64" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="db2d5f3e-e4d1-46be-abdc-39dcfad4e6a7" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="2ff720fd-2b0f-49fa-be4d-508931692df9" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="fd93bc22-4d58-47b6-a768-e73063a81467" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="d8040506-76e9-4d29-b523-dffac337cb41" name="sqs_functions_settings" context="sqs_functions_settings" subcategories-loading="none" object-loading="extended" is-typed="NO" partitioned="NO" is-unlogged="NO">
                        <category _I_D="4f816985-5a9a-4e86-a168-f05e1a84b1b9" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3ac22355-b638-4c63-8f01-14242207dc6c" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f21f64ce-7c7e-4fe9-b251-b85865b43495" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="dad03409-09c3-4b9f-b13a-0a0cc3f21761" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="6b045e20-6eb9-4896-acf0-c343dd3720a1" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="354fadf4-df86-4590-876f-26ef76dbee7f" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="ec1c7b19-0991-476f-a7d1-8fe6b0be7487" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="8c8e3e81-5562-471d-932f-4103d7935c70" name="sqs_queues_settings" context="sqs_queues_settings" subcategories-loading="none" object-loading="extended" is-typed="NO" partitioned="NO" is-unlogged="NO">
                        <category _I_D="86aea5cc-c00d-4e01-99b4-3197297df91d" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="50ff2123-ba63-48d5-a895-4c71aed7c6ff" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7d07ce49-c820-48d7-95f6-aaa18b4f1e9f" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="db8c9a80-6ac5-4176-bdc6-d962a8deecee" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="ff923bc7-a3a8-4007-9bac-8251bc866e01" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="65ad0564-3ff2-46e9-8ffc-e3cfc7ed76ba" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="7fee0989-c5f9-41d2-9f2a-2aa2897fcf4e" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="b979e7cd-a524-45b5-8f4f-804b2e6915d2" name="sqs_queues_tables" context="sqs_queues_tables" subcategories-loading="none" object-loading="extended" is-typed="NO" partitioned="NO" is-unlogged="NO">
                        <category _I_D="d345c5d3-3980-4660-8ee4-256f5dea0ad6" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="49234984-4edd-4d45-a5ae-8f4a2877b45c" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="10cf5552-ed99-44e1-8d81-40ea6fb35014" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0fad5096-6063-475f-8787-39a9f30c174e" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="fe2e643b-61b7-437a-bc0f-9bf6345a382a" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="2e1bcc0b-c7f1-41b1-89a3-3bd6d0ce11a1" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="8883cdcf-e01f-4d22-bfe3-1d611be8e0e4" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="87371605-cb08-435c-b8ed-b0950b86fe2c" name="versions" context="versions" subcategories-loading="none" object-loading="extended" is-typed="NO" partitioned="NO" is-unlogged="NO">
                        <category _I_D="fdf75513-0b46-4a0b-9a6b-cbf66b40aad3" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="806727ed-a06a-4c0e-93c6-437ef616c2ec" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="100670c2-642c-48b8-8817-6eacdafe0c4f" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="eeedc066-dd8a-484e-97bc-01330cd7ef75" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="1a4f27f8-9909-495a-b438-5a3b23b2067d" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="fc54b0cc-5a47-42d3-b4f1-e415a44f5d5c" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="85c9196b-504f-4254-bdf7-4b0c6d80e7ee" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                </category>
                <category _I_D="06ecbb7f-639f-42f2-988a-e0c56f965451" name="Foreign tables" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="foreigntable"/>
                <category _I_D="34f2de4c-09ae-4aaf-890a-2a8c9fa97e8e" name="Views" order-num="2" objects-loading="extended" subcategories-loading="none" child-type="view">
                    <view _I_D="57e28894-17ef-4b4c-8bf0-926d738c00d7" name="all_sdo_geom_metadata" context="all_sdo_geom_metadata" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="Contains metadata information for all spatial tables on which the user has SELECT permission.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (p.tableowner)::character varying(32) AS owner,
    (g.f_table_name)::character varying(32) AS table_name,
    (g.f_geometry_column)::character varying(1024) AS column_name,
    NULL::text AS diminfo,
    (g.srid)::double precision AS srid
   FROM (geometry_columns g
     LEFT JOIN pg_tables p ON (((g.f_table_schema = p.schemaname) AND (g.f_table_name = p.tablename))));]]></complex-attribute>
                        <category _I_D="c25ba12c-592a-4b81-baed-3606dd1324cb" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="299c77a6-5370-4741-bc88-8ef2dcd0403a" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="54e10919-6d56-41dd-8088-b2019936fb56" name="all_sdo_index_info" context="all_sdo_index_info" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="Contains index information for all spatial tables on which the user has SELECT permission.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (p.tableowner)::character varying(32) AS sdo_index_owner,
    (pgis.indexname)::character varying(32) AS index_name,
    (gc.f_table_schema)::character varying(30) AS table_owner,
    (pgis.tablename)::character varying(30) AS table_name,
    (gc.f_geometry_column)::character varying(2048) AS column_name,
    'rtree'::character varying(32) AS sdo_index_type,
    NULL::character varying(32) AS sdo_index_table,
    (
        CASE pgi.indisvalid
            WHEN true THEN 'valid'::text
            WHEN false THEN 'invalid'::text
            ELSE NULL::text
        END)::character varying(32) AS sdo_index_status
   FROM (((((pg_indexes pgis
     JOIN geometry_columns gc ON (((pgis.schemaname = gc.f_table_schema) AND (pgis.tablename = gc.f_table_name))))
     LEFT JOIN pg_class t ON ((t.relname = pgis.tablename)))
     LEFT JOIN pg_index pgi ON ((t.oid = pgi.indrelid)))
     LEFT JOIN pg_class c ON (((pgi.indexrelid = c.oid) AND (c.relname = pgis.indexname))))
     LEFT JOIN pg_tables p ON (((gc.f_table_schema = p.schemaname) AND (gc.f_table_name = p.tablename))));]]></complex-attribute>
                        <category _I_D="e22ce285-6667-41d6-ad4b-8960c2f3458d" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f20915e6-0e9b-454b-8096-dd3cfb25110c" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="9c5afdde-0f38-4734-aa07-be6d3dcecaec" name="sqs_vw_queues_settings" context="sqs_vw_queues_settings" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE">
                        <complex-attribute name="sql"><![CDATA[ SELECT s.qname,
    s.qpurename,
    s.url,
    s.arn,
    s.qtype,
    t.tschema,
    t.tname,
    t.tdatatypeschema,
    t.tdatatypename,
    concat('"', t.tschema, '"', '.', '"', t.tname, '"') AS quoted_table_name,
    concat('"', t.tdatatypeschema, '"', '.', '"', t.tdatatypename, '"') AS quoted_data_type
   FROM (aws_oracle_ext.sqs_queues_settings s
     JOIN aws_oracle_ext.sqs_queues_tables t ON ((s.tableid = t.id)));]]></complex-attribute>
                        <category _I_D="80732ae4-37c1-4a8c-b53e-5acc9e409452" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ce40e5af-688f-4a20-afa5-a729a50093e6" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="419316ed-84f4-4f75-8902-7ea83a71a993" name="sys_all_cons_columns" context="sys_all_cons_columns" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="ALL_CONS_COLUMNS describes columns that are accessible to the current user and that are specified in constraints.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (x.cstrschema)::character varying(128) AS owner,
    (x.cstrname)::character varying(128) AS constraint_name,
    (x.tblname)::character varying(128) AS table_name,
    (x.colname)::character varying(4000) AS column_name,
    (rank() OVER (PARTITION BY x.cstrschema, x.tblname, x.cstrname ORDER BY x.colnum))::smallint AS "position"
   FROM (( SELECT DISTINCT nr.nspname,
            r.relname,
            r.relowner,
            a.attname,
            a.attnum,
            nc.nspname,
            c.conname
           FROM pg_namespace nr,
            pg_class r,
            pg_attribute a,
            pg_depend d,
            pg_namespace nc,
            pg_constraint c
          WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND (d.refclassid = ('pg_class'::regclass)::oid) AND (d.refobjid = r.oid) AND (d.refobjsubid = a.attnum) AND (d.classid = ('pg_constraint'::regclass)::oid) AND (d.objid = c.oid) AND (c.connamespace = nc.oid) AND (c.contype = 'c'::"char") AND (r.relkind = ANY (ARRAY['r'::"char", 'p'::"char"])) AND (NOT a.attisdropped))
        UNION ALL
         SELECT nr.nspname,
            r.relname,
            r.relowner,
            a.attname,
            a.attnum,
            nc.nspname,
            c.conname
           FROM pg_namespace nr,
            pg_class r,
            pg_attribute a,
            pg_namespace nc,
            pg_constraint c
          WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND (nc.oid = c.connamespace) AND (r.oid =
                CASE c.contype
                    WHEN 'f'::"char" THEN c.confrelid
                    ELSE c.conrelid
                END) AND (a.attnum = ANY (
                CASE c.contype
                    WHEN 'f'::"char" THEN c.confkey
                    ELSE c.conkey
                END)) AND (NOT a.attisdropped) AND (c.contype = ANY (ARRAY['p'::"char", 'u'::"char", 'f'::"char"])) AND (r.relkind = ANY (ARRAY['r'::"char", 'p'::"char"])))) x(tblschema, tblname, tblowner, colname, colnum, cstrschema, cstrname)
     JOIN pg_user u ON ((u.usesysid = x.tblowner)))
  WHERE ((u.usename = USER) OR has_column_privilege((x.tblname)::text, (x.colname)::text, 'SELECT,INSERT,UPDATE,REFERENCES'::text));]]></complex-attribute>
                        <category _I_D="ef77623d-1387-4855-8534-ce3c5cb240df" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6f537084-95ac-46c4-8b16-c496faeaf82d" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="b14609a1-1ebd-403d-87fc-f565cb6990e4" name="sys_all_constraints" context="sys_all_constraints" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="ALL_CONSTRAINTS describes constraint definitions on tables accessible to the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.conname)::character varying(30) AS constraint_name,
    (c.contype)::character varying(1) AS constraint_type,
    (cl.relname)::character varying(30) AS table_name,
    pg_get_constraintdef(c.oid) AS search_condition,
    (n_ref.nspname)::character varying(30) AS r_owner,
    (c_ref.conname)::character varying(30) AS r_constraint_name,
        CASE c.confdeltype
            WHEN 'a'::"char" THEN 'no action'::character varying(9)
            WHEN 'r'::"char" THEN 'restrict'::character varying(9)
            WHEN 'c'::"char" THEN 'cascade'::character varying(9)
            WHEN 'n'::"char" THEN 'set null'::character varying(9)
            WHEN 'd'::"char" THEN 'set default'::character varying(11)
            ELSE NULL::character varying(9)
        END AS delete_rule,
    'ENABLED'::character varying(8) AS status,
        CASE
            WHEN c.condeferrable THEN 'DEFERRABLE'::character varying(14)
            ELSE 'NOT DEFERRABLE'::character varying(14)
        END AS "deferrable",
        CASE
            WHEN c.condeferred THEN 'DEFERRED'::character varying(9)
            ELSE 'IMMEDIATE'::character varying(9)
        END AS deferred,
        CASE
            WHEN c.convalidated THEN 'VALIDATED'::character varying(13)
            ELSE 'NOT VALIDATED'::character varying(13)
        END AS validated,
    'GENERATED NAME'::character varying(14) AS generated,
    NULL::character varying(3) AS bad,
    NULL::character varying(4) AS rely,
    NULL::date AS last_change,
    (n.nspname)::character varying(30) AS index_owner,
    (cl_ind.relname)::character varying(30) AS index_name,
    NULL::character varying(7) AS invalid,
    NULL::character varying(14) AS view_related
   FROM ((((((((pg_constraint c
     JOIN pg_namespace n ON ((n.oid = c.connamespace)))
     JOIN pg_class cl ON ((cl.oid = c.conrelid)))
     JOIN pg_user u ON ((cl.relowner = u.usesysid)))
     LEFT JOIN pg_class cl_ref ON ((cl_ref.oid = c.confrelid)))
     LEFT JOIN pg_namespace n_ref ON ((n_ref.oid = cl_ref.relnamespace)))
     LEFT JOIN pg_constraint c_ref ON (((c_ref.conrelid = c.confrelid) AND (c_ref.contype = 'p'::"char"))))
     LEFT JOIN pg_index i ON ((i.indrelid = cl_ref.oid)))
     LEFT JOIN pg_class cl_ind ON ((cl_ind.oid = c.conindid)))
  WHERE ((u.usename = USER) OR has_table_privilege(((quote_ident((n_ref.nspname)::text) || '.'::text) || quote_ident((cl.relname)::text)), 'SELECT,INSERT,UPDATE,DELETE,TRUNCATE,REFERENCES,TRIGGER'::text));]]></complex-attribute>
                        <category _I_D="f6efdde7-26e4-4ae9-b200-e0c56e91225b" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f05a8953-0e20-4ca1-a616-5358b49849e9" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="5ccee580-4ba3-4202-aee9-658e77772ad4" name="sys_all_ind_columns" context="sys_all_ind_columns" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="ALL_IND_COLUMNS describes the columns of indexes on all tables accessible to the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (insp.nspname)::character varying(128) AS index_owner,
    (irel.relname)::character varying(128) AS index_name,
    (tnsp.nspname)::character varying(128) AS table_owner,
    (trel.relname)::character varying(128) AS table_name,
    (a.attname)::character varying(4000) AS column_name,
    (c.ordinality)::integer AS column_position,
    COALESCE(information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)), information_schema._pg_numeric_precision(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*))) AS column_length,
    COALESCE(information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)), 0) AS char_length,
    (
        CASE ((o.option)::integer & 1)
            WHEN 1 THEN 'DESC'::text
            ELSE 'ASC'::text
        END)::character varying(4) AS descend,
    NULL::integer AS collated_column_id
   FROM ((((((((pg_index i
     JOIN pg_class trel ON ((trel.oid = i.indrelid)))
     JOIN pg_namespace tnsp ON ((trel.relnamespace = tnsp.oid)))
     JOIN pg_class irel ON ((irel.oid = i.indexrelid)))
     JOIN pg_namespace insp ON ((irel.relnamespace = insp.oid)))
     CROSS JOIN LATERAL unnest(i.indkey) WITH ORDINALITY c(colnum, ordinality))
     LEFT JOIN LATERAL unnest(i.indoption) WITH ORDINALITY o(option, ordinality) ON ((c.ordinality = o.ordinality)))
     JOIN pg_attribute a ON (((trel.oid = a.attrelid) AND (a.attnum = c.colnum))))
     JOIN (pg_type t
     JOIN pg_namespace nt ON ((t.typnamespace = nt.oid))) ON ((a.atttypid = t.oid)))
  WHERE (pg_has_role(trel.relowner, 'USAGE'::text) OR has_table_privilege(trel.oid, 'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text));]]></complex-attribute>
                        <category _I_D="ec10e33b-1f1e-463e-9312-4339853087b3" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2bca6f18-8485-4458-9be7-c6113d824d70" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="7c13dad1-dd54-486e-b603-094408895886" name="sys_all_indexes" context="sys_all_indexes" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="ALL_INDEXES describes the indexes on the tables accessible to the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (tnsp.nspname)::character varying(128) AS owner,
    (irel.relname)::character varying(128) AS index_name,
    (
        CASE
            WHEN (i.indexprs IS NULL) THEN 'NORMAL'::text
            ELSE 'FUNCTION-BASED NORMAL'::text
        END)::character varying(27) AS index_type,
    (tnsp.nspname)::character varying(128) AS table_owner,
    (trel.relname)::character varying(128) AS table_name,
    'TABLE'::character varying(11) AS table_type,
    (
        CASE
            WHEN i.indisunique THEN 'UNIQUE'::text
            ELSE 'NONUNIQUE'::text
        END)::character varying(9) AS uniqueness,
    'DISABLED'::character varying(13) AS compression,
    NULL::integer AS prefix_length,
    (ts.spcname)::character varying(30) AS tablespace_name,
    NULL::integer AS ini_trans,
    NULL::integer AS max_trans,
    NULL::integer AS initial_extent,
    NULL::integer AS next_extent,
    NULL::integer AS min_extents,
    NULL::integer AS max_extents,
    NULL::integer AS pct_increase,
    NULL::integer AS pct_threshold,
    NULL::integer AS include_column,
    NULL::integer AS freelists,
    NULL::integer AS freelist_groups,
    NULL::integer AS pct_free,
    (
        CASE trel.relpersistence
            WHEN 'p'::"char" THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS logging,
    NULL::integer AS blevel,
    NULL::integer AS leaf_blocks,
    (
        CASE
            WHEN i.indisprimary THEN st.n_live_tup
            ELSE NULL::bigint
        END)::integer AS distinct_keys,
    NULL::integer AS avg_leaf_blocks_per_key,
    NULL::integer AS avg_data_blocks_per_key,
    NULL::integer AS clustering_factor,
    (
        CASE
            WHEN i.indisready THEN 'ENABLED'::text
            ELSE 'DISABLED'::text
        END)::character varying(8) AS status,
    (st.n_live_tup)::integer AS num_rows,
    NULL::integer AS sample_size,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::character varying(40) AS degree,
    NULL::character varying(40) AS instances,
    (
        CASE
            WHEN trel.relispartition THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS partitioned,
    (
        CASE trel.relpersistence
            WHEN 't'::"char" THEN 'Y'::text
            ELSE 'N'::text
        END)::character varying(1) AS temporary,
    'N'::character varying(1) AS generated,
    'N'::character varying(1) AS secondary,
    'DEFAULT'::character varying(7) AS buffer_pool,
    'DEFAULT'::character varying(7) AS flash_cache,
    'DEFAULT'::character varying(7) AS cell_flash_cache,
    'NO'::character varying(3) AS user_stats,
    NULL::character varying(15) AS duration,
    NULL::integer AS pct_direct_access,
    NULL::character varying(128) AS ityp_owner,
    NULL::character varying(128) AS ityp_name,
    NULL::character varying(1000) AS parameters,
    'NO'::character varying(3) AS global_stats,
    NULL::character varying(12) AS domidx_status,
    NULL::character varying(6) AS domidx_opstatus,
    NULL::character varying(8) AS funcidx_status,
    'NO'::character varying(3) AS join_index,
    'NO'::character varying(3) AS iot_redundant_pkey_elim,
    'NO'::character varying(3) AS dropped,
    (
        CASE
            WHEN i.indisvalid THEN 'VISIBLE'::text
            ELSE 'INVISIBLE'::text
        END)::character varying(9) AS visibility,
    NULL::character varying(14) AS domidx_management,
    (
        CASE irel.relpages
            WHEN 0 THEN 'NO'::text
            ELSE 'YES'::text
        END)::character varying(3) AS segment_created,
    'NO'::character varying(3) AS orphaned_entries,
    (
        CASE
            WHEN (i.indpred IS NULL) THEN 'FULL'::text
            ELSE 'PARTIAL'::text
        END)::character varying(7) AS indexing
   FROM ((((((pg_index i
     JOIN pg_class trel ON ((trel.oid = i.indrelid)))
     JOIN pg_namespace tnsp ON ((trel.relnamespace = tnsp.oid)))
     JOIN pg_class irel ON ((irel.oid = i.indexrelid)))
     JOIN pg_am am ON (((am.oid = irel.relam) AND (am.amname = 'btree'::name))))
     LEFT JOIN pg_tablespace ts ON ((ts.oid = irel.reltablespace)))
     LEFT JOIN pg_stat_all_tables st ON (((st.schemaname = tnsp.nspname) AND (st.relname = trel.relname))))
  WHERE (pg_has_role(trel.relowner, 'USAGE'::text) OR has_table_privilege(trel.oid, 'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text));]]></complex-attribute>
                        <category _I_D="7d25f466-7217-42a3-8301-c9f3bc93e8b4" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b8ac5400-59ab-480f-94ed-cc372190fc9d" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="2f407ea7-ba89-45e4-953e-27830c64f841" name="sys_all_objects" context="sys_all_objects" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="The ALL_OBJECTS view describes all objects in the database that are accessible to the current user">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.relname)::character varying(30) AS object_name,
    NULL::character varying(30) AS subobject_name,
    (c.oid)::bigint AS object_id,
        CASE
            WHEN (c.relkind = ANY (ARRAY['t'::"char", 'r'::"char"])) THEN (c.oid)::bigint
            ELSE NULL::bigint
        END AS data_object_id,
        CASE c.relkind
            WHEN 'r'::"char" THEN 'ordinary table'::character varying(17)
            WHEN 'i'::"char" THEN 'index'::character varying(17)
            WHEN 'S'::"char" THEN 'sequence'::character varying(17)
            WHEN 'v'::"char" THEN 'view'::character varying(17)
            WHEN 'c'::"char" THEN 'composite type'::character varying(17)
            WHEN 't'::"char" THEN 'TOAST table'::character varying(17)
            WHEN 'f'::"char" THEN 'foreign table'::character varying(17)
            ELSE NULL::character varying(17)
        END AS object_type,
    NULL::date AS created,
    NULL::date AS last_ddl_time,
    NULL::character varying(78) AS "timestamp",
    'VALID'::character varying(7) AS status,
        CASE c.relpersistence
            WHEN 't'::"char" THEN 'Y'::text
            ELSE 'N'::text
        END AS temporary,
    'N'::character varying(1) AS generated,
    'N'::character varying(1) AS secondary,
    (c.reltablespace)::integer AS namespace,
    NULL::character varying(30) AS edition_name
   FROM ((pg_class c
     JOIN pg_namespace n ON ((c.relnamespace = n.oid)))
     JOIN pg_user u ON ((c.relowner = u.usesysid)))
  WHERE ((n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])) AND ((u.usename = USER) OR ((c.relkind = ANY (ARRAY['r'::"char", 'v'::"char"])) AND has_table_privilege(((quote_ident((n.nspname)::text) || '.'::text) || quote_ident((c.relname)::text)), 'SELECT,INSERT,UPDATE,DELETE,TRUNCATE,REFERENCES,TRIGGER'::text))));]]></complex-attribute>
                        <category _I_D="95c48efa-2fa2-4c5a-a0cd-eab4b3f7d37a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="28d71bf0-2e26-490c-a523-164d2249c226" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="abbd2b64-35db-4080-939f-e12aaed7d8cc" name="sys_all_policies" context="sys_all_policies" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="ALL_POLICIES describes all Oracle Virtual Private Database (VPD) security policies for objects accessible to the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (p.schemaname)::character varying(128) AS object_owner,
    (p.tablename)::character varying(128) AS object_name,
    'SYS_DEFAULT'::character varying(128) AS policy_group,
    (p.policyname)::character varying(128) AS policy_name,
    (p.schemaname)::character varying(128) AS pf_owner,
    NULL::character varying(128) AS package,
    NULL::character varying(128) AS function,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'SELECT'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS sel,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'INSERT'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS ins,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'UPDATE'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS upd,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'DELETE'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS del,
    'NO'::character varying(3) AS idx,
    (
        CASE
            WHEN (p.with_check IS NOT NULL) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS chk_option,
    'YES'::character varying(3) AS enable,
    'NO'::character varying(3) AS static_policy,
    'DYNAMIC'::character varying(24) AS policy_type,
    'NO'::character varying(3) AS long_predicate,
    'NO'::character varying(3) AS common,
    'NO'::character varying(3) AS inherited
   FROM ((pg_policies p
     JOIN pg_tables t ON (((t.schemaname = p.schemaname) AND (t.tablename = p.tablename))))
     JOIN pg_user u ON ((u.usename = t.tableowner)))
  WHERE (pg_has_role(t.tableowner, 'USAGE'::text) OR has_table_privilege(u.usesysid, 'SELECT, INSERT, UPDATE, DELETE'::text));]]></complex-attribute>
                        <category _I_D="68c9b93a-e7a8-475d-b465-a5e0f7c96336" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5542daac-8c4c-47b2-80ea-d5dc66893091" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="fbc0c439-d967-489f-b8e6-e5d852508804" name="sys_all_sequences" context="sys_all_sequences" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="ALL_SEQUENCES describes all sequences accessible to the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (s.schemaname)::character varying(30) AS sequence_owner,
    (s.sequencename)::character varying(30) AS sequence_name,
    (s.min_value)::numeric AS min_value,
    (s.max_value)::numeric AS max_value,
    (s.increment_by)::numeric AS increment_by,
        CASE s.cycle
            WHEN false THEN 'N'::character varying(1)
            WHEN true THEN 'Y'::character varying(1)
            ELSE NULL::character varying
        END AS cycle_flag,
    'N'::character varying(1) AS order_flag,
    s.cache_size,
    s.last_value AS last_number
   FROM ((pg_sequences s
     JOIN pg_class c ON (((c.relname = s.sequencename) AND (c.relkind = 'S'::"char"))))
     JOIN pg_user u ON ((c.relowner = u.usesysid)))
  WHERE ((u.usename = USER) OR has_sequence_privilege(((quote_ident((s.schemaname)::text) || '.'::text) || quote_ident((s.sequencename)::text)), 'USAGE,SELECT,UPDATE'::text));]]></complex-attribute>
                        <category _I_D="f6ee6f2a-6e82-4db6-914d-cd4531ad9e1a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="efbf06cb-4d3f-4bcd-9e76-e28612291c2f" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="865ba611-3bf2-47ac-9e54-661fb91d63eb" name="sys_all_source" context="sys_all_source" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspowner)::character varying(30) AS owner,
    (s.name)::character varying(30) AS name,
    (s.type)::character varying(12) AS type,
    (generate_subscripts(s.text, 1))::numeric AS line,
    (unnest(s.text))::character varying(4000) AS text
   FROM (( SELECT c.relnamespace AS nsp,
            t.tgname AS name,
            'TRIGGER'::text AS type,
            string_to_array(pg_get_triggerdef(t.oid), chr(10)) AS text
           FROM ((pg_trigger t
             JOIN pg_class c ON ((c.oid = t.tgrelid)))
             JOIN pg_user u ON ((u.usesysid = c.relowner)))
          WHERE ((u.usename = USER) OR has_table_privilege(USER, c.oid, 'TRIGGER'::text))
        UNION ALL
         SELECT f.pronamespace AS nsp,
            f.proname AS name,
                CASE
                    WHEN (f.prokind = 'f'::"char") THEN 'FUNCTION'::text
                    WHEN (f.prokind = 'p'::"char") THEN 'PROCEDURE'::text
                    ELSE NULL::text
                END AS type,
            string_to_array(pg_get_functiondef(f.oid), chr(10)) AS text
           FROM ((pg_proc f
             JOIN pg_type ret ON ((f.prorettype = ret.oid)))
             JOIN pg_user u ON ((u.usesysid = f.proowner)))
          WHERE ((f.prokind = ANY (ARRAY['f'::"char", 'p'::"char"])) AND ((u.usename = USER) OR has_function_privilege(USER, f.oid, 'EXECUTE'::text)))
        UNION ALL
         SELECT t.typnamespace AS nsp,
            t.typname AS name,
            'TYPE'::text AS type,
                CASE
                    WHEN (t.typtype = 'c'::"char") THEN ARRAY( SELECT ((('CREATE OR REPLACE TYPE '::text || (t.typname)::text) || ' AS ('::text) || chr(10))
                    UNION ALL
                     SELECT (((((a.attname)::text || ' '::text) || format_type(a.atttypid, a.atttypmod)) ||
                            CASE
                                WHEN (lead(a.attrelid, 1) OVER () IS NULL) THEN ''::text
                                ELSE ','::text
                            END) || chr(10))
                       FROM pg_attribute a
                      WHERE (a.attrelid = t.typrelid)
                    UNION ALL
                     SELECT ');'::text)
                    WHEN (t.typtype = 'd'::"char") THEN ARRAY( SELECT ((('CREATE OR REPLACE DOMAIN '::text || (t.typname)::text) || ' AS '::text) || format_type(tt.oid, NULL::integer))
                       FROM pg_type tt
                      WHERE (tt.typarray = t.typbasetype))
                    ELSE NULL::text[]
                END AS text
           FROM (pg_type t
             JOIN pg_user u ON ((u.usesysid = t.typowner)))
          WHERE (((t.typrelid = (0)::oid) OR ( SELECT (c.relkind = 'c'::"char")
                   FROM pg_class c
                  WHERE (c.oid = t.typrelid))) AND (NOT (EXISTS ( SELECT 1
                   FROM pg_type el
                  WHERE ((el.oid = t.typelem) AND (el.typarray = t.oid))))) AND ((u.usename = USER) OR has_type_privilege(USER, t.oid, 'USAGE'::text)))) s
     JOIN pg_namespace n ON ((s.nsp = n.oid)))
  WHERE ((n.nspname <> 'pg_catalog'::name) AND (n.nspname <> 'information_schema'::name) AND (n.nspname !~ '^pg_toast'::text));]]></complex-attribute>
                        <category _I_D="be75e61f-9cc8-4a05-b4fc-4055fbc8dd02" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="71beafec-46c4-4d3f-bc42-602cb83de193" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="55131053-dae2-47ae-a4a5-4f93e660b277" name="sys_all_tab_cols" context="sys_all_tab_cols" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="Describes the columns of the tables, views, and clusters accessible to the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.relname)::character varying(30) AS table_name,
    (a.attname)::character varying(30) AS column_name,
    (format_type(a.atttypid, a.atttypmod))::character varying(106) AS data_type,
    NULL::character varying(3) AS data_type_mod,
    NULL::character varying(30) AS data_type_owner,
    (a.attlen)::numeric AS data_length,
    NULL::numeric AS data_precision,
    NULL::numeric AS data_scale,
        CASE
            WHEN a.attnotnull THEN 'N'::character varying(1)
            ELSE 'Y'::character varying(1)
        END AS nullable,
    (a.attnum)::numeric AS column_id,
    NULL::numeric AS default_length,
    pg_get_expr(d.adbin, d.adrelid) AS data_default,
    (s.n_distinct)::numeric AS num_distinct,
    NULL::numeric AS low_value,
    NULL::numeric AS high_value,
    (s.null_frac)::numeric AS density,
    NULL::numeric AS num_nulls,
    NULL::numeric AS num_buckets,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::numeric AS sample_size,
    'NCHAR_CS'::character varying(44) AS character_set_name,
    NULL::numeric AS char_col_decl_length,
        CASE
            WHEN (COALESCE(st.last_autoanalyze, st.last_analyze) IS NOT NULL) THEN 'YES'::character varying(3)
            ELSE 'NO'::character varying(3)
        END AS global_stats,
    'NO'::character varying(3) AS user_stats,
    (s.avg_width)::numeric AS avg_col_len,
    information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)) AS char_length,
    NULL::character varying(1) AS char_used,
    NULL::character varying(3) AS v80_fmt_image,
    NULL::character varying(3) AS data_upgraded,
    'NO'::character varying(3) AS hidden_column,
    'NO'::character varying(3) AS virtual_column,
    (a.attnum)::numeric AS segment_column_id,
    (a.attnum)::numeric AS internal_column_id,
    'NONE'::character varying(4) AS histogram,
    (a.attname)::character varying(4000) AS qualified_col_name
   FROM (((((((pg_attribute a
     JOIN pg_class c ON ((c.oid = a.attrelid)))
     JOIN pg_user u ON ((c.relowner = u.usesysid)))
     JOIN pg_type t ON ((a.atttypid = t.oid)))
     LEFT JOIN pg_attrdef d ON (((c.oid = d.adrelid) AND (a.attnum = d.adnum))))
     JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
     LEFT JOIN pg_stats s ON (((s.schemaname = n.nspname) AND (s.tablename = c.relname) AND (s.attname = a.attname))))
     LEFT JOIN pg_stat_user_tables st ON ((st.relid = c.oid)))
  WHERE ((a.attnum > 0) AND (NOT a.attisdropped) AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND ((u.usename = USER) OR aws_oracle_ext.has_column_privilege(n.nspname, c.relname, a.attname)) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="7dfc666c-6b53-4650-8c01-bdd804239758" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ffa1427f-01fa-4ed7-93c5-ea6e1063a4ae" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="5fa336c0-b012-4416-ae91-7e43bebfc47b" name="sys_all_tab_columns" context="sys_all_tab_columns" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="ALL_TAB_COLUMNS describes the columns of the tables, views, and clusters accessible to the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.relname)::character varying(30) AS table_name,
    (a.attname)::character varying(30) AS column_name,
    (format_type(a.atttypid, a.atttypmod))::character varying(106) AS data_type,
    NULL::character varying(3) AS data_type_mod,
    NULL::character varying(30) AS data_type_owner,
    (a.attlen)::numeric AS data_length,
    NULL::numeric AS data_precision,
    NULL::numeric AS data_scale,
        CASE
            WHEN a.attnotnull THEN 'N'::character varying(1)
            ELSE 'Y'::character varying(1)
        END AS nullable,
    (a.attnum)::numeric AS column_id,
    NULL::numeric AS default_length,
    pg_get_expr(d.adbin, d.adrelid) AS data_default,
    (s.n_distinct)::numeric AS num_distinct,
    NULL::numeric AS low_value,
    NULL::numeric AS high_value,
    (s.null_frac)::numeric AS density,
    NULL::numeric AS num_nulls,
    NULL::numeric AS num_buckets,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::numeric AS sample_size,
    'NCHAR_CS'::character varying(44) AS character_set_name,
    NULL::numeric AS char_col_decl_length,
        CASE
            WHEN (COALESCE(st.last_autoanalyze, st.last_analyze) IS NOT NULL) THEN 'YES'::character varying(3)
            ELSE 'NO'::character varying(3)
        END AS global_stats,
    'NO'::character varying(3) AS user_stats,
    (s.avg_width)::numeric AS avg_col_len,
    information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)) AS char_length,
    NULL::character varying(1) AS char_used,
    NULL::character varying(3) AS v80_fmt_image,
    NULL::character varying(3) AS data_upgraded,
    'NONE'::character varying(4) AS histogram
   FROM (((((((pg_attribute a
     JOIN pg_class c ON ((c.oid = a.attrelid)))
     JOIN pg_user u ON ((c.relowner = u.usesysid)))
     LEFT JOIN pg_attrdef d ON (((c.oid = d.adrelid) AND (a.attnum = d.adnum))))
     JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
     JOIN pg_type t ON ((a.atttypid = t.oid)))
     LEFT JOIN pg_stats s ON (((s.schemaname = n.nspname) AND (s.tablename = c.relname) AND (s.attname = a.attname))))
     LEFT JOIN pg_stat_user_tables st ON ((st.relid = c.oid)))
  WHERE ((a.attnum > 0) AND (NOT a.attisdropped) AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND ((u.usename = USER) OR aws_oracle_ext.has_column_privilege(n.nspname, c.relname, a.attname)) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="be60bbee-0121-4029-95f2-a610ea770042" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bb14f5a2-32dd-4115-a2ab-97ec42404c81" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="2cfb18f0-1a95-40d0-b6b4-dd4ded00da0f" name="sys_all_tab_comments" context="sys_all_tab_comments" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.relname)::character varying(30) AS table_name,
        CASE
            WHEN (c.relkind = 'r'::"char") THEN 'TABLE'::text
            WHEN (c.relkind = 'v'::"char") THEN 'VIEW'::text
            ELSE NULL::text
        END AS table_type,
    (obj_description(c.oid))::character varying(4000) AS comments,
    (0)::numeric AS origin_con_id
   FROM (pg_class c
     JOIN pg_namespace n ON ((c.relnamespace = n.oid)))
  WHERE ((c.relkind = ANY (ARRAY['r'::"char", 'v'::"char"])) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])) AND has_table_privilege(((quote_ident((n.nspname)::text) || '.'::text) || quote_ident((c.relname)::text)), 'SELECT,INSERT,UPDATE,DELETE,TRUNCATE,REFERENCES,TRIGGER'::text));]]></complex-attribute>
                        <category _I_D="17a908ca-29e2-4e69-9a66-06196fda26e5" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ff038400-bb67-4d7e-aa80-053ed228f45b" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="7022c68d-a036-4892-9f59-9453c6e97f8e" name="sys_all_tables" context="sys_all_tables" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="The ALL_TABLES view describes all tables accessible to the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (t.schemaname)::character varying(30) AS owner,
    (t.tablename)::character varying(30) AS table_name,
    (t.tablespace)::character varying(30) AS tablespace_name,
    NULL::character varying(30) AS cluster_name,
    NULL::character varying(30) AS iot_name,
    'VALID'::character varying(8) AS status,
    NULL::numeric AS pct_free,
    NULL::numeric AS pct_used,
    NULL::numeric AS ini_trans,
    NULL::numeric AS max_trans,
    NULL::numeric AS initial_extent,
    NULL::numeric AS next_extent,
    NULL::numeric AS min_extents,
    NULL::numeric AS max_extents,
    NULL::numeric AS pct_increase,
    NULL::numeric AS freelists,
    NULL::numeric AS freelist_groups,
    'NO'::character varying(3) AS logging,
    'N'::character varying(1) AS backed_up,
    stat.n_live_tup AS num_rows,
    NULL::numeric AS blocks,
    NULL::numeric AS empty_blocks,
    NULL::numeric AS avg_space,
    NULL::numeric AS chain_cnt,
    NULL::numeric AS avg_row_len,
    NULL::numeric AS avg_space_freelist_blocks,
    NULL::numeric AS num_freelist_blocks,
    NULL::character varying(10) AS degree,
    NULL::character varying(10) AS instances,
    NULL::character varying(5) AS cache,
    NULL::character varying(8) AS table_lock,
    NULL::numeric AS sample_size,
    (COALESCE(stat.last_autoanalyze, stat.last_analyze))::date AS last_analyzed,
    'NO'::character varying(3) AS partitioned,
    NULL::character varying(12) AS iot_type,
        CASE
            WHEN ((n.nspname !~ '^pg_toast'::text) AND (n.nspname ~~ 'pg_temp%'::text)) THEN 'Y'::text
            ELSE 'N'::text
        END AS temporary,
    'N'::character varying(1) AS secondary,
    'NO'::character varying(3) AS nested,
    'DEFAULT'::character varying(7) AS buffer_pool,
    'DEFAULT'::character varying(7) AS flash_cache,
    'DEFAULT'::character varying(7) AS cell_flash_cache,
    'DISABLED'::character varying(8) AS row_movement,
    'NO'::character varying(3) AS global_stats,
    NULL::character varying(3) AS user_stats,
    NULL::character varying(15) AS duration,
    'DISABLED'::character varying(8) AS skip_corrupt,
    'NO'::character varying(3) AS monitoring,
    NULL::character varying(30) AS cluster_owner,
    'DISABLED'::character varying(8) AS dependencies,
    'DISABLED'::character varying(8) AS compression,
    NULL::character varying(12) AS compress_for,
    'NO'::character varying(3) AS dropped,
    NULL::character varying(3) AS read_only,
    'YES'::character varying(3) AS segment_created,
    'DEFAULT'::character varying(7) AS result_cache
   FROM ((pg_tables t
     JOIN pg_stat_user_tables stat ON (((t.schemaname = stat.schemaname) AND (t.tablename = stat.relname))))
     JOIN pg_namespace n ON ((t.schemaname = n.nspname)))
  WHERE ((t.schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])) AND ((t.tableowner = USER) OR has_table_privilege(((quote_ident((t.schemaname)::text) || '.'::text) || quote_ident((t.tablename)::text)), 'SELECT,INSERT,UPDATE,DELETE,TRUNCATE,REFERENCES,TRIGGER'::text)));]]></complex-attribute>
                        <category _I_D="0603a855-79ad-4eac-b575-e38e29a7b561" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3b27db05-2acf-4992-bbaf-7eb6773478cf" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="0a4da1a5-8305-436f-b97f-f0ad346042e0" name="sys_all_triggers" context="sys_all_triggers" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="ALL_TRIGGERS describes the triggers on tables accessible to the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(128) AS owner,
    (trg.tgname)::character varying(128) AS trigger_name,
    (
        CASE ((trg.tgtype)::integer & 66)
            WHEN 2 THEN ('BEFORE'::text ||
            CASE ((trg.tgtype)::integer & 1)
                WHEN 1 THEN ' EACH ROW'::text
                ELSE 'STATEMENT'::text
            END)
            WHEN 64 THEN 'INSTEAD OF'::text
            ELSE ('AFTER'::text ||
            CASE ((trg.tgtype)::integer & 1)
                WHEN 1 THEN ' EACH ROW'::text
                ELSE 'STATEMENT'::text
            END)
        END)::character varying(16) AS trigger_type,
    (
        CASE ((trg.tgtype)::integer & ((28)::smallint)::integer)
            WHEN 32 THEN 'TRUNCATE'::text
            WHEN 16 THEN 'UPDATE'::text
            WHEN 8 THEN 'DELETE'::text
            WHEN 4 THEN 'INSERT'::text
            WHEN 20 THEN 'INSERT OR UPDATE'::text
            WHEN 28 THEN 'INSERT OR UPDATE OR DELETE'::text
            WHEN 24 THEN 'UPDATE OR DELETE'::text
            WHEN 12 THEN 'INSERT OR DELETE'::text
            ELSE NULL::text
        END)::character varying(246) AS triggering_event,
    (ns.nspname)::character varying(128) AS table_owner,
    (
        CASE ((trg.tgtype)::integer & 66)
            WHEN 64 THEN 'VIEW'::text
            ELSE 'TABLE'::text
        END)::character varying(18) AS base_object_type,
    (tbl.relname)::character varying(128) AS table_name,
    (( SELECT string_agg((a.attname)::text, ', '::text) AS string_agg
           FROM pg_attribute a
          WHERE ((a.attrelid = tbl.oid) AND (a.attnum = ANY ((trg.tgattr)::smallint[])))))::character varying(4000) AS column_name,
    'REFERENCING NEW AS NEW OLD AS OLD'::character varying(422) AS referencing_names,
    (
        CASE
            WHEN pg_has_role(tbl.relowner, 'USAGE'::text) THEN (regexp_match(pg_get_triggerdef(trg.oid), '.{35,} WHEN \((.+)\) EXECUTE PROCEDURE'::text))[1]
            ELSE NULL::text
        END)::character varying(4000) AS when_clause,
    (
        CASE
            WHEN (trg.tgenabled = 'D'::"char") THEN 'DISABLED'::text
            ELSE 'ENABLED'::text
        END)::character varying(8) AS status,
    (obj_description(trg.oid))::character varying(400) AS description,
    'PL/SQL'::character varying(11) AS action_type,
    (((n.nspname)::text || '.'::text) || (proc.proname)::text) AS trigger_body,
    'NO'::character varying(3) AS crossedition,
    'NO'::character varying(3) AS before_statement,
    'NO'::character varying(3) AS before_row,
    'NO'::character varying(3) AS after_row,
    'NO'::character varying(3) AS after_statement,
    'NO'::character varying(3) AS instead_of_row,
    (
        CASE ((trg.tgtype)::integer & 66)
            WHEN 2 THEN 'YES'::text
            WHEN 64 THEN 'NO'::text
            ELSE 'YES'::text
        END)::character varying(3) AS fire_once,
    'NO'::character varying(3) AS apply_server_only
   FROM ((((pg_trigger trg
     JOIN pg_proc proc ON ((proc.oid = trg.tgfoid)))
     JOIN pg_namespace n ON ((n.oid = proc.pronamespace)))
     JOIN pg_class tbl ON ((trg.tgrelid = tbl.oid)))
     JOIN pg_namespace ns ON ((ns.oid = tbl.relnamespace)))
  WHERE ((NOT trg.tgisinternal) AND (pg_has_role(tbl.relowner, 'USAGE'::text) OR has_table_privilege(tbl.oid, 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(tbl.oid, 'INSERT, UPDATE, REFERENCES'::text)));]]></complex-attribute>
                        <category _I_D="617fca8e-d32c-4286-8932-9606087e42ae" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3633f13c-741d-4cc5-97d2-2a19875782de" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="489101c7-7d4a-4a88-98a2-409497e216a1" name="sys_all_users" context="sys_all_users" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="The ALL_USERS view lists all users of the database that are visible to the current user">
                        <complex-attribute name="sql"><![CDATA[ SELECT sys_user_users.username,
    sys_user_users.user_id,
    sys_user_users.created
   FROM aws_oracle_ext.sys_user_users;]]></complex-attribute>
                        <category _I_D="c60cc794-188d-4082-8691-ed0d24c2cae4" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0b6b5fc2-bfe8-4530-9261-0cf09113b7ee" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="afd8e108-f6ae-48dd-b1ab-fddd62c94808" name="sys_all_views" context="sys_all_views" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE">
                        <complex-attribute name="sql"><![CDATA[ SELECT (pg_views.schemaname)::character varying(30) AS owner,
    (pg_views.viewname)::character varying(30) AS view_name,
    (length(pg_views.definition))::numeric AS text_length,
    (pg_views.definition)::character varying(409600) AS text,
    NULL::numeric AS type_text_length,
    NULL::character varying(4000) AS type_text,
    NULL::numeric AS oid_text_length,
    NULL::character varying(4000) AS oid_text,
    NULL::character varying(30) AS view_type_owner,
    NULL::character varying(30) AS view_type,
    NULL::character varying(30) AS superview_name,
    'N'::character varying(1) AS editioning_view,
    'Y'::character varying(1) AS read_only
   FROM pg_views
  WHERE ((pg_views.schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])) AND ((pg_views.viewowner = USER) OR has_table_privilege(((quote_ident((pg_views.schemaname)::text) || '.'::text) || quote_ident((pg_views.viewname)::text)), 'SELECT,INSERT,UPDATE,DELETE,REFERENCES,TRIGGER'::text)));]]></complex-attribute>
                        <category _I_D="0016fdfe-fa06-44bb-a59f-cc789370a0dd" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c045818b-000e-486b-8d25-4ed4ade3e9e6" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="dc073116-022f-494f-85ba-fe0be1a49f65" name="sys_dba_cons_columns" context="sys_dba_cons_columns" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_CONS_COLUMNS describes all columns in the database that are specified in constraints.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (x.cstrschema)::character varying(128) AS owner,
    (x.cstrname)::character varying(128) AS constraint_name,
    (x.tblname)::character varying(128) AS table_name,
    (x.colname)::character varying(4000) AS column_name,
    (rank() OVER (PARTITION BY x.cstrschema, x.tblname, x.cstrname ORDER BY x.colnum))::smallint AS "position"
   FROM ( SELECT DISTINCT nr.nspname,
            r.relname,
            r.relowner,
            a.attname,
            a.attnum,
            nc.nspname,
            c.conname
           FROM pg_namespace nr,
            pg_class r,
            pg_attribute a,
            pg_depend d,
            pg_namespace nc,
            pg_constraint c
          WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND (d.refclassid = ('pg_class'::regclass)::oid) AND (d.refobjid = r.oid) AND (d.refobjsubid = a.attnum) AND (d.classid = ('pg_constraint'::regclass)::oid) AND (d.objid = c.oid) AND (c.connamespace = nc.oid) AND (c.contype = 'c'::"char") AND (r.relkind = ANY (ARRAY['r'::"char", 'p'::"char"])) AND (NOT a.attisdropped))
        UNION ALL
         SELECT nr.nspname,
            r.relname,
            r.relowner,
            a.attname,
            a.attnum,
            nc.nspname,
            c.conname
           FROM pg_namespace nr,
            pg_class r,
            pg_attribute a,
            pg_namespace nc,
            pg_constraint c
          WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND (nc.oid = c.connamespace) AND (r.oid =
                CASE c.contype
                    WHEN 'f'::"char" THEN c.confrelid
                    ELSE c.conrelid
                END) AND (a.attnum = ANY (
                CASE c.contype
                    WHEN 'f'::"char" THEN c.confkey
                    ELSE c.conkey
                END)) AND (NOT a.attisdropped) AND (c.contype = ANY (ARRAY['p'::"char", 'u'::"char", 'f'::"char"])) AND (r.relkind = ANY (ARRAY['r'::"char", 'p'::"char"])))) x(tblschema, tblname, tblowner, colname, colnum, cstrschema, cstrname)
  WHERE (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text));]]></complex-attribute>
                        <category _I_D="2482e0e1-664d-4d7d-82b8-09ab8660ee96" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="06471651-1f71-4cbe-81a8-a598115b1cd8" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="f946ea66-9484-451e-9994-d800a24887bf" name="sys_dba_constraints" context="sys_dba_constraints" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_CONSTRAINTS describes all constraint definitions on all tables in the database. Its columns are the same as those in &quot;ALL_CONSTRAINTS&quot;.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.conname)::character varying(30) AS constraint_name,
    (c.contype)::character varying(1) AS constraint_type,
    (cl.relname)::character varying(30) AS table_name,
    pg_get_constraintdef(c.oid) AS search_condition,
    (n_ref.nspname)::character varying(30) AS r_owner,
    (c_ref.conname)::character varying(30) AS r_constraint_name,
        CASE c.confdeltype
            WHEN 'a'::"char" THEN 'no action'::character varying(9)
            WHEN 'r'::"char" THEN 'restrict'::character varying(9)
            WHEN 'c'::"char" THEN 'cascade'::character varying(9)
            WHEN 'n'::"char" THEN 'set null'::character varying(9)
            WHEN 'd'::"char" THEN 'set default'::character varying(11)
            ELSE NULL::character varying(9)
        END AS delete_rule,
    'ENABLED'::character varying(8) AS status,
        CASE
            WHEN c.condeferrable THEN 'DEFERRABLE'::character varying(14)
            ELSE 'NOT DEFERRABLE'::character varying(14)
        END AS "deferrable",
        CASE
            WHEN c.condeferred THEN 'DEFERRED'::character varying(9)
            ELSE 'IMMEDIATE'::character varying(9)
        END AS deferred,
        CASE
            WHEN c.convalidated THEN 'VALIDATED'::character varying(13)
            ELSE 'NOT VALIDATED'::character varying(13)
        END AS validated,
    'GENERATED NAME'::character varying(14) AS generated,
    NULL::character varying(3) AS bad,
    NULL::character varying(4) AS rely,
    NULL::date AS last_change,
    (n.nspname)::character varying(30) AS index_owner,
    (cl_ind.relname)::character varying(30) AS index_name,
    NULL::character varying(7) AS invalid,
    NULL::character varying(14) AS view_related
   FROM (((((((pg_constraint c
     JOIN pg_namespace n ON ((n.oid = c.connamespace)))
     JOIN pg_class cl ON ((cl.oid = c.conrelid)))
     LEFT JOIN pg_class cl_ref ON ((cl_ref.oid = c.confrelid)))
     LEFT JOIN pg_namespace n_ref ON ((n_ref.oid = cl_ref.relnamespace)))
     LEFT JOIN pg_constraint c_ref ON (((c_ref.conrelid = c.confrelid) AND (c_ref.contype = 'p'::"char"))))
     LEFT JOIN pg_index i ON ((i.indrelid = cl_ref.oid)))
     LEFT JOIN pg_class cl_ind ON ((cl_ind.oid = c.conindid)))
  WHERE (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text));]]></complex-attribute>
                        <category _I_D="7ea7eefe-05d6-4393-a9a8-2d3bf741ed2e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="12201250-6f20-4ba7-b911-6ebe6ad36b80" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="8c6bba0f-3a25-4f1e-9771-c9483d684371" name="sys_dba_ind_columns" context="sys_dba_ind_columns" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_IND_COLUMNS describes the columns of all the indexes on all tables and clusters in the database.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (insp.nspname)::character varying(128) AS index_owner,
    (irel.relname)::character varying(128) AS index_name,
    (tnsp.nspname)::character varying(128) AS table_owner,
    (trel.relname)::character varying(128) AS table_name,
    (a.attname)::character varying(4000) AS column_name,
    (c.ordinality)::integer AS column_position,
    COALESCE(information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)), information_schema._pg_numeric_precision(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*))) AS column_length,
    COALESCE(information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)), 0) AS char_length,
    (
        CASE ((o.option)::integer & 1)
            WHEN 1 THEN 'DESC'::text
            ELSE 'ASC'::text
        END)::character varying(4) AS descend,
    NULL::integer AS collated_column_id
   FROM ((((((((pg_index i
     JOIN pg_class trel ON ((trel.oid = i.indrelid)))
     JOIN pg_namespace tnsp ON ((trel.relnamespace = tnsp.oid)))
     JOIN pg_class irel ON ((irel.oid = i.indexrelid)))
     JOIN pg_namespace insp ON ((irel.relnamespace = insp.oid)))
     CROSS JOIN LATERAL unnest(i.indkey) WITH ORDINALITY c(colnum, ordinality))
     LEFT JOIN LATERAL unnest(i.indoption) WITH ORDINALITY o(option, ordinality) ON ((c.ordinality = o.ordinality)))
     JOIN pg_attribute a ON (((trel.oid = a.attrelid) AND (a.attnum = c.colnum))))
     JOIN (pg_type t
     JOIN pg_namespace nt ON ((t.typnamespace = nt.oid))) ON ((a.atttypid = t.oid)))
  WHERE (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text));]]></complex-attribute>
                        <category _I_D="91f2a207-b46a-4fcc-a94c-0c18520da2b8" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b9fb6d60-8533-4405-9e33-7cc88c5e72f9" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="557ff4a7-bdbb-4bd2-aab4-3e5ccc507a36" name="sys_dba_indexes" context="sys_dba_indexes" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_INDEXES describes all indexes in the database.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (tnsp.nspname)::character varying(128) AS owner,
    (irel.relname)::character varying(128) AS index_name,
    (
        CASE
            WHEN (i.indexprs IS NULL) THEN 'NORMAL'::text
            ELSE 'FUNCTION-BASED NORMAL'::text
        END)::character varying(27) AS index_type,
    (tnsp.nspname)::character varying(128) AS table_owner,
    (trel.relname)::character varying(128) AS table_name,
    'TABLE'::character varying(11) AS table_type,
    (
        CASE
            WHEN i.indisunique THEN 'UNIQUE'::text
            ELSE 'NONUNIQUE'::text
        END)::character varying(9) AS uniqueness,
    'DISABLED'::character varying(13) AS compression,
    NULL::integer AS prefix_length,
    (ts.spcname)::character varying(30) AS tablespace_name,
    NULL::integer AS ini_trans,
    NULL::integer AS max_trans,
    NULL::integer AS initial_extent,
    NULL::integer AS next_extent,
    NULL::integer AS min_extents,
    NULL::integer AS max_extents,
    NULL::integer AS pct_increase,
    NULL::integer AS pct_threshold,
    NULL::integer AS include_column,
    NULL::integer AS freelists,
    NULL::integer AS freelist_groups,
    NULL::integer AS pct_free,
    (
        CASE trel.relpersistence
            WHEN 'p'::"char" THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS logging,
    NULL::integer AS blevel,
    NULL::integer AS leaf_blocks,
    (
        CASE
            WHEN i.indisprimary THEN st.n_live_tup
            ELSE NULL::bigint
        END)::integer AS distinct_keys,
    NULL::integer AS avg_leaf_blocks_per_key,
    NULL::integer AS avg_data_blocks_per_key,
    NULL::integer AS clustering_factor,
    (
        CASE
            WHEN i.indisready THEN 'ENABLED'::text
            ELSE 'DISABLED'::text
        END)::character varying(8) AS status,
    (st.n_live_tup)::integer AS num_rows,
    NULL::integer AS sample_size,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::character varying(40) AS degree,
    NULL::character varying(40) AS instances,
    (
        CASE
            WHEN trel.relispartition THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS partitioned,
    (
        CASE trel.relpersistence
            WHEN 't'::"char" THEN 'Y'::text
            ELSE 'N'::text
        END)::character varying(1) AS temporary,
    'N'::character varying(1) AS generated,
    'N'::character varying(1) AS secondary,
    'DEFAULT'::character varying(7) AS buffer_pool,
    'DEFAULT'::character varying(7) AS flash_cache,
    'DEFAULT'::character varying(7) AS cell_flash_cache,
    'NO'::character varying(3) AS user_stats,
    NULL::character varying(15) AS duration,
    NULL::integer AS pct_direct_access,
    NULL::character varying(128) AS ityp_owner,
    NULL::character varying(128) AS ityp_name,
    NULL::character varying(1000) AS parameters,
    'NO'::character varying(3) AS global_stats,
    NULL::character varying(12) AS domidx_status,
    NULL::character varying(6) AS domidx_opstatus,
    NULL::character varying(8) AS funcidx_status,
    'NO'::character varying(3) AS join_index,
    'NO'::character varying(3) AS iot_redundant_pkey_elim,
    'NO'::character varying(3) AS dropped,
    (
        CASE
            WHEN i.indisvalid THEN 'VISIBLE'::text
            ELSE 'INVISIBLE'::text
        END)::character varying(9) AS visibility,
    NULL::character varying(14) AS domidx_management,
    (
        CASE irel.relpages
            WHEN 0 THEN 'NO'::text
            ELSE 'YES'::text
        END)::character varying(3) AS segment_created,
    'NO'::character varying(3) AS orphaned_entries,
    (
        CASE
            WHEN (i.indpred IS NULL) THEN 'FULL'::text
            ELSE 'PARTIAL'::text
        END)::character varying(7) AS indexing
   FROM ((((((pg_index i
     JOIN pg_class trel ON ((trel.oid = i.indrelid)))
     JOIN pg_namespace tnsp ON ((trel.relnamespace = tnsp.oid)))
     JOIN pg_class irel ON ((irel.oid = i.indexrelid)))
     JOIN pg_am am ON (((am.oid = irel.relam) AND (am.amname = 'btree'::name))))
     LEFT JOIN pg_tablespace ts ON ((ts.oid = irel.reltablespace)))
     LEFT JOIN pg_stat_all_tables st ON (((st.schemaname = tnsp.nspname) AND (st.relname = trel.relname))))
  WHERE (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text));]]></complex-attribute>
                        <category _I_D="4a74286e-2ecd-49b7-b5d8-614bfd24e222" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="89b08da4-45c8-4d73-b128-0e9d1b48761e" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="c83874a2-57e1-4200-a31c-23628e708fc5" name="sys_dba_objects" context="sys_dba_objects" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_OBJECTS describes all objects in the database. It has the same columns as SYS.ALL_OBJECTS.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.relname)::character varying(30) AS object_name,
    NULL::character varying(30) AS subobject_name,
    (c.oid)::bigint AS object_id,
        CASE
            WHEN (c.relkind = ANY (ARRAY['t'::"char", 'r'::"char"])) THEN (c.oid)::bigint
            ELSE NULL::bigint
        END AS data_object_id,
        CASE c.relkind
            WHEN 'r'::"char" THEN 'ordinary table'::character varying(17)
            WHEN 'i'::"char" THEN 'index'::character varying(17)
            WHEN 'S'::"char" THEN 'sequence'::character varying(17)
            WHEN 'v'::"char" THEN 'view'::character varying(17)
            WHEN 'c'::"char" THEN 'composite type'::character varying(17)
            WHEN 't'::"char" THEN 'TOAST table'::character varying(17)
            WHEN 'f'::"char" THEN 'foreign table'::character varying(17)
            ELSE NULL::character varying(17)
        END AS object_type,
    NULL::date AS created,
    NULL::date AS last_ddl_time,
    NULL::character varying(78) AS "timestamp",
    'VALID'::character varying(7) AS status,
        CASE c.relpersistence
            WHEN 't'::"char" THEN 'Y'::text
            ELSE 'N'::text
        END AS temporary,
    'N'::character varying(1) AS generated,
    'N'::character varying(1) AS secondary,
    (c.reltablespace)::integer AS namespace,
    NULL::character varying(30) AS edition_name
   FROM (pg_class c
     JOIN pg_namespace n ON ((c.relnamespace = n.oid)))
  WHERE ((( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text)) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="de34a0ea-73f7-4ee3-baee-a8c290c05695" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a9204e14-4484-4be0-a4c5-c70b59d156b0" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="70f8a274-da81-4148-bbf3-c21323c9bd02" name="sys_dba_policies" context="sys_dba_policies" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_POLICIES describes all Oracle Virtual Private Database (VPD) security policies in the database.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (p.schemaname)::character varying(128) AS object_owner,
    (p.tablename)::character varying(128) AS object_name,
    'SYS_DEFAULT'::character varying(128) AS policy_group,
    (p.policyname)::character varying(128) AS policy_name,
    (p.schemaname)::character varying(128) AS pf_owner,
    NULL::character varying(128) AS package,
    NULL::character varying(128) AS function,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'SELECT'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS sel,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'INSERT'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS ins,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'UPDATE'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS upd,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'DELETE'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS del,
    'NO'::character varying(3) AS idx,
    (
        CASE
            WHEN (p.with_check IS NOT NULL) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS chk_option,
    'YES'::character varying(3) AS enable,
    'NO'::character varying(3) AS static_policy,
    'DYNAMIC'::character varying(24) AS policy_type,
    'NO'::character varying(3) AS long_predicate,
    'NO'::character varying(3) AS common,
    'NO'::character varying(3) AS inherited
   FROM pg_policies p
  WHERE (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text));]]></complex-attribute>
                        <category _I_D="883f73f2-7e64-444f-99fb-40416aae6c10" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f148dc13-c5ec-489d-8862-e496de021795" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="06252689-2055-4423-88e6-cb793ed6909b" name="sys_dba_roles" context="sys_dba_roles" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_ROLES lists all roles that exist in the database.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (r.rolname)::character varying(128) AS role,
    (u.usesysid)::bigint AS role_id,
    (
        CASE COALESCE(r.rolpassword, ''::text)
            WHEN ''::text THEN 'NO'::text
            ELSE 'YES'::text
        END)::character varying(8) AS password_required,
    (
        CASE COALESCE(r.rolpassword, ''::text)
            WHEN ''::text THEN 'NONE'::text
            ELSE 'PASSWORD'::text
        END)::character varying(11) AS authentication_type,
    'NO'::character varying(3) AS common,
    'N'::character varying(1) AS oracle_maintained,
    'NO'::character varying(3) AS inherited,
    'NO'::character varying(3) AS implicit
   FROM (pg_authid r
     JOIN pg_user u ON ((u.usename = r.rolname)));]]></complex-attribute>
                        <category _I_D="30ce1aaa-c712-4516-83ef-d20b76c09183" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fec114b8-595d-491f-a9db-81677204db2a" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="936ffbf7-7646-42f2-af2e-79d60712a91d" name="sys_dba_sequences" context="sys_dba_sequences" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_SEQUENCES describes all sequences in the database">
                        <complex-attribute name="sql"><![CDATA[ SELECT (s.schemaname)::character varying(30) AS sequence_owner,
    (s.sequencename)::character varying(30) AS sequence_name,
    (s.min_value)::numeric AS min_value,
    (s.max_value)::numeric AS max_value,
    (s.increment_by)::numeric AS increment_by,
        CASE s.cycle
            WHEN false THEN 'N'::character varying(1)
            WHEN true THEN 'Y'::character varying(1)
            ELSE NULL::character varying
        END AS cycle_flag,
    'N'::character varying(1) AS order_flag,
    s.cache_size,
    s.last_value AS last_number
   FROM ((pg_sequences s
     JOIN pg_class c ON (((c.relname = s.sequencename) AND (c.relkind = 'S'::"char"))))
     JOIN pg_user u ON ((c.relowner = u.usesysid)))
  WHERE (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text));]]></complex-attribute>
                        <category _I_D="c0f10c00-cb78-43f7-b452-18339046ff87" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f9f376b8-13ba-4901-b59b-a3123dd7c52f" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="862f4b86-11ee-4ebb-912e-d6e70db52398" name="sys_dba_source" context="sys_dba_source" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspowner)::character varying(30) AS owner,
    (s.name)::character varying(30) AS name,
    (s.type)::character varying(12) AS type,
    (generate_subscripts(s.text, 1))::numeric AS line,
    (unnest(s.text))::character varying(4000) AS text
   FROM (( SELECT c.relnamespace AS nsp,
            t.tgname AS name,
            'TRIGGER'::text AS type,
            string_to_array(pg_get_triggerdef(t.oid), chr(10)) AS text
           FROM ((pg_trigger t
             JOIN pg_class c ON ((c.oid = t.tgrelid)))
             JOIN pg_user u ON ((u.usesysid = c.relowner)))
        UNION ALL
         SELECT f.pronamespace AS nsp,
            f.proname AS name,
                CASE
                    WHEN (f.prokind = 'f'::"char") THEN 'FUNCTION'::text
                    WHEN (f.prokind = 'p'::"char") THEN 'PROCEDURE'::text
                    ELSE NULL::text
                END AS type,
            string_to_array(pg_get_functiondef(f.oid), chr(10)) AS text
           FROM ((pg_proc f
             JOIN pg_type ret ON ((f.prorettype = ret.oid)))
             JOIN pg_user u ON ((u.usesysid = f.proowner)))
          WHERE (f.prokind = ANY (ARRAY['f'::"char", 'p'::"char"]))
        UNION ALL
         SELECT t.typnamespace AS nsp,
            t.typname AS name,
            'TYPE'::text AS type,
                CASE
                    WHEN (t.typtype = 'c'::"char") THEN ARRAY( SELECT ((('CREATE OR REPLACE TYPE '::text || (t.typname)::text) || ' AS ('::text) || chr(10))
                    UNION ALL
                     SELECT (((((a.attname)::text || ' '::text) || format_type(a.atttypid, a.atttypmod)) ||
                            CASE
                                WHEN (lead(a.attrelid, 1) OVER () IS NULL) THEN ''::text
                                ELSE ','::text
                            END) || chr(10))
                       FROM pg_attribute a
                      WHERE (a.attrelid = t.typrelid)
                    UNION ALL
                     SELECT ');'::text)
                    WHEN (t.typtype = 'd'::"char") THEN ARRAY( SELECT ((('CREATE OR REPLACE DOMAIN '::text || (t.typname)::text) || ' AS '::text) || format_type(tt.oid, NULL::integer))
                       FROM pg_type tt
                      WHERE (tt.typarray = t.typbasetype))
                    ELSE NULL::text[]
                END AS text
           FROM (pg_type t
             JOIN pg_user u ON ((u.usesysid = t.typowner)))
          WHERE (((t.typrelid = (0)::oid) OR ( SELECT (c.relkind = 'c'::"char")
                   FROM pg_class c
                  WHERE (c.oid = t.typrelid))) AND (NOT (EXISTS ( SELECT 1
                   FROM pg_type el
                  WHERE ((el.oid = t.typelem) AND (el.typarray = t.oid))))))) s
     JOIN pg_namespace n ON ((s.nsp = n.oid)))
  WHERE ((n.nspname <> 'pg_catalog'::name) AND (n.nspname <> 'information_schema'::name) AND (n.nspname !~ '^pg_toast'::text));]]></complex-attribute>
                        <category _I_D="ff4c03b8-3dce-4e49-bfea-b2fb40e3a5f3" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c352166d-452c-4482-a3db-ef103b167db5" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="9e2b0b43-ef3a-435a-be94-cefbb5cb83e7" name="sys_dba_tab_cols" context="sys_dba_tab_cols" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="describes the columns of all tables, views, and clusters in the database">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.relname)::character varying(30) AS table_name,
    (a.attname)::character varying(30) AS column_name,
    (format_type(a.atttypid, a.atttypmod))::character varying(106) AS data_type,
    NULL::character varying(3) AS data_type_mod,
    NULL::character varying(30) AS data_type_owner,
    (a.attlen)::numeric AS data_length,
    NULL::numeric AS data_precision,
    NULL::numeric AS data_scale,
        CASE
            WHEN a.attnotnull THEN 'N'::character varying(1)
            ELSE 'Y'::character varying(1)
        END AS nullable,
    (a.attnum)::numeric AS column_id,
    NULL::numeric AS default_length,
    pg_get_expr(d.adbin, d.adrelid) AS data_default,
    (s.n_distinct)::numeric AS num_distinct,
    NULL::numeric AS low_value,
    NULL::numeric AS high_value,
    (s.null_frac)::numeric AS density,
    NULL::numeric AS num_nulls,
    NULL::numeric AS num_buckets,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::numeric AS sample_size,
    'NCHAR_CS'::character varying(44) AS character_set_name,
    NULL::numeric AS char_col_decl_length,
        CASE
            WHEN (COALESCE(st.last_autoanalyze, st.last_analyze) IS NOT NULL) THEN 'YES'::character varying(3)
            ELSE 'NO'::character varying(3)
        END AS global_stats,
    'NO'::character varying(3) AS user_stats,
    (s.avg_width)::numeric AS avg_col_len,
    information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)) AS char_length,
    NULL::character varying(1) AS char_used,
    NULL::character varying(3) AS v80_fmt_image,
    NULL::character varying(3) AS data_upgraded,
    'NO'::character varying(3) AS hidden_column,
    'NO'::character varying(3) AS virtual_column,
    (a.attnum)::numeric AS segment_column_id,
    (a.attnum)::numeric AS internal_column_id,
    'NONE'::character varying(4) AS histogram,
    (a.attname)::character varying(4000) AS qualified_col_name
   FROM ((((((pg_attribute a
     JOIN pg_class c ON ((c.oid = a.attrelid)))
     JOIN pg_type t ON ((a.atttypid = t.oid)))
     LEFT JOIN pg_attrdef d ON (((c.oid = d.adrelid) AND (a.attnum = d.adnum))))
     JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
     LEFT JOIN pg_stats s ON (((s.schemaname = n.nspname) AND (s.tablename = c.relname) AND (s.attname = a.attname))))
     LEFT JOIN pg_stat_user_tables st ON ((st.relid = c.oid)))
  WHERE ((a.attnum > 0) AND (NOT a.attisdropped) AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text)) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="5c05af62-c02a-4b42-9b78-b9a15d11f9c1" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cbf12e8e-f242-4be5-a21a-8332d24fcfb4" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="e0dc36af-4c46-4dea-9d8b-d0a757b57712" name="sys_dba_tab_columns" context="sys_dba_tab_columns" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_TAB_COLUMNS describes the columns of all tables, views, and clusters in the database. Its columns are the same as those in &quot;ALL_TAB_COLUMNS&quot;">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.relname)::character varying(30) AS table_name,
    (a.attname)::character varying(30) AS column_name,
    (format_type(a.atttypid, a.atttypmod))::character varying(106) AS data_type,
    NULL::character varying(3) AS data_type_mod,
    NULL::character varying(30) AS data_type_owner,
    (a.attlen)::numeric AS data_length,
    NULL::numeric AS data_precision,
    NULL::numeric AS data_scale,
        CASE
            WHEN a.attnotnull THEN 'N'::character varying(1)
            ELSE 'Y'::character varying(1)
        END AS nullable,
    (a.attnum)::numeric AS column_id,
    NULL::numeric AS default_length,
    pg_get_expr(d.adbin, d.adrelid) AS data_default,
    (s.n_distinct)::numeric AS num_distinct,
    NULL::numeric AS low_value,
    NULL::numeric AS high_value,
    (s.null_frac)::numeric AS density,
    NULL::numeric AS num_nulls,
    NULL::numeric AS num_buckets,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::numeric AS sample_size,
    'NCHAR_CS'::character varying(44) AS character_set_name,
    NULL::numeric AS char_col_decl_length,
        CASE
            WHEN (COALESCE(st.last_autoanalyze, st.last_analyze) IS NOT NULL) THEN 'YES'::character varying(3)
            ELSE 'NO'::character varying(3)
        END AS global_stats,
    'NO'::character varying(3) AS user_stats,
    (s.avg_width)::numeric AS avg_col_len,
    information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)) AS char_length,
    NULL::character varying(1) AS char_used,
    NULL::character varying(3) AS v80_fmt_image,
    NULL::character varying(3) AS data_upgraded,
    'NONE'::character varying(4) AS histogram
   FROM ((((((pg_attribute a
     JOIN pg_class c ON ((c.oid = a.attrelid)))
     LEFT JOIN pg_attrdef d ON (((c.oid = d.adrelid) AND (a.attnum = d.adnum))))
     JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
     JOIN pg_type t ON ((a.atttypid = t.oid)))
     LEFT JOIN pg_stats s ON (((s.schemaname = n.nspname) AND (s.tablename = c.relname) AND (s.attname = a.attname))))
     LEFT JOIN pg_stat_user_tables st ON ((st.relid = c.oid)))
  WHERE ((a.attnum > 0) AND (NOT a.attisdropped) AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text)) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="63600f5b-37e1-430b-88ef-1d7d487aac97" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1858ca81-70ce-4e74-806e-410b0c86bc99" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="14450431-7213-4ab3-a76d-576580723927" name="sys_dba_tab_comments" context="sys_dba_tab_comments" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.relname)::character varying(30) AS table_name,
        CASE
            WHEN (c.relkind = 'r'::"char") THEN 'TABLE'::text
            WHEN (c.relkind = 'v'::"char") THEN 'VIEW'::text
            ELSE NULL::text
        END AS table_type,
    (obj_description(c.oid))::character varying(4000) AS comments,
    (0)::numeric AS origin_con_id
   FROM (pg_class c
     JOIN pg_namespace n ON ((c.relnamespace = n.oid)))
  WHERE ((c.relkind = ANY (ARRAY['r'::"char", 'v'::"char"])) AND (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text)) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="c03d9dd2-d753-4091-ac34-42ed4ccc258b" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4c55b00f-9ca6-4b90-b0b4-a616f84300cc" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="35c4de33-3d38-44cc-836a-4452418f313c" name="sys_dba_tables" context="sys_dba_tables" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="The SYS.DBA_TABLES view describes all tables in the database.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (t.schemaname)::character varying(30) AS owner,
    (t.tablename)::character varying(30) AS table_name,
    (t.tablespace)::character varying(30) AS tablespace_name,
    NULL::character varying(30) AS cluster_name,
    NULL::character varying(30) AS iot_name,
    'VALID'::character varying(8) AS status,
    NULL::numeric AS pct_free,
    NULL::numeric AS pct_used,
    NULL::numeric AS ini_trans,
    NULL::numeric AS max_trans,
    NULL::numeric AS initial_extent,
    NULL::numeric AS next_extent,
    NULL::numeric AS min_extents,
    NULL::numeric AS max_extents,
    NULL::numeric AS pct_increase,
    NULL::numeric AS freelists,
    NULL::numeric AS freelist_groups,
    'NO'::character varying(3) AS logging,
    'N'::character varying(1) AS backed_up,
    stat.n_live_tup AS num_rows,
    NULL::numeric AS blocks,
    NULL::numeric AS empty_blocks,
    NULL::numeric AS avg_space,
    NULL::numeric AS chain_cnt,
    NULL::numeric AS avg_row_len,
    NULL::numeric AS avg_space_freelist_blocks,
    NULL::numeric AS num_freelist_blocks,
    NULL::character varying(10) AS degree,
    NULL::character varying(10) AS instances,
    NULL::character varying(5) AS cache,
    NULL::character varying(8) AS table_lock,
    NULL::numeric AS sample_size,
    (COALESCE(stat.last_autoanalyze, stat.last_analyze))::date AS last_analyzed,
    'NO'::character varying(3) AS partitioned,
    NULL::character varying(12) AS iot_type,
        CASE
            WHEN ((n.nspname !~ '^pg_toast'::text) AND (n.nspname ~~ 'pg_temp%'::text)) THEN 'Y'::text
            ELSE 'N'::text
        END AS temporary,
    'N'::character varying(1) AS secondary,
    'NO'::character varying(3) AS nested,
    'DEFAULT'::character varying(7) AS buffer_pool,
    'DEFAULT'::character varying(7) AS flash_cache,
    'DEFAULT'::character varying(7) AS cell_flash_cache,
    'DISABLED'::character varying(8) AS row_movement,
    'NO'::character varying(3) AS global_stats,
    NULL::character varying(3) AS user_stats,
    NULL::character varying(15) AS duration,
    'DISABLED'::character varying(8) AS skip_corrupt,
    'NO'::character varying(3) AS monitoring,
    NULL::character varying(30) AS cluster_owner,
    'DISABLED'::character varying(8) AS dependencies,
    'DISABLED'::character varying(8) AS compression,
    NULL::character varying(12) AS compress_for,
    'NO'::character varying(3) AS dropped,
    NULL::character varying(3) AS read_only,
    'YES'::character varying(3) AS segment_created,
    'DEFAULT'::character varying(7) AS result_cache
   FROM ((pg_tables t
     JOIN pg_stat_user_tables stat ON (((t.schemaname = stat.schemaname) AND (t.tablename = stat.relname))))
     JOIN pg_namespace n ON ((t.schemaname = n.nspname)))
  WHERE (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR (pg_has_role('rds_superuser'::name, 'member'::text) AND (t.schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name]))));]]></complex-attribute>
                        <category _I_D="850ffa70-1c6b-4613-b0f5-a0195c2fe830" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="dcf38e4b-2b87-4090-bfb7-4ff5997d347a" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="fbcd1762-65ab-4f42-8206-945baf2ec56c" name="sys_dba_triggers" context="sys_dba_triggers" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="DBA_TRIGGERS describes all triggers in the database.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(128) AS owner,
    (trg.tgname)::character varying(128) AS trigger_name,
    (
        CASE ((trg.tgtype)::integer & 66)
            WHEN 2 THEN ('BEFORE'::text ||
            CASE ((trg.tgtype)::integer & 1)
                WHEN 1 THEN ' EACH ROW'::text
                ELSE 'STATEMENT'::text
            END)
            WHEN 64 THEN 'INSTEAD OF'::text
            ELSE ('AFTER'::text ||
            CASE ((trg.tgtype)::integer & 1)
                WHEN 1 THEN ' EACH ROW'::text
                ELSE 'STATEMENT'::text
            END)
        END)::character varying(16) AS trigger_type,
    (
        CASE ((trg.tgtype)::integer & ((28)::smallint)::integer)
            WHEN 32 THEN 'TRUNCATE'::text
            WHEN 16 THEN 'UPDATE'::text
            WHEN 8 THEN 'DELETE'::text
            WHEN 4 THEN 'INSERT'::text
            WHEN 20 THEN 'INSERT OR UPDATE'::text
            WHEN 28 THEN 'INSERT OR UPDATE OR DELETE'::text
            WHEN 24 THEN 'UPDATE OR DELETE'::text
            WHEN 12 THEN 'INSERT OR DELETE'::text
            ELSE NULL::text
        END)::character varying(246) AS triggering_event,
    (ns.nspname)::character varying(128) AS table_owner,
    (
        CASE ((trg.tgtype)::integer & 66)
            WHEN 64 THEN 'VIEW'::text
            ELSE 'TABLE'::text
        END)::character varying(18) AS base_object_type,
    (tbl.relname)::character varying(128) AS table_name,
    (( SELECT string_agg((a.attname)::text, ', '::text) AS string_agg
           FROM pg_attribute a
          WHERE ((a.attrelid = tbl.oid) AND (a.attnum = ANY ((trg.tgattr)::smallint[])))))::character varying(4000) AS column_name,
    'REFERENCING NEW AS NEW OLD AS OLD'::character varying(422) AS referencing_names,
    (
        CASE
            WHEN pg_has_role(tbl.relowner, 'USAGE'::text) THEN (regexp_match(pg_get_triggerdef(trg.oid), '.{35,} WHEN \((.+)\) EXECUTE PROCEDURE'::text))[1]
            ELSE NULL::text
        END)::character varying(4000) AS when_clause,
    (
        CASE
            WHEN (trg.tgenabled = 'D'::"char") THEN 'DISABLED'::text
            ELSE 'ENABLED'::text
        END)::character varying(8) AS status,
    (obj_description(trg.oid))::character varying(400) AS description,
    'PL/SQL'::character varying(11) AS action_type,
    (((n.nspname)::text || '.'::text) || (proc.proname)::text) AS trigger_body,
    'NO'::character varying(3) AS crossedition,
    'NO'::character varying(3) AS before_statement,
    'NO'::character varying(3) AS before_row,
    'NO'::character varying(3) AS after_row,
    'NO'::character varying(3) AS after_statement,
    'NO'::character varying(3) AS instead_of_row,
    (
        CASE ((trg.tgtype)::integer & 66)
            WHEN 2 THEN 'YES'::text
            WHEN 64 THEN 'NO'::text
            ELSE 'YES'::text
        END)::character varying(3) AS fire_once,
    'NO'::character varying(3) AS apply_server_only
   FROM ((((pg_trigger trg
     JOIN pg_proc proc ON ((proc.oid = trg.tgfoid)))
     JOIN pg_namespace n ON ((n.oid = proc.pronamespace)))
     JOIN pg_class tbl ON ((trg.tgrelid = tbl.oid)))
     JOIN pg_namespace ns ON ((ns.oid = tbl.relnamespace)))
  WHERE ((NOT trg.tgisinternal) AND (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text)));]]></complex-attribute>
                        <category _I_D="920406d5-b818-4098-924c-c371471f5c1c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="94e4e5a2-b075-4b50-8980-488f2c4cf187" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="207e5233-b4a0-4507-a287-c07c35d49517" name="sys_dba_users" context="sys_dba_users" subcategories-loading="none" object-loading="extended" is-updatable="YES" check-option="NONE" comment="describes all users of the database and contains more columns than ALL_USERS.">
                        <complex-attribute name="sql"><![CDATA[ SELECT pg_namespace.nspname AS username,
    pg_namespace.nspowner AS user_id,
    NULL::character varying(30) AS password,
    'OPEN'::character varying(32) AS account_status,
    NULL::timestamp without time zone AS lock_date,
    NULL::timestamp without time zone AS expiry_date,
    'USERS'::character varying(30) AS default_tablespace,
    'TEMP'::character varying(30) AS temporary_tablespace,
    NULL::timestamp without time zone AS created,
    'DEFAULT'::character varying(30) AS profile,
    NULL::character varying(30) AS initial_rsrc_consumer_group,
    NULL::character varying(4000) AS external_name,
    NULL::character varying(8) AS password_versions,
    NULL::character varying(1) AS editions_enabled,
    'PASSWORD'::character varying(8) AS authentication_type
   FROM pg_namespace
  WHERE (( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text));]]></complex-attribute>
                        <category _I_D="4d990346-ba86-486e-8fc6-86089d822808" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="aeeabfd6-7070-4e58-934d-dc3852359eac" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="1c09ca55-5f7d-4a16-92f4-5fedf911ae6b" name="sys_dba_views" context="sys_dba_views" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="The SYS.DBA_VIEWS view describes all views in the database.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (pg_views.schemaname)::character varying(30) AS owner,
    (pg_views.viewname)::character varying(30) AS view_name,
    (length(pg_views.definition))::numeric AS text_length,
    (pg_views.definition)::character varying(409600) AS text,
    NULL::numeric AS type_text_length,
    NULL::character varying(4000) AS type_text,
    NULL::numeric AS oid_text_length,
    NULL::character varying(4000) AS oid_text,
    NULL::character varying(30) AS view_type_owner,
    NULL::character varying(30) AS view_type,
    NULL::character varying(30) AS superview_name,
    'N'::character varying(1) AS editioning_view,
    'Y'::character varying(1) AS read_only
   FROM pg_views
  WHERE ((( SELECT pg_user.usesuper
           FROM pg_user
          WHERE (pg_user.usename = USER)) OR pg_has_role('rds_superuser'::name, 'member'::text)) AND (pg_views.schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="93b03dfb-e583-4505-a524-ef192025910a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cef504b1-e5fa-4add-9b5e-93a022ea17c9" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="d986fff4-e7cd-40a3-bf16-51c5a47b4077" name="sys_user_cons_columns" context="sys_user_cons_columns" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_CONS_COLUMNS describes columns that are owned by the current user and that are specified in constraint definitions.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (x.cstrschema)::character varying(128) AS owner,
    (x.cstrname)::character varying(128) AS constraint_name,
    (x.tblname)::character varying(128) AS table_name,
    (x.colname)::character varying(4000) AS column_name,
    (rank() OVER (PARTITION BY x.cstrschema, x.tblname, x.cstrname ORDER BY x.colnum))::smallint AS "position"
   FROM (( SELECT DISTINCT nr.nspname,
            r.relname,
            r.relowner,
            a.attname,
            a.attnum,
            nc.nspname,
            c.conname
           FROM pg_namespace nr,
            pg_class r,
            pg_attribute a,
            pg_depend d,
            pg_namespace nc,
            pg_constraint c
          WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND (d.refclassid = ('pg_class'::regclass)::oid) AND (d.refobjid = r.oid) AND (d.refobjsubid = a.attnum) AND (d.classid = ('pg_constraint'::regclass)::oid) AND (d.objid = c.oid) AND (c.connamespace = nc.oid) AND (c.contype = 'c'::"char") AND (r.relkind = ANY (ARRAY['r'::"char", 'p'::"char"])) AND (NOT a.attisdropped))
        UNION ALL
         SELECT nr.nspname,
            r.relname,
            r.relowner,
            a.attname,
            a.attnum,
            nc.nspname,
            c.conname
           FROM pg_namespace nr,
            pg_class r,
            pg_attribute a,
            pg_namespace nc,
            pg_constraint c
          WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND (nc.oid = c.connamespace) AND (r.oid =
                CASE c.contype
                    WHEN 'f'::"char" THEN c.confrelid
                    ELSE c.conrelid
                END) AND (a.attnum = ANY (
                CASE c.contype
                    WHEN 'f'::"char" THEN c.confkey
                    ELSE c.conkey
                END)) AND (NOT a.attisdropped) AND (c.contype = ANY (ARRAY['p'::"char", 'u'::"char", 'f'::"char"])) AND (r.relkind = ANY (ARRAY['r'::"char", 'p'::"char"])))) x(tblschema, tblname, tblowner, colname, colnum, cstrschema, cstrname)
     JOIN pg_user u ON ((u.usesysid = x.tblowner)))
  WHERE (u.usename = USER);]]></complex-attribute>
                        <category _I_D="f9909627-71d8-404b-9adf-9d6df5ba0445" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c565ed8b-e24d-4301-8928-299765d754f4" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="1b1c287d-27fa-4605-973b-37e4087a1263" name="sys_user_constraints" context="sys_user_constraints" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_CONSTRAINTS describes all constraint definitions on tables owned by the current user">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspname)::character varying(30) AS owner,
    (c.conname)::character varying(30) AS constraint_name,
    (c.contype)::character varying(1) AS constraint_type,
    (cl.relname)::character varying(30) AS table_name,
    pg_get_constraintdef(c.oid) AS search_condition,
    (n_ref.nspname)::character varying(30) AS r_owner,
    (c_ref.conname)::character varying(30) AS r_constraint_name,
        CASE c.confdeltype
            WHEN 'a'::"char" THEN 'no action'::character varying(9)
            WHEN 'r'::"char" THEN 'restrict'::character varying(9)
            WHEN 'c'::"char" THEN 'cascade'::character varying(9)
            WHEN 'n'::"char" THEN 'set null'::character varying(9)
            WHEN 'd'::"char" THEN 'set default'::character varying(11)
            ELSE NULL::character varying(9)
        END AS delete_rule,
    'ENABLED'::character varying(8) AS status,
        CASE
            WHEN c.condeferrable THEN 'DEFERRABLE'::character varying(14)
            ELSE 'NOT DEFERRABLE'::character varying(14)
        END AS "deferrable",
        CASE
            WHEN c.condeferred THEN 'DEFERRED'::character varying(9)
            ELSE 'IMMEDIATE'::character varying(9)
        END AS deferred,
        CASE
            WHEN c.convalidated THEN 'VALIDATED'::character varying(13)
            ELSE 'NOT VALIDATED'::character varying(13)
        END AS validated,
    'GENERATED NAME'::character varying(14) AS generated,
    NULL::character varying(3) AS bad,
    NULL::character varying(4) AS rely,
    NULL::date AS last_change,
    (n.nspname)::character varying(30) AS index_owner,
    (cl_ind.relname)::character varying(30) AS index_name,
    NULL::character varying(7) AS invalid,
    NULL::character varying(14) AS view_related
   FROM ((((((((pg_constraint c
     JOIN pg_namespace n ON ((n.oid = c.connamespace)))
     JOIN pg_class cl ON ((cl.oid = c.conrelid)))
     JOIN pg_user u ON ((cl.relowner = u.usesysid)))
     LEFT JOIN pg_class cl_ref ON ((cl_ref.oid = c.confrelid)))
     LEFT JOIN pg_namespace n_ref ON ((n_ref.oid = cl_ref.relnamespace)))
     LEFT JOIN pg_constraint c_ref ON (((c_ref.conrelid = c.confrelid) AND (c_ref.contype = 'p'::"char"))))
     LEFT JOIN pg_index i ON ((i.indrelid = cl_ref.oid)))
     LEFT JOIN pg_class cl_ind ON ((cl_ind.oid = c.conindid)))
  WHERE (u.usename = USER);]]></complex-attribute>
                        <category _I_D="3ec041d5-e3de-4bd3-a490-46a9ffbb30f8" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d41d0425-bc46-43d9-bf87-394ba9dfbdca" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="737ccff3-00bd-44c3-8e78-4e0d0aba0502" name="sys_user_ind_columns" context="sys_user_ind_columns" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_IND_COLUMNS describes the columns of the indexes owned by the current user and columns of indexes on tables owned by the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (irel.relname)::character varying(128) AS index_name,
    (trel.relname)::character varying(128) AS table_name,
    (a.attname)::character varying(4000) AS column_name,
    (c.ordinality)::integer AS column_position,
    COALESCE(information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)), information_schema._pg_numeric_precision(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*))) AS column_length,
    COALESCE(information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)), 0) AS char_length,
    (
        CASE ((o.option)::integer & 1)
            WHEN 1 THEN 'DESC'::text
            ELSE 'ASC'::text
        END)::character varying(4) AS descend,
    NULL::integer AS collated_column_id
   FROM ((((((((((pg_index i
     JOIN pg_class trel ON ((trel.oid = i.indrelid)))
     JOIN pg_namespace tnsp ON ((trel.relnamespace = tnsp.oid)))
     JOIN pg_class irel ON ((irel.oid = i.indexrelid)))
     JOIN pg_namespace insp ON ((irel.relnamespace = insp.oid)))
     CROSS JOIN LATERAL unnest(i.indkey) WITH ORDINALITY c(colnum, ordinality))
     LEFT JOIN LATERAL unnest(i.indoption) WITH ORDINALITY o(option, ordinality) ON ((c.ordinality = o.ordinality)))
     JOIN pg_attribute a ON (((trel.oid = a.attrelid) AND (a.attnum = c.colnum))))
     JOIN (pg_type t
     JOIN pg_namespace nt ON ((t.typnamespace = nt.oid))) ON ((a.atttypid = t.oid)))
     JOIN pg_user ui ON ((irel.relowner = ui.usesysid)))
     JOIN pg_user ut ON ((trel.relowner = ut.usesysid)))
  WHERE ((ui.usename = USER) OR (ut.usename = USER));]]></complex-attribute>
                        <category _I_D="862639a7-ba09-4cbf-9786-d86c75e14e29" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6107235f-7fb4-4926-98f2-f9ba616a54ad" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="8eb4a3f8-e943-4cdd-b2b8-87a55e462b92" name="sys_user_indexes" context="sys_user_indexes" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_INDEXES describes the indexes owned by the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (irel.relname)::character varying(128) AS index_name,
    (
        CASE
            WHEN (i.indexprs IS NULL) THEN 'NORMAL'::text
            ELSE 'FUNCTION-BASED NORMAL'::text
        END)::character varying(27) AS index_type,
    (tnsp.nspname)::character varying(128) AS table_owner,
    (trel.relname)::character varying(128) AS table_name,
    'TABLE'::character varying(11) AS table_type,
    (
        CASE
            WHEN i.indisunique THEN 'UNIQUE'::text
            ELSE 'NONUNIQUE'::text
        END)::character varying(9) AS uniqueness,
    'DISABLED'::character varying(13) AS compression,
    NULL::integer AS prefix_length,
    (ts.spcname)::character varying(30) AS tablespace_name,
    NULL::integer AS ini_trans,
    NULL::integer AS max_trans,
    NULL::integer AS initial_extent,
    NULL::integer AS next_extent,
    NULL::integer AS min_extents,
    NULL::integer AS max_extents,
    NULL::integer AS pct_increase,
    NULL::integer AS pct_threshold,
    NULL::integer AS include_column,
    NULL::integer AS freelists,
    NULL::integer AS freelist_groups,
    NULL::integer AS pct_free,
    (
        CASE trel.relpersistence
            WHEN 'p'::"char" THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS logging,
    NULL::integer AS blevel,
    NULL::integer AS leaf_blocks,
    (
        CASE
            WHEN i.indisprimary THEN st.n_live_tup
            ELSE NULL::bigint
        END)::integer AS distinct_keys,
    NULL::integer AS avg_leaf_blocks_per_key,
    NULL::integer AS avg_data_blocks_per_key,
    NULL::integer AS clustering_factor,
    (
        CASE
            WHEN i.indisready THEN 'ENABLED'::text
            ELSE 'DISABLED'::text
        END)::character varying(8) AS status,
    (st.n_live_tup)::integer AS num_rows,
    NULL::integer AS sample_size,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::character varying(40) AS degree,
    NULL::character varying(40) AS instances,
    (
        CASE
            WHEN trel.relispartition THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS partitioned,
    (
        CASE trel.relpersistence
            WHEN 't'::"char" THEN 'Y'::text
            ELSE 'N'::text
        END)::character varying(1) AS temporary,
    'N'::character varying(1) AS generated,
    'N'::character varying(1) AS secondary,
    'DEFAULT'::character varying(7) AS buffer_pool,
    'DEFAULT'::character varying(7) AS flash_cache,
    'DEFAULT'::character varying(7) AS cell_flash_cache,
    'NO'::character varying(3) AS user_stats,
    NULL::character varying(15) AS duration,
    NULL::integer AS pct_direct_access,
    NULL::character varying(128) AS ityp_owner,
    NULL::character varying(128) AS ityp_name,
    NULL::character varying(1000) AS parameters,
    'NO'::character varying(3) AS global_stats,
    NULL::character varying(12) AS domidx_status,
    NULL::character varying(6) AS domidx_opstatus,
    NULL::character varying(8) AS funcidx_status,
    'NO'::character varying(3) AS join_index,
    'NO'::character varying(3) AS iot_redundant_pkey_elim,
    'NO'::character varying(3) AS dropped,
    (
        CASE
            WHEN i.indisvalid THEN 'VISIBLE'::text
            ELSE 'INVISIBLE'::text
        END)::character varying(9) AS visibility,
    NULL::character varying(14) AS domidx_management,
    (
        CASE irel.relpages
            WHEN 0 THEN 'NO'::text
            ELSE 'YES'::text
        END)::character varying(3) AS segment_created,
    'NO'::character varying(3) AS orphaned_entries,
    (
        CASE
            WHEN (i.indpred IS NULL) THEN 'FULL'::text
            ELSE 'PARTIAL'::text
        END)::character varying(7) AS indexing
   FROM (((((((pg_index i
     JOIN pg_class trel ON ((trel.oid = i.indrelid)))
     JOIN pg_namespace tnsp ON ((trel.relnamespace = tnsp.oid)))
     JOIN pg_class irel ON ((irel.oid = i.indexrelid)))
     JOIN pg_am am ON (((am.oid = irel.relam) AND (am.amname = 'btree'::name))))
     LEFT JOIN pg_tablespace ts ON ((ts.oid = irel.reltablespace)))
     LEFT JOIN pg_stat_all_tables st ON (((st.schemaname = tnsp.nspname) AND (st.relname = trel.relname))))
     JOIN pg_user u ON ((irel.relowner = u.usesysid)))
  WHERE (u.usename = USER);]]></complex-attribute>
                        <category _I_D="a08c026d-6aa7-4b75-9715-c9ab0c65c945" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="446926df-24cd-48d1-b61e-585cee76fd83" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="cbec610e-6a69-4145-a503-6aa923e0e9e3" name="sys_user_objects" context="sys_user_objects" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_OBJECTS describes all objects owned by the current user">
                        <complex-attribute name="sql"><![CDATA[ SELECT (c.relname)::character varying(30) AS object_name,
    NULL::character varying(30) AS subobject_name,
    (c.oid)::bigint AS object_id,
        CASE
            WHEN (c.relkind = ANY (ARRAY['t'::"char", 'r'::"char"])) THEN (c.oid)::bigint
            ELSE NULL::bigint
        END AS data_object_id,
        CASE c.relkind
            WHEN 'r'::"char" THEN 'ordinary table'::character varying(17)
            WHEN 'i'::"char" THEN 'index'::character varying(17)
            WHEN 'S'::"char" THEN 'sequence'::character varying(17)
            WHEN 'v'::"char" THEN 'view'::character varying(17)
            WHEN 'c'::"char" THEN 'composite type'::character varying(17)
            WHEN 't'::"char" THEN 'TOAST table'::character varying(17)
            WHEN 'f'::"char" THEN 'foreign table'::character varying(17)
            ELSE NULL::character varying(17)
        END AS object_type,
    NULL::date AS created,
    NULL::date AS last_ddl_time,
    NULL::character varying(78) AS "timestamp",
    'VALID'::character varying(7) AS status,
        CASE c.relpersistence
            WHEN 't'::"char" THEN 'Y'::text
            ELSE 'N'::text
        END AS temporary,
    'N'::character varying(1) AS generated,
    'N'::character varying(1) AS secondary,
    (c.reltablespace)::integer AS namespace,
    NULL::character varying(30) AS edition_name
   FROM ((pg_class c
     JOIN pg_namespace n ON ((c.relnamespace = n.oid)))
     JOIN pg_user u ON ((c.relowner = u.usesysid)))
  WHERE ((u.usename = USER) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="e68896cf-8014-48e5-92bb-c02ece26b492" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="83828e0a-71d5-44a6-808c-b02e6aaceae4" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="899c6a8a-d8ab-4eb6-a9eb-de6dcaab1f90" name="sys_user_policies" context="sys_user_policies" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_POLICIES describes all Oracle Virtual Private Database (VPD) security policies associated with objects owned by the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (p.tablename)::character varying(128) AS object_name,
    'SYS_DEFAULT'::character varying(128) AS policy_group,
    (p.policyname)::character varying(128) AS policy_name,
    (p.schemaname)::character varying(128) AS pf_owner,
    NULL::character varying(128) AS package,
    NULL::character varying(128) AS function,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'SELECT'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS sel,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'INSERT'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS ins,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'UPDATE'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS upd,
    (
        CASE
            WHEN (p.cmd = ANY (ARRAY['ALL'::text, 'DELETE'::text])) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS del,
    'NO'::character varying(3) AS idx,
    (
        CASE
            WHEN (p.with_check IS NOT NULL) THEN 'YES'::text
            ELSE 'NO'::text
        END)::character varying(3) AS chk_option,
    'YES'::character varying(3) AS enable,
    'NO'::character varying(3) AS static_policy,
    'DYNAMIC'::character varying(24) AS policy_type,
    'NO'::character varying(3) AS long_predicate,
    'NO'::character varying(3) AS common,
    'NO'::character varying(3) AS inherited
   FROM (pg_policies p
     JOIN pg_tables t ON (((t.schemaname = p.schemaname) AND (t.tablename = p.tablename))))
  WHERE (t.tableowner = USER);]]></complex-attribute>
                        <category _I_D="b4b5576b-4e45-4616-89c3-45b301b189da" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c7fe3d22-3f07-40df-a6b3-464462f26adb" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="dd1a4696-23d1-4d73-9b9b-fe6f6154d502" name="sys_user_sequences" context="sys_user_sequences" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_SEQUENCES describes all sequences owned by the current user">
                        <complex-attribute name="sql"><![CDATA[ SELECT (s.sequence_name)::character varying(30) AS sequence_name,
    (s.minimum_value)::numeric AS min_value,
    (s.maximum_value)::numeric AS max_value,
    (s.increment)::numeric AS increment_by,
        CASE s.cycle_option
            WHEN 'NO'::text THEN 'N'::character varying(1)
            WHEN 'YES'::text THEN 'Y'::character varying(1)
            ELSE NULL::character varying
        END AS cycle_flag,
    'N'::character varying(1) AS order_flag,
    0 AS cache_size,
    currval((((quote_ident((s.sequence_schema)::text) || '.'::text) || quote_ident((s.sequence_name)::text)))::regclass) AS last_number
   FROM ((information_schema.sequences s
     JOIN pg_class c ON (((c.relname = (s.sequence_name)::name) AND (c.relkind = 'S'::"char"))))
     JOIN pg_user u ON ((c.relowner = u.usesysid)))
  WHERE (u.usename = USER);]]></complex-attribute>
                        <category _I_D="74f6c369-4d9d-4223-aa8d-e39356647356" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="955c9116-87af-42ec-b992-6953af2ceec1" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="ed5d22b0-834a-44a1-a747-200c4dbd5409" name="sys_user_source" context="sys_user_source" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE">
                        <complex-attribute name="sql"><![CDATA[ SELECT (n.nspowner)::character varying(30) AS owner,
    (s.name)::character varying(30) AS name,
    (s.type)::character varying(12) AS type,
    (generate_subscripts(s.text, 1))::numeric AS line,
    (unnest(s.text))::character varying(4000) AS text
   FROM (( SELECT c.relnamespace AS nsp,
            t.tgname AS name,
            'TRIGGER'::text AS type,
            string_to_array(pg_get_triggerdef(t.oid), chr(10)) AS text
           FROM ((pg_trigger t
             JOIN pg_class c ON ((c.oid = t.tgrelid)))
             JOIN pg_user u ON ((u.usesysid = c.relowner)))
          WHERE (u.usename = USER)
        UNION ALL
         SELECT f.pronamespace AS nsp,
            f.proname AS name,
                CASE
                    WHEN (f.prokind = 'f'::"char") THEN 'FUNCTION'::text
                    WHEN (f.prokind = 'p'::"char") THEN 'PROCEDURE'::text
                    ELSE NULL::text
                END AS type,
            string_to_array(pg_get_functiondef(f.oid), chr(10)) AS text
           FROM ((pg_proc f
             JOIN pg_type ret ON ((f.prorettype = ret.oid)))
             JOIN pg_user u ON ((u.usesysid = f.proowner)))
          WHERE ((f.prokind = ANY (ARRAY['f'::"char", 'p'::"char"])) AND (u.usename = USER))
        UNION ALL
         SELECT t.typnamespace AS nsp,
            t.typname AS name,
            'TYPE'::text AS type,
                CASE
                    WHEN (t.typtype = 'c'::"char") THEN ARRAY( SELECT ((('CREATE OR REPLACE TYPE '::text || (t.typname)::text) || ' AS ('::text) || chr(10))
                    UNION ALL
                     SELECT (((((a.attname)::text || ' '::text) || format_type(a.atttypid, a.atttypmod)) ||
                            CASE
                                WHEN (lead(a.attrelid, 1) OVER () IS NULL) THEN ''::text
                                ELSE ','::text
                            END) || chr(10))
                       FROM pg_attribute a
                      WHERE (a.attrelid = t.typrelid)
                    UNION ALL
                     SELECT ');'::text)
                    WHEN (t.typtype = 'd'::"char") THEN ARRAY( SELECT ((('CREATE OR REPLACE DOMAIN '::text || (t.typname)::text) || ' AS '::text) || format_type(tt.oid, NULL::integer))
                       FROM pg_type tt
                      WHERE (tt.typarray = t.typbasetype))
                    ELSE NULL::text[]
                END AS text
           FROM (pg_type t
             JOIN pg_user u ON ((u.usesysid = t.typowner)))
          WHERE (((t.typrelid = (0)::oid) OR ( SELECT (c.relkind = 'c'::"char")
                   FROM pg_class c
                  WHERE (c.oid = t.typrelid))) AND (NOT (EXISTS ( SELECT 1
                   FROM pg_type el
                  WHERE ((el.oid = t.typelem) AND (el.typarray = t.oid))))) AND (u.usename = USER))) s
     JOIN pg_namespace n ON ((s.nsp = n.oid)))
  WHERE ((n.nspname <> 'pg_catalog'::name) AND (n.nspname <> 'information_schema'::name) AND (n.nspname !~ '^pg_toast'::text));]]></complex-attribute>
                        <category _I_D="ea21362b-0a2b-48c0-9d7c-c4192874aa74" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9d479733-f14d-458e-9db6-d19bb82c9b9b" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="0675770f-9dbb-47e7-a7bd-92d6f378e198" name="sys_user_tab_cols" context="sys_user_tab_cols" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="Describes the columns of the tables, views, and clusters owned by the current user. This view does not display the OWNER column.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (c.relname)::character varying(30) AS table_name,
    (a.attname)::character varying(30) AS column_name,
    (format_type(a.atttypid, a.atttypmod))::character varying(106) AS data_type,
    NULL::character varying(3) AS data_type_mod,
    NULL::character varying(30) AS data_type_owner,
    (a.attlen)::numeric AS data_length,
    NULL::numeric AS data_precision,
    NULL::numeric AS data_scale,
        CASE
            WHEN a.attnotnull THEN 'N'::character varying(1)
            ELSE 'Y'::character varying(1)
        END AS nullable,
    (a.attnum)::numeric AS column_id,
    NULL::numeric AS default_length,
    pg_get_expr(d.adbin, d.adrelid) AS data_default,
    (s.n_distinct)::numeric AS num_distinct,
    NULL::numeric AS low_value,
    NULL::numeric AS high_value,
    (s.null_frac)::numeric AS density,
    NULL::numeric AS num_nulls,
    NULL::numeric AS num_buckets,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::numeric AS sample_size,
    'NCHAR_CS'::character varying(44) AS character_set_name,
    NULL::numeric AS char_col_decl_length,
        CASE
            WHEN (COALESCE(st.last_autoanalyze, st.last_analyze) IS NOT NULL) THEN 'YES'::character varying(3)
            ELSE 'NO'::character varying(3)
        END AS global_stats,
    'NO'::character varying(3) AS user_stats,
    (s.avg_width)::numeric AS avg_col_len,
    information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)) AS char_length,
    NULL::character varying(1) AS char_used,
    NULL::character varying(3) AS v80_fmt_image,
    NULL::character varying(3) AS data_upgraded,
    'NO'::character varying(3) AS hidden_column,
    'NO'::character varying(3) AS virtual_column,
    (a.attnum)::numeric AS segment_column_id,
    (a.attnum)::numeric AS internal_column_id,
    'NONE'::character varying(4) AS histogram,
    (a.attname)::character varying(4000) AS qualified_col_name
   FROM (((((((pg_attribute a
     JOIN pg_class c ON ((c.oid = a.attrelid)))
     JOIN pg_user u ON ((c.relowner = u.usesysid)))
     JOIN pg_type t ON ((a.atttypid = t.oid)))
     LEFT JOIN pg_attrdef d ON (((c.oid = d.adrelid) AND (a.attnum = d.adnum))))
     JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
     LEFT JOIN pg_stats s ON (((s.schemaname = n.nspname) AND (s.tablename = c.relname) AND (s.attname = a.attname))))
     LEFT JOIN pg_stat_user_tables st ON ((st.relid = c.oid)))
  WHERE ((a.attnum > 0) AND (NOT a.attisdropped) AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND (u.usename = USER) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="b9594f09-945c-42af-a475-035f328682dd" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d8995147-bc1e-405f-944e-bffa49c5af96" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="1f745dfa-ab33-46a2-9b2b-bb7d5a10e036" name="sys_user_tab_columns" context="sys_user_tab_columns" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_TAB_COLUMNS describes the columns of the tables, views, and clusters owned by the current user">
                        <complex-attribute name="sql"><![CDATA[ SELECT (c.relname)::character varying(30) AS table_name,
    (a.attname)::character varying(30) AS column_name,
    (format_type(a.atttypid, a.atttypmod))::character varying(106) AS data_type,
    NULL::character varying(3) AS data_type_mod,
    NULL::character varying(30) AS data_type_owner,
    (a.attlen)::numeric AS data_length,
    NULL::numeric AS data_precision,
    NULL::numeric AS data_scale,
        CASE
            WHEN a.attnotnull THEN 'N'::character varying(1)
            ELSE 'Y'::character varying(1)
        END AS nullable,
    (a.attnum)::numeric AS column_id,
    NULL::numeric AS default_length,
    pg_get_expr(d.adbin, d.adrelid) AS data_default,
    (s.n_distinct)::numeric AS num_distinct,
    NULL::numeric AS low_value,
    NULL::numeric AS high_value,
    (s.null_frac)::numeric AS density,
    NULL::numeric AS num_nulls,
    NULL::numeric AS num_buckets,
    (COALESCE(st.last_autoanalyze, st.last_analyze))::date AS last_analyzed,
    NULL::numeric AS sample_size,
    'NCHAR_CS'::character varying(44) AS character_set_name,
    NULL::numeric AS char_col_decl_length,
        CASE
            WHEN (COALESCE(st.last_autoanalyze, st.last_analyze) IS NOT NULL) THEN 'YES'::character varying(3)
            ELSE 'NO'::character varying(3)
        END AS global_stats,
    'NO'::character varying(3) AS user_stats,
    (s.avg_width)::numeric AS avg_col_len,
    information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)) AS char_length,
    NULL::character varying(1) AS char_used,
    NULL::character varying(3) AS v80_fmt_image,
    NULL::character varying(3) AS data_upgraded,
    'NONE'::character varying(4) AS histogram
   FROM (((((((pg_attribute a
     JOIN pg_class c ON ((c.oid = a.attrelid)))
     JOIN pg_user u ON ((c.relowner = u.usesysid)))
     LEFT JOIN pg_attrdef d ON (((c.oid = d.adrelid) AND (a.attnum = d.adnum))))
     JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
     JOIN pg_type t ON ((a.atttypid = t.oid)))
     LEFT JOIN pg_stats s ON (((s.schemaname = n.nspname) AND (s.tablename = c.relname) AND (s.attname = a.attname))))
     LEFT JOIN pg_stat_user_tables st ON ((st.relid = c.oid)))
  WHERE ((a.attnum > 0) AND (NOT a.attisdropped) AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND (u.usename = USER) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="b2a5b944-bf56-4bf6-ba0a-3e7bf42d1e9d" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6810d7f4-fc17-46ca-943d-477c9261da51" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="c4c00314-0ba7-4118-9525-608e3c3fb482" name="sys_user_tab_comments" context="sys_user_tab_comments" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE">
                        <complex-attribute name="sql"><![CDATA[ SELECT (c.relname)::character varying(30) AS table_name,
        CASE
            WHEN (c.relkind = 'r'::"char") THEN 'TABLE'::text
            WHEN (c.relkind = 'v'::"char") THEN 'VIEW'::text
            ELSE NULL::text
        END AS table_type,
    (obj_description(c.oid))::character varying(4000) AS comments
   FROM ((pg_class c
     JOIN pg_namespace n ON ((c.relnamespace = n.oid)))
     JOIN pg_user u ON ((u.usesysid = c.relowner)))
  WHERE ((c.relkind = ANY (ARRAY['r'::"char", 'v'::"char"])) AND (n.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])) AND (u.usename = USER));]]></complex-attribute>
                        <category _I_D="c11b4d6a-84a7-42ce-9e3c-d7a2886bef89" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="29aedc71-7777-4abe-8941-923cd563cade" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="173311dd-16b1-48b5-95ab-92d9f59fc5c4" name="sys_user_tables" context="sys_user_tables" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_TABLES describes the relational tables owned by the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (t.tablename)::character varying(30) AS table_name,
    (t.tablespace)::character varying(30) AS tablespace_name,
    NULL::character varying(30) AS cluster_name,
    NULL::character varying(30) AS iot_name,
    'VALID'::character varying(8) AS status,
    NULL::numeric AS pct_free,
    NULL::numeric AS pct_used,
    NULL::numeric AS ini_trans,
    NULL::numeric AS max_trans,
    NULL::numeric AS initial_extent,
    NULL::numeric AS next_extent,
    NULL::numeric AS min_extents,
    NULL::numeric AS max_extents,
    NULL::numeric AS pct_increase,
    NULL::numeric AS freelists,
    NULL::numeric AS freelist_groups,
    'NO'::character varying(3) AS logging,
    'N'::character varying(1) AS backed_up,
    stat.n_live_tup AS num_rows,
    NULL::numeric AS blocks,
    NULL::numeric AS empty_blocks,
    NULL::numeric AS avg_space,
    NULL::numeric AS chain_cnt,
    NULL::numeric AS avg_row_len,
    NULL::numeric AS avg_space_freelist_blocks,
    NULL::numeric AS num_freelist_blocks,
    NULL::character varying(10) AS degree,
    NULL::character varying(10) AS instances,
    NULL::character varying(5) AS cache,
    NULL::character varying(8) AS table_lock,
    NULL::numeric AS sample_size,
    (COALESCE(stat.last_autoanalyze, stat.last_analyze))::date AS last_analyzed,
    'NO'::character varying(3) AS partitioned,
    NULL::character varying(12) AS iot_type,
        CASE
            WHEN ((n.nspname !~ '^pg_toast'::text) AND (n.nspname ~~ 'pg_temp%'::text)) THEN 'Y'::text
            ELSE 'N'::text
        END AS temporary,
    'N'::character varying(1) AS secondary,
    'NO'::character varying(3) AS nested,
    'DEFAULT'::character varying(7) AS buffer_pool,
    'DEFAULT'::character varying(7) AS flash_cache,
    'DEFAULT'::character varying(7) AS cell_flash_cache,
    'DISABLED'::character varying(8) AS row_movement,
    'NO'::character varying(3) AS global_stats,
    NULL::character varying(3) AS user_stats,
    NULL::character varying(15) AS duration,
    'DISABLED'::character varying(8) AS skip_corrupt,
    'NO'::character varying(3) AS monitoring,
    NULL::character varying(30) AS cluster_owner,
    'DISABLED'::character varying(8) AS dependencies,
    'DISABLED'::character varying(8) AS compression,
    NULL::character varying(12) AS compress_for,
    'NO'::character varying(3) AS dropped,
    NULL::character varying(3) AS read_only,
    'YES'::character varying(3) AS segment_created,
    'DEFAULT'::character varying(7) AS result_cache
   FROM ((pg_tables t
     JOIN pg_stat_user_tables stat ON (((t.schemaname = stat.schemaname) AND (t.tablename = stat.relname))))
     JOIN pg_namespace n ON ((t.schemaname = n.nspname)))
  WHERE ((t.tableowner = USER) AND (t.schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])));]]></complex-attribute>
                        <category _I_D="7bcc4b80-63b2-49f7-8825-f535f558c522" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ffc7cf4a-5cc1-4fd4-9cfa-3ff3d5200de8" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="ff41cf0d-c23d-4448-8fb8-9c1b78d6db93" name="sys_user_triggers" context="sys_user_triggers" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_TRIGGERS describes the triggers owned by the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (trg.tgname)::character varying(128) AS trigger_name,
    (
        CASE ((trg.tgtype)::integer & 66)
            WHEN 2 THEN ('BEFORE'::text ||
            CASE ((trg.tgtype)::integer & 1)
                WHEN 1 THEN ' EACH ROW'::text
                ELSE 'STATEMENT'::text
            END)
            WHEN 64 THEN 'INSTEAD OF'::text
            ELSE ('AFTER'::text ||
            CASE ((trg.tgtype)::integer & 1)
                WHEN 1 THEN ' EACH ROW'::text
                ELSE 'STATEMENT'::text
            END)
        END)::character varying(16) AS trigger_type,
    (
        CASE ((trg.tgtype)::integer & ((28)::smallint)::integer)
            WHEN 32 THEN 'TRUNCATE'::text
            WHEN 16 THEN 'UPDATE'::text
            WHEN 8 THEN 'DELETE'::text
            WHEN 4 THEN 'INSERT'::text
            WHEN 20 THEN 'INSERT OR UPDATE'::text
            WHEN 28 THEN 'INSERT OR UPDATE OR DELETE'::text
            WHEN 24 THEN 'UPDATE OR DELETE'::text
            WHEN 12 THEN 'INSERT OR DELETE'::text
            ELSE NULL::text
        END)::character varying(246) AS triggering_event,
    (ns.nspname)::character varying(128) AS table_owner,
    (
        CASE ((trg.tgtype)::integer & 66)
            WHEN 64 THEN 'VIEW'::text
            ELSE 'TABLE'::text
        END)::character varying(18) AS base_object_type,
    (tbl.relname)::character varying(128) AS table_name,
    (( SELECT string_agg((a.attname)::text, ', '::text) AS string_agg
           FROM pg_attribute a
          WHERE ((a.attrelid = tbl.oid) AND (a.attnum = ANY ((trg.tgattr)::smallint[])))))::character varying(4000) AS column_name,
    'REFERENCING NEW AS NEW OLD AS OLD'::character varying(422) AS referencing_names,
    (
        CASE
            WHEN pg_has_role(tbl.relowner, 'USAGE'::text) THEN (regexp_match(pg_get_triggerdef(trg.oid), '.{35,} WHEN \((.+)\) EXECUTE PROCEDURE'::text))[1]
            ELSE NULL::text
        END)::character varying(4000) AS when_clause,
    (
        CASE
            WHEN (trg.tgenabled = 'D'::"char") THEN 'DISABLED'::text
            ELSE 'ENABLED'::text
        END)::character varying(8) AS status,
    (obj_description(trg.oid))::character varying(400) AS description,
    'PL/SQL'::character varying(11) AS action_type,
    (((n.nspname)::text || '.'::text) || (proc.proname)::text) AS trigger_body,
    'NO'::character varying(3) AS crossedition,
    'NO'::character varying(3) AS before_statement,
    'NO'::character varying(3) AS before_row,
    'NO'::character varying(3) AS after_row,
    'NO'::character varying(3) AS after_statement,
    'NO'::character varying(3) AS instead_of_row,
    (
        CASE ((trg.tgtype)::integer & 66)
            WHEN 2 THEN 'YES'::text
            WHEN 64 THEN 'NO'::text
            ELSE 'YES'::text
        END)::character varying(3) AS fire_once,
    'NO'::character varying(3) AS apply_server_only
   FROM (((((pg_trigger trg
     JOIN pg_proc proc ON ((proc.oid = trg.tgfoid)))
     JOIN pg_namespace n ON ((n.oid = proc.pronamespace)))
     JOIN pg_class tbl ON ((trg.tgrelid = tbl.oid)))
     JOIN pg_namespace ns ON ((ns.oid = tbl.relnamespace)))
     JOIN pg_user u ON ((u.usesysid = tbl.relowner)))
  WHERE ((NOT trg.tgisinternal) AND (u.usename = USER));]]></complex-attribute>
                        <category _I_D="0e680e1c-0e27-4107-9308-5f0a8299ff6a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="63b2966c-06a8-4009-b420-bcf9bb89505d" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="493aa9bc-176b-48b9-9c03-b1287c56c22d" name="sys_user_users" context="sys_user_users" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_USERS describes the current user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT n.nspname AS username,
    n.nspowner AS user_id,
    'OPEN'::character varying(32) AS account_status,
    NULL::timestamp without time zone AS lock_date,
    NULL::timestamp without time zone AS expiry_date,
    'USERS'::character varying(30) AS default_tablespace,
    'TEMP'::character varying(30) AS temporary_tablespace,
    NULL::timestamp without time zone AS created,
    NULL::character varying(30) AS initial_rsrc_consumer_group,
    NULL::character varying(4000) AS external_name
   FROM (pg_namespace n
     JOIN pg_user u ON ((n.nspowner = u.usesysid)))
  WHERE (u.usename = USER);]]></complex-attribute>
                        <category _I_D="28ae711a-9823-4ae8-81c2-e5e180825963" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="417997b2-ac91-44e6-b6ba-2a29b1aa193b" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="c190875c-4439-462c-922e-2c7fa5865445" name="sys_user_views" context="sys_user_views" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="USER_VIEWS describes the views owned by the current user">
                        <complex-attribute name="sql"><![CDATA[ SELECT (pg_views.viewname)::character varying(30) AS view_name,
    (length(pg_views.definition))::numeric AS text_length,
    (pg_views.definition)::character varying(409600) AS text,
    NULL::numeric AS type_text_length,
    NULL::character varying(4000) AS type_text,
    NULL::numeric AS oid_text_length,
    NULL::character varying(4000) AS oid_text,
    NULL::character varying(30) AS view_type_owner,
    NULL::character varying(30) AS view_type,
    NULL::character varying(30) AS superview_name,
    'N'::character varying(1) AS editioning_view,
    'Y'::character varying(1) AS read_only
   FROM pg_views
  WHERE ((pg_views.schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name, 'public_synonyms'::name])) AND (pg_views.viewowner = USER));]]></complex-attribute>
                        <category _I_D="e36b3d56-caab-4f7c-90b2-7c4cfd1c4d95" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f076a3a4-20a2-4895-aaaa-263077ee0f04" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="03bdadf7-25b7-4816-860a-5545d497b503" name="user_sdo_geom_metadata" context="user_sdo_geom_metadata" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="Contains metadata information for all spatial tables owned by the user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (g.f_table_name)::character varying(32) AS table_name,
    (g.f_geometry_column)::character varying(1024) AS column_name,
    NULL::text AS diminfo,
    (g.srid)::double precision AS srid
   FROM (geometry_columns g
     LEFT JOIN pg_tables p ON (((g.f_table_schema = p.schemaname) AND (g.f_table_name = p.tablename))))
  WHERE (p.tableowner = CURRENT_USER);]]></complex-attribute>
                        <category _I_D="cc7baf37-7a4e-44a6-9728-ae06e4ff9413" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="efefd2f3-e28f-467c-a2d2-c3c60c95aa55" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="d33a50ae-818f-423d-9def-ae29d8c65cd3" name="user_sdo_index_info" context="user_sdo_index_info" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="Contains index information for all spatial tables owned by the user.">
                        <complex-attribute name="sql"><![CDATA[ SELECT (pgis.indexname)::character varying(32) AS index_name,
    (gc.f_table_schema)::character varying(30) AS table_owner,
    (pgis.tablename)::character varying(30) AS table_name,
    (gc.f_geometry_column)::character varying(2048) AS column_name,
    'rtree'::character varying(32) AS sdo_index_type,
    NULL::character varying(32) AS sdo_index_table,
    (
        CASE pgi.indisvalid
            WHEN true THEN 'valid'::text
            WHEN false THEN 'invalid'::text
            ELSE NULL::text
        END)::character varying(32) AS sdo_index_status
   FROM (((((pg_indexes pgis
     JOIN geometry_columns gc ON (((pgis.schemaname = gc.f_table_schema) AND (pgis.tablename = gc.f_table_name))))
     LEFT JOIN pg_class t ON ((t.relname = pgis.tablename)))
     LEFT JOIN pg_index pgi ON ((t.oid = pgi.indrelid)))
     LEFT JOIN pg_class c ON (((pgi.indexrelid = c.oid) AND (c.relname = pgis.indexname))))
     LEFT JOIN pg_tables p ON (((gc.f_table_schema = p.schemaname) AND (gc.f_table_name = p.tablename))))
  WHERE (p.tableowner = CURRENT_USER);]]></complex-attribute>
                        <category _I_D="4733278d-6aa9-4ad7-8052-af83549eb95c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="74092f86-a855-43f9-8ad6-df1a61f93d67" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="66706873-fb69-4e4c-b8d7-e23e390dd0c0" name="v$instance" context="v$instance" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="This view displays the state of the current instance (emulates Oracle V$INSTANCE view)">
                        <complex-attribute name="sql"><![CDATA[ SELECT aws_oracle_ext."dbms_utility$current_instance"() AS instance_number,
    (inet_server_addr())::character varying AS instance_name,
    (inet_server_addr())::character varying AS host_name,
    current_setting('server_version_num'::text) AS version,
    pg_postmaster_start_time() AS startup_time,
    'OPEN'::character varying AS status,
    'NO'::character varying AS parallel,
    1 AS "THREAD#",
    'FAILED'::character varying AS archiver,
    NULL::character varying AS log_switch_wait,
    'ALLOWED'::character varying AS logins,
    'NO'::character varying AS shutdown_pending,
    'ACTIVE'::character varying AS database_status,
    'PRIMARY_INSTANCE'::character varying AS instance_role,
    'NORMAL'::character varying AS active_state,
    'NO'::character varying AS blocked;]]></complex-attribute>
                        <category _I_D="7cacb40b-5167-487a-9579-cff29a2ace04" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b0e0fc51-a9c1-41fb-80a1-efbd704fc766" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="5c739296-e114-45ec-a113-ef07dc306620" name="v$nls_parameters" context="v$nls_parameters" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="Emulation for oracle NLS view">
                        <complex-attribute name="sql"><![CDATA[ SELECT "return_v$nls_parameters".parameter,
    "return_v$nls_parameters".value,
    "return_v$nls_parameters".con_id
   FROM aws_oracle_ext."return_v$nls_parameters"() "return_v$nls_parameters"(parameter, value, con_id);]]></complex-attribute>
                        <category _I_D="5532129d-f306-4e6d-81a1-7f809b2a8841" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="032c4868-ef3d-4d1c-9eea-f75821596121" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="fd892d82-e6db-41c1-a7b3-b5761cafbc13" name="v$version" context="v$version" subcategories-loading="none" object-loading="extended" is-updatable="NO" check-option="NONE" comment="V$VERSION emulation">
                        <complex-attribute name="sql"><![CDATA[ SELECT version() AS banner;]]></complex-attribute>
                        <category _I_D="a7abf9ca-6f10-451f-9c93-d2cdf7a0b2b2" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="df30642e-a4a2-4d29-a242-6c158634a62a" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                </category>
                <category _I_D="29781c0d-8dd8-464d-b065-dd235acd3f20" name="Collations" order-num="3" objects-loading="empty" subcategories-loading="full" child-type="collation"/>
                <category _I_D="0842f262-21d7-40b6-afc1-6f70894286ed" name="Operators" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="operator"/>
                <category _I_D="fefcc83f-9264-45ab-a0dd-13b603836806" name="Rules" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="rule"/>
                <category _I_D="0595cc89-2e5d-4d0b-a8c1-2aaba86ebacb" name="FTS Configurations" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="ftsconfiguration"/>
                <category _I_D="562d6da8-efc1-464c-858e-4b56c28d08fe" name="FTS Dictionaries" order-num="7" objects-loading="empty" subcategories-loading="full" child-type="ftsdictionary"/>
                <category _I_D="ae9edd61-0134-4939-b411-ae3304698602" name="Functions" order-num="8" objects-loading="extended" subcategories-loading="none" child-type="function">
                    <function _I_D="0b79b154-7ab7-4f5f-a812-072a05c3a870" name="a_getarrayvalue" subcategories-loading="none" object-loading="extended" context="a_getarrayvalue" is-trigger-function="0" unique-function-name="a_getarrayvalue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="jsonb" function-arguments="ppath text, pprocedurename text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365953" volatility="VOLATILE" is-window="f" function-identity-arguments="ppath text, pprocedurename text" overload-function-count="1" proc-language="plpgsql" function-signature="a_getarrayvalue(ppath text, pprocedurename text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    pathParts TEXT[];
    vstoragetable TEXT;
    vSQL TEXT;
    vIndexBy TEXT;
    vres JSONB;
BEGIN
    
    pathParts := aws_oracle_ext.getPathparts(ppath);
    
    IF pathParts IS NULL THEN

        RETURN FALSE;

    END IF;

    SELECT storage_table_name,
        index_by
    INTO vstoragetable,
        vIndexBy
    FROM aws_oracle_ext$arrays a
    WHERE a.array_name = aws_oracle_ext.check_identifier_case(pathParts[1])
    AND a.procedure_name = pprocedurename;

    IF NOT FOUND THEN

        RAISE USING MESSAGE = 'Array structure must be initialized';

    END IF;

    vSQL := CONCAT
    (
        'SELECT record_body FROM ',
        vstoragetable,
        ' WHERE id = CAST($1 AS ',
        vIndexBy,
        ')'
    );

    EXECUTE vSQL INTO STRICT vres USING pathParts[2];

    vres := JSONB_BUILD_OBJECT
    (
        'result',
        vres
    );

    RETURN vres;

END;
]]></complex-attribute>
                        <category _I_D="3de3f491-6a2f-44f9-85c5-2377e3024ddc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e29e2b8c-b846-429e-8d87-f9d24d12320d" name="a_setarrayvalue" subcategories-loading="none" object-loading="extended" context="a_setarrayvalue" is-trigger-function="0" unique-function-name="a_setarrayvalue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,anyelement" is-returning-set="f" ret-datatype="bool" function-arguments="ppath text, pprocedurename text, pvalue anyelement" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365954" volatility="VOLATILE" is-window="f" function-identity-arguments="ppath text, pprocedurename text, pvalue anyelement" overload-function-count="1" proc-language="plpgsql" function-signature="a_setarrayvalue(ppath text, pprocedurename text, pvalue anyelement)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    pathParts TEXT[];
    vstoragetable TEXT;
    vSQL TEXT;
    vIndexBy TEXT;
BEGIN

    pathParts := aws_oracle_ext.getPathparts(ppath);
    
    IF pathParts IS NULL THEN

        RETURN FALSE;

    END IF;

    SELECT storage_table_name,
        index_by
    INTO vstoragetable,
        vIndexBy
    FROM aws_oracle_ext$arrays a
    WHERE a.array_name = aws_oracle_ext.check_identifier_case(pathParts[1])
    AND a.procedure_name = pprocedurename;

    IF NOT FOUND THEN

        RAISE USING MESSAGE = 'Array structure must be initialized';

    END IF;

    IF vstoragetable IS NULL THEN

        RETURN FALSE;

    END IF;
    
    vSQL := CONCAT
    (
        'INSERT INTO ',
        vstoragetable,
        $$
        AS t(id, record_body) VALUES (CAST($1 AS $$,
        vIndexBy,
        $$), aws_oracle_ext.json_set_by_path('{}'::JSONB, $2, $3))
        ON CONFLICT (id) DO UPDATE
        SET record_body = aws_oracle_ext.json_set_by_path(t.record_body, $2, $3)
        $$
    );

    EXECUTE vSQL USING pathParts[2], ppath, pvalue;

    RETURN TRUE;

END;
]]></complex-attribute>
                        <category _I_D="867530d0-1e3b-4569-afe1-4efe7b0e18ee" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f3999485-a81c-4ae8-8060-c6b86bce77c7" name="add_months" subcategories-loading="none" object-loading="extended" context="add_months" is-trigger-function="0" unique-function-name="add_months" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone,integer" is-returning-set="f" ret-datatype="timestamp" function-arguments="pdate timestamp without time zone, pmonths integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365146" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pdate timestamp without time zone, pmonths integer" overload-function-count="1" proc-language="sql" function-signature="add_months(pdate timestamp without time zone, pmonths integer)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT
        CASE
            WHEN aws_oracle_ext.last_day(pdate) <> pdate THEN
                pdate + MAKE_INTERVAL(months => pmonths)
            ELSE 
                aws_oracle_ext.last_day(pDate + MAKE_INTERVAL(months => pmonths))
    END;

]]></complex-attribute>
                        <category _I_D="22c0d278-483d-4f46-83ce-25311f7d5e93" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="83ba331d-c82d-4346-b447-99c19944ec08" name="array$add_fields_to_array" subcategories-loading="none" object-loading="extended" context="array$add_fields_to_array" is-trigger-function="0" unique-function-name="array$add_fields_to_array" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bigint,text" is-returning-set="f" ret-datatype="void" function-arguments="p_array_id bigint, p_fields text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="364967" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_array_id bigint, p_fields text" overload-function-count="1" proc-language="plpgsql" function-signature="array$add_fields_to_array(p_array_id bigint, p_fields text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
END;
]]></complex-attribute>
                        <category _I_D="9123d895-ff5b-4973-9a2d-64e1fd0eea5e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c744b025-77c0-4200-b923-dd38676bb6b4" name="array$analyze_structure" subcategories-loading="none" object-loading="extended" context="array$analyze_structure" is-trigger-function="0" unique-function-name="array$analyze_structure" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="364968" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="array$analyze_structure()">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
BEGIN
  --Analyzing tables
  ANALYZE aws_oracle_ext$arrays;
  ANALYZE aws_oracle_ext$array_fields;
  ANALYZE aws_oracle_ext$array_field_values;

END;
]]></complex-attribute>
                        <category _I_D="96df9f6e-06c5-4926-a315-b3b31bcf1e90" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fecefd2a-2301-4606-bde7-f4bc4bab1c70" name="array$assign" subcategories-loading="none" object-loading="extended" context="array$assign" is-trigger-function="0" unique-function-name="array$assign" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="364969" volatility="VOLATILE" is-window="f" function-identity-arguments="p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying" overload-function-count="1" proc-language="plv8" function-signature="array$assign(p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const chk = plv8.find_function("aws_oracle_ext.collectioncheck");
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");

const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");
let pathParts = parser(p_source_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const srcsn = pathParts[0].text;
const srcp = pathParts[2].text;
const srccol = caseCheck(p_source_param_name);
chk(srcsn, srcp, srccol);

pathParts = parser(p_dest_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
    
const dtssn = pathParts[0].text;
const dstp = pathParts[2].text;

const dstcol = caseCheck(p_dest_param_name);
chk(dtssn, dstp, dstcol);

aws_oracle_ext[dtssn][dstp][dstcol] = aws_oracle_ext[srcsn][srcp][srccol].clone();


]]></complex-attribute>
                        <category _I_D="dbfea835-e8b7-4a46-af02-2244f167cb2e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9969a23f-c926-4c7d-adaf-be2c2948f42e" name="array$clear_procedure" subcategories-loading="none" object-loading="extended" context="array$clear_procedure" is-trigger-function="0" unique-function-name="array$clear_procedure" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="364971" volatility="VOLATILE" is-window="f" function-identity-arguments="p_procedure_name character varying" overload-function-count="1" proc-language="sql" function-signature="array$clear_procedure(p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT aws_oracle_ext.collections_delete_by_routine
    (
        p_routine_name => p_procedure_name
    );
]]></complex-attribute>
                        <category _I_D="4f37c7d4-e664-471b-b8ee-5dda62c33092" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="16e17472-4803-4103-b7ab-9bd3bce70294" name="array$copy" subcategories-loading="none" object-loading="extended" context="array$copy" is-trigger-function="0" unique-function-name="array$copy" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="364972" volatility="VOLATILE" is-window="f" function-identity-arguments="p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying" overload-function-count="1" proc-language="plv8" function-signature="array$copy(p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const chk = plv8.find_function("aws_oracle_ext.collectioncheck");
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");
const pathParts = parser(p_source_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const srcsn = pathParts[0].text;
const srcp = pathParts[2].text;
const srccol = caseCheck(p_source_param_name);
chk(srcsn, srcp, srccol);

const doCreate = plv8.find_function("aws_oracle_ext.array$create_array");

doCreate(p_dest_param_name, p_dest_procedure_name);

const doAssign = plv8.find_function("aws_oracle_ext.array$assign");

doAssign(p_source_param_name, p_source_procedure_name, p_dest_param_name, p_dest_procedure_name);

]]></complex-attribute>
                        <category _I_D="532df71a-5a9c-47d4-a5dc-11088f6ddea6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1fe1fa85-9f66-46c0-8aa0-e13150b6305c" name="array$copy_structure" subcategories-loading="none" object-loading="extended" context="array$copy_structure" is-trigger-function="0" unique-function-name="array$copy_structure" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="364974" volatility="VOLATILE" is-window="f" function-identity-arguments="p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying" overload-function-count="1" proc-language="plv8" function-signature="array$copy_structure(p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const chk = plv8.find_function("aws_oracle_ext.collectioncheck");
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");
const pathParts = parser(p_source_procedure_name);
if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot')
  plv8.elog(ERROR, 'Incorrect routine name');

const srcsn = pathParts[0].text;
const srcp = pathParts[2].text;
const srccol = caseCheck(p_source_param_name);
chk(srcsn, srcp, srccol);
const indexBy = aws_oracle_ext[srcsn][srcp][srccol].indexBy;
const rowType = aws_oracle_ext[srcsn][srcp][srccol].rowType;
const doCreate = plv8.find_function("aws_oracle_ext.array$create_array");
const setRowtype = plv8.find_function("aws_oracle_ext.array$create_storage_table");
doCreate(p_dest_param_name, p_dest_procedure_name, null, indexBy);
setRowtype(p_dest_param_name, p_dest_procedure_name, rowType);

]]></complex-attribute>
                        <category _I_D="bd685b4a-2e09-421a-8de5-6871d3217c87" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c2e6dc35-99b6-49aa-afbb-39989d2e774c" name="array$count" subcategories-loading="none" object-loading="extended" context="array$count" is-trigger-function="0" unique-function-name="array$count" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="int8" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="364975" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="1" proc-language="sql" function-signature="array$count(p_array_path character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT aws_oracle_ext.collection_count
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path
    );
]]></complex-attribute>
                        <category _I_D="6b793dd6-73e8-4d7d-9d7c-a9cefeee3d5d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="92fd5c9a-6d84-4abd-b40b-f89d3f97ccf1" name="array$create_array" subcategories-loading="none" object-loading="extended" context="array$create_array" is-trigger-function="0" unique-function-name="array$create_array" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,bigint,text" is-returning-set="f" ret-datatype="int8" function-arguments="p_array_name character varying, p_procedure_name character varying, p_parent_array_id bigint DEFAULT NULL::bigint, pindexby text DEFAULT 'BIGINT'::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="364976" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_name character varying, p_procedure_name character varying, p_parent_array_id bigint, pindexby text" overload-function-count="1" proc-language="plv8" function-signature="array$create_array(p_array_name character varying, p_procedure_name character varying, p_parent_array_id bigint, pindexby text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");
const pathParts = parser(p_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;
const indexBy = pindexby != 'BIGINT' ? 'STRING' : 'BIGINT';
const tree = indexBy == 'BIGINT' ? new Tree(52)  : new Tree(52, TreeUtility.stringCompare);
tree.indexBy = indexBy;
tree.collectionType = 'ASSOC';

if (typeof(aws_oracle_ext) === 'undefined') aws_oracle_ext = {};
if (!aws_oracle_ext.hasOwnProperty(sn)) aws_oracle_ext[sn] = {};
if (!aws_oracle_ext[sn].hasOwnProperty(pn)) aws_oracle_ext[sn][pn] = {};

aws_oracle_ext[sn][pn][caseCheck(p_array_name)] = tree;

return -1;

]]></complex-attribute>
                        <category _I_D="a4c00119-68c1-451a-8b40-2919277e2200" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d431803b-9479-4125-bb2b-7a690480bd67" name="array$create_storage_table" subcategories-loading="none" object-loading="extended" context="array$create_storage_table" is-trigger-function="0" unique-function-name="array$create_storage_table" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,character varying,boolean" is-returning-set="f" ret-datatype="void" function-arguments="p_array_name character varying, p_procedure_name character varying, p_cast_type_name character varying, pwithdata boolean DEFAULT true" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="364977" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_name character varying, p_procedure_name character varying, p_cast_type_name character varying, pwithdata boolean" overload-function-count="1" proc-language="plv8" function-signature="array$create_storage_table(p_array_name character varying, p_procedure_name character varying, p_cast_type_name character varying, pwithdata boolean)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");
const pathParts = parser(p_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;
const chk = plv8.find_function("aws_oracle_ext.collectioncheck");
const srccol = caseCheck(p_array_name);
chk(sn, pn, srccol);
aws_oracle_ext[sn][pn][srccol].rowType = p_cast_type_name;

]]></complex-attribute>
                        <category _I_D="7c64354a-6646-4ae6-81df-166d369d3c2e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1b4da92d-6377-4cf0-b917-5179b8419235" name="array$delete" subcategories-loading="none" object-loading="extended" context="array$delete(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="array$delete(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="364983" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying" overload-function-count="3" proc-language="sql" function-signature="array$delete(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)" routine-number="364983">
                        <complex-attribute name="sql"><![CDATA[
    SELECT aws_oracle_ext.collection_element_delete
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_start => p_array_key
    );
]]></complex-attribute>
                        <category _I_D="380ddab1-66f3-42dc-93de-99f5f0f35b21" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="44f84e47-4f70-4e18-a3fb-b169f8b1023b" name="array$delete" subcategories-loading="none" object-loading="extended" context="array$delete(p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="array$delete(p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="364985" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying" overload-function-count="3" proc-language="sql" function-signature="array$delete(p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying)" routine-number="364985">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_element_delete
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_start => p_array_key_from,
        p_end => p_array_key_until
    );

]]></complex-attribute>
                        <category _I_D="de6fcaae-f5a3-4130-9f91-4bc3f5830f9a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8f66f39a-b869-42a5-9950-31f1a5a1db57" name="array$delete" subcategories-loading="none" object-loading="extended" context="array$delete(p_array_path character varying, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="array$delete(p_array_path character varying, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="364981" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="3" proc-language="sql" function-signature="array$delete(p_array_path character varying, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_procedure_name character varying)" routine-number="364981">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_element_delete
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path
    );
]]></complex-attribute>
                        <category _I_D="a0e4166c-2e90-4d49-a82c-5ab21ee125dc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1be040cc-6117-4053-a0fe-fabcd84c65ec" name="array$delete_for_storage_table" subcategories-loading="none" object-loading="extended" context="array$delete_for_storage_table" is-trigger-function="0" unique-function-name="array$delete_for_storage_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="364978" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="array$delete_for_storage_table(p_array_path character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  l_array_path                 Varchar;
  l_array_path_wihout_indexes  Varchar;
  l_array_of_array_indexes     Varchar ARRAY;
  l_array_of_array_path        Varchar ARRAY;
  l_array_of_fields            Varchar ARRAY;
  l_field_name                 Varchar;   
  l_field_name_without_index   Varchar;   
  l_procedure_name             Varchar := p_procedure_name;
  l_cast_array_key             BigInt;
  l_array_key                  Varchar;
  cur                          Record;
  l_storage_table_name         Varchar;
  l_result                     Varchar;
BEGIN
  --Get transformed array path
  l_array_path := aws_oracle_ext.array$transform_array_path(p_array_path);
  --Expand array path  
  SELECT * FROM aws_oracle_ext.array$expand_path_and_indexes(l_array_path)
    INTO l_array_path_wihout_indexes,l_array_of_array_indexes,l_array_of_array_path,l_array_of_fields,l_field_name;    
  --Getting prior element key

  l_array_path := CASE
                    WHEN substring(l_array_path from 1 for 1)!='"' AND 
                         substring(l_array_path from length(l_array_path) for 1)!='"' 
                      THEN
                         lower(l_array_path)
                      ELSE 
                         l_array_path                                                                                       
                   END;

  IF l_field_name IS NULL THEN    
    --Deleting all array elements
    DELETE 
      FROM aws_oracle_ext$array_field_values av
     WHERE av.id IN
	       (WITH  RECURSIVE array_values AS  (
					     SELECT afv_prev.id,
						    1 as level
					       FROM aws_oracle_ext$array_field_values afv_prev
					      WHERE afv_prev.array_field_id IN (SELECT af.id
										  FROM aws_oracle_ext$array_fields af
										 WHERE af.array_id = aws_oracle_ext.array$get_array_id(l_array_path,l_procedure_name)
									       )
					     UNION ALL
					     SELECT afv_next.id,
						    afv_prev.level + 1 as level
					       FROM array_values afv_prev,
						    aws_oracle_ext$array_field_values afv_next
					      WHERE afv_prev.id = afv_next.parent_field_id)
		 SELECT id FROM array_values ORDER BY id DESC);    
    RETURN;
  ELSEIF l_field_name = '' THEN
   --Deleting elements first level   
   BEGIN
     --When array key is BigInt
    SELECT CAST(l_array_of_array_indexes[1] AS BigInt) INTO l_cast_array_key;
    DELETE 
      FROM aws_oracle_ext$array_field_values av
     WHERE av.id IN
	       (WITH  RECURSIVE array_values AS  (
					     SELECT afv_prev.id,
						    1 as level
					       FROM (SELECT t.id,t.array_key
						       FROM aws_oracle_ext$array_field_values t
						      WHERE t.array_field_id IN (SELECT af.id
										   FROM aws_oracle_ext$array_fields af
										  WHERE af.array_id = aws_oracle_ext.array$get_array_id(l_array_path_wihout_indexes,l_procedure_name)
										 )
						       AND substring(t.array_key from 1 for 1) != '''' AND substring(t.array_key from length(t.array_key) for 1) != ''''
						    ) afv_prev
					      WHERE afv_prev.array_key = l_array_of_array_indexes[1]
					     UNION ALL
					     SELECT afv_next.id,
						    afv_prev.level + 1 as level
					       FROM array_values afv_prev,
						    aws_oracle_ext$array_field_values afv_next
					      WHERE afv_prev.id = afv_next.parent_field_id)
		 SELECT id FROM array_values ORDER BY id DESC);
	
   EXCEPTION
    WHEN invalid_text_representation THEN
      --When array key is TEXT
      DELETE 
	FROM aws_oracle_ext$array_field_values av
       WHERE av.id IN
		 (WITH  RECURSIVE array_values AS  (
					       SELECT afv_prev.id,
						      1 as level
						 FROM aws_oracle_ext$array_field_values afv_prev
						WHERE afv_prev.array_field_id IN (SELECT af.id
									       FROM aws_oracle_ext$array_fields af
									      WHERE af.array_id = aws_oracle_ext.array$get_array_id(l_array_path_wihout_indexes,l_procedure_name)
									    )
						  AND afv_prev.array_key = l_array_of_array_indexes[1]               
					       UNION ALL
					       SELECT afv_next.id,
						      afv_prev.level + 1 as level
						 FROM array_values afv_prev,
						      aws_oracle_ext$array_field_values afv_next
						WHERE afv_prev.id = afv_next.parent_field_id)
		   SELECT id FROM array_values ORDER BY id DESC);    
     RETURN;
   END;   
  END IF;

  SELECT p_array_of_array_path[1],p_array_of_array_indexes[1]
    FROM aws_oracle_ext.array$expand_path_and_indexes(l_field_name||'.')
    INTO l_field_name_without_index,l_array_key;    
  BEGIN
  --Delete all necessary elements recursively. When array key is BigInt  
  FOR cur IN 
	(WITH  RECURSIVE array_values AS (
				  SELECT av.id, 
					 f.field_name,
					 av.field_value::text,
					 av.array_key, 
					 av.array_field_id,
					 f.array_id,
					 f.field_type,
					 1 as level,
					 ARRAY[CASE 
						  WHEN av.array_key IS NOT NULL THEN '['||av.array_key||'].'||f.field_name::text
						    ELSE '.'||f.field_name::text
						END
					       ] AS array_path,
					 ARRAY[CASE 
						  WHEN av.array_key IS NOT NULL THEN av.array_key::text
						    ELSE null::text
						END
					       ] AS indexes_path      
				    FROM aws_oracle_ext$array_field_values av,
					 aws_oracle_ext$array_fields f,
					 aws_oracle_ext$arrays arr
				   WHERE av.array_field_id = f.id
				     AND av.parent_field_id IS NULL
				     AND arr.id = f.array_id
				     AND arr.procedure_name = l_procedure_name
				     AND (av.Array_Key = l_array_of_array_indexes[1] OR av.Array_Key IS NULL)
				     AND f.field_name = ANY (array_append(array_append(l_array_of_fields,l_field_name_without_index),''))
				     AND f.array_id = aws_oracle_ext.array$get_array_id(l_array_of_array_path[1],l_procedure_name)
				   UNION ALL
				  SELECT avnext.id, 
					 fnext.field_name, 
					 avnext.field_value::text,
					 avnext.array_key,
					 avnext.array_field_id,
					 fnext.array_id,
					 fnext.field_type,
					 avprev.level + 1 as level,
					 avprev.array_path || ARRAY[CASE 
								      WHEN avnext.array_key IS NOT NULL THEN '['||avnext.array_key||'].'||fnext.field_name::text
									ELSE '.'||fnext.field_name::text
								     END
								   ] AS array_path,
					 avprev.indexes_path || ARRAY[CASE 
									WHEN avnext.array_key IS NOT NULL THEN avnext.array_key::text
									  ELSE null::text
								       END
								    ] AS indexes_path
				    FROM array_values avprev, 
					 aws_oracle_ext$array_field_values avnext,
					 aws_oracle_ext$array_fields fnext,
					 aws_oracle_ext$arrays arrnext
				   WHERE avnext.array_field_id = fnext.id
				     AND avprev.id = avnext.parent_field_id
				     AND arrnext.id = fnext.array_id
				     --AND avnext.Array_Key IS NOT NULL
				     AND arrnext.procedure_name = l_procedure_name
				)
	     SELECT id
	       FROM
		    (SELECT CAST(array_key AS BigInt) array_key,
			    level,
			    id
		       FROM array_values
		      WHERE level = array_length(l_array_of_array_indexes, 1)+1
			 AND aws_oracle_ext.array$delete_last_array_element(indexes_path) = l_array_of_array_indexes           
			 AND CASE 
			       WHEN l_field_name = '' 
				 THEN -9
				ELSE array_id 
			      END = CASE 
				       WHEN l_field_name = '' 
					 THEN -9
					ELSE aws_oracle_ext.array$get_array_id(l_array_path_wihout_indexes||'.'||l_field_name_without_index,l_procedure_name)
				      END
		    ) cast_t 
	      WHERE cast_t.array_key = CAST(l_array_key AS BigInt)
	     ) LOOP
	 DELETE 
	    FROM aws_oracle_ext$array_field_values av
	   WHERE av.id IN 
	      (SELECT t.id 
		FROM             
	      ((WITH  RECURSIVE array_values AS  (
						     SELECT afv_prev.parent_field_id,afv_prev.id,
							    1 as level
						       FROM aws_oracle_ext$array_field_values afv_prev
						      WHERE afv_prev.id = cur.id
						     UNION ALL
						     SELECT afv_next.parent_field_id,
							    afv_next.id,
							    afv_prev.level + 1 as level
						       FROM array_values afv_prev,
							    aws_oracle_ext$array_field_values afv_next
						      WHERE afv_prev.parent_field_id = afv_next.id
						  )
			 SELECT id
			   FROM array_values)
	      UNION             
	      (WITH  RECURSIVE array_values AS  (
						     SELECT afv_prev.id,
							    1 as level
						       FROM aws_oracle_ext$array_field_values afv_prev
						      WHERE afv_prev.id = cur.id
						     UNION ALL
						     SELECT afv_next.id,
							    afv_prev.level + 1 as level
						       FROM array_values afv_prev,
							    aws_oracle_ext$array_field_values afv_next
						      WHERE afv_prev.id = afv_next.parent_field_id
						  )
			 SELECT id
			   FROM array_values)) t
	      ORDER BY t.id DESC);
   END LOOP;
       
  EXCEPTION
    WHEN invalid_text_representation THEN
      --Delete all necessary elements recursively. When array key is TEXT
      FOR cur IN
		  (WITH  RECURSIVE array_values AS (
					    SELECT av.id, 
						   f.field_name,
						   av.field_value::text,
						   av.array_key, 
						   av.array_field_id,
						   f.array_id,
						   f.field_type,
						   1 as level,
						   ARRAY[CASE 
							    WHEN av.array_key IS NOT NULL THEN '['||av.array_key||'].'||f.field_name::text
							      ELSE '.'||f.field_name::text
							  END
							 ] AS array_path,
						   ARRAY[CASE 
							    WHEN av.array_key IS NOT NULL THEN av.array_key::text
							      ELSE null::text
							  END
							 ] AS indexes_path      
					      FROM aws_oracle_ext$array_field_values av,
						   aws_oracle_ext$array_fields f,
						   aws_oracle_ext$arrays arr
					     WHERE av.array_field_id = f.id
					       AND av.parent_field_id IS NULL
					       AND arr.id = f.array_id
					       AND arr.procedure_name = l_procedure_name
					       AND (av.Array_Key = l_array_of_array_indexes[1] OR av.Array_Key IS NULL)
					       AND f.field_name = ANY (array_append(array_append(l_array_of_fields,l_field_name_without_index),''))
					       AND f.array_id = aws_oracle_ext.array$get_array_id(l_array_of_array_path[1],l_procedure_name)
					     UNION ALL
					    SELECT avnext.id, 
						   fnext.field_name, 
						   avnext.field_value::text,
						   avnext.array_key,
						   avnext.array_field_id,
						   fnext.array_id,
						   fnext.field_type,
						   avprev.level + 1 as level,
						   avprev.array_path || ARRAY[CASE 
										WHEN avnext.array_key IS NOT NULL THEN '['||avnext.array_key||'].'||fnext.field_name::text
										  ELSE '.'||fnext.field_name::text
									       END
									     ] AS array_path,
						   avprev.indexes_path || ARRAY[CASE 
										  WHEN avnext.array_key IS NOT NULL THEN avnext.array_key::text
										    ELSE null::text
										 END
									      ] AS indexes_path
					      FROM array_values avprev, 
						   aws_oracle_ext$array_field_values avnext,
						   aws_oracle_ext$array_fields fnext,
						   aws_oracle_ext$arrays arrnext
					     WHERE avnext.array_field_id = fnext.id
					       AND avprev.id = avnext.parent_field_id
					       AND arrnext.id = fnext.array_id
					       --AND avnext.Array_Key IS NOT NULL
					       AND arrnext.procedure_name = l_procedure_name
					  )
		       SELECT id
			 FROM
			      (SELECT array_key,
				      level,
				      id
				 FROM array_values
				WHERE level = array_length(l_array_of_array_indexes, 1)+1
				   AND aws_oracle_ext.array$delete_last_array_element(indexes_path) = l_array_of_array_indexes           
				   AND CASE 
					 WHEN l_field_name = '' 
					   THEN -9
					  ELSE array_id 
					END = CASE 
						 WHEN l_field_name = '' 
						   THEN -9
						  ELSE aws_oracle_ext.array$get_array_id(l_array_path_wihout_indexes||'.'||l_field_name_without_index,l_procedure_name)
						END
			      ) cast_t 
			WHERE cast_t.array_key = l_array_key
		       ) LOOP
	 DELETE 
	    FROM aws_oracle_ext$array_field_values av
	   WHERE av.id IN 
	      (SELECT t.id 
		FROM             
	      ((WITH  RECURSIVE array_values AS  (
						     SELECT afv_prev.parent_field_id,afv_prev.id,
							    1 as level
						       FROM aws_oracle_ext$array_field_values afv_prev
						      WHERE afv_prev.id = cur.id
						     UNION ALL
						     SELECT afv_next.parent_field_id,
							    afv_next.id,
							    afv_prev.level + 1 as level
						       FROM array_values afv_prev,
							    aws_oracle_ext$array_field_values afv_next
						      WHERE afv_prev.parent_field_id = afv_next.id
						  )
			 SELECT id
			   FROM array_values)
	      UNION             
	      (WITH  RECURSIVE array_values AS  (
						     SELECT afv_prev.id,
							    1 as level
						       FROM aws_oracle_ext$array_field_values afv_prev
						      WHERE afv_prev.id = cur.id
						     UNION ALL
						     SELECT afv_next.id,
							    afv_prev.level + 1 as level
						       FROM array_values afv_prev,
							    aws_oracle_ext$array_field_values afv_next
						      WHERE afv_prev.id = afv_next.parent_field_id
						  )
			 SELECT id
			   FROM array_values)) t
	      ORDER BY t.id DESC);
   END LOOP;
 END;
END;
]]></complex-attribute>
                        <category _I_D="402d5614-13e5-42cb-907e-e4b3c61edb00" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5c366514-8365-405b-ac23-5fc155cde1e1" name="array$delete_last_array_element" subcategories-loading="none" object-loading="extended" context="array$delete_last_array_element" is-trigger-function="0" unique-function-name="array$delete_last_array_element" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying[]" is-returning-set="f" ret-datatype="_varchar" function-arguments="p_array_path character varying[]" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="364980" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying[]" overload-function-count="1" proc-language="plpgsql" function-signature="array$delete_last_array_element(p_array_path character varying[])">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  l_result_array Varchar[]:=NULL;
BEGIN
  FOR cur IN 1..array_length(p_array_path,1)-1 LOOP
    l_result_array := array_append(l_result_array,p_array_path[cur]);
  END LOOP;
  RETURN l_result_array;
END;
]]></complex-attribute>
                        <category _I_D="7f73abb4-b07e-4195-88d3-fa1bc6558223" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0d27cee9-b7f9-4a40-b95f-694c1f60bfb4" name="array$drop" subcategories-loading="none" object-loading="extended" context="array$drop" is-trigger-function="0" unique-function-name="array$drop" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_name character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="364987" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_name character varying, p_procedure_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="array$drop(p_array_name character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  c_array RECORD;
  c_array_fields RECORD;
BEGIN
  FOR c_array IN (SELECT arr.id,arr.array_name,procedure_name,storage_table_name
                    FROM aws_oracle_ext$arrays arr
                   WHERE arr.procedure_name = p_procedure_name
                     AND arr.array_name = p_array_name
                  ORDER BY arr.parent_id DESC NULLS LAST
                  ) LOOP
     FOR c_array_fields IN (SELECT arr_f.id
                              FROM aws_oracle_ext$array_fields arr_f
                             WHERE arr_f.array_id = c_array.id
                            ORDER BY arr_f.id DESC
                           ) LOOP
         DELETE FROM aws_oracle_ext$array_field_values arr_v
               WHERE arr_v.array_field_id = c_array_fields.id;
     END LOOP;
     DELETE FROM aws_oracle_ext$array_fields arr_f
           WHERE arr_f.array_id = c_array.id;
     DELETE FROM aws_oracle_ext$arrays arr
           WHERE arr.id = c_array.id;
     --If Storage table exists then delete 
     IF c_array.storage_table_name IS NOT NULL THEN
       perform aws_oracle_ext.bulk$clear_storage_table(c_array.storage_table_name);
     END IF;
  END LOOP;

  
  --Analyzing tables
  ANALYZE aws_oracle_ext$arrays;
  ANALYZE aws_oracle_ext$array_fields;
  ANALYZE aws_oracle_ext$array_field_values;

END;
]]></complex-attribute>
                        <category _I_D="2b1b9528-9b36-46de-a64a-a40f5fb82745" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6fe096d6-109a-4c48-8c99-bfd6c1e77253" name="array$exists" subcategories-loading="none" object-loading="extended" context="array$exists" is-trigger-function="0" unique-function-name="array$exists" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying" is-returning-set="f" ret-datatype="bool" function-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="364988" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying" overload-function-count="1" proc-language="sql" function-signature="array$exists(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
    
    SELECT aws_oracle_ext.collection_element_exists
	(
		p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_idx => p_array_key
	);

]]></complex-attribute>
                        <category _I_D="488d4d35-c842-4281-a56e-d733299eebd6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3f930137-5255-4583-877f-9c14e115e978" name="array$expand_path_and_indexes" subcategories-loading="none" object-loading="extended" context="array$expand_path_and_indexes" is-trigger-function="0" unique-function-name="array$expand_path_and_indexes" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying[],character varying[],character varying[],character varying" is-returning-set="f" ret-datatype="record" function-arguments="p_array_path character varying, OUT p_array_path_without_indexes character varying, OUT p_array_of_array_indexes character varying[], OUT p_array_of_array_path character varying[], OUT p_array_of_fields character varying[], OUT p_field_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="364990" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, OUT p_array_path_without_indexes character varying, OUT p_array_of_array_indexes character varying[], OUT p_array_of_array_path character varying[], OUT p_array_of_fields character varying[], OUT p_field_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="array$expand_path_and_indexes(p_array_path character varying, OUT p_array_path_without_indexes character varying, OUT p_array_of_array_indexes character varying[], OUT p_array_of_array_path character varying[], OUT p_array_of_fields character varying[], OUT p_field_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  l_pos_param_name Integer;
  l_pos_index      Integer;
  l_next_parse_string Varchar;
  l_result_array_path Varchar := '';
  l_tmp_array_part    Varchar := '';
  l_array_indexes     Varchar ARRAY;
  l_array_path        Varchar ARRAY;
  l_array_of_fields   Varchar ARRAY;
  
  l_tmp_buffer        Varchar;
BEGIN
  --l_pos_param_name := strpos(p_array_path,'.');
  --Get first delimeter position
  l_pos_param_name := aws_oracle_ext.array$get_first_array_delimeter_position(p_array_path);
  IF l_pos_param_name = 0 THEN
   NULL;
  ELSE
     l_next_parse_string := p_array_path;
     WHILE l_pos_param_name != 0 LOOP
       --allocate a portion of the array to the point
       l_tmp_array_part := substring(l_next_parse_string from 1 for l_pos_param_name);       
       --allocate an array index
       l_pos_index := strpos(l_tmp_array_part,'[');
       IF l_pos_index != 0 THEN
          --allocate an index and part of array
          l_array_indexes := array_append(l_array_indexes,substring(l_tmp_array_part from l_pos_index+1 for length(l_tmp_array_part)-l_pos_index-2)::Varchar); 
          l_tmp_buffer := CONCAT(l_result_array_path,substring(l_tmp_array_part from 1 for l_pos_index-1));          
          IF substring(l_tmp_buffer from 1 for 1)!='"' AND 
             substring(l_tmp_buffer from length(l_tmp_buffer) for 1)!='"' THEN
               l_array_of_fields := array_append(l_array_of_fields,lower(substring(l_tmp_array_part from 1 for l_pos_index-1))::Varchar);
               l_tmp_buffer:=lower(l_tmp_buffer);
          ELSE
               l_array_of_fields := array_append(l_array_of_fields,substring(l_tmp_array_part from 1 for l_pos_index-1)::Varchar);
          END IF;
          l_result_array_path:= CONCAT(l_tmp_buffer,'.');                    
       ELSE
          l_array_indexes := array_append(l_array_indexes,null);
          l_tmp_buffer := CONCAT(l_result_array_path,substring(l_tmp_array_part from 1 for length(l_tmp_array_part)-1));
          IF substring(l_tmp_buffer from 1 for 1)!='"' AND 
             substring(l_tmp_buffer from length(l_tmp_buffer) for 1)!='"' THEN
               l_array_of_fields := array_append(l_array_of_fields,lower(substring(l_tmp_array_part from 1 for length(l_tmp_array_part)-1))::Varchar);
               l_tmp_buffer:=lower(l_tmp_buffer);
          ELSE
            l_array_of_fields := array_append(l_array_of_fields,substring(l_tmp_array_part from 1 for length(l_tmp_array_part)-1)::Varchar);
          END IF;   
          l_result_array_path:= CONCAT(l_tmp_buffer,'.');                    
       END IF; 
       IF substring(l_tmp_buffer from 1 for 1)!='"' AND 
          substring(l_tmp_buffer from length(l_tmp_buffer) for 1)!='"' THEN
          l_tmp_buffer := lower(l_tmp_buffer);
       END IF;       
       l_array_path := array_append(l_array_path,l_tmp_buffer::Varchar);
       --combine result array wihout indexes
       l_next_parse_string := substring(l_next_parse_string from l_pos_param_name+1 for length(l_next_parse_string)-l_pos_param_name+1);              
       --l_pos_param_name := strpos(l_next_parse_string,'.');       
       l_pos_param_name := aws_oracle_ext.array$get_first_array_delimeter_position(l_next_parse_string);
     END LOOP;       
  END IF;  
  p_array_path_without_indexes := rtrim(l_result_array_path,'.');
  p_array_of_array_indexes  := l_array_indexes;
  p_array_of_array_path := l_array_path;
  IF substring(l_next_parse_string from 1 for 1)!='"' AND 
     substring(l_next_parse_string from length(l_next_parse_string) for 1)!='"' THEN
      p_field_name := lower(l_next_parse_string);
  ELSE
      p_field_name := l_next_parse_string;
  END IF;
  p_array_of_fields := l_array_of_fields;
END;
]]></complex-attribute>
                        <category _I_D="60a41737-8a06-44ce-8737-a62d0fc1ce72" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dcdee4d2-693f-4693-98f0-d2e55fc96a5a" name="array$first" subcategories-loading="none" object-loading="extended" context="array$first" is-trigger-function="0" unique-function-name="array$first" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_path character varying, p_procedure_name character varying, p_def anyelement DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="364991" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying, p_def anyelement" overload-function-count="1" proc-language="sql" function-signature="array$first(p_array_path character varying, p_procedure_name character varying, p_def anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_first
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_tp => p_def
    );

]]></complex-attribute>
                        <category _I_D="4c85628c-9d50-4b89-bbea-7cb305411353" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bc14b708-0bec-4568-b7c0-e1712d1f89ce" name="array$get_array_field_id" subcategories-loading="none" object-loading="extended" context="array$get_array_field_id" is-trigger-function="0" unique-function-name="array$get_array_field_id" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bigint,character varying,bigint,character varying" is-returning-set="f" ret-datatype="record" function-arguments="p_array_id bigint, p_field_name character varying, OUT p_array_field_id bigint, OUT p_array_field_type character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="364993" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_id bigint, p_field_name character varying, OUT p_array_field_id bigint, OUT p_array_field_type character varying" overload-function-count="1" proc-language="plpgsql" function-signature="array$get_array_field_id(p_array_id bigint, p_field_name character varying, OUT p_array_field_id bigint, OUT p_array_field_type character varying)">
                        <complex-attribute name="sql"><![CDATA[           
BEGIN
  SELECT        arr.id, 
                arr.field_type
    INTO        p_array_field_id,
                p_array_field_type
    FROM aws_oracle_ext$array_fields arr
   WHERE arr.array_id = p_array_id
     AND arr.field_name = p_field_name;
END;                                                      
]]></complex-attribute>
                        <category _I_D="512ec64a-b5d3-4510-8c96-c7e2708334e7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2ad81e6f-a8e3-4e7b-8c88-63b8cffe8df3" name="array$get_array_field_names" subcategories-loading="none" object-loading="extended" context="array$get_array_field_names" is-trigger-function="0" unique-function-name="array$get_array_field_names" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="jsonb" function-arguments="p_array_name character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="364994" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_name character varying, p_procedure_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="array$get_array_field_names(p_array_name character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
   l_array_name Varchar;
BEGIN
l_array_name := CASE
                              WHEN substring(p_array_name from 1 for 1)!='"' AND 
                                   substring(p_array_name from length(p_array_name) for 1)!='"' 
                                 THEN
                                   lower(p_array_name)
                                ELSE 
                                   p_array_name
                            END;
 RETURN
        (SELECT jsonb_agg(af.field_name ORDER BY af.id)
	   FROM aws_oracle_ext$arrays a,
	        aws_oracle_ext$array_fields af
	  WHERE a.id = af.array_id
	    AND a.array_name = l_array_name
	    AND a.procedure_name = p_procedure_name
        );  
  
END;
]]></complex-attribute>
                        <category _I_D="56f0192b-cddb-4fd1-b896-cd86a28ebac3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a005d0b9-c4a8-4d49-b9b3-73b1a1084193" name="array$get_array_id" subcategories-loading="none" object-loading="extended" context="array$get_array_id" is-trigger-function="0" unique-function-name="array$get_array_id" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="int8" function-arguments="p_array_path_without_indexes character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="364995" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path_without_indexes character varying, p_procedure_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="array$get_array_id(p_array_path_without_indexes character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
 RETURN 
    (WITH RECURSIVE arr AS (
                           SELECT id, a.array_name::text, 1 as level,ARRAY[a.array_name::text] AS array_path
                             FROM aws_oracle_ext$arrays a 
                            WHERE a.procedure_name = aws_oracle_ext.check_identifier_case(p_procedure_name)
                              AND a.parent_id IS NULL
                            UNION ALL
                           SELECT anext.id, anext.array_name::text, 
                                  aprev.level + 1 as level, 
                                  aprev.array_path || ARRAY[anext.array_name::text] as array_path
                             FROM arr aprev, aws_oracle_ext$arrays anext
                            WHERE aprev.id = anext.parent_id
                              AND anext.procedure_name = aws_oracle_ext.check_identifier_case(p_procedure_name)
                           )
    SELECT id
           --, array_to_string(array_path, '.') as array_path,level 
      FROM arr 
     WHERE array_to_string(array_path, '.') = p_array_path_without_indexes);
END;
]]></complex-attribute>
                        <category _I_D="6cfd9196-6959-4595-ab4c-7f1f5663cb77" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="68de7d99-c201-45dd-913f-e1d43754aadf" name="array$get_array_path_for_array_id" subcategories-loading="none" object-loading="extended" context="array$get_array_path_for_array_id" is-trigger-function="0" unique-function-name="array$get_array_path_for_array_id" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bigint" is-returning-set="f" ret-datatype="varchar" function-arguments="p_array_id bigint" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="364996" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_id bigint" overload-function-count="1" proc-language="plpgsql" function-signature="array$get_array_path_for_array_id(p_array_id bigint)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
BEGIN
 RETURN 
    (WITH RECURSIVE arr AS (
                           SELECT id, a.array_name::text, 1 as level,ARRAY[a.array_name::text] AS array_path
                             FROM aws_oracle_ext$arrays a 
                            WHERE a.parent_id IS NULL
                            UNION ALL
                           SELECT anext.id, anext.array_name::text, 
                                  aprev.level + 1 as level, 
                                  aprev.array_path || ARRAY[anext.array_name::text] as array_path
                             FROM arr aprev, aws_oracle_ext$arrays anext
                            WHERE aprev.id = anext.parent_id)
    SELECT array_to_string(arr.array_path, '.') as array_path
     FROM arr
    WHERE arr.id = p_array_id);
END;
]]></complex-attribute>
                        <category _I_D="c5d2e531-6145-4138-a0ea-67bdd15b4055" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="76f3c3cc-ec29-4518-b26d-0071cf19ce8a" name="array$get_field_type" subcategories-loading="none" object-loading="extended" context="array$get_field_type" is-trigger-function="0" unique-function-name="array$get_field_type" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="p_array_path_without_indexes character varying, p_procedure_name character varying, p_field_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="364997" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path_without_indexes character varying, p_procedure_name character varying, p_field_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="array$get_field_type(p_array_path_without_indexes character varying, p_procedure_name character varying, p_field_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  RETURN 
         ( SELECT field_type
             FROM aws_oracle_ext$array_fields af
            WHERE af.array_id = aws_oracle_ext.array$get_array_id
            (
              p_array_path_without_indexes,
              aws_oracle_ext.check_identifier_case(p_procedure_name)
            )
              AND af.field_name = p_field_name
         );
END;
]]></complex-attribute>
                        <category _I_D="dc50874e-5abe-4325-bb7c-a6e30f621fc7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4ae16e2e-e556-4882-93b5-34cca831bf69" name="array$get_field_value_id" subcategories-loading="none" object-loading="extended" context="array$get_field_value_id" is-trigger-function="0" unique-function-name="array$get_field_value_id" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bigint,character varying,bigint" is-returning-set="f" ret-datatype="int8" function-arguments="p_array_field_id bigint, p_array_key character varying, OUT p_field_value_id bigint" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="364998" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_field_id bigint, p_array_key character varying, OUT p_field_value_id bigint" overload-function-count="1" proc-language="plpgsql" function-signature="array$get_field_value_id(p_array_field_id bigint, p_array_key character varying, OUT p_field_value_id bigint)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    
     SELECT ID
       INTO p_field_value_id
       FROM aws_oracle_ext$array_field_values afv
      WHERE afv.array_field_id = p_array_field_ID
        AND afv.array_key = p_array_key;
END;
]]></complex-attribute>
                        <category _I_D="88755526-9c61-485c-8fb3-e254f8f7ea67" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b17378a4-3244-4f4f-b32e-ed079961f817" name="array$get_first_array_delimeter_position" subcategories-loading="none" object-loading="extended" context="array$get_first_array_delimeter_position" is-trigger-function="0" unique-function-name="array$get_first_array_delimeter_position" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="int8" function-arguments="p_array_path character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="364999" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying" overload-function-count="1" proc-language="plpgsql" function-signature="array$get_first_array_delimeter_position(p_array_path character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  l_left_brackets_count   SmallInt := 0;
  l_quote_count           SmallInt := 0;
  l_substr_symbol         Char(1);
  l_substr_symbol_forward Char(2);
  l_result_path           Varchar;
  li_path_length          Integer;
BEGIN
  --Transform array path that it will be with points
  li_path_length := length(p_array_path);
  FOR cur IN 1..li_path_length LOOP
     l_substr_symbol := substring(p_array_path from cur for 1);
     l_substr_symbol_forward := substring(p_array_path from cur for 2);
     IF l_substr_symbol = '[' AND l_quote_count = 0 THEN
        l_left_brackets_count := l_left_brackets_count +1;
     END IF;     
     IF l_substr_symbol_forward = '[''' THEN
       l_quote_count := l_quote_count + 1;
     END IF;
     
     IF substring(p_array_path from cur-1 for 2)=''']' THEN
       l_quote_count := l_quote_count - 1;
     END IF;
     
     IF l_substr_symbol = ']' AND 
        l_left_brackets_count = 1 AND 
        l_quote_count = 0 AND
        (
         (l_substr_symbol_forward = '].') OR 
         (cur = li_path_length)
        )
       THEN
        IF (cur = li_path_length) THEN 
          RETURN 0;
        ELSE
          RETURN cur+1;
        END IF;
     ELSIF l_substr_symbol = '.' AND 
           l_left_brackets_count = 0 AND 
           l_quote_count = 0  THEN
        RETURN cur;   
     ELSIF (cur = li_path_length) THEN
        RETURN 0;
     ELSE 
        l_result_path := CONCAT(l_result_path,l_substr_symbol);
     END IF;
     
  END LOOP;
  RETURN 0;
END;
]]></complex-attribute>
                        <category _I_D="2c123eb5-0ede-454f-99f7-ef3f689a48bc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1ec71fdd-c65e-4c82-9273-70620b405456" name="array$get_path_in_lower_case" subcategories-loading="none" object-loading="extended" context="array$get_path_in_lower_case" is-trigger-function="0" unique-function-name="array$get_path_in_lower_case" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying[],character varying[],character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="p_array_of_fields character varying[], p_array_of_array_indexes character varying[], p_field_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365000" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_of_fields character varying[], p_array_of_array_indexes character varying[], p_field_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="array$get_path_in_lower_case(p_array_of_fields character varying[], p_array_of_array_indexes character varying[], p_field_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  l_result_path Varchar := '';
  l_element_count BigInt;
BEGIN
   l_element_count := array_upper(p_array_of_fields,1);
   FOR cur IN array_lower(p_array_of_fields,1)..l_element_count LOOP
    IF p_array_of_array_indexes[cur] IS NOT NULL THEN
      l_result_path := l_result_path || lower(p_array_of_fields[cur])||'['||p_array_of_array_indexes[cur]||'].';
    ELSE
      l_result_path := l_result_path || lower(p_array_of_fields[cur])||'.';
    END IF;
   END LOOP;
   l_result_path := l_result_path || lower(p_field_name);
   RETURN l_result_path;
END;
]]></complex-attribute>
                        <category _I_D="2cb83a17-cb45-47e6-9c2d-dab7d7023bf7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8d325e8c-dd6a-4856-91b2-83f363722a73" name="array$get_path_with_indexes" subcategories-loading="none" object-loading="extended" context="array$get_path_with_indexes" is-trigger-function="0" unique-function-name="array$get_path_with_indexes" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying[],character varying[],character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="p_array_of_fields character varying[], p_array_of_array_indexes character varying[], p_field_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365001" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_of_fields character varying[], p_array_of_array_indexes character varying[], p_field_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="array$get_path_with_indexes(p_array_of_fields character varying[], p_array_of_array_indexes character varying[], p_field_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  l_result_path Varchar := '';
  l_element_count BigInt;
BEGIN
   l_element_count := array_upper(p_array_of_fields,1);
   FOR cur IN array_lower(p_array_of_fields,1)..l_element_count LOOP
    IF p_array_of_array_indexes[cur] IS NOT NULL THEN
      l_result_path := l_result_path || p_array_of_fields[cur]||'['||p_array_of_array_indexes[cur]||'].';
    ELSE
      l_result_path := l_result_path || p_array_of_fields[cur]||'.';
    END IF;
   END LOOP;
   l_result_path := l_result_path || p_field_name;
   RETURN l_result_path;
END;
]]></complex-attribute>
                        <category _I_D="174b59cf-804b-4df9-9666-c360539d8d1f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="93d6f81d-50a7-4d0c-9155-0f639b77179c" name="array$get_storage_table_name" subcategories-loading="none" object-loading="extended" context="array$get_storage_table_name" is-trigger-function="0" unique-function-name="array$get_storage_table_name" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="p_array_path_without_indexes character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365002" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path_without_indexes character varying, p_procedure_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="array$get_storage_table_name(p_array_path_without_indexes character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
 RETURN 
    (WITH RECURSIVE arr AS (
                           SELECT id, a.array_name::text,a.storage_table_name, 1 as level,ARRAY[a.array_name::text] AS array_path
                             FROM aws_oracle_ext$arrays a 
                            WHERE a.procedure_name = aws_oracle_ext.check_identifier_case(p_procedure_name)
                              AND a.parent_id IS NULL
                            UNION ALL
                           SELECT anext.id, anext.array_name::text,aprev.storage_table_name, 
                                  aprev.level + 1 as level, 
                                  aprev.array_path || ARRAY[anext.array_name::text] as array_path
                             FROM arr aprev, aws_oracle_ext$arrays anext
                            WHERE aprev.id = anext.parent_id
                              AND anext.procedure_name = aws_oracle_ext.check_identifier_case(p_procedure_name)
                           )
    SELECT storage_table_name           
      FROM arr 
     WHERE array_to_string(array_path, '.') = p_array_path_without_indexes);
END;
]]></complex-attribute>
                        <category _I_D="1f21e1e5-b8d2-4aef-a20a-d60e8bdd721b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a1579619-3b4f-4230-9210-6297d4b7a53d" name="array$get_storage_table_param" subcategories-loading="none" object-loading="extended" context="array$get_storage_table_param" is-trigger-function="0" unique-function-name="array$get_storage_table_param" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying,character varying,character varying,smallint,text" is-returning-set="t" ret-datatype="table" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_DATASET" count-arguments="2" function-id="365003" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="array$get_storage_table_param(p_array_path character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  lt_error_text  Text;   
  l_array_path              Varchar;
  l_array_path_wihout_indexes Varchar;
  l_array_of_array_indexes  Varchar ARRAY;
  l_array_of_array_path     Varchar ARRAY;
  l_array_of_fields         Varchar ARRAY;
  l_field_name              Varchar;
  ln_array_id               BigInt := 0;

BEGIN
  IF (p_Array_Path IS NULL AND p_Procedure_Name IS NOT NULL) OR
     (p_Array_Path IS NOT NULL AND p_Procedure_Name IS NULL) 
    THEN
     --Checking for correct input parameters and raise exception
     lt_error_text := 'Cannot identify belonging of array. Not all parameter values was described.';
     RAISE EXCEPTION '%',lt_error_text;
  ELSE 
    --Get transformed array path
    l_array_path := aws_oracle_ext.array$transform_array_path(p_array_path);
    --Get array field identifier
    SELECT * 
      FROM aws_oracle_ext.array$expand_path_and_indexes(l_array_path)
      INTO l_array_path_wihout_indexes,l_array_of_array_indexes,l_array_of_array_path,l_array_of_fields,l_field_name;                 
    --If array exists in Storage table, then get it count there
    l_array_path:= (CASE
                      WHEN substring(l_array_path from 1 for 1)!='"' AND 
                           substring(l_array_path from length(l_array_path) for 1)!='"' 
                        THEN
                           lower(l_array_path)
                        ELSE 
                           l_array_path                                                                                       
                    END);    
     --Get array id
     ln_array_id := COALESCE(aws_oracle_ext.array$get_array_id(l_array_path_wihout_indexes,p_Procedure_Name),aws_oracle_ext.array$get_array_id(l_array_path,p_Procedure_Name));     
     IF ln_array_id IS NULL THEN
        
	lt_error_text := 'Array "'||l_array_path_wihout_indexes||'"'||' for procedure "'||p_Procedure_Name||'" has not been described. At first add array using function "aws_oracle_ext.array$create_array"';
	RAISE EXCEPTION '%',lt_error_text;
     END IF;
     
      SELECT         ta.Array_Name,
                     ta.Procedure_Name,
                     ta.Storage_Table_Name,
                     1,
                     ta.index_by
        INTO STRICT  array_name,
                     procedure_name,
                     storage_table_name,
                     is_table_exists,
                     index_by
        FROM aws_oracle_ext$arrays ta
       WHERE ta.id = ln_array_id
         AND ta.Procedure_Name = p_Procedure_Name;

      IF found AND storage_table_name IS NOT NULL THEN
        RETURN NEXT;
      ELSE
        --Defining of Storage Table Name
        storage_table_name := 'aws_oracle_ext$st'||(select NEXTVAL('aws_oracle_ext$seq_array_storage_table'))::VARCHAR;
        procedure_name := p_Procedure_Name;
        array_name := p_array_path;
        is_table_exists :=0;
        RETURN NEXT;     
      END IF;     
  END IF;
END;
]]></complex-attribute>
                        <category _I_D="1670112b-ca7f-4dbb-ad08-f620bcd79248" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="eeca50b0-c575-4cdb-bbcb-c918463504d0" name="array$get_value" subcategories-loading="none" object-loading="extended" context="array$get_value" is-trigger-function="0" unique-function-name="array$get_value" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_value_path character varying, p_procedure_name character varying, p_value_datatype anyelement DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365006" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_value_path character varying, p_procedure_name character varying, p_value_datatype anyelement" overload-function-count="1" proc-language="plpgsql" function-signature="array$get_value(p_array_value_path character varying, p_procedure_name character varying, p_value_datatype anyelement)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vret JSONB;
BEGIN

    vret := aws_oracle_ext.collection_element_get
	(
		p_routine_name => p_procedure_name,
        p_collection_path => p_array_value_path
	);

    IF vret IS NULL THEN

        RAISE NO_DATA_FOUND;

    END IF;

    RETURN JSONB_POPULATE_RECORD
    (
        p_value_datatype,
        vret
    );

END;
]]></complex-attribute>
                        <category _I_D="69dc3866-894a-4e6f-b591-3434b67eea06" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3b1ba71e-37be-48e9-bea0-68851f147285" name="array$get_value_id" subcategories-loading="none" object-loading="extended" context="array$get_value_id" is-trigger-function="0" unique-function-name="array$get_value_id" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="int8" function-arguments="p_array_value_path character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365004" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_value_path character varying, p_procedure_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="array$get_value_id(p_array_value_path character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  l_array_path_wihout_indexes Varchar;
  l_array_of_array_indexes  Varchar ARRAY;
  l_array_of_array_path     Varchar ARRAY;
  l_array_of_fields         Varchar ARRAY;
  l_field_name              Varchar;
  l_field_id                BigInt;
  lt_error_text  Text := 'Unable to get unknown value. (Procedure_name=>'||p_procedure_name||', Array_path=>'||p_array_value_path||'). At first you have to initialize the value"';
BEGIN
  IF (NOT aws_oracle_ext.array$is_temporary_structure_initialized()) THEN
      RAISE EXCEPTION '%',lt_error_text;
  END IF;   
  --Get array field identifier
  SELECT * FROM aws_oracle_ext.array$expand_path_and_indexes(p_array_value_path)
    INTO l_array_path_wihout_indexes,l_array_of_array_indexes,l_array_of_array_path,l_array_of_fields,l_field_name;    
  
  --Get value for not null array keys (for example array[1].fields[1].id)  
  WITH  RECURSIVE array_values AS (
                            SELECT av.id, 
                                   f.field_name,
                                   av.field_value::text,
                                   av.array_key, 
                                   av.array_field_id,
                                   f.array_id,
                                   f.field_type,
                                   1 as level,
                                   ARRAY[CASE 
                                            WHEN av.array_key IS NOT NULL THEN '['||av.array_key||'].'||f.field_name::text
                                              ELSE '.'||f.field_name::text
                                          END
                                         ] AS array_path
                              FROM aws_oracle_ext$array_field_values av,
                                   aws_oracle_ext$array_fields f,
                                   aws_oracle_ext$arrays arr
                             WHERE av.array_field_id = f.id
                               AND av.parent_field_id IS NULL
                               AND arr.id = f.array_id
                               AND arr.procedure_name = p_procedure_name                               
                               --Changes since 02.17.2017
                               --AND av.Array_Key = ANY (array_remove(l_array_of_array_indexes,NULL::Varchar))                                   
                               AND av.Array_Key = l_array_of_array_indexes[1]
                               AND f.field_name = ANY (array_append(array_append(l_array_of_fields,l_field_name),''))
                               AND f.array_id = aws_oracle_ext.array$get_array_id(l_array_of_array_path[1],p_procedure_name)
                             UNION ALL
                            SELECT avnext.id, 
                                   fnext.field_name, 
                                   avnext.field_value::text,
                                   avnext.array_key,
                                   avnext.array_field_id,
                                   fnext.array_id,
                                   fnext.field_type,
                                   avprev.level + 1 as level,
                                   avprev.array_path || ARRAY[CASE 
                                                                WHEN avnext.array_key IS NOT NULL THEN '['||avnext.array_key||'].'||fnext.field_name::text
                                                                  ELSE '.'||fnext.field_name::text
                                                               END
                                                             ] AS array_path
                              FROM array_values avprev, 
                                   aws_oracle_ext$array_field_values avnext,
                                   aws_oracle_ext$array_fields fnext,
                                   aws_oracle_ext$arrays arrnext
                             WHERE avnext.array_field_id = fnext.id
                               AND avprev.id = avnext.parent_field_id
                               AND arrnext.id = fnext.array_id
                               AND avnext.Array_Key = ANY (array_remove(l_array_of_array_indexes,NULL::Varchar))                                   
                               AND avnext.Array_Key IS NOT NULL
                               AND arrnext.procedure_name = p_procedure_name
                          )
      SELECT array_t_res.id
        INTO l_field_id
        FROM (                                        
              SELECT array_t.id,
                      CASE
                           WHEN strpos(array_path,'.') = 0 THEN
                             array_path||array_path_with_indexes 
                           ELSE 
                             SUBSTRING(array_path from 1 for strpos(array_path,'.')-1)||array_path_with_indexes 
                       END AS value_path
                FROM (
                       SELECT array_values.field_value,         
                              array_values.array_key,
                              array_values.field_name,
                              array_values.field_type,
                              array_values.id,
                              aws_oracle_ext.array$get_array_path_for_array_id(array_values.array_id) AS array_path,
                              array_to_string(array_values.array_path, '') array_path_with_indexes                              
                         FROM array_values
                      ) AS array_t
                    
              ) as array_t_res                            
        WHERE array_t_res.value_path = aws_oracle_ext.array$get_path_with_indexes(l_array_of_fields,l_array_of_array_indexes,l_field_name);
   IF found THEN
     RETURN l_field_id;
   END IF;
   --Get value for null array keys (for example array[1].fields.field1.id)
   WITH  RECURSIVE array_values AS (
                            SELECT av.id, 
                                   f.field_name,
                                   av.field_value::text,
                                   av.array_key, 
                                   av.array_field_id,
                                   f.array_id,
                                   f.field_type,
                                   1 as level,
                                   ARRAY[CASE 
                                            WHEN av.array_key IS NOT NULL THEN '['||av.array_key||'].'||f.field_name::text
                                              ELSE '.'||f.field_name::text
                                          END
                                         ] AS array_path
                              FROM aws_oracle_ext$array_field_values av,
                                   aws_oracle_ext$array_fields f,
                                   aws_oracle_ext$arrays arr
                             WHERE av.array_field_id = f.id
                               AND av.parent_field_id IS NULL
                               AND arr.id = f.array_id
                               AND arr.procedure_name = p_procedure_name
                               --Changes since 02.17.2017
                               --AND av.Array_Key = ANY (array_remove(l_array_of_array_indexes,NULL::Varchar))                                   
                               AND (av.Array_Key = l_array_of_array_indexes[1] OR av.Array_Key IS NULL)
                               AND f.field_name = ANY (array_append(array_append(l_array_of_fields,l_field_name),''))
                               AND f.array_id = aws_oracle_ext.array$get_array_id(l_array_of_array_path[1],p_procedure_name)
                             UNION ALL
                            SELECT avnext.id, 
                                   fnext.field_name, 
                                   avnext.field_value::text,
                                   avnext.array_key,
                                   avnext.array_field_id,
                                   fnext.array_id,
                                   fnext.field_type,
                                   avprev.level + 1 as level,
                                   avprev.array_path || ARRAY[CASE 
                                                                WHEN avnext.array_key IS NOT NULL THEN '['||avnext.array_key||'].'||fnext.field_name::text
                                                                  ELSE '.'||fnext.field_name::text
                                                               END
                                                             ] AS array_path
                              FROM array_values avprev, 
                                   aws_oracle_ext$array_field_values avnext,
                                   aws_oracle_ext$array_fields fnext,
                                   aws_oracle_ext$arrays arrnext
                             WHERE avnext.array_field_id = fnext.id
                               AND avprev.id = avnext.parent_field_id
                               AND arrnext.id = fnext.array_id
                               --AND avnext.Array_Key IS NULL
                               AND arrnext.procedure_name = p_procedure_name
                          )
      SELECT array_t_res.id
        INTO l_field_id
        FROM (                                        
              SELECT array_t.id,
                      CASE
                           WHEN strpos(array_path,'.') = 0 THEN
                             array_path||array_path_with_indexes 
                           ELSE 
                             SUBSTRING(array_path from 1 for strpos(array_path,'.')-1)||array_path_with_indexes 
                       END AS value_path
                FROM (
                       SELECT array_values.field_value,         
                              array_values.array_key,
                              array_values.field_name,
                              array_values.field_type,
                              array_values.id,
                              aws_oracle_ext.array$get_array_path_for_array_id(array_values.array_id) AS array_path,
                              array_to_string(array_values.array_path, '') array_path_with_indexes                              
                         FROM array_values
                      ) AS array_t
                    
              ) as array_t_res                            
        WHERE array_t_res.value_path = aws_oracle_ext.array$get_path_with_indexes(l_array_of_fields,l_array_of_array_indexes,COALESCE(l_field_name,''));
   
   IF (NOT found) THEN
      RETURN NULL;
   END IF;   
  
   RETURN l_field_id;
END;
]]></complex-attribute>
                        <category _I_D="d2cdaa81-8d6d-454a-8f4e-2cffb6f8bef6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="44aeac6f-4abf-4db6-982e-43e1716fbb7d" name="array$is_temporary_structure_initialized" subcategories-loading="none" object-loading="extended" context="array$is_temporary_structure_initialized" is-trigger-function="0" unique-function-name="array$is_temporary_structure_initialized" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="bool" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365008" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="array$is_temporary_structure_initialized()">
                        <complex-attribute name="sql"><![CDATA[
    SELECT
        CASE
            WHEN COALESCE
            (
                UPPER(aws_oracle_ext.get_extpack_variable
                (
                    variable_name => 'ARRAYSMETADATA',
                    missing_ok => TRUE
                )),
                'FALSE'
            ) <> 'TRUE' THEN
                FALSE
            ELSE
                TRUE 
        END;

]]></complex-attribute>
                        <category _I_D="a4b9af31-2181-4cff-9c45-40e96ddbb3d7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7a6c00b3-9d91-4a5e-848f-80ae6e6a37ee" name="array$last" subcategories-loading="none" object-loading="extended" context="array$last" is-trigger-function="0" unique-function-name="array$last" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_path character varying, p_procedure_name character varying, p_def anyelement DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365009" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying, p_def anyelement" overload-function-count="1" proc-language="sql" function-signature="array$last(p_array_path character varying, p_procedure_name character varying, p_def anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_last
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_tp => p_def
    );

]]></complex-attribute>
                        <category _I_D="7b6ed4a7-194a-47b1-912c-6b005ee56179" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1b510350-1f60-406d-b5cb-0fb2e3681c0d" name="array$next" subcategories-loading="none" object-loading="extended" context="array$next" is-trigger-function="0" unique-function-name="array$next" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365011" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement" overload-function-count="1" proc-language="sql" function-signature="array$next(p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_next
	(
		p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_idx => p_array_key,
        p_tp => p_def
	);

]]></complex-attribute>
                        <category _I_D="a2ae8d85-b582-46ad-ae4b-40bd19dc805f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="290b8a07-a80b-45b7-a86c-b278b3653141" name="array$prior" subcategories-loading="none" object-loading="extended" context="array$prior" is-trigger-function="0" unique-function-name="array$prior" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365013" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement" overload-function-count="1" proc-language="sql" function-signature="array$prior(p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_prior
	(
		p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_idx => p_array_key,
        p_tp => p_def
	);

]]></complex-attribute>
                        <category _I_D="6d484dc7-6e82-4076-a25b-7a18743aa1b4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ac39ecc6-43a9-49ce-a148-7f0808481642" name="array$set_temporary_structure_initialized" subcategories-loading="none" object-loading="extended" context="array$set_temporary_structure_initialized" is-trigger-function="0" unique-function-name="array$set_temporary_structure_initialized" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365015" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="array$set_temporary_structure_initialized()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.set_extpack_variable
    (
        variable_name => 'ARRAYSMETADATA',
        variable_value => TRUE::TEXT
    );

]]></complex-attribute>
                        <category _I_D="0782f5e5-8753-4857-89e4-7854b04a7926" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="777f7877-95d7-4aeb-889b-a25d38bdab22" name="array$set_value" subcategories-loading="none" object-loading="extended" context="array$set_value" is-trigger-function="0" unique-function-name="array$set_value" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,anyelement" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_procedure_name character varying, p_value anyelement" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365016" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying, p_value anyelement" overload-function-count="1" proc-language="sql" function-signature="array$set_value(p_array_path character varying, p_procedure_name character varying, p_value anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_element_set
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_val => p_value
    );

]]></complex-attribute>
                        <category _I_D="4b86d1ba-30c4-4a73-80f5-b74273cb462f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f153364b-8b0c-4a4d-ae0c-05b0ead09f0c" name="array$temporary_structure_initialize" subcategories-loading="none" object-loading="extended" context="array$temporary_structure_initialize" is-trigger-function="0" unique-function-name="array$temporary_structure_initialize" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365018" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="array$temporary_structure_initialize()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  /*Create temporary structure for  saving of associative arrays*/

    CREATE TEMPORARY SEQUENCE aws_oracle_ext$seq_arrays
        MINVALUE 1
        MAXVALUE 9223372036854775807
        START WITH 1
        INCREMENT BY 1 CACHE 5;

    CREATE TEMPORARY SEQUENCE aws_oracle_ext$seq_array_fields
        MINVALUE 1
        MAXVALUE 9223372036854775807
        START WITH 1
        INCREMENT BY 1
        CACHE 50;

    CREATE TEMPORARY SEQUENCE aws_oracle_ext$seq_array_field_values
        MINVALUE 1
        MAXVALUE 9223372036854775807
        START WITH 1
        INCREMENT BY 1
        CACHE 1000;

    CREATE TEMPORARY SEQUENCE aws_oracle_ext$seq_array_storage_table
        MINVALUE 1
        MAXVALUE 9223372036854775807
        START WITH 1
        INCREMENT BY 1
        CACHE 1;

    CREATE TEMPORARY TABLE aws_oracle_ext$arrays
    (
        id BIGINT NOT NULL DEFAULT NEXTVAL('aws_oracle_ext$seq_arrays'),
        array_name VARCHAR(100) NOT NULL,
        procedure_name VARCHAR NOT NULL,
        parent_id BIGINT,
        description VARCHAR(200),
        storage_table_name VARCHAR,
        cast_type_name VARCHAR,
        index_by TEXT DEFAULT 'BIGINT' NOT NULL,	
        is_nested BOOLEAN DEFAULT FALSE,		   
        CONSTRAINT pk_aws_oracle_ext$arrays_id
            PRIMARY KEY(id),
        CONSTRAINT fk_aws_oracle_ext$arrays_parent_id__id
            FOREIGN KEY(parent_id)
            REFERENCES aws_oracle_ext$arrays(id)
    )
    ON COMMIT PRESERVE ROWS;
  
    CREATE UNIQUE INDEX ix_unique_aws_oracle_ext$arrays__arr_name_proc_name
        ON aws_oracle_ext$arrays(array_name, procedure_name, parent_id);
    
    CREATE INDEX ix_aws_oracle_ext$arrays__proc_name
        ON aws_oracle_ext$arrays (procedure_name);
  
  /*Autovacuum options for aws_oracle_ext$arrays*/
    ALTER TABLE aws_oracle_ext$arrays
        SET (autovacuum_vacuum_scale_factor = 0.0);
    
    ALTER TABLE aws_oracle_ext$arrays
        SET (autovacuum_vacuum_threshold = 1);

    ALTER TABLE aws_oracle_ext$arrays
        SET (autovacuum_analyze_scale_factor = 0.0);

    ALTER TABLE aws_oracle_ext$arrays
        SET (autovacuum_analyze_threshold = 1);

    CREATE TEMPORARY TABLE aws_oracle_ext$array_fields
    (
        id BIGINT NOT NULL DEFAULT NEXTVAL('aws_oracle_ext$seq_array_fields'),
        array_id BIGINT NOT NULL,
        field_name VARCHAR(100),
        field_type VARCHAR(100) NOT NULL,
        CONSTRAINT pk_array_fields_id
            PRIMARY KEY(id),
        CONSTRAINT fk_arrayid__aws_oracle_ext$arrays_id
            FOREIGN KEY(array_id)
            REFERENCES aws_oracle_ext$arrays(id)
    )
    ON COMMIT PRESERVE ROWS;

    CREATE UNIQUE INDEX ix_unique_aws_oracle_ext$array_fields__arr_id_field_name
        ON aws_oracle_ext$array_fields (array_id, field_name);

    CREATE INDEX ix_aws_oracle_ext$array_fields__arr_id
        ON aws_oracle_ext$array_fields (array_id);
  
  /*Autovacuum options for aws_oracle_ext$array_fields*/
    ALTER TABLE aws_oracle_ext$array_fields
        SET (autovacuum_vacuum_scale_factor = 0.0);
    
    ALTER TABLE aws_oracle_ext$array_fields
        SET (autovacuum_vacuum_threshold = 3);
    
    ALTER TABLE aws_oracle_ext$array_fields
        SET (autovacuum_analyze_scale_factor = 0.0);
    
    ALTER TABLE aws_oracle_ext$array_fields
        SET (autovacuum_analyze_threshold = 3);

    CREATE TEMPORARY TABLE aws_oracle_ext$array_field_values
    (
        id BIGINT NOT NULL DEFAULT NEXTVAL('aws_oracle_ext$seq_array_field_values'),
            Array_Field_ID BIGINT NOT NULL,
            Array_Key  VARCHAR(32767),
            Field_Value TEXT,
            Parent_Field_ID BIGINT,
            Is_Value_Initialized SMALLINT,
            CONSTRAINT pk_array_fields_values_id PRIMARY KEY(ID),
            CONSTRAINT fk_array_field_id__aws_oracle_ext$array_fields__id
                FOREIGN KEY(Array_Field_ID)
                REFERENCES aws_oracle_ext$array_fields(ID),
            CONSTRAINT fk_array_field_id__Parent_Field_Id__Id
                FOREIGN KEY(Parent_Field_ID)
                REFERENCES aws_oracle_ext$array_field_values(ID)
    )
    ON COMMIT PRESERVE ROWS;
  
    CREATE UNIQUE INDEX ix_aws_oracle_ext$array_field_values_unique_arr_field_id_arr_ke
        ON aws_oracle_ext$array_field_values(array_field_id, array_key,parent_field_id);

    CREATE INDEX ix_aws_oracle_ext$array_field_values__arr_field_id
        ON aws_oracle_ext$array_field_values(array_field_id);
    
    CREATE INDEX ix_aws_oracle_ext$array_field_values__arr_parent_id
        ON aws_oracle_ext$array_field_values(parent_field_id);
    
    CREATE INDEX ix_aws_oracle_ext$array_field_values__arr_key
        ON aws_oracle_ext$array_field_values(array_key);
           
  /*Autovacuum options for aws_oracle_ext$array_field_values*/
    ALTER TABLE aws_oracle_ext$array_field_values
        SET (autovacuum_vacuum_scale_factor = 0.0);
    
    ALTER TABLE aws_oracle_ext$array_field_values
        SET (autovacuum_vacuum_threshold = 1000);
    ALTER TABLE aws_oracle_ext$array_field_values
        SET (autovacuum_analyze_scale_factor = 0.0);
    ALTER TABLE aws_oracle_ext$array_field_values
        SET (autovacuum_analyze_threshold = 1000);  

  /*Initialize context parameter for automatic analyze*/

    PERFORM aws_oracle_ext.set_extpack_variable
    (
        variable_name => 'ARRAYANALYZE_COUNTER',
        variable_value => 0::TEXT
    );
  /*Set temporary structure flag to initialized*/
    PERFORM aws_oracle_ext.array$set_temporary_structure_initialized();

END;
]]></complex-attribute>
                        <category _I_D="67ab53dd-0278-4fa0-90f3-950c8e4c19b6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3bd73182-60b6-4cd6-b4e5-29ede2433763" name="array$transfer_data_to_storage_table" subcategories-loading="none" object-loading="extended" context="array$transfer_data_to_storage_table" is-trigger-function="0" unique-function-name="array$transfer_data_to_storage_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bigint,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_id bigint, p_storage_table_name character varying, p_cast_type_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365019" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_id bigint, p_storage_table_name character varying, p_cast_type_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="array$transfer_data_to_storage_table(p_array_id bigint, p_storage_table_name character varying, p_cast_type_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    jsb_result_insert_data JSONB[];
    jsb_temp_object JSONB;
    jsb_temp_typed_object JSONB DEFAULT '{}'::JSONB;
    id_array VARCHAR[];
    cur RECORD;
    rec RECORD;
    vIndexBy TEXT;
    vSql TEXT;
    vi SMALLINT DEFAULT 1;
    parray TEXT[];
BEGIN

    FOR cur IN
    (
        SELECT DISTINCT av.array_key akey,
            arr.id aid,
            arr.index_by
        FROM aws_oracle_ext$arrays arr
        JOIN aws_oracle_ext$array_fields f ON arr.id = f.array_id
        LEFT OUTER JOIN aws_oracle_ext$array_field_values av ON av.array_field_id = f.id
        WHERE arr.id = p_array_id
        ORDER BY av.array_key
    )
    LOOP

        IF cur.akey IS NOT NULL THEN

            vIndexBy := cur.index_by;

            jsb_temp_object :=
            (
                SELECT JSONB_OBJECT
                (
                    ARRAY_AGG
                    (
                        CASE
                            WHEN f.field_name = '' THEN
                                'column_value'
                            ELSE f.field_name
                        END
                        ORDER BY f.id
                    ),
                    ARRAY_AGG
                    (
                        av.field_value
                        ORDER BY f.id
                    )
                )
                FROM aws_oracle_ext$array_fields f 
                LEFT OUTER JOIN aws_oracle_ext$array_field_values av ON av.array_field_id = f.id AND av.array_key = cur.akey
                WHERE f.array_id = cur.aid
            );

            EXECUTE 'SELECT ROW_TO_JSON(JSONB_POPULATE_RECORD(NULL::'||p_Cast_Type_Name||', $1 ))' INTO jsb_temp_typed_object USING jsb_temp_object;

        END IF;

        /* TO do - not best flow*/

        FOR rec IN
        (
            WITH RECURSIVE t1(id, parent_id) AS
            (
                SELECT id,
                    parent_id,
                    array_name,
                    array_name AS pn
                FROM aws_oracle_ext$arrays
                WHERE id = cur.aid
                UNION ALL
                SELECT t2.id,
                    t2.parent_id,
                    t2.array_name,
                    t1.array_name AS pn
                FROM aws_oracle_ext$arrays t2, t1
                WHERE t2.parent_id = t1.id
            )
            SELECT id,
                parent_id, array_name, pn
            FROM t1
            WHERE parent_id IS NOT NULL
            ORDER BY parent_id NULLS FIRST
            
        )
        LOOP

            IF vi <> 1 THEN

                parray := ARRAY_APPEND
                (
                    parray,
                    rec.pn::TEXT
                );

            END IF;

            parray := ARRAY_APPEND
            (
                parray,
                rec.array_name::TEXT
            );

            jsb_temp_object :=
            (
                SELECT JSONB_OBJECT
                (
                    ARRAY_AGG
                    (
            
                        f.field_name
                        ORDER BY f.id
                    ),
                    ARRAY_AGG
                    (
                        av.field_value
                        ORDER BY f.id
                    )
                )
                FROM aws_oracle_ext$array_fields f 
                LEFT OUTER JOIN aws_oracle_ext$array_field_values av ON av.array_field_id = f.id
                WHERE f.array_id = rec.id
            );

            jsb_temp_typed_object := JSONB_SET
            (
                jsb_temp_typed_object,
                parray,
                jsb_temp_object
            );

            vi := vi + 1;

        END LOOP;

        IF cur.akey IS NOT NULL THEN

            jsb_result_insert_data := ARRAY_APPEND
            (
                jsb_result_insert_data,
                jsb_temp_typed_object
            );

            id_array := ARRAY_APPEND
            (
                id_array,
                cur.akey
            );

        END IF;

    END LOOP;

    vSql := CONCAT
    (
        'INSERT INTO ',
        p_storage_table_name,
        E' SELECT CAST
(
    CASE
        WHEN \'',
vIndexby,
E'\' LIKE \'VARCHAR%\' THEN
            REGEXP_REPLACE(i.val, E\'^\\\'(.*)\\\'\', \'\\1\')
        ELSE i.val
    END',
' AS ',
vIndexby,
'
),
j.val
FROM UNNEST($1) WITH ORDINALITY i(val, elem)
JOIN UNNEST($2) WITH ORDINALITY j(val, elem) ON i.elem = j.elem'
    );

    EXECUTE vSql USING id_array, jsb_result_insert_data;
  
END;
]]></complex-attribute>
                        <category _I_D="1f16f98a-2335-4977-9cbe-4762a73ae14b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ebe1293d-4cf4-4238-aa67-32611f65d1d2" name="array$transfer_to_storage_table" subcategories-loading="none" object-loading="extended" context="array$transfer_to_storage_table" is-trigger-function="0" unique-function-name="array$transfer_to_storage_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying,character varying,boolean" is-returning-set="f" ret-datatype="void" function-arguments="p_array_name character varying, p_procedure_name character varying, p_storage_table_name character varying, p_cast_type_name character varying, pwithdata boolean DEFAULT true" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365020" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_name character varying, p_procedure_name character varying, p_storage_table_name character varying, p_cast_type_name character varying, pwithdata boolean" overload-function-count="1" proc-language="plpgsql" function-signature="array$transfer_to_storage_table(p_array_name character varying, p_procedure_name character varying, p_storage_table_name character varying, p_cast_type_name character varying, pwithdata boolean)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    lt_error_text  TEXT;
    
    l_array_name VARCHAR;

    ln_array_id BIGINT := NULL;

BEGIN

    l_array_name :=
    CASE
        WHEN SUBSTRING(p_array_name FROM 1 FOR 1) != '"' AND SUBSTRING(p_array_name FROM LENGTH(p_array_name) FOR 1) != '"' THEN
            LOWER(p_array_name)
        ELSE 
            p_array_name
    END;

    IF (p_Array_Name IS NULL OR p_Procedure_Name IS NULL OR p_Storage_Table_Name IS NULL) THEN
        
        --Checking for correct input parameters and raise exception
        lt_error_text := 'Cannot identify belonging of array. Not all parameter values was described.';
        RAISE EXCEPTION '%',lt_error_text;

    ELSE 
        
        --If array exists in Storage table, then get it count there
        ln_array_id := aws_oracle_ext.array$get_array_id
        (
            l_array_name,
            p_procedure_name
        );

        IF ln_array_id IS NULL THEN
        
            lt_error_text := CONCAT
            (
                'Array definition named "',
                p_array_name,
                '" for the procedure "',
                p_procedure_name,
                '" is not exists.'
            );

            RAISE EXCEPTION '%',lt_error_text;

        ELSE 
        
            --Transfer data to storage table
            IF pWithData THEN

                PERFORM aws_oracle_ext.array$transfer_data_to_storage_table
                (
                    p_array_id           => ln_array_id, 
                    p_storage_table_name => array$transfer_to_storage_table.p_Storage_Table_Name,
                    p_Cast_Type_Name     => array$transfer_to_storage_table.p_Cast_Type_Name
                );

            END IF;
        
            --Deleting array values in Tree structure
            PERFORM aws_oracle_ext.array$delete_for_storage_table
            (
                l_array_name,
                p_Procedure_Name
            );

            --Updating Storage table name , If array exists  
            UPDATE aws_oracle_ext$arrays ta
            SET Storage_Table_Name = p_Storage_Table_Name,
                Cast_Type_Name = p_Cast_Type_Name
            WHERE ta.Array_Name = l_array_name
            AND ta.Procedure_Name = p_Procedure_Name;
        
            RETURN;

        END IF;

    END IF;

END;
]]></complex-attribute>
                        <category _I_D="04a847b1-e339-4a17-9556-d6cc06e8e16c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8f6bb23c-0646-4600-ba6a-09e402970a19" name="array$transform_array_path" subcategories-loading="none" object-loading="extended" context="array$transform_array_path" is-trigger-function="0" unique-function-name="array$transform_array_path" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="p_array_path character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365021" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying" overload-function-count="1" proc-language="plpgsql" function-signature="array$transform_array_path(p_array_path character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  l_left_brackets_count   SmallInt := 0;
  l_quote_count           SmallInt := 0;
  l_substr_symbol         Char(1);
  l_substr_symbol_forward Char(2);
  l_result_path           Varchar;
  li_path_length          Integer;
BEGIN
  --Transform array path that it will be with points
  li_path_length := length(p_array_path);
  FOR cur IN 1..li_path_length LOOP
     l_substr_symbol := substring(p_array_path from cur for 1);
     l_substr_symbol_forward := substring(p_array_path from cur for 2);
     IF l_substr_symbol = '[' AND l_quote_count = 0 THEN
        l_left_brackets_count := l_left_brackets_count +1;
     END IF;     
     IF l_substr_symbol_forward = '[''' THEN
       l_quote_count := l_quote_count + 1;
     END IF;
     
     IF substring(p_array_path from cur-1 for 2)=''']' THEN
       l_quote_count := l_quote_count - 1;
     END IF;
     
     IF l_substr_symbol = ']' AND 
        l_left_brackets_count = 1 AND 
        l_quote_count = 0 AND
        (
         (l_substr_symbol_forward = '][') OR 
         (cur = li_path_length)
        )
      THEN
        l_result_path := CONCAT(l_result_path,l_substr_symbol,'.');
        l_left_brackets_count := l_left_brackets_count - 1;      
      ELSE 
        l_result_path := CONCAT(l_result_path,l_substr_symbol);
     END IF;
     
  END LOOP;
  RETURN l_result_path;
END;
]]></complex-attribute>
                        <category _I_D="f397a4fe-0da5-4d39-a7bc-5803de3dcac8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="962b69e5-b6d7-40e1-8de5-ea84553e2c2b" name="asciistr" subcategories-loading="none" object-loading="extended" context="asciistr" is-trigger-function="0" unique-function-name="asciistr" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_str text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365022" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_str text" overload-function-count="1" proc-language="sql" function-signature="asciistr(p_str text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT
        CASE
            WHEN p_str ='' THEN NULL::TEXT
            ELSE
                (
                    SELECT ARRAY_TO_STRING
                    (
                        ARRAY_AGG
                        (
                            CASE 
                                WHEN ASCII(v) <= 127 and ASCII(v) != 92 THEN
                                    v
                        ELSE
                            CONCAT
                            (
                                '\',
                                UPPER
                                (
                                    LPAD
                                    (
                                        TO_HEX(ASCII(v)),
                                        4,
                                        '0'
                                    )
                                )
                            )
                        END
                        ),
                        ''
                    )
                    FROM REGEXP_SPLIT_TO_TABLE(p_str, '') AS v
                )
        END;

]]></complex-attribute>
                        <category _I_D="8a01e794-d2bd-49fb-9256-1583a904552f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b17be61a-22a8-450a-9a17-b10759652466" name="autonomous_exec" subcategories-loading="none" object-loading="extended" context="autonomous_exec" is-trigger-function="0" unique-function-name="autonomous_exec" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,json,json" is-returning-set="f" ret-datatype="record" function-arguments="sql_text text, OUT aws_params json, OUT aws_session_env json" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="366000" volatility="VOLATILE" is-window="f" function-identity-arguments="sql_text text, OUT aws_params json, OUT aws_session_env json" overload-function-count="1" proc-language="plpgsql" function-signature="autonomous_exec(sql_text text, OUT aws_params json, OUT aws_session_env json)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  v_result        JSON;
  v_srvname       name;
  v_fdwname       name;
  v_current_user  name;  
  v_connname      text;
  v_connstr       text;
  v_conn_result   text;
  v_send_result   int;
BEGIN
  v_srvname := 'loopback_dblink';
  v_current_user := current_user;
  v_connname := replace(uuid_generate_v4()::text,'-','');
  v_connstr  := v_srvname;

  --Check if the foreign server is present
  IF NOT EXISTS (SELECT 1
                   FROM pg_foreign_server s
                  WHERE s.srvname = v_srvname) THEN
    RAISE USING MESSAGE := format('The FOREIGN SERVER (%s) doesn''t exist.', v_srvname),
                DETAIL := format('The FOREIGN SERVER (%s) must be present.', v_srvname),
                HINT := format('Make sure that the FOREIGN SERVER (%s) exists.', v_srvname);
  END IF;  

  --Check the foreign-data wrapper name of the foreign_server
  SELECT w.fdwname
    INTO v_fdwname
    FROM pg_foreign_server s
    JOIN pg_foreign_data_wrapper w 
      ON w.oid = s.srvfdw
   WHERE s.srvname = v_srvname;
  IF v_fdwname <> 'dblink_fdw' THEN
    RAISE USING MESSAGE := format('The name of FOREIGN DATA WRAPPER (%s) that manages the server (%s) should be dblink_fdw', v_fdwname, v_srvname),
                DETAIL := format('The name of FOREIGN DATA WRAPPER (%s) that manages the server (%s) is not dblink_fdw', v_fdwname, v_srvname),
                HINT := format('Make sure that the FOREIGN SERVER (%s) has been defined using dblink_fdw foreign-data wrapper', v_srvname);
  END IF;  

  --Check if the user mapping is present for current user
  IF NOT EXISTS (SELECT 1
                   FROM pg_user_mappings m
                   JOIN pg_foreign_server s
                     ON s.oid = m.srvid
                  WHERE s.srvname = v_srvname
                    AND m.usename = v_current_user) THEN
    RAISE USING MESSAGE := format('No USER MAPPING exists for the FOREIGN SERVER (%s) and USER (%s).', v_srvname, v_current_user),
                DETAIL := format('The USER MAPPING for the FOREIGN SERVER (%s) and USER (%s) must be present', v_srvname, v_current_user),
                HINT := format('Make sure that the USER MAPPING for the FOREIGN SERVER (%s) and USER (%s) exists.', v_srvname, v_current_user);
  END IF;
 
  --Open the connection  
  SELECT dblink_connect(v_connname,v_connstr) 
    INTO v_conn_result;
  IF v_conn_result <> 'OK' THEN
    RAISE USING MESSAGE := 'An error has occurred while trying to open a loopback dblink connection';
  END IF;

  --Send the query with the autonomous routine call
  SELECT dblink_send_query(v_connname, sql_text) 
    INTO v_send_result;
  IF v_send_result = 0 THEN
    RAISE USING MESSAGE := 'An error has occurred while sending the query';
  END IF;

  --Get the result of the query with the autonomous routine call 
  SELECT t.aws_params, t.aws_session_env 
    INTO aws_params, aws_session_env
    FROM dblink_get_result(v_connname) 
      AS t(aws_params JSON, aws_session_env JSON);
    
  --Close a connection
  SELECT dblink_disconnect(v_connname) 
    INTO v_conn_result;
  IF v_conn_result <> 'OK' THEN
    RAISE USING MESSAGE := 'An error has occurred while trying to close a loopback dblink connection';
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    --Check if the connection exists
    IF v_connname = ANY(dblink_get_connections()) THEN
      PERFORM dblink_disconnect(v_connname);
    END IF;
    RAISE;
END;
]]></complex-attribute>
                        <category _I_D="f6c490d6-fac8-4daa-86e8-e6128f495dc7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9ec74ea8-7972-4a12-9716-fea90c665197" name="bulk$clear_storage_table" subcategories-loading="none" object-loading="extended" context="bulk$clear_storage_table" is-trigger-function="0" unique-function-name="bulk$clear_storage_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="void" function-arguments="pstoragetablename character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365023" volatility="VOLATILE" is-window="f" function-identity-arguments="pstoragetablename character varying" overload-function-count="1" proc-language="plpgsql" function-signature="bulk$clear_storage_table(pstoragetablename character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vSql TEXT;
BEGIN

    vSQL := CONCAT
    (
        'DROP TABLE IF EXISTS ',
        pStorageTableName,
        ';',
        CHR(10),
        'DROP SEQUENCE IF EXISTS aws_oracle_ext$sq_',
        pStorageTableName,
        ' CASCADE;'
    );

    EXECUTE vSql;

END;
]]></complex-attribute>
                        <category _I_D="26258547-9a69-4d84-92ac-d470b18924c9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cb57120f-bc04-41a5-8f4f-a82056340b20" name="bulk$collect_statement_to_assoc" subcategories-loading="none" object-loading="extended" context="bulk$collect_statement_to_assoc" is-trigger-function="0" unique-function-name="bulk$collect_statement_to_assoc" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying[],character varying,json[]" is-returning-set="f" ret-datatype="void" function-arguments="pinto character varying[], pprocedurename character varying, pdataset json[]" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365026" volatility="VOLATILE" is-window="f" function-identity-arguments="pinto character varying[], pprocedurename character varying, pdataset json[]" overload-function-count="1" proc-language="plv8" function-signature="bulk$collect_statement_to_assoc(pinto character varying[], pprocedurename character varying, pdataset json[])">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");
const pathParts = parser(pprocedurename);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");
const vn = caseCheck(pinto[0]);
chk(sn, pn, vn);

const rowType = aws_oracle_ext[sn][pn][vn].rowType;
const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;

const tree = new Tree(52);
tree.indexBy = 'BIGINT';
tree.collectionType = collectionType;
tree.rowType = rowType;

if (pdataset !== null && typeof(pdataset) !== 'undefined') {
  const res = plv8.execute(`select aws_oracle_ext.record_to_json(NULL::${rowType}) as r`);
  const emptyObj = res[0].r;
  const keys = Object.keys(emptyObj);

  for (let i = 0; i < pdataset.length; i++) {
    const vdataset = pdataset[i].hasOwnProperty('bulk$fetch_cursor') ? pdataset[i]['bulk$fetch_cursor'] : pdataset[i];
    const values = Object.values(vdataset);
    const tempRec = {};
    for (let j = 0; j < keys.length; j++) {
      tempRec[keys[j]] = values[j]; 
    }
    tree.putValue(i + 1, tempRec);
  }
}

aws_oracle_ext[sn][pn][vn] = tree;

]]></complex-attribute>
                        <category _I_D="91304e4a-cbdb-4182-bbb0-ca36dcd583dd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8c1d8fd6-88fb-499b-b9d2-f5a41d9709e6" name="bulk$collection_method" subcategories-loading="none" object-loading="extended" context="bulk$collection_method" is-trigger-function="0" unique-function-name="bulk$collection_method" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,jsonb,boolean,bigint" is-returning-set="f" ret-datatype="jsonb" function-arguments="ptablename character varying, pmethodname character varying, pparams jsonb DEFAULT NULL::jsonb, pcalc boolean DEFAULT true, parrayid bigint DEFAULT NULL::bigint" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365024" volatility="VOLATILE" is-window="f" function-identity-arguments="ptablename character varying, pmethodname character varying, pparams jsonb, pcalc boolean, parrayid bigint" overload-function-count="1" proc-language="plpgsql" function-signature="bulk$collection_method(ptablename character varying, pmethodname character varying, pparams jsonb, pcalc boolean, parrayid bigint)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE

    vResult JSONB DEFAULT '{"result": null}'::JSONB;

    cAllowedMethods CONSTANT VARCHAR[] := ARRAY
    [
        'DELETE',
        --
        'EXISTS',
        'FIRST',
        'LAST',
        'COUNT',
        'PRIOR',
        'NEXT',
        -- setter and getter
        'SET',
        'GET'
    ];

    vSQL TEXT;
    vTextResult TEXT;
    vJsonRec JSONB;
    vJsonRecEmpty JSONB;

    vMethodName VARCHAR;

    cColumnAliases JSONB DEFAULT '{"PRIOR": "p", "NEXT": "n", "FIRST": "f", "LAST": "l", "COUNT": "c", "EXISTS": "e"}'::JSONB;
    
    vIsNumber BOOLEAN DEFAULT TRUE;
    
    vId BIGINT DEFAULT NULL;
    vvId TEXT DEFAULT NULL;

    vColumnslist JSONB;
    vOk1 BOOLEAN DEFAULT TRUE;
    vOk2 BOOLEAN DEFAULT FALSE;

BEGIN

    vMethodName := UPPER(pMethodName);

    IF ARRAY_POSITION(cAllowedMethods, vMethodName) IS NULL THEN

        RAISE USING MESSAGE := 'Unknown method used';

    END IF;

    SELECT 
        CASE
            WHEN arr.index_by LIKE 'VARCHAR%' THEN
                FALSE
            ELSE
                TRUE
        END
    INTO vIsNumber
    FROM aws_oracle_ext$arrays arr
    WHERE (pArrayid IS NULL OR (pArrayid IS NOT NULL AND arr.id = pArrayid))
    AND arr.storage_table_name = pTableName;

    -- param check
    IF
        (
            vMethodName IN ('FIRST', 'LAST', 'COUNT') AND 
            pParams IS NOT NULL
        )
        OR 
        (
            vMethodName IN ('EXISTS', 'NEXT', 'PRIOR') AND 
            COALESCE(JSONB_ARRAY_LENGTH(pParams), 0) <> 1
        )
        OR vMethodName = 'SET' AND 
            COALESCE(JSONB_ARRAY_LENGTH(pParams), 0) <> 2
        OR vMethodName = 'GET' AND 
            COALESCE(JSONB_ARRAY_LENGTH(pParams), 0) NOT BETWEEN 1 AND 2
    THEN
        
        RAISE USING MESSAGE := CONCAT('PLS-00306: wrong number or types of arguments in call to ''', vMethodName, '''');

    END IF;

    CASE
        WHEN vMethodName = 'DELETE' THEN

            vSQL := CONCAT
            (
                'DELETE FROM ',
                pTableName,
                CASE
                    WHEN pParams IS NULL THEN ''
                    WHEN JSONB_ARRAY_LENGTH(pParams) = 0 THEN ''
                    WHEN JSONB_ARRAY_LENGTH(pParams) = 1 THEN ' WHERE id = $1'
                    ELSE ' WHERE id BETWEEN $1 AND $2'
                END
            );
            
            
            CASE
                WHEN JSONB_ARRAY_LENGTH(pParams) = 1 THEN

                    IF NOT vIsNumber THEN

                        EXECUTE vSQL USING REGEXP_REPLACE(pParams ->> 0, E'^\'(.*)\'', '\1');

                    ELSE

                        EXECUTE vSQL USING (pParams ->> 0)::BIGINT;

                    END IF;

                WHEN JSONB_ARRAY_LENGTH(pParams) = 2 THEN

                    IF NOT vIsNumber THEN

                        EXECUTE vSQL USING REGEXP_REPLACE(pParams ->> 0, E'^\'(.*)\'', '\1'), pParams ->> 1;

                    ELSE

                        EXECUTE vSQL USING (pParams ->> 0)::BIGINT, (pParams ->> 1)::BIGINT;

                    END IF;
                
                ELSE

                    EXECUTE vSQL;
            END CASE;

        WHEN vMethodName IN
        (
            SELECT JSONB_OBJECT_KEYS(cColumnAliases)
        ) THEN

            IF vMethodName IN ('EXISTS', 'NEXT', 'PRIOR') THEN

                IF NOT vIsNumber THEN

                    vvId := REGEXP_REPLACE(pParams ->> 0, E'^\'(.*)\'', '\1');

                ELSE

                    vId := (pParams ->> 0)::BIGINT;

                END IF;

            END IF;

            vSQL := CONCAT
            (
                'WITH src AS',
                '('||CHR(10),
                'SELECT LAG(id) OVER() p, LEAD(id) OVER() n, FIRST_VALUE(id) OVER() f, LAST_VALUE(id) OVER() l, COUNT(*) OVER() c, TRUE e, id'||CHR(10),
                'FROM ',
                pTableName,
                CHR(10),
                ')'||CHR(10),
                'SELECT ',
                cColumnAliases ->> vMethodName,
                CHR(10),
                'FROM ('||CHR(10),
                'SELECT p, n, f, l, c, e FROM'||CHR(10),
                '('||CHR(10),
                'SELECT p, n, f, l, c, e, id FROM src '||CHR(10),
                'WHERE EXISTS (SELECT 1 FROM ',
                pTableName,
                ') AND (id = $1',
                ' OR ',
                '$1 IS NULL)'||CHR(10),
                'LIMIT 1'||CHR(10),
                ') z'||CHR(10),
                'UNION'||CHR(10),
                'SELECT NULL, NULL, NULL, NULL, 0, FALSE'||CHR(10),
                'WHERE ',
                '$1 IS NOT NULL AND NOT EXISTS (SELECT id FROM src WHERE id = $1',
                ')'||CHR(10),
                'UNION'||CHR(10),
                'SELECT NULL, NULL, NULL, NULL, 0, FALSE'||CHR(10),
                'WHERE NOT EXISTS (SELECT 1 FROM ',
                pTableName,
                ')'||CHR(10),
                ') y'
            );

            IF vIsNumber THEN

                BEGIN

                    EXECUTE vSQL INTO vTextResult USING vId;

                EXCEPTION
                    WHEN OTHERS THEN
                        
                        EXECUTE vSQL INTO vTextResult USING vvId;

                END;

            ELSE

                EXECUTE vSQL INTO vTextResult USING vvId;

            END IF;

            vResult := JSONB_BUILD_OBJECT
            (
                'result',
                CASE
                    WHEN vTextResult ~ '^\''' THEN
                        SUBSTR(vTextResult, 2, LENGTH(vTextResult) - 2)
                    ELSE
                        vTextResult
                END
            );

        WHEN vMethodName = 'GET' THEN

            IF NOT vIsNumber THEN
        
                vvId := REGEXP_REPLACE(pParams ->> 0, E'^\'(.*)\'', '\1');

            ELSE

                vId := (pParams ->> 0)::BIGINT;

            END IF;

            vSQL := CONCAT
            (
                'SELECT record_body FROM ',
                pTableName,
                ' WHERE id = $1'
            );

            IF vIsNumber THEN
            
                EXECUTE vSQL INTO STRICT vJsonRec USING vId;

            ELSE

                EXECUTE vSQL INTO STRICT vJsonRec USING vvId;

            END IF;

            IF COALESCE(JSONB_ARRAY_LENGTH(pParams), 0) = 2 THEN

                IF (vJsonRec -> CASE WHEN (pParams ->> 1) = '' THEN 'column_value' ELSE (pParams ->> 1) END) IS NULL THEN

                    RAISE USING MESSAGE := CONCAT('PLS-00302: component ''', UPPER(pParams ->> 1), ''' must be declared');  

                END IF;

                vJsonRec := JSONB_BUILD_OBJECT
                (
                    pParams ->> 1,
                    vJsonRec -> CASE WHEN (pParams ->> 1) = '' THEN 'column_value' ELSE (pParams ->> 1) END
                );

            END IF;

            IF vJsonRec IS NOT NULL THEN

                vResult := JSONB_SET(vResult, '{result}', vJsonRec, FALSE);

            END IF;

        ELSE

            IF NOT vIsNumber THEN 

                vvId := REGEXP_REPLACE(pParams ->> 0, E'^\'(.*)\'', '\1');

            ELSE

                vId := (pParams ->> 0)::BIGINT;

            END IF;
            
            IF pCalc THEN

                SELECT aws_oracle_ext.array$get_array_field_names
                (
                    p_array_name     => arr.array_name,
                    p_procedure_name => arr.procedure_name
                )
                INTO vColumnslist
                FROM aws_oracle_ext$arrays arr
                WHERE (pArrayid IS NULL OR (pArrayid IS NOT NULL AND arr.id = pArrayid))
                AND arr.storage_table_name = pTableName;

                IF JSONB_ARRAY_LENGTH(vColumnslist) = 1 
                    AND (vColumnslist ->> 0) = '' THEN
                
                    vColumnslist := '["column_value"]'::JSONB;

                END IF;

                SELECT JSONB_OBJECT_AGG(value, NULL)
                INTO STRICT vJsonRecEmpty
                FROM JSONB_ARRAY_ELEMENTS_TEXT(vColumnslist);

            END IF;

            vSQL := CONCAT
            (
                'SELECT record_body FROM ',
                pTableName,
                ' WHERE id = $1'
            );

            BEGIN
            
                IF vIsNumber THEN

                    EXECUTE vSQL INTO STRICT vJsonRec USING vId;

                ELSE

                    EXECUTE vSQL INTO STRICT vJsonRec USING vvId;

                END IF;

                IF pCalc THEN
                
                    IF NOT vJsonRecEmpty ?& ARRAY
                    (
                        SELECT
                            CASE
                                WHEN val ='' THEN
                                    'column_value'
                                ELSE val
                            END
                        FROM JSONB_OBJECT_KEYS(pParams -> 1) AS val
                    ) THEN

                        vOk1 := FALSE;

                    END IF;

                    IF NOT vOk1 THEN

                        IF vJsonRecEmpty ?& ARRAY
                        (
                            SELECT JSONB_OBJECT_KEYS(pParams -> 1 -> '')
                        ) THEN

                            vOk2 := TRUE;

                        END IF;

                        IF NOT vOk2 THEN

                            RAISE USING MESSAGE := 'PLS-00302: component must be declared';

                        END IF;

                    END IF;

                END IF;

                vJsonRec := vJsonRec ||
                    CASE
                        WHEN vOk2 THEN
                            (pParams -> 1) -> ''
                        WHEN pCalc AND (pParams -> 1) ? '' THEN
                            JSONB_BUILD_OBJECT('column_value', (pParams -> 1) -> '')
                        ELSE  (pParams -> 1)
                    END;

                vSql := CONCAT
                (
                    'UPDATE ',
                    pTableName,
                    ' SET record_body = $1 WHERE id = $2'
                );

                IF vIsNumber THEN
                        
                    EXECUTE vSQL USING vJsonRec, vId;

                ELSE

                    EXECUTE vSQL USING vJsonRec, vvId;

                END IF;

            EXCEPTION
                WHEN NO_DATA_FOUND THEN

                IF pCalc THEN

                    IF NOT vJsonRecEmpty ?& ARRAY
                    (
                        SELECT JSONB_OBJECT_KEYS
                        (
                            CASE
                                WHEN (pParams -> 1) ? '' THEN
                                    JSONB_BUILD_OBJECT('column_value', (pParams -> 1) -> '')
                                ELSE  (pParams -> 1)
                            END
                        )
                    ) THEN

                        vOk1 := FALSE;

                    END IF;

                    IF NOT vOk1 THEN

                        IF vJsonRecEmpty ?& ARRAY
                        (
                            SELECT JSONB_OBJECT_KEYS
                            (
                                pParams -> 1 -> ''
                            )
                        ) THEN

                            vOk2 := TRUE;

                        END IF;

                        IF NOT vOk2 THEN

                            RAISE USING MESSAGE := 'PLS-00302: component must be declared';

                        END IF;

                    END IF;

                END IF;
                
                IF pCalc THEN

                    vJsonRec := vJsonRecEmpty || 
                    CASE
                        WHEN vOk2 THEN
                            (pParams -> 1) -> ''
                        WHEN (pParams -> 1) ? '' THEN
                            JSONB_BUILD_OBJECT
                            (
                                'column_value',
                                (pParams -> 1) -> ''
                            )
                        ELSE  (pParams->1)
                    END;

                ELSE

                    vJsonRec := pParams -> 1;

                END IF;

                vSQL := CONCAT
                (
                    'INSERT INTO ',
                    pTableName,
                    '(id, record_body) VALUES ($1, $2)'
                );

                IF vIsNumber THEN
                
                    EXECUTE vSQL USING vId, vJsonRec;

                ELSE

                    EXECUTE vSQL USING vvId, vJsonRec;

                END IF;
                    
            END;

    END CASE;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="ee7169e4-37ca-4225-841a-9faa2c6fa406" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="32f8600d-3594-4181-a722-8be79caae61a" name="bulk$create_storage_table" subcategories-loading="none" object-loading="extended" context="bulk$create_storage_table" is-trigger-function="0" unique-function-name="bulk$create_storage_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,text" is-returning-set="f" ret-datatype="void" function-arguments="pstoragetablename character varying, pindexby text DEFAULT 'BIGINT'::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365027" volatility="VOLATILE" is-window="f" function-identity-arguments="pstoragetablename character varying, pindexby text" overload-function-count="1" proc-language="plpgsql" function-signature="bulk$create_storage_table(pstoragetablename character varying, pindexby text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vSql TEXT;
BEGIN

    IF pIndexBy = 'BIGINT' THEN
    
        vSQL := CONCAT
        (
            'DROP TABLE IF EXISTS ',
            pStorageTableName,
            ';',
            'DROP SEQUENCE IF EXISTS aws_oracle_ext$sq_',
            pStorageTableName,
            ' CASCADE;',
            CHR(10),
            'CREATE TEMPORARY SEQUENCE aws_oracle_ext$sq_',
            pStorageTableName,
            ' START WITH 1 INCREMENT BY 1 CACHE 1000;',
            CHR(10),
            'CREATE TEMPORARY TABLE ',
            pStorageTableName,
            CHR(10),
            '(id BIGINT NOT NULL DEFAULT NEXTVAL(''aws_oracle_ext$sq_',
            pStorageTableName,
            '''), record_body JSONB) ON COMMIT PRESERVE ROWS;',
            CHR(10),
            'ALTER TABLE ',
            pStorageTableName,
            ' ADD CONSTRAINT pk_',
            pStorageTableName,
            ' PRIMARY KEY(id);'
        );

    ELSE

        vSQL := CONCAT
        (
            'DROP TABLE IF EXISTS ',
            pStorageTableName,
            ';',
            CHR(10),
            'CREATE TEMPORARY TABLE ',
            pStorageTableName,
            CHR(10),
            '(id ',
            pIndexBy,
            'NOT NULL, record_body JSONB) ON COMMIT PRESERVE ROWS;',
            CHR(10),
            'ALTER TABLE ',
            pStorageTableName,
            ' ADD CONSTRAINT pk_',
            pStorageTableName,
            ' PRIMARY KEY(id);'
        );

    END IF;

    EXECUTE vSql;

END;
]]></complex-attribute>
                        <category _I_D="f22121b8-720e-4115-b695-2dcf4defed6b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5e6fe049-4632-44f1-824c-88193e7cc67b" name="bulk$fetch_cursor" subcategories-loading="none" object-loading="extended" context="bulk$fetch_cursor" is-trigger-function="0" unique-function-name="bulk$fetch_cursor" is-aggregate="f" language-name="plpgsql" arguments-datatypes="refcursor,anyelement,double precision" is-returning-set="t" ret-datatype="anyelement" function-arguments="pcur refcursor, INOUT precordtype anyelement, plimit double precision DEFAULT '-1'::integer" schema-id="364663" function-type="RET_DATASET" count-arguments="3" function-id="365942" volatility="VOLATILE" is-window="f" function-identity-arguments="pcur refcursor, INOUT precordtype anyelement, plimit double precision" overload-function-count="1" proc-language="plpgsql" function-signature="bulk$fetch_cursor(pcur refcursor, INOUT precordtype anyelement, plimit double precision)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    LOOP
      FETCH $1 INTO $2; 
      IF (NOT FOUND) or (pLimit=0) THEN
          EXIT;
      END IF;

      RETURN NEXT;
      pLimit := pLimit-1;      
    END LOOP;
  RETURN;
END;
]]></complex-attribute>
                        <category _I_D="707ba790-2178-4023-81e3-ae51b1bfebc2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="67497a19-91f9-4df1-a68f-5bcd96ddbd9b" name="bulk$getvaluesforindex" subcategories-loading="none" object-loading="extended" context="bulk$getvaluesforindex" is-trigger-function="0" unique-function-name="bulk$getvaluesforindex" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="_int8" function-arguments="parrayname character varying, pprocedurename character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365028" volatility="VOLATILE" is-window="f" function-identity-arguments="parrayname character varying, pprocedurename character varying" overload-function-count="1" proc-language="plpgsql" function-signature="bulk$getvaluesforindex(parrayname character varying, pprocedurename character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vret BIGINT[];
BEGIN

    IF pArrayName = '' OR pProcedureName = '' THEN

        RAISE USING MESSAGE := 'PLS-00667: Element type of associative array should be pls_integer or binary_integer';

    END IF;

        CASE
            WHEN NOT EXISTS 
            (
                SELECT 1
                FROM aws_oracle_ext$arrays a
                WHERE a.array_name = pArrayName
                AND a.procedure_name = pProcedureName
            ) THEN

                RAISE USING MESSAGE := 'PLS-00667: Element type of associative array should be pls_integer or binary_integer';

            WHEN EXISTS
            (
                SELECT 1
                FROM aws_oracle_ext$arrays a
                JOIN aws_oracle_ext$array_fields af ON af.array_id = a.id
                WHERE a.array_name = pArrayName
                AND a.procedure_name = pProcedureName
                AND UPPER(af.Field_Type) <> 'INTEGER'
            ) THEN

                RAISE USING MESSAGE := 'PLS-00667: Element type of associative array should be pls_integer or binary_integer';

            WHEN
            (
                SELECT COUNT(DISTINCT af.Field_Name)
                FROM aws_oracle_ext$arrays a
                JOIN aws_oracle_ext$array_fields af ON af.array_id = a.id
                JOIN aws_oracle_ext$array_field_values afv ON afv.array_field_id = af.id
                WHERE a.array_name = pArrayName
                AND a.procedure_name = pProcedureName
            ) > 1 THEN

                RAISE USING MESSAGE := 'PLS-00667: Element type of associative array should be pls_integer or binary_integer';

            ELSE

                NULL;

        END CASE;
            

        vret := ARRAY
        (
            SELECT afv.field_value::BIGINT
            FROM aws_oracle_ext$arrays a
            JOIN aws_oracle_ext$array_fields af ON af.array_id = a.id
            JOIN aws_oracle_ext$array_field_values afv ON afv.array_field_id = af.id
            WHERE a.array_name = pArrayName
            AND a.procedure_name = pProcedureName
            ORDER BY 1
        );

        RETURN vret;

END;
]]></complex-attribute>
                        <category _I_D="67938e22-1b19-4dd1-8fd0-d68c06b9bd46" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3623de25-1ee2-438f-ad5d-fa96168232ef" name="bulk_exceptions$create_array" subcategories-loading="none" object-loading="extended" context="bulk_exceptions$create_array" is-trigger-function="0" unique-function-name="bulk_exceptions$create_array" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365948" volatility="VOLATILE" is-window="f" function-identity-arguments="p_procedure_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="bulk_exceptions$create_array(p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  aws_oracle_ext$array_id$temporary BIGINT;
BEGIN
  aws_oracle_ext$array_id$temporary := aws_oracle_ext.array$create_array(p_array_name => 'bulk_exceptions', p_procedure_name => p_procedure_name);
  PERFORM aws_oracle_ext.array$add_fields_to_array(p_array_id => aws_oracle_ext$array_id$temporary, p_fields => '[{"error_index":"BIGINT"},{"error_code":"INTEGER"},{"sqlerrm":"TEXT"}]');
  PERFORM aws_oracle_ext.array$create_storage_table(p_array_name => 'bulk_exceptions', p_procedure_name => p_procedure_name, p_cast_type_name => 'aws_oracle_ext.sql$bulk_exceptions', pWithData => FALSE);
END;
]]></complex-attribute>
                        <category _I_D="923c8b10-aaff-4647-87fc-9132318c4482" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="84f591b9-e4e6-4f8b-9100-7f7d20749c57" name="chartorowid" subcategories-loading="none" object-loading="extended" context="chartorowid" is-trigger-function="0" unique-function-name="chartorowid" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="rowid" function-arguments="pchar text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365797" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pchar text" overload-function-count="1" proc-language="sql" function-signature="chartorowid(pchar text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT pchar::aws_oracle_ext.rowid;
]]></complex-attribute>
                        <category _I_D="6dc0240d-7009-4d43-b89b-640a6ce408e6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d695eda0-e608-4b01-acc1-20c44cc5ef71" name="check_identifier_case" subcategories-loading="none" object-loading="extended" context="check_identifier_case" is-trigger-function="0" unique-function-name="check_identifier_case" is-aggregate="f" language-name="plv8" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="pin text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="364827" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pin text" overload-function-count="1" proc-language="plv8" function-signature="check_identifier_case(pin text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const res = pin.substr(0,1) == '"' ? pin : pin.toLowerCase();
return res;

]]></complex-attribute>
                        <category _I_D="43b468e5-85d8-46a1-9e2d-80618f1d5c37" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0111262c-7f47-47a3-97e7-2eee33bd8656" name="collection_bind" subcategories-loading="none" object-loading="extended" context="collection_bind" is-trigger-function="0" unique-function-name="collection_bind" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,json" is-returning-set="f" ret-datatype="void" function-arguments="p_routine_name character varying, p_collection_path character varying, p_dataset json" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="366062" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name character varying, p_collection_path character varying, p_dataset json" overload-function-count="1" proc-language="plv8" function-signature="collection_bind(p_routine_name character varying, p_collection_path character varying, p_dataset json)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
const doCreate = plv8.find_function("aws_oracle_ext.array$create_array");
doCreate(vn, p_routine_name, null, 'BIGINT');

for (let i = 0; i < p_dataset.length; i++) {
  const idx = Number(p_dataset[i].k);
  aws_oracle_ext[sn][pn][vn].putValue(idx, p_dataset[i].v);
}

]]></complex-attribute>
                        <category _I_D="3f32b74c-8780-439b-8f34-b4df97638b83" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="86289e6f-9917-4678-b6bb-ca68b15ee70e" name="collection_bind_out" subcategories-loading="none" object-loading="extended" context="collection_bind_out" is-trigger-function="0" unique-function-name="collection_bind_out" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_routine_name character varying, p_collection_path character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="366063" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name character varying, p_collection_path character varying" overload-function-count="1" proc-language="plv8" function-signature="collection_bind_out(p_routine_name character varying, p_collection_path character varying)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
const sn = pathParts[0].text;
const pn = pathParts[2].text;

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;

let create = false;

if (typeof(aws_oracle_ext) === 'undefined') create = true;
if (!create) {
  if (!aws_oracle_ext.hasOwnProperty(sn)) create = true;
}
if (!create) {
  if (!aws_oracle_ext[sn].hasOwnProperty(pn)) create = true;
}
if (!create) {
  if (!aws_oracle_ext[sn][pn].hasOwnProperty(vn)) create = true;
}

if (create) {
  const doCreate = plv8.find_function("aws_oracle_ext.array$create_array");
  doCreate(vn, p_routine_name, null, 'BIGINT');

}

]]></complex-attribute>
                        <category _I_D="af239abb-5298-46aa-badf-dab95ceebbc2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="29d35530-e1e2-4cb6-9ca6-48b080934f44" name="collection_count" subcategories-loading="none" object-loading="extended" context="collection_count" is-trigger-function="0" unique-function-name="collection_count" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="int8" function-arguments="p_routine_name text, p_collection_path text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="366048" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text" overload-function-count="1" proc-language="plv8" function-signature="collection_count(p_routine_name text, p_collection_path text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
const sn = pathParts[0].text;
const pn = pathParts[2].text;

const collectioncheck = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
collectioncheck(sn, pn, vn);

const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;

let cnt = 0;
if (collectionType === 'ASSOC') {
  cnt = aws_oracle_ext[sn][pn][vn].count();
} else {
  aws_oracle_ext[sn][pn][vn].walkAsc(null, null, function(key, value){
    if (value !== emptyCollectionElement) cnt++;
  });
}

return cnt;

]]></complex-attribute>
                        <category _I_D="4c514522-176e-4044-a5c2-59ee2c2f49f9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="765c14b3-efad-4ccc-b7ba-00480d06a377" name="collection_element_delete" subcategories-loading="none" object-loading="extended" context="collection_element_delete" is-trigger-function="0" unique-function-name="collection_element_delete" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="p_routine_name text, p_collection_path text, p_start text DEFAULT NULL::text, p_end text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="366049" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text, p_start text, p_end text" overload-function-count="1" proc-language="plv8" function-signature="collection_element_delete(p_routine_name text, p_collection_path text, p_start text, p_end text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);
const indexBy = aws_oracle_ext[sn][pn][vn].indexBy;
const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;
const rowType = aws_oracle_ext[sn][pn][vn].rowType;

let numArgs = 0;
let start;
let end;
if (p_start !== null && p_end === null) {
  numArgs = 1;
  start = indexBy === 'BIGINT' ? Number(p_start) : p_start;
  if (indexBy === 'BIGINT' && isNaN(start)) {
    plv8.elog(ERROR, 'Incorrect value for index');
  }
}
if (p_start !== null && p_end !== null) {
  numArgs = 2;
  start = indexBy === 'BIGINT' ? Number(p_start) : p_start;
  if (indexBy === 'BIGINT' && isNaN(start)) {
    plv8.elog(ERROR, 'Incorrect value for index');
  }
  end = indexBy === 'BIGINT' ? Number(p_end) : p_end;
  if (indexBy === 'BIGINT' && isNaN(end)) {
    plv8.elog(ERROR, 'Incorrect value for index');
  }
}

switch(numArgs) {
  case 1:
    if (typeof(aws_oracle_ext[sn][pn][vn].getValue(start)) === 'undefined') return;
    
    if (collectionType !== 'ASSOC') {
      aws_oracle_ext[sn][pn][vn].putValue(start, emptyCollectionElement);
    } else {
      aws_oracle_ext[sn][pn][vn].del(start);
    }
    break;
  case 2:
    if (indexBy === 'STRING') {
      if(TreeUtility.stringCompare(end, start) < 0 ) return;
    } else {
      if (end < start) return;
    }
    if (typeof(aws_oracle_ext[sn][pn][vn].getValue(start)) === 'undefined') return;
    if (typeof(aws_oracle_ext[sn][pn][vn].getValue(end)) === 'undefined') return;
    
    let indices = [];
    aws_oracle_ext[sn][pn][vn].walkAsc(start, end, function(key, value){
      indices.push(key);
    });

    for (let i = 0; i < indices.length; i++) {
      if (collectionType !== 'ASSOC') {
        aws_oracle_ext[sn][pn][vn].putValue(indices[i], emptyCollectionElement);
      } else {
        aws_oracle_ext[sn][pn][vn].del(indices[i]);
      }
    }
    
    break;
  default:
      const tree = indexBy == 'BIGINT' ? new Tree(52)  : new Tree(52, TreeUtility.stringCompare);
      tree.indexBy = indexBy;
      tree.collectionType = collectionType;
      tree.rowType = rowType;
      aws_oracle_ext[sn][pn][vn] = tree;
    break;
}

]]></complex-attribute>
                        <category _I_D="3350bb63-abd0-4de1-ad38-585d3dfd85a5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f299304f-6677-43f4-9edb-ee2174a1e0a7" name="collection_element_exists" subcategories-loading="none" object-loading="extended" context="collection_element_exists" is-trigger-function="0" unique-function-name="collection_element_exists" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="bool" function-arguments="p_routine_name text, p_collection_path text, p_idx text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="366051" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text, p_idx text" overload-function-count="1" proc-language="plv8" function-signature="collection_element_exists(p_routine_name text, p_collection_path text, p_idx text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);
const indexBy = aws_oracle_ext[sn][pn][vn].indexBy;

const idx = indexBy === 'BIGINT' ? Number(p_idx) : p_idx;

if (indexBy === 'BIGINT' && isNaN(idx)) {
  plv8.elog(ERROR, 'Incorrect value for index');
}

const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;

const tst = aws_oracle_ext[sn][pn][vn].getValue(idx);

let result = false;
  if (typeof(tst) !== 'undefined') {
    if (collectionType === 'ASSOC') {
      result = true;
    } else {
      result = (tst !== emptyCollectionElement);
    }
  }

return result;

]]></complex-attribute>
                        <category _I_D="ec91750c-dcaf-4c36-a20b-441a7bb6accd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0af8893d-b460-4ad9-92a8-f7f4fc92e49b" name="collection_element_get" subcategories-loading="none" object-loading="extended" context="collection_element_get" is-trigger-function="0" unique-function-name="collection_element_get" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="jsonb" function-arguments="p_routine_name text, p_collection_path text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="366052" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text" overload-function-count="1" proc-language="plv8" function-signature="collection_element_get(p_routine_name text, p_collection_path text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength < 2) {
  plv8.elog(ERROR, 'Incorrect collection path');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}
if (pathParts[1].group !== 'idx') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);
const indexBy = aws_oracle_ext[sn][pn][vn].indexBy;
const aidx = [...pathParts[1].text];
aidx.shift();
aidx.pop();
if (indexBy === 'STRING') {
  aidx.shift();
  aidx.pop();
}
const stridx = aidx.join('');
const idx = indexBy === 'BIGINT' ? Number(stridx) : stridx;
if (indexBy === 'BIGINT' && isNaN(idx)) {
  plv8.elog(ERROR, 'Incorrect value for index');
}
const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;
let result = aws_oracle_ext[sn][pn][vn].getValue(idx);
if (typeof(result) === 'undefined') {
  if (collectionType !== 'ASSOC' /*&& result !== emptyCollectionElement*/) {
    plv8.elog(ERROR, 'ORA-06533: Subscript beyond count');
  } else {
    return null;
  }
}
if (collectionType !== 'ASSOC' && result === emptyCollectionElement) return null;
if (result instanceof Date) {
  return {column_value: result};
}
if (result === null) {
  return {column_value: result};
}
if (typeof(result) !=='object' ) {
  return {column_value: result};
}
return result;

]]></complex-attribute>
                        <category _I_D="de8aaa76-f14e-4ab6-a977-99478d96165d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0f087b26-6a39-4434-a283-ccf6fd2e2f27" name="collection_element_set" subcategories-loading="none" object-loading="extended" context="collection_element_set" is-trigger-function="0" unique-function-name="collection_element_set" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,anyelement" is-returning-set="f" ret-datatype="void" function-arguments="p_routine_name text, p_collection_path text, p_val anyelement" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="366053" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text, p_val anyelement" overload-function-count="1" proc-language="plv8" function-signature="collection_element_set(p_routine_name text, p_collection_path text, p_val anyelement)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength < 2) {
  plv8.elog(ERROR, 'Incorrect collection path');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}
if (pathParts[1].group !== 'idx') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);
const indexBy = aws_oracle_ext[sn][pn][vn].indexBy;
const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;
const aidx = [...pathParts[1].text];
aidx.shift();
aidx.pop();
if (indexBy === 'STRING') {
  aidx.shift();
  aidx.pop();
}
const stridx = aidx.join('');

const idx = indexBy === 'BIGINT' ? Number(stridx) : stridx;

if (indexBy === 'BIGINT' && isNaN(idx)) {
  plv8.elog(ERROR, 'Incorrect value for index');
}

if (pathlength == 2) {
  if (collectionType !== 'ASSOC') {
    if (typeof(aws_oracle_ext[sn][pn][vn].getValue(idx)) === 'undefined') {
      plv8.elog(ERROR, 'ORA-06533: Subscript beyond count');
    }
  }
  aws_oracle_ext[sn][pn][vn].putValue(idx, p_val);
  return;
}

const valuePath = pathParts.slice(2);

/* Strange */
for (let i = 0; i < valuePath.lengh; i++) {
  if ((i % 2) == 0) {
    if (valuePath[i].grp === 'dot') {
      plv8.elog(ERROR, 'Incorrect value path');
    }
  } else {
    if (valuePath[i].grp === 'q' || valuePath[i].grp === 'uq') {
      plv8.elog(ERROR, 'Incorrect value path');
    }
  }
}
    
let lense = aws_oracle_ext[sn][pn][vn].getValue(idx);

/* Strange */
if (lense instanceof Tree) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}

if (typeof(lense) === 'undefined') lense = {};

TreeUtility.setBypath(lense, valuePath,  p_val);

aws_oracle_ext[sn][pn][vn].putValue(idx, lense);

]]></complex-attribute>
                        <category _I_D="386d9af8-d633-4fe3-9059-95670b2cd749" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6dbb66e1-a2f3-4001-8bb7-5fe5954ee46e" name="collection_element_trim" subcategories-loading="none" object-loading="extended" context="collection_element_trim" is-trigger-function="0" unique-function-name="collection_element_trim" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,bigint" is-returning-set="f" ret-datatype="void" function-arguments="p_routine_name text, p_collection_path text, p_n bigint" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="366050" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text, p_n bigint" overload-function-count="1" proc-language="plv8" function-signature="collection_element_trim(p_routine_name text, p_collection_path text, p_n bigint)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

const collectioncheck = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
collectioncheck(sn, pn, vn);

const cnt = aws_oracle_ext[sn][pn][vn].count();

if (cnt < p_n) plv8.elog(ERROR, 'ORA-06533: Subscript beyond count');

let indices = [];
let n = p_n;
aws_oracle_ext[sn][pn][vn].walkDesc(null, null, function(key, value){
  if (n == 0) return true;
  indices.push(key);
  n--;
});

for (let i = 0; i < indices.length; i++) {
  aws_oracle_ext[sn][pn][vn].del(indices[i]);
}

]]></complex-attribute>
                        <category _I_D="1eddd4fe-9889-4652-8dc8-2ff68051f144" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1b2c75d0-4d87-4651-bab7-cc747b76d2e8" name="collection_first" subcategories-loading="none" object-loading="extended" context="collection_first" is-trigger-function="0" unique-function-name="collection_first" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_routine_name text, p_collection_path text, p_tp anyelement DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="366054" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text, p_tp anyelement" overload-function-count="1" proc-language="plv8" function-signature="collection_first(p_routine_name text, p_collection_path text, p_tp anyelement)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);

const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;

let result = null;
aws_oracle_ext[sn][pn][vn].walkAsc(null, null, function(key, value){
  if (collectionType === 'ASSOC') {
    result = key;
    return true;
  } else {
    if (value !== emptyCollectionElement) {
      result = key;
      return true;
    }
  }
});

return result;

]]></complex-attribute>
                        <category _I_D="f945c524-b68a-453d-a8d9-d383183052d4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f4aad44c-5a93-4e3a-8489-c98d4570306f" name="collection_last" subcategories-loading="none" object-loading="extended" context="collection_last" is-trigger-function="0" unique-function-name="collection_last" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_routine_name text, p_collection_path text, p_tp anyelement DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="366055" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text, p_tp anyelement" overload-function-count="1" proc-language="plv8" function-signature="collection_last(p_routine_name text, p_collection_path text, p_tp anyelement)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);

const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;

let result = null;
if (collectionType === 'ASSOC') {
  if (aws_oracle_ext[sn][pn][vn].count() == 0) return null;
  aws_oracle_ext[sn][pn][vn].walkDesc(null,null, function(key, value){
    result = key;
    return true;
  });
} else {
  let cnt = 0;
  aws_oracle_ext[sn][pn][vn].walkAsc(null, null, function(key, value){
    if (value !== emptyCollectionElement) {
      cnt++;
      return true;
    }
  });
  if (cnt == 0) return null;
  aws_oracle_ext[sn][pn][vn].walkDesc(null,null, function(key, value){
    if (value !== emptyCollectionElement) {
      result = key;
      return true;
    }
  });
}

return result;

]]></complex-attribute>
                        <category _I_D="95299dbc-7341-47b4-bfc4-57d7c6ae271f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8e39aaad-927f-47da-9818-7bc6510c9c19" name="collection_next" subcategories-loading="none" object-loading="extended" context="collection_next" is-trigger-function="0" unique-function-name="collection_next" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,text,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_routine_name text, p_collection_path text, p_idx text, p_tp anyelement DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="366056" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text, p_idx text, p_tp anyelement" overload-function-count="1" proc-language="plv8" function-signature="collection_next(p_routine_name text, p_collection_path text, p_idx text, p_tp anyelement)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);
const indexBy = aws_oracle_ext[sn][pn][vn].indexBy;
const idx = indexBy === 'BIGINT' ? Number(p_idx) : p_idx;

if (indexBy === 'BIGINT' && isNaN(idx)) {
  plv8.elog(ERROR, 'Incorrect value for index');
}

const fCount = plv8.find_function("aws_oracle_ext.collection_count");
const cnt = fCount(p_routine_name, p_collection_path);
if (cnt == 0) return null;

const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;

let result = null;
const fFirst = plv8.find_function("aws_oracle_ext.collection_first");
const first = fFirst(p_routine_name, p_collection_path);
if (idx < first) return first;
const fLast = plv8.find_function("aws_oracle_ext.collection_last");
last = fLast(p_routine_name, p_collection_path);
if (idx >= last) return null;
aws_oracle_ext[sn][pn][vn].walkAsc(first, last, function(key,value) {
  if (key > idx) {
    if ( collectionType === 'ASSOC' || (collectionType !== 'ASSOC' && value !== emptyCollectionElement))
    {
      result = key;
      return true;
    }
  }
  });
return result;

]]></complex-attribute>
                        <category _I_D="3aa2c374-72f5-4971-8be8-a447982a4f0f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="77c3e131-c4ca-4d72-b4ec-2081d4ec0c17" name="collection_out_get" subcategories-loading="none" object-loading="extended" context="collection_out_get" is-trigger-function="0" unique-function-name="collection_out_get" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="json" function-arguments="p_routine_name character varying, p_collection_path character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="366064" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name character varying, p_collection_path character varying" overload-function-count="1" proc-language="plv8" function-signature="collection_out_get(p_routine_name character varying, p_collection_path character varying)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");
chk(sn, pn, vn);

let res = [];

aws_oracle_ext[sn][pn][vn].walkAsc(null, null, function(key,value) {
  res.push({k: key, v: value});
});

return res;

]]></complex-attribute>
                        <category _I_D="92a7ed51-9368-4ea1-b48e-a4f51991ec81" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f64484a3-18e7-459e-990b-cdb3cb23ae18" name="collection_path_parse" subcategories-loading="none" object-loading="extended" context="collection_path_parse" is-trigger-function="0" unique-function-name="collection_path_parse" is-aggregate="f" language-name="plv8" arguments-datatypes="internal" is-returning-set="f" ret-datatype="void" function-arguments="p internal" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="366046" volatility="VOLATILE" is-window="f" function-identity-arguments="p internal" overload-function-count="1" proc-language="plv8" function-signature="collection_path_parse(p internal)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const Pathparser = require('Pathparser');
const parser = new Pathparser(p);
return parser.getTokens();

]]></complex-attribute>
                        <category _I_D="cfa0f805-216d-44c6-a64e-41468ab08e20" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4eec998b-5a8e-4216-9788-65965865d440" name="collection_prior" subcategories-loading="none" object-loading="extended" context="collection_prior" is-trigger-function="0" unique-function-name="collection_prior" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,text,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_routine_name text, p_collection_path text, p_idx text, p_tp anyelement DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="366057" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text, p_collection_path text, p_idx text, p_tp anyelement" overload-function-count="1" proc-language="plv8" function-signature="collection_prior(p_routine_name text, p_collection_path text, p_idx text, p_tp anyelement)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_routine_name);
    
if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);
const indexBy = aws_oracle_ext[sn][pn][vn].indexBy;
const idx = indexBy === 'BIGINT' ? Number(p_idx) : p_idx;

if (indexBy === 'BIGINT' && isNaN(idx)) {
  plv8.elog(ERROR, 'Incorrect value for index');
}

const fCount = plv8.find_function("aws_oracle_ext.collection_count");
const cnt = fCount(p_routine_name, p_collection_path);
if (cnt == 0) return null;

const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;

let result = null;
const fFirst = plv8.find_function("aws_oracle_ext.collection_first");
const first = fFirst(p_routine_name, p_collection_path);
if (idx <= first) return null;
const fLast = plv8.find_function("aws_oracle_ext.collection_last");
last = fLast(p_routine_name, p_collection_path);
if (idx > last) return last;
aws_oracle_ext[sn][pn][vn].walkDesc(first, last, function(key,value) {
  if (key < idx) {
    if ( collectionType === 'ASSOC' || (collectionType !== 'ASSOC' && value !== emptyCollectionElement))
    {
      result = key;
      return true;
    }
  }
});
return result;

]]></complex-attribute>
                        <category _I_D="c6e491d2-f3ee-4803-a0aa-5f534ba09f4b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="05a87120-c4a3-4218-83bf-3a2b243d0583" name="collection_to_table" subcategories-loading="none" object-loading="extended" context="collection_to_table" is-trigger-function="0" unique-function-name="collection_to_table" is-aggregate="f" language-name="plv8" arguments-datatypes="jsonb,bigint[]" is-returning-set="t" ret-datatype="jsonb" function-arguments="p_val jsonb, pindexes bigint[] DEFAULT NULL::bigint[]" schema-id="364663" function-type="RET_DATASET" count-arguments="2" function-id="366059" volatility="VOLATILE" is-window="f" function-identity-arguments="p_val jsonb, pindexes bigint[]" overload-function-count="1" proc-language="plv8" function-signature="collection_to_table(p_val jsonb, pindexes bigint[])">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
const routine_name = p_val['Procedure Name'];
const collection_path = p_val['Array Name'];
let pathParts = parser(routine_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(collection_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);
const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;

let resType = -1;
if (pindexes == null) {
  aws_oracle_ext[sn][pn][vn].walkAsc(null, null, function(key, value) {
    if (collectionType === 'ASSOC' || (collectionType !=='ASSOC' && value !== emptyCollectionElement)) {
      if (resType === -1) {
        resType = typeof(value) === 'object' ? 1 : 0;
      }
      if (resType === 0) {
        plv8.return_next({"column_value": value});
      } else {
        plv8.return_next(value);
      }
    }
  });
} else {

  const sortedIndexes = pindexes.sort(TreeUtility.numberCompare);

  for (let i = 0; i < sortedIndexes.length; i++) {
    const value = aws_oracle_ext[sn][pn][vn].getValue(sortedIndexes[i]);
    if (typeof(value) === 'undefined') continue;
    if (collectionType !=='ASSOC' && value === emptyCollectionElement) continue;
    if (resType === -1) {
      resType = typeof(value) === 'object' ? 1 : 0;
    }
    if (resType === 0) {
      plv8.return_next({"column_value": value});
    } else {
      plv8.return_next(value);
    }
  }
}

]]></complex-attribute>
                        <category _I_D="faf3fcd8-1621-427c-b1a0-1a870871e4d8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a41b25bd-ba32-4337-bc13-8c228853c843" name="collectioncheck" subcategories-loading="none" object-loading="extended" context="collectioncheck" is-trigger-function="0" unique-function-name="collectioncheck" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="sn text, pn text, vn text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="366047" volatility="VOLATILE" is-window="f" function-identity-arguments="sn text, pn text, vn text" overload-function-count="1" proc-language="plv8" function-signature="collectioncheck(sn text, pn text, vn text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
if (typeof(aws_oracle_ext) === 'undefined') plv8.elog(ERROR, 'Collection does not exist!');
if (!aws_oracle_ext.hasOwnProperty(sn)) plv8.elog(ERROR, 'Collection does not exist!');
if (!aws_oracle_ext[sn].hasOwnProperty(pn)) plv8.elog(ERROR, 'Collection does not exist!');
if (!aws_oracle_ext[sn][pn].hasOwnProperty(vn)) plv8.elog(ERROR, 'Collection does not exist!');
if (aws_oracle_ext[sn][pn][vn]!== null && !(aws_oracle_ext[sn][pn][vn] instanceof Tree)) plv8.elog(ERROR, 'Variable is not a collection!');

]]></complex-attribute>
                        <category _I_D="ec16d671-0e8a-46c7-87f0-f2c3e83617a6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e1297796-ba6a-409f-a39c-dc196735718b" name="collections_delete_by_routine" subcategories-loading="none" object-loading="extended" context="collections_delete_by_routine" is-trigger-function="0" unique-function-name="collections_delete_by_routine" is-aggregate="f" language-name="plv8" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="p_routine_name text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="366058" volatility="VOLATILE" is-window="f" function-identity-arguments="p_routine_name text" overload-function-count="1" proc-language="plv8" function-signature="collections_delete_by_routine(p_routine_name text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
const pathParts = parser(p_routine_name);
if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

if (typeof(aws_oracle_ext) === 'undefined') plv8.elog(ERROR, 'Collection does not exist!');
if (typeof(aws_oracle_ext[sn]) === 'undefined') plv8.elog(ERROR, 'Collection does not exist!');
if (typeof(aws_oracle_ext[sn][pn]) === 'undefined') plv8.elog(ERROR, 'Collection does not exist!');

for (const key in aws_oracle_ext[sn][pn]) {
  if (aws_oracle_ext[sn][pn][key] instanceof Tree) delete aws_oracle_ext[sn][pn][key];
}

]]></complex-attribute>
                        <category _I_D="2ae8873d-a586-4366-9a57-fa2c4b947018" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="37c0985e-6396-42e0-af83-98e2115b8170" name="context_upsert" subcategories-loading="none" object-loading="extended" context="context_upsert" is-trigger-function="0" unique-function-name="context_upsert" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="c_namespace text, c_type text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365789" volatility="VOLATILE" is-window="f" function-identity-arguments="c_namespace text, c_type text" overload-function-count="1" proc-language="sql" function-signature="context_upsert(c_namespace text, c_type text)">
                        <complex-attribute name="sql"><![CDATA[
	create schema if not exists aws_oracle_context;
	create table if not exists aws_oracle_context.context(
		context_namespace varchar(30) not null, 
		context_type varchar(22) not null,
		constraint pk_context primary key (context_namespace)
	);
	
	INSERT INTO aws_oracle_context.context VALUES 
	(
		aws_oracle_ext.format_identifier_case($1), 
		UPPER($2)
	)
	ON CONFLICT(context_namespace) DO UPDATE
	SET context_type =  UPPER($2);
]]></complex-attribute>
                        <category _I_D="8b0eba4e-f775-433c-9728-eb9f7e58fe61" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="45b26ff3-fca5-4c1f-a236-f8373b5c4da8" name="current_date" subcategories-loading="none" object-loading="extended" context="current_date" is-trigger-function="0" unique-function-name="current_date" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="timestamp" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365029" volatility="STABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="current_date()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT LOCALTIMESTAMP(0);
    
]]></complex-attribute>
                        <category _I_D="07d99db5-4c45-4c5f-b9ab-422cd2405b8d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9603a036-14ef-43b1-af78-70e1705fbb23" name="current_timestamp" subcategories-loading="none" object-loading="extended" context="current_timestamp" is-trigger-function="0" unique-function-name="current_timestamp" is-aggregate="f" language-name="sql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="timestamptz" function-arguments="p_precision integer DEFAULT 6" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365030" volatility="STABLE" is-window="f" function-identity-arguments="p_precision integer" overload-function-count="1" proc-language="sql" function-signature="current_timestamp(p_precision integer)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT 
    CASE
    
        WHEN p_precision = 0 THEN CURRENT_TIMESTAMP(0)
        WHEN p_precision = 1 THEN CURRENT_TIMESTAMP(1)
        WHEN p_precision = 2 THEN CURRENT_TIMESTAMP(3)
        WHEN p_precision = 4 THEN CURRENT_TIMESTAMP(4)
        WHEN p_precision = 5 THEN CURRENT_TIMESTAMP(5)

        ELSE CURRENT_TIMESTAMP

    END;
        
    
]]></complex-attribute>
                        <category _I_D="848b7cc7-b6bf-42bc-ad2e-37cd9ff72a96" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c9688745-f515-46ff-b125-f7b8e3902adb" name="dbms_application_info$read_client_info" subcategories-loading="none" object-loading="extended" context="dbms_application_info$read_client_info" is-trigger-function="0" unique-function-name="dbms_application_info$read_client_info" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="OUT client_info character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365934" volatility="VOLATILE" is-window="f" function-identity-arguments="OUT client_info character varying" overload-function-count="1" proc-language="sql" function-signature="dbms_application_info$read_client_info(OUT client_info character varying)">
                        <complex-attribute name="sql"><![CDATA[
  select aws_oracle_ext.get_extpack_variable(variable_name => 'CLIENT_INFO'); 
]]></complex-attribute>
                        <category _I_D="2fc06582-2911-407f-9c80-02dbb41c7b0d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4fd71ecd-1318-4aef-a695-b9c7ee773348" name="dbms_application_info$read_module" subcategories-loading="none" object-loading="extended" context="dbms_application_info$read_module" is-trigger-function="0" unique-function-name="dbms_application_info$read_module" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="record" function-arguments="OUT module_name character varying, OUT action_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365935" volatility="VOLATILE" is-window="f" function-identity-arguments="OUT module_name character varying, OUT action_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_application_info$read_module(OUT module_name character varying, OUT action_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare l_app_name jsonb;
begin
  execute 'show application_name' into strict l_app_name;	 
  module_name := l_app_name->>'module';
  action_name := l_app_name->>'action';
  exception 
    when invalid_text_representation then 
      begin
        module_name := null;
        action_name := null;	      
      end;  
end;
]]></complex-attribute>
                        <category _I_D="d8a37cbe-0905-4666-a1f5-1dd208bb24d5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="80bed21e-1015-4029-bf99-98a8b22d1f1c" name="dbms_application_info$set_action" subcategories-loading="none" object-loading="extended" context="dbms_application_info$set_action" is-trigger-function="0" unique-function-name="dbms_application_info$set_action" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="void" function-arguments="action_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365937" volatility="VOLATILE" is-window="f" function-identity-arguments="action_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_application_info$set_action(action_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare l_app_name jsonb;
begin
	l_app_name := jsonb_set(aws_oracle_ext.get_application_name(), 
   							'{action}', 
   							coalesce(to_json(action_name::text),'null')::jsonb, 
   							true);
    perform aws_oracle_ext.set_application_name(l_app_name);
end;
]]></complex-attribute>
                        <category _I_D="a5a8ad61-591b-4c03-bb8f-7bcb209a539e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ce5ad120-f735-4094-8ed1-5ef8eb6a4d08" name="dbms_application_info$set_client_info" subcategories-loading="none" object-loading="extended" context="dbms_application_info$set_client_info" is-trigger-function="0" unique-function-name="dbms_application_info$set_client_info" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="void" function-arguments="client_info character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365938" volatility="VOLATILE" is-window="f" function-identity-arguments="client_info character varying" overload-function-count="1" proc-language="sql" function-signature="dbms_application_info$set_client_info(client_info character varying)">
                        <complex-attribute name="sql"><![CDATA[
  select aws_oracle_ext.set_extpack_variable
    (
	  variable_name => 'CLIENT_INFO', 
	  variable_value => client_info
	);  
]]></complex-attribute>
                        <category _I_D="92a67cee-c987-445a-b8cf-064047037937" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="02c03ab9-0a5d-4354-bd24-eda2d2a868df" name="dbms_application_info$set_module" subcategories-loading="none" object-loading="extended" context="dbms_application_info$set_module" is-trigger-function="0" unique-function-name="dbms_application_info$set_module" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="module_name text, action_name text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365939" volatility="VOLATILE" is-window="f" function-identity-arguments="module_name text, action_name text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_application_info$set_module(module_name text, action_name text)">
                        <complex-attribute name="sql"><![CDATA[
declare l_app_name jsonb;
begin
    l_app_name := aws_oracle_ext.get_application_name();

    l_app_name := jsonb_set(l_app_name, 
   							'{module}', 
   							coalesce(to_json(module_name),'null')::jsonb, 
   							true);
    
    l_app_name := jsonb_set(l_app_name, 
   							'{action}', 
   							coalesce(to_json(action_name),'null')::jsonb, 
   							true);
    perform aws_oracle_ext.set_application_name(l_app_name);
end;   
]]></complex-attribute>
                        <category _I_D="fcd04a50-cf9d-40a2-ad2e-966fd5eab8ed" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cc7870a6-4543-4d62-8b29-65de6716c1ee" name="dbms_application_info$set_session_longops" subcategories-loading="none" object-loading="extended" context="dbms_application_info$set_session_longops" is-trigger-function="0" unique-function-name="dbms_application_info$set_session_longops" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,integer,text,integer,integer,integer,integer,text,text" is-returning-set="f" ret-datatype="record" function-arguments="INOUT rindex integer, INOUT slno integer, op_name text DEFAULT NULL::text, target integer DEFAULT 0, context integer DEFAULT 0, sofar integer DEFAULT 0, totalwork integer DEFAULT 0, target_desc text DEFAULT 'unknown target'::text, units text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="9" function-id="365941" volatility="VOLATILE" is-window="f" function-identity-arguments="INOUT rindex integer, INOUT slno integer, op_name text, target integer, context integer, sofar integer, totalwork integer, target_desc text, units text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_application_info$set_session_longops(INOUT rindex integer, INOUT slno integer, op_name text, target integer, context integer, sofar integer, totalwork integer, target_desc text, units text)">
                        <complex-attribute name="sql"><![CDATA[
declare l_app_name jsonb;
begin
    l_app_name := jsonb_set(
    						aws_oracle_ext.get_application_name(), 
   							'{longops}', 
   							jsonb_build_object(
   								'rindex', rindex,
   								'slno', slno,
   								'op_name', op_name,
   								'target', target,
   								'context', context,
   								'sofar', sofar,
   								'totalwork', totalwork,
   								'target_desc', target_desc,
   								'units', units
   							), 
   							true);
    
    -- perform aws_oracle_ext.set_application_name(l_app_name); 
    -- value is TO LONG for application_name (max is 64)
    perform aws_oracle_ext.set_extpack_variable
	  (
	    variable_name => 'SESSION_LONGOPS', 
		variable_value => l_app_name::text
	  );  
end;   
]]></complex-attribute>
                        <category _I_D="af5686c0-802d-46c3-a6fb-54a1506462f9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9827b840-7bdb-4283-83c8-65e8bd6a74db" name="dbms_application_info$set_session_longops_nohint" subcategories-loading="none" object-loading="extended" context="dbms_application_info$set_session_longops_nohint" is-trigger-function="0" unique-function-name="dbms_application_info$set_session_longops_nohint" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365940" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_application_info$set_session_longops_nohint()">
                        <complex-attribute name="sql"><![CDATA[
  -- set_session_longops_nohint constant BINARY_INTEGER := -1;
  select -1
]]></complex-attribute>
                        <category _I_D="c4cb06ff-762e-49de-9c14-8a9544ba20bf" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="06bf540d-f158-4053-8cd1-ba716b965fd5" name="dbms_aq$dequeue" subcategories-loading="none" object-loading="extended" context="dbms_aq$dequeue" is-trigger-function="0" unique-function-name="dbms_aq$dequeue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,json,json,json,bytea" is-returning-set="f" ret-datatype="record" function-arguments="queue_name text, dequeue_options json, OUT message_properties json, OUT payload json, OUT msgid bytea" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365678" volatility="VOLATILE" is-window="f" function-identity-arguments="queue_name text, dequeue_options json, OUT message_properties json, OUT payload json, OUT msgid bytea" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_aq$dequeue(queue_name text, dequeue_options json, OUT message_properties json, OUT payload json, OUT msgid bytea)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lvqueueurl text;
	lvreceipthandle text;
begin
	lvqueueurl := aws_oracle_ext.sqs_lu_inited_queueurl(queue_name);

	select receipthandle, messageid, body, null::json
	  into lvreceipthandle, msgid, payload, message_properties
	  from aws_oracle_ext.sqs_aq_get_messages_body(lvqueueurl);
	/*default dequeue_mode REMOVE*/
	if  lvreceipthandle is null then
		raise exception 'timeout or end-of-fetch during message dequeue from %', queue_name
		using hint  = '-25228'; --'ora_code must be here';
	else
		perform aws_oracle_ext.sqs_aq_delete_message(lvqueueurl, lvreceipthandle);
		perform aws_oracle_ext.sqs_lu_delete_queue_message(queue_name, msgid::text);
 	end if;
end;
]]></complex-attribute>
                        <category _I_D="5b5147b7-b3f9-4a8d-9c23-d4fba8590849" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f7a7a61f-9fce-4844-907d-463da0ea1785" name="dbms_aq$enqueue" subcategories-loading="none" object-loading="extended" context="dbms_aq$enqueue" is-trigger-function="0" unique-function-name="dbms_aq$enqueue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,json,json,json,bytea" is-returning-set="f" ret-datatype="bytea" function-arguments="queue_name text, enqueue_options json, message_properties json, payload json, OUT msgid bytea" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365679" volatility="VOLATILE" is-window="f" function-identity-arguments="queue_name text, enqueue_options json, message_properties json, payload json, OUT msgid bytea" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_aq$enqueue(queue_name text, enqueue_options json, message_properties json, payload json, OUT msgid bytea)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lvResponse text;
	lQueueUrl text;
	lrT sqs_queues_tables%rowtype;
	lrM sqs_queue_record;
begin

	lrT :=  sqs_lu_inited_queuetbl(queue_name);

	if lrT.id = -1 then
		lQueueUrl := sqs_lu_inited_queueurl(queue_name);

		lvResponse := sqs_aq_send_message(lQueueUrl, payload::text);

		msgid := trim(both '"' from json_extract_path(json_extract_path(lvResponse::json, 'body')::json, 'MessageId')::text)::bytea;

		lrM.msgid := msgid;
		lrM.q_name := queue_name;
		lrM.user_data = payload;

		perform sqs_lu_insert_queue_table(to_json(lrT), to_json(lrM));
	end if;
end;
]]></complex-attribute>
                        <category _I_D="41dc4885-04ea-4589-8137-d2d43c5273b2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5506d066-23bd-482e-afa5-6d4ec9e2f021" name="dbms_aqadm$create_queue" subcategories-loading="none" object-loading="extended" context="dbms_aqadm$create_queue" is-trigger-function="0" unique-function-name="dbms_aqadm$create_queue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,integer,double precision,double precision,double precision,boolean,text,boolean" is-returning-set="f" ret-datatype="void" function-arguments="queue_name text, queue_table text, queue_type integer DEFAULT aws_oracle_ext.sqs_normal_queue(), max_retries double precision DEFAULT NULL::double precision, retry_delay double precision DEFAULT 0, retention_time double precision DEFAULT 0, dependency_tracking boolean DEFAULT false, comment text DEFAULT NULL::text, auto_commit boolean DEFAULT true" schema-id="364663" function-type="RET_SCALAR" count-arguments="9" function-id="365680" volatility="VOLATILE" is-window="f" function-identity-arguments="queue_name text, queue_table text, queue_type integer, max_retries double precision, retry_delay double precision, retention_time double precision, dependency_tracking boolean, comment text, auto_commit boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_aqadm$create_queue(queue_name text, queue_table text, queue_type integer, max_retries double precision, retry_delay double precision, retention_time double precision, dependency_tracking boolean, comment text, auto_commit boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	USER_DATA constant text = 'user_data';
	lResult json;
	lrQ aws_oracle_ext.sqs_queues_settings%rowtype;
	lrT aws_oracle_ext.sqs_queues_tables%rowtype;
	lStatusCode varchar(200);
begin

	select ovschemaname, ovtablename
	  into lrT.tschema, lrT.tname
	  from aws_oracle_ext.sqs_lu_define_table(queue_table);

	with q as (select u.table_schema,
					  u.table_name,
					  u.udt_schema,
					  u.udt_name
			     from information_schema.tables t join information_schema.column_udt_usage u on t.table_schema = u.table_schema
				                                                                            and t.table_name  = u.table_name
				 where t.table_schema = lrT.tschema
				   and t.table_name = lrT.tname
				   and u.column_name = USER_DATA
			   )
	 select t.id,
	        q.udt_schema,
	        q.udt_name,
	   into lrT.id
	   		lrT.tdatatypeschema,
	   		lrT.tdatatypename
      from aws_oracle_ext.sqs_queues_tables t join q on t.tschema = q.table_schema
								     and t.tname = q.table_name
								     and t.tdatatypeschema = q.udt_schema
								     and t.tdatatypename =q.udt_name;


	if lrT.id is null then
		raise exception 'invalid value NULL, QUEUE_TABLE should be defined'
		using hint  = 'Please check your user Queue table';
	end if;

	lResult := aws_oracle_ext.sqs_aq_create_queue(pvqueuename => queue_name)::json;
	lStatusCode := json_extract_path(lResult, 'statusCode');

	if lStatusCode::int = 200 then
		lrQ.Url := trim(both '"' from json_extract_path(lResult, 'QueueUrl')::text);
		lrQ.QPureName := reverse(split_part(reverse(lrQ.Url), '/',1));
		lrQ.QName := lrQ.QPureName;

		lrQ.QType := substr(lrQ.QPureName, length(lrQ.QPureName) - 3, 4);

		if lrQ.QType = aws_oracle_ext.sqs_queue_fifo() then
			lrQ.QName := replace(lrQ.QName, concat('.', aws_oracle_ext.sqs_queue_fifo()), '');
		end if;

		if lower(substring(lrQ.Url, 1, 8)) = 'https://' then
			lrQ.Arn := concat('arn:', replace(substring(lrQ.Url, 9), '/', ':'));
		end if;

		insert into aws_oracle_ext.sqs_queues_settings(qname, qpurename, url, arn, qtype, tableid)
		      select lrQ.qname, lrQ.qpurename, lrQ.url, lrQ.arn, lrQ.qtype, lrT.id;
	end if;
end;
]]></complex-attribute>
                        <category _I_D="7dbc8369-8787-4a25-a02b-4e4dda07223f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ff66f63c-0ca8-44b6-91df-5a8c54730c86" name="dbms_aqadm$create_queue_table" subcategories-loading="none" object-loading="extended" context="dbms_aqadm$create_queue_table" is-trigger-function="0" unique-function-name="dbms_aqadm$create_queue_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,boolean,integer,text,boolean,integer,integer,integer,boolean" is-returning-set="f" ret-datatype="void" function-arguments="queue_table text, queue_payload_type text, storage_clause text DEFAULT NULL::text, sort_list text DEFAULT NULL::text, multiple_consumers boolean DEFAULT false, message_grouping integer DEFAULT aws_oracle_ext.sqs_none(), comment text DEFAULT NULL::text, auto_commit boolean DEFAULT true, primary_instance integer DEFAULT 0, secondary_instance integer DEFAULT 0, compatible integer DEFAULT NULL::integer, secure boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="12" function-id="365681" volatility="VOLATILE" is-window="f" function-identity-arguments="queue_table text, queue_payload_type text, storage_clause text, sort_list text, multiple_consumers boolean, message_grouping integer, comment text, auto_commit boolean, primary_instance integer, secondary_instance integer, compatible integer, secure boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_aqadm$create_queue_table(queue_table text, queue_payload_type text, storage_clause text, sort_list text, multiple_consumers boolean, message_grouping integer, comment text, auto_commit boolean, primary_instance integer, secondary_instance integer, compatible integer, secure boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lrT aws_oracle_ext.sqs_queues_tables%rowtype;
begin

	select lower(a.ovschemaname), lower(a.ovtablename)
	  into lrT.tschema, lrT.tname
 	from aws_oracle_ext.sqs_lu_define_table(queue_table) a;

	select lower(a.ovschemaname), lower(a.ovtypename)
	  into lrT.tdatatypeschema, lrT.tdatatypename
 	from aws_oracle_ext.sqs_lu_define_type(queue_payload_type) a;

	perform aws_oracle_ext.sqs_lu_create_queue_table(pvtablename := lrT.tname,
                                                      pvtypename := lrT.tdatatypename,
                                                      pvtableschema :=lrT.tschema,
                                                      pvtypeschema := lrT.tdatatypeschema
                                                     );
end;
]]></complex-attribute>
                        <category _I_D="06722768-49fe-4f7c-b4f9-8d5ea87d5da0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d96e9373-f761-4085-a782-01e3940ad2bf" name="dbms_aqadm$drop_queue" subcategories-loading="none" object-loading="extended" context="dbms_aqadm$drop_queue" is-trigger-function="0" unique-function-name="dbms_aqadm$drop_queue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean" is-returning-set="f" ret-datatype="void" function-arguments="queue_name text, auto_commit boolean DEFAULT true" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365682" volatility="VOLATILE" is-window="f" function-identity-arguments="queue_name text, auto_commit boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_aqadm$drop_queue(queue_name text, auto_commit boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lResult text;
begin
	lResult := sqs_aq_delete_queue(sqs_lu_inited_queueurl(queue_name));
	perform sqs_lu_delete_queue_table(queue_name);
end;
]]></complex-attribute>
                        <category _I_D="74fcc380-6d37-40c8-ae91-cd7a73b223f6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4704e9c4-b06f-4832-b003-f085274b69a5" name="dbms_aqadm$drop_queue_table" subcategories-loading="none" object-loading="extended" context="dbms_aqadm$drop_queue_table" is-trigger-function="0" unique-function-name="dbms_aqadm$drop_queue_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean,boolean" is-returning-set="f" ret-datatype="void" function-arguments="queue_table text, force boolean DEFAULT false, auto_commit boolean DEFAULT true" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365683" volatility="VOLATILE" is-window="f" function-identity-arguments="queue_table text, force boolean, auto_commit boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_aqadm$drop_queue_table(queue_table text, force boolean, auto_commit boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lrT aws_oracle_ext.sqs_queues_tables%rowtype;
begin

	select lower(a.ovschemaname), lower(a.ovtablename)
	  into lrT.tschema, lrT.tname
 	from aws_oracle_ext.sqs_lu_define_table(queue_table) a;

	perform aws_oracle_ext.sqs_lu_drop_queue_table(pvtablename := lrT.tname, pvschemaname := lrT.tschema);
end;
]]></complex-attribute>
                        <category _I_D="7b656384-f458-4b95-a599-92c691074d3e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d144de2b-9ae1-4717-92ab-d131bedb98ba" name="dbms_assert$enquote_literal" subcategories-loading="none" object-loading="extended" context="dbms_assert$enquote_literal" is-trigger-function="0" unique-function-name="dbms_assert$enquote_literal" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_str_literal text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365031" volatility="STABLE" is-window="f" function-identity-arguments="p_str_literal text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_assert$enquote_literal(p_str_literal text)" comment="This function verifies that all single quotes except leading and trailing characters are paired with adjacent single quotes. Also function adds leading and trailing single quotes to a string literal.">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    /* Requires functions to be installed in aws_oracle_ext schema:
       - regexp_count.
    */

    IF (mod(aws_oracle_ext.regexp_count(p_str_literal, ''''), 2) != 0) THEN
        RAISE USING MESSAGE := 'Numeric or value error.',
                    DETAIL := 'Single quotes without paired adjacent single quotes are found. Oracle error ORA-06502.',
                    HINT := 'Verify that all single quotes except leading and trailing characters are paired with adjacent single quotes.';
    END IF;

    RETURN concat('''', p_str_literal, '''');
END;
]]></complex-attribute>
                        <category _I_D="6cdb2fa5-241c-463c-8a59-52172817fab0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="56914837-913e-479a-b96b-00f4622ad6d7" name="dbms_assert$enquote_name" subcategories-loading="none" object-loading="extended" context="dbms_assert$enquote_name" is-trigger-function="0" unique-function-name="dbms_assert$enquote_name" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean" is-returning-set="f" ret-datatype="text" function-arguments="p_str_sqlname text, p_capitalize boolean DEFAULT true" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365032" volatility="STABLE" is-window="f" function-identity-arguments="p_str_sqlname text, p_capitalize boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_assert$enquote_name(p_str_sqlname text, p_capitalize boolean)" comment="This function encloses the input string within double quotes, unless they are already present.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_dblquote_count SMALLINT;
    v_str_sqlname TEXT := p_str_sqlname;
BEGIN
    /* Requires functions to be installed in aws_oracle_ext schema:
       - regexp_count.
    */

    v_dblquote_count := aws_oracle_ext.regexp_count(v_str_sqlname, '"');

    IF (mod(v_dblquote_count, 2) != 0) THEN
        RAISE USING MESSAGE := 'Invalid SQL name.',
                    DETAIL := 'Double quotes without paired adjacent double quotes are found. Oracle error ORA-44003.',
                    HINT := 'Input string literal must be corrected by removing unpaired double quotes or adding corresponding ones.';
    END IF;

    IF (char_length(coalesce(v_str_sqlname, '')) = 0) THEN
        v_str_sqlname := '""';
    ELSIF (left(v_str_sqlname, 1) != '"') THEN
        v_str_sqlname := concat('"', v_str_sqlname, '"');
    END IF;

    RETURN CASE
              WHEN p_capitalize AND v_dblquote_count = 0 THEN upper(v_str_sqlname)
              ELSE v_str_sqlname
           END;
END;
]]></complex-attribute>
                        <category _I_D="b7a1022d-f535-465f-9c3f-c8c289711d0c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6b2a908c-d121-41c2-a684-feb205a7cb1a" name="dbms_assert$qualified_sql_name" subcategories-loading="none" object-loading="extended" context="dbms_assert$qualified_sql_name" is-trigger-function="0" unique-function-name="dbms_assert$qualified_sql_name" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_str_sqlname_list text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365033" volatility="STABLE" is-window="f" function-identity-arguments="p_str_sqlname_list text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_assert$qualified_sql_name(p_str_sqlname_list text)" comment="This function checks the input string conforms to the basic characteristics of a qualified SQL name. A qualified name can be made up of several simple SQL names representing the names of the schema, object and database links.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_str_sqlname VARCHAR;
BEGIN
    FOREACH v_str_sqlname IN ARRAY regexp_split_to_array(p_str_sqlname_list, '[.@]')
    LOOP
        PERFORM aws_oracle_ext.dbms_assert$simple_sql_name(v_str_sqlname);
    END LOOP;

    RETURN p_str_sqlname_list;
EXCEPTION
    WHEN OTHERS THEN
        RAISE USING MESSAGE := 'Invalid qualified SQL name.',
                    DETAIL := 'Input string literal is not a valid qualified SQL name. Oracle error ORA-44004.',
                    HINT := 'Verify that supplied SQL name (compound name) represent a valid SQL name.';
END;
]]></complex-attribute>
                        <category _I_D="78ccfd98-2336-4979-940f-b4485ad2c222" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="12d38f13-a7db-43e8-80d4-f850fb3331ed" name="dbms_assert$schema_name" subcategories-loading="none" object-loading="extended" context="dbms_assert$schema_name" is-trigger-function="0" unique-function-name="dbms_assert$schema_name" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_schema_name text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365034" volatility="VOLATILE" is-window="f" function-identity-arguments="p_schema_name text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_assert$schema_name(p_schema_name text)" comment="This function verifies that the input string is an existing schema name. The function is case sensitive.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_schema_name VARCHAR;
BEGIN
    SELECT nspname
      INTO v_schema_name
      FROM pg_catalog.pg_namespace
     WHERE nspname = p_schema_name;

    IF (NOT FOUND) THEN
        RAISE invalid_schema_name;
    END IF;

    RETURN v_schema_name;
EXCEPTION
    WHEN invalid_schema_name THEN
        RAISE USING MESSAGE := 'Invalid schema.',
                    DETAIL := format('Checking found that schema with name %s does not exist in the database. Oracle error ORA-44001.',
                                     CASE
                                        WHEN p_schema_name IS NOT NULL THEN quote_literal(p_schema_name)
                                        ELSE concat(quote_literal('NULL'), ' (empty name)')
                                     END),
                    HINT := 'Verify that schema with such name have to be exist in the database or correct supplied schema name.';
END;
]]></complex-attribute>
                        <category _I_D="5bec5e7e-17ee-471d-90b1-2d827828dfa6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7fdce8d1-0ee8-48ee-843c-68e3bb1bd628" name="dbms_assert$simple_sql_name" subcategories-loading="none" object-loading="extended" context="dbms_assert$simple_sql_name" is-trigger-function="0" unique-function-name="dbms_assert$simple_sql_name" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_str_sqlname text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365035" volatility="STABLE" is-window="f" function-identity-arguments="p_str_sqlname text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_assert$simple_sql_name(p_str_sqlname text)" comment="This function checks the input string conforms to the basic characteristics of a simple SQL name.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_str_sqlname VARCHAR := trim(p_str_sqlname);
BEGIN
    /* Requires functions to be installed in aws_oracle_ext schema:
       - regexp_count;
       - regexp_substr.
    */

    -- SQL name could not be blank (empty).
    IF (char_length(coalesce(v_str_sqlname, '')) = 0) THEN
        RAISE invalid_name;
    END IF;

    -- Determining if the sql name is quoted or not.
    IF (p_str_sqlname ~* '"') THEN
        -- All double quotes in the sql name should be paired.
        IF (mod(aws_oracle_ext.regexp_count(p_str_sqlname, '"'), 2) != 0) THEN
            RAISE invalid_name;
        -- Quoted identifier could not contain any other double quotes.
        ELSIF (aws_oracle_ext.regexp_substr(p_str_sqlname, '"(.+)"', 1, 1) ~* '"') THEN
            RAISE invalid_name;
        END IF;
    ELSE
        -- Nonquoted sql name allows only alphanumeric and _, $, # characters.
        IF (v_str_sqlname !~* '^[a-z_\$#]+$') THEN
            RAISE invalid_name;
        -- Nonquoted sql name must begin with an alphabetic character.
        ELSIF (left(v_str_sqlname, 1) !~* '[a-z]') THEN
            RAISE invalid_name;
        END IF;
    END IF;

    RETURN p_str_sqlname;
EXCEPTION
    WHEN invalid_name THEN
        RAISE USING MESSAGE := 'Invalid SQL name.',
                    DETAIL := 'Input string literal is not a valid simple SQL name. Oracle error ORA-44003.',
                    HINT := 'Verify that supplied SQL name represent a valid simple SQL name.';
END;
]]></complex-attribute>
                        <category _I_D="6acb2012-c964-42a7-81ba-d6f66bb11ab0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="af58f7e9-0b82-4b0e-bffe-b6a6209b8171" name="dbms_assert$sql_object_name" subcategories-loading="none" object-loading="extended" context="dbms_assert$sql_object_name" is-trigger-function="0" unique-function-name="dbms_assert$sql_object_name" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_object_name text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365036" volatility="VOLATILE" is-window="f" function-identity-arguments="p_object_name text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_assert$sql_object_name(p_object_name text)" comment="This function verifies that the input parameter string is a qualified SQL identifier of an existing SQL object.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_schema_name VARCHAR;
    v_schname_iscs BOOLEAN;
    v_object_name VARCHAR;
    v_objname_iscs BOOLEAN;
BEGIN
    /* Requires functions to be installed in aws_oracle_ext schema:
       - regexp_count;
       - regexp_substr.
    */

    IF (char_length(coalesce(trim(p_object_name), '')) = 0 OR -- Object name could not be blank (empty).
        left(ltrim(p_object_name), 1) = '.' OR -- Object name could not start with dot.
        right(rtrim(p_object_name), 1) = '.' OR -- Object name could not end with dot.
        aws_oracle_ext.regexp_count(p_object_name, '\.') > 1) -- Object name could not contain more than one dot.
    THEN
        RAISE invalid_name;
    END IF;

    -- Extracting schema name info from object_name (p_object_name) literal.
    v_schema_name := trim(aws_oracle_ext.regexp_substr(p_object_name, '(.+)(?:\.)', 1, 1));
    v_schname_iscs := v_schema_name ~* '"';

    -- Extracting object name info from object_name (p_object_name) literal.
    v_object_name := coalesce(aws_oracle_ext.regexp_substr(p_object_name, '(?:\.)(.+)', 1, 1), p_object_name);
    v_objname_iscs := v_object_name ~* '"';

    IF (v_schema_name IS NOT NULL) THEN
        IF (v_schname_iscs) THEN
            -- All double quotes in the schema name should be paired.
            IF (mod(aws_oracle_ext.regexp_count(v_schema_name, '"'), 2) != 0) THEN
                RAISE invalid_name;
            END IF;

            v_schema_name := aws_oracle_ext.regexp_substr(v_schema_name, '"(.+)"', 1, 1);
        ELSE
            v_schema_name := lower(v_schema_name);
        END IF;
    END IF;

    IF (v_objname_iscs) THEN
        -- All double quotes in the object name should be paired.
        IF (mod(aws_oracle_ext.regexp_count(v_object_name, '"'), 2) != 0) THEN
            RAISE invalid_name;
        END IF;

        v_object_name := aws_oracle_ext.regexp_substr(v_object_name, '"(.+)"', 1, 1);
    ELSE
        v_object_name := lower(v_object_name);
    END IF;

    -- Checking for existence of the object
    IF EXISTS(SELECT 1 -- TABLE, VIEW
                FROM information_schema.tables
               WHERE table_schema = coalesce(v_schema_name, table_schema)
                 AND table_name = v_object_name)
    THEN
        RETURN p_object_name;
    ELSIF
    EXISTS(SELECT 1 -- CONSTRAINT
             FROM information_schema.table_constraints
            WHERE constraint_schema = coalesce(v_schema_name, constraint_schema)
              AND constraint_name = v_object_name)
    THEN
        RETURN p_object_name;
    ELSIF
    EXISTS(SELECT 1 -- SEQUENCE
             FROM information_schema.sequences
            WHERE sequence_schema = coalesce(v_schema_name, sequence_schema)
              AND sequence_name = v_object_name)
    THEN
        RETURN p_object_name;
    ELSIF
    EXISTS(SELECT 1 -- FUNCTION
             FROM information_schema.routines
            WHERE routine_schema = coalesce(v_schema_name, routine_schema)
              AND routine_name = v_object_name)
    THEN
        RETURN p_object_name;
    ELSIF
    EXISTS(SELECT 1 -- INDEX
            FROM pg_catalog.pg_class cls1
                 INNER JOIN pg_catalog.pg_index AS idx ON (idx.indexrelid = cls1.oid)
                 INNER JOIN pg_catalog.pg_class AS cls2 ON (cls2.oid = idx.indrelid)
                 LEFT JOIN pg_catalog.pg_user AS usr1 ON (usr1.usesysid = cls1.relowner)
                 LEFT JOIN pg_catalog.pg_user AS usr2 ON (usr2.usesysid = cls2.relowner)
                 LEFT JOIN pg_catalog.pg_namespace AS nsp1 ON (nsp1.oid = cls1.relnamespace)
                 LEFT JOIN pg_catalog.pg_namespace AS nsp2 ON (nsp2.oid = cls2.relnamespace)
                 INNER JOIN information_schema.tables AS tbl ON (tbl.table_schema = nsp2.nspname AND
                                                                 tbl.table_name = cls2.relname)
           WHERE cls1.relkind = 'i'
             AND nsp1.nspname = coalesce(v_schema_name, nsp1.nspname)
             AND cls1.relname = v_object_name)
    THEN
        RETURN p_object_name;
    ELSIF
    EXISTS(SELECT 1 -- TRIGGER
             FROM information_schema.triggers
            WHERE trigger_schema = coalesce(v_schema_name, trigger_schema)
              AND trigger_name = v_object_name)
    THEN
        RETURN p_object_name;
    ELSIF
    EXISTS(SELECT 1 -- DOMAIN
             FROM information_schema.domains
            WHERE domain_schema = coalesce(v_schema_name, domain_schema)
              AND domain_name = v_object_name)
    THEN
        RETURN p_object_name;
    ELSIF
    EXISTS(SELECT 1 -- TYPE
             FROM pg_catalog.pg_class AS cls
                  INNER JOIN pg_namespace AS nsp ON (nsp.oid = cls.relnamespace)
            WHERE cls.relkind = 'c'
              AND nsp.nspname = coalesce(v_schema_name, nsp.nspname)
              AND cls.relname = v_object_name)
    THEN
        RETURN p_object_name;
    ELSIF
    EXISTS(SELECT 1 -- MATERIALIZED VIEW
             FROM pg_catalog.pg_class cls
                  INNER JOIN pg_namespace AS nsp ON (nsp.oid = cls.relnamespace)
            WHERE cls.relkind = 'm'
              AND nsp.nspname = coalesce(v_schema_name, nsp.nspname)
              AND cls.relname = v_object_name
              AND cls.relacl::VARCHAR ~* current_user)
    THEN
        RETURN p_object_name;
    ELSE
        RAISE invalid_name;
    END IF;
EXCEPTION
    WHEN invalid_name THEN
        RAISE USING MESSAGE := 'Invalid object name.',
                    DETAIL := 'Input string literal is not a qualified SQL identifier of an existing SQL object. Oracle error ORA-44002.',
                    HINT := 'Verify that object with such name have to be exist in the database or correct supplied object name.';
END;
]]></complex-attribute>
                        <category _I_D="6ff9e4b6-9fd9-46cb-84b2-7e678ab2a9e7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7dcd2921-af6d-467b-aa03-1299dc67eb3b" name="dbms_job$broken" subcategories-loading="none" object-loading="extended" context="dbms_job$broken" is-trigger-function="0" unique-function-name="dbms_job$broken" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,boolean,timestamp without time zone" is-returning-set="f" ret-datatype="void" function-arguments="job double precision, broken boolean, next_date timestamp without time zone" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365037" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, broken boolean, next_date timestamp without time zone" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$broken(job double precision, broken boolean, next_date timestamp without time zone)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  update aws_oracle_ext.jobs j
     set broken = case when dbms_job$broken.broken then 'Y' else 'N' end
   where j.job = dbms_job$broken.job;
END;
]]></complex-attribute>
                        <category _I_D="5bcfbf42-bee8-402f-a5f3-ef0aec2de1b2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="597ca35c-58b5-4e8a-aebf-7698c623d55e" name="dbms_job$change" subcategories-loading="none" object-loading="extended" context="dbms_job$change" is-trigger-function="0" unique-function-name="dbms_job$change" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,character varying,timestamp without time zone,character varying,double precision,boolean" is-returning-set="f" ret-datatype="void" function-arguments="job double precision, what character varying, next_date timestamp without time zone DEFAULT now(), &quot;interval&quot; character varying DEFAULT 'null'::character varying, instance double precision DEFAULT NULL::double precision, force boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365038" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, what character varying, next_date timestamp without time zone, &quot;interval&quot; character varying, instance double precision, force boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$change(job double precision, what character varying, next_date timestamp without time zone, &quot;interval&quot; character varying, instance double precision, force boolean)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  update aws_oracle_ext.jobs j
     set what = dbms_job$change.what
       , next_date = dbms_job$change.next_date
       , "interval" = dbms_job$change.interval
   where j.job = dbms_job$change.job;
END;
]]></complex-attribute>
                        <category _I_D="6850e975-9ceb-454f-8563-4d5c954a0c8d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="55a4329c-7723-44b7-8e8d-b88308128010" name="dbms_job$instance" subcategories-loading="none" object-loading="extended" context="dbms_job$instance" is-trigger-function="0" unique-function-name="dbms_job$instance" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,double precision,boolean" is-returning-set="f" ret-datatype="void" function-arguments="job double precision, instance double precision, force boolean" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365039" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, instance double precision, force boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$instance(job double precision, instance double precision, force boolean)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  null;
END;
]]></complex-attribute>
                        <category _I_D="54b75540-008c-426e-be5e-31ab1c4428e3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="71c19063-9d04-4e65-8404-6e6653445c69" name="dbms_job$interval" subcategories-loading="none" object-loading="extended" context="dbms_job$interval" is-trigger-function="0" unique-function-name="dbms_job$interval" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,character varying" is-returning-set="f" ret-datatype="void" function-arguments="job double precision, &quot;interval&quot; character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365040" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, &quot;interval&quot; character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$interval(job double precision, &quot;interval&quot; character varying)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  update aws_oracle_ext.jobs
     set "interval" = dbms_job$interval."interval"
   where jobs.job = dbms_job$interval.job;
END;
]]></complex-attribute>
                        <category _I_D="f80c24a3-aaab-423e-8bdb-dd9c52beea93" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1e7884bc-4486-4cba-b46c-dbc1ac969776" name="dbms_job$isubmit" subcategories-loading="none" object-loading="extended" context="dbms_job$isubmit" is-trigger-function="0" unique-function-name="dbms_job$isubmit" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,character varying,timestamp without time zone,character varying,boolean,double precision,boolean" is-returning-set="f" ret-datatype="void" function-arguments="job double precision, what character varying, next_date timestamp without time zone DEFAULT now(), &quot;interval&quot; character varying DEFAULT 'null'::character varying, no_parse boolean DEFAULT false, instance double precision DEFAULT NULL::double precision, force boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="7" function-id="365041" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, what character varying, next_date timestamp without time zone, &quot;interval&quot; character varying, no_parse boolean, instance double precision, force boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$isubmit(job double precision, what character varying, next_date timestamp without time zone, &quot;interval&quot; character varying, no_parse boolean, instance double precision, force boolean)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  insert into aws_oracle_ext.jobs( job, what, next_date, "interval" )
  values( job, what, next_date, "interval" );
END;
]]></complex-attribute>
                        <category _I_D="332cf94e-04a6-4a5f-8968-88d1e3885812" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d3927203-9214-45b0-af03-187aee0c8d0a" name="dbms_job$next_date" subcategories-loading="none" object-loading="extended" context="dbms_job$next_date" is-trigger-function="0" unique-function-name="dbms_job$next_date" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,timestamp without time zone" is-returning-set="f" ret-datatype="void" function-arguments="job double precision, next_date timestamp without time zone" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365042" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, next_date timestamp without time zone" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$next_date(job double precision, next_date timestamp without time zone)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  update aws_oracle_ext.jobs j
     set j.next_date = next_date
   where j.job = dbms_job$next_date.job;
END;
]]></complex-attribute>
                        <category _I_D="9ae04c4c-7cb9-494f-aa01-eede54c7570d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="13b37686-14a5-42ea-9772-94a059f4d51c" name="dbms_job$remove" subcategories-loading="none" object-loading="extended" context="dbms_job$remove" is-trigger-function="0" unique-function-name="dbms_job$remove" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision" is-returning-set="f" ret-datatype="void" function-arguments="job double precision" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365043" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$remove(job double precision)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  delete from aws_oracle_ext.jobs j where j.job = dbms_job$remove.job;
END;
]]></complex-attribute>
                        <category _I_D="9337c342-c4a3-4556-91a3-12b453fdaa7a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6749d1dd-49df-4c93-9aed-5a67565a1f65" name="dbms_job$run" subcategories-loading="none" object-loading="extended" context="dbms_job$run" is-trigger-function="0" unique-function-name="dbms_job$run" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,boolean" is-returning-set="f" ret-datatype="void" function-arguments="job double precision, force boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365044" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, force boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$run(job double precision, force boolean)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  update aws_oracle_ext.jobs j
     set next_date = current_timestamp
       , broken = 'N'
   where j.job = dbms_job$run.job;
END;
]]></complex-attribute>
                        <category _I_D="43f39da8-0252-4dbf-a534-28bd3f5e1435" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8e5c5b12-a590-4e39-9b8c-20bbf2d20c13" name="dbms_job$submit" subcategories-loading="none" object-loading="extended" context="dbms_job$submit" is-trigger-function="0" unique-function-name="dbms_job$submit" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,character varying,timestamp without time zone,character varying,boolean,double precision,boolean" is-returning-set="f" ret-datatype="float8" function-arguments="OUT job double precision, what character varying, next_date timestamp without time zone DEFAULT now(), &quot;interval&quot; character varying DEFAULT 'null'::character varying, no_parse boolean DEFAULT false, instance double precision DEFAULT NULL::double precision, force boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365045" volatility="VOLATILE" is-window="f" function-identity-arguments="OUT job double precision, what character varying, next_date timestamp without time zone, &quot;interval&quot; character varying, no_parse boolean, instance double precision, force boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$submit(OUT job double precision, what character varying, next_date timestamp without time zone, &quot;interval&quot; character varying, no_parse boolean, instance double precision, force boolean)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  insert into aws_oracle_ext.jobs( job, what, next_date, "interval" )
  values( default, what, next_date, "interval" )
  returning jobs.job::double precision into dbms_job$submit.job;
END;
]]></complex-attribute>
                        <category _I_D="c241dfef-f299-4335-9d6f-ee0afc634dc5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4f1c89d7-ff32-4b18-81a5-a4367ec915c5" name="dbms_job$user_export" subcategories-loading="none" object-loading="extended" context="dbms_job$user_export(job double precision, INOUT mycall character varying)" is-trigger-function="0" unique-function-name="dbms_job$user_export(job double precision, INOUT mycall character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="job double precision, INOUT mycall character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365046" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, INOUT mycall character varying" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_job$user_export(job double precision, INOUT mycall character varying)" unique-suffix="(job double precision, INOUT mycall character varying)" routine-number="365046">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  select 'PERFORM aws_oracle_ext.dbms_job$isubmit( ' || j.job || ', ''' || replace( j.what, '''', '''''' ) || ''', to_timestamp( ''' || to_char( j.next_date, 'YYYYMMDDHH24MISS' ) || ''', ''YYYYMMDDHH24MISS'') , ''' || j.interval || ''' );'
    into mycall
    from aws_oracle_ext.jobs as j
   where j.job = job;
END;
]]></complex-attribute>
                        <category _I_D="8ae88db3-cb0c-4170-8a0a-7ad0c918f60e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="944d3fcc-255c-487e-867c-b550c0816167" name="dbms_job$user_export" subcategories-loading="none" object-loading="extended" context="dbms_job$user_export(job double precision, INOUT mycall character varying, myinst character varying)" is-trigger-function="0" unique-function-name="dbms_job$user_export(job double precision, INOUT mycall character varying, myinst character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="job double precision, INOUT mycall character varying, myinst character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365047" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, INOUT mycall character varying, myinst character varying" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_job$user_export(job double precision, INOUT mycall character varying, myinst character varying)" unique-suffix="(job double precision, INOUT mycall character varying, myinst character varying)" routine-number="365047">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  mycall := aws_oracle_ext.dbms_job$user_export( job := job );
END;
]]></complex-attribute>
                        <category _I_D="aa814111-4934-4c1c-ba0c-cb7b8a515442" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="82d3dee8-b094-45b8-ad80-42ee78be905f" name="dbms_job$what" subcategories-loading="none" object-loading="extended" context="dbms_job$what" is-trigger-function="0" unique-function-name="dbms_job$what" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,character varying" is-returning-set="f" ret-datatype="void" function-arguments="job double precision, what character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365048" volatility="VOLATILE" is-window="f" function-identity-arguments="job double precision, what character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_job$what(job double precision, what character varying)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  update aws_oracle_ext.jobs j
     set j.what = what
   where j.job = job;
END;
]]></complex-attribute>
                        <category _I_D="abc88fd2-865b-4a16-8e90-a17d344c46e7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0ab89110-7c8f-4328-a01f-eea9da610aab" name="dbms_lob$constant" subcategories-loading="none" object-loading="extended" context="dbms_lob$constant" is-trigger-function="0" unique-function-name="dbms_lob$constant" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="int4" function-arguments="p_const_name text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365849" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_const_name text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_lob$constant(p_const_name text)">
                        <complex-attribute name="sql"><![CDATA[
declare l_consts jsonb = json_build_object(
							-- DBMS_LOB Constants - Basic
							'CALL',12,
							'FILE_READONLY',0,
							'LOB_READONLY',0,
							'LOB_READWRITE',1,
							-- 'LOBMAXSIZE',18446744073709551615 -> to long for INT-> aws_oracle_ext.dbms_lob$lobmaxsize,
							'SESSION',10,

							-- DBMS_LOB Constants - Option Types
							'OPT_COMPRESS',1,
							'OPT_DEDUPLICATE',4,
							'OPT_ENCRYPT',2,

							-- DBMS_LOB Constants - Option Values							
							'COMPRESS_OFF',0,
							'COMPRESS_ON',1,
							'DEDUPLICATE_OFF',0,
							'DEDUPLICATE_ON',4,
							'ENCRYPT_OFF',0,
							'ENCRYPT_ON',2,
							
							-- DBMS_LOB Constants - DBFS State Value Types
							'DBFS_LINK_NEVER',0,
							'DBFS_LINK_NO',2,
							'DBFS_LINK_YES',1,
							
							-- DBMS_LOB Constants - DBFS Cache Flags
							'DBFS_LINK_CACHE',1,
							'DBFS_LINK_NOCACHE',0,
							
							
							-- DBMS_LOB Constants - Miscellaneous
							'CONTENTTYPE_MAX_SIZE',128,
							'DBFS_LINK_PATH_MAX_SIZE',1024,
							
							'DEFAULT_CSID',0,
							'DEFAULT_LANG_CTX',0,
							'BLOBMAXSIZE',16777216,
							'CLOBMAXSIZE',4194304,
							'NO_WARNING',0,

							'TRANSACTION',11,
							'WARN_INCONVERTIBLE_CHAR',1

						);
begin
	if l_consts ?  upper(p_const_name) then
		return (l_consts->>upper(p_const_name))::integer;
	else 
		raise exception 'Unknown DBMS_LOB constant: %', p_const_name;
	end if;
end ]]></complex-attribute>
                        <category _I_D="58de863e-5b1b-45ec-a818-b96fa13e62fd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="35ac0e8a-2f91-47b0-998a-d00a0c2621f5" name="dbms_lob$copy" subcategories-loading="none" object-loading="extended" context="dbms_lob$copy" is-trigger-function="0" unique-function-name="dbms_lob$copy" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,integer,integer,integer" is-returning-set="f" ret-datatype="varchar" function-arguments="INOUT dest_lob character varying, src_lob character varying, amount integer, dest_offset integer DEFAULT 1, src_offset integer DEFAULT 1" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365049" volatility="VOLATILE" is-window="f" function-identity-arguments="INOUT dest_lob character varying, src_lob character varying, amount integer, dest_offset integer, src_offset integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_lob$copy(INOUT dest_lob character varying, src_lob character varying, amount integer, dest_offset integer, src_offset integer)" comment="This procedure copies all, or a part of, a source internal LOB to a destination internal LOB. You can specify the offsets for both the source and destination LOBs, and the number of bytes or characters to copy">
                        <complex-attribute name="sql"><![CDATA[
declare src_res CHARACTER VARYING;
        dest_before CHARACTER VARYING;
        dest_after CHARACTER VARYING;
BEGIN
  if dest_lob is null or src_lob is null or amount is null or dest_offset is null or src_offset is null then raise exception 'invalid input parameters';
  elsif src_offset < 1 or dest_offset < 1 then raise exception 'invalid input parameters';
  elsif amount < 1 then raise exception 'invalid input parameters';
  end if;

  src_res := substring(src_lob from src_offset for amount);
  dest_before := substring(dest_lob, 1, dest_offset - 1);
  dest_after := substring(dest_lob from length(src_res) + length(dest_before) + 1);
  dest_lob := dest_before || src_res || dest_after;
END;  
]]></complex-attribute>
                        <category _I_D="da354289-1ec8-4b1e-8d28-8ec2fc757231" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="490d9a0b-0af8-468c-8103-64ef78be6adf" name="dbms_lob$instr" subcategories-loading="none" object-loading="extended" context="dbms_lob$instr" is-trigger-function="0" unique-function-name="dbms_lob$instr" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,integer,integer" is-returning-set="f" ret-datatype="int4" function-arguments="lob_loc character varying, pattern character varying, off_set integer DEFAULT 1, nth integer DEFAULT 1" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365050" volatility="VOLATILE" is-window="f" function-identity-arguments="lob_loc character varying, pattern character varying, off_set integer, nth integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_lob$instr(lob_loc character varying, pattern character varying, off_set integer, nth integer)" comment="This function returns the matching position of the nth occurrence of the pattern in the lob_loc, starting from the offset you specify">
                        <complex-attribute name="sql"><![CDATA[
declare matches integer;
        ind integer;
begin
  /*parameters validation*/
  if lob_loc is null or pattern is null or off_set is null or nth is null then 
    return null;
  elsif (off_set < 1) or (nth < 1) then 
    return null;
  end if;

  if (off_set = 1) and (nth = 1) then 
    return strpos(lob_loc, pattern);
   else 
     matches := 0;
     for i in off_set..length(lob_loc) loop
       if substring(lob_loc, i, length(pattern)) = pattern then 
         ind := i;
	 matches := matches + 1;
	 if matches = nth then 
	   return ind;
	 end if;
       end if;           
     end loop;
     return 0;
  end if;
end;
]]></complex-attribute>
                        <category _I_D="e7f05378-4ae0-4dae-bbc0-efaa20824456" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e6d9f9de-5000-495e-a8a9-1edfad574b12" name="dbms_lob$lobmaxsize" subcategories-loading="none" object-loading="extended" context="dbms_lob$lobmaxsize" is-trigger-function="0" unique-function-name="dbms_lob$lobmaxsize" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365850" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_lob$lobmaxsize()">
                        <complex-attribute name="sql"><![CDATA[
-- ORACLE DBMS_LOB.LOBMAXSIZE
--  lobmaxsize    CONSTANT INTEGER        := 18446744073709551615;
SELECT 18446744073709551615
]]></complex-attribute>
                        <category _I_D="f2d57a65-e513-406e-bf52-e636e5ed35da" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="34b35f75-6ab7-42f6-85e2-a9fbfa96e98d" name="dbms_lock$allocate_unique" subcategories-loading="none" object-loading="extended" context="dbms_lock$allocate_unique" is-trigger-function="0" unique-function-name="dbms_lock$allocate_unique" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="lockname character varying, INOUT lockhandle character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365055" volatility="VOLATILE" is-window="f" function-identity-arguments="lockname character varying, INOUT lockhandle character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_lock$allocate_unique(lockname character varying, INOUT lockhandle character varying)" comment="generate lockhandle by lockname">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    lockhandle := lower(lockname);
END;
]]></complex-attribute>
                        <category _I_D="ab4604e8-f08c-4603-9746-cbcca6c17307" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8aca83ba-f79e-42a2-afb3-54021ca08f73" name="dbms_lock$constant" subcategories-loading="none" object-loading="extended" context="dbms_lock$constant" is-trigger-function="0" unique-function-name="dbms_lock$constant" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="int4" function-arguments="p_const_name text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365052" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_const_name text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_lock$constant(p_const_name text)">
                        <complex-attribute name="sql"><![CDATA[
declare l_consts jsonb = json_build_object(
                                              -- DBMS_LOCK Constants - Lock mode
                                              'NL_MODE',1,
                                              'SS_MODE',2,
                                              'SX_MODE',3,
                                              'S_MODE',4,
                                              'SSX_MODE',5,
                                              'X_MODE',6,
                                              -- MAXWAIT
                                              'MAXWAIT',32767
                                          );
begin
	if l_consts ?  upper(p_const_name) then
		return (l_consts->>upper(p_const_name))::integer;
	else
		raise exception 'Unknown DBMS_LOCK constant: %', p_const_name;
	end if;
end ]]></complex-attribute>
                        <category _I_D="bd753278-673f-40db-8f47-4e1d1d931e1d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a195029f-120f-40a9-a8f9-b483b4e6a3a9" name="dbms_lock$init" subcategories-loading="none" object-loading="extended" context="dbms_lock$init" is-trigger-function="0" unique-function-name="dbms_lock$init" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365051" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_lock$init()">
                        <complex-attribute name="sql"><![CDATA[
    -- A stub function.
    select null::void;
]]></complex-attribute>
                        <category _I_D="2cf5e57f-183f-4de3-b69b-e5c58346489b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="558004a0-2265-46d5-8577-619511ae96d9" name="dbms_lock$release" subcategories-loading="none" object-loading="extended" context="dbms_lock$release(id bigint)" is-trigger-function="0" unique-function-name="dbms_lock$release(id bigint)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bigint" is-returning-set="f" ret-datatype="int8" function-arguments="id bigint" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365058" volatility="VOLATILE" is-window="f" function-identity-arguments="id bigint" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_lock$release(id bigint)" unique-suffix="(id bigint)" routine-number="365058" comment="Releases a lock by id">
                        <complex-attribute name="sql"><![CDATA[
declare
  l_unlock boolean := true;
  l_exit_code int;
BEGIN
    if aws_oracle_ext.get_package_variable('aws_oracle_ext', 'dbms_lock', concat('lockmode_',id))::INTEGER=6 /* lockmode: X_MODE = Exclusive */ then
      l_unlock := pg_advisory_unlock(id);
    else
      l_unlock := pg_advisory_unlock_shared(id);
    end if;

    l_exit_code := case when l_unlock then 0 -- Success
                        else 5 -- Illegal lock handle
                end;
    return l_exit_code;
END;
]]></complex-attribute>
                        <category _I_D="2e0c97e4-eccf-45f4-b723-d243ce67e7b7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="14f02818-62fd-449f-babd-f8c81531db74" name="dbms_lock$release" subcategories-loading="none" object-loading="extended" context="dbms_lock$release(lockhandle character varying)" is-trigger-function="0" unique-function-name="dbms_lock$release(lockhandle character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="int8" function-arguments="lockhandle character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365062" volatility="VOLATILE" is-window="f" function-identity-arguments="lockhandle character varying" overload-function-count="2" proc-language="sql" function-signature="dbms_lock$release(lockhandle character varying)" unique-suffix="(lockhandle character varying)" routine-number="365062" comment="Releases a lock by lockhandle">
                        <complex-attribute name="sql"><![CDATA[
    select aws_oracle_ext.dbms_lock$release(id => aws_oracle_ext.get_id_by_name(lockhandle::text));
]]></complex-attribute>
                        <category _I_D="a8d5246e-debc-4b49-b960-26ae71c1b803" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="be76dc55-6cee-413b-af70-14861b83d9b5" name="dbms_lock$request" subcategories-loading="none" object-loading="extended" context="dbms_lock$request(id bigint, lockmode integer, timeout integer, release_on_commit boolean)" is-trigger-function="0" unique-function-name="dbms_lock$request(id bigint, lockmode integer, timeout integer, release_on_commit boolean)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bigint,integer,integer,boolean" is-returning-set="f" ret-datatype="int8" function-arguments="id bigint, lockmode integer DEFAULT 6, timeout integer DEFAULT 32767, release_on_commit boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365063" volatility="VOLATILE" is-window="f" function-identity-arguments="id bigint, lockmode integer, timeout integer, release_on_commit boolean" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_lock$request(id bigint, lockmode integer, timeout integer, release_on_commit boolean)" unique-suffix="(id bigint, lockmode integer, timeout integer, release_on_commit boolean)" routine-number="365063" comment="Obtain the lock by id immediately and return true, or return false if the lock cannot be acquired immediately">
                        <complex-attribute name="sql"><![CDATA[
declare
  l_getlock boolean := true;
  l_result  int;
BEGIN
    /* lockmode is implemented only for values
     *   6 - Exclusive
     *   not 6 - Shared
     *
     * timeout is implemented only for values
     *   0 - no wait
     *   not 0 - wait untill free
     */
    perform aws_oracle_ext.set_package_variable('aws_oracle_ext', 'dbms_lock', concat('lockmode_', id), lockmode);

    case when not release_on_commit and lockmode = 6 and timeout = 0 then l_getlock := pg_try_advisory_lock(id);
         when not release_on_commit and lockmode = 6 and timeout != 0 then perform pg_advisory_lock(id);
         when not release_on_commit and lockmode != 6 and timeout = 0 then l_getlock := pg_try_advisory_lock_shared(id);
         when not release_on_commit and lockmode != 6 and timeout != 0 then perform pg_advisory_lock_shared(id);
         when release_on_commit and lockmode = 6 and timeout = 0 then l_getlock := pg_try_advisory_xact_lock(id);
         when release_on_commit and lockmode = 6 and timeout != 0 then perform pg_advisory_xact_lock(id);
         when release_on_commit and lockmode != 6 and timeout = 0 then l_getlock := pg_try_advisory_xact_lock_shared(id);
         when release_on_commit and lockmode != 6 and timeout != 0 then perform pg_advisory_xact_lock_shared(id);
         else l_getlock := false;
    end case;

    l_result := case when l_getlock then 0 -- Success
                     else 1 -- Timeout
                end;
    return l_result;
END;
]]></complex-attribute>
                        <category _I_D="7a4327f6-6230-4f5b-8dea-54a240212240" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="369de5a1-0c36-4d6f-91f4-6e0951e5e055" name="dbms_lock$request" subcategories-loading="none" object-loading="extended" context="dbms_lock$request(lockhandle character varying, lockmode integer, timeout integer, release_on_commit boolean)" is-trigger-function="0" unique-function-name="dbms_lock$request(lockhandle character varying, lockmode integer, timeout integer, release_on_commit boolean)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,integer,integer,boolean" is-returning-set="f" ret-datatype="int8" function-arguments="lockhandle character varying, lockmode integer DEFAULT 6, timeout integer DEFAULT 32767, release_on_commit boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365064" volatility="VOLATILE" is-window="f" function-identity-arguments="lockhandle character varying, lockmode integer, timeout integer, release_on_commit boolean" overload-function-count="2" proc-language="sql" function-signature="dbms_lock$request(lockhandle character varying, lockmode integer, timeout integer, release_on_commit boolean)" unique-suffix="(lockhandle character varying, lockmode integer, timeout integer, release_on_commit boolean)" routine-number="365064" comment="Obtain the lock by lockhandle immediately and return true, or return false if the lock cannot be acquired immediately">
                        <complex-attribute name="sql"><![CDATA[
    select aws_oracle_ext.dbms_lock$request(id => aws_oracle_ext.get_id_by_name(lockhandle::text),
                                            lockmode => lockmode,
                                            timeout => timeout,
                                            release_on_commit => release_on_commit
                                            );
]]></complex-attribute>
                        <category _I_D="08a04e41-84e5-411c-ab75-54e69aa42455" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="09a4b13f-0b91-4fa8-93ec-96272ab13666" name="dbms_obfuscation_toolkit$desdecrypt" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$desdecrypt(input bytea, key bytea)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$desdecrypt(input bytea, key bytea)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bytea,bytea" is-returning-set="f" ret-datatype="bytea" function-arguments="input bytea, key bytea" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365066" volatility="VOLATILE" is-window="f" function-identity-arguments="input bytea, key bytea" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$desdecrypt(input bytea, key bytea)" unique-suffix="(input bytea, key bytea)" routine-number="365066" comment="Generate the decrypted form of the input data">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    return decrypt(input, key, 'des-cbc/pad:none');
  END;
]]></complex-attribute>
                        <category _I_D="1dcff8c0-3a5d-4f1c-a3fd-4e16c405eace" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="053dfbea-6c44-4211-85ca-d214c896d7f3" name="dbms_obfuscation_toolkit$desdecrypt" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$desdecrypt(input bytea, key bytea, INOUT decrypted_data bytea)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$desdecrypt(input bytea, key bytea, INOUT decrypted_data bytea)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bytea,bytea,bytea" is-returning-set="f" ret-datatype="bytea" function-arguments="input bytea, key bytea, INOUT decrypted_data bytea" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365065" volatility="VOLATILE" is-window="f" function-identity-arguments="input bytea, key bytea, INOUT decrypted_data bytea" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$desdecrypt(input bytea, key bytea, INOUT decrypted_data bytea)" unique-suffix="(input bytea, key bytea, INOUT decrypted_data bytea)" routine-number="365065" comment="Generate the decrypted form of the input data">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    decrypted_data := decrypt(input, key, 'des-cbc/pad:none');
  END;
]]></complex-attribute>
                        <category _I_D="5a91fd78-feca-4e4d-8e82-959c3659469d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a91ac8d7-3bf5-43ff-b124-2b75842e95fc" name="dbms_obfuscation_toolkit$desencrypt" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$desencrypt(input bytea, key bytea)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$desencrypt(input bytea, key bytea)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bytea,bytea" is-returning-set="f" ret-datatype="bytea" function-arguments="input bytea, key bytea" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365068" volatility="VOLATILE" is-window="f" function-identity-arguments="input bytea, key bytea" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$desencrypt(input bytea, key bytea)" unique-suffix="(input bytea, key bytea)" routine-number="365068" comment="Generate the encrypted form of the input data">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    return encrypt(input, key, 'des-cbc/pad:none');
  END;
]]></complex-attribute>
                        <category _I_D="9f673b19-5012-47d2-944d-323b53ba3cba" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ee15bd0d-1246-4caf-8b75-5d70e2153a75" name="dbms_obfuscation_toolkit$desencrypt" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$desencrypt(input bytea, key bytea, INOUT encrypted_data bytea)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$desencrypt(input bytea, key bytea, INOUT encrypted_data bytea)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bytea,bytea,bytea" is-returning-set="f" ret-datatype="bytea" function-arguments="input bytea, key bytea, INOUT encrypted_data bytea" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365067" volatility="VOLATILE" is-window="f" function-identity-arguments="input bytea, key bytea, INOUT encrypted_data bytea" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$desencrypt(input bytea, key bytea, INOUT encrypted_data bytea)" unique-suffix="(input bytea, key bytea, INOUT encrypted_data bytea)" routine-number="365067" comment="Generate the encrypted form of the input data">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    encrypted_data := encrypt(input, key, 'des-cbc/pad:none');
  END;
]]></complex-attribute>
                        <category _I_D="af7d2b61-099c-41fc-af74-970833a4da6e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c1fd3385-f41f-459d-a9aa-96d619c4114e" name="dbms_obfuscation_toolkit$desgetkey" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$desgetkey(seed text)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$desgetkey(seed text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="seed text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365069" volatility="VOLATILE" is-window="f" function-identity-arguments="seed text" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$desgetkey(seed text)" unique-suffix="(seed text)" routine-number="365069" comment="Take a value from seed and use it to generate an encryption key">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    return crypt(seed, gen_salt('des'));
  END;
]]></complex-attribute>
                        <category _I_D="beee9ee6-e342-4d0d-9a4a-0bbfd9c26065" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9a67ff34-7763-4c39-884f-bac41b46ba65" name="dbms_obfuscation_toolkit$desgetkey" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$desgetkey(seed text, INOUT key text)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$desgetkey(seed text, INOUT key text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="seed text, INOUT key text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365070" volatility="VOLATILE" is-window="f" function-identity-arguments="seed text, INOUT key text" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$desgetkey(seed text, INOUT key text)" unique-suffix="(seed text, INOUT key text)" routine-number="365070" comment="Take a value from seed and use it to generate an encryption key">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    key := crypt(seed, gen_salt('des'));
  END;
]]></complex-attribute>
                        <category _I_D="4143ee22-2e65-4884-889f-2eecd9ad4b4f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="93950513-a3c3-4be4-919b-e8445f187b8e" name="dbms_obfuscation_toolkit$md5" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$md5(input bytea)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$md5(input bytea)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bytea" is-returning-set="f" ret-datatype="bytea" function-arguments="input bytea" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365072" volatility="VOLATILE" is-window="f" function-identity-arguments="input bytea" overload-function-count="4" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$md5(input bytea)" unique-suffix="(input bytea)" routine-number="365072" comment="Generate MD5 hashes of data">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    return md5(input);
  END;
]]></complex-attribute>
                        <category _I_D="0acb5450-23a0-47cb-ab4a-c0f0561bedf2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fb90bf68-a052-41f5-92b6-c83685553c57" name="dbms_obfuscation_toolkit$md5" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$md5(input bytea, INOUT checksum bytea)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$md5(input bytea, INOUT checksum bytea)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bytea,bytea" is-returning-set="f" ret-datatype="bytea" function-arguments="input bytea, INOUT checksum bytea" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365071" volatility="VOLATILE" is-window="f" function-identity-arguments="input bytea, INOUT checksum bytea" overload-function-count="4" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$md5(input bytea, INOUT checksum bytea)" unique-suffix="(input bytea, INOUT checksum bytea)" routine-number="365071" comment="Generate MD5 hashes of data">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    checksum := md5(input);
  END;
]]></complex-attribute>
                        <category _I_D="02dbeaea-ebcc-4540-9140-dfc8be348e18" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8c6c23fa-7082-4cf5-9336-ed2ae436c48a" name="dbms_obfuscation_toolkit$md5" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$md5(input_string text)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$md5(input_string text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="input_string text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365073" volatility="VOLATILE" is-window="f" function-identity-arguments="input_string text" overload-function-count="4" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$md5(input_string text)" unique-suffix="(input_string text)" routine-number="365073" comment="Generate MD5 hashes of data">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    return md5(input_string);
  END;
]]></complex-attribute>
                        <category _I_D="51d51118-fe7a-406d-9db3-68a0c95e554d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b6ed5d45-1172-4753-a46a-6be452d68266" name="dbms_obfuscation_toolkit$md5" subcategories-loading="none" object-loading="extended" context="dbms_obfuscation_toolkit$md5(input_string text, INOUT checksum_string text)" is-trigger-function="0" unique-function-name="dbms_obfuscation_toolkit$md5(input_string text, INOUT checksum_string text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="input_string text, INOUT checksum_string text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365074" volatility="VOLATILE" is-window="f" function-identity-arguments="input_string text, INOUT checksum_string text" overload-function-count="4" proc-language="plpgsql" function-signature="dbms_obfuscation_toolkit$md5(input_string text, INOUT checksum_string text)" unique-suffix="(input_string text, INOUT checksum_string text)" routine-number="365074" comment="Generate MD5 hashes of data">
                        <complex-attribute name="sql"><![CDATA[
  BEGIN
    checksum_string := md5(input_string);
  END;
]]></complex-attribute>
                        <category _I_D="624eb5c2-9b49-4fac-b187-3ff8fde018ee" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1dab256d-fd49-4bab-9ff9-cbebb3805bb2" name="dbms_random$initialize" subcategories-loading="none" object-loading="extended" context="dbms_random$initialize" is-trigger-function="0" unique-function-name="dbms_random$initialize" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="void" function-arguments="p_seed integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365075" volatility="VOLATILE" is-window="f" function-identity-arguments="p_seed integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_random$initialize(p_seed integer)" comment="This function initializes the random number generator with a seed value.">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    PERFORM aws_oracle_ext.dbms_random$seed(p_seed);
END;
]]></complex-attribute>
                        <category _I_D="c0d0b8f9-9715-4935-a46d-36df0ef771b1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c5dfe610-327d-4547-a7a4-f57d789cef6f" name="dbms_random$normal" subcategories-loading="none" object-loading="extended" context="dbms_random$normal" is-trigger-function="0" unique-function-name="dbms_random$normal" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="float8" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365076" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_random$normal()" comment="This function returns random numbers in a standard normal distribution.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_u DOUBLE PRECISION;
    v_v DOUBLE PRECISION;
    v_s DOUBLE PRECISION;
BEGIN
    LOOP
        -- Range -1.0 <= u | v < 1.0
        v_u = random() * 2 - 1;
        v_v = random() * 2 - 1;
        v_s = power(v_u, 2) + power(v_v, 2);

        CONTINUE WHEN NOT (v_s != 0 AND v_s < 1);
        RETURN sqrt(-2 * ln(v_s) / v_s) * v_u;
    END LOOP;
END;
]]></complex-attribute>
                        <category _I_D="ef3efb79-7495-441c-af6d-cf50d8ade2ea" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0ecf0245-99dc-4b5d-b8cd-62e39a493d03" name="dbms_random$random" subcategories-loading="none" object-loading="extended" context="dbms_random$random" is-trigger-function="0" unique-function-name="dbms_random$random" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365077" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_random$random()" comment="This function generates and returns a random number. A random value greater than or equal to -power(2,31) and less than power(2,31).">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    RETURN round((random() * 4294967296 - 2147483648)::NUMERIC, 0);
END;
]]></complex-attribute>
                        <category _I_D="c558fe9a-d204-487a-9263-b923fc35e92a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8317bf0f-da2b-473b-9521-17567641b2e2" name="dbms_random$seed" subcategories-loading="none" object-loading="extended" context="dbms_random$seed(p_seed integer)" is-trigger-function="0" unique-function-name="dbms_random$seed(p_seed integer)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="void" function-arguments="p_seed integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365078" volatility="VOLATILE" is-window="f" function-identity-arguments="p_seed integer" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_random$seed(p_seed integer)" unique-suffix="(p_seed integer)" routine-number="365078" comment="This procedure resets the seed used in generating a random number.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_seedsign INTEGER := sign(p_seed);
    v_seedstr VARCHAR := rpad(to_char(abs(p_seed), 'FM9999999999'), 15, '0');
BEGIN
    PERFORM setseed(to_number(concat('0.', v_seedstr), '9.FM999999999999999999') * v_seedsign);
END;
]]></complex-attribute>
                        <category _I_D="a33b7192-49b3-413f-8ee2-376208f97b41" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b8ccf9eb-7cba-46bb-a1ac-8b1c4b29e597" name="dbms_random$seed" subcategories-loading="none" object-loading="extended" context="dbms_random$seed(p_seed text)" is-trigger-function="0" unique-function-name="dbms_random$seed(p_seed text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="p_seed text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365079" volatility="VOLATILE" is-window="f" function-identity-arguments="p_seed text" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_random$seed(p_seed text)" unique-suffix="(p_seed text)" routine-number="365079" comment="This procedure resets the seed used in generating a random number.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_seedstr TEXT := substring(translate(upper(md5(p_seed)), 'ABCDEF', '123456'), 1, 15);
BEGIN
    PERFORM setseed(to_number(concat('0.', v_seedstr), '9.FM999999999999999999'));
END;
]]></complex-attribute>
                        <category _I_D="85e38646-d405-4dd0-8243-9af31881bb0b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d78abec5-558b-4a45-bf25-97cd75f1bb9e" name="dbms_random$string" subcategories-loading="none" object-loading="extended" context="dbms_random$string" is-trigger-function="0" unique-function-name="dbms_random$string" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,double precision" is-returning-set="f" ret-datatype="text" function-arguments="p_opt text, p_len double precision" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365080" volatility="VOLATILE" is-window="f" function-identity-arguments="p_opt text, p_len double precision" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_random$string(p_opt text, p_len double precision)" comment="This function generates and returns a random string.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_srcdata VARCHAR;
BEGIN
    v_srcdata := 
        CASE upper(p_opt)
           WHEN 'L' THEN 'abcdefghijklmnopqrstuvwxyz'
           WHEN 'A' THEN 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
           WHEN 'X' THEN '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
           WHEN 'P' THEN '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:;,{}()[].*/\|?!@$&#-=_+<>"''`#%^~ '
           ELSE 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        END;

    RETURN array_to_string(
        ARRAY(SELECT substring(v_srcdata from (ceil(random() * length(v_srcdata)))::INTEGER for 1)
                FROM generate_series(1, p_len::INTEGER)),
        '');
END;
]]></complex-attribute>
                        <category _I_D="11604dab-780f-4f90-8799-82045932e8ff" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cae8e1dd-4e49-4afb-8d12-cc851a915b0a" name="dbms_random$terminate" subcategories-loading="none" object-loading="extended" context="dbms_random$terminate" is-trigger-function="0" unique-function-name="dbms_random$terminate" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365081" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_random$terminate()" comment="This function terminates the package. It should be invoked when the user is finished with the package.">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    PERFORM setseed(random());
END;
]]></complex-attribute>
                        <category _I_D="73cc6bd2-5982-4008-9061-1ca42fd4c1c0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8a04135f-fb3b-4aed-842f-c497486bf5fb" name="dbms_random$value" subcategories-loading="none" object-loading="extended" context="dbms_random$value" is-trigger-function="0" unique-function-name="dbms_random$value" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,double precision" is-returning-set="f" ret-datatype="float8" function-arguments="p_start double precision DEFAULT 0, p_high double precision DEFAULT 1" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365082" volatility="VOLATILE" is-window="f" function-identity-arguments="p_start double precision, p_high double precision" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_random$value(p_start double precision, p_high double precision)" comment="The first version of this function gets a random number greater than or equal to 0 and less than 1. The other version gets a random number &quot;x&quot;, where &quot;x&quot; is greater than or equal to a specified lower limit and less than a specified higher limit.">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    RETURN random() * (p_high - p_start) + p_start;
END;
]]></complex-attribute>
                        <category _I_D="f7b0b0cf-28ec-48d1-ba69-e05636fe1529" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b886fa5d-d843-4718-9a03-bbee1d58231f" name="dbms_session$clear_all_context" subcategories-loading="none" object-loading="extended" context="dbms_session$clear_all_context" is-trigger-function="0" unique-function-name="dbms_session$clear_all_context" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="void" function-arguments="namespace character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365089" volatility="VOLATILE" is-window="f" function-identity-arguments="namespace character varying" overload-function-count="1" proc-language="sql" function-signature="dbms_session$clear_all_context(namespace character varying)">
                        <complex-attribute name="sql"><![CDATA[
  select aws_oracle_ext.dbms_session$clear_context($1);
]]></complex-attribute>
                        <category _I_D="aca72afb-d2f8-4107-9d30-e3f2cb2b1a7b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f16295c9-ace7-4305-8de2-2a0de7a6359a" name="dbms_session$clear_context" subcategories-loading="none" object-loading="extended" context="dbms_session$clear_context" is-trigger-function="0" unique-function-name="dbms_session$clear_context" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="namespace character varying, client_id character varying DEFAULT NULL::character varying, attribute character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365088" volatility="VOLATILE" is-window="f" function-identity-arguments="namespace character varying, client_id character varying, attribute character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_session$clear_context(namespace character varying, client_id character varying, attribute character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare
  l_namespace text;
  l_attribute text;
begin	
   l_namespace := aws_oracle_ext.format_identifier_case(namespace);
   l_attribute := aws_oracle_ext.format_identifier_case(attribute);
  
   if l_namespace is null then 
   		raise exception 'input value for argument namespace is not valid';    
   end if;
  
  if l_namespace = 'CLIENTCONTEXT' then
    raise exception 'CLIENTCONTEXT namespace will be cleared automatically in the end of the session. Can not be cleared manually';    
  end if;
  
  case aws_oracle_ext.get_context_type(l_namespace) 
    when 'ACCESSED GLOBALLY' then 
    	delete from aws_oracle_context.context_global cg
    	where cg.context_namespace = l_namespace
    	and coalesce(cg.cliend_id, '') = coalesce($2, '')
    	and cg.attribute_name = coalesce(l_attribute, cg.attribute_name);         		        	
    when 'ACCESSED LOCALLY' then 
    	delete from context_local where context_namespace = l_namespace and coalesce(attribute_name, '') = coalesce(l_attribute, '');
    else raise exception 'Unsupported context type';   
  end case;
 
end;
]]></complex-attribute>
                        <category _I_D="a97d153b-5611-441c-a184-fa61f1a5ea9a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8c989b52-cdc0-44c2-a8e0-5b3cf1dd3d95" name="dbms_session$clear_identifier" subcategories-loading="none" object-loading="extended" context="dbms_session$clear_identifier" is-trigger-function="0" unique-function-name="dbms_session$clear_identifier" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365084" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_session$clear_identifier()">
                        <complex-attribute name="sql"><![CDATA[
begin
  perform aws_oracle_ext.set_extpack_variable
    (
	  variable_name => 'CLIENT_IDENTIFIER', 
	  variable_value => null::text
	);
END;
]]></complex-attribute>
                        <category _I_D="68843259-08b5-4859-a769-ebfdf81c3d6b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1033d2e5-08f5-4567-8cdf-019b51000851" name="dbms_session$free_all_resources" subcategories-loading="none" object-loading="extended" context="dbms_session$free_all_resources" is-trigger-function="0" unique-function-name="dbms_session$free_all_resources" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="366033" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_session$free_all_resources()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT 1::INTEGER;

]]></complex-attribute>
                        <category _I_D="619fc6db-6ca0-49d5-9518-f54030bd5ee4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="664674f5-08f2-4511-be7a-5504ed5e4bc2" name="dbms_session$is_role_enabled" subcategories-loading="none" object-loading="extended" context="dbms_session$is_role_enabled" is-trigger-function="0" unique-function-name="dbms_session$is_role_enabled" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="bool" function-arguments="rolename character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365085" volatility="VOLATILE" is-window="f" function-identity-arguments="rolename character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_session$is_role_enabled(rolename character varying)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  return exists (select 1 from information_schema.enabled_roles where role_name = rolename);
END;
]]></complex-attribute>
                        <category _I_D="3c96b8e6-d8be-4480-b9eb-8c60b1d06fec" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d57705f6-faa4-4f12-b880-a3a8e68fb0d5" name="dbms_session$is_session_alive" subcategories-loading="none" object-loading="extended" context="dbms_session$is_session_alive" is-trigger-function="0" unique-function-name="dbms_session$is_session_alive" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="bool" function-arguments="uniqueid integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365086" volatility="VOLATILE" is-window="f" function-identity-arguments="uniqueid integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_session$is_session_alive(uniqueid integer)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  return ((select state from pg_stat_activity where pid = uniqueid) = 'active'::text);
END;
]]></complex-attribute>
                        <category _I_D="3e5dff9a-4980-4c2d-85a6-579481d25467" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ed16ef8f-3450-40b7-8ecd-f624efddb1a4" name="dbms_session$modify_package_state" subcategories-loading="none" object-loading="extended" context="dbms_session$modify_package_state" is-trigger-function="0" unique-function-name="dbms_session$modify_package_state" is-aggregate="f" language-name="plv8" arguments-datatypes="integer" is-returning-set="f" ret-datatype="void" function-arguments="action_flags integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="366070" volatility="VOLATILE" is-window="f" function-identity-arguments="action_flags integer" overload-function-count="1" proc-language="plv8" function-signature="dbms_session$modify_package_state(action_flags integer)">
                        <complex-attribute name="sql"><![CDATA[
'use strict';
  if (typeof(require) !== 'function') {
    const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
    initColl();
  }
  const cursors = plv8.execute(`
SELECT pc.name FROM pg_catalog.pg_cursors pc where name like '%$o'
`);
  for (let i = 0; i < cursors.length; i++) {
    try{
      plv8.subtransaction(function(){
        plv8.execute(`CLOSE ${cursors[i].name}`);
      });
    } catch(e) {
    }
  }
  for (let key of Object.keys(aws_oracle_ext)) {
    if (key === 'aws_oracle_ext') continue;
    delete aws_oracle_ext[key];
  }

]]></complex-attribute>
                        <category _I_D="db987b95-97f8-4332-bb69-f20224a5bc7c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="de2f7b4c-1629-4ce5-b0e5-ce6ac5cb992b" name="dbms_session$reinitialize" subcategories-loading="none" object-loading="extended" context="dbms_session$reinitialize" is-trigger-function="0" unique-function-name="dbms_session$reinitialize" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="366034" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_session$reinitialize()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT 2::INTEGER;

]]></complex-attribute>
                        <category _I_D="868d234a-16c6-41e5-b3b7-3ca1e6278563" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a32f2c42-9201-49a6-9df6-f8773100dc0d" name="dbms_session$reset_package" subcategories-loading="none" object-loading="extended" context="dbms_session$reset_package" is-trigger-function="0" unique-function-name="dbms_session$reset_package" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="366071" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_session$reset_package()">
                        <complex-attribute name="sql"><![CDATA[
SELECT aws_oracle_ext.dbms_session$modify_package_state(1::INTEGER);
]]></complex-attribute>
                        <category _I_D="d876cbaf-8465-4748-8949-073b596acf10" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9fdd025e-7092-4c9a-a0e4-a94590b1a2d4" name="dbms_session$set_context" subcategories-loading="none" object-loading="extended" context="dbms_session$set_context" is-trigger-function="0" unique-function-name="dbms_session$set_context" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="namespace character varying, attribute character varying, value character varying, username character varying DEFAULT NULL::character varying, client_id character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365794" volatility="VOLATILE" is-window="f" function-identity-arguments="namespace character varying, attribute character varying, value character varying, username character varying, client_id character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_session$set_context(namespace character varying, attribute character varying, value character varying, username character varying, client_id character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  l_key text;
  l_context_type text; 
  l_crypted text;
  l_interval text;
  l_namespace text;
  l_attribute text;
BEGIN
  if namespace is null or attribute is null then 
    raise exception 'invalid input values';  
  end if; 
  
  
  l_namespace := aws_oracle_ext.format_identifier_case(namespace);
  l_attribute := aws_oracle_ext.format_identifier_case(attribute);
  
  if l_namespace = 'CLIENTCONTEXT' then 
    perform  aws_oracle_ext.set_extpack_variable
                                (
                                 variable_name => l_namespace||'_'||l_attribute, 
                                 variable_value => value
                                );
  else 
   	perform aws_oracle_ext.init_context_struct();  
    l_key := aws_oracle_ext.get_context_param('key');  
    l_context_type := aws_oracle_ext.get_context_type(l_namespace);   
    l_crypted := crypt(value || ':' || l_key, gen_salt('bf'));   
 	
   	
   	case upper(l_context_type) 
	  	when 'ACCESSED LOCALLY' then 
	  		begin
				insert into context_local(
				  context_namespace, 
				  attribute_name, 
				  attribute_value, 
				  user_name, 
				  cliend_id, 
				  signature
				)
				values (
				  l_namespace, 
				  l_attribute, 
				  $3, 
				  $4, 
				  coalesce($5, aws_oracle_ext.sys_context_userenv('CLIENT_IDENTIFIER')), 
				  l_crypted
				) 
				on conflict (context_namespace, attribute_name) do 
				update set 
					attribute_value = excluded.attribute_value,
					signature = excluded.signature;
		  	end;
	  	when 'ACCESSED GLOBALLY' then	  
	  		begin
					
				delete from aws_oracle_context.context_global 
			    where backend_start <= now()::timestamp - (coalesce(aws_oracle_ext.get_context_param('auto_clean_interval'), '1 day'))::interval;

				insert into aws_oracle_context.context_global(
				  context_namespace, 
				  attribute_name, 
				  attribute_value, 
				  user_name, 
				  cliend_id, 
				  signature
				)
				values (
				  l_namespace, 
				  l_attribute, 
				  $3, 
				  $4, 
				  coalesce($5, aws_oracle_ext.sys_context_userenv('CLIENT_IDENTIFIER')), 
				  l_crypted
				) 
				on conflict (context_namespace, attribute_name, cliend_id) do 
				update set 
					attribute_value = excluded.attribute_value,
					signature = excluded.signature;
		  	end;  
	  	else 
			-- INITIALIZED EXTERNALLY, INITIALIZED GLOBALLY  	
	  		raise exception 'unsupported context type: %', l_context_type;
	  end case;    
  end if;
 
  exception 
    when no_data_found then raise exception 'Context % is not found', l_namespace;  
END;
]]></complex-attribute>
                        <category _I_D="de7efca0-681d-4ba9-8f0a-6cb319eb80ca" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="30befbfd-be6f-473a-b8fe-c712af35c599" name="dbms_session$set_identifier" subcategories-loading="none" object-loading="extended" context="dbms_session$set_identifier" is-trigger-function="0" unique-function-name="dbms_session$set_identifier" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="void" function-arguments="client_id character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365083" volatility="VOLATILE" is-window="f" function-identity-arguments="client_id character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_session$set_identifier(client_id character varying)">
                        <complex-attribute name="sql"><![CDATA[
begin
  perform  aws_oracle_ext.set_extpack_variable
   (
      variable_name => 'CLIENT_IDENTIFIER', 
      variable_value => client_id
   ); 
END;
]]></complex-attribute>
                        <category _I_D="d6e92a5c-86a7-459d-8794-f31b33a80f2b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="331da492-6f47-4dd2-9608-a3ff4164cfbb" name="dbms_session$set_nls" subcategories-loading="none" object-loading="extended" context="dbms_session$set_nls" is-trigger-function="0" unique-function-name="dbms_session$set_nls" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="param character varying, val character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365087" volatility="VOLATILE" is-window="f" function-identity-arguments="param character varying, val character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_session$set_nls(param character varying, val character varying)">
                        <complex-attribute name="sql"><![CDATA[
begin
  perform  aws_oracle_ext.set_extpack_variable
   (
      variable_name => upper(param), 
      variable_value => val
   ); 
	
	
  if upper(param) = 'NLS_LANGUAGE' then
   
    perform  aws_oracle_ext.set_extpack_variable
     (
        variable_name => 'NLS_DATE_LANGUAGE', 
        variable_value => val
     );    

    
    perform  aws_oracle_ext.set_extpack_variable
     (
        variable_name => 'NLS_SORT', 
        variable_value => val
     );    
    
  end if;
END;
]]></complex-attribute>
                        <category _I_D="9a7577d8-0ccb-4722-b72a-8b2085454ae2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="742f767c-3656-4b48-87e1-0510ecf2c71a" name="dbms_sql$bind_variable" subcategories-loading="none" object-loading="extended" context="dbms_sql$bind_variable" is-trigger-function="0" unique-function-name="dbms_sql$bind_variable" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,character varying,anyelement,integer" is-returning-set="f" ret-datatype="void" function-arguments="p_cursor_id integer, p_var_name character varying, p_var_value anyelement, p_value_size integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365094" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer, p_var_name character varying, p_var_value anyelement, p_value_size integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$bind_variable(p_cursor_id integer, p_var_name character varying, p_var_value anyelement, p_value_size integer)" comment="The procedure binds a given value to a given variable in a cursor (identified by cursor_id), based on the name of the variable in the statement.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_var_pos INTEGER;
    v_var_info TEXT[];
    v_chr_val TEXT;
    v_num_val NUMERIC;
    v_money_val MONEY;
    v_tstamp_val TIMESTAMP WITHOUT TIME ZONE;
    v_tstamptz_val TIMESTAMP WITH TIME ZONE;
    v_interval_val INTERVAL;
    v_bool_val BOOLEAN;
    v_xml_val XML;
    v_bin_val BYTEA;
    v_var_size INTEGER;
    v_value_size INTEGER;
    v_is_fixed SMALLINT;
    v_out_base_type VARCHAR;
    v_out_data_type VARCHAR := upper(pg_typeof(p_var_value)::VARCHAR);
BEGIN
    /* Requires next functions to be installed in "aws_oracle_ext" schema:
       - dbms_sql$is_open.
    */

    -- Exit from procedure if the cursor (cursor_id) is not opened
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    -- Variable name should not be empty (null)
    ELSEIF (p_var_name IS NULL) THEN
        RAISE null_value_not_allowed;
    END IF;

    IF (v_out_data_type IN ('TEXT',
                            'CHARACTER',
                            'CHARACTER VARYING'))
    THEN
        v_out_base_type := 'TEXT';
        v_chr_val := p_var_value::TEXT;
        v_var_size := coalesce(length(p_var_value::BYTEA, pg_client_encoding()), 0);
        v_value_size := coalesce(p_value_size, v_var_size);
    ELSIF (v_out_data_type IN ('REAL',
                               'BIGINT',
                               'INTEGER',
                               'NUMERIC',
                               'DECIMAL',
                               'SMALLINT',
                               'DOUBLE PRECISION'))
    THEN
        v_out_base_type := 'NUMERIC';
        v_num_val := p_var_value::NUMERIC;
    ELSIF (v_out_data_type = 'MONEY') THEN
        v_out_base_type := 'MONEY';
        v_money_val := p_var_value;
    ELSIF (v_out_data_type IN ('DATE',
                               'TIMESTAMP WITHOUT TIME ZONE'))
    THEN
        v_out_base_type := 'TIMESTAMP WITHOUT TIME ZONE';
        v_tstamp_val := p_var_value::TIMESTAMP WITHOUT TIME ZONE;
    ELSIF (v_out_data_type = 'TIMESTAMP WITH TIME ZONE') THEN
        v_out_base_type := 'TIMESTAMP WITH TIME ZONE';
        v_tstamptz_val := p_var_value;
    ELSIF (v_out_data_type = 'INTERVAL') THEN
        v_out_base_type := 'INTERVAL';
        v_interval_val := p_var_value;
    ELSIF (v_out_data_type = 'BOOLEAN') THEN
        v_out_base_type := 'BOOLEAN';
        v_bool_val := p_var_value;
    ELSIF (v_out_data_type = 'XML') THEN
        v_out_base_type := 'XML';
        v_xml_val := p_var_value;
    ELSIF (v_out_data_type = 'BYTEA') THEN
        v_out_base_type := 'BYTEA';
        v_bin_val := p_var_value;
        v_var_size := coalesce(octet_length(p_var_value), 0);
        v_value_size := coalesce(p_value_size, v_var_size);
    ELSE RETURN;
    END IF;

    -- Extracting variable info (label in statement code and general name) from supplied string
    v_var_info := regexp_matches(p_var_name, '^((?:[[:space:]]*\$[[:digit:]]+[[:space:]]*(?:\|)?)+)*[[:space:]]*\:?([[:alnum:]_]+)[[:space:]]*$', 'gi');
    v_var_info[1] := rtrim(v_var_info[1], '|');

    -- Determining next variable position
    SELECT coalesce(MAX(var_pos), 0) + 1
      INTO v_var_pos
      FROM dbms_sql$bind_variable
     WHERE cursor_id = p_cursor_id;

    -- Binding variable to cursor (identified by cursor_id)
    INSERT INTO dbms_sql$bind_variable (cursor_id,
                                        var_pos,
                                        var_name,
                                        var_label,
                                        data_type,
                                        base_type,
                                        var_size,
                                        value_size,
                                        is_fixed,
                                        chr_val,
                                        num_val,
                                        money_val,
                                        tstamp_val,
                                        tstamptz_val,
                                        interval_val,
                                        bool_val,
                                        xml_val,
                                        bin_val)
         VALUES (p_cursor_id,
                 v_var_pos,
                 v_var_info[2], -- Variable name
                 v_var_info[1], -- Variable label list
                 v_out_data_type,
                 v_out_base_type,
                 v_var_size,
                 v_value_size,
                 v_is_fixed,
                 v_chr_val,
                 v_num_val,
                 v_money_val,
                 v_tstamp_val,
                 v_tstamptz_val,
                 v_interval_val,
                 v_bool_val,
                 v_xml_val,
                 v_bin_val)
    ON CONFLICT (cursor_id, var_name)
    DO UPDATE SET var_label = v_var_info[1],
                  data_type = v_out_data_type,
                  base_type = v_out_base_type,
                  var_size = v_var_size,
                  value_size = v_value_size,
                  is_fixed = v_is_fixed,
                  chr_val = v_chr_val,
                  num_val = v_num_val,
                  money_val = v_money_val,
                  tstamp_val = v_tstamp_val,
                  tstamptz_val = v_tstamptz_val,
                  interval_val = v_interval_val,
                  bool_val = v_bool_val,
                  xml_val = v_xml_val,
                  bin_val = v_bin_val;
EXCEPTION
    -- Cursor isn't opened or doesn't exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := format('Cursor_id (%s) does not exist or incorrect.', p_cursor_id),
                    DETAIL := format('Cursor_id (%s) is not found, SQL statement text was not associated with it.', p_cursor_id),
                    HINT := format('Make sure that cursor_id (%s) exists or perform ''dbms_sql$open_cursor'' procedure to get a new one.', p_cursor_id);
    -- Variable name is empty (null)
    WHEN null_value_not_allowed THEN
        RAISE USING MESSAGE := 'Bind variable name is empty.',
                    DETAIL := 'Could not bind a value to a variable without name. Oracle error ''ORA-01006''.',
                    HINT := 'Pass in an existing variable name in order to bind a value to it.';
END;
]]></complex-attribute>
                        <category _I_D="8839d577-66ef-474a-9de0-d18b244c13b2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bfb94439-78f3-4f8b-b9a1-3f70597b6ecc" name="dbms_sql$bind_variable_char" subcategories-loading="none" object-loading="extended" context="dbms_sql$bind_variable_char" is-trigger-function="0" unique-function-name="dbms_sql$bind_variable_char" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,character varying,anyelement,integer" is-returning-set="f" ret-datatype="void" function-arguments="p_cursor_id integer, p_var_name character varying, p_var_value anyelement, p_value_size integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365092" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer, p_var_name character varying, p_var_value anyelement, p_value_size integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$bind_variable_char(p_cursor_id integer, p_var_name character varying, p_var_value anyelement, p_value_size integer)" comment="The procedure binds a given value to a given variable in a cursor (identified by cursor_id), based on the name of the variable in the statement. Variation for variables containing CHAR data.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_var_pos INTEGER;
    v_var_info TEXT[];
    v_chr_val TEXT;
    v_var_size INTEGER;
    v_value_size INTEGER;
    v_datetime_mask VARCHAR;
    v_is_fixed SMALLINT := 1;
    v_out_base_type VARCHAR := 'TEXT';
    v_var_datatype VARCHAR := 'CHARACTER VARYING';
    v_out_data_type VARCHAR := upper(pg_typeof(p_var_value)::VARCHAR);
BEGIN
    /* Requires next functions to be installed in "aws_oracle_ext" schema:
       - dbms_sql$is_open.
    */

    -- Exit from procedure if the cursor (cursor_id) is not opened
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    -- Variable name should not be empty (null)
    ELSEIF (p_var_name IS NULL) THEN
        RAISE null_value_not_allowed;
    END IF;

    -- Casting input value to a character string
    IF (v_out_data_type IN ('TEXT',
                            'CHARACTER',
                            'CHARACTER VARYING'))
    THEN
        v_var_datatype := v_out_data_type;
        v_chr_val := p_var_value::TEXT;
        v_var_size := coalesce(length(p_var_value::BYTEA, pg_client_encoding()), 0);
    ELSIF (v_out_data_type IN ('XML',
                               'MONEY',
                               'REAL',
                               'BIGINT',
                               'INTEGER',
                               'NUMERIC',
                               'DECIMAL',
                               'SMALLINT',
                               'DOUBLE PRECISION',
                               'INTERVAL'))
    THEN
        v_chr_val := p_var_value::TEXT;
    ELSIF (v_out_data_type IN ('DATE',
                               'TIMESTAMP WITHOUT TIME ZONE',
                               'TIMESTAMP WITH TIME ZONE'))
    THEN
        v_datetime_mask := CASE v_outvar_datatype
                              WHEN 'DATE' THEN 'DD-MON-YY'
                              ELSE 'DD-MON-YY HH24:MI:SS.US'
                           END;

        v_chr_val := to_char(p_var_value, v_datetime_mask);
    ELSIF (v_out_data_type = 'BYTEA') THEN
        v_var_datatype := 'TEXT';
        v_chr_val := upper(encode(p_var_value, 'hex'));
    ELSE RETURN;
    END IF;

    v_var_size := coalesce(v_var_size, coalesce(char_length(v_chr_val), 0));
    v_value_size := coalesce(p_value_size, v_var_size);

    -- Extracting variable info (label in statement code and general name) from supplied string
    v_var_info := regexp_matches(p_var_name, '^((?:[[:space:]]*\$[[:digit:]]+[[:space:]]*(?:\|)?)+)*[[:space:]]*\:?([[:alnum:]_]+)[[:space:]]*$', 'gi');
    v_var_info[1] := rtrim(v_var_info[1], '|');

    -- Determining next variable position
    SELECT coalesce(MAX(var_pos), 0) + 1
      INTO v_var_pos
      FROM dbms_sql$bind_variable
     WHERE cursor_id = p_cursor_id;

    -- Binding variable to cursor (identified by cursor_id)
    INSERT INTO dbms_sql$bind_variable (cursor_id,
                                        var_pos,
                                        var_name,
                                        var_label,
                                        data_type,
                                        base_type,
                                        var_size,
                                        value_size,
                                        is_fixed,
                                        chr_val)
         VALUES (p_cursor_id,
                 v_var_pos,
                 v_var_info[2], -- Variable name
                 v_var_info[1], -- Variable label list
                 v_var_datatype,
                 v_out_base_type,
                 v_var_size,
                 v_value_size,
                 v_is_fixed,
                 v_chr_val)
    ON CONFLICT (cursor_id, var_name)
    DO UPDATE SET var_label = v_var_info[1],
                  data_type = v_var_datatype,
                  base_type = v_out_base_type,
                  value_size = v_value_size,
                  is_fixed = v_is_fixed,
                  chr_val = v_chr_val;
EXCEPTION
    -- Cursor isn't opened or doesn't exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := format('Cursor_id (%s) does not exist or incorrect.', p_cursor_id),
                    DETAIL := format('Cursor_id (%s) is not found, SQL statement text was not associated with it.', p_cursor_id),
                    HINT := format('Make sure that cursor_id (%s) exists or perform ''dbms_sql$open_cursor'' procedure to get a new one.', p_cursor_id);
    -- Variable name is empty (null)
    WHEN null_value_not_allowed THEN
        RAISE USING MESSAGE := 'Bind variable name is empty.',
                    DETAIL := 'Could not bind a value to a variable without name. Oracle error ''ORA-01006''.',
                    HINT := 'Pass in an existing variable name in order to bind a value to it.';
END;
]]></complex-attribute>
                        <category _I_D="25b5dc50-adca-4a3c-8803-3946d6b3b2c7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b630329e-a3c9-4479-bb65-fc7a8dd0fbbc" name="dbms_sql$close_cursor" subcategories-loading="none" object-loading="extended" context="dbms_sql$close_cursor" is-trigger-function="0" unique-function-name="dbms_sql$close_cursor" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="numeric" function-arguments="INOUT p_cursor_id numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365096" volatility="VOLATILE" is-window="f" function-identity-arguments="INOUT p_cursor_id numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$close_cursor(INOUT p_cursor_id numeric)" comment="The procedure closes a given cursor (identified by cursor_id). The memory allocated to the cursor is released and you can no longer fetch from that cursor.">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    /* Requires functions to be installed in "aws_oracle_ext" schema:
       - dbms_sql$is_open;
       - set_package_variable.
    */

    -- Exit from function if the cursor (cursor_id) is not opened
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id::INTEGER)) THEN
        RAISE invalid_cursor_state;
    END IF;

    -- Deleting related data from all temp tables
    DELETE FROM dbms_sql$cursor
          WHERE cursor_id = p_cursor_id::INTEGER;

    -- Cleaning cursor metadata (JSON)
    PERFORM aws_oracle_ext.set_package_variable('aws_oracle_ext', -- schema name
                                                'dbms_sql', -- package name
                                                concat('cursor_id_', p_cursor_id, '_metadata'), -- context "cursor_id_xxx"
                                                NULL::VARCHAR); -- cursor metadata JSON
    p_cursor_id := NULL;
EXCEPTION
    -- Cursor isn't opened or doesn't exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := format('Cursor_id (%s) does not exist or incorrect.', p_cursor_id),
                    DETAIL := format('Cursor_id (%s) is not found, SQL statement text was not associated with it.', p_cursor_id),
                    HINT := format('Make sure that cursor_id (%s) exists or perform ''dbms_sql$open_cursor'' procedure to get a new one.', p_cursor_id);
END;
]]></complex-attribute>
                        <category _I_D="cef2b748-3da0-4547-9ee3-327088e91fc4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="29c53f67-59cf-4f06-9310-0e7aaae2d899" name="dbms_sql$column_value" subcategories-loading="none" object-loading="extended" context="dbms_sql$column_value" is-trigger-function="0" unique-function-name="dbms_sql$column_value" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,integer,anyelement,numeric,numeric" is-returning-set="f" ret-datatype="record" function-arguments="p_cursor_id integer, p_column_pos integer, INOUT p_column_val anyelement, INOUT p_column_err numeric DEFAULT NULL::numeric, INOUT p_actual_len numeric DEFAULT NULL::numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365101" volatility="STABLE" is-window="f" function-identity-arguments="p_cursor_id integer, p_column_pos integer, INOUT p_column_val anyelement, INOUT p_column_err numeric, INOUT p_actual_len numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$column_value(p_cursor_id integer, p_column_pos integer, INOUT p_column_val anyelement, INOUT p_column_err numeric, INOUT p_actual_len numeric)" comment="This procedure returns the value of the cursor element for a given position in a given cursor (identified by cursor_id). This procedure is used to access the data fetched by calling 'dbms_sql$fetch_rows' function.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
    v_defcol_data JSONB;
    v_col_size INTEGER;
    v_chr_val TEXT;
    v_num_val NUMERIC;
    v_money_val MONEY;
    v_tstamp_val TIMESTAMP WITHOUT TIME ZONE;
    v_tstamptz_val TIMESTAMP WITH TIME ZONE;
    v_interval_val INTERVAL;
    v_bool_val BOOLEAN;
    v_xml_val XML;
    v_bin_val BYTEA;
    v_col_data_type VARCHAR;
    v_col_base_type VARCHAR;
    v_out_base_type VARCHAR;
    v_out_data_type VARCHAR := upper(pg_typeof(p_column_val)::VARCHAR);
BEGIN
    /* Requires functions to be installed in "aws_oracle_ext" schema:
       - dbms_sql$is_open;
       - get_package_variable.
    */

    -- Exit from function if the cursor (cursor_id) is not opened
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    END IF;

    -- Getting cursor metadata (JSON)
    v_cur_metadata := aws_oracle_ext.get_package_variable('aws_oracle_ext', -- schema name
                                                          'dbms_sql', -- package name
                                                          concat('cursor_id_', p_cursor_id, '_metadata')); -- context "cursor_id_xxx"

    -- Getting dynamic SQL statement defined columns info (JSON)
    v_defcol_data := (v_cur_metadata #> concat('{defcols_data, ', 'col_', p_column_pos, '}')::TEXT[])::JSONB;

    v_col_data_type := (v_defcol_data ->> 'data_type')::VARCHAR; -- Column data type
    v_col_base_type := (v_defcol_data ->> 'base_type')::VARCHAR; -- Column base data type
    v_col_size := (v_defcol_data ->> 'col_size')::INTEGER; -- Column size in characters

    -- Determining base data type of passed variable
    v_out_base_type :=
        CASE
           WHEN v_out_data_type IN ('TEXT',
                                    'CHARACTER',
                                    'CHARACTER VARYING') THEN 'TEXT'
           WHEN v_out_data_type IN ('REAL',
                                    'BIGINT',
                                    'INTEGER',
                                    'NUMERIC',
                                    'DECIMAL',
                                    'SMALLINT',
                                    'DOUBLE PRECISION') THEN 'NUMERIC'
           WHEN v_out_data_type = 'MONEY' THEN 'MONEY'
           WHEN v_out_data_type IN ('DATE',
                                    'TIMESTAMP WITHOUT TIME ZONE') THEN 'TIMESTAMP WITHOUT TIME ZONE'
           WHEN v_out_data_type = 'TIMESTAMP WITH TIME ZONE' THEN 'TIMESTAMP WITH TIME ZONE'
           WHEN v_out_data_type = 'INTERVAL' THEN 'INTERVAL'
           WHEN v_out_data_type = 'BOOLEAN' THEN 'BOOLEAN'
           WHEN v_out_data_type = 'XML' THEN 'XML'
           WHEN v_out_data_type = 'BYTEA' THEN 'BYTEA'
        END;

    -- Default vars states
    p_column_val := NULL;
    p_column_err := 0;
    p_actual_len := 0;

    -- Column position should be declared in SELECT list
    IF (v_col_base_type IS NULL) THEN
        RAISE null_value_not_allowed;
    -- Check if OUT argument base type matches declared column base type
    ELSIF (substring(v_out_base_type, 1, 14) != substring(v_col_base_type, 1, 14)) THEN
        RAISE datatype_mismatch;
    -- Variable should not be declared using "dbms_sql$define_column_char"
    ELSIF ((v_defcol_data ->> 'is_fixed')::SMALLINT = 1) THEN
        RAISE most_specific_type_mismatch;
    -- If current row not specified, then nothing to return
    ELSIF ((v_cur_metadata ->> 'curr_row') IS NULL) THEN
        RETURN;
    END IF;

    /* Extracting row data from execution results
       table "dbms_sql$recordset"
       (by cursor id, row number, column position)
    */
    SELECT chr_val,
           num_val,
           money_val,
           tstamp_val,
           tstamptz_val,
           interval_val,
           bool_val,
           xml_val,
           bin_val
      INTO v_chr_val,
           v_num_val,
           v_money_val,
           v_tstamp_val,
           v_tstamptz_val,
           v_interval_val,
           v_bool_val,
           v_xml_val,
           v_bin_val
      FROM dbms_sql$recordset
     WHERE cursor_id = p_cursor_id
       AND rownum = (v_cur_metadata ->> 'curr_row')::INTEGER
       AND column_pos = p_column_pos;

    -- Casting data type and copying value into the OUT argument
    IF (v_out_base_type = 'TEXT') THEN
        p_actual_len := coalesce(char_length(v_chr_val), 0);

        IF (v_col_size IS NULL) THEN
            p_column_val := v_chr_val;
        ELSE
            p_column_val := substring(v_chr_val, 1, v_col_size);
            IF (v_col_size != 0 AND v_col_size < p_actual_len)
            THEN
                p_column_err := 1406;
            END IF;
        END IF;
    ELSIF (v_out_base_type = 'NUMERIC') THEN
        p_column_val := v_num_val;
        p_actual_len := CASE
                           WHEN v_col_data_type = 'SMALLINT' THEN 2
                           WHEN v_col_data_type IN ('INTEGER', 'REAL') THEN 4
                           ELSE 8
                        END;
    ELSIF (v_out_base_type = 'MONEY') THEN
        p_column_val := v_money_val;
        p_actual_len := coalesce(char_length(v_money_val::VARCHAR), 0);
    ELSIF (v_out_base_type = 'TIMESTAMP WITHOUT TIME ZONE') THEN
        IF (v_col_base_type = 'TIMESTAMP WITH TIME ZONE') THEN
            p_column_val := v_tstamptz_val::TIMESTAMP WITHOUT TIME ZONE;
        ELSE
            p_column_val := v_tstamp_val;
        END IF;

        IF (v_col_data_type = 'DATE') THEN
            p_actual_len := 9;
        ELSE
            p_actual_len := 35;
        END IF;
    ELSIF (v_out_base_type = 'TIMESTAMP WITH TIME ZONE') THEN
        IF (v_col_base_type = 'TIMESTAMP WITHOUT TIME ZONE') THEN
            p_column_val := v_tstamp_val::TIMESTAMP WITH TIME ZONE;
        ELSE
            p_column_val := v_tstamptz_val;
        END IF;

        p_actual_len := 35;
    ELSIF (v_out_base_type = 'INTERVAL') THEN
        p_column_val := v_interval_val;
        p_actual_len := coalesce(char_length(v_interval_val::VARCHAR), 0);
    ELSIF (v_out_base_type = 'BOOLEAN') THEN
        p_column_val := v_bool_val;
        p_actual_len := coalesce(char_length(v_bool_val::VARCHAR), 0);
    ELSIF (v_out_base_type = 'XML') THEN
        p_column_val := v_xml_val;
        p_actual_len := coalesce(char_length(v_xml_val::TEXT), 0);
    ELSIF (v_out_base_type = 'BYTEA') THEN
        p_column_val := substring(v_bin_val from 1 for v_col_size);
        p_actual_len := coalesce(octet_length(v_bin_val), 0);
    END IF;

    IF (p_column_val IS NULL) THEN
        p_column_err := 1405;
    END IF;
EXCEPTION
    -- Cursor isn't opened or doesn't exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := format('Cursor_id (%s) does not exist or incorrect.', p_cursor_id),
                    DETAIL := format('Cursor_id (%s) is not found, SQL statement text was not associated with it.', p_cursor_id),
                    HINT := format('Make sure that cursor_id (%s) exists or perform ''dbms_sql$open_cursor'' procedure to get a new one.', p_cursor_id);
    -- Column position is not declared in SELECT list
    WHEN null_value_not_allowed THEN
        RAISE USING MESSAGE := 'Column position not declared in SELECT list.',
                    DETAIL := 'Supplied column position is NULL or zero. Oracle error ''ORA-01007: column not in select list''.',
                    HINT := format('Make sure that supplied column position was previously declared by ''dbms_sql$define_column'' procedure for cursor_id (%s).', p_cursor_id);
    -- OUT argument base type doesn't match declared column base type
    WHEN datatype_mismatch THEN
        RAISE USING MESSAGE := format('Type of OUT argument doesn''t match declared type of column (%s), cursor_id (%s).', p_column_pos, p_cursor_id),
                    DETAIL := format('OUT argument type %s, column type %s. Oracle error ''ORA-06562: type of OUT argument must match type of column or bind variable''.',
                                     v_out_data_type, v_col_base_type),
                    HINT := format('Make sure that supplied OUT argument type match that for cursor_id (%s) column (%s).', p_cursor_id, p_column_pos);
    -- Variable was declared using "dbms_sql$define_column_char"
    WHEN most_specific_type_mismatch THEN
        RAISE USING MESSAGE := format('Type of OUT argument doesn''t match declared column type, cursor_id (%s).', p_cursor_id),
                    DETAIL := 'Oracle error ''ORA-06562: type of OUT argument must match type of column or bind variable',
                    HINT := format('Try to use ''dbms_sql$column_value_char'' procedure to get column (%s) value for cursor_id (%s).',
                                   p_column_pos, p_cursor_id);
END;
]]></complex-attribute>
                        <category _I_D="3ab7f04b-0f56-416e-96d0-126e59650c0e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b1e5a6fd-f6a5-4288-b175-fa1e0312ef3e" name="dbms_sql$column_value_char" subcategories-loading="none" object-loading="extended" context="dbms_sql$column_value_char" is-trigger-function="0" unique-function-name="dbms_sql$column_value_char" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,integer,anyelement,numeric,numeric" is-returning-set="f" ret-datatype="record" function-arguments="p_cursor_id integer, p_column_pos integer, INOUT p_column_val anyelement, INOUT p_column_err numeric DEFAULT NULL::numeric, INOUT p_actual_len numeric DEFAULT NULL::numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365097" volatility="STABLE" is-window="f" function-identity-arguments="p_cursor_id integer, p_column_pos integer, INOUT p_column_val anyelement, INOUT p_column_err numeric, INOUT p_actual_len numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$column_value_char(p_cursor_id integer, p_column_pos integer, INOUT p_column_val anyelement, INOUT p_column_err numeric, INOUT p_actual_len numeric)" comment="This procedure returns the value of the cursor element for a given position in a given cursor (identified by cursor_id). This procedure is used to access the data fetched by calling 'dbms_sql$fetch_rows' function. Variation for columns containing CHAR data.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
    v_defcol_data JSONB;
    v_curcol_data JSONB;
    v_col_size INTEGER;
    v_chr_val TEXT;
    v_num_val NUMERIC;
    v_money_val MONEY;
    v_tstamp_val TIMESTAMP WITHOUT TIME ZONE;
    v_tstamptz_val TIMESTAMP WITH TIME ZONE;
    v_interval_val INTERVAL;
    v_bool_val BOOLEAN;
    v_xml_val XML;
    v_bin_val BYTEA;
    v_col_data_type VARCHAR;
    v_datetime_mask VARCHAR;
    v_out_var_size INTEGER;
    v_out_data_type VARCHAR := upper(pg_typeof(p_column_val)::VARCHAR);
BEGIN
    /* Requires functions to be installed in "aws_oracle_ext" schema:
       - dbms_sql$is_open;
       - get_package_variable.
    */

    -- Exit from function if the cursor (cursor_id) is not opened
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    END IF;

    -- Getting cursor metadata (JSON)
    v_cur_metadata := aws_oracle_ext.get_package_variable('aws_oracle_ext', -- schema name
                                                          'dbms_sql', -- package name
                                                          concat('cursor_id_', p_cursor_id, '_metadata')); -- context "cursor_id_xxx"

    -- Getting dynamic SQL statement defined and actual columns info (JSON)
    v_defcol_data := (v_cur_metadata #> concat('{defcols_data, ', 'col_', p_column_pos, '}')::TEXT[])::JSONB;
    v_curcol_data := (v_cur_metadata #> concat('{curcols_data, ', 'col_', p_column_pos, '}')::TEXT[])::JSONB;

    v_col_size := (v_defcol_data ->> 'col_size')::INTEGER; -- Column size in characters
    v_col_data_type := (v_curcol_data ->> 'data_type')::VARCHAR; -- Column (actual) data type

    -- Default vars states
    p_column_err := 0;
    p_actual_len := 0;

    -- Column position should be declared in SELECT list
    IF ((v_defcol_data ->> 'is_fixed') IS NULL) THEN
        RAISE null_value_not_allowed;
    -- Variable should not be declared using "dbms_sql$define_column"
    ELSIF ((v_defcol_data ->> 'is_fixed')::SMALLINT != 1) THEN
        RAISE most_specific_type_mismatch;
    -- If current row not specified, then nothing to return
    ELSIF ((v_cur_metadata ->> 'curr_row') IS NULL) THEN
        RETURN;
    END IF;

    /* Extracting row data from execution results
       table "dbms_sql$recordset"
       (by cursor id, row number, column position)
    */
    SELECT chr_val,
           num_val,
           money_val,
           tstamp_val,
           tstamptz_val,
           interval_val,
           bool_val,
           xml_val,
           bin_val
      INTO v_chr_val,
           v_num_val,
           v_money_val,
           v_tstamp_val,
           v_tstamptz_val,
           v_interval_val,
           v_bool_val,
           v_xml_val,
           v_bin_val
      FROM dbms_sql$recordset
     WHERE cursor_id = p_cursor_id
       AND rownum = (v_cur_metadata ->> 'curr_row')::INTEGER
       AND column_pos = p_column_pos;

    -- Casting column data to a character string
    IF (v_col_data_type IN ('REAL',
                            'BIGINT',
                            'INTEGER',
                            'NUMERIC',
                            'DECIMAL',
                            'SMALLINT',
                            'DOUBLE PRECISION'))
    THEN
        v_chr_val := v_num_val::TEXT;
    ELSIF (v_col_data_type = 'MONEY') THEN
        v_chr_val := v_money_val::TEXT;
    ELSIF (v_col_data_type IN ('DATE',
                               'TIMESTAMP WITHOUT TIME ZONE'))
    THEN
        v_datetime_mask := CASE v_col_data_type
                              WHEN 'DATE' THEN 'DD-MON-YY'
                              ELSE 'DD-MON-YY HH24:MI:SS.US'
                           END;

        v_chr_val := to_char(v_tstamp_val, v_datetime_mask);
    ELSIF (v_col_data_type = 'TIMESTAMP WITH TIME ZONE') THEN
        v_chr_val := to_char(tstamptz_val, 'DD-MON-YY HH24:MI:SS.US');
    ELSIF (v_col_data_type = 'INTERVAL') THEN
        v_chr_val := v_interval_val::TEXT;
    ELSIF (v_col_data_type = 'BOOLEAN') THEN
        v_chr_val := CASE
                        WHEN v_bool_val THEN 'TRUE'
                        ELSE 'FALSE'
                     END;
    ELSIF (v_col_data_type = 'XML') THEN
        v_chr_val := v_xml_val::TEXT;
    ELSIF (v_col_data_type = 'BYTEA') THEN
        v_chr_val := upper(encode(v_bin_val, 'hex'));
    END IF;

    p_actual_len := coalesce(char_length(v_chr_val), 0);
    IF (v_col_size != 0 AND v_col_size < p_actual_len)
    THEN
        p_column_err := 1406;
    END IF;

    v_chr_val := CASE
                    WHEN v_col_size IS NULL THEN v_chr_val
                    ELSE substring(v_chr_val, 1, v_col_size)
                 END;

    IF (v_chr_val IS NULL) THEN
        p_column_err := 1405;
    END IF;

    -- Copying value into the OUT argument
    IF (v_out_data_type IN ('TEXT',
                            'CHARACTER',
                            'CHARACTER VARYING'))
    THEN
        v_out_var_size := coalesce(length(p_column_val::BYTEA, pg_client_encoding()), 0);

        IF (v_out_data_type != 'CHARACTER') THEN
            p_column_val := v_chr_val;
        ELSIF (v_out_var_size != 0) THEN
            IF (v_out_var_size < p_actual_len) THEN
                RAISE string_data_length_mismatch;
            END IF;

            p_column_val := rpad(v_chr_val, v_out_var_size, ' ');
        ELSE
            p_column_val := v_chr_val;
        END IF;
    ELSIF (v_out_data_type IN ('REAL',
                               'BIGINT',
                               'INTEGER',
                               'NUMERIC',
                               'DECIMAL',
                               'SMALLINT',
                               'DOUBLE PRECISION'))
    THEN
        p_column_val := trim(v_chr_val)::NUMERIC;
    ELSIF (v_out_data_type IN ('DATE',
                               'TIMESTAMP WITHOUT TIME ZONE',
                               'TIMESTAMP WITH TIME ZONE'))
    THEN
        p_column_val := CASE v_out_data_type
                          WHEN 'DATE' THEN to_date(v_chr_val, 'DD-MON-YY')
                          ELSE to_timestamp(v_chr_val, 'DD-MON-YY HH24:MI:SS.US')
                       END;
    ELSIF (v_out_data_type = 'INTERVAL') THEN
        p_column_val := v_chr_val::INTERVAL;
    ELSIF (v_out_data_type = 'BOOLEAN') THEN
        p_column_val := CASE v_chr_val
                           WHEN 'TRUE' THEN TRUE
                           WHEN 'FALSE' THEN FALSE
                        END;
    ELSIF (v_out_data_type = 'BYTEA') THEN
        p_column_val := decode(v_chr_val, 'hex');
    ELSE
        p_column_val := NULL;
    END IF;
EXCEPTION
    -- Cursor isn't opened or doesn't exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := format('Cursor_id (%s) does not exist or incorrect.', p_cursor_id),
                    DETAIL := format('Cursor_id (%s) is not found, SQL statement text was not associated with it.', p_cursor_id),
                    HINT := format('Make sure that cursor_id (%s) exists or perform ''dbms_sql$open_cursor'' procedure to get a new one.', p_cursor_id);
    -- Column position is not declared in SELECT list
    WHEN null_value_not_allowed THEN
        RAISE USING MESSAGE := 'Column position not declared in SELECT list.',
                    DETAIL := 'Supplied column position is NULL or zero. Oracle error ''ORA-01007: column not in select list''.',
                    HINT := format('Make sure that supplied column position was previously declared by ''dbms_sql$define_column'' procedure for cursor_id (%s).', p_cursor_id);
    -- Variable was declared using "dbms_sql$define_column"
    WHEN most_specific_type_mismatch THEN
        RAISE USING MESSAGE := format('Type of OUT argument doesn''t match declared column type, cursor_id (%s).', p_cursor_id),
                    DETAIL := 'Oracle error ''ORA-06562: type of OUT argument must match type of column or bind variable.',
                    HINT := format('Try to use ''dbms_sql$column_value'' procedure to get column (%s) value for cursor_id (%s).',
                                   p_column_pos, p_cursor_id);
    -- Length of the supplied OUT argument is too small
    WHEN string_data_length_mismatch THEN
        RAISE USING MESSAGE := 'Character string buffer too small. Oracle error ''ORA-06502''.',
                    DETAIL := 'Length of the supplied OUT argument is too small to store column value.',
                    HINT := format('Supply OUT argument of proper length, minimum %s bytes to store cursor column value.',
                                   p_actual_len);
    -- Possible data type conversion error
    WHEN invalid_datetime_format THEN
        RAISE USING MESSAGE := 'Error during column value conversion (from char to datetime).',
                    DETAIL := format('Value %s is not correct for conversion to datetime. Cursor id (%s), column (%s).',
                                     quote_literal(v_chr_val), p_cursor_id, p_column_pos);
    -- Possible data type conversion error
    WHEN invalid_xml_content THEN
        RAISE USING MESSAGE := 'Error during column value conversion (from char to XML document).',
                    DETAIL := format('Value %s is not correct for conversion to XML document. Cursor id (%s), column (%s).',
                                     quote_literal(v_chr_val), p_cursor_id, p_column_pos);
    -- Possible data type conversion error
    WHEN invalid_text_representation THEN
        RAISE USING MESSAGE := 'Error during column value conversion (from char to numeric).',
                    DETAIL := format('Value %s is not correct for conversion to numeric. Cursor id (%s), column (%s).',
                                     quote_literal(v_chr_val), p_cursor_id, p_column_pos);
END;
]]></complex-attribute>
                        <category _I_D="580324a3-4bc7-4c7a-99f5-79bb45dcc330" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9e96007f-105c-4b5d-b2ef-ca2d6c1c6a68" name="dbms_sql$column_value_long" subcategories-loading="none" object-loading="extended" context="dbms_sql$column_value_long" is-trigger-function="0" unique-function-name="dbms_sql$column_value_long" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,integer,integer,integer,text,numeric" is-returning-set="f" ret-datatype="record" function-arguments="p_cursor_id integer, p_column_pos integer, p_byte_len integer, p_offset integer, INOUT p_column_val text, INOUT p_length_val numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365099" volatility="STABLE" is-window="f" function-identity-arguments="p_cursor_id integer, p_column_pos integer, p_byte_len integer, p_offset integer, INOUT p_column_val text, INOUT p_length_val numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$column_value_long(p_cursor_id integer, p_column_pos integer, p_byte_len integer, p_offset integer, INOUT p_column_val text, INOUT p_length_val numeric)" comment="This procedure returns part of the value of a TEXT column for a given position in a given cursor (identified by cursor_id). This procedure is used to access the data fetched by calling 'dbms_sql$fetch_rows' function.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
    v_defcol_data JSONB;
    v_chr_val TEXT;
    v_chr_binval BYTEA;
    v_col_base_type VARCHAR;
    v_out_base_type VARCHAR := 'TEXT';
BEGIN
    /* Requires functions to be installed in "aws_oracle_ext" schema:
       - dbms_sql$is_open;
       - get_package_variable.
    */

    -- Exit from function if the cursor (cursor_id) is not opened
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    -- Length of the segment to retrieve (in bytes) should be 1 or above
    ELSIF (coalesce(p_byte_len, 0) = 0) THEN
        RAISE zero_length_character_string;
    END IF;

    -- Getting cursor metadata (JSON)
    v_cur_metadata := aws_oracle_ext.get_package_variable('aws_oracle_ext', -- schema name
                                                          'dbms_sql', -- package name
                                                          concat('cursor_id_', p_cursor_id, '_metadata')); -- context "cursor_id_xxx"

    -- Getting dynamic SQL statement defined columns info (JSON)
    v_defcol_data := (v_cur_metadata #> concat('{defcols_data, ', 'col_', p_column_pos, '}')::TEXT[])::JSONB;

    v_col_base_type := (v_defcol_data ->> 'base_type')::VARCHAR; -- Column base data type

    -- Check if data is previously fetched from cursor
    IF ((v_cur_metadata ->> 'curr_row') IS NULL) THEN
        RAISE null_value_not_allowed;
    -- Column position should be declared in SELECT list
    ELSIF (v_col_base_type IS NULL) THEN
        RAISE too_many_columns;
    -- Check if OUT argument base type matches declared column base type
    ELSIF (v_out_base_type != substring(v_col_base_type, 1, 14)) THEN
        RAISE datatype_mismatch;
    -- Column should not be declared using "dbms_sql$define_column_char"
    ELSIF ((v_defcol_data ->> 'is_fixed')::SMALLINT = 1) THEN
        RAISE most_specific_type_mismatch;
    END IF;

    /* Extracting row data from execution results
       table "dbms_sql$recordset"
       (by cursor id, row number, column position)
    */
    SELECT chr_val
      INTO v_chr_val
      FROM dbms_sql$recordset
     WHERE cursor_id = p_cursor_id
       AND rownum = (v_cur_metadata ->> 'curr_row')::INTEGER
       AND column_pos = p_column_pos;

    -- Extracting data from binary string and copying it into the OUT argument
    v_chr_binval := substring(v_chr_val::BYTEA from (p_offset + 1) for p_byte_len);
    p_column_val := convert_from(v_chr_binval, pg_client_encoding());
    p_length_val := coalesce(octet_length(v_chr_binval), 0)::NUMERIC;
EXCEPTION
    -- Cursor isn't opened or doesn't exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := format('Cursor_id (%s) does not exist or incorrect.', p_cursor_id),
                    DETAIL := format('Cursor_id (%s) is not found, SQL statement text was not associated with it.', p_cursor_id),
                    HINT := format('Make sure that cursor_id (%s) exists or perform ''dbms_sql$open_cursor'' procedure to get a new one.', p_cursor_id);
    -- Length of the segment to retrieve (in bytes) is zero
    WHEN zero_length_character_string THEN
        RAISE USING MESSAGE := format('Cannot retrieve a zero-length data from resulting column (pos. %s).', p_column_pos),
                    DETAIL := 'Length of the segment to retrieve (in bytes) should be 1 or above',
                    HINT := 'Change the value of byte length parameter (p_byte_len) to 1 or above.';
    -- Resulting data wasn't previously fetched from cursor
    WHEN null_value_not_allowed THEN
        RAISE USING MESSAGE := format('The value of column (%s), cursor_id (%s) cannot be retrieved.', p_column_pos, p_cursor_id),
                    DETAIL := format('Resulting data wasn''t previously fetched for cursor_id (%s). Oracle error ''ORA-01016: This function can be called only after a fetch''.',
                                     p_cursor_id),
                    HINT := format('Use ''dbms_sql$fetch'' or ''dbms_sql$execute_and_fetch'' functions to perform fetch operation for cursor_id (%s).', p_cursor_id);
    -- Column position is not declared in SELECT list
    WHEN too_many_columns THEN
        RAISE USING MESSAGE := 'Column position not declared in SELECT list.',
                    DETAIL := 'Supplied column position is NULL or zero. Oracle error ''ORA-01007: column not in select list''.',
                    HINT := format('Make sure that supplied column position was previously declared by ''dbms_sql$define_column'' procedure for cursor_id (%s).', p_cursor_id);
    -- OUT argument base type doesn't match declared column base type
    WHEN datatype_mismatch THEN
        RAISE USING MESSAGE := format('Type of OUT argument doesn''t match declared type of column (%s), cursor_id (%s).', p_column_pos, p_cursor_id),
                    DETAIL := format('OUT argument type %s, column type %s. Oracle error ''ORA-06562: type of OUT argument must match type of column or bind variable''.',
                                     v_out_base_type, v_col_base_type),
                    HINT := format('Make sure that supplied out argument type match that for cursor_id (%s) column (%s).', p_cursor_id, p_column_pos);
    -- Column was declared using "dbms_sql$define_column_char"
    WHEN most_specific_type_mismatch THEN
        RAISE USING MESSAGE := format('Type of OUT argument doesn''t match declared variable type, cursor_id (%s).', p_cursor_id),
                    DETAIL := 'Oracle error ''ORA-06562: type of OUT argument must match type of column or bind variable',
                    HINT := format('Try to use ''dbms_sql$column_value_char'' procedure to get column (%s) value for cursor_id (%s).',
                                   p_column_pos, p_cursor_id);
END;
]]></complex-attribute>
                        <category _I_D="76e3576c-3562-44f3-bd7f-5d9cda70ab31" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d21b06f4-14ef-4074-b2bf-64632415c41d" name="dbms_sql$define_column" subcategories-loading="none" object-loading="extended" context="dbms_sql$define_column" is-trigger-function="0" unique-function-name="dbms_sql$define_column" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,integer,anyelement,integer" is-returning-set="f" ret-datatype="void" function-arguments="p_cursor_id integer, p_column_pos integer, p_column_var anyelement, p_col_size integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365105" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer, p_column_pos integer, p_column_var anyelement, p_col_size integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$define_column(p_cursor_id integer, p_column_pos integer, p_column_var anyelement, p_col_size integer)" comment="The procedure defines a column to be selected from the given cursor, used only with SELECT statements. The column being defined is identified by its relative position in the SELECT list of the statement in the given cursor.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
    v_defcols_data JSONB;
    v_is_fixed SMALLINT;
    v_col_size INTEGER;
    v_colvar_len INTEGER;
    v_col_base_type VARCHAR;
    v_col_data_type VARCHAR := upper(pg_typeof(p_column_var)::VARCHAR);
BEGIN
    /* Requires next functions to be installed in "aws_oracle_ext" schema:
       - dbms_sql$is_open;
       - get_package_variable;
       - set_package_variable.
    */

    -- Exit from procedure if the cursor (cursor_id) is not opened
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    END IF;

    -- Getting cursor metadata (JSON)
    v_cur_metadata := aws_oracle_ext.get_package_variable('aws_oracle_ext', -- schema name
                                                          'dbms_sql', -- package name
                                                          concat('cursor_id_', p_cursor_id, '_metadata')); -- context "cursor_id_xxx"

    -- Column position should be within the range 1..cols_count
    IF (p_column_pos NOT BETWEEN 1 AND (v_cur_metadata ->> 'cols_count')::SMALLINT) THEN
        RAISE check_violation;
    END IF;

    IF (v_col_data_type IN ('TEXT',
                            'CHARACTER',
                            'CHARACTER VARYING'))
    THEN
        v_col_base_type := 'TEXT';
        v_colvar_len := coalesce(length(p_column_var::BYTEA, pg_client_encoding()), 0);
        v_col_size := CASE
                         WHEN p_col_size IS NOT NULL THEN p_col_size
                         WHEN v_colvar_len > 0 THEN v_colvar_len
                      END;
    ELSIF (v_col_data_type IN ('REAL',
                               'BIGINT',
                               'INTEGER',
                               'NUMERIC',
                               'DECIMAL',
                               'SMALLINT',
                               'DOUBLE PRECISION'))
    THEN
        v_col_base_type := 'NUMERIC';
    ELSIF (v_col_data_type = 'MONEY') THEN
        v_col_base_type := 'MONEY';
    ELSIF (v_col_data_type IN ('DATE',
                               'TIMESTAMP WITHOUT TIME ZONE'))
    THEN
        v_col_base_type := 'TIMESTAMP WITHOUT TIME ZONE';
    ELSIF (v_col_data_type = 'TIMESTAMP WITH TIME ZONE') THEN
        v_col_base_type := 'TIMESTAMP WITH TIME ZONE';
    ELSIF (v_col_data_type = 'INTERVAL') THEN
        v_col_base_type := 'INTERVAL';
    ELSIF (v_col_data_type = 'BOOLEAN') THEN
        v_col_base_type := 'BOOLEAN';
    ELSIF (v_col_data_type = 'XML') THEN
        v_col_base_type := 'XML';
    ELSIF (v_col_data_type = 'BYTEA') THEN
        v_col_base_type := 'BYTEA';
        v_colvar_len := coalesce(octet_length(p_column_var), 0);
        v_col_size := CASE
                         WHEN p_col_size IS NOT NULL THEN p_col_size
                         WHEN v_colvar_len > 0 THEN v_colvar_len
                      END;
    ELSE RETURN;
    END IF;

    -- Saving defined columns data into temp table
    INSERT INTO dbms_sql$define_column (cursor_id,
                                        column_pos,
                                        data_type,
                                        base_type,
                                        col_size,
                                        is_fixed)
         VALUES (p_cursor_id,
                 p_column_pos,
                 v_col_data_type,
                 v_col_base_type,
                 v_col_size,
                 v_is_fixed)
    ON CONFLICT (cursor_id, column_pos)
    DO UPDATE SET data_type = v_col_data_type,
                  base_type = v_col_base_type,
                  col_size = v_col_size,
                  is_fixed = v_is_fixed;

    -- Serializing defined columns data into JSON object
    SELECT jsonb_object_agg(concat('col_', defcol_data.column_pos), defcol_data.column_data)
      INTO v_defcols_data
      FROM (SELECT defcol3.column_pos,
                   (SELECT to_jsonb(defcol2.*)
                      FROM (SELECT defcol1.data_type,
                                   defcol1.base_type,
                                   defcol1.col_size,
                                   defcol1.is_fixed
                              FROM dbms_sql$define_column AS defcol1
                             WHERE defcol1.cursor_id = defcol3.cursor_id
                               AND defcol1.column_pos = defcol3.column_pos
                           ) AS defcol2
                   ) AS column_data
              FROM dbms_sql$define_column AS defcol3
             WHERE defcol3.cursor_id = p_cursor_id
           ) AS defcol_data;

    -- Setting "defcols_data" (JSON) cursor property
    v_cur_metadata := jsonb_set(v_cur_metadata, '{defcols_data}', v_defcols_data);

    -- Saving cursor metadata (JSON)
    PERFORM aws_oracle_ext.set_package_variable('aws_oracle_ext', -- schema name
                                                'dbms_sql', -- package name
                                                concat('cursor_id_', p_cursor_id, '_metadata'), -- context "cursor_id_xxx"
                                                v_cur_metadata); -- cursor metadata JSON
EXCEPTION
    -- Cursor isn't opened or doesn't exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := format('Cursor_id (%s) does not exist or incorrect.', p_cursor_id),
                    DETAIL := format('Cursor_id (%s) is not found, SQL statement text was not associated with it.', p_cursor_id),
                    HINT := format('Make sure that cursor_id (%s) exists or perform ''dbms_sql$open_cursor'' procedure to get a new one.', p_cursor_id);
    -- Column position lies outside the range 1..cols_count
    WHEN check_violation THEN
        RAISE USING MESSAGE := format('Column (%s) not in select list. Oracle error ''ORA-01007''.', p_column_pos),
                    HINT := format('Check that SQL statement, associated with cursor_id (%s), contains mentioned number of columns.', p_cursor_id);
END;
]]></complex-attribute>
                        <category _I_D="5e3192da-f3b3-4a2a-863b-beae87549f17" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9743160b-c268-4ecb-835e-f3e629abe072" name="dbms_sql$define_column_char" subcategories-loading="none" object-loading="extended" context="dbms_sql$define_column_char" is-trigger-function="0" unique-function-name="dbms_sql$define_column_char" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,integer,anyelement,integer" is-returning-set="f" ret-datatype="void" function-arguments="p_cursor_id integer, p_column_pos integer, p_column_var anyelement, p_col_size integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365103" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer, p_column_pos integer, p_column_var anyelement, p_col_size integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$define_column_char(p_cursor_id integer, p_column_pos integer, p_column_var anyelement, p_col_size integer)" comment="The procedure defines a fixed-length CHAR column to be selected from the given cursor, used only with SELECT statements. The column being defined is identified by its relative position in the SELECT list of the statement in the given cursor.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
    v_defcols_data JSONB;
    v_is_fixed SMALLINT := 1;
    v_col_base_type VARCHAR := 'TEXT';
BEGIN
    /* Requires next functions to be installed in "aws_oracle_ext" schema:
       - dbms_sql$is_open;
       - get_package_variable;
       - set_package_variable.
    */

    -- Exit from procedure if the cursor (cursor_id) is not opened
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    END IF;

    -- Getting cursor metadata (JSON)
    v_cur_metadata := aws_oracle_ext.get_package_variable('aws_oracle_ext', -- schema name
                                                          'dbms_sql', -- package name
                                                          concat('cursor_id_', p_cursor_id, '_metadata')); -- context "cursor_id_xxx"

    -- Column position should be within the range 1..cols_count
    IF (p_column_pos NOT BETWEEN 1 AND (v_cur_metadata ->> 'cols_count')::SMALLINT) THEN
        RAISE check_violation;
    END IF;

    -- Saving defined columns data into temp table
    INSERT INTO dbms_sql$define_column (cursor_id,
                                        column_pos,
                                        data_type,
                                        base_type,
                                        col_size,
                                        is_fixed)
         VALUES (p_cursor_id,
                 p_column_pos,
                 v_col_base_type,
                 v_col_base_type,
                 p_col_size,
                 v_is_fixed)
    ON CONFLICT (cursor_id, column_pos)
    DO UPDATE SET data_type = v_col_base_type,
                  base_type = v_col_base_type,
                  col_size = p_col_size,
                  is_fixed = v_is_fixed;

    -- Serializing defined columns data into JSON object
    SELECT jsonb_object_agg(concat('col_', defcol_data.column_pos), defcol_data.column_data)
      INTO v_defcols_data
      FROM (SELECT defcol3.column_pos,
                   (SELECT to_jsonb(defcol2.*)
                      FROM (SELECT defcol1.data_type,
                                   defcol1.base_type,
                                   defcol1.col_size,
                                   defcol1.is_fixed
                              FROM dbms_sql$define_column AS defcol1
                             WHERE defcol1.cursor_id = defcol3.cursor_id
                               AND defcol1.column_pos = defcol3.column_pos
                           ) AS defcol2
                   ) AS column_data
              FROM dbms_sql$define_column AS defcol3
             WHERE defcol3.cursor_id = p_cursor_id
           ) AS defcol_data;

    -- Setting "defcols_data" (JSON) cursor property
    v_cur_metadata := jsonb_set(v_cur_metadata, '{defcols_data}', v_defcols_data);

    -- Saving cursor metadata (JSON)
    PERFORM aws_oracle_ext.set_package_variable('aws_oracle_ext', -- schema name
                                                'dbms_sql', -- package name
                                                concat('cursor_id_', p_cursor_id, '_metadata'), -- context "cursor_id_xxx"
                                                v_cur_metadata); -- cursor metadata JSON
EXCEPTION
    -- Cursor isn't opened or doesn't exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := format('Cursor_id (%s) does not exist or incorrect.', p_cursor_id),
                    DETAIL := format('Cursor_id (%s) is not found, SQL statement text was not associated with it.', p_cursor_id),
                    HINT := format('Make sure that cursor_id (%s) exists or perform ''dbms_sql$open_cursor'' procedure to get a new one.', p_cursor_id);
    -- Column position lies outside the range 1..cols_count
    WHEN check_violation THEN
        RAISE USING MESSAGE := format('Column (%s) not in select list. Oracle error ''ORA-01007''.', p_column_pos),
                    HINT := format('Check that SQL statement, associated with cursor_id (%s), contains mentioned number of columns.', p_cursor_id);
END;
]]></complex-attribute>
                        <category _I_D="ced9e2b1-0603-41ab-b308-72643b52affb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ab6fbcbc-b58b-4bc1-8f89-5016914fac43" name="dbms_sql$define_column_long" subcategories-loading="none" object-loading="extended" context="dbms_sql$define_column_long" is-trigger-function="0" unique-function-name="dbms_sql$define_column_long" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,integer" is-returning-set="f" ret-datatype="void" function-arguments="p_cursor_id integer, p_column_pos integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365104" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer, p_column_pos integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$define_column_long(p_cursor_id integer, p_column_pos integer)" comment="The procedure defines a TEXT column to be selected from the given cursor, used only with SELECT statements. The column being defined is identified by its relative position in the SELECT list of the statement in the given cursor.">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    /* Requires next functions to be installed in "aws_oracle_ext" schema:
       - dbms_sql$define_column.
    */

    PERFORM aws_oracle_ext.dbms_sql$define_column(p_cursor_id,
                                                  p_column_pos,
                                                  ''::TEXT);
END;
]]></complex-attribute>
                        <category _I_D="fe39332e-2c75-4080-aa2c-8896518906bd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="23b9a17e-5c90-4d03-b74e-98d242fabc00" name="dbms_sql$execute" subcategories-loading="none" object-loading="extended" context="dbms_sql$execute" is-trigger-function="0" unique-function-name="dbms_sql$execute" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="numeric" function-arguments="p_cursor_id integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365108" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$execute(p_cursor_id integer)" comment="The function executes the statement associated with cursor (identified by cursor_id) and returns the number of rows processed.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
    v_curcols_data JSONB;
    v_colscount_block TEXT;
    v_colstype_block TEXT;
    v_prepdynsql_block TEXT;
    v_sql_statement TEXT;
    v_selectsql_stat TEXT;
    v_selectsql_param TEXT;
    v_cols_count SMALLINT;
    v_cases_list TEXT;
    v_rows_count INTEGER;
    v_vars_sync_sql TEXT;
    v_col_aliases VARCHAR;
    v_coldtype_cases VARCHAR;
    v_into_clause VARCHAR;
    v_bind_var RECORD;
    v_bindvar_val TEXT;
    v_bindvar_col VARCHAR;
    v_bind_varstr VARCHAR;
    v_datatypes_rec RECORD;
    v_varlabels RECORD;
    v_err_message TEXT;
    v_err_stack TEXT;
    v_defcols_hash VARCHAR;
    v_param_list VARCHAR;
    v_param_list_arr VARCHAR[];
    v_sql_function_code SMALLINT;
    v_param_counter SMALLINT := 0;
    v_debug_mode BOOLEAN := 0;
BEGIN
    v_cur_metadata := aws_oracle_ext.get_package_variable('aws_oracle_ext',
                                                          'dbms_sql',
                                                          format('cursor_id_%s_metadata', p_cursor_id));

    IF (v_cur_metadata ->> 'from_refcursor') THEN
       RAISE invalid_cursor_definition;
    ELSIF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
       RAISE invalid_cursor_state;
    END IF;

    SELECT sql_statement,
           sql_statement,
           sql_statement
      INTO v_sql_statement,
           v_selectsql_stat,
           v_selectsql_param
      FROM dbms_sql$cursor
     WHERE cursor_id = p_cursor_id;

    IF (v_sql_statement IS NULL) THEN
        RAISE null_value_not_allowed;
    END IF;

    v_sql_function_code := aws_oracle_ext.dbms_sql$last_sql_function_code(p_cursor_id)::SMALLINT;

    IF (v_sql_statement ~* '^SELECT(.)*FROM(.)*INTO\s*(\$\d+(,\s*)?)+\s*$' AND
        v_sql_function_code NOT IN (3, 5, 9))
    THEN
        v_into_clause := aws_oracle_ext.regexp_substr(v_sql_statement, '(\s*INTO\s*(\$\d+(,\s*)?)+)\s*$', 1, 1, 'i');

        v_sql_statement := replace(v_sql_statement, v_into_clause, '');

        v_into_clause := regexp_replace(v_into_clause, 'INTO', 'INTO STRICT', 'gi');

        v_sql_statement := overlay(v_sql_statement placing concat(' ', ltrim(v_into_clause))
                                                      from position('FROM' in upper(v_sql_statement)) - 2
                                                       for 1);
    ELSIF (v_sql_function_code IN (3, 5, 9) AND v_sql_statement ~* 'RETURNING') THEN
        v_sql_statement := regexp_replace(v_sql_statement, '(?:;)\s*INTO', ' INTO', 'gi');
    END IF;

    FOR v_bind_var IN
    (SELECT *
       FROM dbms_sql$bind_variable
      WHERE cursor_id = p_cursor_id
      ORDER BY var_pos)
    LOOP
        IF (v_bind_var.data_type IN ('TEXT', 'CHARACTER', 'CHARACTER VARYING')) THEN
            v_bindvar_col := 'chr_val';
            v_bindvar_val := CASE
                                WHEN v_bind_var.chr_val IS NOT NULL
                                THEN quote_literal(CASE v_bind_var.data_type
                                                      WHEN 'CHARACTER' THEN rpad(v_bind_var.chr_val, v_bind_var.value_size, ' ')
                                                      ELSE substring(v_bind_var.chr_val, 1, v_bind_var.value_size)
                                                   END)
                                ELSE NULL
                             END;
        ELSIF (v_bind_var.data_type IN ('REAL', 'BIGINT', 'INTEGER', 'NUMERIC', 'DECIMAL', 'SMALLINT', 'DOUBLE PRECISION')) THEN
            v_bindvar_col := 'num_val';
            v_bindvar_val := CASE
                                WHEN v_bind_var.num_val IS NOT NULL
                                THEN concat(v_bind_var.num_val::TEXT, '::',
                                            CASE v_bind_var.data_type
                                               WHEN 'DECIMAL' THEN 'NUMERIC'
                                               ELSE v_bind_var.data_type
                                            END)
                                ELSE NULL
                             END;
        ELSIF (v_bind_var.data_type = 'MONEY') THEN
            v_bindvar_col := 'money_val';
            v_bindvar_val := CASE
                                WHEN v_bind_var.money_val IS NOT NULL
                                THEN quote_literal(v_bind_var.money_val::TEXT)
                                ELSE NULL
                             END;
        ELSIF (v_bind_var.data_type IN ('DATE', 'TIMESTAMP WITHOUT TIME ZONE')) THEN
            v_bindvar_col := 'tstamp_val';
            v_bindvar_val := CASE
                                WHEN v_bind_var.tstamp_val IS NOT NULL
                                THEN CASE v_bind_var.data_type
                                        WHEN 'DATE' THEN format('to_date(''%s'', ''DD.MM.YYYY'')',
                                                                to_char(v_bind_var.tstamp_val, 'DD.MM.YYYY'))
                                        ELSE format('to_timestamp(''%s'', ''DD.MM.YYYY HH24:MI:SS.MS.US'')::TIMESTAMP WITHOUT TIME ZONE',
                                                    to_char(v_bind_var.tstamp_val, 'DD.MM.YYYY HH24:MI:SS.MS.US'))
                                     END
                                ELSE NULL
                             END;
        ELSIF (v_bind_var.data_type = 'TIMESTAMP WITH TIME ZONE') THEN
            v_bindvar_col := 'tstamptz_val';
            v_bindvar_val := CASE
                                WHEN v_bind_var.tstamptz_val IS NOT NULL
                                THEN format('to_timestamp(''%s'', ''DD.MM.YYYY HH24:MI:SS.MS.US'')',
                                            to_char(v_bind_var.tstamptz_val, 'DD.MM.YYYY HH24:MI:SS.MS.US'))
                                ELSE NULL
                             END;
        ELSIF (v_bind_var.data_type = 'INTERVAL') THEN
            v_bindvar_col := 'interval_val';
            v_bindvar_val := CASE
                                WHEN v_bind_var.interval_val IS NOT NULL
                                THEN quote_literal(v_bind_var.interval_val::TEXT)
                                ELSE NULL
                             END;
        ELSIF (v_bind_var.data_type = 'BOOLEAN') THEN
            v_bindvar_col := 'bool_val';
            v_bindvar_val := CASE
                                WHEN v_bind_var.bool_val IS NOT NULL
                                THEN upper(v_bind_var.bool_val::TEXT)
                                ELSE NULL
                             END;
        ELSIF (v_bind_var.data_type = 'XML') THEN
            v_bindvar_col := 'xml_val';
            v_bindvar_val := CASE
                                WHEN v_bind_var.xml_val IS NOT NULL
                                THEN quote_literal(v_bind_var.xml_val)
                                ELSE NULL
                             END;
        ELSIF (v_bind_var.data_type = 'BYTEA') THEN
            v_bindvar_col := 'bin_val';
            v_bindvar_val := CASE
                                WHEN v_bind_var.bin_val IS NOT NULL
                                THEN format('decode(%s, ''base64'')',
                                            quote_literal(encode(v_bind_var.bin_val, 'base64')))
                                ELSE NULL
                             END;
        ELSE CONTINUE;
        END IF;

        v_bind_varstr := concat_ws(chr(10),
                                   v_bind_varstr,
                                   format('    v_%s %s%s',
                                   v_bind_var.var_name,
                                   CASE v_bind_var.data_type
                                      WHEN 'CHARACTER' THEN 'CHARACTER VARYING'
                                      ELSE v_bind_var.data_type
                                   END,
                                   CASE
                                      WHEN v_bindvar_val IS NULL THEN ';'
                                      ELSE format(' := %s;', v_bindvar_val)
                                   END));

        v_sql_statement := regexp_replace(v_sql_statement, concat(':', v_bind_var.var_name), concat('outer_block.v_', v_bind_var.var_name), 'gi');

        FOR v_varlabels IN
        (SELECT unnest(regexp_matches(v_bind_var.var_label, '(\$\d+)', 'gi')) AS marker)
        LOOP
            v_sql_statement := regexp_replace(v_sql_statement, replace(v_varlabels.marker, '$', '\$'), concat('outer_block.v_', v_bind_var.var_name), 'gi');
        END LOOP;

        IF (v_bind_var.var_label IS NULL) THEN
            v_param_counter := v_param_counter + 1;
            v_param_list_arr := array_append(v_param_list_arr, concat('outer_block.v_', v_bind_var.var_name)::VARCHAR);
            v_selectsql_param := regexp_replace(v_selectsql_param, concat(':', v_bind_var.var_name), concat('$', v_param_counter), 'gi');
        END IF;

        v_vars_sync_sql := concat_ws(chr(10),
                                     v_vars_sync_sql,
                                     '',
                                     format('-- Updating "%s" bind variable value', v_bind_var.var_name),
                                     'UPDATE dbms_sql$bind_variable',
                                     format('   SET %s = outer_block.v_%s', v_bindvar_col, v_bind_var.var_name),
                                     ' WHERE cursor_id = outer_block.v_cursor_id',
                                     format('   AND var_name = %s;', quote_literal(v_bind_var.var_name)));
    END LOOP;

    v_cols_count := (v_cur_metadata ->> 'cols_count')::INTEGER;

    IF (v_cols_count IS NULL AND
        (v_cur_metadata ->> 'colinfo_refresh')::SMALLINT = 1)
    THEN
        IF (v_sql_function_code IN (4, 27)) THEN
            IF (coalesce(array_length(v_param_list_arr, 1), 0) != 0) THEN
                v_param_list := array_to_string(v_param_list_arr, concat_ws(chr(10), ',', '      '));
            ELSE
                SELECT string_agg(concat('outer_block.v_', var_name),
                                  concat_ws(chr(10), ',', '      ') ORDER BY ltrim(mrk.marker, '$')::INTEGER)
                  INTO v_param_list
                  FROM (SELECT unnest(regexp_matches(var_label, '(\$\d+)', 'gi')) marker,
                               var_name
                          FROM dbms_sql$bind_variable
                         WHERE cursor_id = p_cursor_id) mrk;
            END IF;

            v_colscount_block :=
                concat_ws(chr(10),
                    'DO $dbms_sql$',
                    '<<outer_block>>',
                    'DECLARE',
                    '    v_cur_metadata JSONB;',
                    '    v_dynsql_row RECORD;',
                    '    v_cols_count SMALLINT;',
                    format('v_cursor_id INTEGER := %s;', p_cursor_id),
                    v_bind_varstr,
                    'BEGIN',
                    'EXECUTE',
                    quote_literal(concat_ws(chr(10),
                    'SELECT src.* FROM (',
                    '------------------- Dynamic SQL statement -------------------',
                    v_selectsql_param,
                    '------------------- Dynamic SQL statement -------------------',
                    ') AS src LIMIT 0')),
                    concat('INTO outer_block.v_dynsql_row',
                    CASE
                       WHEN v_param_list IS NULL THEN ';'
                       ELSE concat(chr(10), 'USING ', v_param_list, ';')
                    END),
                    '',
                    'outer_block.v_cols_count := -- Calculating dymamic sql statement columns count',
                    '    aws_oracle_ext.regexp_count(regexp_replace(outer_block.v_dynsql_row::TEXT, ''"(.*?)"'', ''x'', ''gi''), '','') + 1;',
                    '',
                    'outer_block.v_cur_metadata := -- Getting cursor metadata (JSON)',
                    '    aws_oracle_ext.get_package_variable(''aws_oracle_ext'', -- schema name',
                    '                                        ''dbms_sql'', -- package name',
                                                             'format(''cursor_id_%s_metadata'', outer_block.v_cursor_id)); -- context "cursor_id_xxx"',
                    '',
                    'outer_block.v_cur_metadata := -- Setting "cols_count" (JSON) cursor property',
                    '    jsonb_set(outer_block.v_cur_metadata, ''{cols_count}'', to_jsonb(outer_block.v_cols_count));',
                    '',
                    '-- Saving cursor metadata (JSON)',
                    'PERFORM aws_oracle_ext.set_package_variable(''aws_oracle_ext'', -- schema name',
                    '                                            ''dbms_sql'', -- package name',
                    '                                            format(''cursor_id_%s_metadata'', outer_block.v_cursor_id), -- context "cursor_id_xxx"',
                    '                                            outer_block.v_cur_metadata); -- cursor metadata JSON',
                    'END; $dbms_sql$',
                    'LANGUAGE plpgsql;');

            EXECUTE v_colscount_block;

            v_cur_metadata := aws_oracle_ext.get_package_variable('aws_oracle_ext',
                                                                  'dbms_sql',
                                                                  format('cursor_id_%s_metadata', p_cursor_id));

            v_cols_count := (v_cur_metadata ->> 'cols_count')::INTEGER;
        ELSE v_cols_count := 0;
        END IF;
    END IF;

    IF (v_cols_count > 0) THEN
        SELECT string_agg(concat(repeat(' ', 10), 'col_', colnum),
                          concat(',', chr(10)))
          INTO v_col_aliases
          FROM generate_series(1, v_cols_count) AS colnum;

        IF ((v_cur_metadata ->> 'colinfo_refresh')::SMALLINT = 1) THEN
            v_colstype_block :=
                concat_ws(chr(10),
                    'DO $dbms_sql$',
                    '<<outer_block>>',
                    'DECLARE',
                    format('    v_cursor_id INTEGER := %s;', p_cursor_id),
                    v_bind_varstr,
                    'BEGIN',
                    '-- Deleting previous dynamic sql execution results',
                    'DELETE FROM dbms_sql$recordset',
                    '      WHERE cursor_id = outer_block.v_cursor_id;',
                    '',
                    '-- Deleting previous dynamic sql columns info',
                    'DELETE FROM dbms_sql$cursor_column',
                    '      WHERE cursor_id = outer_block.v_cursor_id;',
                    '',
                    '-- Creating temp table in order to reflect the columns structure',
                    'BEGIN',
                    format('CREATE TEMP TABLE tbl_curid%s_colstype', p_cursor_id),
                    'WITH (OIDS = FALSE)',
                    'ON COMMIT DROP',
                    'AS',
                    'SELECT src.* FROM (',
                    '------------------- Dynamic SQL statement -------------------',
                    v_sql_statement,
                    '------------------- Dynamic SQL statement -------------------',
                    ') AS src',
                    'WITH NO DATA;',
                    '',
                    '/* Using column aliases instead of names',
                    '   in case if any duplicate columns found */',
                    'EXCEPTION',
                    'WHEN duplicate_column THEN',
                    '',
                    format('CREATE TEMP TABLE tbl_curid%s_colstype', p_cursor_id),
                    'WITH (OIDS = FALSE)',
                    'ON COMMIT DROP',
                    'AS',
                    'SELECT src.* FROM (',
                    '------------------- Dynamic SQL statement -------------------',
                    v_sql_statement,
                    '------------------- Dynamic SQL statement -------------------',
                    format(') AS src (%s)', trim(v_col_aliases)),
                    'WITH NO DATA;',
                    'END;',
                    '',
                    concat_ws(chr(10), '-- Saving detailed column data (name, type, precision, etc.)',
                    'INSERT INTO dbms_sql$cursor_column (cursor_id,',
                    '                                    column_pos,',
                    '                                    col_name,',
                    '                                    data_type,',
                    '                                    base_type,',
                    '                                    is_nullable,',
                    '                                    chr_max_len,',
                    '                                    chr_byte_len,',
                    '                                    num_precision,',
                    '                                    num_scale,',
                    '                                    tstamp_precision,',
                    '                                    interval_type,',
                    '                                    interval_precision)',
                    'SELECT outer_block.v_cursor_id,',
                    '       ordinal_position,',
                    '       column_name,',
                    '       upper(data_type) AS data_type,',
                    '       CASE',
                    '          WHEN data_type IN (''text'',',
                    '                             ''character'',',
                    '                             ''character varying'') THEN ''TEXT''',
                    '          WHEN data_type IN (''real'',',
                    '                             ''bigint'',',
                    '                             ''integer'',',
                    '                             ''numeric'',',
                    '                             ''decimal'',',
                    '                             ''smallint'',',
                    '                             ''double precision'') THEN ''NUMERIC''',
                    '          WHEN data_type IN (''date'',',
                    '                             ''timestamp without time zone'') THEN ''TIMESTAMP WITHOUT TIME ZONE''',
                    '          ELSE upper(data_type)',
                    '       END AS base_type,',
                    '       CASE is_nullable',
                    '          WHEN ''YES'' THEN TRUE',
                    '          ELSE FALSE',
                    '       END AS is_nullable,',
                    '       character_maximum_length,',
                    '       character_octet_length,',
                    '       numeric_precision,',
                    '       numeric_scale,',
                    '       datetime_precision,',
                    '       interval_type,',
                    '       interval_precision',
                    '  FROM information_schema.columns'),
                    format(' WHERE table_name = ''tbl_curid%s_colstype''', p_cursor_id),
                    ' ORDER BY ordinal_position ASC;',
                    '',
                    '-- Dropping temp table since its not needed anymore',
                    format('DROP TABLE IF EXISTS tbl_curid%s_colstype;', p_cursor_id),
                    'END; $dbms_sql$',
                    'LANGUAGE plpgsql;');

            EXECUTE v_colstype_block;

            SELECT jsonb_object_agg(concat('col_', curcol_data.column_pos), curcol_data.column_data)
              INTO v_curcols_data
              FROM (SELECT curcol3.column_pos,
                           (SELECT to_jsonb(curcol2.*)
                              FROM (SELECT curcol1.data_type,
                                           curcol1.base_type
                                      FROM dbms_sql$cursor_column AS curcol1
                                     WHERE curcol1.cursor_id = curcol3.cursor_id
                                       AND curcol1.column_pos = curcol3.column_pos
                                   ) AS curcol2
                           ) AS column_data
                      FROM dbms_sql$cursor_column AS curcol3
                     WHERE curcol3.cursor_id = p_cursor_id
                   ) AS curcol_data;

            v_cur_metadata := jsonb_set(v_cur_metadata, '{curcols_data}', v_curcols_data);

            v_cur_metadata := jsonb_set(v_cur_metadata, '{colinfo_refresh}', to_jsonb(0));
        END IF;

        v_defcols_hash := md5(v_cur_metadata ->> 'defcols_data');

        IF (v_defcols_hash IS NOT NULL AND
            v_defcols_hash != coalesce(v_cur_metadata ->> 'defcols_hash', ''))
        THEN
            v_cur_metadata := jsonb_set(v_cur_metadata, '{defcols_hash}', to_jsonb(v_defcols_hash));

            FOR v_datatypes_rec IN
            (SELECT curcol.column_pos,
                    curcol.data_type AS cur_data_type,
                    defcol.data_type AS def_data_type
               FROM dbms_sql$cursor_column AS curcol
                    INNER JOIN dbms_sql$define_column AS defcol ON (defcol.cursor_id = curcol.cursor_id AND
                                                                    defcol.column_pos = curcol.column_pos AND
                                                                    defcol.base_type != curcol.base_type AND
                                                                    coalesce(defcol.is_fixed, 0) != 1)
              WHERE curcol.cursor_id = p_cursor_id)
            LOOP
                CONTINUE WHEN substring(v_datatypes_rec.cur_data_type, 1, 14) = substring(v_datatypes_rec.def_data_type, 1, 14);

                RAISE datatype_mismatch;
            END LOOP;
        END IF;

        SELECT string_agg(coalesce(concat('       CASE colpos', chr(10)) ||
                                   (SELECT string_agg(format('          WHEN %s THEN col_%s', colpos, colpos), chr(10))
                                      FROM unnest(colpos_list) AS colpos) ||
                                   concat(chr(10), '       END'),
                                   '       NULL'),
                          concat(',', chr(10)) ORDER BY datatypes.dtype_order ASC)
          INTO v_coldtype_cases
          FROM (SELECT 'TEXT' AS base_type, 1 AS dtype_order
                 UNION ALL
                SELECT 'NUMERIC', 2
                 UNION ALL
                SELECT 'MONEY', 3
                 UNION ALL
                SELECT 'TIMESTAMP WITHOUT TIME ZONE', 4
                 UNION ALL
                SELECT 'TIMESTAMP WITH TIME ZONE', 5
                 UNION ALL
                SELECT 'INTERVAL', 6
                 UNION ALL
                SELECT 'BOOLEAN', 7
                 UNION ALL
                SELECT 'XML', 8
                 UNION ALL
                SELECT 'BYTEA', 9) AS datatypes
               LEFT JOIN (SELECT base_type,
                                 array_agg(column_pos) AS colpos_list
                            FROM dbms_sql$cursor_column
                           WHERE cursor_id = p_cursor_id
                           GROUP BY base_type) AS curcols ON (curcols.base_type = datatypes.base_type);

        v_sql_statement :=
            concat_ws(chr(10),
                '-- Deleting previous dynamic sql execution resulting data',
                'DELETE FROM dbms_sql$recordset',
                '      WHERE cursor_id = outer_block.v_cursor_id;',
                '',
                '/* Execution of dynamic SQL statement and inserting it''s',
                '   resulting data into temp table dbms_sql$recordset */',
                'INSERT INTO dbms_sql$recordset (cursor_id,',
                '                                rownum,',
                '                                column_pos,',
                '                                chr_val,',
                '                                num_val,',
                '                                money_val,',
                '                                tstamp_val,',
                '                                tstamptz_val,',
                '                                interval_val,',
                '                                bool_val,',
                '                                xml_val,',
                '                                bin_val)',
                'SELECT outer_block.v_cursor_id,',
                '       rownum,',
                '       colpos,',
                v_coldtype_cases,
                '  FROM (SELECT row_number() over (order by 1) AS rownum,',
                '               generate_series(1, outer_block.v_cols_count) AS colpos,',
                '               dynsql.*',
                '          FROM (',
                '------------------- Dynamic SQL statement -------------------',
                v_sql_statement,
                '------------------- Dynamic SQL statement -------------------',
                concat('               ) AS dynsql (', v_col_aliases, ')'),
                '       ) AS dynsql2;');
    END IF;

    IF (v_sql_function_code = 34) THEN
        v_sql_statement := regexp_replace(v_sql_statement,
            '(^\s*DO(:?\s+LANGUAGE\s+[[:alpha:]]+\s+)?\s*\$(\w*)?\$\s*(:?<<.+>>)?\s*)',
            concat(substring(v_sql_statement, '<<.+>>'), chr(10)), 'gi');

        v_sql_statement := regexp_replace(v_sql_statement,
            '(END\s*(;)?\s*\$(\w*)?\$\s*(:?\s+LANGUAGE\s+[[:alpha:]]+)?\s*(;)?$)', 'END;', 'gi');

        v_sql_statement := regexp_replace(v_sql_statement, '^\s*(?=\S*)|(?<=\S*)\s*$', '', 'gi');
    END IF;

    PERFORM aws_oracle_ext.set_package_variable('aws_oracle_ext',
                                                'dbms_sql',
                                                format('cursor_id_%s_metadata', p_cursor_id),
                                                v_cur_metadata);

    v_prepdynsql_block :=
        concat_ws(chr(10),
            'DO $dbms_sql$',
            '<<outer_block>>',
            'DECLARE',
            '    v_cur_metadata JSONB;',
            '    v_rows_count INTEGER;',
            format('    v_cols_count SMALLINT := %s;', v_cols_count),
            format('    v_cursor_id INTEGER := %s;', p_cursor_id),
            v_bind_varstr,
            'BEGIN',
            '---- Dynamic PL/pgSQL statement (or dynamic SQL wrapper) ----',
            CASE
               WHEN right(v_sql_statement, 1) != ';' THEN concat(v_sql_statement, ';')
               ELSE v_sql_statement
            END,
            '---- Dynamic PL/pgSQL statement (or dynamic SQL wrapper) ----',
            '',
            'GET DIAGNOSTICS outer_block.v_rows_count := ROW_COUNT;',
            '',
            'outer_block.v_cur_metadata := -- Getting cursor metadata (JSON)',
            '    aws_oracle_ext.get_package_variable(''aws_oracle_ext'', -- schema name',
            '                                        ''dbms_sql'', -- package name',
            '                                        format(''cursor_id_%s_metadata'', outer_block.v_cursor_id)); -- context "cursor_id_xxx"',
            '',
            '-- Setting "rows_count" (JSON) cursor property',
            'outer_block.v_cur_metadata :=',
            '    jsonb_set(outer_block.v_cur_metadata,',
            '              ''{rows_count}'',',
            '              CASE outer_block.v_cols_count',
            '                 WHEN 0 THEN to_jsonb(outer_block.v_rows_count)',
            '                 ELSE to_jsonb(outer_block.v_rows_count / outer_block.v_cols_count)',
            '              END);',
            '',
            '-- Setting "curr_row" (JSON) cursor property',
            'outer_block.v_cur_metadata := jsonb_set(outer_block.v_cur_metadata, ''{curr_row}'', JSONB ''null'');',
            '',
            '-- Saving cursor metadata (JSON)',
            'PERFORM aws_oracle_ext.set_package_variable(''aws_oracle_ext'', -- schema name',
            '                                            ''dbms_sql'', -- package name',
            '                                            format(''cursor_id_%s_metadata'', outer_block.v_cursor_id), -- context "cursor_id_xxx"',
            '                                            outer_block.v_cur_metadata); -- cursor metadata JSON',
            v_vars_sync_sql,
            'END; $dbms_sql$',
            'LANGUAGE plpgsql;');

    EXECUTE v_prepdynsql_block;

    IF v_debug_mode THEN
        UPDATE dbms_sql$cursor
           SET colscount_block = coalesce(v_colscount_block, colscount_block),
               colstype_block = coalesce(v_colstype_block, colstype_block),
               prepdynsql_block = v_prepdynsql_block
         WHERE cursor_id = p_cursor_id;
    END IF;

    v_cur_metadata := aws_oracle_ext.get_package_variable('aws_oracle_ext',
                                                          'dbms_sql',
                                                          format('cursor_id_%s_metadata', p_cursor_id));
    RETURN (v_cur_metadata ->> 'rows_count')::NUMERIC;
EXCEPTION
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := format('Cursor_id (%s) does not exist or incorrect.', p_cursor_id),
                    DETAIL := format('Cursor_id (%s) is not found, SQL statement text was not associated with it.', p_cursor_id),
                    HINT := format('Make sure that cursor_id (%s) exists or perform ''dbms_sql$open_cursor'' procedure to get a new one.', p_cursor_id);
    WHEN invalid_cursor_definition THEN
        RAISE USING MESSAGE := 'Can not repeatedly execute a REFCURSOR-sourced cursor.',
                    DETAIL := format('Specified cursor (cursor_id %s) is a REFCURSOR-sourced cursor, it can not be executed through ''dbms_sql$execute'' or ''dbms_sql$execute_and_fetch'' procedures.', p_cursor_id),
                    HINT := format('Cursor with cursor_id (%s) was previously executed. There is no need to execute it again.', p_cursor_id);
    WHEN null_value_not_allowed THEN
        RAISE USING MESSAGE := format('No SQL statement is found for the supplied cursor_id (%s)', p_cursor_id),
                    DETAIL := format('There is no SQL statement associated with the supplied cursor_id (%s), or such cursor_id (%s) is not exist', p_cursor_id),
                    HINT := format('Make sure that cursor_id (%s) exists, and PARSE procedure with proper SQL statement was successfully performed for it', p_cursor_id);
    WHEN datatype_mismatch THEN
        RAISE USING MESSAGE := format('Inconsistent datatypes: expected %s got %s. Oracle error ''ORA-00932''.',
                                      v_datatypes_rec.def_data_type,
                                      v_datatypes_rec.cur_data_type),
                    DETAIL := format('Data types declared for cursor_id (%s) column (%s) do not match.',
                                     p_cursor_id,
                                     v_datatypes_rec.column_pos),
                    HINT := 'Try to use ''dbms_sql$define_column'' procedure to declare the proper data type for mentioned column.';
    WHEN syntax_error THEN
        GET STACKED DIAGNOSTICS v_err_message = MESSAGE_TEXT,
                                v_err_stack = PG_EXCEPTION_CONTEXT;

        RAISE USING MESSAGE := 'Syntax error has occured while trying to execute dynamic SQL statement.',
                    DETAIL := concat(v_err_message, '.'),
                    HINT := concat_ws(chr(10), '(Call Stack)', v_err_stack);
END;
]]></complex-attribute>
                        <category _I_D="9d523ed5-7185-425a-a621-4651ba7fbfde" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="71875885-3627-4cec-ae6a-b784412993e2" name="dbms_sql$execute_and_fetch" subcategories-loading="none" object-loading="extended" context="dbms_sql$execute_and_fetch" is-trigger-function="0" unique-function-name="dbms_sql$execute_and_fetch" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,boolean" is-returning-set="f" ret-datatype="numeric" function-arguments="p_cursor_id integer, p_exact_match boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365107" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer, p_exact_match boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$execute_and_fetch(p_cursor_id integer, p_exact_match boolean)" comment="This function executes the given cursor (identified by cursor_id) and fetches rows. Raise an exception if the number of rows matching the query differs from one.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_rows_count INTEGER;
    v_rows_fetched INTEGER;
BEGIN
    /* Requires functions to be installed in "aws_oracle_ext" schema:
       - dbms_sql$execute;
       - dbms_sql$fetch_rows.
    */

    v_rows_count := aws_oracle_ext.dbms_sql$execute(p_cursor_id);
    v_rows_fetched := aws_oracle_ext.dbms_sql$fetch_rows(p_cursor_id);

    /* Raise an exception if the number of rows actually matching the query differs from 1.
       This behaviour is actual if "p_exact_match" param passed value is "TRUE".
       -------------------------------------------------------------
       "ORA-01403: no data found" - if v_rows_count is null or zero.
       "ORA-01422: exact fetch returns more than requested number of rows" - if "v_rows_count" more than one.
    */
    IF (p_exact_match) THEN
        IF (v_rows_count > 1) THEN
            -- ORA-01422
            RAISE too_many_rows;
        ELSIF (coalesce(v_rows_count, 0) = 0) THEN
            -- ORA-01403
            RAISE no_data_found;
        END IF;
    END IF;

    RETURN v_rows_fetched;
EXCEPTION
    -- More than one row fetched from cursor
    WHEN too_many_rows THEN
        RAISE USING MESSAGE := format('Exact fetch from cursor_id (%s) returns more than requested number of rows.', p_cursor_id),
                    DETAIL := 'Execution of dynamic SQL statement results in more than one row. Oracle error ''ORA-01422''.',
                    HINT := format('Make sure that dynamic SQL statement associated with cursor_id (%s) is forced to return exactly one row.', p_cursor_id);
    -- Fetch from cursor results in zero rows
    WHEN no_data_found THEN
        RAISE USING MESSAGE := format('No rows are fetched from cursor_id (%s).', p_cursor_id),
                    DETAIL := 'Execution of dynamic SQL statement results in 0 rows. Oracle error ''ORA-01403: no data found''.',
                      HINT := format('Make sure that dynamic SQL statement associated with cursor_id (%s) exists and return at least one row.', p_cursor_id);
END;
]]></complex-attribute>
                        <category _I_D="e7b60c4b-0e08-4cf4-a04b-0749f8721dbd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="31a3cd95-bcaf-4e22-bc86-2c8691ca0d59" name="dbms_sql$fetch_rows" subcategories-loading="none" object-loading="extended" context="dbms_sql$fetch_rows" is-trigger-function="0" unique-function-name="dbms_sql$fetch_rows" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="numeric" function-arguments="p_cursor_id integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365110" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$fetch_rows(p_cursor_id integer)" comment="This function fetches a row from a given cursor (identified by cursor_id), and returns the number of rows actually fetched.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
    v_curr_row INTEGER;
    v_rows_count INTEGER;
    v_datatypes_rec RECORD;
    v_defcols_hash VARCHAR;
    v_defcols_prevhash VARCHAR;
    v_rows_fetched INTEGER := 0;
BEGIN
    /* Requires functions to be installed in "aws_oracle_ext" schema:
       - dbms_sql$is_open;
       - get_package_variable;
       - set_package_variable.
    */

    -- Exit from function if the cursor (cursor_id) is not opened
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    END IF;

    -- Getting cursor metadata (JSON)
    v_cur_metadata := aws_oracle_ext.get_package_variable('aws_oracle_ext', -- schema name
                                                          'dbms_sql', -- package name
                                                          concat('cursor_id_', p_cursor_id, '_metadata')); -- context "cursor_id_xxx"

    -- Additional check if cursor (cursor_id) was transformed from a REFCURSOR
    IF (v_cur_metadata ->> 'from_refcursor') THEN
        -- Getting defined columns data hash
        v_defcols_hash := md5(v_cur_metadata ->> 'defcols_data');

        IF (v_defcols_hash IS NOT NULL AND
            v_defcols_hash != coalesce(v_cur_metadata ->> 'defcols_hash', ''))
        THEN
            -- Setting "defcols_hash" (JSON) cursor property
            v_cur_metadata := jsonb_set(v_cur_metadata, '{defcols_hash}', to_jsonb(v_defcols_hash));

            /* Checking for correspondence between actual and declared column base data types
               Oracle ORA-00932: INCONSISTENT_TYPE error is raised if the type of the given OUT parameter value is different from the actual type of the value.
               This type was the given type when the column was defined by calling procedure dbms_sql$define_column.
            */
            FOR v_datatypes_rec IN
            (SELECT curcol.column_pos,
                    curcol.data_type AS cur_data_type,
                    defcol.data_type AS def_data_type
               FROM dbms_sql$cursor_column AS curcol
                    INNER JOIN dbms_sql$define_column AS defcol ON (defcol.cursor_id = curcol.cursor_id AND
                                                                    defcol.column_pos = curcol.column_pos AND
                                                                    defcol.base_type != curcol.base_type AND
                                                                    coalesce(defcol.is_fixed, 0) != 1)
              WHERE curcol.cursor_id = p_cursor_id)
            LOOP
                -- Data types TIMESTAMP WITHOUT TIME ZONE and TIMESTAMP WITH TIME ZONE are interconvertible, thus they should not generate an error
                CONTINUE WHEN substring(v_datatypes_rec.cur_data_type, 1, 14) = substring(v_datatypes_rec.def_data_type, 1, 14);

                RAISE datatype_mismatch;
            END LOOP;
        END IF;
    END IF;

    -- Cursor rows count should not be empty (null)
    IF ((v_cur_metadata ->> 'rows_count') IS NULL) THEN
        RAISE null_value_not_allowed;
    END IF;

    -- Perform fetching while there are rows to fetch
    IF (coalesce((v_cur_metadata ->> 'curr_row')::INTEGER, 0) != (v_cur_metadata ->> 'rows_count')::INTEGER) THEN
        -- Setting "curr_row" (JSON) cursor property
        v_cur_metadata := jsonb_set(v_cur_metadata, '{curr_row}', to_jsonb(coalesce((v_cur_metadata ->> 'curr_row')::INTEGER, 0) + 1));

        v_rows_fetched := 1;
    END IF;

    -- Saving cursor metadata (JSON)
    PERFORM aws_oracle_ext.set_package_variable('aws_oracle_ext', -- schema name
                                                'dbms_sql', -- package name
                                                concat('cursor_id_', p_cursor_id, '_metadata'), -- context "cursor_id_xxx"
                                                v_cur_metadata); -- cursor metadata JSON
    RETURN v_rows_fetched;
EXCEPTION
    -- Cursor isn't opened or doesn't exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := format('Cursor_id (%s) does not exist or incorrect.', p_cursor_id),
                    DETAIL := format('Cursor_id (%s) is not found, SQL statement text was not associated with it.', p_cursor_id),
                    HINT := format('Make sure that cursor_id (%s) exists or perform ''dbms_sql$open_cursor'' procedure to get a new one.', p_cursor_id);
    -- Actual and declared base data types of a column are not match
    WHEN datatype_mismatch THEN
        RAISE USING MESSAGE := format('Inconsistent datatypes: expected %s got %s. Oracle error ''ORA-00932''.',
                                      v_datatypes_rec.def_data_type,
                                      v_datatypes_rec.cur_data_type),
                    DETAIL := format('Data types declared for cursor_id (%s) column (%s) do not match.',
                                     p_cursor_id,
                                     v_datatypes_rec.column_pos),
                    HINT := concat('Try to use ''dbms_sql$define_column'' procedure to declare the proper data type for mentioned column.');
    -- Cursor rows count should is empty (null)
    WHEN null_value_not_allowed THEN
        RAISE USING MESSAGE := 'Fetch out of sequence. Oracle error ''ORA-01002''.',
                    DETAIL := format('Dynamic SQL statement, associated with cursor_id (%s), was not executed.', p_cursor_id),
                    HINT := format('Perform ''dbms_sql$execute'' or ''dbms_sql$execute_and_fetch'' procedure for cursor_id (%s).', p_cursor_id);
END;
]]></complex-attribute>
                        <category _I_D="98e62e3d-6d3b-4903-a6d4-550f054e506c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="83a66990-c186-4c35-a6a3-2aff0c94d9e9" name="dbms_sql$init" subcategories-loading="none" object-loading="extended" context="dbms_sql$init" is-trigger-function="0" unique-function-name="dbms_sql$init" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365112" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$init()" comment="The function initializes DBMS_SQL package and creates all necessary temporary tables required for this emulation solution.">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    -- Creating all necessary temp tables
    IF (NOT aws_oracle_ext.is_package_initialized('aws_oracle_ext', 'dbms_sql')) THEN
        -- Temp table for storing cursor data (id, sql statement etc.)
        CREATE TEMP TABLE IF NOT EXISTS dbms_sql$cursor (
            cursor_id SERIAL,
            sql_statement TEXT,
            colscount_block TEXT,
            colstype_block TEXT,
            prepdynsql_block TEXT,
            CONSTRAINT pk_cursor PRIMARY KEY (cursor_id)
        ) WITH (OIDS = FALSE)
        ON COMMIT PRESERVE ROWS;

        -- Temp table for storing defined columns data (position, data type etc.)
        CREATE TEMP TABLE IF NOT EXISTS dbms_sql$define_column (
            cursor_id INTEGER,
            column_pos INTEGER,
            data_type VARCHAR,
            base_type VARCHAR,
            col_size INTEGER,
            is_fixed SMALLINT,
            CONSTRAINT pk_def_column PRIMARY KEY (cursor_id, column_pos),
            CONSTRAINT fk_defcol_cursor FOREIGN KEY (cursor_id) REFERENCES dbms_sql$cursor (cursor_id) ON DELETE CASCADE
        ) WITH (OIDS = FALSE)
        ON COMMIT PRESERVE ROWS;

        -- Temp table for storing actual columns data (position, data type etc.)
        CREATE TEMP TABLE IF NOT EXISTS dbms_sql$cursor_column (
            cursor_id INTEGER,
            column_pos INTEGER,
            col_name VARCHAR,
            data_type VARCHAR,
            base_type VARCHAR,
            is_nullable BOOLEAN,
            chr_max_len INTEGER,
            chr_byte_len INTEGER,
            num_precision SMALLINT,
            num_scale SMALLINT,
            tstamp_precision SMALLINT,
            interval_type VARCHAR,
            interval_precision SMALLINT,
            CONSTRAINT pk_cur_column PRIMARY KEY (cursor_id, column_pos),
            CONSTRAINT fk_curcol_cursor FOREIGN KEY (cursor_id) REFERENCES dbms_sql$cursor (cursor_id) ON DELETE CASCADE
        ) WITH (OIDS = FALSE)
        ON COMMIT PRESERVE ROWS;

        -- Temp table for storing binded variables data (name, data type, value etc.)
        CREATE TEMP TABLE IF NOT EXISTS dbms_sql$bind_variable (
            cursor_id INTEGER,
            var_pos INTEGER,
            var_name VARCHAR,
            var_label VARCHAR,
            data_type VARCHAR,
            base_type VARCHAR,
            var_size INTEGER,
            value_size INTEGER,
            is_fixed SMALLINT,
            chr_val TEXT,
            num_val NUMERIC,
            money_val MONEY,
            tstamp_val TIMESTAMP WITHOUT TIME ZONE,
            tstamptz_val TIMESTAMP WITH TIME ZONE,
            interval_val INTERVAL,
            bool_val BOOLEAN,
            xml_val XML,
            bin_val BYTEA,
            CONSTRAINT pk_bind_var PRIMARY KEY (cursor_id, var_name),
            CONSTRAINT fk_bindvar_cur FOREIGN KEY (cursor_id) REFERENCES dbms_sql$cursor (cursor_id) ON DELETE CASCADE
        ) WITH (OIDS = FALSE)
        ON COMMIT PRESERVE ROWS;

        -- Temp table for storing dynamic statement execution results (parsed SQL record sets)
        CREATE TEMP TABLE IF NOT EXISTS dbms_sql$recordset (
            cursor_id INTEGER,
            rownum INTEGER,
            column_pos INTEGER,
            chr_val TEXT,
            num_val NUMERIC,
            money_val MONEY,
            tstamp_val TIMESTAMP WITHOUT TIME ZONE,
            tstamptz_val TIMESTAMP WITH TIME ZONE,
            interval_val INTERVAL,
            bool_val BOOLEAN,
            xml_val XML,
            bin_val BYTEA,
            CONSTRAINT pk_record_set PRIMARY KEY (cursor_id, rownum, column_pos),
            CONSTRAINT fk_recset_cursor FOREIGN KEY (cursor_id) REFERENCES dbms_sql$cursor (cursor_id) ON DELETE CASCADE,
            CONSTRAINT fk_recset_curcol FOREIGN KEY (cursor_id, column_pos) REFERENCES dbms_sql$cursor_column (cursor_id, column_pos)
        ) WITH (OIDS = FALSE)
        ON COMMIT PRESERVE ROWS;

        -- Marking package "dbms_sql" as initialized
        PERFORM aws_oracle_ext.set_package_initialized('aws_oracle_ext', 'dbms_sql');
    END IF;
END;
]]></complex-attribute>
                        <category _I_D="efec47ef-2ed8-41ec-9cab-b37d6141f6dd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4919e74f-04cb-42e7-80a8-ccd1b5c0272c" name="dbms_sql$is_open" subcategories-loading="none" object-loading="extended" context="dbms_sql$is_open" is-trigger-function="0" unique-function-name="dbms_sql$is_open" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="bool" function-arguments="p_cursor_id integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365113" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$is_open(p_cursor_id integer)" comment="The function checks if the cursor with given cursor id (cursor_id) is currently opened. Returns TRUE if the cursor with given cursor id is opened.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
BEGIN
    /* Requires functions to be installed in "aws_oracle_ext" schema:
       - get_package_variable.
    */

    -- Getting cursor metadata (JSON)
    v_cur_metadata := aws_oracle_ext.get_package_variable('aws_oracle_ext', -- schema name
                                                          'dbms_sql', -- package name
                                                          concat('cursor_id_', p_cursor_id, '_metadata')); -- context "cursor_id_xxx"
    RETURN v_cur_metadata IS NOT NULL;
END;
]]></complex-attribute>
                        <category _I_D="c94c8add-210d-45f3-b1da-6c9aa4a389ba" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="66ee388f-b829-4153-8704-dd371e38acd5" name="dbms_sql$last_row_count" subcategories-loading="none" object-loading="extended" context="dbms_sql$last_row_count" is-trigger-function="0" unique-function-name="dbms_sql$last_row_count" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365114" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$last_row_count()" comment="This function returns the total number (cumulative count) of rows fetched at that point from the most recent cursor.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
    v_cursor_id INTEGER;
BEGIN
    /* Requires functions to be installed in "aws_oracle_ext" schema:
       - get_package_variable.
    */

    -- Getting the most recent parsed (and executed) cursor id (cursor_id)
    v_cursor_id := aws_oracle_ext.get_package_variable('aws_oracle_ext', 'dbms_sql', 'last_parsed_cursor_id')::INTEGER;

    -- Getting cursor metadata (JSON)
    v_cur_metadata := aws_oracle_ext.get_package_variable('aws_oracle_ext', -- schema name
                                                          'dbms_sql', -- package name
                                                          concat('cursor_id_', v_cursor_id, '_metadata')); -- context "cursor_id_xxx"

    -- Getting the current fetched rownum by querying the context
    RETURN coalesce((v_cur_metadata ->> 'curr_row')::NUMERIC, 0);
END;
]]></complex-attribute>
                        <category _I_D="e4a06171-4792-40b0-b6f8-59c01a27e732" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="827bb707-f291-4299-bffb-41458174701f" name="dbms_sql$last_sql_function_code" subcategories-loading="none" object-loading="extended" context="dbms_sql$last_sql_function_code" is-trigger-function="0" unique-function-name="dbms_sql$last_sql_function_code" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="numeric" function-arguments="p_cursor_id integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365115" volatility="STABLE" is-window="f" function-identity-arguments="p_cursor_id integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$last_sql_function_code(p_cursor_id integer)" comment="This function returns a SQL function code of the parsed dynamic statement. See list of possible function codes here: https://docstore.mik.ua/orelly/oracle/bipack/ch02_03.htm">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cursor_id INTEGER;
    v_sql_statement TEXT;
    v_cur_metadata JSONB;
    v_actual_cursor_id INTEGER;
    v_function_code INTEGER := 0;
    v_last_parsed_cur_id INTEGER;
    v_last_opened_cur_id INTEGER;
    v_last_cursor_func_code NUMERIC;
BEGIN
    BEGIN
        v_last_parsed_cur_id := aws_oracle_ext.get_package_variable('aws_oracle_ext', 'dbms_sql', 'last_parsed_cursor_id')::INTEGER;
    EXCEPTION
        WHEN OTHERS THEN
        NULL;
    END;

    v_last_opened_cur_id := coalesce(aws_oracle_ext.get_extpack_variable('last_opened_cursor_id')::INTEGER, 0);

    v_actual_cursor_id := greatest(v_last_opened_cur_id, v_last_parsed_cur_id);

    BEGIN
        v_cur_metadata := aws_oracle_ext.get_package_variable('aws_oracle_ext',
                                                              'dbms_sql',
                                                              format('cursor_id_%s_metadata', v_actual_cursor_id));
    EXCEPTION
        WHEN OTHERS THEN
        NULL;
    END;

    BEGIN
        v_last_cursor_func_code := aws_oracle_ext.get_package_variable('aws_oracle_ext', 'dbms_sql', 'last_cursor_func_code')::NUMERIC;
    EXCEPTION
        WHEN OTHERS THEN
        NULL;
    END;

    IF (p_cursor_id IS NULL AND
        v_cur_metadata IS NULL AND
        v_last_cursor_func_code IS NOT NULL)
    THEN
        RETURN v_last_cursor_func_code;
    ELSE
        v_cursor_id := coalesce(p_cursor_id, v_actual_cursor_id);
    END IF;

    IF v_cursor_id IS NULL THEN
        RETURN v_function_code;
    END IF;

    SELECT sql_statement
      INTO v_sql_statement
      FROM dbms_sql$cursor
     WHERE cursor_id = v_cursor_id;

    IF v_sql_statement ~* '^\s*(CREATE\s+(?:(?:GLOBAL\s+)|(?:LOCAL\s+))?TEMPORARY\s+TABLE\s+)|(CREATE\s+(?:(?:GLOBAL\s+)|(?:LOCAL\s+))?TEMP\s+TABLE\s+)|(CREATE\s+(?:UNLOGGED\s+)?TABLE\s+)'
    THEN
        v_function_code := 1;
    ELSIF v_sql_statement ~* '^\s*(SET\s+ROLE)\s+'
    THEN
        v_function_code := 2;
    ELSIF v_sql_statement ~* '^\s*(INSERT\s+INTO)\s+'
    THEN
        v_function_code := 3;
    ELSIF (v_sql_statement ~* '^\s*(SELECT)\s+' AND v_sql_statement !~* '^SELECT(.)*INTO\s*(\$[0-9]+(,\s*)?)+\s*$')
    THEN
        v_function_code := 4;
    ELSIF v_sql_statement ~* '^\s*(UPDATE)\s+'
    THEN
        v_function_code := 5;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+ROLE)\s+'
    THEN
        v_function_code := 6;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+VIEW)\s+'
    THEN
        v_function_code := 7;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+TABLE\s+)'
    THEN
        v_function_code := 8;
    ELSIF v_sql_statement ~* '^\s*(DELETE)\s+'
    THEN
        v_function_code := 9;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?(?:TEMP\s+)?(?:TEMPORARY\s+)?VIEW)\s+'
    THEN
        v_function_code := 10;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+USER)\s+|(DROP\s+SCHEMA)\s+'
    THEN
        v_function_code := 11;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+ROLE)\s+'
    THEN
        v_function_code := 12;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+(?:TEMPORARY\s+)?SEQUENCE)|(CREATE\s+(?:TEMP\s+)?SEQUENCE)\s+'
    THEN
        v_function_code := 13;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+SEQUENCE)\s+'
    THEN
        v_function_code := 14;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+SEQUENCE)\s+'
    THEN
        v_function_code := 16;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+CLUSTER)\s+'
    THEN
        v_function_code := 18;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+USER)\s+|(CREATE\s+SCHEMA)\s+'
    THEN
        v_function_code := 19;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+(?:UNIQUE\s+)?INDEX)|(CREATE\s+(?:BITMAP\s+)?INDEX)\s+'
    THEN
        v_function_code := 20;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+INDEX)\s+'
    THEN
        v_function_code := 21;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+CLUSTER)\s+'
    THEN
        v_function_code := 22;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?PROCEDURE)\s+'
    THEN
        v_function_code := 24;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+PROCEDURE)\s+'
    THEN
        v_function_code := 25;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+TABLE\s+)'
    THEN
        v_function_code := 26;
    ELSIF v_sql_statement ~* '^\s*(EXPLAIN)\s+'
    THEN
        v_function_code := 27;
    ELSIF v_sql_statement ~* '^\s*(GRANT)\s+'
    THEN
        v_function_code := 28;
    ELSIF v_sql_statement ~* '^\s*(REVOKE)\s+'
    THEN
        v_function_code := 29;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?(?:PUBLIC\s+)?SYNONYM)\s+'
    THEN
        v_function_code := 30;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+(?:PUBLIC\s+)?SYNONYM)\s+'
    THEN
        v_function_code := 31;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+SYSTEM)\s+'
    THEN
        v_function_code := 32;
    ELSIF v_sql_statement ~* '^\s*(SET\s+TRANSACTION)\s+'
    THEN
        v_function_code := 33;
    ELSIF v_sql_statement ~* '(^\s*(?:<<.+>>)?\s*(BEGIN|DECLARE)\s+)|(^\s*DO(:?\s+LANGUAGE\s+[[:alpha:]]+\s+)?\s*\$([[:alnum:]_]*)?\$\s*(:<<.+>>)?\s*)'
    THEN
        v_function_code := 34;
    ELSIF v_sql_statement ~* '^\s*(LOCK)\s+'
    THEN
        v_function_code := 35;
    ELSIF v_sql_statement ~* '^\s*(RENAME\s+[[:alnum:]_$#]+\s+TO)\s+'
    THEN
        v_function_code := 37;
    ELSIF v_sql_statement ~* '^\s*(COMMENT\s+ON)\s+'
    THEN
        v_function_code := 38;
    ELSIF v_sql_statement ~* '^\s*(AUDIT)\s+'
    THEN
        v_function_code := 39;
    ELSIF v_sql_statement ~* '^\s*(NOAUDIT)\s+'
    THEN
        v_function_code := 40;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+INDEX)\s+'
    THEN
        v_function_code := 41;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+DATABASE)\s+'
    THEN
        v_function_code := 44;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+DATABASE)\s+'
    THEN
        v_function_code := 45;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+(?:PUBLIC\s+)?ROLLBACK\s+SEGMENT)\s+'
    THEN
        v_function_code := 46;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+ROLLBACK\s+SEGMENT)\s+'
    THEN
        v_function_code := 47;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+ROLLBACK\s+SEGMENT)\s+'
    THEN
        v_function_code := 48;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+(?:(?:SMALLFILE\s+)|(?:BIGFILE\s+)|(?:UNDO\s+)|(?:TEMPORARY\s+))?TABLESPACE)\s+'
    THEN
        v_function_code := 49;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+TABLESPACE)\s+'
    THEN
        v_function_code := 50;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+TABLESPACE)\s+'
    THEN
        v_function_code := 51;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+SESSION)\s+'
    THEN
        v_function_code := 52;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+USER)\s+|(ALTER\s+SCHEMA)\s+'
    THEN
        v_function_code := 53;
    ELSIF v_sql_statement ~* '^\s*COMMIT(?:\s+WORK)?\s*$'
    THEN
        v_function_code := 54;
    ELSIF v_sql_statement ~* '^\s*ROLLBACK(?:\s+WORK)?\s*$'
    THEN
        v_function_code := 55;
    ELSIF v_sql_statement ~* '^\s*SAVEPOINT(?:\s+[[:alnum:]_$#]+)?\s*$'
    THEN
        v_function_code := 56;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+CONTROLFILE)\s+'
    THEN
        v_function_code := 57;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?(?:CONSTRAINT\s+)?TRIGGER)\s+'
    THEN
        v_function_code := 59;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+TRIGGER)\s+'
    THEN
        v_function_code := 60;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+TRIGGER)\s+'
    THEN
        v_function_code := 61;
    ELSIF v_sql_statement ~* '^\s*(ANALYZE\s+INDEX)\s+'
    THEN
        v_function_code := 63;
    ELSIF v_sql_statement ~* '^\s*(ANALYZE\s+CLUSTER)\s+'
    THEN
        v_function_code := 64;
    ELSIF v_sql_statement ~* '^\s*(ANALYZE\s+TABLE\s+)|(ANALYZE(?:\s+VERBOSE)?\s+)'
    THEN
        v_function_code := 62;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+PROFILE)\s+'
    THEN
        v_function_code := 65;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+PROFILE)\s+'
    THEN
        v_function_code := 66;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+PROFILE)\s+'
    THEN
        v_function_code := 67;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+PROCEDURE)\s+'
    THEN
        v_function_code := 68;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+RESOURCE\s+COST)\s+'
    THEN
        v_function_code := 70;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+(MATERIALIZED\s+VIEW|SNAPSHOT)\s+LOG\s+ON)\s+'
    THEN
        v_function_code := 71;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+(MATERIALIZED\s+VIEW|SNAPSHOT)\s+LOG\s+ON)\s+'
    THEN
        v_function_code := 72;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+(MATERIALIZED\s+VIEW|SNAPSHOT)\s+LOG\s+ON)\s+'
    THEN
        v_function_code := 73;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+(MATERIALIZED\s+VIEW|SNAPSHOT))\s+'
    THEN
        v_function_code := 74;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+(MATERIALIZED\s+VIEW|SNAPSHOT))\s+'
    THEN
        v_function_code := 75;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+(MATERIALIZED\s+VIEW|SNAPSHOT))\s+'
    THEN
        v_function_code := 76;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?TYPE)\s+(?!BODY)'
    THEN
        v_function_code := 77;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+TYPE)\s+(?!BODY)'
    THEN
        v_function_code := 78;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+ROLE)\s+'
    THEN
        v_function_code := 79;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+TYPE)\s+' AND v_sql_statement !~* 'BODY')
    THEN
        v_function_code := 80;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?TYPE\s+BODY)\s+'
    THEN
        v_function_code := 81;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+TYPE\s+(?:.)*\s+COMPILE\s+(?:DEBUG\s+)?BODY)'
    THEN
        v_function_code := 82;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+TYPE\s+BODY)\s+'
    THEN
        v_function_code := 83;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+LIBRARY)\s+'
    THEN
        v_function_code := 84;
    ELSIF v_sql_statement ~* '^\s*(TRUNCATE\s+TABLE)\s+'
    THEN
        v_function_code := 85;
    ELSIF v_sql_statement ~* '^\s*(TRUNCATE\s+CLUSTER)\s+'
    THEN
        v_function_code := 86;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+BITMAPFILE)\s+'
    THEN
        v_function_code := 87;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+VIEW)\s+'
    THEN
        v_function_code := 88;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+BITMAPFILE)\s+'
    THEN
        v_function_code := 89;
    ELSIF v_sql_statement ~* '^\s*(SET\s+CONSTRAINTS)|(SET\s+CONSTRAINT)\s+'
    THEN
        v_function_code := 90;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?FUNCTION\s+(?:.)*(RETURN|RETURNS))\s+'
    THEN
        v_function_code := 91;
    ELSIF v_sql_statement ~* '^\s*(ALTER\s+FUNCTION)\s+'
    THEN
        v_function_code := 92;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+FUNCTION)\s+'
    THEN
        v_function_code := 93;
    ELSIF (v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?PACKAGE)\s+' AND v_sql_statement !~* 'BODY')
    THEN
        v_function_code := 94;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+PACKAGE)\s+' AND v_sql_statement !~* 'BODY')
    THEN
        v_function_code := 95;
    ELSIF (v_sql_statement ~* '^\s*(DROP\s+PACKAGE)\s+' AND v_sql_statement !~* 'BODY')
    THEN
        v_function_code := 96;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?PACKAGE\s+BODY)\s+'
    THEN
        v_function_code := 97;
    ELSIF (v_sql_statement ~* '^\s*(ALTER\s+PACKAGE)\s+' AND v_sql_statement ~* 'BODY')
    THEN
        v_function_code := 98;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+PACKAGE\s+BODY)\s+'
    THEN
        v_function_code := 99;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?DIRECTORY)\s+'
    THEN
        v_function_code := 157;
    ELSIF v_sql_statement ~* '^\s*(DROP\s+DIRECTORY)\s+'
    THEN
        v_function_code := 158;
    ELSIF v_sql_statement ~* '^\s*(CREATE\s+(?:OR\s+REPLACE\s+)?LIBRARY)\s+'
    THEN
        v_function_code := 159;
    END IF;

    IF (p_cursor_id IS NULL)
    THEN
        PERFORM aws_oracle_ext.set_package_variable('aws_oracle_ext',
                                                    'dbms_sql',
                                                    'last_cursor_func_code',
                                                    v_function_code);
    END IF;

    RETURN v_function_code;
END;
]]></complex-attribute>
                        <category _I_D="85fd5e4d-3db5-42b5-ac58-bfe6712bcb80" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6e227433-a0a1-446d-bd8d-6b407c46521d" name="dbms_sql$open_cursor" subcategories-loading="none" object-loading="extended" context="dbms_sql$open_cursor" is-trigger-function="0" unique-function-name="dbms_sql$open_cursor" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365117" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$open_cursor()" comment="The function opens up a cursor and returns a unique cursor id which lives through the session and used as a reference for processing the dynamic statement.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cursor_id INTEGER;
BEGIN
    PERFORM aws_oracle_ext.dbms_sql$init();

    INSERT INTO dbms_sql$cursor (cursor_id)
         VALUES (DEFAULT)
      RETURNING cursor_id
           INTO v_cursor_id;

    PERFORM aws_oracle_ext.set_package_variable('aws_oracle_ext',
                                                'dbms_sql',
                                                format('cursor_id_%s_metadata', v_cursor_id),
                                                jsonb_build_object('cursor_id', v_cursor_id,
                                                                   'from_refcursor', FALSE));

    PERFORM aws_oracle_ext.set_package_variable('aws_oracle_ext',
                                                'dbms_sql',
                                                'last_cursor_func_code',
                                                NULL::TEXT);

    PERFORM aws_oracle_ext.set_extpack_variable('last_opened_cursor_id', v_cursor_id);

    RETURN v_cursor_id;
END;
]]></complex-attribute>
                        <category _I_D="27b41fed-06b1-416b-83db-d82f0aac03da" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="90c9289a-21a9-428d-a593-54c205d7cb91" name="dbms_sql$parse" subcategories-loading="none" object-loading="extended" context="dbms_sql$parse" is-trigger-function="0" unique-function-name="dbms_sql$parse" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,text,integer" is-returning-set="f" ret-datatype="void" function-arguments="p_cursor_id integer, p_sql_statement text, p_cols_count integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365118" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer, p_sql_statement text, p_cols_count integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$parse(p_cursor_id integer, p_sql_statement text, p_cols_count integer)" comment="The procedure parses the given statement in the given cursor, identified by cursor id (cursor_id).">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
    v_sql_statement TEXT := trim(p_sql_statement);
    v_statement_hash TEXT := coalesce(md5(v_sql_statement), '');
BEGIN
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    ELSIF (coalesce(char_length(v_sql_statement), 0) = 0) THEN
        RAISE invalid_prepared_statement_definition;
    END IF;

    v_cur_metadata := aws_oracle_ext.get_package_variable('aws_oracle_ext',
                                                          'dbms_sql',
                                                          format('cursor_id_%s_metadata', p_cursor_id));

    v_cur_metadata := jsonb_set(v_cur_metadata, '{cols_count}', coalesce(to_jsonb(p_cols_count), JSONB 'null'));

    IF (v_cur_metadata ->> 'from_refcursor') THEN
        v_cur_metadata := jsonb_set(v_cur_metadata, '{from_refcursor}', JSONB 'false');
    END IF;

    IF (v_statement_hash <> coalesce(v_cur_metadata ->> 'statement_hash', ''))
    THEN
        v_cur_metadata := jsonb_set(v_cur_metadata, '{statement_hash}', to_jsonb(v_statement_hash));

        v_cur_metadata := jsonb_set(v_cur_metadata, '{colinfo_refresh}', to_jsonb(1));

        v_sql_statement := aws_oracle_ext.strip_sql_comments(v_sql_statement,
                                                             p_adv_quote_tags => ARRAY['$q$','$Q$'],
                                                             p_validate_multiline => TRUE);
        UPDATE dbms_sql$cursor
           SET sql_statement = v_sql_statement
         WHERE cursor_id = p_cursor_id;
    END IF;

    PERFORM aws_oracle_ext.set_package_variable('aws_oracle_ext',
                                                'dbms_sql',
                                                'last_parsed_cursor_id',
                                                p_cursor_id);

    PERFORM aws_oracle_ext.set_package_variable('aws_oracle_ext',
                                                'dbms_sql',
                                                format('cursor_id_%s_metadata', p_cursor_id),
                                                v_cur_metadata);
EXCEPTION
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := format('Cursor_id (%s) does not exist or incorrect.', p_cursor_id),
                    DETAIL := format('Cursor_id (%s) is not found, SQL statement text was not associated with it.', p_cursor_id),
                    HINT := format('Make sure that cursor_id (%s) exists or perform ''dbms_sql$open_cursor'' procedure to get a new one.', p_cursor_id);
    WHEN invalid_prepared_statement_definition THEN
        RAISE USING MESSAGE := format('SQL statement is empty. Nothing to associate with cursor_id (%s).', p_cursor_id),
                    DETAIL := 'Supplied SQL statement is empty. Oracle error ''ORA-00900: invalid SQL statement''.',
                    HINT := 'Correct the statement and try to perform ''dbms_sql$parse'' procedure again.';
END;
]]></complex-attribute>
                        <category _I_D="1d0b28e2-ad29-4d6d-a6b4-18d52a9d6477" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="776196f3-f375-4660-b2ee-e6064028557e" name="dbms_sql$to_cursor_number" subcategories-loading="none" object-loading="extended" context="dbms_sql$to_cursor_number" is-trigger-function="0" unique-function-name="dbms_sql$to_cursor_number" is-aggregate="f" language-name="plpgsql" arguments-datatypes="refcursor" is-returning-set="f" ret-datatype="int4" function-arguments="p_refcursor refcursor" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365119" volatility="VOLATILE" is-window="f" function-identity-arguments="p_refcursor refcursor" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$to_cursor_number(p_refcursor refcursor)" comment="This function takes an OPENed REFCURSOR and transforms it into a DBMS_SQL cursor number. Once the REFCURSOR is transformed into a DBMS_SQL cursor number, the REFCURSOR is no longer accessible by any native dynamic SQL operations.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
    v_curcols_data JSONB;
    v_cursor_id INTEGER;
    v_sql_statement TEXT;
    v_cols_count SMALLINT;
    v_col_aliases VARCHAR;
    v_colstype_block TEXT;
    v_prepdynsql_block TEXT;
    v_coldtype_cases VARCHAR;
    v_err_message TEXT;
    v_err_stack TEXT;
    v_refcur_rec RECORD;
    v_refcur_rec_json JSONB;
    v_debug_mode SMALLINT := 0;
BEGIN
    IF (p_refcursor IS NULL) THEN
        RAISE invalid_cursor_state;
    END IF;

    FETCH FIRST
     FROM p_refcursor
     INTO v_refcur_rec;

    v_cursor_id := aws_oracle_ext.dbms_sql$open_cursor();

    v_cols_count := aws_oracle_ext.regexp_count(regexp_replace(v_refcur_rec::TEXT, '"(.*?)"', 'x', 'gi'), ',') + 1;

    v_cur_metadata := aws_oracle_ext.get_package_variable('aws_oracle_ext',
                                                          'dbms_sql',
                                                          format('cursor_id_%s_metadata', v_cursor_id));

    v_cur_metadata := jsonb_set(v_cur_metadata, '{cols_count}', to_jsonb(v_cols_count));

    v_colstype_block :=
        concat_ws(chr(10),
            'DO $dbms_sql$',
            '<<outer_block>>',
            'DECLARE',
            '    v_refcur_rec RECORD;',
            format('    v_cursor_id INTEGER := %s;', v_cursor_id),
            format('    v_refcursor REFCURSOR := %s;', quote_literal(p_refcursor)),
            'BEGIN',
            'FETCH FIRST',
            ' FROM outer_block.v_refcursor',
            ' INTO outer_block.v_refcur_rec;',
            '',
            '-- Creating temp table in order to reflect the columns structure',
            format('CREATE TEMP TABLE tbl_curid%s_colstype', v_cursor_id),
            'WITH (OIDS = FALSE)',
            'ON COMMIT DROP',
            'AS',
            concat('SELECT ',
            (SELECT string_agg(concat('outer_block.v_refcur_rec.', col_name), concat(',', chr(10), repeat(' ', 7)))
               FROM json_object_keys(row_to_json(v_refcur_rec)) AS col_name)),
            'WITH NO DATA;',
            '',
            concat_ws(chr(10), '-- Saving detailed column data (name, type, precision, etc.)',
            'INSERT INTO dbms_sql$cursor_column (cursor_id,',
            '                                    column_pos,',
            '                                    col_name,',
            '                                    data_type,',
            '                                    base_type,',
            '                                    is_nullable,',
            '                                    chr_max_len,',
            '                                    chr_byte_len,',
            '                                    num_precision,',
            '                                    num_scale,',
            '                                    tstamp_precision,',
            '                                    interval_type,',
            '                                    interval_precision)',
            'SELECT outer_block.v_cursor_id,',
            '       ordinal_position,',
            '       column_name,',
            '       upper(data_type) AS data_type,',
            '       CASE',
            '          WHEN data_type IN (''text'',',
            '                             ''character'',',
            '                             ''character varying'') THEN ''TEXT''',
            '          WHEN data_type IN (''real'',',
            '                             ''bigint'',',
            '                             ''integer'',',
            '                             ''numeric'',',
            '                             ''decimal'',',
            '                             ''smallint'',',
            '                             ''double precision'') THEN ''NUMERIC''',
            '          WHEN data_type IN (''date'',',
            '                             ''timestamp without time zone'') THEN ''TIMESTAMP WITHOUT TIME ZONE''',
            '          ELSE upper(data_type)',
            '       END AS base_type,',
            '       CASE is_nullable',
            '          WHEN ''YES'' THEN TRUE',
            '          ELSE FALSE',
            '       END AS is_nullable,',
            '       character_maximum_length,',
            '       character_octet_length,',
            '       numeric_precision,',
            '       numeric_scale,',
            '       datetime_precision,',
            '       interval_type,',
            '       interval_precision',
            '  FROM information_schema.columns'),
            format(' WHERE table_name = ''tbl_curid%s_colstype''', v_cursor_id),
            ' ORDER BY ordinal_position ASC;',
            '',
            '-- Dropping temp table since its not needed anymore',
            format('DROP TABLE IF EXISTS tbl_curid%s_colstype;', v_cursor_id),
            'END; $dbms_sql$',
            'LANGUAGE plpgsql;');

    EXECUTE v_colstype_block;

    SELECT jsonb_object_agg(concat('col_', curcol_data.column_pos), curcol_data.column_data)
      INTO v_curcols_data
      FROM (SELECT curcol3.column_pos,
                   (SELECT to_jsonb(curcol2.*)
                      FROM (SELECT curcol1.data_type,
                                   curcol1.base_type
                              FROM dbms_sql$cursor_column AS curcol1
                             WHERE curcol1.cursor_id = curcol3.cursor_id
                               AND curcol1.column_pos = curcol3.column_pos
                           ) AS curcol2
                   ) AS column_data
              FROM dbms_sql$cursor_column AS curcol3
             WHERE curcol3.cursor_id = v_cursor_id
           ) AS curcol_data;

    v_cur_metadata := jsonb_set(v_cur_metadata, '{curcols_data}', v_curcols_data);

    v_cur_metadata := jsonb_set(v_cur_metadata, '{from_refcursor}', JSONB 'true');

    PERFORM aws_oracle_ext.set_package_variable('aws_oracle_ext',
                                                'dbms_sql',
                                                format('cursor_id_%s_metadata', v_cursor_id),
                                                v_cur_metadata);

    SELECT string_agg(coalesce(concat('        CASE colpos', chr(10)) ||
                               (SELECT string_agg(format('           WHEN %s THEN col_%s', colpos, colpos), chr(10))
                                  FROM unnest(colpos_list) AS colpos) ||
                               concat(chr(10), '        END'),
                               '        NULL'),
                      concat(',', chr(10)) ORDER BY datatypes.dtype_order ASC)
      INTO v_coldtype_cases
      FROM (SELECT 'TEXT' AS base_type, 1 AS dtype_order
             UNION ALL
            SELECT 'NUMERIC', 2
             UNION ALL
            SELECT 'MONEY', 3
             UNION ALL
            SELECT 'TIMESTAMP WITHOUT TIME ZONE', 4
             UNION ALL
            SELECT 'TIMESTAMP WITH TIME ZONE', 5
             UNION ALL
            SELECT 'INTERVAL', 6
             UNION ALL
            SELECT 'BOOLEAN', 7
             UNION ALL
            SELECT 'XML', 8
             UNION ALL
            SELECT 'BYTEA', 9) AS datatypes
           LEFT JOIN (SELECT base_type,
                             array_agg(column_pos) AS colpos_list
                        FROM dbms_sql$cursor_column
                       WHERE cursor_id = v_cursor_id
                       GROUP BY base_type) AS curcols ON (curcols.base_type = datatypes.base_type);

    SELECT string_agg(concat(repeat(' ', 29), 'col_', colnum),
                      concat(',', chr(10)))
      INTO v_col_aliases
      FROM generate_series(1, v_cols_count) AS colnum;

    v_prepdynsql_block :=
        concat_ws(chr(10),
            'DO $dbms_sql$',
            '<<outer_block>>',
            'DECLARE',
            '    v_cur_metadata JSONB;',
            '    v_refcur_rec RECORD;',
            format('    v_cursor_id INTEGER := %s;', v_cursor_id),
            format('    v_cols_count SMALLINT := %s;', v_cols_count),
            '    v_rows_fetched INTEGER := 0;',
            format('    v_refcursor REFCURSOR := %s;', quote_literal(p_refcursor)),
            'BEGIN',
            'LOOP',
            '-- Fetching row into the record variable',
            'IF (outer_block.v_rows_fetched = 0) THEN',
            '    FETCH FIRST',
            '     FROM outer_block.v_refcursor',
            '     INTO outer_block.v_refcur_rec;',
            'ELSE',
            '    FETCH NEXT',
            '     FROM outer_block.v_refcursor',
            '     INTO outer_block.v_refcur_rec;',
            'END IF;',
            '',
            '-- Exit when no more row to fetch',
            'EXIT WHEN NOT FOUND;',
            'outer_block.v_rows_fetched := outer_block.v_rows_fetched + 1;',
            '',
            '-- Inserting column value into "dbms_sql$recordset" table',
            'EXECUTE',
            quote_literal(concat_ws(chr(10),
            'INSERT INTO dbms_sql$recordset (cursor_id,',
            '                                 rownum,',
            '                                 column_pos,',
            '                                 chr_val,',
            '                                 num_val,',
            '                                 money_val,',
            '                                 tstamp_val,',
            '                                 tstamptz_val,',
            '                                 interval_val,',
            '                                 bool_val,',
            '                                 xml_val,',
            '                                 bin_val)',
            ' SELECT $1,',
            '        $2,',
            '        colpos,',
            v_coldtype_cases,
            '   FROM (SELECT generate_series(1, $3) AS colpos,',
            '                dynsql.*',
            concat('           FROM (SELECT ',
            (SELECT string_agg(concat('$', col_num), concat(',', chr(10), repeat(' ', 24)))
               FROM generate_series(4, v_cols_count + 3) AS col_num)),
            format('                ) AS dynsql (%s)', trim(v_col_aliases)),
            '        ) AS dynsql2')),
            'USING outer_block.v_cursor_id,',
            '      outer_block.v_rows_fetched,',
            '      outer_block.v_cols_count,',
            concat((SELECT string_agg(concat('      outer_block.v_refcur_rec.', col_name),
                                      concat(',', chr(10)))
               FROM json_object_keys(row_to_json(v_refcur_rec)) AS col_name), ';'),
            'END LOOP;',
            '',
            'outer_block.v_cur_metadata := -- Getting cursor metadata (JSON)',
            '    aws_oracle_ext.get_package_variable(''aws_oracle_ext'', -- schema name',
            '                                        ''dbms_sql'', -- package name',
            '                                        format(''cursor_id_%s_metadata'', outer_block.v_cursor_id)); -- context "cursor_id_xxx"',
            '',
            '-- Setting "rows_count" (JSON) cursor property',
            'outer_block.v_cur_metadata := jsonb_set(outer_block.v_cur_metadata, ''{rows_count}'', to_jsonb(outer_block.v_rows_fetched));',
            '',
            '-- Saving cursor metadata (JSON)',
            'PERFORM aws_oracle_ext.set_package_variable(''aws_oracle_ext'', -- schema name',
            '                                            ''dbms_sql'', -- package name',
            '                                            format(''cursor_id_%s_metadata'', outer_block.v_cursor_id), -- context "cursor_id_xxx"',
            '                                            outer_block.v_cur_metadata); -- cursor metadata JSON',
            'END; $dbms_sql$',
            'LANGUAGE plpgsql;');

    EXECUTE v_prepdynsql_block;

    PERFORM aws_oracle_ext.set_package_variable('aws_oracle_ext',
                                                'dbms_sql',
                                                'last_parsed_cursor_id',
                                                v_cursor_id);
    SELECT statement
      INTO v_sql_statement
      FROM pg_catalog.pg_cursors
     WHERE name = p_refcursor::TEXT;

    UPDATE dbms_sql$cursor
       SET sql_statement = v_sql_statement
     WHERE cursor_id = v_cursor_id;

    IF (v_debug_mode = 1) THEN
        UPDATE dbms_sql$cursor
           SET colstype_block = v_colstype_block,
               prepdynsql_block = v_prepdynsql_block
         WHERE cursor_id = v_cursor_id;
    END IF;

    RETURN v_cursor_id;
EXCEPTION
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := 'Supplied REFCURSOR is not opened.',
                    DETAIL := 'Could not transform a not OPENed REFCURSOR into a DBMS_SQL cursor number. Oracle error ''ORA-01001: invalid cursor''.',
                    HINT := 'Perform OPEN operation over supplied REFCURSOR before passing it in.';
    WHEN syntax_error THEN
        GET STACKED DIAGNOSTICS v_err_message = MESSAGE_TEXT,
                                v_err_stack = PG_EXCEPTION_CONTEXT;

        RAISE USING MESSAGE := 'Syntax error has occured while trying to transform REFCURSOR into a DBMS_SQL cursor number.',
                    DETAIL := concat(v_err_message, '.'),
                    HINT := concat('(Call Stack)', chr(10), v_err_stack);
END;
]]></complex-attribute>
                        <category _I_D="8f133c44-5bed-4f74-adf1-a9cee4e23337" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5064ed7a-617b-4ae5-86ef-04f3745da2f1" name="dbms_sql$to_refcursor" subcategories-loading="none" object-loading="extended" context="dbms_sql$to_refcursor" is-trigger-function="0" unique-function-name="dbms_sql$to_refcursor" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="refcursor" function-arguments="p_cursor_id integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365121" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_id integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$to_refcursor(p_cursor_id integer)" comment="This function takes an OPENed, PARSEd, and EXECUTEd cursor (identified by cursor_id) and transforms/migrates it into a PL/pgSQL manageable REFCURSOR that can be consumed by any PL/pgSQL function. This subprogram is only used with SELECT cursors.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_cur_metadata JSONB;
    v_curr_row INTEGER;
    v_rows_count INTEGER;
    v_coldtype_casts VARCHAR;
    v_colnames_cases VARCHAR;
    v_colnames_list VARCHAR;
    v_resrecset_sql TEXT;
    v_res_refcursor REFCURSOR := concat('cursor_id_', p_cursor_id, '_resrecset');
BEGIN
    /* Requires functions to be installed in "aws_oracle_ext" schema:
       - dbms_sql$is_open;
       - get_package_variable;
       - dbms_sql$close_cursor.
    */

    -- Exit from function if the cursor (cursor_id) is not opened
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    END IF;

    -- Getting cursor metadata (JSON)
    v_cur_metadata := aws_oracle_ext.get_package_variable('aws_oracle_ext', -- schema name
                                                          'dbms_sql', -- package name
                                                          concat('cursor_id_', p_cursor_id, '_metadata')); -- context "cursor_id_xxx"
    -- Cursor rows count should not be empty (null)
    IF ((v_cur_metadata ->> 'rows_count') IS NULL) THEN
        RAISE null_value_not_allowed;
    END IF;

    -- Getting column info (list of names, data type casts, column position cases)
    SELECT string_agg(concat('CAST("', col_name, '" AS ', data_type, ')'), concat(',', chr(10), repeat(' ', 7))),
           string_agg(concat('MAX(CASE column_pos WHEN ',
                      column_pos,
                      ' THEN ',
                      CASE base_type
                         WHEN 'TEXT' THEN 'chr_val'
                         WHEN 'NUMERIC' THEN 'num_val'
                         WHEN 'MONEY' THEN 'money_val'
                         WHEN 'TIMESTAMP WITHOUT TIME ZONE' THEN 'tstamp_val'
                         WHEN 'TIMESTAMP WITH TIME ZONE' THEN 'tstamptz_val'
                         WHEN 'INTERVAL' THEN 'interval_val'
                         WHEN 'BOOLEAN' THEN 'bool_val'
                         WHEN 'XML' THEN 'xml_val'
                         WHEN 'BYTEA' THEN 'bin_val'
                      END,
                      ' END)'), concat(',', chr(10), repeat(' ', 15))),
           string_agg(concat('"', col_name, '"'), ', ')
      INTO v_coldtype_casts,
           v_colnames_cases,
           v_colnames_list -- Comma-separated list of column names
      FROM dbms_sql$cursor_column
     WHERE cursor_id = p_cursor_id;

    v_resrecset_sql := concat('SELECT ', v_coldtype_casts, chr(10), repeat(' ', 2),
                              'FROM (SELECT ', v_colnames_cases, chr(10), repeat(' ', 10),
                              'FROM dbms_sql$recordset', chr(10), repeat(' ', 9),
                              'WHERE rownum > ', coalesce((v_cur_metadata ->> 'curr_row')::INTEGER, 0), chr(10), repeat(' ', 9),
                              'GROUP BY rownum', chr(10), repeat(' ', 7),
                              ') AS recset (', v_colnames_list, ')');

    -- Opening REFCURSOR for dymanic SQL query resulting data
    OPEN v_res_refcursor SCROLL FOR EXECUTE v_resrecset_sql;

    -- Closing the cursor and cleaning its context
    PERFORM aws_oracle_ext.dbms_sql$close_cursor(p_cursor_id);

    RETURN v_res_refcursor;
EXCEPTION
    -- Cursor isn't opened or doesn't exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := format('Cursor_id (%s) does not exist or incorrect.', p_cursor_id),
                    DETAIL := format('Cursor_id (%s) is not found, SQL statement text was not associated with it.', p_cursor_id),
                    HINT := format('Make sure that cursor_id (%s) exists or perform ''dbms_sql$open_cursor'' procedure to get a new one.', p_cursor_id);
    -- Cursor rows count should not be empty (null)
    WHEN null_value_not_allowed THEN
        RAISE USING MESSAGE := 'Invalid cursor. Oracle error ''ORA-01001''.',
                    DETAIL := format('Dynamic SQL statement, associated with cursor_id (%s), was not executed.', p_cursor_id),
                    HINT := format('Perform ''dbms_sql$execute'' or ''dbms_sql$execute_and_fetch'' procedure for cursor_id (%s).', p_cursor_id);
END;
]]></complex-attribute>
                        <category _I_D="c69ec7c7-4da6-442a-b83d-6d24957c5a54" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9704a5d6-4a3f-441b-aae8-c925728c8f50" name="dbms_sql$variable_value" subcategories-loading="none" object-loading="extended" context="dbms_sql$variable_value" is-trigger-function="0" unique-function-name="dbms_sql$variable_value" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_cursor_id integer, p_var_name character varying, INOUT p_var_value anyelement" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365124" volatility="STABLE" is-window="f" function-identity-arguments="p_cursor_id integer, p_var_name character varying, INOUT p_var_value anyelement" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$variable_value(p_cursor_id integer, p_var_name character varying, INOUT p_var_value anyelement)" comment="This procedure returns the value of the named variable for a given cursor (identified by cursor_id). It is used to return the values of bind variables inside PL/pgSQL blocks or DML statements with returning clause.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_var_info TEXT[];
    v_chr_val TEXT;
    v_num_val NUMERIC;
    v_money_val MONEY;
    v_tstamp_val TIMESTAMP WITHOUT TIME ZONE;
    v_tstamptz_val TIMESTAMP WITH TIME ZONE;
    v_interval_val INTERVAL;
    v_bool_val BOOLEAN;
    v_xml_val XML;
    v_bin_val BYTEA;
    v_is_fixed SMALLINT;
    v_value_size INTEGER;
    v_var_base_type VARCHAR;
    v_var_data_type VARCHAR;
    v_out_var_size INTEGER;
    v_out_base_type VARCHAR;
    v_out_data_type VARCHAR := upper(pg_typeof(p_var_value)::VARCHAR);
BEGIN
    /* Requires functions to be installed in "aws_oracle_ext" schema:
       - dbms_sql$is_open.
    */

    -- Exit from function if the cursor (cursor_id) is not opened
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    -- Variable name should not be empty (null)
    ELSEIF (p_var_name IS NULL) THEN
        RAISE null_value_not_allowed;
    END IF;

    -- Determining base data type of passed OUT variable
    v_out_base_type :=
        CASE
           WHEN v_out_data_type IN ('TEXT',
                                    'CHARACTER',
                                    'CHARACTER VARYING') THEN 'TEXT'
           WHEN v_out_data_type IN ('REAL',
                                    'BIGINT',
                                    'INTEGER',
                                    'NUMERIC',
                                    'DECIMAL',
                                    'SMALLINT',
                                    'DOUBLE PRECISION') THEN 'NUMERIC'
           WHEN v_out_data_type = 'MONEY' THEN 'MONEY'
           WHEN v_out_data_type IN ('DATE',
                                    'TIMESTAMP WITHOUT TIME ZONE') THEN 'TIMESTAMP WITHOUT TIME ZONE'
           WHEN v_out_data_type = 'TIMESTAMP WITH TIME ZONE' THEN 'TIMESTAMP WITH TIME ZONE'
           WHEN v_out_data_type = 'INTERVAL' THEN 'INTERVAL'
           WHEN v_out_data_type = 'BOOLEAN' THEN 'BOOLEAN'
           WHEN v_out_data_type = 'XML' THEN 'XML'
           WHEN v_out_data_type = 'BYTEA' THEN 'BYTEA'
        END;

    -- Extracting variable info (label in statement code and general name) from supplied string
    v_var_info := regexp_matches(p_var_name, '^((?:[[:space:]]*\$[[:digit:]]+[[:space:]]*(?:\|)?)+)*[[:space:]]*\:?([[:alnum:]_]+)[[:space:]]*$', 'gi');

    /* Extracting var data from "dbms_sql$bind_variable"
       (by cursor id and variable name)
    */
    SELECT data_type,
           base_type,
           value_size,
           is_fixed,
           chr_val,
           num_val,
           money_val,
           tstamp_val,
           tstamptz_val,
           interval_val,
           bool_val,
           xml_val,
           bin_val
      INTO STRICT
           v_var_data_type,
           v_var_base_type,
           v_value_size,
           v_is_fixed,
           v_chr_val,
           v_num_val,
           v_money_val,
           v_tstamp_val,
           v_tstamptz_val,
           v_interval_val,
           v_bool_val,
           v_xml_val,
           v_bin_val
      FROM dbms_sql$bind_variable
     WHERE cursor_id = p_cursor_id
       AND var_name = v_var_info[2]; -- Variable name

    -- Check if OUT argument base type matches declared bind variable base type
    IF (substring(v_out_base_type, 1, 14) != substring(v_var_base_type, 1, 14)) THEN
        RAISE datatype_mismatch;
    -- Variable should not be declared using "dbms_sql$bind_variable_char"
    ELSIF (v_is_fixed = 1) THEN
        RAISE most_specific_type_mismatch;
    END IF;

    -- Copying value into the OUT argument
    IF (v_out_base_type = 'TEXT') THEN
        v_chr_val := CASE
                        WHEN v_value_size IS NULL THEN v_chr_val
                        ELSE substring(v_chr_val, 1, v_value_size)
                     END;
        v_out_var_size := coalesce(length(p_var_value::BYTEA, pg_client_encoding()), 0);

        IF (v_out_data_type != 'CHARACTER') THEN
            p_var_value := v_chr_val;
        ELSIF (v_out_var_size != 0) THEN
            IF (v_out_var_size < coalesce(char_length(v_chr_val), 0)) THEN
                RAISE string_data_length_mismatch;
            END IF;

            p_var_value := rpad(v_chr_val, v_out_var_size, ' ');
        ELSE
            p_var_value := rpad(v_chr_val, v_var_size, ' ');
        END IF;
    ELSIF (v_out_base_type = 'NUMERIC') THEN
        p_var_value := v_num_val;
    ELSIF (v_out_base_type = 'MONEY') THEN
        p_var_value := v_money_val;
    ELSIF (v_out_base_type = 'TIMESTAMP WITHOUT TIME ZONE') THEN
        IF (v_var_base_type = 'TIMESTAMP WITH TIME ZONE') THEN
            p_var_value := v_tstamptz_val::TIMESTAMP WITHOUT TIME ZONE;
        ELSE
            p_var_value := v_tstamp_val;
        END IF;
    ELSIF (v_out_base_type = 'TIMESTAMP WITH TIME ZONE') THEN
        IF (v_var_base_type = 'TIMESTAMP WITHOUT TIME ZONE') THEN
            p_var_value := v_tstamp_val::TIMESTAMP WITH TIME ZONE;
        ELSE
            p_var_value := v_tstamptz_val;
        END IF;
    ELSIF (v_out_base_type = 'INTERVAL') THEN
        p_var_value := v_interval_val;
    ELSIF (v_out_base_type = 'BOOLEAN') THEN
        p_var_value := v_bool_val;
    ELSIF (v_out_base_type = 'XML') THEN
        p_var_value := v_xml_val;
    ELSIF (v_out_base_type = 'BYTEA') THEN
        p_var_value := substring(v_bin_val from 1 for v_value_size);
    END IF;
EXCEPTION
    -- Cursor isn't opened or doesn't exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := format('Cursor_id (%s) does not exist or incorrect.', p_cursor_id),
                    DETAIL := format('Cursor_id (%s) is not found, SQL statement text was not associated with it.', p_cursor_id),
                    HINT := format('Make sure that cursor_id (%s) exists or perform ''dbms_sql$open_cursor'' procedure to get a new one.', p_cursor_id);
    -- Variable name is empty (null)
    WHEN null_value_not_allowed THEN
        RAISE USING MESSAGE := 'Bind variable name is empty.',
                    DETAIL := 'Could not get a value of a variable without name. Oracle error ''ORA-01006''.',
                    HINT := 'Pass in an existing variable name in order to get it''s value.';
    -- Variable with supplied name isn't found
    WHEN no_data_found THEN
        RAISE USING MESSAGE := format('Variable %s doesn''t found for cursor_id (%s). Oracle error ''ORA-01006''.', quote_literal(v_var_info[2]), p_cursor_id),
                    DETAIL := format('Variable with name %s, binded to cursor_id (%s), doesn''t found or cursor_id is wrong.', quote_literal(v_var_info[2]), p_cursor_id),
                    HINT := format('Make sure that cursor_id (%s) exists and variable %s was previously binded to it trough ''dbms_sql$bind_variable procedure''.',
                                   p_cursor_id, quote_literal(v_var_info[2]));
    -- OUT argument base type doesn't match declared bind variable base type
    WHEN datatype_mismatch THEN
        RAISE USING MESSAGE := format('Type of OUT argument doesn''t match declared variable type, cursor_id (%s).', p_cursor_id),
                    DETAIL := format('OUT argument type %s, variable type %s. Oracle error ''ORA-06562: type of OUT argument must match type of column or bind variable''.',
                                     v_out_data_type, v_var_base_type),
                    HINT := format('Make sure that supplied OUT argument type match that for cursor_id (%s) variable.',
                                   p_cursor_id, quote_literal(v_var_info[2]));
    -- Variable was declared using "dbms_sql$bind_variable_char"
    WHEN most_specific_type_mismatch THEN
        RAISE USING MESSAGE := format('Type of OUT argument doesn''t match declared variable type, cursor_id (%s).', p_cursor_id),
                    DETAIL := 'Oracle error ''ORA-06562: type of OUT argument must match type of column or bind variable',
                    HINT := format('Try to use ''dbms_sql$variable_value_char'' procedure to get a %s variable value for cursor_id (%s).',
                                   quote_literal(v_var_info[2]), p_cursor_id);
    -- Length of the supplied OUT argument is too small
    WHEN string_data_length_mismatch THEN
        RAISE USING MESSAGE := 'Character string buffer too small. Oracle error ''ORA-06502''.',
                    DETAIL := 'Length of the supplied OUT argument is too small to store bind variable value.',
                    HINT := format('Supply OUT argument of proper length, minimum %s bytes to store binded variable value.',
                                   coalesce(char_length(v_chr_val), 0));
END;
]]></complex-attribute>
                        <category _I_D="39f375ef-c597-4855-834d-aa1ff848457f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="41cd294c-0dcb-4634-acc4-a9465638a102" name="dbms_sql$variable_value_char" subcategories-loading="none" object-loading="extended" context="dbms_sql$variable_value_char" is-trigger-function="0" unique-function-name="dbms_sql$variable_value_char" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_cursor_id integer, p_var_name character varying, INOUT p_var_value anyelement" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365122" volatility="STABLE" is-window="f" function-identity-arguments="p_cursor_id integer, p_var_name character varying, INOUT p_var_value anyelement" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_sql$variable_value_char(p_cursor_id integer, p_var_name character varying, INOUT p_var_value anyelement)" comment="This procedure returns the value of the named variable for a given cursor (identified by cursor_id). It is used to return the values of bind variables inside PL/pgSQL blocks or DML statements with returning clause. Variation for variables containing CHAR data.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_var_info TEXT[];
    v_chr_val TEXT;
    v_is_fixed SMALLINT;
    v_var_size INTEGER;
    v_value_size INTEGER;
    v_var_data_type VARCHAR;
    v_out_var_size INTEGER;
    v_out_data_type VARCHAR := upper(pg_typeof(p_var_value)::VARCHAR);
BEGIN
    /* Requires functions to be installed in "aws_oracle_ext" schema:
       - dbms_sql$is_open.
    */

    -- Exit from function if the cursor (cursor_id) is not opened
    IF (NOT aws_oracle_ext.dbms_sql$is_open(p_cursor_id)) THEN
        RAISE invalid_cursor_state;
    -- Variable name should not be empty (null)
    ELSEIF (p_var_name IS NULL) THEN
        RAISE null_value_not_allowed;
    END IF;

    -- Extracting variable info (label in statement code and general name) from supplied string
    v_var_info := regexp_matches(p_var_name, '^((?:[[:space:]]*\$[[:digit:]]+[[:space:]]*(?:\|)?)+)*[[:space:]]*\:?([[:alnum:]_]+)[[:space:]]*$', 'gi');

    /* Extracting var data from "dbms_sql$bind_variable"
       (by cursor id and variable name)
    */
    SELECT data_type,
           var_size,
           value_size,
           is_fixed,
           chr_val
      INTO STRICT
           v_var_data_type,
           v_var_size,
           v_value_size,
           v_is_fixed,
           v_chr_val
      FROM dbms_sql$bind_variable
     WHERE cursor_id = p_cursor_id
       AND var_name = v_var_info[2]; -- Variable name;

    -- Variable should not be declared using "dbms_sql$bind_variable"
    IF (v_is_fixed != 1) THEN
        RAISE most_specific_type_mismatch;
    END IF;

    v_chr_val := CASE
                    WHEN v_value_size IS NULL THEN v_chr_val
                    ELSE substring(v_chr_val, 1, v_value_size)
                 END;

    -- Copying value into the OUT argument
    IF (v_out_data_type IN ('TEXT',
                            'CHARACTER',
                            'CHARACTER VARYING'))
    THEN
        v_out_var_size := coalesce(length(p_var_value::BYTEA, pg_client_encoding()), 0);

        IF (v_out_data_type != 'CHARACTER') THEN
            p_var_value := v_chr_val;
        ELSIF (v_out_var_size != 0) THEN
            IF (v_out_var_size < coalesce(char_length(v_chr_val), 0)) THEN
                RAISE string_data_length_mismatch;
            END IF;

            p_var_value := rpad(v_chr_val, v_out_var_size, ' ');
        ELSE
            p_var_value := rpad(v_chr_val, v_var_size, ' ');
        END IF;
    ELSIF (v_out_data_type IN ('REAL',
                               'BIGINT',
                               'INTEGER',
                               'NUMERIC',
                               'DECIMAL',
                               'SMALLINT',
                               'DOUBLE PRECISION'))
    THEN
        p_var_value := trim(v_chr_val)::NUMERIC;
    ELSIF (v_out_data_type IN ('DATE',
                               'TIMESTAMP WITHOUT TIME ZONE',
                               'TIMESTAMP WITH TIME ZONE'))
    THEN
        p_var_value := CASE v_out_data_type
                          WHEN 'DATE' THEN to_date(v_chr_val, 'DD-MON-YY')
                          ELSE to_timestamp(v_chr_val, 'DD-MON-YY HH24:MI:SS.US')
                       END;
    ELSIF (v_out_data_type = 'INTERVAL') THEN
        p_var_value := v_chr_val::INTERVAL;
    END IF;
EXCEPTION
    -- Cursor isn't opened or doesn't exist
    WHEN invalid_cursor_state THEN
        RAISE USING MESSAGE := format('Cursor_id (%s) does not exist or incorrect.', p_cursor_id),
                    DETAIL := format('Cursor_id (%s) is not found, SQL statement text was not associated with it.', p_cursor_id),
                    HINT := format('Make sure that cursor_id (%s) exists or perform ''dbms_sql$open_cursor'' procedure to get a new one.', p_cursor_id);
    -- Variable name is empty (null)
    WHEN null_value_not_allowed THEN
        RAISE USING MESSAGE := 'Bind variable name is empty.',
                    DETAIL := 'Could not get a value of a variable without name. Oracle error ''ORA-01006''.',
                    HINT := 'Pass in an existing variable name in order to get it''s value.';
    -- Variable with supplied name isn't found
    WHEN no_data_found THEN
        RAISE USING MESSAGE := format('Variable %s doesn''t found for cursor_id (%s). Oracle error ''ORA-01006''.', quote_literal(v_var_info[2]), p_cursor_id),
                    DETAIL := format('Variable with name %s, binded to cursor_id (%s), doesn''t found or cursor_id is wrong.', quote_literal(v_var_info[2]), p_cursor_id),
                    HINT := format('Make sure that cursor_id (%s) exists and variable %s was previously binded to it trough ''dbms_sql$bind_variable_char'' procedure.',
                                   p_cursor_id, quote_literal(v_var_info[2]));
    -- Variable was declared using "dbms_sql$bind_variable"
    WHEN most_specific_type_mismatch THEN
        RAISE USING MESSAGE := format('Type of OUT argument doesn''t match declared variable type, cursor_id (%s).', p_cursor_id),
                    DETAIL := 'Oracle error ''ORA-06562: type of OUT argument must match type of column or bind variable.',
                    HINT := format('Try to use ''dbms_sql$variable_value'' procedure to get a %s variable value for cursor_id (%s).',
                                   quote_literal(v_var_info[2]), p_cursor_id);
    -- Length of the supplied OUT argument is too small
    WHEN string_data_length_mismatch THEN
        RAISE USING MESSAGE := 'Character string buffer too small. Oracle error ''ORA-06502''.',
                    DETAIL := 'Length of the supplied OUT argument is too small to store bind variable value.',
                    HINT := format('Supply OUT argument of proper length, minimum %s bytes to store binded variable value.',
                                   coalesce(char_length(v_chr_val), 0));
    -- Possible data type conversion error
    WHEN invalid_datetime_format THEN
        RAISE USING MESSAGE := 'Error during column value conversion (from char to datetime).',
                    DETAIL := format('Value %s is not correct for conversion to datetime. Cursor id (%s), column (%s).',
                                     quote_literal(v_chr_val), p_cursor_id, p_column_pos);
    -- Possible data type conversion error
    WHEN invalid_xml_content THEN
        RAISE USING MESSAGE := 'Error during column value conversion (from char to XML document).',
                    DETAIL := format('Value %s is not correct for conversion to XML document. Cursor id (%s), column (%s).',
                                     quote_literal(v_chr_val), p_cursor_id, p_column_pos);
    -- Possible data type conversion error
    WHEN invalid_text_representation THEN
        RAISE USING MESSAGE := 'Error during column value conversion (from char to numeric).',
                    DETAIL := format('Value %s is not correct for conversion to numeric. Cursor id (%s), column (%s).',
                                     quote_literal(v_chr_val), p_cursor_id, p_column_pos);
END;
]]></complex-attribute>
                        <category _I_D="204ad752-ff5e-4de7-b02d-cf3ad6e5c067" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="56557e48-b225-4ad0-8734-1afb31ee7037" name="dbms_types" subcategories-loading="none" object-loading="extended" context="dbms_types" is-trigger-function="0" unique-function-name="dbms_types" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="int4" function-arguments="typecode character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365126" volatility="IMMUTABLE" is-window="f" function-identity-arguments="typecode character varying" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_types(typecode character varying)" comment="Returns type code constant like DBMS_TYPES package">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  l_typecodes json = '{"TYPECODE_DATE":"12" 
		       ,"TYPECODE_NUMBER":"2"
		       ,"TYPECODE_RAW":"95"
		       ,"TYPECODE_CHAR":"96"
		       ,"TYPECODE_VARCHAR2":"9"
		       ,"TYPECODE_VARCHAR":"1"
		       ,"TYPECODE_MLSLABEL":"105"
		       ,"TYPECODE_BLOB":"113"
		       ,"TYPECODE_BFILE":"114"
		       ,"TYPECODE_CLOB":"112"
		       ,"TYPECODE_CFILE":"115"
		       ,"TYPECODE_TIMESTAMP":"187"
		       ,"TYPECODE_TIMESTAMP_TZ":"188"
		       ,"TYPECODE_TIMESTAMP_LTZ":"232"
		       ,"TYPECODE_INTERVAL_YM":"189"
		       ,"TYPECODE_INTERVAL_DS":"190"
		       ,"TYPECODE_REF":"110"
		       ,"TYPECODE_OBJECT":"108"
		       ,"TYPECODE_VARRAY":"247"
		       ,"TYPECODE_TABLE":"248"
		       ,"TYPECODE_NAMEDCOLLECTION":"122"
		       ,"TYPECODE_OPAQUE":"58"
		       ,"TYPECODE_NCHAR":"286"
		       ,"TYPECODE_NVARCHAR2":"287"
		       ,"TYPECODE_NCLOB":"288"
		       ,"TYPECODE_BFLOAT":"100"
		       ,"TYPECODE_BDOUBLE":"101"
		       ,"TYPECODE_UROWID":"104"
		       ,"SUCCESS":"0"
		       ,"NO_DATA":"100"
		       ,"oidvector":"247"
		       ,"int2vector":"247"		       		       
		       ,"date":"12"
		       ,"timestamptz":"188"		       		       
		       ,"timestamp":"187"
		       ,"numeric":"2"		       		       
		       ,"int8":"2"
		       ,"int4":"2"		       		       
		       ,"int2":"2"
		       ,"oid":"2"		       		       
		       ,"float4":"2"
		       ,"float8":"2"		       		       
		       ,"money":"2"
		       ,"varchar":"9"		       		       
		       ,"text":"112"
		       ,"bpchar":"96"		       		       
		       ,"interval":"189"		       		       
		       ,"tinterval":"189"
		       ,"varbit":"9"		       		       
		       ,"bit":"96"
		       ,"bytea":"112"		       		       
		       }'; 
BEGIN
  return l_typecodes->>TYPECODE;
END;
]]></complex-attribute>
                        <category _I_D="05fc17a6-2617-4c9a-8faf-f82d32e098d9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3e7baff7-84c4-4c5d-b8e9-ea7446628904" name="dbms_utility$current_instance" subcategories-loading="none" object-loading="extended" context="dbms_utility$current_instance" is-trigger-function="0" unique-function-name="dbms_utility$current_instance" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="364948" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_utility$current_instance()" comment="This function returns the current connected instance number.">
                        <complex-attribute name="sql"><![CDATA[
SELECT 1
]]></complex-attribute>
                        <category _I_D="070bdb29-02d0-49e2-8921-526200635df1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7b73ea93-9574-409c-86a0-269f0ec6ef03" name="dbms_utility$format_call_stack" subcategories-loading="none" object-loading="extended" context="dbms_utility$format_call_stack" is-trigger-function="0" unique-function-name="dbms_utility$format_call_stack" is-aggregate="f" language-name="plpgsql" arguments-datatypes="boolean" is-returning-set="f" ret-datatype="text" function-arguments="p_ora_style boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="364950" volatility="VOLATILE" is-window="f" function-identity-arguments="p_ora_style boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_utility$format_call_stack(p_ora_style boolean)" comment="This function formats the current call stack. This can be used on any function or stored procedure to access the call stack.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_server_pid TEXT;
    v_obj_handle TEXT;
    v_schema_name TEXT;
    v_routine_name TEXT;
    v_routine_type TEXT;
    v_routine_oid TEXT;
    i_param_type TEXT;
    v_call_stack TEXT[];
    v_call_info TEXT[];
    v_param_types TEXT;
    v_stack_header TEXT;
    v_search_path TEXT[];
    v_pg_call_stack TEXT;
    v_anonymous_block TEXT;
    v_call_stack_rec TEXT;
    v_full_search_path TEXT[];
    i_call_stack_rec RECORD;
BEGIN
    -- Determining call stack label depending on Oracle style param
    v_stack_header := CASE
                         WHEN p_ora_style THEN '------- PL/SQL Call Stack -------'
                         ELSE '------ PL/pgSQL Call Stack ------'
                      END;

    -- Determining anonymous block label depending on Oracle style param
    v_anonymous_block := CASE
                            WHEN p_ora_style THEN 'anonymous block'
                            ELSE 'inline_code_block'
                         END;

    -- Constructing call stack header
    v_call_stack := ARRAY[v_stack_header,
                          '    object       line  object',
                          '    handle     number  name'];

    -- Obtaining current search path
    v_search_path := regexp_split_to_array(replace(current_setting('search_path'),
                                                   '$user', current_user), '\s*,\s*');
    -- Getting server process ID
    v_server_pid = pg_backend_pid();

    -- Getting current call stack
    GET DIAGNOSTICS v_pg_call_stack = PG_CONTEXT;

    FOR i_call_stack_rec IN
    (SELECT t.*
       FROM regexp_split_to_table(v_pg_call_stack, chr(10))
       WITH ORDINALITY AS t(call_stack, line_num))
    LOOP
        CONTINUE WHEN i_call_stack_rec.line_num = 1 OR
                      i_call_stack_rec.call_stack !~ 'line \d+ at';

        -- Obtaining info regarding particular stack call
        v_call_info := regexp_matches(i_call_stack_rec.call_stack,
                                      '^[[:alnum:]_/]+\s+([a-z]+)\s+(.*)(?<=[^\s])\s+line\s+(\d+)', 'g');
        v_routine_oid := NULL;

        v_routine_type := v_call_info[1];

        -- Extracting param types list from routine signature
        v_param_types := substring(v_call_info[2], '\((.*)\)$');

        -- Extracting schema name from `schema.["]routine["]`
        v_schema_name := substring(v_call_info[2], '^(.+)\.');

        -- Extracting routine name from `schema.["]routine["]`(params)
        v_routine_name := regexp_replace(v_call_info[2], '^(.+)\.|\((.*)\)$', '', 'g');

        -- Emulating Oracle anonymous block label
        IF (p_ora_style) THEN
            v_routine_name := replace(v_routine_name, 'inline_code_block', 'anonymous block');
        END IF;

        -- Determining whether call routine is a function or a procedure
        IF (v_routine_type = 'function' AND v_routine_name != 'anonymous block')
        THEN
            -- Putting stack record schema name on top of search path
            v_full_search_path := CASE
                                     WHEN v_schema_name IS NULL THEN v_search_path
                                     ELSE array_prepend(v_schema_name, v_search_path)
                                  END;
            SELECT oid,
                   CASE prokind
                      WHEN 'p' THEN 'procedure'
                      ELSE 'function'
                   END,
                   pronamespace::REGNAMESPACE::TEXT
              INTO v_routine_oid,
                   v_routine_type,
                   v_schema_name
              FROM pg_catalog.pg_proc
             WHERE proname = substring(v_routine_name, '"?([^"]+)') -- routine name
               AND pronamespace::REGNAMESPACE::TEXT = ANY(v_full_search_path) -- schema names list
               AND proargtypes = coalesce(array_to_string(string_to_array(v_param_types, ',')::REGTYPE[]::OID[],
                                          ' '), '')::OIDVECTOR -- param OIDs list
             ORDER BY array_position(v_full_search_path, pronamespace::REGNAMESPACE::TEXT) ASC
             LIMIT 1;
        END IF;

        -- Constructing object handle (server_PID.object_OID)
        v_obj_handle := concat(v_server_pid, '.' || v_routine_oid);

        -- Constructing call stack record
        v_call_stack_rec :=
            concat(rpad(repeat(' ', (14 - char_length(v_obj_handle)) / 2) || v_obj_handle, 14), -- object handle
                   ' ', -- delimiter
                   lpad(v_call_info[3], 6, ' '), -- line number
                   '  ', -- delimiter
                   CASE
                      WHEN v_routine_name !~ '^(anonymous\s|inline_code_)block$'
                      THEN v_routine_type || ' ' -- routine type
                   END,
                   CASE
                      WHEN v_schema_name ~ '^"' THEN v_schema_name
                      ELSE CASE
                              WHEN p_ora_style THEN upper(v_schema_name)
                              ELSE v_schema_name
                           END
                   END || '.', -- schema name
                   CASE
                      WHEN v_routine_name ~ '^"' OR
                           v_routine_name ~ '^(anonymous\s|inline_code_)block$'
                      THEN v_routine_name
                      ELSE CASE
                              WHEN p_ora_style THEN upper(v_routine_name)
                              ELSE v_routine_name
                           END
                   END, -- routine name
                   CASE
                      WHEN v_routine_name !~ '^(anonymous\s|inline_code_)block$'
                      THEN CASE
                              WHEN NOT p_ora_style THEN concat('(', v_param_types, ')')
                              ELSE upper('(' || nullif(v_param_types, '') || ')')
                           END
                   END);

        v_call_stack := array_append(v_call_stack, v_call_stack_rec);
    END LOOP;

    -- SQL SELECT dbms_utility$format_call_stack()
    IF (array_length(v_call_stack, 1) = 3) THEN
        v_call_stack :=
            array_append(v_call_stack,
                         rpad(repeat(' ', (14 - char_length(v_server_pid)) / 2) || v_server_pid, 14)
                         || '      1  '
                         || v_anonymous_block);
    END IF;

    RETURN array_to_string(v_call_stack, chr(10));
END;
]]></complex-attribute>
                        <category _I_D="d370eda7-2fbc-4523-a25f-c25f8cf82794" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b8b47fb2-84b4-4fb5-9e1a-627f5a294710" name="dbms_utility$get_time" subcategories-loading="none" object-loading="extended" context="dbms_utility$get_time" is-trigger-function="0" unique-function-name="dbms_utility$get_time" is-aggregate="f" language-name="plv8" is-returning-set="f" ret-datatype="int8" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="364949" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plv8" function-signature="dbms_utility$get_time()" comment="This function determines the current time in hundredths of a second.">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
  return Date.now() / 10;

]]></complex-attribute>
                        <category _I_D="9c916339-fb05-4721-a20a-9137cfcd5f9e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b2ff3dd6-d62a-48fe-81b0-8f650fc7d28c" name="dbms_xmlgen$closecontext" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$closecontext" is-trigger-function="0" unique-function-name="dbms_xmlgen$closecontext" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="void" function-arguments="ctx numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365829" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$closecontext(ctx numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lCtx aws_oracle_ext.dbms_xmlgen$tContext;
	lnCtxHdl int := trunc(ctx);
begin
    lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

    if not lCtx is null then
        perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
                                                       ctxCursor => null,
                                                       ctxQuery => null,
                                                       ctxAttributes => null,
                                                       ctxNumRowsProcessed => null
                                                      );
    end if;
end; ]]></complex-attribute>
                        <category _I_D="a2863c79-020d-429d-9112-58238680cc74" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="16ece399-4d64-4198-91b1-b56597ca24db" name="dbms_xmlgen$context2obj" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$context2obj(ctxhdl numeric)" is-trigger-function="0" unique-function-name="dbms_xmlgen$context2obj(ctxhdl numeric)" is-aggregate="f" language-name="sql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="dbms_xmlgen$tcontext" function-arguments="ctxhdl numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365824" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlgen$context2obj(ctxhdl numeric)" unique-suffix="(ctxhdl numeric)" routine-number="365824">
                        <complex-attribute name="sql"><![CDATA[ select dbms_xmlgen$context2obj(get_extpack_variable(variable_name => dbms_xmlgen$ctxIdx(trunc(ctxHdl)))) ]]></complex-attribute>
                        <category _I_D="a08a2195-b230-4014-ac07-d96eeb507172" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="16a54542-9c5d-4476-bc46-4612d434078f" name="dbms_xmlgen$context2obj" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$context2obj(ctxvalue text)" is-trigger-function="0" unique-function-name="dbms_xmlgen$context2obj(ctxvalue text)" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="dbms_xmlgen$tcontext" function-arguments="ctxvalue text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365823" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxvalue text" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlgen$context2obj(ctxvalue text)" unique-suffix="(ctxvalue text)" routine-number="365823">
                        <complex-attribute name="sql"><![CDATA[ select * from json_populate_record(null::dbms_xmlgen$TContext, ctxValue::json) ]]></complex-attribute>
                        <category _I_D="e0c08bd9-7da3-441f-a68a-5348079fc53b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ed774e74-9aca-4844-9a9d-51cc12874695" name="dbms_xmlgen$context2text" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$context2text(ctxhdl numeric, ctxcursor refcursor, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, ctxnumrowsprocessed integer)" is-trigger-function="0" unique-function-name="dbms_xmlgen$context2text(ctxhdl numeric, ctxcursor refcursor, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, ctxnumrowsprocessed integer)" is-aggregate="f" language-name="sql" arguments-datatypes="numeric,refcursor,text,aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;,integer" is-returning-set="f" ret-datatype="text" function-arguments="ctxhdl numeric, ctxcursor refcursor, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, ctxnumrowsprocessed integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365820" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, ctxcursor refcursor, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, ctxnumrowsprocessed integer" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlgen$context2text(ctxhdl numeric, ctxcursor refcursor, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, ctxnumrowsprocessed integer)" unique-suffix="(ctxhdl numeric, ctxcursor refcursor, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, ctxnumrowsprocessed integer)" routine-number="365820">
                        <complex-attribute name="sql"><![CDATA[ select dbms_xmlgen$context2text((ctxHdl,
                                       ctxCursor,
                                       ctxQuery,
                                       coalesce(ctxAttributes, dbms_xmlgen$contextAttr2obj()),
                                       ctxNumRowsProcessed
                                       )::dbms_xmlgen$TContext)::text ]]></complex-attribute>
                        <category _I_D="86132bac-440a-4d87-85eb-d0c6aded9762" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7b7015f4-872a-4e02-8d8e-4627fcdbeef0" name="dbms_xmlgen$context2text" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$context2text(ctxvalue aws_oracle_ext.&quot;dbms_xmlgen$tcontext&quot;)" is-trigger-function="0" unique-function-name="dbms_xmlgen$context2text(ctxvalue aws_oracle_ext.&quot;dbms_xmlgen$tcontext&quot;)" is-aggregate="f" language-name="sql" arguments-datatypes="aws_oracle_ext.&quot;dbms_xmlgen$tcontext&quot;" is-returning-set="f" ret-datatype="text" function-arguments="ctxvalue aws_oracle_ext.&quot;dbms_xmlgen$tcontext&quot;" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365819" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxvalue aws_oracle_ext.&quot;dbms_xmlgen$tcontext&quot;" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlgen$context2text(ctxvalue aws_oracle_ext.&quot;dbms_xmlgen$tcontext&quot;)" unique-suffix="(ctxvalue aws_oracle_ext.&quot;dbms_xmlgen$tcontext&quot;)" routine-number="365819">
                        <complex-attribute name="sql"><![CDATA[ select row_to_json(ctxValue)::text ]]></complex-attribute>
                        <category _I_D="e8419e4f-07f4-43bc-825d-41c4a27003a6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8a518d5c-047b-480d-8b19-3699783b238e" name="dbms_xmlgen$contextattr2obj" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$contextattr2obj" is-trigger-function="0" unique-function-name="dbms_xmlgen$contextattr2obj" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="dbms_xmlgen$tctxattributes" function-arguments="ctxattr text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365818" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxattr text" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$contextattr2obj(ctxattr text)">
                        <complex-attribute name="sql"><![CDATA[ select *
            from json_populate_record(null::dbms_xmlgen$TctxAttributes,
                                      coalesce(ctxAttr, dbms_xmlgen$contextAttr2text())::json
                                     ) ]]></complex-attribute>
                        <category _I_D="dbc4c78b-6c01-4811-bec5-1ae7920383ca" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="393b4d82-3c0b-4680-902d-f9bd25d5db26" name="dbms_xmlgen$contextattr2text" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$contextattr2text(ctxattrvalue aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;)" is-trigger-function="0" unique-function-name="dbms_xmlgen$contextattr2text(ctxattrvalue aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;)" is-aggregate="f" language-name="sql" arguments-datatypes="aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;" is-returning-set="f" ret-datatype="text" function-arguments="ctxattrvalue aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365816" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxattrvalue aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlgen$contextattr2text(ctxattrvalue aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;)" unique-suffix="(ctxattrvalue aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;)" routine-number="365816">
                        <complex-attribute name="sql"><![CDATA[ select row_to_json(ctxAttrValue)::text ]]></complex-attribute>
                        <category _I_D="5c58104b-333a-4d02-b1f0-a87cb556cbc9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="de49ee40-28dd-4b1e-b7f5-120ee77904ff" name="dbms_xmlgen$contextattr2text" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$contextattr2text(ctxconvertspecialchars boolean, ctxmaxrows numeric, ctxnullhandling numeric, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxusenullattributeindicator boolean, ctxuseitemtagsforcoll boolean)" is-trigger-function="0" unique-function-name="dbms_xmlgen$contextattr2text(ctxconvertspecialchars boolean, ctxmaxrows numeric, ctxnullhandling numeric, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxusenullattributeindicator boolean, ctxuseitemtagsforcoll boolean)" is-aggregate="f" language-name="sql" arguments-datatypes="boolean,numeric,numeric,text,text,numeric,boolean,boolean" is-returning-set="f" ret-datatype="text" function-arguments="ctxconvertspecialchars boolean DEFAULT NULL::boolean, ctxmaxrows numeric DEFAULT NULL::numeric, ctxnullhandling numeric DEFAULT NULL::numeric, ctxrowsettag text DEFAULT NULL::text, ctxrowtag text DEFAULT NULL::text, ctxskiprows numeric DEFAULT NULL::numeric, ctxusenullattributeindicator boolean DEFAULT NULL::boolean, ctxuseitemtagsforcoll boolean DEFAULT NULL::boolean" schema-id="364663" function-type="RET_SCALAR" count-arguments="8" function-id="365817" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxconvertspecialchars boolean, ctxmaxrows numeric, ctxnullhandling numeric, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxusenullattributeindicator boolean, ctxuseitemtagsforcoll boolean" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlgen$contextattr2text(ctxconvertspecialchars boolean, ctxmaxrows numeric, ctxnullhandling numeric, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxusenullattributeindicator boolean, ctxuseitemtagsforcoll boolean)" unique-suffix="(ctxconvertspecialchars boolean, ctxmaxrows numeric, ctxnullhandling numeric, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxusenullattributeindicator boolean, ctxuseitemtagsforcoll boolean)" routine-number="365817">
                        <complex-attribute name="sql"><![CDATA[ select dbms_xmlgen$contextAttr2text((ctxConvertSpecialChars,
                                            ctxMaxRows,
                                            ctxNullHandling,
                                            coalesce(ctxRowSetTag, dbms_xmlgen$default_rowsettag()),
	                                        coalesce(ctxRowTag, dbms_xmlgen$default_rowtag()),
	                                        coalesce(ctxSkipRows, 0),
                                            ctxUseNullattributeIndicator,
                                            ctxUseItemTagsForColl
	                                      )::dbms_xmlgen$TctxAttributes)::text ]]></complex-attribute>
                        <category _I_D="5eaf0396-927d-48c5-b8a1-b8c6973e1eb3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="08f298c7-fa62-4cc1-8829-23dd86ea3261" name="dbms_xmlgen$convert" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$convert" is-trigger-function="0" unique-function-name="dbms_xmlgen$convert" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric" is-returning-set="f" ret-datatype="text" function-arguments="xmldata text, flag numeric DEFAULT aws_oracle_ext.&quot;dbms_xmlgen$entity_encode&quot;()" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365844" volatility="VOLATILE" is-window="f" function-identity-arguments="xmldata text, flag numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$convert(xmldata text, flag numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	escChars text[5][2] := array[array['&quot;', '"'], array['&apos;', ''''], array['&lt;', '<'], array['&gt;', '>'], array['&amp;', '&']];
    i int;
    lvResult text;
begin
	if flag >= aws_oracle_ext.dbms_xmlgen$entity_decode() then
		begin
			lvResult := xmlData;
			for i in 1 .. 5 loop
				lvResult := replace(lvResult, escChars[i][1], escChars[i][2]);
			end loop;
   	    exception when others then
			lvResult := null;
		    raise;
		end;
	elsif flag = aws_oracle_ext.dbms_xmlgen$entity_encode() then
		lvResult := xmlserialize(content (xpath('.', xmlelement(name dummy, xmlData), array[array['xsi', 'http://www.w3.org/2001/XMLSchema-instance']]))[1] as text);
	else
		raise exception 'XML processing error. Nagative value [%] was readed', flag using hint = '22063';
	end if;
    return lvResult;
end; ]]></complex-attribute>
                        <category _I_D="333a5a9e-ff9c-49c7-9cdf-9a7c6f0a2e48" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ce297230-4ca3-4e60-a988-80446793d050" name="dbms_xmlgen$crisopened" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$crisopened" is-trigger-function="0" unique-function-name="dbms_xmlgen$crisopened" is-aggregate="f" language-name="sql" arguments-datatypes="refcursor" is-returning-set="f" ret-datatype="bool" function-arguments="pcr refcursor" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365815" volatility="STABLE" is-window="f" function-identity-arguments="pcr refcursor" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$crisopened(pcr refcursor)">
                        <complex-attribute name="sql"><![CDATA[
  select exists(select 1 from pg_cursors where name = pCr::text);
]]></complex-attribute>
                        <category _I_D="9d3a36d8-5d9c-4d18-96cc-a4b5e3830b71" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="65b3c11d-0620-4329-a757-846a088ac930" name="dbms_xmlgen$ctxhdl2uidrec" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$ctxhdl2uidrec" is-trigger-function="0" unique-function-name="dbms_xmlgen$ctxhdl2uidrec" is-aggregate="f" language-name="sql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="record" function-arguments="ctxhdl numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365821" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctxhdl numeric" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$ctxhdl2uidrec(ctxhdl numeric)">
                        <complex-attribute name="sql"><![CDATA[ select ctxHdl, concat('dbms_xmlgen$context_query_', coalesce(trunc(ctxHdl)::text, '')) ]]></complex-attribute>
                        <category _I_D="c74399e0-e50a-4bef-9138-d0efef10b54e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="008dbaa3-c306-44d7-8284-9eb075693aef" name="dbms_xmlgen$ctxidx" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$ctxidx" is-trigger-function="0" unique-function-name="dbms_xmlgen$ctxidx" is-aggregate="f" language-name="sql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="varchar" function-arguments="ctxhdl numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365822" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctxhdl numeric" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$ctxidx(ctxhdl numeric)">
                        <complex-attribute name="sql"><![CDATA[ select ctxIdx from dbms_xmlgen$ctxHdl2uidRec(ctxHdl) as (Idx numeric, ctxIdx character varying) ]]></complex-attribute>
                        <category _I_D="f810740e-a12d-483c-a280-4741fce453bf" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="03305d03-c891-4a06-aea4-cbee37872037" name="dbms_xmlgen$default_rowsettag" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$default_rowsettag" is-trigger-function="0" unique-function-name="dbms_xmlgen$default_rowsettag" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365813" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$default_rowsettag()">
                        <complex-attribute name="sql"><![CDATA[ select 'ROWSET' ]]></complex-attribute>
                        <category _I_D="f0162ada-6db0-4130-a8ac-16411403731e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ee30a831-6d5d-4789-a016-34703fdb8b22" name="dbms_xmlgen$default_rowtag" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$default_rowtag" is-trigger-function="0" unique-function-name="dbms_xmlgen$default_rowtag" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365814" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$default_rowtag()">
                        <complex-attribute name="sql"><![CDATA[ select 'ROW' ]]></complex-attribute>
                        <category _I_D="f6d0c2f4-47e2-45e9-9e4e-d58dc12a2df6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="883ceed2-a81a-47d4-ac94-4103384e9d11" name="dbms_xmlgen$drop_nulls" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$drop_nulls" is-trigger-function="0" unique-function-name="dbms_xmlgen$drop_nulls" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365805" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$drop_nulls()">
                        <complex-attribute name="sql"><![CDATA[ select 0 ]]></complex-attribute>
                        <category _I_D="927ba630-3495-4c8e-8bf7-3c7a15cc29e9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="33f50a41-e3b1-4fb2-be6d-5911037fb7b8" name="dbms_xmlgen$dtd" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$dtd" is-trigger-function="0" unique-function-name="dbms_xmlgen$dtd" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365806" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$dtd()">
                        <complex-attribute name="sql"><![CDATA[ select 1 ]]></complex-attribute>
                        <category _I_D="0bc5e3d4-e321-4ae1-971e-f94c3fb9c564" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3ce15590-aac6-47f4-8201-abbbc5b7d704" name="dbms_xmlgen$empty_tag" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$empty_tag" is-trigger-function="0" unique-function-name="dbms_xmlgen$empty_tag" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365807" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$empty_tag()">
                        <complex-attribute name="sql"><![CDATA[ select 2 ]]></complex-attribute>
                        <category _I_D="bf74235a-a1d1-4f8a-9d53-f07e0d9242f9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f513da6c-b08e-4524-b053-8da86153600b" name="dbms_xmlgen$entity_decode" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$entity_decode" is-trigger-function="0" unique-function-name="dbms_xmlgen$entity_decode" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365808" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$entity_decode()">
                        <complex-attribute name="sql"><![CDATA[ select 1::numeric ]]></complex-attribute>
                        <category _I_D="b1bed87e-38b8-411b-9f12-dc3fee39d977" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="06172759-cdf0-47dd-bfae-688c932c9983" name="dbms_xmlgen$entity_encode" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$entity_encode" is-trigger-function="0" unique-function-name="dbms_xmlgen$entity_encode" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365809" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$entity_encode()">
                        <complex-attribute name="sql"><![CDATA[ select 0::numeric ]]></complex-attribute>
                        <category _I_D="67fd4ac7-99c2-4c86-adac-508ef9f4c86f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e848a56b-98aa-478e-93c4-1bc3e42292d7" name="dbms_xmlgen$getctxobj" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$getctxobj" is-trigger-function="0" unique-function-name="dbms_xmlgen$getctxobj" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="dbms_xmlgen$tcontext" function-arguments="ctxhdl numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365825" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$getctxobj(ctxhdl numeric)">
                        <complex-attribute name="sql"><![CDATA[
begin
	if ctxHdl < 0  then
		raise exception 'XML processing error. Nagative value [%] was readed', ctxHdl using hint = '22063';
	end if;

	return aws_oracle_ext.dbms_xmlgen$context2obj(ctxHdl => trunc(ctxHdl));

end; ]]></complex-attribute>
                        <category _I_D="00fc1cfb-3d81-40ff-915a-aa1162be65cf" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4d30b617-206d-4c74-9688-c695e684ecc7" name="dbms_xmlgen$getnumrowsprocessed" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$getnumrowsprocessed" is-trigger-function="0" unique-function-name="dbms_xmlgen$getnumrowsprocessed" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="numeric" function-arguments="ctx numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365841" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$getnumrowsprocessed(ctx numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lCtx aws_oracle_ext.dbms_xmlgen$tContext;
	lnCtxHdl int := trunc(ctx);
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);
	return coalesce(lCtx.ctxNumRowsProcessed, 0);
end; ]]></complex-attribute>
                        <category _I_D="d718efea-7d7c-4177-95da-6814fb87cfb1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="497b102c-9219-4822-acdf-0f37f81cbb9f" name="dbms_xmlgen$getxml" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$getxml(ctx numeric, dtdorschema numeric)" is-trigger-function="0" unique-function-name="dbms_xmlgen$getxml(ctx numeric, dtdorschema numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="text" function-arguments="ctx numeric, dtdorschema numeric DEFAULT aws_oracle_ext.&quot;dbms_xmlgen$none&quot;()" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365842" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric, dtdorschema numeric" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_xmlgen$getxml(ctx numeric, dtdorschema numeric)" unique-suffix="(ctx numeric, dtdorschema numeric)" routine-number="365842">
                        <complex-attribute name="sql"><![CDATA[
declare
    lCtx aws_oracle_ext.dbms_xmlgen$tContext;
    lnCtxHdl int := trunc(ctx);
    lvReturn text;
    lrResult record;
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

	if lCtx is null then
	    raise exception 'Invalid context or doesn''t exists' using hint = '19019';
	else
		lrResult := aws_oracle_ext.dbms_xmlgen$qc2xml(pvSQL => lCtx.ctxQuery,
	                                                  pCr => lCtx.ctxCursor,
	                                                  pnMaxRows => (lCtx.ctxAttributes).ctxMaxRows,
	                                                  pvRowsetTag => (lCtx.ctxAttributes).ctxRowsettag,
	                                                  pvRowTag => (lCtx.ctxAttributes).ctxRowTag,
	                                                  pnSkipRows => (lCtx.ctxAttributes).ctxSkipRows
	                                                 );

	    perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
	                                                   ctxCursor => lCtx.ctxCursor,
	                                                   ctxQuery => lCtx.ctxQuery,
	                                                   ctxAttributes => lCtx.ctxAttributes,
	                                                   ctxNumRowsProcessed => lrResult.pnRowCount,
	                                                   forceSetValues => true
	                                                  );

	    lvReturn := xmlserialize(document lrResult.pxXML as text
                                );
	end if;

	return lvReturn;
end; ]]></complex-attribute>
                        <category _I_D="cbb1d85b-2487-4b8d-aee9-9ec624855d23" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a7fa182c-602e-4b2f-98ae-5f5e13a654df" name="dbms_xmlgen$getxml" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$getxml(sqlquery text, dtdorschema numeric)" is-trigger-function="0" unique-function-name="dbms_xmlgen$getxml(sqlquery text, dtdorschema numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric" is-returning-set="f" ret-datatype="text" function-arguments="sqlquery text, dtdorschema numeric DEFAULT aws_oracle_ext.&quot;dbms_xmlgen$none&quot;()" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365843" volatility="VOLATILE" is-window="f" function-identity-arguments="sqlquery text, dtdorschema numeric" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_xmlgen$getxml(sqlquery text, dtdorschema numeric)" unique-suffix="(sqlquery text, dtdorschema numeric)" routine-number="365843">
                        <complex-attribute name="sql"><![CDATA[
begin
    return xmlserialize(document (aws_oracle_ext.dbms_xmlgen$qc2xml(pvSQL => sqlQuery,
				                                                    pCr => null,
				                                                    pvRowsetTag => aws_oracle_ext.dbms_xmlgen$default_rowsettag(),
				                                                    pvRowTag => aws_oracle_ext.dbms_xmlgen$default_rowtag()
				                                                   )).pxXML as text
                       );
end; ]]></complex-attribute>
                        <category _I_D="92bba1f7-939f-4891-80d2-7e086b337436" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f64d5d7d-8466-42e5-b5ac-8dd13d4b2775" name="dbms_xmlgen$newcontext" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$newcontext(querystring refcursor)" is-trigger-function="0" unique-function-name="dbms_xmlgen$newcontext(querystring refcursor)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="refcursor" is-returning-set="f" ret-datatype="numeric" function-arguments="querystring refcursor" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365831" volatility="VOLATILE" is-window="f" function-identity-arguments="querystring refcursor" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_xmlgen$newcontext(querystring refcursor)" unique-suffix="(querystring refcursor)" routine-number="365831">
                        <complex-attribute name="sql"><![CDATA[
begin
	return aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => null,
			                                      ctxCursor => queryString,
			                                      ctxQuery => null,
			                                      ctxAttributes => null,
			                                      ctxNumRowsProcessed => null
			                                     );
end; ]]></complex-attribute>
                        <category _I_D="5b4c94cc-d090-41cb-bf07-c2576b4f857f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a5ac6ffa-a91f-4cb2-943a-dafad20e3396" name="dbms_xmlgen$newcontext" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$newcontext(querystring text)" is-trigger-function="0" unique-function-name="dbms_xmlgen$newcontext(querystring text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="numeric" function-arguments="querystring text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365830" volatility="VOLATILE" is-window="f" function-identity-arguments="querystring text" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_xmlgen$newcontext(querystring text)" unique-suffix="(querystring text)" routine-number="365830">
                        <complex-attribute name="sql"><![CDATA[
declare
begin
	return aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => null,
			                                      ctxCursor => null,
			                                      ctxQuery => queryString,
			                                      ctxAttributes => null,
			                                      ctxNumRowsProcessed => null
			                                     );
end; ]]></complex-attribute>
                        <category _I_D="f025465a-808e-4de8-a7cf-65327a037c55" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9dcc63a9-53a2-4823-a61b-a999d03f788b" name="dbms_xmlgen$none" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$none" is-trigger-function="0" unique-function-name="dbms_xmlgen$none" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365810" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$none()">
                        <complex-attribute name="sql"><![CDATA[ select 0 ]]></complex-attribute>
                        <category _I_D="0c0536d9-1edc-45a6-a1ac-40fb835270d4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="20acc38b-a596-4b09-843c-65db2e8b5c67" name="dbms_xmlgen$null_attr" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$null_attr" is-trigger-function="0" unique-function-name="dbms_xmlgen$null_attr" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365811" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$null_attr()">
                        <complex-attribute name="sql"><![CDATA[ select 1 ]]></complex-attribute>
                        <category _I_D="92ce8e8b-90db-4032-84aa-3070263b14cf" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5373bb0c-e664-48c1-a5ba-ac8232baef89" name="dbms_xmlgen$qc2xml" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$qc2xml" is-trigger-function="0" unique-function-name="dbms_xmlgen$qc2xml" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,refcursor,boolean,boolean,numeric,numeric,text,text,numeric,boolean,boolean,xml,integer" is-returning-set="f" ret-datatype="record" function-arguments="pvsql text, pcr refcursor, pbaddxmlroot boolean DEFAULT true, pbconvertspecialchars boolean DEFAULT NULL::boolean, pnmaxrows numeric DEFAULT NULL::numeric, pnnullhandling numeric DEFAULT NULL::numeric, pvrowsettag text DEFAULT NULL::text, pvrowtag text DEFAULT NULL::text, pnskiprows numeric DEFAULT NULL::numeric, pbusenullattributeindicator boolean DEFAULT NULL::boolean, pbuseitemtagsforcoll boolean DEFAULT NULL::boolean, OUT pxxml xml, OUT pnrowcount integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="11" function-id="365828" volatility="VOLATILE" is-window="f" function-identity-arguments="pvsql text, pcr refcursor, pbaddxmlroot boolean, pbconvertspecialchars boolean, pnmaxrows numeric, pnnullhandling numeric, pvrowsettag text, pvrowtag text, pnskiprows numeric, pbusenullattributeindicator boolean, pbuseitemtagsforcoll boolean, OUT pxxml xml, OUT pnrowcount integer" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$qc2xml(pvsql text, pcr refcursor, pbaddxmlroot boolean, pbconvertspecialchars boolean, pnmaxrows numeric, pnnullhandling numeric, pvrowsettag text, pvrowtag text, pnskiprows numeric, pbusenullattributeindicator boolean, pbuseitemtagsforcoll boolean, OUT pxxml xml, OUT pnrowcount integer)">
                        <complex-attribute name="sql"><![CDATA[
declare

  crMain refcursor;
  lxResult xml := null;
  lxXMLArr xml[];

  lvSQL text := pvSQL;
  lCr refcursor := pCr;

  lbAddXmlRoot boolean := coalesce(pbAddXmlRoot, true);
  lbConvertSpecialChars boolean := pbConvertSpecialChars;
  lnMaxRows int := trunc(pnMaxRows);
  lnNullHandling numeric := pnNullHandling;
  lvRowsetTag text := nullif(pvRowsetTag, '');
  lvRowTag text := nullif(pvRowTag, '');
  lnSkipRows int := trunc(pnSkipRows);
  lbUseNullattributeIndicator bool := pbUseNullattributeIndicator;
  lbUseItemTagsForColl bool := pbUseItemTagsForColl;

  lvQuery text;
  lvQueryROWSETTAG text :=  $query$ select xmlelement(name %1$s, xmlagg(row))
							          from unnest($1) as q(row)
       				        $query$;

  lvQueryROWTAG text := $query$ select xmlelement(name %2$s,
                                                  xmlagg(xmlelement(name %1$s, row))
				                                 )
							      from unnest($1) as q(row)
       				    $query$;

begin

   if lvRowSetTag is not null and lvRowTag is not null then

   	 lvQuery := format(lvQueryROWTAG, lvRowTag, lvRowSetTag);

   elsif lvRowSetTag is null and lvRowTag is not null or
         lvRowSetTag is not null and lvRowTag is null then

     lvQuery := format(lvQueryROWSETTAG, coalesce(lvRowSetTag, lvRowTag));

   elseif lvRowTag is null and lvRowSetTag is null then

     lxResult := xmlparse(content '<ERROR>ext.XMLSQLException: The row-set tag and the row tag are both omitted.</ERROR>');

   else

   	 lxResult := xmlparse(content '<ERROR>ext.XMLSQLException: Undeterminated error.</ERROR>');
   end if; -- if lvRowSetTag is not null and lvRowTag is not null thenn


   if lxResult is null then
     if nullif(lvSQL, '') is not null or
        nullif(lCr::text, '') is not null then

	   select array_agg(xmlrow)
	     into lxXMLArr
	     from aws_oracle_ext.dbms_xmlgen$qc2xmltab(pvSQL => lvSQL,
                                                   pCr => lCr,
                                                   pnLimit => lnMaxRows,
                                                   pnOffset => lnSkipRows
                                                  );
	 else
	   raise exception 'Null Exception.' using hint = '29532';
	 end if;

     begin
         open crMain for execute lvQuery using lxXMLArr;
         fetch crMain into lxResult;
         close crMain;
     end;

   end if; -- if lvResult is null then

   if lbAddXmlRoot then
   	lxResult := xmlroot(lxResult, version '1.0', standalone yes);
   end if;

   pxXML := lxResult;
   pnRowCount := array_length(lxXMLArr, 1);
end; ]]></complex-attribute>
                        <category _I_D="a95a9e87-d662-4b3a-a325-b0bfa32b4647" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="14be4be6-bf25-451c-ae7e-3ed4a8942a19" name="dbms_xmlgen$qc2xmltab" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$qc2xmltab" is-trigger-function="0" unique-function-name="dbms_xmlgen$qc2xmltab" is-aggregate="f" language-name="sql" arguments-datatypes="text,refcursor,integer,integer,xml" is-returning-set="t" ret-datatype="table" function-arguments="pvsql text, pcr refcursor, pnlimit integer DEFAULT NULL::integer, pnoffset integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_DATASET" count-arguments="4" function-id="365827" volatility="STABLE" is-window="f" function-identity-arguments="pvsql text, pcr refcursor, pnlimit integer, pnoffset integer" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$qc2xmltab(pvsql text, pcr refcursor, pnlimit integer, pnoffset integer)">
                        <complex-attribute name="sql"><![CDATA[
 	 select xrs.row
	   from query_to_xml(format($q$ select * from (%1$s) q limit %2$L::int offset %3$L::int $q$,
	                            pvSQL,
	                            nullif(greatest(pnLimit, sign(pnLimit)), -1),
	                            nullif(greatest(pnOffset, 0), 0)
	                           ),
	                     false,
	                     false,
	                     ''
	                    ) as xt(xml_data),
	        xmltable('//table/row' passing xt.xml_data columns row xml path '*' ) xrs
	  where nullif(pvSQL, '') is not null
	    and nullif(pCr::text, '') is null
	 union all
	 (select xrs.row
	    from cursor_to_xml(pCr,
	                       coalesce(pnLimit,
	                                nullif(greatest(pnLimit, sign(pnLimit)), -1),
	                                2147483647)::int,
	                       false,
	                       false,
	                       ''
	                      ) as xt(xml_data),
	         xmltable('//table/row' passing xt.xml_data columns row xml path '*' ) xrs
	   where aws_oracle_ext.dbms_xmlgen$crIsOpened(pCr)
	     and nullif(pvSQL, '') is null
	     and nullif(pCr::text, '') is not null
	   offset nullif(greatest(pnOffset, 0), 0)
	 );
]]></complex-attribute>
                        <category _I_D="51dccda0-70ea-49f7-bd2c-738964562b80" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d36df007-c9ee-42ce-9869-4c810566926d" name="dbms_xmlgen$schema" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$schema" is-trigger-function="0" unique-function-name="dbms_xmlgen$schema" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365812" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlgen$schema()">
                        <complex-attribute name="sql"><![CDATA[ select 2 ]]></complex-attribute>
                        <category _I_D="3bc3ee15-fb58-4d41-9f0d-dd2521124438" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="829310f8-3c2d-4933-bca1-3049b4107684" name="dbms_xmlgen$setconvertspecialchars" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$setconvertspecialchars" is-trigger-function="0" unique-function-name="dbms_xmlgen$setconvertspecialchars" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,boolean" is-returning-set="f" ret-datatype="void" function-arguments="ctx numeric, replace boolean" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365837" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric, replace boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$setconvertspecialchars(ctx numeric, replace boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxConvertSpecialChars constant text = 'ctxConvertSpecialChars';
	lCtx aws_oracle_ext.dbms_xmlgen$tContext;
	lnCtxHdl int := trunc(ctx);
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

    if not lCtx is null then
	lCtx.ctxAttributes := aws_oracle_ext.dbms_xmlgen$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
                                                                     forceParamList => array[case when replace is null then CtxConvertSpecialChars else null end],
                                                                     ctxConvertSpecialChars => replace
                                                                    );

    perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
                                                   ctxCursor => lCtx.ctxCursor,
                                                   ctxQuery => lCtx.ctxQuery,
                                                   ctxAttributes => lCtx.ctxAttributes,
                                                   ctxNumRowsProcessed => lCtx.ctxNumRowsProcessed,
                                                   forceSetValues => true
                                                  );
    end if;
end; ]]></complex-attribute>
                        <category _I_D="7f924897-f5f5-48cb-9827-b8f919e9fbd2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a4ac5648-38fd-48eb-bad1-bdae86469e3f" name="dbms_xmlgen$setctxattrvalue" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$setctxattrvalue" is-trigger-function="0" unique-function-name="dbms_xmlgen$setctxattrvalue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;,text[],boolean,numeric,numeric,text,text,numeric,boolean,boolean" is-returning-set="f" ret-datatype="dbms_xmlgen$tctxattributes" function-arguments="INOUT ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, forceparamlist text[] DEFAULT NULL::text[], ctxconvertspecialchars boolean DEFAULT NULL::boolean, ctxmaxrows numeric DEFAULT NULL::numeric, ctxnullhandling numeric DEFAULT NULL::numeric, ctxrowsettag text DEFAULT NULL::text, ctxrowtag text DEFAULT NULL::text, ctxskiprows numeric DEFAULT NULL::numeric, ctxusenullattributeindicator boolean DEFAULT NULL::boolean, ctxuseitemtagsforcoll boolean DEFAULT NULL::boolean" schema-id="364663" function-type="RET_SCALAR" count-arguments="10" function-id="365832" volatility="VOLATILE" is-window="f" function-identity-arguments="INOUT ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, forceparamlist text[], ctxconvertspecialchars boolean, ctxmaxrows numeric, ctxnullhandling numeric, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxusenullattributeindicator boolean, ctxuseitemtagsforcoll boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$setctxattrvalue(INOUT ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, forceparamlist text[], ctxconvertspecialchars boolean, ctxmaxrows numeric, ctxnullhandling numeric, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxusenullattributeindicator boolean, ctxuseitemtagsforcoll boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lforceParamList text[];
begin
	if ctxMaxRows < 0  then
		raise exception 'XML processing error. Nagative value [%] was readed', ctxMaxRows using hint = '22063';
	elsif ctxSkipRows < 0 then
		raise exception 'XML processing error. Nagative value [%] was readed', ctxSkipRows using hint = '22063';
	elsif ctxNullHandling < 0 then
		raise exception 'XML processing error. Nagative value [%] was readed', ctxNullHandling using hint = '22063';
	end if;

	lforceParamList := upper(forceParamList::text)::text[];

	ctxAttributes := (case when upper('ctxConvertSpecialChars') = any(lforceParamList) then ctxConvertSpecialChars else coalesce(ctxConvertSpecialChars, ctxAttributes.ctxConvertSpecialChars) end,
	                  case when upper('ctxMaxRows') = any(lforceParamList) then ctxMaxRows else coalesce(ctxMaxRows, ctxAttributes.ctxMaxRows) end,
                      case when upper('ctxNullHandling') = any(lforceParamList) then ctxNullHandling else coalesce(ctxNullHandling, ctxAttributes.ctxNullHandling) end,
	                  case when upper('ctxRowsetTag') = any(lforceParamList) then ctxRowsetTag else coalesce(ctxRowsetTag, ctxAttributes.ctxRowsetTag) end,
	                  case when upper('ctxRowTag') = any(lforceParamList) then ctxRowTag else coalesce(ctxRowTag, ctxAttributes.ctxRowTag) end,
	                  case when upper('ctxSkipRows') = any(lforceParamList) then ctxSkipRows else coalesce(ctxSkipRows, ctxAttributes.ctxSkipRows) end,
	                  case when upper('ctxUseNullattributeIndicator') = any(lforceParamList) then ctxUseNullattributeIndicator else coalesce(ctxUseNullattributeIndicator, ctxAttributes.ctxUseNullattributeIndicator) end,
	                  case when upper('ctxUseItemTagsForColl') = any(lforceParamList) then ctxUseItemTagsForColl else coalesce(ctxUseItemTagsForColl, ctxAttributes.ctxUseItemTagsForColl) end
                     )::dbms_xmlgen$TctxAttributes;
	lforceParamList := upper(forceParamList::text)::text[];

	ctxAttributes := (case when upper('ctxConvertSpecialChars') = any(lforceParamList) then ctxConvertSpecialChars else coalesce(ctxConvertSpecialChars, ctxAttributes.ctxConvertSpecialChars) end,
	                  case when upper('ctxMaxRows') = any(lforceParamList) then ctxMaxRows else coalesce(ctxMaxRows, ctxAttributes.ctxMaxRows) end,
                      case when upper('ctxNullHandling') = any(lforceParamList) then ctxNullHandling else coalesce(ctxNullHandling, ctxAttributes.ctxNullHandling) end,
	                  case when upper('ctxRowsetTag') = any(lforceParamList) then ctxRowsetTag else coalesce(ctxRowsetTag, ctxAttributes.ctxRowsetTag) end,
	                  case when upper('ctxRowTag') = any(lforceParamList) then ctxRowTag else coalesce(ctxRowTag, ctxAttributes.ctxRowTag) end,
	                  case when upper('ctxSkipRows') = any(lforceParamList) then ctxSkipRows else coalesce(ctxSkipRows, ctxAttributes.ctxSkipRows) end,
	                  case when upper('ctxUseNullattributeIndicator') = any(lforceParamList) then ctxUseNullattributeIndicator else coalesce(ctxUseNullattributeIndicator, ctxAttributes.ctxUseNullattributeIndicator) end,
	                  case when upper('ctxUseItemTagsForColl') = any(lforceParamList) then ctxUseItemTagsForColl else coalesce(ctxUseItemTagsForColl, ctxAttributes.ctxUseItemTagsForColl) end
                     )::dbms_xmlgen$TctxAttributes;
end; ]]></complex-attribute>
                        <category _I_D="2995a4bc-efe1-45a2-b4ad-3f589ce4aecc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0146ab2d-9185-44a9-874d-28ce0dfa90e5" name="dbms_xmlgen$setctxvalue" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$setctxvalue" is-trigger-function="0" unique-function-name="dbms_xmlgen$setctxvalue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,refcursor,text,aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;,integer,boolean" is-returning-set="f" ret-datatype="numeric" function-arguments="ctxhdl numeric, ctxcursor refcursor, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, ctxnumrowsprocessed integer, forcesetvalues boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365826" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, ctxcursor refcursor, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, ctxnumrowsprocessed integer, forcesetvalues boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$setctxvalue(ctxhdl numeric, ctxcursor refcursor, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlgen$tctxattributes&quot;, ctxnumrowsprocessed integer, forcesetvalues boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
    CONTEXT_SEQUENCE constant text := 'dbms_xmlgen$context$sequence';
    lrCtxQuery record;
    lrCtx aws_oracle_ext.dbms_xmlgen$TContext;
    lvCtx text;
    lnIdx numeric := ctxHdl;
    lvCtxIdx varchar;
    lnCurrval int := 0;
begin
	if ctxHdl is null then
		lnCurrval := coalesce(nullif(aws_oracle_ext.get_extpack_variable(variable_name => CONTEXT_SEQUENCE, missing_ok => true), ''), '-1')::integer;
        begin
            lnCurrval := lnCurrval + 1;
            perform aws_oracle_ext.set_extpack_variable(variable_name => CONTEXT_SEQUENCE, variable_value => lnCurrval::text);
            select Idx, ctxIdx, aws_oracle_ext.dbms_xmlgen$context2text(Idx, ctxCursor, ctxQuery) ctx
              into lrCtxQuery
              from aws_oracle_ext.dbms_xmlgen$ctxHdl2uidRec(lnCurrval) as (Idx numeric, ctxIdx character varying);

            lnIdx := lrCtxQuery.Idx;
            lvCtxIdx := lrCtxQuery.ctxIdx;
            lvCtx := lrCtxQuery.ctx;
        end;
	elsif ctxHdl is not null and
	      ctxCursor is not null or
          ctxQuery is not null or
          ctxAttributes is not null or
          ctxNumRowsProcessed is not null then

	   if forceSetValues then
	       lrCtx.ctxIdx := ctxHdl;
		   lrCtx.ctxCursor := ctxCursor;
		   lrCtx.ctxQuery := ctxQuery;
		   lrCtx.ctxAttributes := ctxAttributes;
		   lrCtx.ctxNumRowsProcessed := ctxNumRowsProcessed;
	   else
	   	   lrCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => ctxHdl);

		   if not lrCtx is null then
		   	   lrCtx.ctxCursor := coalesce(ctxCursor, lrCtx.ctxCursor);
			   lrCtx.ctxQuery := coalesce(ctxQuery, lrCtx.ctxQuery);
			   lrCtx.ctxAttributes := coalesce(ctxAttributes, lrCtx.ctxAttributes);
			   lrCtx.ctxNumRowsProcessed := coalesce(ctxNumRowsProcessed, lrCtx.ctxNumRowsProcessed);
		   end if; -- if not lrCtx is null then
	   end if; --  if forceSetValues then

	   lvCtxIdx := aws_oracle_ext.dbms_xmlgen$ctxIdx(ctxHdl);
	   lvCtx := aws_oracle_ext.dbms_xmlgen$context2text(lrCtx);
	else
		lvCtxIdx := aws_oracle_ext.dbms_xmlgen$ctxIdx(ctxHdl);
		lvCtx := null;
	end if;

    perform aws_oracle_ext.set_extpack_variable(variable_name => lvCtxIdx, variable_value => lvCtx);

    return lnIdx;
end; ]]></complex-attribute>
                        <category _I_D="f797cd04-cafd-4e06-8879-1ab44cafbf9a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="abbbd232-6cdc-4a8e-8971-41db3f7e5f73" name="dbms_xmlgen$setmaxrows" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$setmaxrows" is-trigger-function="0" unique-function-name="dbms_xmlgen$setmaxrows" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="void" function-arguments="ctx numeric, maxrows numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365833" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric, maxrows numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$setmaxrows(ctx numeric, maxrows numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxMaxRows constant text = 'ctxMaxRows';
	lCtx aws_oracle_ext.dbms_xmlgen$tContext;
	lnCtxHdl int := trunc(ctx);
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

    if not lCtx is null then
        lCtx.ctxAttributes := aws_oracle_ext.dbms_xmlgen$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
                                                                         forceParamList => array[case when maxRows is null then CtxMaxRows else null end],
                                                                         ctxMaxRows => maxRows
                                                                        );

        perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
                                                       ctxCursor => lCtx.ctxCursor,
                                                       ctxQuery => lCtx.ctxQuery,
                                                       ctxAttributes => lCtx.ctxAttributes,
                                                       ctxNumRowsProcessed => lCtx.ctxNumRowsProcessed,
                                                       forceSetValues => true
                                                      );
	end if;
end; ]]></complex-attribute>
                        <category _I_D="86ff8bd6-85bd-44f6-ac2c-346781782fe1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4f342527-e737-4044-bc75-acd1f72ef15b" name="dbms_xmlgen$setnullhandling" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$setnullhandling" is-trigger-function="0" unique-function-name="dbms_xmlgen$setnullhandling" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="void" function-arguments="ctx numeric, flag numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365838" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric, flag numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$setnullhandling(ctx numeric, flag numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxNullHandling constant text = 'ctxNullHandling';
	lnCtxHdl int := trunc(ctx);
	lCtx aws_oracle_ext.dbms_xmlgen$tContext;
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

    if not lCtx is null then
        lCtx.ctxAttributes := aws_oracle_ext.dbms_xmlgen$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
                                                                         forceParamList => array[case when flag is null then CtxNullHandling else null end],
                                                                         ctxNullHandling => flag
                                                                        );

        perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
                                                       ctxCursor => lCtx.ctxCursor,
                                                       ctxQuery => lCtx.ctxQuery,
                                                       ctxAttributes => lCtx.ctxAttributes,
                                                       ctxNumRowsProcessed => lCtx.ctxNumRowsProcessed,
                                                       forceSetValues => true
                                                      );
	end if;
end; ]]></complex-attribute>
                        <category _I_D="e58b2f63-db42-4001-9471-2199ad3e1b9c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8d889050-de65-47df-aab1-0760edb2e888" name="dbms_xmlgen$setrowsettag" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$setrowsettag" is-trigger-function="0" unique-function-name="dbms_xmlgen$setrowsettag" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctx numeric, rowsettagname text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365834" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric, rowsettagname text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$setrowsettag(ctx numeric, rowsettagname text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxAttrName constant text = 'ctxRowSetTag';
	lCtx aws_oracle_ext.dbms_xmlgen$tContext;
	lnCtxHdl int := trunc(ctx);
    lbCtxExists boolean;
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

    if not lCtx is null then
        lCtx.ctxAttributes := aws_oracle_ext.dbms_xmlgen$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
                                                                         forceParamList => array[case when rowSetTagName is null then CtxAttrName else null end],
                                                                         ctxRowSetTag => rowSetTagName
                                                                        );

        perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
                                                       ctxCursor => lCtx.ctxCursor,
                                                       ctxQuery => lCtx.ctxQuery,
                                                       ctxAttributes => lCtx.ctxAttributes,
                                                       ctxNumRowsProcessed => lCtx.ctxNumRowsProcessed,
                                                       forceSetValues => true
                                                      );
	end if;
end; ]]></complex-attribute>
                        <category _I_D="fc821ccd-afaa-47ee-9b6a-dcba08781ec7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f40dbd30-a9fa-4f8e-b00d-caebb03b1979" name="dbms_xmlgen$setrowtag" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$setrowtag" is-trigger-function="0" unique-function-name="dbms_xmlgen$setrowtag" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctx numeric, rowtagname text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365835" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric, rowtagname text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$setrowtag(ctx numeric, rowtagname text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxAttrName constant text = 'ctxRowTag';
	lCtx aws_oracle_ext.dbms_xmlgen$tContext;
	lnCtxHdl int := trunc(ctx);
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

    if not lCtx is null then
        lCtx.ctxAttributes := aws_oracle_ext.dbms_xmlgen$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
                                                                         forceParamList => array[case when rowTagName is null then CtxAttrName else null end],
                                                                         ctxRowTag => rowTagName
                                                                        );

        perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
                                                       ctxCursor => lCtx.ctxCursor,
                                                       ctxQuery => lCtx.ctxQuery,
                                                       ctxAttributes => lCtx.ctxAttributes,
                                                       ctxNumRowsProcessed => lCtx.ctxNumRowsProcessed,
                                                       forceSetValues => true
                                                      );
    	end if;
end; ]]></complex-attribute>
                        <category _I_D="fefdcd04-1b20-4148-859e-611546db9242" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bad90550-423c-4e3b-8484-492857b82716" name="dbms_xmlgen$setskiprows" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$setskiprows" is-trigger-function="0" unique-function-name="dbms_xmlgen$setskiprows" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="void" function-arguments="ctx numeric, skiprows numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365836" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric, skiprows numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$setskiprows(ctx numeric, skiprows numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxSkipRows constant text = 'ctxSkipRows';
	lCtx aws_oracle_ext.dbms_xmlgen$tContext;
	lnCtxHdl int := trunc(ctx);
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

    if not lCtx is null then
        lCtx.ctxAttributes := aws_oracle_ext.dbms_xmlgen$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
                                                                         forceParamList => array[case when skipRows is null then CtxSkipRows else null end],
                                                                         ctxSkipRows => skipRows
                                                                        );

        perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
                                                       ctxCursor => lCtx.ctxCursor,
                                                       ctxQuery => lCtx.ctxQuery,
                                                       ctxAttributes => lCtx.ctxAttributes,
                                                       ctxNumRowsProcessed => lCtx.ctxNumRowsProcessed,
                                                       forceSetValues => true
                                                      );
	end if;
end; ]]></complex-attribute>
                        <category _I_D="f0fa2733-94ec-4e5d-85e6-193f929dbc1e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c0e1e669-395d-4095-99c1-345c9da340d4" name="dbms_xmlgen$useitemtagsforcoll" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$useitemtagsforcoll" is-trigger-function="0" unique-function-name="dbms_xmlgen$useitemtagsforcoll" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="void" function-arguments="ctx numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365839" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$useitemtagsforcoll(ctx numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxUseItemTagsForColl constant text = 'ctxUseItemTagsForColl';
	lnCtxHdl int := trunc(ctx);
	lCtx dbms_xmlgen$tContext;
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

    if not lCtx is null then
        lCtx.ctxAttributes := dbms_xmlgen$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
                                                          forceParamList => array[CtxUseItemTagsForColl],
                                                          ctxUseItemTagsForColl => true
                                                         );

        perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
                                                    ctxCursor => lCtx.ctxCursor,
                                                    ctxQuery => lCtx.ctxQuery,
                                                    ctxAttributes => lCtx.ctxAttributes,
                                                    ctxNumRowsProcessed => lCtx.ctxNumRowsProcessed,
                                                    forceSetValues => true
                                                   );
	end if;
end; ]]></complex-attribute>
                        <category _I_D="12161ee2-f396-4853-a11c-853236369903" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="74754744-7b08-453d-a5f8-51fcde447523" name="dbms_xmlgen$usenullattributeindicator" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$usenullattributeindicator" is-trigger-function="0" unique-function-name="dbms_xmlgen$usenullattributeindicator" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,boolean" is-returning-set="f" ret-datatype="void" function-arguments="ctx numeric, attrind boolean DEFAULT true" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365840" volatility="VOLATILE" is-window="f" function-identity-arguments="ctx numeric, attrind boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlgen$usenullattributeindicator(ctx numeric, attrind boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxUseNullAttributeIndicator constant text = 'ctxUseNullAttributeIndicator';
	lnCtxHdl int := trunc(ctx);
	lCtx dbms_xmlgen$tContext;
begin
	lCtx := aws_oracle_ext.dbms_xmlgen$getctxobj(ctxHdl => lnCtxHdl);

    if not lCtx is null then
        lCtx.ctxAttributes := dbms_xmlgen$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
                                                          forceParamList => array[case when attrind is null then CtxUseNullAttributeIndicator else null end],
                                                          ctxUseNullAttributeIndicator => attrind
                                                         );

        perform aws_oracle_ext.dbms_xmlgen$setctxvalue(ctxHdl => lCtx.ctxIdx,
                                                    ctxCursor => lCtx.ctxCursor,
                                                    ctxQuery => lCtx.ctxQuery,
                                                    ctxAttributes => lCtx.ctxAttributes,
                                                    ctxNumRowsProcessed => lCtx.ctxNumRowsProcessed,
                                                    forceSetValues => true
                                                   );
	end if;
end; ]]></complex-attribute>
                        <category _I_D="9cccf406-b12c-4570-b655-5778fb2a625e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9189cd00-0ace-4d69-ab23-9309e379cf7f" name="dbms_xmlquery$all_rows" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$all_rows" is-trigger-function="0" unique-function-name="dbms_xmlquery$all_rows" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365710" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$all_rows()">
                        <complex-attribute name="sql"><![CDATA[ select -1 ]]></complex-attribute>
                        <category _I_D="570e666f-ae04-4246-8b43-9371ce16553a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d7eea671-5af3-45c3-8ca2-8530d78eb763" name="dbms_xmlquery$closecontext" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$closecontext" is-trigger-function="0" unique-function-name="dbms_xmlquery$closecontext" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365740" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$closecontext(ctxhdl numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	emtyStr constant varchar := '';
    ctxIdx text;
    ctxVal text;
begin
	ctxIdx := aws_oracle_ext.dbms_xmlquery$ctxIdx(ctxHdl);

	begin
	  ctxVal := aws_oracle_ext.get_extpack_variable(variable_name => ctxIdx, missing_ok => false);
	exception when sqlstate '42704' then
				if position(ctxIdx in sqlerrm) then
	            	ctxVal := emtyStr;
	            else
	            	raise exception using hint = sqlstate, message = sqlerrm;
	            end if;
	          when others then
	            raise exception using hint = sqlstate, message = sqlerrm;
	end;

    begin
	    if nullif(ctxVal, emtyStr) is not null then
	    	perform aws_oracle_ext.set_extpack_variable(variable_name => ctxIdx, variable_value => null::text);
	    else
	    	raise exception undefined_object;
	    end if;

	exception when undefined_object then
		raise exception 'Invalid context handle specified.' using hint = '29532';
	end;
end; ]]></complex-attribute>
                        <category _I_D="0b4d76a8-bb45-4cfc-a7bc-6f8b1573e06d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="735a1141-2bb7-4745-8062-935a71359fbb" name="dbms_xmlquery$context2obj" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$context2obj(ctxhdl numeric)" is-trigger-function="0" unique-function-name="dbms_xmlquery$context2obj(ctxhdl numeric)" is-aggregate="f" language-name="sql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="dbms_xmlquery$tcontext" function-arguments="ctxhdl numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365742" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlquery$context2obj(ctxhdl numeric)" unique-suffix="(ctxhdl numeric)" routine-number="365742">
                        <complex-attribute name="sql"><![CDATA[ select dbms_xmlquery$context2obj(get_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl))) ]]></complex-attribute>
                        <category _I_D="eb3b92c7-32e2-4cdb-ae24-29e2c707e30a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c0fe3c30-9b31-4c4d-bd94-0e550a2cc14a" name="dbms_xmlquery$context2obj" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$context2obj(ctxvalue text)" is-trigger-function="0" unique-function-name="dbms_xmlquery$context2obj(ctxvalue text)" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="dbms_xmlquery$tcontext" function-arguments="ctxvalue text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365741" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxvalue text" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlquery$context2obj(ctxvalue text)" unique-suffix="(ctxvalue text)" routine-number="365741">
                        <complex-attribute name="sql"><![CDATA[ select * from json_populate_record(null::dbms_xmlquery$TContext, ctxValue::json) ]]></complex-attribute>
                        <category _I_D="a72a5c8b-0473-4c58-99f0-4845fe9c4753" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8d5291be-7047-4e2f-a267-f51df6a2e19f" name="dbms_xmlquery$context2text" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$context2text(ctxhdl numeric, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;)" is-trigger-function="0" unique-function-name="dbms_xmlquery$context2text(ctxhdl numeric, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;)" is-aggregate="f" language-name="sql" arguments-datatypes="numeric,text,aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;" is-returning-set="f" ret-datatype="text" function-arguments="ctxhdl numeric, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365736" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlquery$context2text(ctxhdl numeric, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;)" unique-suffix="(ctxhdl numeric, ctxquery text, ctxattributes aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;)" routine-number="365736">
                        <complex-attribute name="sql"><![CDATA[ select dbms_xmlquery$context2text((ctxHdl,
                                         ctxQuery,
                                         coalesce(ctxAttributes, dbms_xmlquery$contextAttr2obj()
                                        )
                                       )::dbms_xmlquery$TContext)::text ]]></complex-attribute>
                        <category _I_D="c23255d9-21bb-4f39-a494-8fb519723ef4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="03dff141-f837-4efe-9b40-e50d2fb6fedb" name="dbms_xmlquery$context2text" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$context2text(ctxvalue aws_oracle_ext.&quot;dbms_xmlquery$tcontext&quot;)" is-trigger-function="0" unique-function-name="dbms_xmlquery$context2text(ctxvalue aws_oracle_ext.&quot;dbms_xmlquery$tcontext&quot;)" is-aggregate="f" language-name="sql" arguments-datatypes="aws_oracle_ext.&quot;dbms_xmlquery$tcontext&quot;" is-returning-set="f" ret-datatype="text" function-arguments="ctxvalue aws_oracle_ext.&quot;dbms_xmlquery$tcontext&quot;" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365735" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxvalue aws_oracle_ext.&quot;dbms_xmlquery$tcontext&quot;" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlquery$context2text(ctxvalue aws_oracle_ext.&quot;dbms_xmlquery$tcontext&quot;)" unique-suffix="(ctxvalue aws_oracle_ext.&quot;dbms_xmlquery$tcontext&quot;)" routine-number="365735">
                        <complex-attribute name="sql"><![CDATA[ select row_to_json(ctxValue)::text ]]></complex-attribute>
                        <category _I_D="3a4a0949-9eb3-4afd-b9d5-38b7b7b020ac" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0a746c51-58f5-4850-9889-35fa4c1ca477" name="dbms_xmlquery$contextattr2obj" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$contextattr2obj" is-trigger-function="0" unique-function-name="dbms_xmlquery$contextattr2obj" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="dbms_xmlquery$tctxattributes" function-arguments="ctxattr text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365734" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxattr text" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$contextattr2obj(ctxattr text)">
                        <complex-attribute name="sql"><![CDATA[ select *
        from json_populate_record(null::dbms_xmlquery$TctxAttributes,
                                  coalesce(ctxAttr, dbms_xmlquery$contextAttr2text())::json
                                 ) ]]></complex-attribute>
                        <category _I_D="9717ce6f-3d42-49c2-a34c-7cd7e773c848" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ff9b4cba-8253-4ea3-ab4b-242ebf8eb3b6" name="dbms_xmlquery$contextattr2text" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$contextattr2text(ctxattrvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;)" is-trigger-function="0" unique-function-name="dbms_xmlquery$contextattr2text(ctxattrvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;)" is-aggregate="f" language-name="sql" arguments-datatypes="aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;" is-returning-set="f" ret-datatype="text" function-arguments="ctxattrvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365732" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxattrvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlquery$contextattr2text(ctxattrvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;)" unique-suffix="(ctxattrvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;)" routine-number="365732">
                        <complex-attribute name="sql"><![CDATA[ select row_to_json(ctxAttrValue)::text ]]></complex-attribute>
                        <category _I_D="038399df-91b8-46e0-8a22-83794675ce5f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a8835400-25ba-405f-b05f-6a6351900beb" name="dbms_xmlquery$contextattr2text" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$contextattr2text(ctxbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], ctxdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxcallidattrname text, ctxdateformat text, ctxencodingtag text, ctxerrortag text, ctxmaxrows numeric, ctxmateheader text, ctxraiseexception boolean, ctxraisenorowsexception boolean, ctxrowidattrname text, ctxrowidattrvalue text, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxsqltoxmlnameescaping boolean, ctxstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxtagcase numeric, ctxxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxusenullattributeindicator boolean, ctxusetypeforcollelemtag boolean)" is-trigger-function="0" unique-function-name="dbms_xmlquery$contextattr2text(ctxbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], ctxdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxcallidattrname text, ctxdateformat text, ctxencodingtag text, ctxerrortag text, ctxmaxrows numeric, ctxmateheader text, ctxraiseexception boolean, ctxraisenorowsexception boolean, ctxrowidattrname text, ctxrowidattrvalue text, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxsqltoxmlnameescaping boolean, ctxstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxtagcase numeric, ctxxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxusenullattributeindicator boolean, ctxusetypeforcollelemtag boolean)" is-aggregate="f" language-name="sql" arguments-datatypes="aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[],aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,text,text,text,text,numeric,text,boolean,boolean,text,text,text,text,numeric,boolean,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,numeric,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,boolean,boolean" is-returning-set="f" ret-datatype="text" function-arguments="ctxbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[] DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], ctxdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxcallidattrname text DEFAULT NULL::text, ctxdateformat text DEFAULT NULL::text, ctxencodingtag text DEFAULT NULL::text, ctxerrortag text DEFAULT NULL::text, ctxmaxrows numeric DEFAULT NULL::numeric, ctxmateheader text DEFAULT NULL::text, ctxraiseexception boolean DEFAULT NULL::boolean, ctxraisenorowsexception boolean DEFAULT NULL::boolean, ctxrowidattrname text DEFAULT NULL::text, ctxrowidattrvalue text DEFAULT NULL::text, ctxrowsettag text DEFAULT NULL::text, ctxrowtag text DEFAULT NULL::text, ctxskiprows numeric DEFAULT NULL::numeric, ctxsqltoxmlnameescaping boolean DEFAULT NULL::boolean, ctxstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxtagcase numeric DEFAULT NULL::numeric, ctxxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxusenullattributeindicator boolean DEFAULT NULL::boolean, ctxusetypeforcollelemtag boolean DEFAULT NULL::boolean" schema-id="364663" function-type="RET_SCALAR" count-arguments="22" function-id="365733" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], ctxdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxcallidattrname text, ctxdateformat text, ctxencodingtag text, ctxerrortag text, ctxmaxrows numeric, ctxmateheader text, ctxraiseexception boolean, ctxraisenorowsexception boolean, ctxrowidattrname text, ctxrowidattrvalue text, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxsqltoxmlnameescaping boolean, ctxstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxtagcase numeric, ctxxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxusenullattributeindicator boolean, ctxusetypeforcollelemtag boolean" overload-function-count="2" proc-language="sql" function-signature="dbms_xmlquery$contextattr2text(ctxbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], ctxdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxcallidattrname text, ctxdateformat text, ctxencodingtag text, ctxerrortag text, ctxmaxrows numeric, ctxmateheader text, ctxraiseexception boolean, ctxraisenorowsexception boolean, ctxrowidattrname text, ctxrowidattrvalue text, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxsqltoxmlnameescaping boolean, ctxstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxtagcase numeric, ctxxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxusenullattributeindicator boolean, ctxusetypeforcollelemtag boolean)" unique-suffix="(ctxbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], ctxdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxcallidattrname text, ctxdateformat text, ctxencodingtag text, ctxerrortag text, ctxmaxrows numeric, ctxmateheader text, ctxraiseexception boolean, ctxraisenorowsexception boolean, ctxrowidattrname text, ctxrowidattrvalue text, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxsqltoxmlnameescaping boolean, ctxstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxtagcase numeric, ctxxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxusenullattributeindicator boolean, ctxusetypeforcollelemtag boolean)" routine-number="365733">
                        <complex-attribute name="sql"><![CDATA[ select dbms_xmlquery$contextAttr2text((ctxBindValue,
	  			                             ctxDataHeader,
	                                         ctxCallIdAttrName,
	                                         coalesce(ctxDateFormat, dbms_xmlquery$default_date_format()),
	                                         coalesce(ctxEncodingTag, dbms_xmlquery$db_encoding()),
	                                         coalesce(ctxErrorTag, dbms_xmlquery$default_errortag()),
	                                         coalesce(ctxMaxRows, dbms_xmlquery$all_rows()),
	                                         ctxMateHeader,
	                                         ctxRaiseException,
	                                         ctxRaiseNoRowsException,
	                                         ctxRowidAttrName,
	                                         ctxRowIdAttrValue,
	                                         coalesce(ctxRowSetTag, dbms_xmlquery$default_rowsettag()),
	                                         coalesce(ctxRowTag, dbms_xmlquery$default_rowtag()),
	                                         coalesce(ctxSkipRows, 0),
	                                         ctxSQLToXMLNameescaping,
	                                         ctxStyleSheetHeader,
	                                         ctxTagCase,
	                                         ctxXSLT,
	                                         ctxXSLTParam,
	                                         ctxUseNullAttributeIndicator,
	                                         ctxUseTypeForCollElemTag
	                                        )::dbms_xmlquery$TctxAttributes)::text ]]></complex-attribute>
                        <category _I_D="b36c9bfb-0b95-422e-9bb4-5e55fda9a266" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ad64eafb-eed7-43ad-b8b8-725bdfb0cf88" name="dbms_xmlquery$ctxhdl2uidrec" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$ctxhdl2uidrec" is-trigger-function="0" unique-function-name="dbms_xmlquery$ctxhdl2uidrec" is-aggregate="f" language-name="sql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="record" function-arguments="ctxhdl numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365737" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctxhdl numeric" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$ctxhdl2uidrec(ctxhdl numeric)">
                        <complex-attribute name="sql"><![CDATA[ select ctxHdl, concat('dbms_xmlquery$context_query_', coalesce(ctxHdl::text, '')) ]]></complex-attribute>
                        <category _I_D="2bbad50c-a459-460f-8c03-7b4770b5a74b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c0cf957e-d4ad-4943-9882-2c01f1b9d739" name="dbms_xmlquery$ctxidx" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$ctxidx" is-trigger-function="0" unique-function-name="dbms_xmlquery$ctxidx" is-aggregate="f" language-name="sql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="varchar" function-arguments="ctxhdl numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365738" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctxhdl numeric" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$ctxidx(ctxhdl numeric)">
                        <complex-attribute name="sql"><![CDATA[ select ctxIdx from dbms_xmlquery$ctxHdl2uidRec(ctxHdl) as (Idx numeric, ctxIdx character varying) ]]></complex-attribute>
                        <category _I_D="17726b35-b1e5-4b4b-ac58-5cdba9daa91f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="03db5f9c-9ad8-4737-836c-e575ade2accf" name="dbms_xmlquery$db_encoding" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$db_encoding" is-trigger-function="0" unique-function-name="dbms_xmlquery$db_encoding" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365711" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$db_encoding()">
                        <complex-attribute name="sql"><![CDATA[ select '_' ]]></complex-attribute>
                        <category _I_D="284017b9-7361-4cea-a3a7-7194d62cd9f4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e78a8b08-51b6-4787-b967-190289e7ed78" name="dbms_xmlquery$default_dataheadertag" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$default_dataheadertag" is-trigger-function="0" unique-function-name="dbms_xmlquery$default_dataheadertag" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365722" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$default_dataheadertag()">
                        <complex-attribute name="sql"><![CDATA[ select 'DOCUMENT' ]]></complex-attribute>
                        <category _I_D="fd57270e-b77a-4ec3-93f6-b1645951c26a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f4500040-4801-42ab-b5d3-0e5f9336b8c1" name="dbms_xmlquery$default_date_format" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$default_date_format" is-trigger-function="0" unique-function-name="dbms_xmlquery$default_date_format" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365712" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$default_date_format()">
                        <complex-attribute name="sql"><![CDATA[ select 'MM/dd/yyyy HH:mm:ss' ]]></complex-attribute>
                        <category _I_D="28f02c1a-1beb-49bc-8275-7b36aac09691" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="36d8281d-c082-4758-ba15-546075dede14" name="dbms_xmlquery$default_errortag" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$default_errortag" is-trigger-function="0" unique-function-name="dbms_xmlquery$default_errortag" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365713" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$default_errortag()">
                        <complex-attribute name="sql"><![CDATA[ select 'ERROR' ]]></complex-attribute>
                        <category _I_D="4d6d72c5-3db7-4586-887b-4ed47cc5f77e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4324c595-5d0d-4d36-8282-63bc8a4f7fac" name="dbms_xmlquery$default_rowidattr" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$default_rowidattr" is-trigger-function="0" unique-function-name="dbms_xmlquery$default_rowidattr" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365714" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$default_rowidattr()">
                        <complex-attribute name="sql"><![CDATA[ select 'NUM' ]]></complex-attribute>
                        <category _I_D="5df57a3c-2a53-48ce-a678-390b6476dbea" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e4b192a7-6d6a-45ec-b05e-33af14c0e253" name="dbms_xmlquery$default_rowsettag" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$default_rowsettag" is-trigger-function="0" unique-function-name="dbms_xmlquery$default_rowsettag" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365715" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$default_rowsettag()">
                        <complex-attribute name="sql"><![CDATA[ select 'ROWSET' ]]></complex-attribute>
                        <category _I_D="e32b1dcd-604c-400d-bf14-d11241d6bf7d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1df6adbb-4f00-4649-86f8-698841e2214d" name="dbms_xmlquery$default_rowtag" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$default_rowtag" is-trigger-function="0" unique-function-name="dbms_xmlquery$default_rowtag" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365716" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$default_rowtag()">
                        <complex-attribute name="sql"><![CDATA[ select 'ROW' ]]></complex-attribute>
                        <category _I_D="9c38a0c9-c0e8-483e-b2c6-9ad2e851f29d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a705836c-2b1b-4b45-a23a-b3f1801ee96a" name="dbms_xmlquery$dtd" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$dtd" is-trigger-function="0" unique-function-name="dbms_xmlquery$dtd" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365717" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$dtd()">
                        <complex-attribute name="sql"><![CDATA[ select 1 ]]></complex-attribute>
                        <category _I_D="b5a85cc6-f2e6-459b-b506-88a1826e882e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ca127f5f-e453-45ef-b5c4-dde407b34cc5" name="dbms_xmlquery$getnumrowsprocessed" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$getnumrowsprocessed" is-trigger-function="0" unique-function-name="dbms_xmlquery$getnumrowsprocessed" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="numeric" function-arguments="ctxhdl numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365771" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$getnumrowsprocessed(ctxhdl numeric)">
                        <complex-attribute name="sql"><![CDATA[
begin

	return 0;
    
end; ]]></complex-attribute>
                        <category _I_D="088514b4-2d6d-42c7-8d4f-94c00c7216db" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="83771433-95b1-4d1c-b168-d5778d73273e" name="dbms_xmlquery$getversion" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$getversion" is-trigger-function="0" unique-function-name="dbms_xmlquery$getversion" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365772" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$getversion()">
                        <complex-attribute name="sql"><![CDATA[
begin
	raise notice '%', 'XSU Version                Owner         Timestamp';
    raise notice '%', '-------------------------- ------------- ----------------';
end; ]]></complex-attribute>
                        <category _I_D="4052867e-f283-403c-a95b-06addd0d0694" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2ab5c49a-70b7-4e43-8a2a-0de66b268138" name="dbms_xmlquery$getxml" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$getxml(ctxhdl numeric, metatype numeric)" is-trigger-function="0" unique-function-name="dbms_xmlquery$getxml(ctxhdl numeric, metatype numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="text" function-arguments="ctxhdl numeric, metatype numeric DEFAULT aws_oracle_ext.&quot;dbms_xmlquery$none&quot;()" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365769" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, metatype numeric" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_xmlquery$getxml(ctxhdl numeric, metatype numeric)" unique-suffix="(ctxhdl numeric, metatype numeric)" routine-number="365769">
                        <complex-attribute name="sql"><![CDATA[
declare
    ctxObj dbms_xmlquery$tcontext;
begin
	ctxObj := dbms_xmlquery$context2obj(ctxHdl);
    return xmlserialize(document dbms_xmlquery$query2xml(pvSQL => ctxObj.ctxQuery,
                                                         pjDataHeader => (ctxObj.ctxAttributes).ctxDataHeader,
                                                         pvRowIdAttrName => (ctxObj.ctxAttributes).ctxRowIdAttrName,
                                                         pvRowsetTag => (ctxObj.ctxAttributes).ctxRowsettag,
                                                         pvRowTag => (ctxObj.ctxAttributes).ctxRowTag
                                               ) as text
                        );
end; ]]></complex-attribute>
                        <category _I_D="17ebe716-ad9e-4a11-ac83-c13e53538115" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2ca16d5e-58cc-4bb5-a15b-b079db8a7f3f" name="dbms_xmlquery$getxml" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$getxml(sqlquery text, metatype numeric)" is-trigger-function="0" unique-function-name="dbms_xmlquery$getxml(sqlquery text, metatype numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric" is-returning-set="f" ret-datatype="text" function-arguments="sqlquery text, metatype numeric DEFAULT aws_oracle_ext.&quot;dbms_xmlquery$none&quot;()" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365770" volatility="VOLATILE" is-window="f" function-identity-arguments="sqlquery text, metatype numeric" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_xmlquery$getxml(sqlquery text, metatype numeric)" unique-suffix="(sqlquery text, metatype numeric)" routine-number="365770">
                        <complex-attribute name="sql"><![CDATA[
begin
    return xmlserialize(document dbms_xmlquery$query2xml(pvSQL => sqlQuery,
                                                         pvRowIdAttrName => dbms_xmlquery$default_rowidattr(),
                                                         pvRowsetTag => dbms_xmlquery$default_rowsettag(),
                                                         pvRowTag => dbms_xmlquery$default_rowtag()
                                                        ) as text
                       );
end; ]]></complex-attribute>
                        <category _I_D="0cc16e59-1e5f-4712-b3eb-eb0b07e30648" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1522286a-867e-4f98-8802-8293d18e3318" name="dbms_xmlquery$lower_case" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$lower_case" is-trigger-function="0" unique-function-name="dbms_xmlquery$lower_case" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365718" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$lower_case()">
                        <complex-attribute name="sql"><![CDATA[ select 1 ]]></complex-attribute>
                        <category _I_D="a76b4f87-b730-4164-8f13-61eedb013b86" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="257bcaa9-d820-4cd9-af02-c85eaa1022cc" name="dbms_xmlquery$newcontext" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$newcontext" is-trigger-function="0" unique-function-name="dbms_xmlquery$newcontext" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="numeric" function-arguments="sqlquery text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365739" volatility="VOLATILE" is-window="f" function-identity-arguments="sqlquery text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$newcontext(sqlquery text)">
                        <complex-attribute name="sql"><![CDATA[
declare
    ctxSequence constant text := 'dbms_xmlquery$context$sequence';
    ctxQuery record;
    lnCurrval int := 0;
begin
    lnCurrval := coalesce(nullif(aws_oracle_ext.get_extpack_variable(variable_name => ctxSequence, missing_ok => true), ''), '-1')::integer;
	begin
        lnCurrval := lnCurrval + 1;
        perform aws_oracle_ext.set_extpack_variable(variable_name => ctxSequence, variable_value => lnCurrval::text);
        select Idx, ctxIdx, aws_oracle_ext.dbms_xmlquery$context2text(Idx, sqlQuery) ctx
          into ctxQuery
          from aws_oracle_ext.dbms_xmlquery$ctxHdl2uidRec(lnCurrval) as (Idx numeric, ctxIdx character varying);

        perform aws_oracle_ext.set_extpack_variable(variable_name => ctxQuery.ctxIdx, variable_value => ctxQuery.ctx);
    end;
    return ctxQuery.Idx;
end; ]]></complex-attribute>
                        <category _I_D="1f9b2a09-97fd-4d0b-98f2-d18d1b67669d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d874770a-d2a5-4079-9079-43cf9b16c50f" name="dbms_xmlquery$none" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$none" is-trigger-function="0" unique-function-name="dbms_xmlquery$none" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365719" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$none()">
                        <complex-attribute name="sql"><![CDATA[ select 0 ]]></complex-attribute>
                        <category _I_D="71ea4acb-3ad7-4d6a-ab51-4721e6d990d1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="70ecaadd-c83a-43ab-86a2-cbd49cc042fa" name="dbms_xmlquery$query2xml" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$query2xml" is-trigger-function="0" unique-function-name="dbms_xmlquery$query2xml" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[],aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,text,text,text,text,numeric,text,boolean,boolean,text,text,text,text,numeric,boolean,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,numeric,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,boolean,boolean" is-returning-set="f" ret-datatype="xml" function-arguments="pvsql text, pbaddxmlroot boolean DEFAULT true, pjbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[] DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], pjdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pvcallidattrname text DEFAULT NULL::text, pvdateformat text DEFAULT NULL::text, pvencodingtag text DEFAULT NULL::text, pverrortag text DEFAULT NULL::text, pnmaxrows numeric DEFAULT NULL::numeric, pvmetaheader text DEFAULT NULL::text, pbraiseexception boolean DEFAULT NULL::boolean, pbraisenorowsexception boolean DEFAULT NULL::boolean, pvrowidattrname text DEFAULT NULL::text, pvrowidattrvalue text DEFAULT NULL::text, pvrowsettag text DEFAULT NULL::text, pvrowtag text DEFAULT NULL::text, pnskiprows numeric DEFAULT NULL::numeric, pbsqltoxmlnameescaping boolean DEFAULT NULL::boolean, pnstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pvtagcase numeric DEFAULT NULL::numeric, pjxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pjxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pbusenullattributeindicator boolean DEFAULT NULL::boolean, pbusetypeforcollelemtag boolean DEFAULT NULL::boolean" schema-id="364663" function-type="RET_SCALAR" count-arguments="24" function-id="365767" volatility="VOLATILE" is-window="f" function-identity-arguments="pvsql text, pbaddxmlroot boolean, pjbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], pjdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pvcallidattrname text, pvdateformat text, pvencodingtag text, pverrortag text, pnmaxrows numeric, pvmetaheader text, pbraiseexception boolean, pbraisenorowsexception boolean, pvrowidattrname text, pvrowidattrvalue text, pvrowsettag text, pvrowtag text, pnskiprows numeric, pbsqltoxmlnameescaping boolean, pnstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pvtagcase numeric, pjxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pjxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pbusenullattributeindicator boolean, pbusetypeforcollelemtag boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$query2xml(pvsql text, pbaddxmlroot boolean, pjbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], pjdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pvcallidattrname text, pvdateformat text, pvencodingtag text, pverrortag text, pnmaxrows numeric, pvmetaheader text, pbraiseexception boolean, pbraisenorowsexception boolean, pvrowidattrname text, pvrowidattrvalue text, pvrowsettag text, pvrowtag text, pnskiprows numeric, pbsqltoxmlnameescaping boolean, pnstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pvtagcase numeric, pjxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pjxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, pbusenullattributeindicator boolean, pbusetypeforcollelemtag boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
  crMain refcursor;
  lvResult xml := null;

  lvSQL text := $pvSQL$ %1$s $pvSQL$;

  lbAddXmlRoot boolean := coalesce(pbAddXmlRoot, true);
  ljBindValue aws_oracle_ext.dbms_xmlquery$TctxDictionary[] := pjBindValue;
  ljDataHeader aws_oracle_ext.dbms_xmlquery$TctxDictionary := pjDataHeader;
  lvCallIdAttrName text := pvCallIdAttrName;
  lvDateFormat text := pvDateFormat;
  lvEncodingTag text := pvEncodingTag;
  lvErrorTag text := pvErrorTag;
  lnMaxRows numeric := pnMaxRows;
  lvMetaHeader text := pvMetaHeader;
  lbRaiseException boolean := pbRaiseException;
  lbRaiseNoRowsException boolean := pbRaiseNoRowsException;
  lvRowIdAttrName text := nullif(pvRowIdAttrName, '');
  lvRowIdAttrValue text := nullif(pvRowIdAttrValue, '');
  lvRowSetTag text := nullif(pvRowSetTag,'');
  lvRowTag text := nullif(pvRowTag,'');
  lnSkipRows numeric := pnSkipRows;
  lbSQLToXMLNameEscaping text := pbSQLToXMLNameescaping;
  lnStyleSheetHeader aws_oracle_ext.dbms_xmlquery$TctxDictionary := pnStyleSheetHeader;
  lvTagCase numeric := pvTagCase;
  ljXSLT aws_oracle_ext.dbms_xmlquery$TctxDictionary := pjXSLT;
  ljXSLTParam aws_oracle_ext.dbms_xmlquery$TctxDictionary := pjXSLTParam;
  lbUseNullAttributeIndicator boolean := pbUseNullAttributeIndicator;
  lbUseTypeForCollElemTag boolean := pbUseTypeForCollElemTag;
  lvDummy text;

  lvQuery text;
  lvQueryROW text := $row_data$ select row_number() over () as num,
  					                   (select xmlagg(row) from unnest(xpath('row/*', row_data, array[array['xsi', 'http://www.w3.org/2001/XMLSchema-instance']])) as row) as row
								   from unnest(xpath('table/*',
								                     query_to_xml($query$ %1$s $query$, false, false, ''),
								                     array[array['xsi', 'http://www.w3.org/2001/XMLSchema-instance']])
								              ) as row_data
					$row_data$;
  lvQueryDATAHEADER text := $query$ select xmlelement(name "%1$s", '%2$s', (%3$s)) $query$;

  lvQueryROWSETTAG text :=  $query$ select xmlelement(name %2$s, xmlagg(row)
				                              )
							          from (%1$s) as q
       				        $query$;

  lvQueryROWTAG text := $query$ select xmlelement(name %5$s,
                                                  xmlagg(xmlelement(name %4$s, xmlattributes(%2$s as %3$s), row ))
				                                 )
							      from (%1$s) as q
       				    $query$;

begin
   if nullif(pvSQL, '') is not null then
	  lvSQL := format(lvSQL, pvSQL);
      lvQuery := format(lvQueryROW, lvSQL);
   else
	 raise exception 'Null Exception.' using hint = '29532';
   end if;

   if lvRowTag is null and lvRowSetTag is null then
   	lvResult := xmlparse(content '<ERROR>ext.XMLSQLException: The row-set tag and the row tag are both omitted.</ERROR>');

   elsif lvRowSetTag is null and lvRowTag is not null or
         lvRowSetTag is not null and lvRowTag is null then

    lvQuery := format(lvQueryROWSETTAG, lvQuery, coalesce(lvRowSetTag, lvRowTag));

   elseif lvRowSetTag is not null and lvRowTag is not null then

    lvDummy := case when lvRowIdAttrName is null then 'NULL' else 'num' end;
    lvRowIdAttrName := coalesce(lvRowIdAttrName, 'empty_row_num');
   	lvQuery := format(lvQueryROWTAG, lvQuery, lvDummy, lvRowIdAttrName, lvRowTag, lvRowSetTag);

   else

   	lvResult := xmlparse(content '<ERROR>ext.XMLSQLException: Undeterminated error.</ERROR>');
   end if; -- if lvRowTag is null and lvRowSetTag is null then


  if lvResult is null then

   if pjDataHeader is not null and nullif(pjDataHeader.var, '') is not null then
   	 lvQuery := format(lvQueryDATAHEADER, pjDataHeader.value, pjDataHeader.var, lvQuery);
   end if; -- if pjDataHeader is not null and nullif(pjDataHeader.var, '') is not null then

   open crMain for execute lvQuery;
    fetch crMain into lvResult;
   close crMain;
  end if; -- if lvResult is null then

   if lbAddXmlRoot then
   	lvResult := xmlroot(lvResult, version '1.0', standalone yes);
   end if;

   return lvResult;
end; ]]></complex-attribute>
                        <category _I_D="87e34116-7b54-4303-be88-337705ed3249" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="58f22189-238a-43d6-8d3e-9a6452212fd3" name="dbms_xmlquery$schema" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$schema" is-trigger-function="0" unique-function-name="dbms_xmlquery$schema" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365720" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$schema()">
                        <complex-attribute name="sql"><![CDATA[ select 2 ]]></complex-attribute>
                        <category _I_D="3cf6cf15-4b9b-43d6-b590-0fda499aef20" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="baefe7a5-5443-46ef-9524-cf69434cb70b" name="dbms_xmlquery$setbindvalue" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setbindvalue" is-trigger-function="0" unique-function-name="dbms_xmlquery$setbindvalue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, bindname text, bindvalue text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365744" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, bindname text, bindvalue text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setbindvalue(ctxhdl numeric, bindname text, bindvalue text)">
                        <complex-attribute name="sql"><![CDATA[
declare
    CtxAttrName constant text = 'ctxBindValue';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when bindName is null then CtxAttrName else null end],
                                                        ctxBindValue => array[(bindName, bindValue)::dbms_xmlquery$tctxDictionary]
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="5900dfde-7b16-452c-9ff5-6f2f6b8b49df" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ce1ce1e3-9e20-4ea5-a887-98a72fa4ecf9" name="dbms_xmlquery$setcollidattrname" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setcollidattrname" is-trigger-function="0" unique-function-name="dbms_xmlquery$setcollidattrname" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, attrname text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365747" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, attrname text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setcollidattrname(ctxhdl numeric, attrname text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxAttrName constant text = 'ctxCollIdAttrName';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when attrName is null then CtxAttrName else null end],
                                                        ctxCollIdAttrName => attrName
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="6a2cf11a-2d26-4b45-88ec-2835be3d24b7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4621f6a6-3deb-42e6-9f35-99e9630a0c49" name="dbms_xmlquery$setctxattrvalue" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setctxattrvalue" is-trigger-function="0" unique-function-name="dbms_xmlquery$setctxattrvalue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;,text[],aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[],aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,text,text,text,text,numeric,text,boolean,boolean,text,text,text,text,numeric,boolean,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,numeric,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;,boolean,boolean" is-returning-set="f" ret-datatype="dbms_xmlquery$tctxattributes" function-arguments="INOUT ctxattributes aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;, forceparamlist text[] DEFAULT NULL::text[], ctxbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[] DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], ctxdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxcollidattrname text DEFAULT NULL::text, ctxdateformat text DEFAULT NULL::text, ctxencodingtag text DEFAULT NULL::text, ctxerrortag text DEFAULT NULL::text, ctxmaxrows numeric DEFAULT NULL::numeric, ctxmetaheader text DEFAULT NULL::text, ctxraiseexception boolean DEFAULT NULL::boolean, ctxraisenorowsexception boolean DEFAULT NULL::boolean, ctxrowidattrname text DEFAULT NULL::text, ctxrowidattrvalue text DEFAULT NULL::text, ctxrowsettag text DEFAULT NULL::text, ctxrowtag text DEFAULT NULL::text, ctxskiprows numeric DEFAULT NULL::numeric, ctxsqltoxmlnameescaping boolean DEFAULT NULL::boolean, ctxstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxtagcase numeric DEFAULT NULL::numeric, ctxxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot; DEFAULT NULL::aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxusenullattributeindicator boolean DEFAULT NULL::boolean, ctxusetypeforcollelemtag boolean DEFAULT NULL::boolean" schema-id="364663" function-type="RET_SCALAR" count-arguments="24" function-id="365743" volatility="VOLATILE" is-window="f" function-identity-arguments="INOUT ctxattributes aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;, forceparamlist text[], ctxbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], ctxdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxcollidattrname text, ctxdateformat text, ctxencodingtag text, ctxerrortag text, ctxmaxrows numeric, ctxmetaheader text, ctxraiseexception boolean, ctxraisenorowsexception boolean, ctxrowidattrname text, ctxrowidattrvalue text, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxsqltoxmlnameescaping boolean, ctxstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxtagcase numeric, ctxxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxusenullattributeindicator boolean, ctxusetypeforcollelemtag boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setctxattrvalue(INOUT ctxattributes aws_oracle_ext.&quot;dbms_xmlquery$tctxattributes&quot;, forceparamlist text[], ctxbindvalue aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;[], ctxdataheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxcollidattrname text, ctxdateformat text, ctxencodingtag text, ctxerrortag text, ctxmaxrows numeric, ctxmetaheader text, ctxraiseexception boolean, ctxraisenorowsexception boolean, ctxrowidattrname text, ctxrowidattrvalue text, ctxrowsettag text, ctxrowtag text, ctxskiprows numeric, ctxsqltoxmlnameescaping boolean, ctxstylesheetheader aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxtagcase numeric, ctxxslt aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxxsltparam aws_oracle_ext.&quot;dbms_xmlquery$tctxdictionary&quot;, ctxusenullattributeindicator boolean, ctxusetypeforcollelemtag boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lforceParamList text[];
begin
	lforceParamList := upper(forceParamList::text)::text[];

	ctxAttributes := (case when upper('ctxBindValue') = any(lforceParamList) then ctxBindValue else array_cat(ctxAttributes.ctxBindValue, ctxBindValue) end,
	                  case when upper('ctxDataHeader') = any(lforceParamList) then ctxDataHeader else coalesce(ctxDataHeader, ctxAttributes.ctxDataHeader) end,
                      case when upper('ctxCollIdAttrName') = any(lforceParamList) then ctxCollIdAttrName else coalesce(ctxCollIdAttrName, ctxAttributes.ctxCollIdAttrName) end,
	                  case when upper('ctxDateFormat') = any(lforceParamList) then ctxDateFormat else coalesce(ctxDateFormat, ctxAttributes.ctxDateFormat) end,
	                  case when upper('ctxEncodingTag') = any(lforceParamList) then ctxEncodingTag else coalesce(ctxEncodingTag, ctxAttributes.ctxEncodingTag) end,
	                  case when upper('ctxErrorTag') = any(lforceParamList) then ctxErrorTag else coalesce(ctxErrorTag, ctxAttributes.ctxErrorTag) end,
	                  case when upper('ctxMaxRows') = any(lforceParamList) then ctxMaxRows else coalesce(ctxMaxRows, ctxAttributes.ctxMaxRows) end,
	                  case when upper('ctxMetaHeader') = any(lforceParamList) then ctxMetaHeader else coalesce(ctxMetaHeader, ctxAttributes.ctxMetaHeader) end,
	                  case when upper('ctxRaiseException') = any(lforceParamList) then ctxRaiseException else coalesce(ctxRaiseException, ctxAttributes.ctxRaiseException) end,
	                  case when upper('ctxRaiseNoRowsException') = any(lforceParamList) then ctxRaiseNoRowsException else coalesce(ctxRaiseNoRowsException, ctxAttributes.ctxRaiseNoRowsException) end,
	                  case when upper('ctxRowIdAttrName') = any(lforceParamList) then ctxRowIdAttrName else coalesce(ctxRowIdAttrName, ctxAttributes.ctxRowIdAttrName) end,
	                  case when upper('ctxRowIdAttrValue') = any(lforceParamList) then ctxRowIdAttrValue else coalesce(ctxRowIdAttrValue, ctxAttributes.ctxRowIdAttrValue) end,
	                  case when upper('ctxRowSetTag') = any(lforceParamList) then ctxRowSetTag else coalesce(ctxRowSetTag, ctxAttributes.ctxRowSetTag) end,
	                  case when upper('ctxRowTag') = any(lforceParamList) then ctxRowTag else coalesce(ctxRowTag, ctxAttributes.ctxRowTag) end,
	                  case when upper('ctxSkipRows') = any(lforceParamList) then ctxSkipRows else coalesce(ctxSkipRows, ctxAttributes.ctxSkipRows) end,
	                  case when upper('ctxSQLToXMLNameEscaping') = any(lforceParamList) then ctxSQLToXMLNameEscaping else coalesce(ctxSQLToXMLNameEscaping, ctxAttributes.ctxSQLToXMLNameEscaping) end,
	                  case when upper('ctxStyleSheetHeader') = any(lforceParamList) then ctxStyleSheetHeader else coalesce(ctxStyleSheetHeader, ctxAttributes.ctxStyleSheetHeader) end,
	                  case when upper('ctxTagCase') = any(lforceParamList) then ctxTagCase else coalesce(ctxTagCase, ctxAttributes.ctxTagCase) end,
	                  case when upper('ctxXSLT') = any(lforceParamList) then ctxXSLT else coalesce(ctxXSLT, ctxAttributes.ctxXSLT) end,
	                  case when upper('ctxXSLTParam') = any(lforceParamList) then ctxXSLTParam else coalesce(ctxXSLTParam, ctxAttributes.ctxXSLTParam) end,
	                  case when upper('ctxUseNullAttributeIndicator') = any(lforceParamList) then ctxUseNullAttributeIndicator else coalesce(ctxUseNullAttributeIndicator, ctxAttributes.ctxUseNullAttributeIndicator) end,
	                  case when upper('ctxUseTypeForCollElemTag') = any(lforceParamList) then ctxUseTypeForCollElemTag else coalesce(ctxUseTypeForCollElemTag, ctxAttributes.ctxUseTypeForCollElemTag) end
                     )::dbms_xmlquery$TctxAttributes;
end; ]]></complex-attribute>
                        <category _I_D="665d3b76-61c5-4ee9-b8d4-57e4cd06805d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="86d9d9b1-42cc-4e31-a3a9-19c0fc592a2f" name="dbms_xmlquery$setdataheader" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setdataheader" is-trigger-function="0" unique-function-name="dbms_xmlquery$setdataheader" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, header text DEFAULT NULL::text, tag text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365749" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, header text, tag text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setdataheader(ctxhdl numeric, header text, tag text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxDataHeader constant text = 'ctxDataHeader';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when header is null then CtxDataHeader else null end],
                                                        ctxDataHeader => ROW(header, coalesce(tag, dbms_xmlquery$default_dataheadertag()))::dbms_xmlquery$tctxdictionary
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="1acc0ba0-b27f-4d4c-9f8c-fae6d5f04e5c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9816b63e-feb9-483f-9361-ecf88ffccc76" name="dbms_xmlquery$setdateformat" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setdateformat" is-trigger-function="0" unique-function-name="dbms_xmlquery$setdateformat" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, mask text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365748" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, mask text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setdateformat(ctxhdl numeric, mask text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxAttrName constant text = 'ctxDateFormat';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := aws_oracle_ext.dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when mask is null then CtxAttrName else null end],
                                                        ctxDateFormat => mask
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="911a1ba1-3ea0-4c0a-811e-85c1a6cb90fe" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9b631f59-6ba7-4a9e-bacd-56a75d53a871" name="dbms_xmlquery$setencodingtag" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setencodingtag" is-trigger-function="0" unique-function-name="dbms_xmlquery$setencodingtag" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, enc text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365750" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, enc text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setencodingtag(ctxhdl numeric, enc text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxEncodingTag constant text = 'ctxEncodingTag';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := aws_oracle_ext.dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when enc is null then CtxEncodingTag else null end],
                                                        ctxEncodingTag => enc
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="63180e78-1fd3-4df3-9bd4-71a3bfe21aeb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d1238272-2548-4a18-86d9-12eb4be908f1" name="dbms_xmlquery$seterrortag" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$seterrortag" is-trigger-function="0" unique-function-name="dbms_xmlquery$seterrortag" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, tag text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365751" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, tag text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$seterrortag(ctxhdl numeric, tag text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxErrorTag constant text = 'ctxErrorTag';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when tag is null then CtxErrorTag else null end],
                                                        ctxErrorTag => tag
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="32c28b5c-7909-4af4-8f4e-54a35d6328f9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6f5617e2-9bfe-498c-be06-4bbe445706b9" name="dbms_xmlquery$setmaxrows" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setmaxrows" is-trigger-function="0" unique-function-name="dbms_xmlquery$setmaxrows" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, rows numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365752" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, rows numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setmaxrows(ctxhdl numeric, rows numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxMaxRows constant text = 'ctxMaxRows';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when rows is null then CtxMaxRows else null end],
                                                        ctxMaxRows => rows
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="3a6a6e71-404a-4475-b96b-0e9e10ed5a9f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c67b499d-1b4e-44bb-a0c4-098c702df804" name="dbms_xmlquery$setmetaheader" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setmetaheader" is-trigger-function="0" unique-function-name="dbms_xmlquery$setmetaheader" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, header text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365753" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, header text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setmetaheader(ctxhdl numeric, header text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxMetaHeader constant text = 'ctxMetaHeader';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when header is null then CtxMetaHeader else null end],
                                                        ctxMetaHeader => header
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="cb2fab07-8ec6-4c9f-aa24-1ed518c6904d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="31e00ede-ba4a-49b3-af6b-63fcc70eeeea" name="dbms_xmlquery$setraiseexception" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setraiseexception" is-trigger-function="0" unique-function-name="dbms_xmlquery$setraiseexception" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,boolean" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, flag boolean DEFAULT true" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365754" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, flag boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setraiseexception(ctxhdl numeric, flag boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxRaiseException constant text = 'ctxRaiseException';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when flag is null then CtxRaiseException else null end],
                                                        ctxRaiseException => flag
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="57592940-6565-4013-b41d-7cd2cd1cff96" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ff558333-698e-4457-af09-18e4965032eb" name="dbms_xmlquery$setraisenorowsexception" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setraisenorowsexception" is-trigger-function="0" unique-function-name="dbms_xmlquery$setraisenorowsexception" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,boolean" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, flag boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365755" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, flag boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setraisenorowsexception(ctxhdl numeric, flag boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxRaiseNoRowsException constant text = 'ctxRaiseNoRowsException';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when flag is null then CtxRaiseNoRowsException else null end],
                                                        ctxRaiseNoRowsException => flag
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="d14fd432-9ed3-4b10-9bc2-25a4d311d4f8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="39c7be8d-e36f-4e95-ad9f-a11fcbe190c0" name="dbms_xmlquery$setrowidattrname" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setrowidattrname" is-trigger-function="0" unique-function-name="dbms_xmlquery$setrowidattrname" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, attrname text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365756" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, attrname text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setrowidattrname(ctxhdl numeric, attrname text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxRowidAttrName constant text = 'ctxRowidAttrName';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when attrName is null then CtxRowidAttrName else null end],
                                                        ctxRowidAttrName => attrName
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="5f6dc718-45bc-4d0d-ac0e-a41f31521615" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3121316a-0ed8-4bd8-91f6-303a540bcf69" name="dbms_xmlquery$setrowidattrvalue" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setrowidattrvalue" is-trigger-function="0" unique-function-name="dbms_xmlquery$setrowidattrvalue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, colname text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365757" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, colname text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setrowidattrvalue(ctxhdl numeric, colname text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxRowidAttrValue constant text = 'ctxRowidAttrValue';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when colName is null then CtxRowidAttrValue else null end],
                                                        ctxRowidAttrValue => colName
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="7ec5a88e-cebc-4d87-9a3f-449d3ff5cc1c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e9921866-0866-4f7c-804f-8cf096cc74a2" name="dbms_xmlquery$setrowsettag" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setrowsettag" is-trigger-function="0" unique-function-name="dbms_xmlquery$setrowsettag" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, tag text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365745" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, tag text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setrowsettag(ctxhdl numeric, tag text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxAttrName constant text = 'ctxRowSetTag';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when tag is null then CtxAttrName else null end],
                                                        ctxRowSetTag => tag
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="a13d3ccd-783e-433e-8aaa-a5d201d78cf8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3765222d-c3b3-4b9b-9e3e-7c597464ead5" name="dbms_xmlquery$setrowtag" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setrowtag" is-trigger-function="0" unique-function-name="dbms_xmlquery$setrowtag" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, tag text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365746" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, tag text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setrowtag(ctxhdl numeric, tag text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxAttrName constant text = 'ctxRowTag';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when tag is null then CtxAttrName else null end],
                                                        ctxRowTag => tag
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="41d8b24f-41b4-4d07-b0e5-fcc2bc5048f1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="289fde28-a150-4eed-9976-8d410a0a4e17" name="dbms_xmlquery$setskiprows" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setskiprows" is-trigger-function="0" unique-function-name="dbms_xmlquery$setskiprows" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, rows numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365758" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, rows numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setskiprows(ctxhdl numeric, rows numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxSkipRows constant text = 'ctxSkipRows';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when rows is null then CtxSkipRows else null end],
                                                        ctxSkipRows => rows
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="55644b0f-06af-41b3-8804-06c94697cc65" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="de98d52b-49f9-4e85-a5b0-d942f26f890f" name="dbms_xmlquery$setsqltoxmlnameescaping" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setsqltoxmlnameescaping" is-trigger-function="0" unique-function-name="dbms_xmlquery$setsqltoxmlnameescaping" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,boolean" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, flag boolean DEFAULT true" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365759" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, flag boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setsqltoxmlnameescaping(ctxhdl numeric, flag boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxSQLToXMLNameEscaping constant text = 'ctxSQLToXMLNameEscaping';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when flag is null then CtxSQLToXMLNameEscaping else null end],
                                                        ctxSQLToXMLNameEscaping => flag
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="edaaec84-a25d-49d6-99e9-41264098e695" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3da6b222-0cf8-4ab2-862a-2f812571fcf0" name="dbms_xmlquery$setstylesheetheader" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setstylesheetheader" is-trigger-function="0" unique-function-name="dbms_xmlquery$setstylesheetheader" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, uri text, type text DEFAULT 'text/xsl'::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365760" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, uri text, type text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setstylesheetheader(ctxhdl numeric, uri text, type text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxStyleSheetHeader constant text = 'ctxStyleSheetHeader';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when uri is null then CtxStyleSheetHeader else null end],
                                                        ctxStyleSheetHeader => ROW(uri, type)::dbms_xmlquery$tctxdictionary
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="8c611ad7-4cf7-4475-8d62-a4b98eb4423e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="11007771-6a46-43ae-8684-f0dadff66fd6" name="dbms_xmlquery$settagcase" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$settagcase" is-trigger-function="0" unique-function-name="dbms_xmlquery$settagcase" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, tcase numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365761" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, tcase numeric" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$settagcase(ctxhdl numeric, tcase numeric)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxTagCase constant text = 'ctxTagCase';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when tCase is null then CtxTagCase else null end],
                                                        ctxTagCase => tCase
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="c72e1340-72a7-4e5b-818c-5c20a6648a12" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="48eae0ea-857a-4090-b176-5a8a71ecd726" name="dbms_xmlquery$setxslt" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setxslt(ctxhdl numeric, stylesheet text, ref text)" is-trigger-function="0" unique-function-name="dbms_xmlquery$setxslt(ctxhdl numeric, stylesheet text, ref text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, stylesheet text, ref text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365766" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, stylesheet text, ref text" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_xmlquery$setxslt(ctxhdl numeric, stylesheet text, ref text)" unique-suffix="(ctxhdl numeric, stylesheet text, ref text)" routine-number="365766">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxXSLT constant text = 'ctxXSLT';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when stylesheet is null then CtxXSLT else null end],
                                                        ctxXSLT => ROW(stylesheet, ref)::dbms_xmlquery$tctxdictionary
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="6793c211-3d47-4fe5-98c8-5ecbbe98b976" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6972b6ea-0787-4215-b375-af70297d79e9" name="dbms_xmlquery$setxslt" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setxslt(ctxhdl numeric, uri character varying, ref text)" is-trigger-function="0" unique-function-name="dbms_xmlquery$setxslt(ctxhdl numeric, uri character varying, ref text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,character varying,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, uri character varying, ref text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365765" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, uri character varying, ref text" overload-function-count="2" proc-language="plpgsql" function-signature="dbms_xmlquery$setxslt(ctxhdl numeric, uri character varying, ref text)" unique-suffix="(ctxhdl numeric, uri character varying, ref text)" routine-number="365765">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxXSLT constant text = 'ctxXSLT';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when uri is null then CtxXSLT else null end],
                                                        ctxXSLT => ROW(uri, ref)::dbms_xmlquery$tctxdictionary
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="4bbc72d0-d7ec-46fd-a5eb-026f3b75931e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1d9d9de6-fcf4-4cd8-8195-361b5964e675" name="dbms_xmlquery$setxsltparam" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$setxsltparam" is-trigger-function="0" unique-function-name="dbms_xmlquery$setxsltparam" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, name text, param text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365764" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, name text, param text" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$setxsltparam(ctxhdl numeric, name text, param text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxXSLTParam constant text = 'ctxXSLTParam';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when name is null then CtxXSLTParam else null end],
                                                        ctxXSLTParam => ROW(name, param)::dbms_xmlquery$tctxdictionary
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="13562337-0005-45c1-b87b-b5f3803e0121" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9f54c0f4-bf8e-40da-b970-09fd11be23d1" name="dbms_xmlquery$upper_case" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$upper_case" is-trigger-function="0" unique-function-name="dbms_xmlquery$upper_case" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365721" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="dbms_xmlquery$upper_case()">
                        <complex-attribute name="sql"><![CDATA[ select 2 ]]></complex-attribute>
                        <category _I_D="ab0a4bd8-4e1a-47e5-a8fe-38bafc4f8c1f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d4471271-b51c-435a-be4c-9f251091ca49" name="dbms_xmlquery$usenullattributeindicator" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$usenullattributeindicator" is-trigger-function="0" unique-function-name="dbms_xmlquery$usenullattributeindicator" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,boolean" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, flag boolean" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365762" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, flag boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$usenullattributeindicator(ctxhdl numeric, flag boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxUseNullAttributeIndicator constant text = 'ctxUseNullAttributeIndicator';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when flag is null then CtxUseNullAttributeIndicator else null end],
                                                        ctxUseNullAttributeIndicator => flag
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="bb2fe8db-7deb-49f9-b860-0951228c7b34" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ec9be55d-45a2-4fac-bd57-c21fb2a07ac0" name="dbms_xmlquery$usetypeforcollelemtag" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$usetypeforcollelemtag" is-trigger-function="0" unique-function-name="dbms_xmlquery$usetypeforcollelemtag" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,boolean" is-returning-set="f" ret-datatype="void" function-arguments="ctxhdl numeric, flag boolean DEFAULT true" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365763" volatility="VOLATILE" is-window="f" function-identity-arguments="ctxhdl numeric, flag boolean" overload-function-count="1" proc-language="plpgsql" function-signature="dbms_xmlquery$usetypeforcollelemtag(ctxhdl numeric, flag boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
	CtxUseTypeForCollElemTag constant text = 'ctxUseTypeForCollElemTag';
	lCtx dbms_xmlquery$tContext;
begin
	lCtx := dbms_xmlquery$context2obj(ctxHdl => ctxHdl);
	lCtx.ctxAttributes := dbms_xmlquery$setCtxAttrValue(ctxAttributes => lCtx.ctxAttributes,
	                                                    forceParamList => array[case when flag is null then CtxUseTypeForCollElemTag else null end],
                                                        ctxUseTypeForCollElemTag => flag
                                                       );

    perform set_extpack_variable(variable_name => dbms_xmlquery$ctxIdx(ctxHdl), variable_value => dbms_xmlquery$context2text(ctxValue => lCtx));
end; ]]></complex-attribute>
                        <category _I_D="eff13568-5355-4592-a804-7d83d6c8c095" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3fddfd7b-1f05-466d-b03b-596cf1ad38e0" name="dbtimezone" subcategories-loading="none" object-loading="extended" context="dbtimezone" is-trigger-function="0" unique-function-name="dbtimezone" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="varchar" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365293" volatility="STABLE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="dbtimezone()" comment="Returns the value of the database time zone.">
                        <complex-attribute name="sql"><![CDATA[
begin  
	
  return aws_oracle_ext.get_extpack_variable(variable_name => 'TIME_ZONE', missing_ok => false); 
 
  exception 
     when internal_error then 
	   return coalesce(CURRENT_SETTING('TIMEZONE', TRUE), 'UTC');   
end;       
]]></complex-attribute>
                        <category _I_D="32f367d6-6762-44e5-8c07-d0e74618b3ff" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ad4f6ea2-aebf-4068-9777-7992579c23b3" name="delete" subcategories-loading="none" object-loading="extended" context="delete(parray anyarray)" is-trigger-function="0" unique-function-name="delete(parray anyarray)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyarray" is-returning-set="f" ret-datatype="anyarray" function-arguments="parray anyarray" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365129" volatility="VOLATILE" is-window="f" function-identity-arguments="parray anyarray" overload-function-count="3" proc-language="plpgsql" function-signature="delete(parray anyarray)" unique-suffix="(parray anyarray)" routine-number="365129">
                        <complex-attribute name="sql"><![CDATA[  
BEGIN
/* DELETE removes all elements from a collection */
    RETURN '{}';
END;
]]></complex-attribute>
                        <category _I_D="c31479e1-e9ed-4061-84a6-897869fec4f6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8142181b-b226-4894-ac49-e0f4297e1dc4" name="delete" subcategories-loading="none" object-loading="extended" context="delete(parray anyarray, m integer, n integer)" is-trigger-function="0" unique-function-name="delete(parray anyarray, m integer, n integer)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyarray,integer,integer" is-returning-set="f" ret-datatype="anyarray" function-arguments="parray anyarray, m integer, n integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365127" volatility="VOLATILE" is-window="f" function-identity-arguments="parray anyarray, m integer, n integer" overload-function-count="3" proc-language="plpgsql" function-signature="delete(parray anyarray, m integer, n integer)" unique-suffix="(parray anyarray, m integer, n integer)" routine-number="365127">
                        <complex-attribute name="sql"><![CDATA[  
DECLARE
  ind int;
  vArray pArray%type;
BEGIN
/* DELETE(m,n) removes all elements in the range m..n from collection */

  if (m>n) or (n is null) or (m is null) THEN
    vArray := pArray;
  else
    ind := array_length(pArray, 1);
    vArray := pArray[1:m-1];
    for i in 1..n-m+1 loop
      vArray := array_append(vArray, NULL);
    end loop;
    vArray := vArray||pArray[n+1:ind];
  end if;
    
  RETURN vArray;
END;
]]></complex-attribute>
                        <category _I_D="c3bf8f1a-8769-435d-8449-6ca4990dc8c4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1012ee36-06fa-4fb0-a584-d77a992055f1" name="delete" subcategories-loading="none" object-loading="extended" context="delete(parray anyarray, n integer)" is-trigger-function="0" unique-function-name="delete(parray anyarray, n integer)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyarray,integer" is-returning-set="f" ret-datatype="anyarray" function-arguments="parray anyarray, n integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365128" volatility="VOLATILE" is-window="f" function-identity-arguments="parray anyarray, n integer" overload-function-count="3" proc-language="plpgsql" function-signature="delete(parray anyarray, n integer)" unique-suffix="(parray anyarray, n integer)" routine-number="365128">
                        <complex-attribute name="sql"><![CDATA[  
DECLARE
  ind int;
BEGIN
/* DELETE(n) removes the nth element from collection */
    ind := array_length(pArray, 1);
    RETURN CASE WHEN (n>ind) OR (n<1) OR (n is NULL) THEN pArray
                ELSE array_append(pArray[1:n-1], NULL)||pArray[n+1:ind]
           END;
END;
]]></complex-attribute>
                        <category _I_D="9474c7ce-7fc7-446c-a832-63bf56cff912" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9eddf305-38cb-4aea-bbc5-54d1df241256" name="dump" subcategories-loading="none" object-loading="extended" context="dump" is-trigger-function="0" unique-function-name="dump" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,integer,integer,integer" is-returning-set="f" ret-datatype="text" function-arguments="p_expr anyelement, p_fmt integer DEFAULT NULL::integer, p_pos integer DEFAULT NULL::integer, p_len integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365294" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_expr anyelement, p_fmt integer, p_pos integer, p_len integer" overload-function-count="1" proc-language="plpgsql" function-signature="dump(p_expr anyelement, p_fmt integer, p_pos integer, p_len integer)" comment="Returns a text value that includes the datatype code,the length in bytes, and the internal representation of the expression.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  result text;
  proname name;
  expr_hex bytea;
BEGIN
IF p_expr IS NULL THEN RETURN 'NULL'; END IF;

EXECUTE 'SELECT p.proname
           FROM pg_catalog.pg_proc p
      LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
          WHERE pg_catalog.pg_function_is_visible(p.oid)
            AND n.nspname = ''pg_catalog''
            AND p.proname LIKE ''%send''
            AND pg_catalog.pg_get_function_arguments(p.oid) = $1'
  INTO proname
 USING pg_typeof(p_expr)::text;

EXECUTE 'SELECT ' || proname || '($1)'
   INTO expr_hex
  USING p_expr;

SELECT ARRAY_TO_STRING(ARRAY_AGG(CONCAT(CASE
                                          WHEN p_fmt IN (8,1008) --OCT
                                          THEN aws_oracle_ext.to_oct(i)::text
                                          WHEN p_fmt IN (16,1016) --HEX
                                          THEN CASE
                                                 WHEN SUBSTRING(v,1,1) = '0' THEN SUBSTRING(v,2)
                                                 ELSE v
                                               END
                                          WHEN p_fmt IN (10,1010) --DEC
                                          THEN i::text
                                          WHEN p_fmt IN (17,1017) OR p_fmt < 0 --ASCII/HEX
                                          THEN CASE
                                                 WHEN i BETWEEN 1 AND 31 THEN '^' || CHR(i+64)
                                                 WHEN i BETWEEN 32 AND 126 THEN CHR(i)
                                                 ELSE v
                                               END
                                          ELSE i::text --DEC
                                        END
                                       ,',')
                                 )
                      ,'')
  FROM (SELECT v, i, row_number() OVER (ORDER BY rn DESC) AS rn
          FROM (SELECT v, aws_oracle_ext.hex_to_int(v) AS i, row_number() OVER () AS rn
                  FROM REGEXP_SPLIT_TO_TABLE(LTRIM(expr_hex::text, '\x')
                                            ,E'(?=(..)+$)') AS v) t
       ) t
 WHERE rn BETWEEN COALESCE(p_pos,1) AND COALESCE(p_pos,1) + COALESCE(p_len,rn) - 1
  INTO result;

SELECT 'Typ=' || pg_typeof(p_expr)::oid ||
       ' Len=' || pg_column_size(p_expr) ||
       CASE
         WHEN p_fmt > 1000
         THEN ' CharacterSet=' || (SELECT character_set_name FROM information_schema.character_sets)
         ELSE ''
       END
       || ': ' || RTRIM(result,',')
  INTO result;

RETURN result;
END
]]></complex-attribute>
                        <category _I_D="cf5ce5a3-b8b6-4ddd-8c62-f43e4301036e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d3036059-44ed-492a-ab62-35285d23e12c" name="extend" subcategories-loading="none" object-loading="extended" context="extend" is-trigger-function="0" unique-function-name="extend" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyarray,integer,integer" is-returning-set="f" ret-datatype="anyarray" function-arguments="parray anyarray, n integer DEFAULT 1, ii integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365130" volatility="VOLATILE" is-window="f" function-identity-arguments="parray anyarray, n integer, ii integer" overload-function-count="1" proc-language="plpgsql" function-signature="extend(parray anyarray, n integer, ii integer)">
                        <complex-attribute name="sql"><![CDATA[   
BEGIN
    FOR i IN 1..n LOOP
      pArray:=array_append(pArray, pArray[ii]);
    END LOOP;
    RETURN pArray;
END;
]]></complex-attribute>
                        <category _I_D="ccda0977-72dc-444c-9311-ee488531a543" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="38934303-0add-413d-901f-9615a2b3bf77" name="first_weekday" subcategories-loading="none" object-loading="extended" context="first_weekday" is-trigger-function="0" unique-function-name="first_weekday" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="int4" function-arguments="territory text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365283" volatility="IMMUTABLE" is-window="f" function-identity-arguments="territory text" overload-function-count="1" proc-language="sql" function-signature="first_weekday(territory text)" comment="Get the first day of week">
                        <complex-attribute name="sql"><![CDATA[ 
SELECT
CASE
WHEN territory IN ('AMERICA', 'BAHRAIN', 'BRAZIL', 'CANADA', 'CHINA', 'HONG KONG',
                   'INDIA', 'ISRAEL', 'JAPAN', 'KOREA', 'KUWAIT', 'MALAYSIA',
                   'PORTUGAL', 'SINGAPORE', 'SOUTH AFRICA', 'TAIWAN', 'THAILAND',
                   'UNITED ARAB EMIRATES', 'VIETNAM')
THEN 1 --Sunday is the first day of week
WHEN territory IN ('DJIBOUTI', 'EGYPT', 'IRAQ', 'JORDAN', 'LEBANON', 'LIBYA', 'MAURITANIA', 'MOROCCO', 'OMAN',
                   'QATAR', 'SAUDI ARABIA', 'SOMALIA', 'SUDAN', 'SYRIA', 'TUNISIA', 'YEMEN')
THEN 2 --Saturday is the first day of week
WHEN territory = 'BANGLADESH'
THEN 3 --Friday is the first day of week
ELSE 0 --Monday is the first day of week
END;
]]></complex-attribute>
                        <category _I_D="9cb47060-0164-4d0d-b767-712d3bf8fafd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="442f8613-fa28-490f-b23b-f5fe75efbae2" name="format_identifier_case" subcategories-loading="none" object-loading="extended" context="format_identifier_case" is-trigger-function="0" unique-function-name="format_identifier_case" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365788" volatility="IMMUTABLE" is-window="f" function-identity-arguments="text" overload-function-count="1" proc-language="sql" function-signature="format_identifier_case(text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT
        CASE
            WHEN $1 LIKE '"%"' THEN
                SUBSTRING($1, 2, LENGTH($1) - 2)
            ELSE
                UPPER($1)
            END;
]]></complex-attribute>
                        <category _I_D="e669c788-e2f8-4cab-a247-b15fc3241ffb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5301feab-fe24-41db-8c4c-c153e50d0b44" name="from_tz" subcategories-loading="none" object-loading="extended" context="from_tz" is-trigger-function="0" unique-function-name="from_tz" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone,character varying" is-returning-set="f" ret-datatype="timestamptz" function-arguments="timestamp_value timestamp without time zone, time_zone_value character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365131" volatility="IMMUTABLE" is-window="f" function-identity-arguments="timestamp_value timestamp without time zone, time_zone_value character varying" overload-function-count="1" proc-language="sql" function-signature="from_tz(timestamp_value timestamp without time zone, time_zone_value character varying)">
                        <complex-attribute name="sql"><![CDATA[


    SELECT
        CASE

            WHEN LENGTH($2) = 0 THEN

                NULL::TIMESTAMP WITH TIME ZONE

            ELSE

                MAKE_TIMESTAMPTZ
                (
                    EXTRACT(YEAR FROM $1)::INTEGER,
                    EXTRACT(MONTH FROM $1)::INTEGER,
                    EXTRACT(DAY FROM $1)::INTEGER,
                    EXTRACT(HOUR FROM $1)::INTEGER,
                    EXTRACT(MIN FROM $1)::INTEGER,
                    EXTRACT(SEC FROM $1),
                    CONCAT
                    (
                        CASE WHEN $2 !~* '[\-\+]' THEN '+' ELSE '' END,
                        REPLACE($2, ' ', '')
                    )
                )

        END;


]]></complex-attribute>
                        <category _I_D="5c5fe63d-5e73-4404-a221-fb75a9f3e638" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5c186444-8f6f-4508-b8fd-e6464b9f6a82" name="get_application_context" subcategories-loading="none" object-loading="extended" context="get_application_context" is-trigger-function="0" unique-function-name="get_application_context" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="a_context_namespace character varying, a_context_attribute character varying, a_username character varying DEFAULT NULL::character varying, a_client_id character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365793" volatility="VOLATILE" is-window="f" function-identity-arguments="a_context_namespace character varying, a_context_attribute character varying, a_username character varying, a_client_id character varying" overload-function-count="1" proc-language="plpgsql" function-signature="get_application_context(a_context_namespace character varying, a_context_attribute character varying, a_username character varying, a_client_id character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  l_context_type text;
  l_key text;
  l_interval text;
  l_signature text;
  l_value character varying;
 
begin
  perform aws_oracle_ext.init_context_struct();
  l_key := aws_oracle_ext.get_context_param('key');
  l_context_type := aws_oracle_ext.get_context_type(a_context_namespace);

 
  case upper(l_context_type) 
  	when 'ACCESSED LOCALLY' then 
  		begin
			select cl.attribute_value, cl.signature 
			  into strict l_value, l_signature
			from context_local cl
			where cl.context_namespace = $1
			  and cl.attribute_name = $2
		  	  and (cl.user_name = $3 or cl.user_name is null)
		  	  and (cl.cliend_id = $4 or coalesce(cl.cliend_id, '') = '')
		    limit 1;	  		
	  	end;
  	when 'ACCESSED GLOBALLY' then	  
  		begin		
			delete from aws_oracle_context.context_global 
			where backend_start <= now()::timestamp - (coalesce(aws_oracle_ext.get_context_param('auto_clean_interval'), '1 day'))::interval;
		 	
			select w.attribute_value, w.signature 
			into strict l_value, l_signature 
			from (
				select 
					cg.attribute_value, 
					cg.signature,
					row_number() over (order by cg.context_namespace, cg.attribute_name, cg.cliend_id) as row
				from aws_oracle_context.context_global cg 
				where cg.context_namespace = $1
				  and cg.attribute_name = $2
				  and (cg.user_name = $3 or cg.user_name is null)
				  and (cg.cliend_id = $4 or coalesce(cg.cliend_id, '') = '')
				) w  
		    where row = 1;
	  	end;  
  	else 
		-- INITIALIZED EXTERNALLY, INITIALIZED GLOBALLY  	
  		raise exception 'unsupported context type: %', l_context_type;
  end case;
 
  if l_signature <> crypt(l_value || ':' || l_key, l_signature) then  
	raise exception  'The signature for %.% is broken', $1, $2;
  end if;	  	
  
  return l_value;
  exception 
 	when no_data_found then return null; 
end;
]]></complex-attribute>
                        <category _I_D="fb83338d-0f34-461f-a284-126ed4cd92b2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ce788f20-66dd-4f5f-8fa7-0c5c40c79d0c" name="get_application_name" subcategories-loading="none" object-loading="extended" context="get_application_name" is-trigger-function="0" unique-function-name="get_application_name" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365933" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="get_application_name()">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_res jsonb;
begin
  execute 'show application_name' into strict l_res;
  return l_res;
 
  exception when others then 
	return jsonb_build_object('action'::text, 'init'::text);
end;
]]></complex-attribute>
                        <category _I_D="3798f931-aa55-4022-9f66-66b5d87002cc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="475715ce-4a5d-46e5-9288-1148c86864d5" name="get_charset_name" subcategories-loading="none" object-loading="extended" context="get_charset_name" is-trigger-function="0" unique-function-name="get_charset_name" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="ora_charset_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365132" volatility="STABLE" is-window="f" function-identity-arguments="ora_charset_name character varying" overload-function-count="1" proc-language="sql" function-signature="get_charset_name(ora_charset_name character varying)" comment="&amp;#x000a;  Returns PostgreSQL character set name&amp;#x000a;&amp;#x000a;  Parameters:&amp;#x000a;    ora_charset_name -- Oracle character set name&amp;#x000a;&amp;#x000a;  Returns:&amp;#x000a;    PostgreSQL character set name&amp;#x000a;">
                        <complex-attribute name="sql"><![CDATA[

    SELECT COALESCE
    (
        (
            SELECT m.postgresql_charset
            FROM aws_oracle_ext.charset_mapping m
            WHERE STRPOS(LOWER(ora_charset_name), LOWER(m.oracle_charset)) > 0
            LIMIT 1
        ),
        'UNICODE'
    );

]]></complex-attribute>
                        <category _I_D="4680b887-6c47-435e-9e0d-0737814fbebe" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="73ee28c3-9ebb-45d4-b72f-d3330e2e3496" name="get_context_param" subcategories-loading="none" object-loading="extended" context="get_context_param" is-trigger-function="0" unique-function-name="get_context_param" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="a_param_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365792" volatility="VOLATILE" is-window="f" function-identity-arguments="a_param_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="get_context_param(a_param_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
begin
	/*Params:
	 * 'key' - secret key for the crypt calls
	 * 'auto_clean_interval' - an interval for context_global auto cleaning*/	
  return (select param_value 
 			from aws_oracle_context.params 
 			where param_name = a_param_name);  
end;	
]]></complex-attribute>
                        <category _I_D="6f2960cc-b17d-412d-a0c1-277212b598c6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="70934f9e-6792-469c-b72e-9e8d4431f627" name="get_context_type" subcategories-loading="none" object-loading="extended" context="get_context_type" is-trigger-function="0" unique-function-name="get_context_type" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="a_context_namespace character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365791" volatility="IMMUTABLE" is-window="f" function-identity-arguments="a_context_namespace character varying" overload-function-count="1" proc-language="sql" function-signature="get_context_type(a_context_namespace character varying)">
                        <complex-attribute name="sql"><![CDATA[
  select upper(context_type) 
 			from aws_oracle_context.context 
 			where context_namespace = $1;  
]]></complex-attribute>
                        <category _I_D="934b2284-1f90-4a13-9465-f6fbded2a682" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2dc5490e-bb8f-411f-8d70-8118914d9708" name="get_extpack_variable" subcategories-loading="none" object-loading="extended" context="get_extpack_variable" is-trigger-function="0" unique-function-name="get_extpack_variable" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean" is-returning-set="f" ret-datatype="text" function-arguments="variable_name text, missing_ok boolean DEFAULT true" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="364702" volatility="VOLATILE" is-window="f" function-identity-arguments="variable_name text, missing_ok boolean" overload-function-count="1" proc-language="plpgsql" function-signature="get_extpack_variable(variable_name text, missing_ok boolean)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    RETURN aws_oracle_ext.get_package_variable
    (
        variable_name => get_extpack_variable.variable_name
    );
   
EXCEPTION 
    WHEN OTHERS THEN

        IF missing_ok THEN
        
            RETURN NULL;

        ELSE

            RAISE;

        END IF;

END;
]]></complex-attribute>
                        <category _I_D="c348d806-8daf-4eb5-a128-598f6e297e5c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7027686a-066d-438d-a8ca-6b732848a455" name="get_id_by_name" subcategories-loading="none" object-loading="extended" context="get_id_by_name" is-trigger-function="0" unique-function-name="get_id_by_name" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="int8" function-arguments="object_name text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="364966" volatility="VOLATILE" is-window="f" function-identity-arguments="object_name text" overload-function-count="1" proc-language="plpgsql" function-signature="get_id_by_name(object_name text)">
                        <complex-attribute name="sql"><![CDATA[
declare res bigint;
begin
  execute concat('select x''', substring(encode(digest($1, 'sha1'), 'hex'), 1, 16), '''::bigint') into res;
  return res;  
end;
]]></complex-attribute>
                        <category _I_D="9f995641-5b62-4b9c-aae9-f68b579686f8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5e3ee6c8-77f3-4368-8dbf-f8b9ab57f5b5" name="get_jobs" subcategories-loading="none" object-loading="extended" context="get_jobs" is-trigger-function="0" unique-function-name="get_jobs" is-aggregate="f" language-name="plpgsql" arguments-datatypes="timestamp without time zone,integer,bigint,character varying,character varying" is-returning-set="t" ret-datatype="table" function-arguments="p_next_date_before timestamp without time zone DEFAULT CURRENT_TIMESTAMP, p_limit integer DEFAULT 1" schema-id="364663" function-type="RET_DATASET" count-arguments="2" function-id="365133" volatility="VOLATILE" is-window="f" function-identity-arguments="p_next_date_before timestamp without time zone, p_limit integer" overload-function-count="1" proc-language="plpgsql" function-signature="get_jobs(p_next_date_before timestamp without time zone, p_limit integer)">
                        <complex-attribute name="sql"><![CDATA[
  declare
    l_this_date timestamp with time zone := clock_timestamp();
  begin
    return query 
      update aws_oracle_ext.jobs j
         set this_date = l_this_date
        from (
          select jj.job
            from aws_oracle_ext.jobs jj
           where jj.this_date is null
             and broken <> 'Y'
             and jj.next_date <= p_next_date_before
             and pg_try_advisory_xact_lock( jj.job )
           limit p_limit
             for update
        ) jj
       where j.job = jj.job
      returning j.job, j.what, j.search_path;
  end;
]]></complex-attribute>
                        <category _I_D="a0c6c4cb-6b55-4107-a7b5-28627ffbb544" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="54a2d135-286c-4090-b2b5-2693432c611a" name="get_ora_sqlcode" subcategories-loading="none" object-loading="extended" context="get_ora_sqlcode" is-trigger-function="0" unique-function-name="get_ora_sqlcode" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="int4" function-arguments="ora_exception character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365134" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ora_exception character varying" overload-function-count="1" proc-language="plpgsql" function-signature="get_ora_sqlcode(ora_exception character varying)" comment="&amp;#x000a;  Returns an appropriate Oracle error code for Oracle built-in exception.&amp;#x000a;&amp;#x000a;  Parameters:&amp;#x000a;    ora_exception -- name of Oracle built-in exception&amp;#x000a;">
                        <complex-attribute name="sql"><![CDATA[
  declare
    l_ora_code aws_oracle_ext.mapped_error_codes.ora_code%type;
  begin
    select ora_code into strict l_ora_code
      from aws_oracle_ext.mapped_error_codes c
     where c.ora_exception = upper( get_ora_sqlcode.ora_exception )
       and ora_code is not null;

    return l_ora_code;
  exception
    when no_data_found then
      raise exception no_data_found 
      using message = format( 'No error code is found for the Oracle built-in exception (%s)', ora_exception )
          , detail =  concat_ws
              ( 'There is no mapping found for the Oracle error code in the current version of Extension Pack: ', ora_exception )
          , hint = 'Check the documentation on error code mappings, please.';
  end;
]]></complex-attribute>
                        <category _I_D="ecfc0fd2-e9ba-4604-84f7-57973ff105b1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="092b5370-5e22-44f2-93bd-32df445a3a11" name="get_ora_sqlcode_by_pg" subcategories-loading="none" object-loading="extended" context="get_ora_sqlcode_by_pg" is-trigger-function="0" unique-function-name="get_ora_sqlcode_by_pg" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="int4" function-arguments="pg_code character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365945" volatility="VOLATILE" is-window="f" function-identity-arguments="pg_code character varying" overload-function-count="1" proc-language="plpgsql" function-signature="get_ora_sqlcode_by_pg(pg_code character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare
    l_ora_code aws_oracle_ext.mapped_error_codes.ora_code%type;
  begin
    select ora_code into strict l_ora_code
      from aws_oracle_ext.mapped_error_codes c
     where c.pg_code = upper( get_ora_sqlcode_by_pg.pg_code )
       and ora_code is not null;

    return l_ora_code;
  exception
    when no_data_found then
      raise exception no_data_found 
      using message = format( 'No error code mapping is found for the PostgreSQL error code (%s)', pg_code )
          , detail =  concat_ws
              ('', 'There is no mapping found for the PostgreSQL error code in the current version of Extension Pack: ', pg_code )
          , hint = 'Check the documentation on error code mappings, please.'    ;
          
    when too_many_rows then
      raise exception too_many_rows 
      using message = format( 'More than one error code mapping is found for the PostgreSQL error code (%s)', pg_code )
          , detail =  concat_ws
              ('', 'More than one row found for the PostgreSQL error code in the current version of Extension Pack: ', pg_code )
          , hint = 'Check the documentation on error code mappings, please.'    ;
  end;
]]></complex-attribute>
                        <category _I_D="92c2d107-3fa7-4173-b012-47d7e2a9fde5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bd2a3447-8146-48cd-9364-7a3a613ba677" name="get_package_variable" subcategories-loading="none" object-loading="extended" context="get_package_variable" is-trigger-function="0" unique-function-name="get_package_variable" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="schema_name text DEFAULT 'AWS_ORACLE_EXT'::text, package_name text DEFAULT 'AWS_ORACLE_ENV'::text, variable_name text DEFAULT ''::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="364700" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name text, package_name text, variable_name text" overload-function-count="1" proc-language="plpgsql" function-signature="get_package_variable(schema_name text, package_name text, variable_name text)" comment="Returns the value of the migrated global package variable / constant stored as a session setting.&amp;#x000a;A reference to the schema.package.var global package variable is migrated as following:&amp;#x000a;  aws_oracle_ext.get_package_variable( 'schema', 'package', 'var' )::datatype&amp;#x000a;&amp;#x000a;Parameters:&amp;#x000a;  schema_name -- migrated schema&amp;#x000a;  package_name -- migrated package&amp;#x000a;  variable_name -- variable which value to return">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vschema_name TEXT := schema_name;
    vpackage_name TEXT := package_name;
BEGIN
    
    IF COALESCE(schema_name, 'AWS_ORACLE_EXT') <> 'AWS_ORACLE_EXT' AND

        COALESCE(package_name, 'AWS_ORACLE_ENV') <> 'AWS_ORACLE_ENV' THEN

        vschema_name := aws_oracle_ext.check_identifier_case(schema_name);
        vpackage_name := aws_oracle_ext.check_identifier_case(package_name);
    
        IF aws_oracle_ext.check_identifier_case(variable_name) <> 'init$$' THEN
        
            EXECUTE CONCAT
            (
                'SELECT ',
                schema_name,
                '.',
                package_name,
                '$Init()'
            );
    
        END IF;

    END IF;
    
    RETURN NULLIF
    (
        aws_oracle_ext.get_package_variable_v8
        (
            sn => vschema_name,
            pn => vpackage_name,
            vn => aws_oracle_ext.check_identifier_case(variable_name)
        ),
        ''
    );

END;
]]></complex-attribute>
                        <category _I_D="20ce3d1a-9c18-4348-a87f-4baee7de0a73" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="53deca45-2b72-4800-850e-8ff93e0ab1ba" name="get_package_variable_object" subcategories-loading="none" object-loading="extended" context="get_package_variable_object" is-trigger-function="0" unique-function-name="get_package_variable_object" is-aggregate="f" language-name="plpgsql" arguments-datatypes="name,name,name" is-returning-set="f" ret-datatype="text" function-arguments="schema_name name, package_name name, object_name name" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365135" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name name, package_name name, object_name name" overload-function-count="1" proc-language="plpgsql" function-signature="get_package_variable_object(schema_name name, package_name name, object_name name)">
                        <complex-attribute name="sql"><![CDATA[
  begin
    execute 'select ' || schema_name || '.' || package_name || '$Init()';

    return aws_oracle_ext.get_package_variable
        ( schema_name := schema_name
        , package_name := package_name
        , variable_name := object_name || '$OBJ' );
  end;
]]></complex-attribute>
                        <category _I_D="e0929ff3-d0aa-46df-a56e-475372b0507a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6f21353a-a5e0-4b99-8bce-5831e0594e1d" name="get_package_variable_object_field" subcategories-loading="none" object-loading="extended" context="get_package_variable_object_field" is-trigger-function="0" unique-function-name="get_package_variable_object_field" is-aggregate="f" language-name="plpgsql" arguments-datatypes="name,name,name,text" is-returning-set="f" ret-datatype="text" function-arguments="schema_name name, package_name name, variable_name name, field_name text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365136" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name name, package_name name, variable_name name, field_name text" overload-function-count="1" proc-language="plpgsql" function-signature="get_package_variable_object_field(schema_name name, package_name name, variable_name name, field_name text)">
                        <complex-attribute name="sql"><![CDATA[
  begin
    execute 'select ' || schema_name || '.' || package_name || '$Init()';

    return aws_oracle_ext.get_package_variable
      ( schema_name, package_name, variable_name || '.' || field_name );
  end;
]]></complex-attribute>
                        <category _I_D="2e53bf2e-bc82-406a-90c4-0a7d46cae372" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cf896e9d-a837-4140-a32e-24863fc3d908" name="get_package_variable_v8" subcategories-loading="none" object-loading="extended" context="get_package_variable_v8" is-trigger-function="0" unique-function-name="get_package_variable_v8" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="sn text, pn text, vn text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="366060" volatility="VOLATILE" is-window="f" function-identity-arguments="sn text, pn text, vn text" overload-function-count="1" proc-language="plv8" function-signature="get_package_variable_v8(sn text, pn text, vn text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
if (!aws_oracle_ext.hasOwnProperty(sn)) plv8.elog(ERROR, `unknown variable ${sn}.${pn}.${vn}.`);
if (!aws_oracle_ext[sn].hasOwnProperty(pn)) plv8.elog(ERROR, `unknown variable ${sn}.${pn}.${vn}.`);
if (!aws_oracle_ext[sn][pn].hasOwnProperty(vn)) plv8.elog(ERROR, `unknown variable ${sn}.${pn}.${vn}.`);

if (aws_oracle_ext[sn][pn][vn] instanceof Tree) plv8.elog(ERROR, `variable ${sn}.${pn}.${vn} has type Collection`);

return aws_oracle_ext[sn][pn][vn];

]]></complex-attribute>
                        <category _I_D="c662501b-5c1c-4313-834c-5880f319b8af" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f6de1755-2af0-4b78-8be1-8cfddae512b9" name="get_pg_sqlstate" subcategories-loading="none" object-loading="extended" context="get_pg_sqlstate" is-trigger-function="0" unique-function-name="get_pg_sqlstate" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="varchar" function-arguments="ora_code integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365137" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ora_code integer" overload-function-count="1" proc-language="plpgsql" function-signature="get_pg_sqlstate(ora_code integer)" comment="&amp;#x000a;  Returns a mapped PostgreSQL error code for Oracle error code, if a mapping exists.&amp;#x000a;&amp;#x000a;  Parameters:&amp;#x000a;    ora_code -- Oracle integer error code like those SQLCODE returns&amp;#x000a;">
                        <complex-attribute name="sql"><![CDATA[
  declare
    l_pg_code aws_oracle_ext.mapped_error_codes.pg_code%type;
  begin
    select pg_code into strict l_pg_code
      from aws_oracle_ext.mapped_error_codes c
     where c.ora_code = get_pg_sqlstate.ora_code
       and pg_code is not null;

    return l_pg_code;
  exception
    when no_data_found then
      raise exception no_data_found 
      using message = format( 'No error code mapping is found for the Oracle error code (%s)', ora_code )
          , detail =  concat_ws
              ( 'There is no mapping found for the Oracle error code in the current version of Extension Pack: ', ora_code )
          , hint = 'Check the documentation on error code mappings, please.'    ;
  end;
]]></complex-attribute>
                        <category _I_D="8cf4c33c-bf1a-42cf-bc53-2d5ef05be7d2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f13d001f-80ed-4f28-b7e3-4cada8bce1f2" name="get_sequence_value" subcategories-loading="none" object-loading="extended" context="get_sequence_value" is-trigger-function="0" unique-function-name="get_sequence_value" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="int8" function-arguments="aschemaname character varying, asequencename character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="364828" volatility="VOLATILE" is-window="f" function-identity-arguments="aschemaname character varying, asequencename character varying" overload-function-count="1" proc-language="plpgsql" function-signature="get_sequence_value(aschemaname character varying, asequencename character varying)" comment="Returns the sequence current value">
                        <complex-attribute name="sql"><![CDATA[
declare
  lVal bigint;
begin
  EXECUTE 'SELECT last_value from '||quote_ident(aSchemaName)||'.'||quote_ident(aSequenceName) into lVal;
  return lVal;    
  exception when others then
    return null;
end;
]]></complex-attribute>
                        <category _I_D="c4ced590-effe-4cfc-b75f-800390a8e258" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="491a07f6-dfad-420c-94ae-a4f4c797a333" name="get_service_setting" subcategories-loading="none" object-loading="extended" context="get_service_setting" is-trigger-function="0" unique-function-name="get_service_setting" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="p_service character varying, p_setting character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365138" volatility="VOLATILE" is-window="f" function-identity-arguments="p_service character varying, p_setting character varying" overload-function-count="1" proc-language="sql" function-signature="get_service_setting(p_service character varying, p_setting character varying)">
                        <complex-attribute name="sql"><![CDATA[
  select value from aws_oracle_ext.service_settings where service = p_service and setting = p_setting;
]]></complex-attribute>
                        <category _I_D="d0c4fb40-2504-4c84-ab21-938f329ea3e2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1c8393fd-10aa-4cc2-9a30-22302bb2d9e3" name="get_version" subcategories-loading="none" object-loading="extended" context="get_version" is-trigger-function="0" unique-function-name="get_version" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pcomponentname character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365139" volatility="VOLATILE" is-window="f" function-identity-arguments="pcomponentname character varying" overload-function-count="1" proc-language="sql" function-signature="get_version(pcomponentname character varying)">
                        <complex-attribute name="sql"><![CDATA[
	SELECT componentversion 
	  FROM aws_oracle_ext.versions
	 WHERE extpackcomponentname = pComponentName;
]]></complex-attribute>
                        <category _I_D="475e5f52-8736-409a-adf1-6cfd8b2f4d4c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3dd25229-e511-4f74-a16f-440a3cd8ed2f" name="getglobalvariable" subcategories-loading="none" object-loading="extended" context="getglobalvariable" is-trigger-function="0" unique-function-name="getglobalvariable" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="proutinename text, pvariable text, ptp anyelement" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="366069" volatility="VOLATILE" is-window="f" function-identity-arguments="proutinename text, pvariable text, ptp anyelement" overload-function-count="1" proc-language="plv8" function-signature="getglobalvariable(proutinename text, pvariable text, ptp anyelement)">
                        <complex-attribute name="sql"><![CDATA[
'use strict';
  if (typeof(require) !== 'function') {
    const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
    initColl();
  }
  const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
  let parts = parser(proutinename);
  if (parts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
  const sn = parts[0].text;
  const pn = parts[2].text;
  plv8.execute(`SELECT ${sn}.${pn}$Init()`);
  
  parts = parser(pvariable);
  const getField = require('PackageTools').getRecordField;
  const result = getField(aws_oracle_ext[sn][pn], parts);
  return result;

]]></complex-attribute>
                        <category _I_D="2a785553-812a-4700-9179-482e81f027f8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ba6e6f6a-ecd7-4723-a57f-77cb16247287" name="getpathparts" subcategories-loading="none" object-loading="extended" context="getpathparts" is-trigger-function="0" unique-function-name="getpathparts" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="_text" function-arguments="ppath text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365956" volatility="VOLATILE" is-window="f" function-identity-arguments="ppath text" overload-function-count="1" proc-language="plpgsql" function-signature="getpathparts(ppath text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    
    IF ppath !~ '[^\[\]]+\[.+\]' THEN

        RETURN NULL;

    END IF;

    RETURN REGEXP_SPLIT_TO_ARRAY
    (
        REPLACE
        (
            REPLACE
            (
                ppath,
                '[',
                '.'
            ),
            ']',
            ''
        ),
        '\.'
    );
END;
]]></complex-attribute>
                        <category _I_D="3fbee2a5-ae5a-42a9-9a1b-cb27f42ebf57" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cdf83b1b-71fd-4487-b124-1db198c73869" name="greatest" subcategories-loading="none" object-loading="extended" context="greatest" is-trigger-function="0" unique-function-name="greatest" is-aggregate="f" language-name="sql" arguments-datatypes="anyarray" is-returning-set="f" ret-datatype="anyelement" function-arguments="VARIADIC anyarray" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365946" volatility="VOLATILE" is-window="f" function-identity-arguments="VARIADIC anyarray" overload-function-count="1" proc-language="sql" function-signature="greatest(VARIADIC anyarray)">
                        <complex-attribute name="sql"><![CDATA[
  SELECT unnest($1)
  ORDER BY 1 DESC NULLS FIRST
  LIMIT 1;
]]></complex-attribute>
                        <category _I_D="8018e0ef-7ee2-464a-88aa-3cbca839cd51" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ade4d71f-fb1f-4a3b-8c2e-0924fd320f16" name="has_column_privilege" subcategories-loading="none" object-loading="extended" context="has_column_privilege" is-trigger-function="0" unique-function-name="has_column_privilege" is-aggregate="f" language-name="plpgsql" arguments-datatypes="name,name,name" is-returning-set="f" ret-datatype="bool" function-arguments="schema_name name, table_name name, column_name name" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="364829" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name name, table_name name, column_name name" overload-function-count="1" proc-language="plpgsql" function-signature="has_column_privilege(schema_name name, table_name name, column_name name)">
                        <complex-attribute name="sql"><![CDATA[
begin
    return has_column_privilege(quote_ident($1 || '.'||$2), $3, 'SELECT,INSERT,UPDATE,REFERENCES');
    exception 
   		when others then return null;
end
]]></complex-attribute>
                        <category _I_D="5ea64941-bd40-4644-b33e-cc11c68a625b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="efe4726e-7ced-4ba2-b2db-aa8ee9414fb3" name="hex_to_int" subcategories-loading="none" object-loading="extended" context="hex_to_int" is-trigger-function="0" unique-function-name="hex_to_int" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="int4" function-arguments="hexval text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365292" volatility="IMMUTABLE" is-window="f" function-identity-arguments="hexval text" overload-function-count="1" proc-language="plpgsql" function-signature="hex_to_int(hexval text)" comment="Convert hex string to integer.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  result  int;
BEGIN
  EXECUTE 'SELECT x' || quote_literal(hexval) || '::int' INTO result;
  --EXECUTE 'SELECT x''' || hexval || '''::int' INTO result;
  RETURN result;
END; 
]]></complex-attribute>
                        <category _I_D="1f22d105-7d54-4044-9ad0-e767811e06bf" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9cbeb995-9774-4014-819a-85018b8bfadb" name="htf$address" subcategories-loading="none" object-loading="extended" context="htf$address" is-trigger-function="0" unique-function-name="htf$address" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cvalue text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365308" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cvalue text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$address(cvalue text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<address',
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', 'clear="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(cnowrap,' nowrap="nowrap"'),
                     aws_oracle_ext.htf$ifnotnull(cattributes,concat_ws('', ' ', cattributes)),
                     '>',
                     cvalue,
                     '</address>');

]]></complex-attribute>
                        <category _I_D="f7ec1a72-5fd8-4622-823d-9e6f60b8b801" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8fcd1f9e-e259-49d4-81ab-11d11516c73d" name="htf$anchor" subcategories-loading="none" object-loading="extended" context="htf$anchor" is-trigger-function="0" unique-function-name="htf$anchor" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="curl text, ctext text, cname text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365310" volatility="IMMUTABLE" is-window="f" function-identity-arguments="curl text, ctext text, cname text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$anchor(curl text, ctext text, cname text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('', 
        '<A HREF="',
        curl,
        '"',
        CASE
            WHEN cname IS NOT NULL THEN
                CONCAT_WS('', ' NAME="', cname, '"')
            ELSE
                ''
        END,
        CASE
            WHEN cattributes IS NOT NULL THEN
                CONCAT_WS('', ' ', cattributes)
            ELSE
                ''
        END,
        '>',
        ctext,
        '</A>'
    );

]]></complex-attribute>
                        <category _I_D="ddeaf40f-a420-4641-8a30-e491d2f7288c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3909ca6e-6500-472b-a360-c7ccf7ea59e4" name="htf$anchor2" subcategories-loading="none" object-loading="extended" context="htf$anchor2" is-trigger-function="0" unique-function-name="htf$anchor2" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="curl text, ctext text, cname text DEFAULT NULL::text, ctarget text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365309" volatility="IMMUTABLE" is-window="f" function-identity-arguments="curl text, ctext text, cname text, ctarget text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$anchor2(curl text, ctext text, cname text, ctarget text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('', 
        '<A HREF="',
        curl,
        '"',
        CASE
            WHEN cname IS NOT NULL THEN
                CONCAT_WS('', ' NAME="', cname, '"')
            ELSE
                ''
        END,
        CASE
            WHEN ctarget IS NOT NULL THEN
                CONCAT_WS('', ' TARGET="', ctarget, '"')
            ELSE
                ''
        END,
        CASE
            WHEN cattributes IS NOT NULL THEN
                CONCAT_WS('', ' ', cattributes)
            ELSE
                ''
        END,
        '>',
        ctext,
        '</A>'
    );

]]></complex-attribute>
                        <category _I_D="de213738-dd0b-4985-b041-2b8752993d98" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e7b52de8-e8db-478e-8cfa-75104ba9d7f5" name="htf$appletclose" subcategories-loading="none" object-loading="extended" context="htf$appletclose" is-trigger-function="0" unique-function-name="htf$appletclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365311" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$appletclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</applet>';

]]></complex-attribute>
                        <category _I_D="7cd3a522-2670-400c-8cc5-bd36a823f03a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="958a55b8-c917-4312-a8b4-b2e4fcb015bb" name="htf$appletopen" subcategories-loading="none" object-loading="extended" context="htf$appletopen" is-trigger-function="0" unique-function-name="htf$appletopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric,numeric,text" is-returning-set="f" ret-datatype="text" function-arguments="ccode text, cwidth numeric, cheight numeric, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365312" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ccode text, cwidth numeric, cheight numeric, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$appletopen(ccode text, cwidth numeric, cheight numeric, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<applet code=',
                     ccode,
                     ' width=',cwidth,
                     ' height=',cheight,
                     aws_oracle_ext.htf$ifnotnull(cattributes,concat_ws('',' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="147eea2e-1470-458b-b56e-6eb34e9a513c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="376eee24-73fc-4cc1-8e6a-df03aa5c462d" name="htf$area" subcategories-loading="none" object-loading="extended" context="htf$area" is-trigger-function="0" unique-function-name="htf$area" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="ccoords text, cshape text DEFAULT NULL::text, chref text DEFAULT NULL::text, cnohref text DEFAULT NULL::text, ctarget text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365313" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ccoords text, cshape text, chref text, cnohref text, ctarget text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$area(ccoords text, cshape text, chref text, cnohref text, ctarget text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

      SELECT CONCAT_WS('',
                       '<area',
                       aws_oracle_ext.htf$ifnotnull(cshape,' shape="'||cshape||'"'),
                       ' coords="',
                       ccoords,'"',
                       aws_oracle_ext.htf$ifnotnull(chref, concat_ws('', ' href="', chref, '"')),
                       aws_oracle_ext.htf$ifnotnull(cnohref, concat_ws('', ' nohref="nohref"')),
                       aws_oracle_ext.htf$ifnotnull(ctarget, concat_ws('', ' target="', ctarget, '"')),
                       aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                       ' />');

]]></complex-attribute>
                        <category _I_D="72d41a42-2536-4efd-a8f3-f9055b97ad64" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="03cd4726-8df9-4de4-9753-e2db87581a4f" name="htf$base" subcategories-loading="none" object-loading="extended" context="htf$base" is-trigger-function="0" unique-function-name="htf$base" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctarget text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365315" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctarget text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$base(ctarget text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<base',
                     aws_oracle_ext.htf$ifnotnull(ctarget, concat_ws('', ' target="', ctarget, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' href="',
                     case when aws_oracle_ext.owa_util$get_cgi_env('REQUEST_PROTOCOL') is null then 'http'
                          else lower('REQUEST_PROTOCOL')
                      end,
                     '://',
                     aws_oracle_ext.owa_util$get_cgi_env('SERVER_NAME'),
                     ':',
                     aws_oracle_ext.owa_util$get_cgi_env('SERVER_PORT'),
                     aws_oracle_ext.owa_util$get_cgi_env('SCRIPT_NAME'),
                     aws_oracle_ext.owa_util$get_cgi_env('PATH_INFO'),
                     '" />');

]]></complex-attribute>
                        <category _I_D="8c990233-0112-4cbd-814f-22e92f1f75a5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="18ca935c-3144-4f81-bbee-8c66abaf3492" name="htf$basefont" subcategories-loading="none" object-loading="extended" context="htf$basefont" is-trigger-function="0" unique-function-name="htf$basefont" is-aggregate="f" language-name="sql" arguments-datatypes="numeric,text" is-returning-set="f" ret-datatype="text" function-arguments="nsize numeric, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365314" volatility="IMMUTABLE" is-window="f" function-identity-arguments="nsize numeric, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$basefont(nsize numeric, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('' ,
                     '<basefont size="', 
                     nsize ,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="3531d1fc-90f7-499a-bce3-499d250676b1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cd0157a3-8f0e-4a93-8088-97a94e1540ec" name="htf$bgsound" subcategories-loading="none" object-loading="extended" context="htf$bgsound" is-trigger-function="0" unique-function-name="htf$bgsound" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="csrc text, cloop text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365316" volatility="IMMUTABLE" is-window="f" function-identity-arguments="csrc text, cloop text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$bgsound(csrc text, cloop text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<bgsound src="',
                     csrc,
                     '"',
                     aws_oracle_ext.htf$IFNOTNULL(cloop, concat_ws('', ' loop="', cloop, '"')),
                     aws_oracle_ext.htf$IFNOTNULL(cattributes, concat_ws('',' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="dcc523d2-9535-4a8f-a37f-0ddfce7a4e1f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ec105fce-9dee-48ff-8c6d-e5152103e649" name="htf$big" subcategories-loading="none" object-loading="extended" context="htf$big" is-trigger-function="0" unique-function-name="htf$big" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365317" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$big(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<big',
                     aws_oracle_ext.htf$IFNOTNULL(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</big>');

]]></complex-attribute>
                        <category _I_D="c152e9e4-a72d-4ee4-b8f1-1290a66d7032" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c1804a9c-116c-427f-80ef-9ee4c7d1e3ca" name="htf$blockquoteclose" subcategories-loading="none" object-loading="extended" context="htf$blockquoteclose" is-trigger-function="0" unique-function-name="htf$blockquoteclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365318" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$blockquoteclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</blockquote>';

]]></complex-attribute>
                        <category _I_D="bc0d3b46-97dc-48e4-837d-00545e29a186" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4c9957cd-ec5e-4450-8cce-f1317830425b" name="htf$blockquoteopen" subcategories-loading="none" object-loading="extended" context="htf$blockquoteopen" is-trigger-function="0" unique-function-name="htf$blockquoteopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365319" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$blockquoteopen(cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<blockquote',
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(cnowrap, concat_ws('', ' nowrap="nowrap"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="f3e4e597-212c-43dc-a859-bd22330fca7b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dfcdcffc-4d44-48a8-8105-2db796929c9c" name="htf$bold" subcategories-loading="none" object-loading="extended" context="htf$bold" is-trigger-function="0" unique-function-name="htf$bold" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365320" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$bold(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<b',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</b>');

]]></complex-attribute>
                        <category _I_D="50ee5aeb-c6ba-478a-8888-d388aef01229" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ddd89c95-343b-4547-ac23-6456ea252f47" name="htf$br" subcategories-loading="none" object-loading="extended" context="htf$br" is-trigger-function="0" unique-function-name="htf$br" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365321" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$br(cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<br',
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="f75800df-ce22-49d9-9fec-ac027fcfbcb7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="00ef88c4-ba95-4513-b6c7-ab9333aac4e5" name="htf$center" subcategories-loading="none" object-loading="extended" context="htf$center" is-trigger-function="0" unique-function-name="htf$center" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365324" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="sql" function-signature="htf$center(ctext text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<center>',
                     ctext,
                     '</center>');

]]></complex-attribute>
                        <category _I_D="ac3fd4e4-747e-4376-8527-bc6f091411f8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6f74b067-66dd-4e89-9383-ac77a592d11c" name="htf$centerclose" subcategories-loading="none" object-loading="extended" context="htf$centerclose" is-trigger-function="0" unique-function-name="htf$centerclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365322" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$centerclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</center>';

]]></complex-attribute>
                        <category _I_D="2ad7b6f3-c6dd-418e-aa68-89fe6c4eab06" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3ff92e58-0d92-4aca-89cf-a7099e6cc8e1" name="htf$centeropen" subcategories-loading="none" object-loading="extended" context="htf$centeropen" is-trigger-function="0" unique-function-name="htf$centeropen" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365323" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$centeropen()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '<center>';

]]></complex-attribute>
                        <category _I_D="6be5d7ae-73aa-4911-a0d0-283a62b1f75d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b30841e6-4fa6-4c0b-a48c-5e73b7ed9394" name="htf$cite" subcategories-loading="none" object-loading="extended" context="htf$cite" is-trigger-function="0" unique-function-name="htf$cite" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365325" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$cite(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<cite',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</cite>');

]]></complex-attribute>
                        <category _I_D="02ab0b88-f3aa-4e3d-bef6-15ae3598a2b9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0860e51a-4231-47f1-9598-8d04c0a7bc4e" name="htf$code" subcategories-loading="none" object-loading="extended" context="htf$code" is-trigger-function="0" unique-function-name="htf$code" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365326" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$code(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<code',
                     aws_oracle_ext.htf$IFNOTNULL(cattributes, concat_ws('', ' ', cattributes)),
                     '>', 
                     ctext, 
                     '</code>');

]]></complex-attribute>
                        <category _I_D="e387b658-baa9-4816-98a9-57fa82348ac8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c92fa928-ae52-4bcb-a6a7-de5d2e2b7ddb" name="htf$comment" subcategories-loading="none" object-loading="extended" context="htf$comment" is-trigger-function="0" unique-function-name="htf$comment" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365327" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="sql" function-signature="htf$comment(ctext text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<!-- ',
                     ctext,
                     ' --');

]]></complex-attribute>
                        <category _I_D="759833c4-cba1-483a-91e5-0f1c9ba0bf29" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="45f862c9-c02d-4629-aeb7-869ca8ff6230" name="htf$dfn" subcategories-loading="none" object-loading="extended" context="htf$dfn" is-trigger-function="0" unique-function-name="htf$dfn" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365328" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$dfn(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<dfn',
                     aws_oracle_ext.htf$IFNOTNULL(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</dfn>');

]]></complex-attribute>
                        <category _I_D="361cafa0-b2ec-46e9-9171-100674c7b503" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bbe1d985-ca87-4647-98ea-c07032724d0d" name="htf$dirlistclose" subcategories-loading="none" object-loading="extended" context="htf$dirlistclose" is-trigger-function="0" unique-function-name="htf$dirlistclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365329" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$dirlistclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</dir>';

]]></complex-attribute>
                        <category _I_D="5c39a648-05d3-4472-8e3c-c5cedf373a49" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="199e7797-b9af-41e5-a0ff-c221aae9b88f" name="htf$dirlistopen" subcategories-loading="none" object-loading="extended" context="htf$dirlistopen" is-trigger-function="0" unique-function-name="htf$dirlistopen" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365330" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$dirlistopen()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '<dir>';

]]></complex-attribute>
                        <category _I_D="df77dc78-ea72-4b32-b861-7c0fd518684a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="49aee6b3-17f0-44fc-9521-c2d21e40eb3f" name="htf$div" subcategories-loading="none" object-loading="extended" context="htf$div" is-trigger-function="0" unique-function-name="htf$div" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365331" volatility="IMMUTABLE" is-window="f" function-identity-arguments="calign text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$div(calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<div',
                  aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                  aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                  '>');

]]></complex-attribute>
                        <category _I_D="885bbcca-846d-4ee6-b7c9-bbe59f8ce7ac" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4ed154ed-7fc1-4c7d-ab89-6027e72ad230" name="htf$dlistclose" subcategories-loading="none" object-loading="extended" context="htf$dlistclose" is-trigger-function="0" unique-function-name="htf$dlistclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365332" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$dlistclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</dl>';

]]></complex-attribute>
                        <category _I_D="c06a7f4d-ad83-41cc-8322-087104811c2f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c668c16d-6474-433b-8ba2-3f616f04fd8e" name="htf$dlistdef" subcategories-loading="none" object-loading="extended" context="htf$dlistdef" is-trigger-function="0" unique-function-name="htf$dlistdef" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365333" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$dlistdef(ctext text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('', '<dd',
                  aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="'||cclear||'"')),
                  aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                  '>',ctext);

]]></complex-attribute>
                        <category _I_D="d74a4958-04a0-4665-9c58-67c82a7bab8e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="efa2963e-5ea5-46dd-8c11-ae83182835cb" name="htf$dlistopen" subcategories-loading="none" object-loading="extended" context="htf$dlistopen" is-trigger-function="0" unique-function-name="htf$dlistopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365334" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$dlistopen(cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<dl',
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="', cclear,'"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('',' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="30f3d546-b7e1-4e19-969b-09adda7add9f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a196e202-1334-4f37-b103-8da8a9104986" name="htf$dlistterm" subcategories-loading="none" object-loading="extended" context="htf$dlistterm" is-trigger-function="0" unique-function-name="htf$dlistterm" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365335" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$dlistterm(ctext text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<dt',
                     aws_oracle_ext.htf$IFNOTNULL(cclear, concat_ws('', ' clear="', cclear, '"')),
                     aws_oracle_ext.htf$IFNOTNULL(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext);

]]></complex-attribute>
                        <category _I_D="3787589c-6713-401a-9d43-b07c7a0b4fb8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="50570c87-5a49-4a9d-8de7-0b74a536b46b" name="htf$em" subcategories-loading="none" object-loading="extended" context="htf$em" is-trigger-function="0" unique-function-name="htf$em" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365336" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$em(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<em',
                     aws_oracle_ext.htf$ifnotnull(cattributes,concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</em>');

]]></complex-attribute>
                        <category _I_D="2df4389f-e6e8-4f6d-9ce4-58fb98167166" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6828986a-c2ef-4262-9ba8-641790860e35" name="htf$emphasis" subcategories-loading="none" object-loading="extended" context="htf$emphasis" is-trigger-function="0" unique-function-name="htf$emphasis" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365337" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$emphasis(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.htf$em(ctext,cattributes);

]]></complex-attribute>
                        <category _I_D="ce660c0a-5bcd-4dad-984e-4efc80128f0b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="69806c43-1c05-44a6-bc6a-471a9fa8012f" name="htf$escape_sc" subcategories-loading="none" object-loading="extended" context="htf$escape_sc" is-trigger-function="0" unique-function-name="htf$escape_sc" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365338" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="sql" function-signature="htf$escape_sc(ctext text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT replace(
             replace(
             replace(
             replace(ctext, '&', concat_ws('', '&', 'amp;')),
                            '"', concat_ws('', '&', 'quot;')),
                            '<', concat_ws('', '&', 'lt;')),
                            '>', concat_ws('', '&', 'gt;'));

]]></complex-attribute>
                        <category _I_D="86522a09-744b-42b8-94e1-3052e4037d9d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0e80812e-b00f-4f4f-952e-127763886a51" name="htf$escape_url" subcategories-loading="none" object-loading="extended" context="htf$escape_url" is-trigger-function="0" unique-function-name="htf$escape_url" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_url text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365339" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_url text" overload-function-count="1" proc-language="sql" function-signature="htf$escape_url(p_url text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT replace(aws_oracle_ext.htf$escape_sc(p_url), '%', '%25');

]]></complex-attribute>
                        <category _I_D="c2c35488-1730-4dff-bc56-cdae7801d57c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4aa123b5-094b-495d-9080-4fbd71a37b11" name="htf$fontclose" subcategories-loading="none" object-loading="extended" context="htf$fontclose" is-trigger-function="0" unique-function-name="htf$fontclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365340" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$fontclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</font>';

]]></complex-attribute>
                        <category _I_D="d199e194-c4ab-4098-bfaa-66fea98ef57f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7f259d85-7e44-40c6-ae41-5c30bc1b262b" name="htf$fontopen" subcategories-loading="none" object-loading="extended" context="htf$fontopen" is-trigger-function="0" unique-function-name="htf$fontopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="ccolor text DEFAULT NULL::text, cface text DEFAULT NULL::text, csize text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365341" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ccolor text, cface text, csize text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$fontopen(ccolor text, cface text, csize text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<font',
                     aws_oracle_ext.htf$ifnotnull(ccolor, concat_ws('', ' color="', ccolor, '"')),
                     aws_oracle_ext.htf$ifnotnull(cface, concat_ws('', ' face="', cface, '"')),
                     aws_oracle_ext.htf$ifnotnull(csize, concat_ws('', ' size="', csize, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="9998ad29-3710-4942-9460-5c8e31b61bf9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f52d11f4-41b1-4aae-b8e9-9f936c2e467b" name="htf$format_cell" subcategories-loading="none" object-loading="extended" context="htf$format_cell" is-trigger-function="0" unique-function-name="htf$format_cell" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="columnvalue text, format_numbers text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365342" volatility="VOLATILE" is-window="f" function-identity-arguments="columnvalue text, format_numbers text" overload-function-count="1" proc-language="plpgsql" function-signature="htf$format_cell(columnvalue text, format_numbers text)">
                        <complex-attribute name="sql"><![CDATA[
begin

   if format_numers is null then
      return aws_oracle_ext.htf$tableData(columnValue);
   end if;

   return aws_oracle_ext.htf$tableData(coalesce(ltrim(aws_oracle_ext.to_char(aws_oracle_ext.to_number(columnValue),
                                                                    format_numbers)),
                                                '(null)'),
                                       'right');
end;
]]></complex-attribute>
                        <category _I_D="930ede28-e89d-4487-a314-978729485ca0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ef9530b0-9d56-4764-aa24-36cf642b8111" name="htf$formcheckbox" subcategories-loading="none" object-loading="extended" context="htf$formcheckbox" is-trigger-function="0" unique-function-name="htf$formcheckbox" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, cvalue text DEFAULT 'on'::text, cchecked text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365343" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, cvalue text, cchecked text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formcheckbox(cname text, cvalue text, cchecked text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<input type="checkbox" name="',
                     cname,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(cvalue, concat_ws('', ' value="', cvalue, '"')),
                     aws_oracle_ext.htf$ifnotnull(cchecked, ' checked="checked"'),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="13d136df-2f2e-4a99-8122-b6807dc758d7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9134e52d-4ce3-4263-8902-475ef2b2994b" name="htf$formclose" subcategories-loading="none" object-loading="extended" context="htf$formclose" is-trigger-function="0" unique-function-name="htf$formclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365344" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$formclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</form>';

]]></complex-attribute>
                        <category _I_D="14dd6a22-2cf5-4837-af9d-34bb94e62b48" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="23fe96a5-58d7-444b-9a0b-ec764401ffcd" name="htf$formfile" subcategories-loading="none" object-loading="extended" context="htf$formfile" is-trigger-function="0" unique-function-name="htf$formfile" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, caccept text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365345" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, caccept text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formfile(cname text, caccept text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<input type="file"',
                     aws_oracle_ext.htf$ifnotnull(cname, concat_ws('', ' name="', cname, '"')),
                     aws_oracle_ext.htf$ifnotnull(caccept, concat_ws('', ' accept="', caccept, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="209be147-b866-449a-b952-41013891c016" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c7aeb31f-7771-4d47-b4ab-a6580a61161a" name="htf$formhidden" subcategories-loading="none" object-loading="extended" context="htf$formhidden" is-trigger-function="0" unique-function-name="htf$formhidden" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, cvalue text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365346" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, cvalue text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formhidden(cname text, cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<input type="hidden" name="',
                     cname,
                     '"',
                     ' value="',
                     cvalue,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="ace29f4d-4af1-46d1-8f72-d8d1d9ec965e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6df01065-4253-4aeb-be12-ac0d32d73036" name="htf$formimage" subcategories-loading="none" object-loading="extended" context="htf$formimage" is-trigger-function="0" unique-function-name="htf$formimage" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, csrc text, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365347" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, csrc text, calign text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formimage(cname text, csrc text, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<input type="image" name="',
                     cname,
                     '"',
                     ' src="',
                     csrc,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="7fe3d131-1af7-45dc-b671-c48f67795717" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="36bf6ead-9ef8-4d93-8703-3da13ab54fad" name="htf$formopen" subcategories-loading="none" object-loading="extended" context="htf$formopen" is-trigger-function="0" unique-function-name="htf$formopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="curl text, cmethod text DEFAULT 'POST'::text, ctarget text DEFAULT NULL::text, cenctype text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365348" volatility="IMMUTABLE" is-window="f" function-identity-arguments="curl text, cmethod text, ctarget text, cenctype text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formopen(curl text, cmethod text, ctarget text, cenctype text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT CONCAT_WS('',
        '<FORM ACTION="',
        curl,
        '" METHOD="',
        cmethod,
        '"',
        CASE
            WHEN ctarget IS NOT NULL THEN
                CONCAT_WS('', ' TARGET="', ctarget, '"')
            ELSE
                ''
        END,
        CASE
            WHEN cenctype IS NOT NULL THEN
                CONCAT_WS('', ' ENCTYPE="', cenctype, '"')
            ELSE
                ''
        END,
        CASE
            WHEN cattributes IS NOT NULL THEN
                CONCAT_WS('', ' ', cattributes)
            ELSE
                ''
        END,
        '>'
    );

]]></complex-attribute>
                        <category _I_D="709a33b9-34c6-4c2b-a820-755b9e1626bd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2c90fae5-2dd9-454d-a044-3c2797b7126c" name="htf$formpassword" subcategories-loading="none" object-loading="extended" context="htf$formpassword" is-trigger-function="0" unique-function-name="htf$formpassword" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, csize text, cmaxlength text DEFAULT NULL::text, cvalue text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365349" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, csize text, cmaxlength text, cvalue text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formpassword(cname text, csize text, cmaxlength text, cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('', 
        '<INPUT TYPE="password" NAME="',
        cname,
        '" SIZE="',
        csize,
        CASE
            WHEN cmaxlength IS NOT NULL THEN
                CONCAT_WS('', '" MAXLENGTH="', cmaxlength, '"')
            ELSE
                ''
        END,
        CASE
            WHEN cvalue IS NOT NULL THEN
                CONCAT_WS('', ' VALUE="', cvalue, '"')
            ELSE
                ''
        END,
        CASE
            WHEN cattributes IS NOT NULL THEN
                CONCAT_WS('', ' ', cattributes)
            ELSE
                ''
        END,
        '>'
    );

]]></complex-attribute>
                        <category _I_D="0ffb2a28-2b38-4a92-84b7-7946d57d1c2c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="28f269a1-5f05-421d-b1e9-0983f68198f8" name="htf$formradio" subcategories-loading="none" object-loading="extended" context="htf$formradio" is-trigger-function="0" unique-function-name="htf$formradio" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, cvalue text, cchecked text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365350" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, cvalue text, cchecked text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formradio(cname text, cvalue text, cchecked text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<input type="radio" name="',
                      cname,
                     'value="',
                     cvalue,
                     aws_oracle_ext.htf$ifnotnull(cchecked,' checked="checked"'),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="7fb91124-acd1-42fa-aa20-126cff6fddd0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ae8a83b8-a063-4611-b2a9-4a6702a3e5ee" name="htf$formreset" subcategories-loading="none" object-loading="extended" context="htf$formreset" is-trigger-function="0" unique-function-name="htf$formreset" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="cvalue text DEFAULT 'Reset'::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365351" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cvalue text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formreset(cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('', 
                     '<input type="reset" value="',
                     cvalue,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="a65b7a47-dfbc-43ef-ba82-c0a4597a1fa4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3f2ad28c-4f67-446a-ba50-2e77372bc990" name="htf$formselectclose" subcategories-loading="none" object-loading="extended" context="htf$formselectclose" is-trigger-function="0" unique-function-name="htf$formselectclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365352" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$formselectclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</select>';

]]></complex-attribute>
                        <category _I_D="897f2fcc-35b9-4ed4-9998-1b7e845c92a3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c9434dc9-f019-4801-ae77-a18f88d18028" name="htf$formselectopen" subcategories-loading="none" object-loading="extended" context="htf$formselectopen" is-trigger-function="0" unique-function-name="htf$formselectopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,numeric,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, cprompt text DEFAULT NULL::text, nsize numeric DEFAULT NULL::numeric, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365353" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, cprompt text, nsize numeric, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formselectopen(cname text, cprompt text, nsize numeric, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     cprompt,
                     '<select name="',
                     cname,
                     aws_oracle_ext.htf$ifnotnull(aws_oracle_ext.to_char(nsize), concat_ws('', ' size="', nsize, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="0f42dd68-a22d-4d8e-9088-827c96375f89" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="206543b2-6317-4a96-81b0-25d58d4cf8ba" name="htf$formselectoption" subcategories-loading="none" object-loading="extended" context="htf$formselectoption" is-trigger-function="0" unique-function-name="htf$formselectoption" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cvalue text, cselected text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365354" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cvalue text, cselected text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formselectoption(cvalue text, cselected text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<option',
                     aws_oracle_ext.htf$ifnotnull(cselected, concat_ws('', ' selected="selected"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '</option>');

]]></complex-attribute>
                        <category _I_D="02a6e0b7-96cb-458a-b4a3-be076f3d3135" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="725e57d9-0a03-4a43-a124-ad0279577203" name="htf$formsubmit" subcategories-loading="none" object-loading="extended" context="htf$formsubmit" is-trigger-function="0" unique-function-name="htf$formsubmit" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text DEFAULT NULL::text, cvalue text DEFAULT 'Submit'::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365355" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, cvalue text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formsubmit(cname text, cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<input type="submit"',
                      aws_oracle_ext.htf$ifnotnull(cname, concat_ws('', ' name="', cname, '"')),
                      aws_oracle_ext.htf$ifnotnull(cvalue, concat_ws('', ' value="', cvalue, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="8a4ffcb4-897f-4dfa-b789-6e475be0e52b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fde1d220-504e-4162-9109-113f489d4853" name="htf$formtext" subcategories-loading="none" object-loading="extended" context="htf$formtext" is-trigger-function="0" unique-function-name="htf$formtext" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, csize text DEFAULT NULL::text, cmaxlength text DEFAULT NULL::text, cvalue text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365361" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, csize text, cmaxlength text, cvalue text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formtext(cname text, csize text, cmaxlength text, cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<input type="text" name="',
                     cname,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(csize, concat_ws('', ' size="', csize, '"')),
                     aws_oracle_ext.htf$ifnotnull(cmaxlength, concat_ws('', ' maxlength="', cmaxlength, '"')),
                     aws_oracle_ext.htf$ifnotnull(cvalue, concat_ws('', ' value="', cvalue, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '/>');

]]></complex-attribute>
                        <category _I_D="e7851abf-da25-4160-86f2-efa6886bffd5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="682574e6-3cb9-4e0c-9ba0-308431e14141" name="htf$formtextarea" subcategories-loading="none" object-loading="extended" context="htf$formtextarea" is-trigger-function="0" unique-function-name="htf$formtextarea" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric,numeric,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, nrows numeric, ncolumns numeric, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365360" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, nrows numeric, ncolumns numeric, calign text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formtextarea(cname text, nrows numeric, ncolumns numeric, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<textarea name="',
                     cname,
                     '"',
                     ' rows="',
                     aws_oracle_ext.to_char(nrows),
                     '"',
                     ' cols="',
                     aws_oracle_ext.to_char(ncolumns),
                     '"',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '></textarea>');

]]></complex-attribute>
                        <category _I_D="944469b8-c89b-4fee-adf8-fb323b8c6ebb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="185d653a-d53d-4847-b1f5-7a034b3911dd" name="htf$formtextarea2" subcategories-loading="none" object-loading="extended" context="htf$formtextarea2" is-trigger-function="0" unique-function-name="htf$formtextarea2" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric,numeric,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, nrows numeric, ncolumns numeric, calign text DEFAULT NULL::text, cwrap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365356" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, nrows numeric, ncolumns numeric, calign text, cwrap text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formtextarea2(cname text, nrows numeric, ncolumns numeric, calign text, cwrap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<textarea name="',
                     cname,
                     '"',
                     ' rows="',
                     aws_oracle_ext.to_char(nrows),
                     '"',
                     ' cols="',
                     aws_oracle_ext.to_char(ncolumns),
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cwrap, concat_ws('', ' wrap="', cwrap, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '></textarea>');

]]></complex-attribute>
                        <category _I_D="f876675e-1370-40c0-8ea9-abecede3e9ad" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0f45fdca-6dcc-4913-b7c9-b1e265fa3ce6" name="htf$formtextareaclose" subcategories-loading="none" object-loading="extended" context="htf$formtextareaclose" is-trigger-function="0" unique-function-name="htf$formtextareaclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365357" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$formtextareaclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</textarea>';

]]></complex-attribute>
                        <category _I_D="0c49011d-a929-43e3-9bd3-81014fde3a3e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0bea310d-4e78-413f-8f6e-0cbdcb246636" name="htf$formtextareaopen" subcategories-loading="none" object-loading="extended" context="htf$formtextareaopen" is-trigger-function="0" unique-function-name="htf$formtextareaopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric,numeric,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, nrows numeric, ncolumns numeric, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365359" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, nrows numeric, ncolumns numeric, calign text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formtextareaopen(cname text, nrows numeric, ncolumns numeric, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<textarea name="',
                     cname,
                     '"',
                     ' rows="',
                     aws_oracle_ext.to_char(nrows),
                     '"',
                     ' cols="',
                     aws_oracle_ext.to_char(ncolumns),
                     '"',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="470b7929-f58c-49f5-b049-831d505bc9af" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d5500dc2-45c4-4c9b-b969-e1ab4640fd55" name="htf$formtextareaopen2" subcategories-loading="none" object-loading="extended" context="htf$formtextareaopen2" is-trigger-function="0" unique-function-name="htf$formtextareaopen2" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric,numeric,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, nrows numeric, ncolumns numeric, calign text DEFAULT NULL::text, cwrap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365358" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, nrows numeric, ncolumns numeric, calign text, cwrap text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$formtextareaopen2(cname text, nrows numeric, ncolumns numeric, calign text, cwrap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<textarea name="',
                     cname,
                     '"',
                     ' rows="',
                     aws_oracle_ext.to_char(nrows),
                     '"',
                     ' cols="',
                     aws_oracle_ext.to_char(ncolumns),
                     '"',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cwrap, concat_ws('', ' wrap="', cwrap, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="6548f157-0b7d-4097-9f44-b82aa7bfd7c4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5c7936e0-5ab3-47e9-a050-968515ca42cc" name="htf$frame" subcategories-loading="none" object-loading="extended" context="htf$frame" is-trigger-function="0" unique-function-name="htf$frame" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="csrc text, cname text DEFAULT NULL::text, cmarginwidth text DEFAULT NULL::text, cmarginheight text DEFAULT NULL::text, cscrolling text DEFAULT NULL::text, cnoresize text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="7" function-id="365364" volatility="IMMUTABLE" is-window="f" function-identity-arguments="csrc text, cname text, cmarginwidth text, cmarginheight text, cscrolling text, cnoresize text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$frame(csrc text, cname text, cmarginwidth text, cmarginheight text, cscrolling text, cnoresize text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<frame src="',
                     csrc,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(cname, concat_ws('', ' name="', cname, '"')),
                     aws_oracle_ext.htf$ifnotnull(cmarginwidth, concat_ws('', ' marginwidth="', cmarginwidth, '"')),
                     aws_oracle_ext.htf$ifnotnull(cmarginheight, concat_ws('', ' marginheight="', cmarginheight, '"')),
                     aws_oracle_ext.htf$ifnotnull(cscrolling, concat_ws('', ' scrolling="', cscrolling, '"')),
                     aws_oracle_ext.htf$ifnotnull(cnoresize, concat_ws('', ' noresize="noresize"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '/>');

]]></complex-attribute>
                        <category _I_D="5afe879a-e185-4b73-a517-fc29f9d2bc60" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2264f1dd-d049-483e-8398-a79e27e2f269" name="htf$framesetclose" subcategories-loading="none" object-loading="extended" context="htf$framesetclose" is-trigger-function="0" unique-function-name="htf$framesetclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365362" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$framesetclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</frameset>';

]]></complex-attribute>
                        <category _I_D="9584bd76-d364-439d-9dcb-4cc88e67dff7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8eb8b219-6b81-457c-9a5e-79baf364c0a9" name="htf$framesetopen" subcategories-loading="none" object-loading="extended" context="htf$framesetopen" is-trigger-function="0" unique-function-name="htf$framesetopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="crows text DEFAULT NULL::text, ccols text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365363" volatility="IMMUTABLE" is-window="f" function-identity-arguments="crows text, ccols text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$framesetopen(crows text, ccols text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<frameset',
                     aws_oracle_ext.htf$ifnotnull(crows, concat_ws('', ' rows="', crows, '"')),
                     aws_oracle_ext.htf$ifnotnull(ccols, concat_ws('', ' cols="', ccols, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="f0c8f95f-3b3f-46d0-812f-4d2182b32fa1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5ac664c0-749e-471e-a24c-6984e378f54b" name="htf$header" subcategories-loading="none" object-loading="extended" context="htf$header" is-trigger-function="0" unique-function-name="htf$header" is-aggregate="f" language-name="sql" arguments-datatypes="numeric,text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="nsize numeric, cheader text, calign text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365365" volatility="IMMUTABLE" is-window="f" function-identity-arguments="nsize numeric, cheader text, calign text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$header(nsize numeric, cheader text, calign text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<',
                     'h',
                     aws_oracle_ext.to_char(least(abs(nsize),6)),
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(cnowrap, concat_ws('', ' nowrap="nowrap"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     cheader,
                     '</',
                     'h',
                     aws_oracle_ext.to_char(least(abs(nsize),6)),
                     '>');

]]></complex-attribute>
                        <category _I_D="918e7182-ca45-4fda-98df-f5e9c87575d1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dd76c2dd-02ff-432b-bcca-20a9d26ed4a3" name="htf$hr" subcategories-loading="none" object-loading="extended" context="htf$hr" is-trigger-function="0" unique-function-name="htf$hr" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cclear text DEFAULT NULL::text, csrc text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365366" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cclear text, csrc text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$hr(cclear text, csrc text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<hr',
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(csrc, concat_ws('', ' src="', csrc, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '/>');

]]></complex-attribute>
                        <category _I_D="81a99e8a-31a9-4b4f-83bc-13a221ef0975" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fb0ed702-aaa1-43eb-b309-913148ed6045" name="htf$htitle" subcategories-loading="none" object-loading="extended" context="htf$htitle" is-trigger-function="0" unique-function-name="htf$htitle" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctitle text, nsize numeric DEFAULT 1, calign text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365368" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctitle text, nsize numeric, calign text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$htitle(ctitle text, nsize numeric, calign text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     aws_oracle_ext.htf$title(ctitle),
                     aws_oracle_ext.htf$header(nsize,ctitle,calign,cnowrap,cclear,cattributes));

]]></complex-attribute>
                        <category _I_D="1f7e04b8-18a1-47fb-9607-6d5cbfb1eb95" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7bc5f945-351f-46a5-94af-50ca677d4abc" name="htf$ifnotnull" subcategories-loading="none" object-loading="extended" context="htf$ifnotnull" is-trigger-function="0" unique-function-name="htf$ifnotnull" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="str1 text, str2 text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365307" volatility="IMMUTABLE" is-window="f" function-identity-arguments="str1 text, str2 text" overload-function-count="1" proc-language="sql" function-signature="htf$ifnotnull(str1 text, str2 text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT case when str1 is null then null
		            else str2
		       end;
]]></complex-attribute>
                        <category _I_D="09e53271-cf3d-4d99-8529-24971406fd3a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f86fd54c-ee85-4b95-a891-111aa1af0ffb" name="htf$img" subcategories-loading="none" object-loading="extended" context="htf$img" is-trigger-function="0" unique-function-name="htf$img" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="curl text, calign text DEFAULT NULL::text, calt text DEFAULT NULL::text, cismap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365370" volatility="IMMUTABLE" is-window="f" function-identity-arguments="curl text, calign text, calt text, cismap text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$img(curl text, calign text, calt text, cismap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<img src="',
                     curl,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="',calign,'"')),
                     aws_oracle_ext.htf$ifnotnull(calt, concat_ws('', ' alt="',calt,'"')),
                     aws_oracle_ext.htf$ifnotnull(cismap, concat_ws('', ' ismap="ismap"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ',cattributes)),
                     ' />');

]]></complex-attribute>
                        <category _I_D="63e39405-fc86-40ba-bc5a-c6417b10afe2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1af846bf-26a7-4ace-ad2e-a471716609bb" name="htf$img2" subcategories-loading="none" object-loading="extended" context="htf$img2" is-trigger-function="0" unique-function-name="htf$img2" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="curl text, calign text DEFAULT NULL::text, calt text DEFAULT NULL::text, cismap text DEFAULT NULL::text, cusemap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365369" volatility="IMMUTABLE" is-window="f" function-identity-arguments="curl text, calign text, calt text, cismap text, cusemap text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$img2(curl text, calign text, calt text, cismap text, cusemap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<img src="',
                     curl,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="',calign,'"')),
                     aws_oracle_ext.htf$ifnotnull(calt, concat_ws('', ' alt="',calt,'"')),
                     aws_oracle_ext.htf$ifnotnull(cismap, concat_ws('', ' ismap="ismap"')),
                     aws_oracle_ext.htf$ifnotnull(cusemap, concat_ws('', ' usemap="',cusemap,'"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ',cattributes)),
                     ' />');
   
]]></complex-attribute>
                        <category _I_D="c40b09ca-4864-425f-a347-7617d45fc0e7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ee35c6cf-4510-4d91-9dfd-54243d037845" name="htf$isindex" subcategories-loading="none" object-loading="extended" context="htf$isindex" is-trigger-function="0" unique-function-name="htf$isindex" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="cprompt text DEFAULT NULL::text, curl text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365371" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cprompt text, curl text" overload-function-count="1" proc-language="sql" function-signature="htf$isindex(cprompt text, curl text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<isindex',
                     aws_oracle_ext.htf$IFNOTNULL(cprompt, concat_ws('', ' prompt="',cprompt,'"')),
                     aws_oracle_ext.htf$IFNOTNULL(curl, concat_ws('', ' href="',curl,'"')),
                     '>');
]]></complex-attribute>
                        <category _I_D="d7c00392-3a7c-4559-9115-bfb63b48a330" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3c3a9821-23de-45f2-80a4-a6399a31356c" name="htf$italic" subcategories-loading="none" object-loading="extended" context="htf$italic" is-trigger-function="0" unique-function-name="htf$italic" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365372" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$italic(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<i',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ',cattributes)),
                     '>',
                     ctext,
                     '</i>');

]]></complex-attribute>
                        <category _I_D="236e8416-ee9c-4323-b922-c5a2fbcadb25" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b50020ac-3ced-4f7a-99d2-cb03dcdf31ef" name="htf$kbd" subcategories-loading="none" object-loading="extended" context="htf$kbd" is-trigger-function="0" unique-function-name="htf$kbd" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365373" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$kbd(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<kbd',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ',cattributes)),
                     '>',
                     ctext,
                     '</kbd>');

]]></complex-attribute>
                        <category _I_D="a065404e-5f9e-4821-8523-a1d8e6d6251b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="693c99e2-d8aa-49a3-8102-1d7ae3f8b6cc" name="htf$keyboard" subcategories-loading="none" object-loading="extended" context="htf$keyboard" is-trigger-function="0" unique-function-name="htf$keyboard" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365374" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$keyboard(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.htf$kbd(ctext,cattributes);

]]></complex-attribute>
                        <category _I_D="ead42694-edfb-460b-a26a-575d00f9d92e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="aba5b897-1ce3-4551-a517-ade3efec4b64" name="htf$line" subcategories-loading="none" object-loading="extended" context="htf$line" is-trigger-function="0" unique-function-name="htf$line" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cclear text DEFAULT NULL::text, csrc text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365375" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cclear text, csrc text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$line(cclear text, csrc text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.htf$hr(cclear, csrc, cattributes);

]]></complex-attribute>
                        <category _I_D="ae533763-0bc0-4c7b-bde5-20ec68813ba2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8a255789-1ace-40f7-bf68-5316286a2bd1" name="htf$linkrel" subcategories-loading="none" object-loading="extended" context="htf$linkrel" is-trigger-function="0" unique-function-name="htf$linkrel" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="crel text, curl text, ctitle text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365376" volatility="IMMUTABLE" is-window="f" function-identity-arguments="crel text, curl text, ctitle text" overload-function-count="1" proc-language="sql" function-signature="htf$linkrel(crel text, curl text, ctitle text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<link rel="',
                     crel,
                     '"',
                     ' href="',
                     curl,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(ctitle, concat_ws('', ' title="',ctitle,'"')),
                     '>');

]]></complex-attribute>
                        <category _I_D="9adc35d2-9f3b-4551-85c6-641e055bafa5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="93c39893-6ef7-4546-bf46-ad6be9e66635" name="htf$linkrev" subcategories-loading="none" object-loading="extended" context="htf$linkrev" is-trigger-function="0" unique-function-name="htf$linkrev" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="crev text, curl text, ctitle text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365377" volatility="IMMUTABLE" is-window="f" function-identity-arguments="crev text, curl text, ctitle text" overload-function-count="1" proc-language="sql" function-signature="htf$linkrev(crev text, curl text, ctitle text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<link rev="',
                     crev,
                     '"',
                     ' href="',
                     curl,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(ctitle, concat_ws('', ' title="',ctitle,'"')),
                     '>');

]]></complex-attribute>
                        <category _I_D="144f2ac9-8a25-47b7-af90-e0adda15679d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d124d955-7403-4b62-841e-9f34444e69a5" name="htf$listheader" subcategories-loading="none" object-loading="extended" context="htf$listheader" is-trigger-function="0" unique-function-name="htf$listheader" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365378" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$listheader(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<lh',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ',cattributes)),
                     '>',
                     ctext,
                     '</lh>');

]]></complex-attribute>
                        <category _I_D="cd2f6469-69d6-416c-83ba-e6a2a61ddfa7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e22a18cd-eb51-4d9e-9cd1-77d27bc628e3" name="htf$listingclose" subcategories-loading="none" object-loading="extended" context="htf$listingclose" is-trigger-function="0" unique-function-name="htf$listingclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365379" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$listingclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</listing>';

]]></complex-attribute>
                        <category _I_D="3833adf0-1071-4231-9e0a-c6acc100b3e2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2f7b1e73-f431-4ed6-9144-862c226fa097" name="htf$listingopen" subcategories-loading="none" object-loading="extended" context="htf$listingopen" is-trigger-function="0" unique-function-name="htf$listingopen" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365380" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$listingopen()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '<listing>';

]]></complex-attribute>
                        <category _I_D="f0a99cd7-63ca-4916-9392-2efa7625b4ee" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="761f1c57-070c-4000-af4e-94c74e256589" name="htf$listitem" subcategories-loading="none" object-loading="extended" context="htf$listitem" is-trigger-function="0" unique-function-name="htf$listitem" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cdingbat text DEFAULT NULL::text, csrc text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365381" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cclear text, cdingbat text, csrc text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$listitem(ctext text, cclear text, cdingbat text, csrc text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<li'||
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="',cclear,'"')),
                     aws_oracle_ext.htf$ifnotnull(cdingbat, concat_ws('', ' dingbat="',cdingbat,'"')),
                     aws_oracle_ext.htf$ifnotnull(csrc, concat_ws('', ' src="',csrc,'"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ',cattributes)),
                     '>',
                     ctext);

]]></complex-attribute>
                        <category _I_D="f47fc7a5-128b-4737-a685-d694a70c00c7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5c6137cf-6460-428d-91a0-0a8a1025e1fb" name="htf$mailto" subcategories-loading="none" object-loading="extended" context="htf$mailto" is-trigger-function="0" unique-function-name="htf$mailto" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="caddress text, ctext text, cname text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365382" volatility="IMMUTABLE" is-window="f" function-identity-arguments="caddress text, ctext text, cname text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$mailto(caddress text, ctext text, cname text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.htf$anchor(concat_ws('', 'mailto:', caddress),
                                     ctext,
                                     cname,
                                     cattributes);

]]></complex-attribute>
                        <category _I_D="6ef2c95e-9c26-4fcf-a2c9-22424ed634db" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f5d70c9b-8f3c-4cd3-9fdc-4d3858f626f8" name="htf$mapclose" subcategories-loading="none" object-loading="extended" context="htf$mapclose" is-trigger-function="0" unique-function-name="htf$mapclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365383" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$mapclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</map>';

]]></complex-attribute>
                        <category _I_D="6d5ad03b-089c-437b-9978-25da4316e611" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f2dd7158-768f-4a1d-9692-fc4e394be4f4" name="htf$mapopen" subcategories-loading="none" object-loading="extended" context="htf$mapopen" is-trigger-function="0" unique-function-name="htf$mapopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365384" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$mapopen(cname text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('', 
                     '<map name="',
                     cname,
                     '"',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ',cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="188b9814-adc6-4267-aae8-44b8d18e384f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fc57f2f6-1d42-455e-bc80-3259b7c15bce" name="htf$menulistclose" subcategories-loading="none" object-loading="extended" context="htf$menulistclose" is-trigger-function="0" unique-function-name="htf$menulistclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365385" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$menulistclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</menu>';

]]></complex-attribute>
                        <category _I_D="4583f6d0-c53e-40f1-ab62-7c77dd40abae" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="02da78ff-e125-4fd9-8591-4722ed9930cb" name="htf$menulistopen" subcategories-loading="none" object-loading="extended" context="htf$menulistopen" is-trigger-function="0" unique-function-name="htf$menulistopen" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365386" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$menulistopen()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '<menu>';

]]></complex-attribute>
                        <category _I_D="7401b27b-0ff7-481e-8c63-a92c85a88e45" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d82b6cb0-b6f6-454e-b40d-4fa6471e4482" name="htf$meta" subcategories-loading="none" object-loading="extended" context="htf$meta" is-trigger-function="0" unique-function-name="htf$meta" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="chttp_equiv text, cname text, ccontent text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365387" volatility="IMMUTABLE" is-window="f" function-identity-arguments="chttp_equiv text, cname text, ccontent text" overload-function-count="1" proc-language="sql" function-signature="htf$meta(chttp_equiv text, cname text, ccontent text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('', 
                     '<meta http-equiv="',
                     chttp_equiv,
                     '" name="',
                     cname,
                     '" content="',
                     ccontent,
                     '">')

]]></complex-attribute>
                        <category _I_D="f8f2900c-eb37-4598-9ca0-86dc4818b78a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="73359b0a-5844-4ce6-878f-9f6b962d24aa" name="htf$nextid" subcategories-loading="none" object-loading="extended" context="htf$nextid" is-trigger-function="0" unique-function-name="htf$nextid" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="cidentifier text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365388" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cidentifier text" overload-function-count="1" proc-language="sql" function-signature="htf$nextid(cidentifier text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<nextid n="',
                     cidentifier,
                     '>');

]]></complex-attribute>
                        <category _I_D="64b7c41b-54dc-42ef-97bd-e1295b99e02c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a9b55fd8-5e7c-4aa1-b0c6-12f32af4aa8e" name="htf$nl" subcategories-loading="none" object-loading="extended" context="htf$nl" is-trigger-function="0" unique-function-name="htf$nl" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365389" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$nl(cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

  SELECT aws_oracle_ext.htf$br(cclear, cattributes);

]]></complex-attribute>
                        <category _I_D="e7884218-bdf2-459c-ab4e-0d2247c80fa6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1a461816-314a-4581-af79-7f4da34bf209" name="htf$nobr" subcategories-loading="none" object-loading="extended" context="htf$nobr" is-trigger-function="0" unique-function-name="htf$nobr" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365390" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="sql" function-signature="htf$nobr(ctext text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<nobr>',
                     ctext,
                     '</nobr>');

]]></complex-attribute>
                        <category _I_D="89694e67-bf64-4c85-baee-2ad4cd848ae2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a1a00c21-bf37-44fc-8966-54da514019b0" name="htf$noframesclose" subcategories-loading="none" object-loading="extended" context="htf$noframesclose" is-trigger-function="0" unique-function-name="htf$noframesclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365391" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$noframesclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</noframes>';

]]></complex-attribute>
                        <category _I_D="c2037b19-6543-4b89-b85a-91782c45386a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="aff70328-251d-4301-a164-09d560393ae2" name="htf$noframesopen" subcategories-loading="none" object-loading="extended" context="htf$noframesopen" is-trigger-function="0" unique-function-name="htf$noframesopen" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365392" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$noframesopen()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '<noframes>';

]]></complex-attribute>
                        <category _I_D="0eec5b5b-1c60-4a5f-9435-21beb8d9f9f4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9db991b4-d180-47ea-8bc3-5837953b63e7" name="htf$olistclose" subcategories-loading="none" object-loading="extended" context="htf$olistclose" is-trigger-function="0" unique-function-name="htf$olistclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365393" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$olistclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</ol>';

]]></complex-attribute>
                        <category _I_D="6a975886-a280-473d-ac15-e4d1e3f7dd42" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="236d0d20-4d43-40a7-87c0-653fcce40829" name="htf$olistopen" subcategories-loading="none" object-loading="extended" context="htf$olistopen" is-trigger-function="0" unique-function-name="htf$olistopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cclear text DEFAULT NULL::text, cwrap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365394" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cclear text, cwrap text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$olistopen(cclear text, cwrap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<ol',
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(cwrap, concat_ws('', ' wrap="', cwrap, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');
                     
]]></complex-attribute>
                        <category _I_D="3c307a57-08d0-4af7-b4e7-ea0db997acc5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b68dadba-1b03-4804-b77d-f3f7ffe17b99" name="htf$para" subcategories-loading="none" object-loading="extended" context="htf$para" is-trigger-function="0" unique-function-name="htf$para" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365397" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$para()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '<p>';

]]></complex-attribute>
                        <category _I_D="55769a2c-7bf1-4379-a6b3-df38ebb2ffe0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b4aa938c-4249-4e45-85a0-7cd7abc0a54a" name="htf$paragraph" subcategories-loading="none" object-loading="extended" context="htf$paragraph" is-trigger-function="0" unique-function-name="htf$paragraph" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="calign text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365395" volatility="IMMUTABLE" is-window="f" function-identity-arguments="calign text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$paragraph(calign text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<p',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' calign="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(cnowrap, concat_ws('', ' nowrap="', cnowrap, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="cbfff62e-acfa-4dfe-b766-363a74521a41" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fa5a2fd0-2a6f-4463-8c15-7688349407cb" name="htf$param" subcategories-loading="none" object-loading="extended" context="htf$param" is-trigger-function="0" unique-function-name="htf$param" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="cname text, cvalue text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365396" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cname text, cvalue text" overload-function-count="1" proc-language="sql" function-signature="htf$param(cname text, cvalue text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('', 
                     '<param name=',
                     cname,
                     ' value= "',
                     cvalue,
                     '" >');

]]></complex-attribute>
                        <category _I_D="3312ec27-e9ce-468a-a7bd-851d9e1d3a77" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9333384c-e202-4af2-9d07-bec58dd73cb3" name="htf$plaintext" subcategories-loading="none" object-loading="extended" context="htf$plaintext" is-trigger-function="0" unique-function-name="htf$plaintext" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365398" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$plaintext(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<plaintext',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</plaintext>');

]]></complex-attribute>
                        <category _I_D="2f466b13-aebf-442c-85d7-05843287e2ef" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="63fb25b9-c8d5-41e7-a0ef-8a5fb64916d8" name="htf$preclose" subcategories-loading="none" object-loading="extended" context="htf$preclose" is-trigger-function="0" unique-function-name="htf$preclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365399" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$preclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</pre>';

]]></complex-attribute>
                        <category _I_D="4dae283b-f808-4362-b426-e9f4682a4e54" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="99b57554-a3f5-42b1-b492-946aa0652333" name="htf$preopen" subcategories-loading="none" object-loading="extended" context="htf$preopen" is-trigger-function="0" unique-function-name="htf$preopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cclear text DEFAULT NULL::text, cwidth text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365400" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cclear text, cwidth text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$preopen(cclear text, cwidth text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('', 
                     '<pre',
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(cwidth, concat_ws('', ' width="', cwidth, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),  
                     '>');

]]></complex-attribute>
                        <category _I_D="bbe3a472-8bcb-4a53-8125-92ed1164dabd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f9c335d0-a272-4cc8-b109-42f6333eefc9" name="htf$s" subcategories-loading="none" object-loading="extended" context="htf$s" is-trigger-function="0" unique-function-name="htf$s" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365404" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$s(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<s',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</s>');

]]></complex-attribute>
                        <category _I_D="dfe426a2-ffdd-45f5-b451-dd1a4669b1d6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="86636b6e-9d29-47ff-88e8-41ec4f3dd00a" name="htf$sample" subcategories-loading="none" object-loading="extended" context="htf$sample" is-trigger-function="0" unique-function-name="htf$sample" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365401" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$sample(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<samp',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</samp>');

]]></complex-attribute>
                        <category _I_D="cc75e573-9eb0-4885-a548-2ad9212978fa" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9855891b-f41c-4884-925e-cd17716fc246" name="htf$script" subcategories-loading="none" object-loading="extended" context="htf$script" is-trigger-function="0" unique-function-name="htf$script" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="cscript text, clanguage text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365402" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cscript text, clanguage text" overload-function-count="1" proc-language="sql" function-signature="htf$script(cscript text, clanguage text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<script'||
                     aws_oracle_ext.htf$ifnotnull(clanguage, concat_ws('', ' language="', clanguage, '"')),
                     '>',
                     cscript,
                     '</script>');

]]></complex-attribute>
                        <category _I_D="0fd65043-a8ef-4363-87a3-fcb3d16cd97f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5e7e4459-ebef-4c42-b070-0518b6451a84" name="htf$small" subcategories-loading="none" object-loading="extended" context="htf$small" is-trigger-function="0" unique-function-name="htf$small" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365403" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$small(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
        '<SMALL',
        CASE
            WHEN cattributes IS NOT NULL THEN
                CONCAT_WS('', ' ', cattributes)
            ELSE
                ''
        END,
        '>',
        ctext,
        '</SMALL>'
    );

]]></complex-attribute>
                        <category _I_D="93176b59-5457-4883-9516-b46dee3fa424" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ac79fc25-3dfa-4e77-95d5-0635057c0a18" name="htf$strike" subcategories-loading="none" object-loading="extended" context="htf$strike" is-trigger-function="0" unique-function-name="htf$strike" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365405" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$strike(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<strike',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</strike>');

]]></complex-attribute>
                        <category _I_D="83c1b669-82a9-4784-b119-f1637cf9cda9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e812fd2d-47b9-424f-b0be-3baa380c19a0" name="htf$strong" subcategories-loading="none" object-loading="extended" context="htf$strong" is-trigger-function="0" unique-function-name="htf$strong" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365406" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$strong(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<strong',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</strong>');

]]></complex-attribute>
                        <category _I_D="75a3bba5-b122-47d0-9292-fe1e54182e39" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a5159b13-4529-4a00-a4aa-d22c647bd31a" name="htf$style" subcategories-loading="none" object-loading="extended" context="htf$style" is-trigger-function="0" unique-function-name="htf$style" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="cstyle text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365407" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cstyle text" overload-function-count="1" proc-language="sql" function-signature="htf$style(cstyle text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<style>',
                     cstyle,
                     '</style>');

]]></complex-attribute>
                        <category _I_D="d488702f-26b7-4d14-a72c-f5528fddd342" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="40696a4f-773a-4c6a-bad4-019663f7a539" name="htf$sub" subcategories-loading="none" object-loading="extended" context="htf$sub" is-trigger-function="0" unique-function-name="htf$sub" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365408" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, calign text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$sub(ctext text, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<sub',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),  
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</sub>');

]]></complex-attribute>
                        <category _I_D="4579466f-6ca0-49a5-9062-9bf5916115a2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="63f69416-692e-4378-be0a-52cd8061cc18" name="htf$sup" subcategories-loading="none" object-loading="extended" context="htf$sup" is-trigger-function="0" unique-function-name="htf$sup" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365409" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, calign text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$sup(ctext text, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<sup',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</sup>');

]]></complex-attribute>
                        <category _I_D="4650b093-c21c-4b2a-ba12-5a93360a7463" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6897d196-4a82-49ce-8801-29f3e6fbe93c" name="htf$tablecaption" subcategories-loading="none" object-loading="extended" context="htf$tablecaption" is-trigger-function="0" unique-function-name="htf$tablecaption" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="ccaption text, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365410" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ccaption text, calign text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$tablecaption(ccaption text, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<caption',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ccaption,
                     '</caption>');

]]></complex-attribute>
                        <category _I_D="6e8e70e8-9d59-4145-a610-1a561dc0846d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3d4afa69-fcb1-4c50-9578-aaed78259aa4" name="htf$tableclose" subcategories-loading="none" object-loading="extended" context="htf$tableclose" is-trigger-function="0" unique-function-name="htf$tableclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365411" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$tableclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</table>';

]]></complex-attribute>
                        <category _I_D="dfcf46b7-a4f9-4d19-a0af-b0e4752015f0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="81c0c1c3-ecf7-417b-8986-c267c5631294" name="htf$tabledata" subcategories-loading="none" object-loading="extended" context="htf$tabledata" is-trigger-function="0" unique-function-name="htf$tabledata" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cvalue text DEFAULT NULL::text, calign text DEFAULT NULL::text, cdp text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, crowspan text DEFAULT NULL::text, ccolspan text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="7" function-id="365412" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cvalue text, calign text, cdp text, cnowrap text, crowspan text, ccolspan text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$tabledata(cvalue text, calign text, cdp text, cnowrap text, crowspan text, ccolspan text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<td',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cdp, concat_ws('', ' dp="', cdp, '"')),
                     aws_oracle_ext.htf$ifnotnull(crowspan, concat_ws('', ' rowspan="', crowspan, '"')),
                     aws_oracle_ext.htf$ifnotnull(ccolspan, concat_ws('', ' colspan="', ccolspan, '"')),
                     aws_oracle_ext.htf$ifnotnull(cnowrap, concat_ws('', ' nowrap="nowrap"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     cvalue,
                     '</td>');

]]></complex-attribute>
                        <category _I_D="ffd3165a-acaa-451c-9026-e2fe32631c2c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d076b961-8f77-4264-9096-a6921590f9d4" name="htf$tableheader" subcategories-loading="none" object-loading="extended" context="htf$tableheader" is-trigger-function="0" unique-function-name="htf$tableheader" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cvalue text DEFAULT NULL::text, calign text DEFAULT NULL::text, cdp text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, crowspan text DEFAULT NULL::text, ccolspan text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="7" function-id="365413" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cvalue text, calign text, cdp text, cnowrap text, crowspan text, ccolspan text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$tableheader(cvalue text, calign text, cdp text, cnowrap text, crowspan text, ccolspan text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<th',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cdp, concat_ws('', ' dp="', cdp, '"')),
                     aws_oracle_ext.htf$ifnotnull(crowspan, concat_ws('', ' rowspan="', crowspan, '"')),
                     aws_oracle_ext.htf$ifnotnull(ccolspan, concat_ws('', ' colspan="', ccolspan, '"')),
                     aws_oracle_ext.htf$ifnotnull(cnowrap, concat_ws('', ' nowrap="nowrap"')),               
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     cvalue,
                     '</th>');

]]></complex-attribute>
                        <category _I_D="a6ea4b66-68ab-4b84-8126-91f104f8bcf8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f243e204-fbb1-4544-962c-546a03edc5b0" name="htf$tableopen" subcategories-loading="none" object-loading="extended" context="htf$tableopen" is-trigger-function="0" unique-function-name="htf$tableopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cborder text DEFAULT NULL::text, calign text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365414" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cborder text, calign text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$tableopen(cborder text, calign text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<table ',
                     aws_oracle_ext.htf$ifnotnull(cborder, concat_ws('', ' ', cborder)), 
                     aws_oracle_ext.htf$ifnotnull(cnowrap, concat_ws('', ' nowrap="nowrap"')),
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clearn="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="69df60c6-30ff-483c-9774-4a610989ca6b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e1c4eacb-8783-4c31-a479-8ef65a475db0" name="htf$tablerowclose" subcategories-loading="none" object-loading="extended" context="htf$tablerowclose" is-trigger-function="0" unique-function-name="htf$tablerowclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365415" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$tablerowclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</tr>';

]]></complex-attribute>
                        <category _I_D="8daf0b93-85dc-49d5-9fac-bd7ddc194c55" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9d72c07e-a8bb-4325-af07-3d38ae705cd6" name="htf$tablerowopen" subcategories-loading="none" object-loading="extended" context="htf$tablerowopen" is-trigger-function="0" unique-function-name="htf$tablerowopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="calign text DEFAULT NULL::text, cvalign text DEFAULT NULL::text, cdp text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365416" volatility="IMMUTABLE" is-window="f" function-identity-arguments="calign text, cvalign text, cdp text, cnowrap text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$tablerowopen(calign text, cvalign text, cdp text, cnowrap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<tr',
                     aws_oracle_ext.htf$ifnotnull(calign, concat_ws('', ' align="', calign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cvalign, concat_ws('', ' valign="', cvalign, '"')),
                     aws_oracle_ext.htf$ifnotnull(cdp, concat_ws('', ' dp="', cdp, '"')),
                     aws_oracle_ext.htf$ifnotnull(cnowrap, concat_ws('', ' nowrap="nowrap"')),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');
 
]]></complex-attribute>
                        <category _I_D="e651f445-48aa-42f8-9f01-5725380cd29c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c2f32ee2-59b0-4f3f-afdd-5a9a0aa8de34" name="htf$teletype" subcategories-loading="none" object-loading="extended" context="htf$teletype" is-trigger-function="0" unique-function-name="htf$teletype" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365417" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$teletype(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<tt',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</tt>');

]]></complex-attribute>
                        <category _I_D="4497ce73-2787-4786-9b43-8a66be55e2e8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0542fb90-99ad-4d43-acdf-7ef463df710b" name="htf$title" subcategories-loading="none" object-loading="extended" context="htf$title" is-trigger-function="0" unique-function-name="htf$title" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="ctitle text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365367" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctitle text" overload-function-count="1" proc-language="sql" function-signature="htf$title(ctitle text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT_WS('',
                     '<TITLE>',
                     ctitle,
                     '</TITLE>'
                    );

]]></complex-attribute>
                        <category _I_D="a4f20504-0099-447f-acd5-3eb23a0cfc61" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="38fbab5d-476a-4536-970f-724a0cf0c28d" name="htf$ulistclose" subcategories-loading="none" object-loading="extended" context="htf$ulistclose" is-trigger-function="0" unique-function-name="htf$ulistclose" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365418" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$ulistclose()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '</ul>';

]]></complex-attribute>
                        <category _I_D="33dda2f6-e625-491a-83c5-e955e31e59eb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="02aa467e-efcc-458b-857c-9deae42596b7" name="htf$ulistopen" subcategories-loading="none" object-loading="extended" context="htf$ulistopen" is-trigger-function="0" unique-function-name="htf$ulistopen" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="text" function-arguments="cclear text DEFAULT NULL::text, cwrap text DEFAULT NULL::text, cdingbat text DEFAULT NULL::text, csrc text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365419" volatility="IMMUTABLE" is-window="f" function-identity-arguments="cclear text, cwrap text, cdingbat text, csrc text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$ulistopen(cclear text, cwrap text, cdingbat text, csrc text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<ul',
                     aws_oracle_ext.htf$ifnotnull(cclear, concat_ws('', ' clear="', cclear, '"')),
                     aws_oracle_ext.htf$ifnotnull(cwrap, concat_ws('', ' wrap="', cwrap, '"')),
                     aws_oracle_ext.htf$ifnotnull(cdingbat, concat_ws('', ' dingbat="', cdingbat, '"')),
                     aws_oracle_ext.htf$ifnotnull(csrc, concat_ws('', ' csrc="', csrc)),
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>');

]]></complex-attribute>
                        <category _I_D="80d7a893-3dec-439c-9c83-1fb995b430ea" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1a1ff60c-8c24-4fca-901d-677aeaab6f95" name="htf$underline" subcategories-loading="none" object-loading="extended" context="htf$underline" is-trigger-function="0" unique-function-name="htf$underline" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365420" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$underline(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<u',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</u>');

]]></complex-attribute>
                        <category _I_D="6ba6b99b-230c-438a-b076-28ae1b306a89" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="edf128ef-9f16-49a0-8d50-6084fed243e3" name="htf$variable" subcategories-loading="none" object-loading="extended" context="htf$variable" is-trigger-function="0" unique-function-name="htf$variable" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365421" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="sql" function-signature="htf$variable(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT concat_ws('',
                     '<var',
                     aws_oracle_ext.htf$ifnotnull(cattributes, concat_ws('', ' ', cattributes)),
                     '>',
                     ctext,
                     '</var>');

]]></complex-attribute>
                        <category _I_D="c2b3bb6b-a9c6-4d0c-abd5-bd04153ca4ce" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ab8426fc-d8be-40d6-8470-48cbcc40b6b5" name="htf$wbr" subcategories-loading="none" object-loading="extended" context="htf$wbr" is-trigger-function="0" unique-function-name="htf$wbr" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365422" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htf$wbr()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT '<wbr>';

]]></complex-attribute>
                        <category _I_D="f86656ef-fc08-4259-9d78-83caa78f9a4d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cc228fa0-df5f-4087-9eba-2644a1e17cef" name="htp$address" subcategories-loading="none" object-loading="extended" context="htp$address" is-trigger-function="0" unique-function-name="htp$address" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cvalue text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365423" volatility="VOLATILE" is-window="f" function-identity-arguments="cvalue text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$address(cvalue text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

  PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$address(cvalue, cnowrap, cclear, cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="fd6ad98f-2dd8-42d5-8295-c41d96e79f17" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="92b0af6f-5584-423e-adf7-82205ef06beb" name="htp$anchor" subcategories-loading="none" object-loading="extended" context="htp$anchor" is-trigger-function="0" unique-function-name="htp$anchor" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="curl text, ctext text, cname text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365425" volatility="VOLATILE" is-window="f" function-identity-arguments="curl text, ctext text, cname text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$anchor(curl text, ctext text, cname text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$anchor(curl,ctext,cname,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="5d7d6333-861b-4432-9ab4-0ba8cb7d49c2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4ddf4424-9b9b-42f6-9ba7-642424128062" name="htp$anchor2" subcategories-loading="none" object-loading="extended" context="htp$anchor2" is-trigger-function="0" unique-function-name="htp$anchor2" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="curl text, ctext text, cname text DEFAULT NULL::text, ctarget text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365424" volatility="VOLATILE" is-window="f" function-identity-arguments="curl text, ctext text, cname text, ctarget text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$anchor2(curl text, ctext text, cname text, ctarget text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$anchor2(curl,ctext,cname,ctarget,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="58de6b65-03e5-4323-bfd7-5ad724dc193c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0d04fa10-d18a-44c6-b75a-6e4db4e9d242" name="htp$appletclose" subcategories-loading="none" object-loading="extended" context="htp$appletclose" is-trigger-function="0" unique-function-name="htp$appletclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365426" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$appletclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$appletClose());
    
END;
]]></complex-attribute>
                        <category _I_D="0a64ae2f-dca3-496f-b87a-4d56f5977448" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d83e646a-68e0-49b9-ad8c-5b48245f4b1c" name="htp$appletopen" subcategories-loading="none" object-loading="extended" context="htp$appletopen" is-trigger-function="0" unique-function-name="htp$appletopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric,numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="ccode text, cwidth numeric, cheight numeric, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365427" volatility="VOLATILE" is-window="f" function-identity-arguments="ccode text, cwidth numeric, cheight numeric, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$appletopen(ccode text, cwidth numeric, cheight numeric, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$appletOpen());
    
END;
]]></complex-attribute>
                        <category _I_D="89a69cca-2356-464a-a542-035c3f58d9d5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6207ff24-b90c-4b9a-9ddd-257a962901b0" name="htp$area" subcategories-loading="none" object-loading="extended" context="htp$area" is-trigger-function="0" unique-function-name="htp$area" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ccoords text, cshape text DEFAULT NULL::text, chref text DEFAULT NULL::text, cnohref text DEFAULT NULL::text, ctarget text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365428" volatility="VOLATILE" is-window="f" function-identity-arguments="ccoords text, cshape text, chref text, cnohref text, ctarget text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$area(ccoords text, cshape text, chref text, cnohref text, ctarget text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$area(ccoords,cshape,chref,cnohref,ctarget,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="7408d84f-c4b6-4491-8c10-b908d94fddd9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b74f0e41-01ae-434c-a469-d129c4ff8e12" name="htp$base" subcategories-loading="none" object-loading="extended" context="htp$base" is-trigger-function="0" unique-function-name="htp$base" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctarget text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365430" volatility="VOLATILE" is-window="f" function-identity-arguments="ctarget text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$base(ctarget text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$base(ctarget,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="6c148b34-176e-424c-ad6b-f9d78b7fa13a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5c638185-8a18-4d13-b458-4fe13f887d64" name="htp$basefont" subcategories-loading="none" object-loading="extended" context="htp$basefont" is-trigger-function="0" unique-function-name="htp$basefont" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="void" function-arguments="nsize numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365429" volatility="VOLATILE" is-window="f" function-identity-arguments="nsize numeric" overload-function-count="1" proc-language="plpgsql" function-signature="htp$basefont(nsize numeric)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$basefont(nsize));
    
END;
]]></complex-attribute>
                        <category _I_D="c9af543d-af07-4b1c-9656-04a23ef3bdc5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="84fa584d-dc60-43f6-a064-bbbe6d1c39b4" name="htp$bgsound" subcategories-loading="none" object-loading="extended" context="htp$bgsound" is-trigger-function="0" unique-function-name="htp$bgsound" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="csrc text, cloop text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365431" volatility="VOLATILE" is-window="f" function-identity-arguments="csrc text, cloop text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$bgsound(csrc text, cloop text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$bgsound(csrc,cloop,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="8aa7c8f5-352a-40c8-afda-00b963449791" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fd5209d2-a970-42b6-9c2e-c527f08a309d" name="htp$big" subcategories-loading="none" object-loading="extended" context="htp$big" is-trigger-function="0" unique-function-name="htp$big" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365432" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$big(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$big(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="a29e48a4-8ea6-4f42-97e8-8ba60bf9b823" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0a6d9b5d-0a97-4882-954d-54247e3b46ad" name="htp$blockquoteclose" subcategories-loading="none" object-loading="extended" context="htp$blockquoteclose" is-trigger-function="0" unique-function-name="htp$blockquoteclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365433" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$blockquoteclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$blockquoteClose());
    
END;
]]></complex-attribute>
                        <category _I_D="e49b2d78-7d41-4601-a2c6-19425a2b0dce" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="66e78d70-cfc1-4f0d-8d0e-6b7770f77348" name="htp$blockquoteopen" subcategories-loading="none" object-loading="extended" context="htp$blockquoteopen" is-trigger-function="0" unique-function-name="htp$blockquoteopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365434" volatility="VOLATILE" is-window="f" function-identity-arguments="cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$blockquoteopen(cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$blockquoteOpen(cnowrap,cclear,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="f157bf60-c166-4966-a7f6-3b99648e0ab3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fdbe7481-01b0-4e3e-b5db-20f71d77e373" name="htp$bodyclose" subcategories-loading="none" object-loading="extended" context="htp$bodyclose" is-trigger-function="0" unique-function-name="htp$bodyclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365435" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$bodyclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$bodyClose());
    
END;
]]></complex-attribute>
                        <category _I_D="bd7edf4e-c52e-4d37-b63f-ae4b048819b1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="18df3828-0709-4aa7-b238-ebf6e52a7e9f" name="htp$bodyopen" subcategories-loading="none" object-loading="extended" context="htp$bodyopen" is-trigger-function="0" unique-function-name="htp$bodyopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="cbackground text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365436" volatility="VOLATILE" is-window="f" function-identity-arguments="cbackground text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$bodyopen(cbackground text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$bodyOpen(cbackground,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="2e8a3e28-7642-47db-934d-1d853edfab62" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b7244118-3bc7-4981-958d-2d64b724cb0c" name="htp$bold" subcategories-loading="none" object-loading="extended" context="htp$bold" is-trigger-function="0" unique-function-name="htp$bold" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365437" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$bold(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$bold(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="a385880d-78b5-478b-ae5e-fd180d7fbc21" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e7aeea04-f65f-4a7e-ab1f-382beb0224bc" name="htp$br" subcategories-loading="none" object-loading="extended" context="htp$br" is-trigger-function="0" unique-function-name="htp$br" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365438" volatility="VOLATILE" is-window="f" function-identity-arguments="cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$br(cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$nl(cclear,cattributes);
    
END;
]]></complex-attribute>
                        <category _I_D="0bafe3f6-1e5b-4d17-b654-0fcc468be3cc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="654e335c-dc7a-4157-b143-bdb9636fbd8b" name="htp$center" subcategories-loading="none" object-loading="extended" context="htp$center" is-trigger-function="0" unique-function-name="htp$center" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365441" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$center(ctext text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$center(ctext));
    
END;
]]></complex-attribute>
                        <category _I_D="13ba702b-3162-49f3-b0a2-104c897d65aa" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ec66c08c-4690-43d5-bb88-d7fd73d1ba06" name="htp$centerclose" subcategories-loading="none" object-loading="extended" context="htp$centerclose" is-trigger-function="0" unique-function-name="htp$centerclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365439" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$centerclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$centerClose());
    
END;
]]></complex-attribute>
                        <category _I_D="760897f7-3ae7-4b0b-9dc3-1614538dda1f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c129fc73-a827-4235-9997-912a326d9912" name="htp$centeropen" subcategories-loading="none" object-loading="extended" context="htp$centeropen" is-trigger-function="0" unique-function-name="htp$centeropen" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365440" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$centeropen()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$centerOpen());
    
END;
]]></complex-attribute>
                        <category _I_D="93fd4525-0c6f-442c-8115-3ab9ac374203" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="50691363-18d6-4d9f-95b5-b3410d492aa9" name="htp$cite" subcategories-loading="none" object-loading="extended" context="htp$cite" is-trigger-function="0" unique-function-name="htp$cite" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365442" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$cite(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$cite(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="a162d338-49c6-45cc-b199-240275f07252" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="db1ff106-ecc2-44d6-89c6-8a0452437b3e" name="htp$code" subcategories-loading="none" object-loading="extended" context="htp$code" is-trigger-function="0" unique-function-name="htp$code" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365443" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$code(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$code(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="e4130df4-6fbc-41fb-bfc4-23ca03520663" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="52f3383c-117c-498f-a967-0f3b46337225" name="htp$comment" subcategories-loading="none" object-loading="extended" context="htp$comment" is-trigger-function="0" unique-function-name="htp$comment" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365444" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$comment(ctext text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$comment(ctext));
    
END;
]]></complex-attribute>
                        <category _I_D="c2e41e3b-f799-4cdd-8365-dadc608aaf4c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="81e84fac-6028-43f2-be83-832bd2d5fe6a" name="htp$dfn" subcategories-loading="none" object-loading="extended" context="htp$dfn" is-trigger-function="0" unique-function-name="htp$dfn" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365445" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$dfn(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$dfn(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="d109c4fe-d9a3-4bf5-896a-c4b9b8dbcb8a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4af746b9-6d7a-4c50-9311-4ad2555d0d0a" name="htp$dirlistclose" subcategories-loading="none" object-loading="extended" context="htp$dirlistclose" is-trigger-function="0" unique-function-name="htp$dirlistclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365446" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$dirlistclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$dirlistClose());
    
END;
]]></complex-attribute>
                        <category _I_D="14f910f1-b233-48fc-b91f-a9ca37baecd1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ac55ed70-1c79-4bb5-beae-de5a37b98bb4" name="htp$dirlistopen" subcategories-loading="none" object-loading="extended" context="htp$dirlistopen" is-trigger-function="0" unique-function-name="htp$dirlistopen" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365447" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$dirlistopen()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.dirlistOpen());
    
END;
]]></complex-attribute>
                        <category _I_D="a6f3b086-4804-4aae-919d-d88aee5bb970" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ca6faca8-c996-4c84-8219-2a2bfa34c413" name="htp$div" subcategories-loading="none" object-loading="extended" context="htp$div" is-trigger-function="0" unique-function-name="htp$div" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365448" volatility="VOLATILE" is-window="f" function-identity-arguments="calign text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$div(calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.div(calign,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="72646bba-f2e7-4433-afd7-809b3fdb9e7e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4489cd84-d3e9-4a8b-86ce-20a4f58768d7" name="htp$dlistclose" subcategories-loading="none" object-loading="extended" context="htp$dlistclose" is-trigger-function="0" unique-function-name="htp$dlistclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365449" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$dlistclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.dlistClose());
    
END;
]]></complex-attribute>
                        <category _I_D="904dd3a6-0d88-4230-af36-2bde369da7ed" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5b15e1f0-a732-4383-96f9-875384cdfdb4" name="htp$dlistdef" subcategories-loading="none" object-loading="extended" context="htp$dlistdef" is-trigger-function="0" unique-function-name="htp$dlistdef" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365450" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$dlistdef(ctext text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.dlistDef(ctext,cclear,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="df32022e-c1bf-40e8-a257-e049ee87c813" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c19ed681-e61f-4c12-8e3b-688ea31ba83e" name="htp$dlistopen" subcategories-loading="none" object-loading="extended" context="htp$dlistopen" is-trigger-function="0" unique-function-name="htp$dlistopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365451" volatility="VOLATILE" is-window="f" function-identity-arguments="cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$dlistopen(cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.dlistOpen(cclear,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="452f6ff5-60d9-42d1-9d4c-6c9ef142f869" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9937e659-df6a-4697-b507-184069960659" name="htp$dlistterm" subcategories-loading="none" object-loading="extended" context="htp$dlistterm" is-trigger-function="0" unique-function-name="htp$dlistterm" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365452" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$dlistterm(ctext text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.dlistTerm(ctext,cclear,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="359dcfff-f7f2-4b0a-a78e-9a494b1ae2e4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e8dee24e-c851-483b-a284-8366c765f6a5" name="htp$em" subcategories-loading="none" object-loading="extended" context="htp$em" is-trigger-function="0" unique-function-name="htp$em" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365454" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$em(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.em(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="b66d42b4-166d-4d1e-88c6-27bb0296f53c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e734e778-b0ef-4e91-9d4f-de5c00bfd3f3" name="htp$emphasis" subcategories-loading="none" object-loading="extended" context="htp$emphasis" is-trigger-function="0" unique-function-name="htp$emphasis" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365453" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$emphasis(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$emphasis(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="67b119af-82f4-4ad9-9a36-b9d7a0ea8120" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6af4df7e-179b-4340-bbe6-c634ea5d9b49" name="htp$escape_sc" subcategories-loading="none" object-loading="extended" context="htp$escape_sc" is-trigger-function="0" unique-function-name="htp$escape_sc" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365548" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$escape_sc(ctext text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

  PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$escape_sc(ctext));
    
END;
]]></complex-attribute>
                        <category _I_D="d0eaf737-4969-4244-9d60-2acfaf0d11fd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8452a636-a9f9-4305-b214-9530848da041" name="htp$fontclose" subcategories-loading="none" object-loading="extended" context="htp$fontclose" is-trigger-function="0" unique-function-name="htp$fontclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365455" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$fontclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$fontClose);
    
END;
]]></complex-attribute>
                        <category _I_D="078fd890-5c3a-4b4c-b140-90dc7dd6788f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dd045f8d-3da8-4e66-982f-8cbc253666b8" name="htp$fontopen" subcategories-loading="none" object-loading="extended" context="htp$fontopen" is-trigger-function="0" unique-function-name="htp$fontopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ccolor text DEFAULT NULL::text, cface text DEFAULT NULL::text, csize text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365456" volatility="VOLATILE" is-window="f" function-identity-arguments="ccolor text, cface text, csize text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$fontopen(ccolor text, cface text, csize text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$fontOpen(ccolor,cface,csize,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="c67b4e44-9b66-4d3a-b8f8-c9eeb2ea662d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2384042c-3767-48cf-8589-31f654dce600" name="htp$formcheckbox" subcategories-loading="none" object-loading="extended" context="htp$formcheckbox" is-trigger-function="0" unique-function-name="htp$formcheckbox" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, cvalue text DEFAULT 'on'::text, cchecked text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365457" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, cvalue text, cchecked text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formcheckbox(cname text, cvalue text, cchecked text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formCheckbox(cname,cvalue,cchecked,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="9a39d295-c0cd-49d7-b9f1-6bac739f8649" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7812ea28-5ea8-44b0-9fa8-00cf1c24a6b5" name="htp$formclose" subcategories-loading="none" object-loading="extended" context="htp$formclose" is-trigger-function="0" unique-function-name="htp$formclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365458" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formClose());
    
END;
]]></complex-attribute>
                        <category _I_D="0022c1d9-8103-4dd9-815c-e1ea9cea32db" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9938da79-6607-4491-b6e4-f60ccbd71187" name="htp$formfile" subcategories-loading="none" object-loading="extended" context="htp$formfile" is-trigger-function="0" unique-function-name="htp$formfile" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, caccept text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365459" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, caccept text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formfile(cname text, caccept text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formFile(cname,caccept,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="6abf7a37-e62a-42f8-9d10-c7360c536eea" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e0b08bea-b335-45cc-87ed-1320f24e60c6" name="htp$formhidden" subcategories-loading="none" object-loading="extended" context="htp$formhidden" is-trigger-function="0" unique-function-name="htp$formhidden" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, cvalue text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365460" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, cvalue text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formhidden(cname text, cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formHidden(cname,cvalue,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="9ff2042a-7eb0-4c2a-b3f0-920144a44a7d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="583256a1-574a-4ded-a6fe-c51a51ce7fc0" name="htp$formimage" subcategories-loading="none" object-loading="extended" context="htp$formimage" is-trigger-function="0" unique-function-name="htp$formimage" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, csrc text, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365461" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, csrc text, calign text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formimage(cname text, csrc text, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formImage(cname,csrc,calign,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="f4064882-4f45-4ccf-8ed1-888de528d73b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="30feb72f-e45c-44c7-b6ee-0c48bb66ab82" name="htp$formopen" subcategories-loading="none" object-loading="extended" context="htp$formopen" is-trigger-function="0" unique-function-name="htp$formopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="curl text, cmethod text DEFAULT 'post'::text, ctarget text DEFAULT NULL::text, cenctype text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365462" volatility="VOLATILE" is-window="f" function-identity-arguments="curl text, cmethod text, ctarget text, cenctype text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formopen(curl text, cmethod text, ctarget text, cenctype text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formOpen(curl,cmethod,ctarget,cenctype,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="aa4ea954-473a-4f91-af45-3d9733956c8d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b5ec2b18-1fd0-4b00-ba27-70e61e017626" name="htp$formpassword" subcategories-loading="none" object-loading="extended" context="htp$formpassword" is-trigger-function="0" unique-function-name="htp$formpassword" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, csize text DEFAULT NULL::text, cmaxlength text DEFAULT NULL::text, cvalue text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365463" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, csize text, cmaxlength text, cvalue text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formpassword(cname text, csize text, cmaxlength text, cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formPassword(cname,csize,cmaxlength,cvalue,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="c001fe42-ba26-4052-9c86-7512ada18c19" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a50827c2-165d-401c-96ae-1970451f01a6" name="htp$formradio" subcategories-loading="none" object-loading="extended" context="htp$formradio" is-trigger-function="0" unique-function-name="htp$formradio" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, cvalue text, cchecked text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365464" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, cvalue text, cchecked text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formradio(cname text, cvalue text, cchecked text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formRadio(cname,cvalue,cchecked,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="54f20f38-fe79-463b-a16f-fffd9594d6e2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8b61588f-9926-4f3c-9cac-c814e71e6b0f" name="htp$formreset" subcategories-loading="none" object-loading="extended" context="htp$formreset" is-trigger-function="0" unique-function-name="htp$formreset" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="cvalue text DEFAULT 'Reset'::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365465" volatility="VOLATILE" is-window="f" function-identity-arguments="cvalue text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formreset(cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formReset(cvalue,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="0b483680-bcc3-4162-b433-7acd809c995d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1039ae68-8b0b-40a9-aca3-9a710fc372bb" name="htp$formselectclose" subcategories-loading="none" object-loading="extended" context="htp$formselectclose" is-trigger-function="0" unique-function-name="htp$formselectclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365466" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formselectclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formSelectClose());
    
END;
]]></complex-attribute>
                        <category _I_D="8d6853c5-6de6-464c-ba54-01e3edd483d8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c37788e4-dc40-438a-82a8-e5c88af49909" name="htp$formselectopen" subcategories-loading="none" object-loading="extended" context="htp$formselectopen" is-trigger-function="0" unique-function-name="htp$formselectopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,numeric,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, cprompt text DEFAULT NULL::text, nsize numeric DEFAULT NULL::numeric, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365467" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, cprompt text, nsize numeric, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formselectopen(cname text, cprompt text, nsize numeric, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.formSelectOpen(cname,cprompt,nsize,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="b508062c-fe3d-442e-b42e-0829b2b2376b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5a0b01dd-3c8c-4177-b4c9-24f336cca8ef" name="htp$formselectoption" subcategories-loading="none" object-loading="extended" context="htp$formselectoption" is-trigger-function="0" unique-function-name="htp$formselectoption" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cvalue text, cselected text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365468" volatility="VOLATILE" is-window="f" function-identity-arguments="cvalue text, cselected text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formselectoption(cvalue text, cselected text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formSelectOption(cvalue,cselected,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="7be96092-7621-4bdc-a551-9272cc8d64bc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="edbc92fd-26ff-4d7f-9e5a-8ae28307dd16" name="htp$formsubmit" subcategories-loading="none" object-loading="extended" context="htp$formsubmit" is-trigger-function="0" unique-function-name="htp$formsubmit" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text DEFAULT NULL::text, cvalue text DEFAULT 'Submit'::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365469" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, cvalue text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formsubmit(cname text, cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formSubmit(cname,cvalue,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="8475f555-4a67-4001-8b1d-788dc93920b8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0dcd33e1-9eeb-4481-88cb-1620603cd3d5" name="htp$formtext" subcategories-loading="none" object-loading="extended" context="htp$formtext" is-trigger-function="0" unique-function-name="htp$formtext" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, csize text DEFAULT NULL::text, cmaxlength text DEFAULT NULL::text, cvalue text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365475" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, csize text, cmaxlength text, cvalue text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formtext(cname text, csize text, cmaxlength text, cvalue text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formText(cname,csize,cmaxlength,cvalue,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="7d6bc902-0aca-487a-9ea7-e72ab29fb21f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="06eb55d2-c5ed-494a-b757-f31a76c0c2ba" name="htp$formtextarea" subcategories-loading="none" object-loading="extended" context="htp$formtextarea" is-trigger-function="0" unique-function-name="htp$formtextarea" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric,numeric,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, nrows numeric, ncolumns numeric, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365474" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, nrows numeric, ncolumns numeric, calign text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formtextarea(cname text, nrows numeric, ncolumns numeric, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formTextarea(cname,nrows,ncolumns,calign,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="d35e8179-aead-4822-82d1-388c96a0f400" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7a3dbd6f-e70e-4c4e-a229-7a89011abbc0" name="htp$formtextarea2" subcategories-loading="none" object-loading="extended" context="htp$formtextarea2" is-trigger-function="0" unique-function-name="htp$formtextarea2" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric,numeric,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, nrows numeric, ncolumns numeric, calign text DEFAULT NULL::text, cwrap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365470" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, nrows numeric, ncolumns numeric, calign text, cwrap text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formtextarea2(cname text, nrows numeric, ncolumns numeric, calign text, cwrap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formTextarea2(cname,nrows,ncolumns,calign,cwrap,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="bfdae9d7-b040-4bda-8d09-4e3a56152b93" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bade416d-8aec-4137-93fd-1bb978d18551" name="htp$formtextareaclose" subcategories-loading="none" object-loading="extended" context="htp$formtextareaclose" is-trigger-function="0" unique-function-name="htp$formtextareaclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365471" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formtextareaclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formTextareaClose);
    
END;
]]></complex-attribute>
                        <category _I_D="918131c5-354e-458c-8b90-313093304459" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="24ce1395-3472-4805-a452-9ef033f94d59" name="htp$formtextareaopen" subcategories-loading="none" object-loading="extended" context="htp$formtextareaopen" is-trigger-function="0" unique-function-name="htp$formtextareaopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric,numeric,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, nrows numeric, ncolumns numeric, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365473" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, nrows numeric, ncolumns numeric, calign text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formtextareaopen(cname text, nrows numeric, ncolumns numeric, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formTextareaOpen(cname,nrows,ncolumns,calign,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="5e067cfd-13de-42ab-8af2-68b51bcb26de" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="63cae1ea-7690-4ff2-bb65-5a46b0d4cb2d" name="htp$formtextareaopen2" subcategories-loading="none" object-loading="extended" context="htp$formtextareaopen2" is-trigger-function="0" unique-function-name="htp$formtextareaopen2" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric,numeric,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, nrows numeric, ncolumns numeric, calign text DEFAULT NULL::text, cwrap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365472" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, nrows numeric, ncolumns numeric, calign text, cwrap text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$formtextareaopen2(cname text, nrows numeric, ncolumns numeric, calign text, cwrap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$formTextareaOpen2(cname,nrows,ncolumns,calign,cwrap,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="f03e313e-1650-49e1-8d37-76f9d9cda8e9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="21998547-6557-4305-8b7b-cfae5f7bcaeb" name="htp$frame" subcategories-loading="none" object-loading="extended" context="htp$frame" is-trigger-function="0" unique-function-name="htp$frame" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="csrc text, cname text DEFAULT NULL::text, cmarginwidth text DEFAULT NULL::text, cmarginheight text DEFAULT NULL::text, cscrolling text DEFAULT NULL::text, cnoresize text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="7" function-id="365478" volatility="VOLATILE" is-window="f" function-identity-arguments="csrc text, cname text, cmarginwidth text, cmarginheight text, cscrolling text, cnoresize text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$frame(csrc text, cname text, cmarginwidth text, cmarginheight text, cscrolling text, cnoresize text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$frame( csrc, cname, cmarginwidth, cmarginheight, cscrolling, cnoresize, cattributes ));
    
END;
]]></complex-attribute>
                        <category _I_D="89013539-dd13-46a2-a734-f452062a2658" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="32d459ae-7c11-45dd-b36a-b100b8717145" name="htp$framesetclose" subcategories-loading="none" object-loading="extended" context="htp$framesetclose" is-trigger-function="0" unique-function-name="htp$framesetclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365476" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$framesetclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$framesetClose);
    
END;
]]></complex-attribute>
                        <category _I_D="6917837b-c48a-4a13-afb6-0114c42670e0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e3a413e1-4be3-4d9b-a292-743b3cb06ad5" name="htp$framesetopen" subcategories-loading="none" object-loading="extended" context="htp$framesetopen" is-trigger-function="0" unique-function-name="htp$framesetopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="crows text DEFAULT NULL::text, ccols text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365477" volatility="VOLATILE" is-window="f" function-identity-arguments="crows text, ccols text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$framesetopen(crows text, ccols text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$framesetOpen( crows, ccols, cattributes ));
    
END;
]]></complex-attribute>
                        <category _I_D="3bc410a8-59db-4441-a07b-b4387152be21" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="52710176-a93a-48fb-a9eb-a960ae264605" name="htp$get_page" subcategories-loading="none" object-loading="extended" context="htp$get_page" is-trigger-function="0" unique-function-name="htp$get_page" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="t" ret-datatype="table" function-arguments="ppagepart text" schema-id="364663" function-type="RET_DATASET" count-arguments="1" function-id="365563" volatility="VOLATILE" is-window="f" function-identity-arguments="ppagepart text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$get_page(ppagepart text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vPagePart TEXT;
    vHeaderPosition BIGINT;
    rec RECORD;
    headerExists BOOLEAN DEFAULT FALSE;
BEGIN

    IF COALESCE(pPagePart, NULL) NOT IN ('headers', 'body') THEN

        vPagePart := 'body';

    ELSE

        vPagePart := pPagePart;

    END IF;

    FOR rec IN
    (
        SELECT id,
            column_value
        FROM aws_htbuf_arr
        ORDER BY id
    ) LOOP

        IF rec.column_value = E'\n\n' THEN

            vHeaderPosition := rec.id;
            headerExists := TRUE;
            EXIT;

        END IF;

        IF rec.column_value ~ '^\n$' THEN

            IF vHeaderPosition IS NOT NULL THEN

                vHeaderPosition := rec.id;
                headerExists := TRUE;
                EXIT;

            ELSE

                vHeaderPosition := rec.id;

            END IF;

        END IF;

        IF rec.column_value ~ '\n$' AND rec.column_value !~ '^\n$' THEN

            vHeaderPosition := rec.id;

        END IF;

        IF rec.column_value !~ '\n$' AND vHeaderPosition IS NOT NULL THEN

            vHeaderPosition := NULL;

        END IF;


    END LOOP;

    IF NOT headerExists THEN

        vHeaderPosition := NULL;

    END IF;

    IF vPagePart = 'headers' THEN

        RETURN QUERY
        SELECT aha.column_value
        FROM aws_htbuf_arr aha
        WHERE aha.id < vHeaderPosition
        ORDER BY id;

    ELSE

        RETURN QUERY
        SELECT aha.column_value
        FROM aws_htbuf_arr aha
        WHERE aha.id > COALESCE(vHeaderPosition, 0)
        ORDER BY id;

    END IF;

    RETURN;

END;    
]]></complex-attribute>
                        <category _I_D="da64668d-6859-4b95-a59a-e30927884d25" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="237daadd-7aec-413c-87b9-1ff96708f22e" name="htp$headclose" subcategories-loading="none" object-loading="extended" context="htp$headclose" is-trigger-function="0" unique-function-name="htp$headclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365479" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$headclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$headClose());
    
END;
]]></complex-attribute>
                        <category _I_D="adc4aafd-bff7-4dcb-82d7-f13f395997ce" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e62e1099-99f2-4d87-8a1d-cc8be84fce75" name="htp$header" subcategories-loading="none" object-loading="extended" context="htp$header" is-trigger-function="0" unique-function-name="htp$header" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="nsize numeric, cheader text, calign text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365480" volatility="VOLATILE" is-window="f" function-identity-arguments="nsize numeric, cheader text, calign text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$header(nsize numeric, cheader text, calign text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$header(nsize,cheader,calign,cnowrap,cclear,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="7ff9be57-c858-4c44-b091-6c655fffeb91" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2753f9bb-8191-42e1-8bcb-f8a7d9ded347" name="htp$headopen" subcategories-loading="none" object-loading="extended" context="htp$headopen" is-trigger-function="0" unique-function-name="htp$headopen" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365481" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$headopen()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$headOpen());
    
END;
]]></complex-attribute>
                        <category _I_D="b12a373e-e30f-4d36-ae11-4a744fe0bc66" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9b2147a5-df0a-4cf7-a26a-1c9bd7e52a2f" name="htp$hr" subcategories-loading="none" object-loading="extended" context="htp$hr" is-trigger-function="0" unique-function-name="htp$hr" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cclear text DEFAULT NULL::text, csrc text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365482" volatility="VOLATILE" is-window="f" function-identity-arguments="cclear text, csrc text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$hr(cclear text, csrc text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$hr(cclear, csrc, cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="51882f85-2187-4db0-96a0-567424ae37c1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dc2c74b3-771f-4787-a99f-3b40d95c9b2d" name="htp$htitle" subcategories-loading="none" object-loading="extended" context="htp$htitle" is-trigger-function="0" unique-function-name="htp$htitle" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,numeric,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctitle text, nsize numeric DEFAULT 1, calign text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365483" volatility="VOLATILE" is-window="f" function-identity-arguments="ctitle text, nsize numeric, calign text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$htitle(ctitle text, nsize numeric, calign text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$htitle(ctitle,nsize,calign,cnowrap,cclear,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="336f5543-0e8e-495a-b821-d18cd7374179" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="184a3ef8-6c8d-45ce-a249-978b16cfe96c" name="htp$htmlclose" subcategories-loading="none" object-loading="extended" context="htp$htmlclose" is-trigger-function="0" unique-function-name="htp$htmlclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365484" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$htmlclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$htmlClose());
    
END;
]]></complex-attribute>
                        <category _I_D="92d5e1d1-f0b4-456c-af14-54146649b403" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="03565a7d-ed94-4baa-8ba9-82472924bb03" name="htp$htmlopen" subcategories-loading="none" object-loading="extended" context="htp$htmlopen" is-trigger-function="0" unique-function-name="htp$htmlopen" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365485" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$htmlopen()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$htmlOpen);
    
END;
]]></complex-attribute>
                        <category _I_D="f5855b87-edb0-461d-90fa-36de50883562" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7ac17a95-f925-4b28-923e-d57e2177e470" name="htp$img" subcategories-loading="none" object-loading="extended" context="htp$img" is-trigger-function="0" unique-function-name="htp$img" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="curl text, calign text DEFAULT NULL::text, calt text DEFAULT NULL::text, cismap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365487" volatility="VOLATILE" is-window="f" function-identity-arguments="curl text, calign text, calt text, cismap text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$img(curl text, calign text, calt text, cismap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$img(curl,calign,calt,cismap,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="cbe87ca5-8470-4c5a-acb0-bb074c1d3db1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="742d6803-01f7-49ee-a92e-019375d9c277" name="htp$img2" subcategories-loading="none" object-loading="extended" context="htp$img2" is-trigger-function="0" unique-function-name="htp$img2" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="curl text, calign text DEFAULT NULL::text, calt text DEFAULT NULL::text, cismap text DEFAULT NULL::text, cusemap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365486" volatility="VOLATILE" is-window="f" function-identity-arguments="curl text, calign text, calt text, cismap text, cusemap text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$img2(curl text, calign text, calt text, cismap text, cusemap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$img2(curl,calign,calt,cismap,cusemap,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="c53936f2-8b52-4f8e-b6cb-37e4c11fc9bc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6d96a9a8-c4a6-47c7-93e9-f374cba3c268" name="htp$init" subcategories-loading="none" object-loading="extended" context="htp$init" is-trigger-function="0" unique-function-name="htp$init" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365298" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="htp$init()">
                        <complex-attribute name="sql"><![CDATA[

    CREATE TEMPORARY TABLE IF NOT EXISTS aws_cgi_env
    (
        id BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        cgi_var_name TEXT NULL,
        cgi_var_val TEXT NULL,
        CONSTRAINT ht_headers_pk PRIMARY KEY (id)
    );

    CREATE TEMPORARY TABLE IF NOT EXISTS aws_htbuf_arr
    (
        id BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        column_value TEXT NULL,
        CONSTRAINT htbuf_arr_pk PRIMARY KEY (id)
    );

    TRUNCATE TABLE aws_htbuf_arr;

    CREATE TEMPORARY TABLE IF NOT EXISTS aws_cgi_cookie
    (
        cookie_name TEXT NOT NULL,
        cookie_val_id BIGINT NOT null GENERATED ALWAYS AS IDENTITY,
        cookie_val TEXT NULL,
        CONSTRAINT aws_cgi_cookies_pk PRIMARY KEY (cookie_name)
    );

    TRUNCATE TABLE aws_cgi_cookie;

]]></complex-attribute>
                        <category _I_D="fd627f8e-0218-4bcc-8bc8-651156234098" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bad99f79-f414-4b9c-a87b-0ab652aa1fc2" name="htp$isindex" subcategories-loading="none" object-loading="extended" context="htp$isindex" is-trigger-function="0" unique-function-name="htp$isindex" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="cprompt text DEFAULT NULL::text, curl text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365488" volatility="VOLATILE" is-window="f" function-identity-arguments="cprompt text, curl text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$isindex(cprompt text, curl text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$isindex(cprompt, curl));
    
END;
]]></complex-attribute>
                        <category _I_D="a15a14eb-9233-4b82-8b22-66634563b924" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7a71bd44-032c-4a38-a241-20abb4d16e7a" name="htp$italic" subcategories-loading="none" object-loading="extended" context="htp$italic" is-trigger-function="0" unique-function-name="htp$italic" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365489" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$italic(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$italic(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="5997ed83-7855-428d-9d17-98e1add4cc34" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bb596097-8a49-4182-bab5-c56b512f595f" name="htp$kbd" subcategories-loading="none" object-loading="extended" context="htp$kbd" is-trigger-function="0" unique-function-name="htp$kbd" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365490" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$kbd(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$kbd(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="b7b7e666-09c7-4297-82a7-44537f7b13bf" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5e01ce95-386b-47e5-baf7-7da90b38cd58" name="htp$keyboard" subcategories-loading="none" object-loading="extended" context="htp$keyboard" is-trigger-function="0" unique-function-name="htp$keyboard" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365491" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$keyboard(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$keyboard(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="96f91661-0d3a-4943-9396-f13e1a00d9c3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1b396bc7-3076-4fd1-9e94-e6e2ad12f645" name="htp$line" subcategories-loading="none" object-loading="extended" context="htp$line" is-trigger-function="0" unique-function-name="htp$line" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cclear text DEFAULT NULL::text, csrc text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365492" volatility="VOLATILE" is-window="f" function-identity-arguments="cclear text, csrc text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$line(cclear text, csrc text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$hr(cclear, csrc, cattributes);
    
END;
]]></complex-attribute>
                        <category _I_D="aa75efa6-a804-49a9-9557-01503a4a28fd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c7dabafe-ab4d-4d34-a6d1-013fe94ab321" name="htp$linkrel" subcategories-loading="none" object-loading="extended" context="htp$linkrel" is-trigger-function="0" unique-function-name="htp$linkrel" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="crel text, curl text, ctitle text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365493" volatility="VOLATILE" is-window="f" function-identity-arguments="crel text, curl text, ctitle text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$linkrel(crel text, curl text, ctitle text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$linkRel(crel, curl, ctitle));
    
END;
]]></complex-attribute>
                        <category _I_D="b04ff712-50fd-446f-a45a-83eb7b5f309e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1d194739-89f8-498f-91fe-2cec49f2b3ee" name="htp$linkrev" subcategories-loading="none" object-loading="extended" context="htp$linkrev" is-trigger-function="0" unique-function-name="htp$linkrev" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="crev text, curl text, ctitle text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365494" volatility="VOLATILE" is-window="f" function-identity-arguments="crev text, curl text, ctitle text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$linkrev(crev text, curl text, ctitle text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$linkRev(crev, curl, ctitle));
    
END;
]]></complex-attribute>
                        <category _I_D="0ed5e1e5-13df-4743-9ebc-30669e0e2e53" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="954882a0-9cd0-4dd2-a5c4-960f23370238" name="htp$listheader" subcategories-loading="none" object-loading="extended" context="htp$listheader" is-trigger-function="0" unique-function-name="htp$listheader" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365495" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$listheader(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$listHeader(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="89a0be42-f530-4908-951b-2acd713d0765" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dbb19fd2-23d5-4f79-b2bf-612cd2ce22d8" name="htp$listingclose" subcategories-loading="none" object-loading="extended" context="htp$listingclose" is-trigger-function="0" unique-function-name="htp$listingclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365496" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$listingclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$listingClose());
    
END;
]]></complex-attribute>
                        <category _I_D="dc77de29-22a0-4e5e-955b-2a792ce1ccf9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ad163b6a-5660-48ad-ac8a-67cbdc7b6fc9" name="htp$listingopen" subcategories-loading="none" object-loading="extended" context="htp$listingopen" is-trigger-function="0" unique-function-name="htp$listingopen" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365497" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$listingopen()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$listingOpen());
    
END;
]]></complex-attribute>
                        <category _I_D="313d5aba-d321-4f98-aa02-e25e05137259" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2d314ca3-0a7c-43f9-af6a-ab9e067f74b0" name="htp$listitem" subcategories-loading="none" object-loading="extended" context="htp$listitem" is-trigger-function="0" unique-function-name="htp$listitem" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cdingbat text DEFAULT NULL::text, csrc text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365498" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cclear text, cdingbat text, csrc text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$listitem(ctext text, cclear text, cdingbat text, csrc text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$listItem(ctext,cclear,cdingbat,csrc,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="a5c29407-b4d4-4b47-8d31-4c5460503289" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a576dd48-e2e0-4a0e-9255-06bde66328d9" name="htp$mailto" subcategories-loading="none" object-loading="extended" context="htp$mailto" is-trigger-function="0" unique-function-name="htp$mailto" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="caddress text, ctext text, cname text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365499" volatility="VOLATILE" is-window="f" function-identity-arguments="caddress text, ctext text, cname text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$mailto(caddress text, ctext text, cname text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$mailto(caddress,ctext,cname,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="d92efcf8-c3e7-40ef-9f83-874941e71646" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f8c38f98-8701-456a-89d6-57847283c42e" name="htp$mapclose" subcategories-loading="none" object-loading="extended" context="htp$mapclose" is-trigger-function="0" unique-function-name="htp$mapclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365500" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$mapclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$mapClose());
    
END;
]]></complex-attribute>
                        <category _I_D="78560fba-a8e7-4bd6-bd8f-77e334f2d31b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f11ee01e-0eb3-4ed5-937f-5ccf047b02af" name="htp$mapopen" subcategories-loading="none" object-loading="extended" context="htp$mapopen" is-trigger-function="0" unique-function-name="htp$mapopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365501" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$mapopen(cname text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$mapOpen(cname,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="d30b085d-68b6-477b-bef7-4ff40d69bb02" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fbf31c31-f47f-4837-862c-e6ca6001c2a4" name="htp$menulistclose" subcategories-loading="none" object-loading="extended" context="htp$menulistclose" is-trigger-function="0" unique-function-name="htp$menulistclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365502" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$menulistclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$menulistClose());
    
END;
]]></complex-attribute>
                        <category _I_D="1eaaa93e-b662-425c-98a4-c7042ca4a508" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="61764cbf-b746-46f8-a7ca-e94c2cf4b1fc" name="htp$menulistopen" subcategories-loading="none" object-loading="extended" context="htp$menulistopen" is-trigger-function="0" unique-function-name="htp$menulistopen" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365503" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$menulistopen()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$menulistOpen());
    
END;
]]></complex-attribute>
                        <category _I_D="0c029d6a-46a6-46d9-8137-205d01f3bd98" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="db10eb0f-8ecb-4ad8-98c9-29d3ac3dc312" name="htp$meta" subcategories-loading="none" object-loading="extended" context="htp$meta" is-trigger-function="0" unique-function-name="htp$meta" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="chttp_equiv text, cname text, ccontent text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365504" volatility="VOLATILE" is-window="f" function-identity-arguments="chttp_equiv text, cname text, ccontent text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$meta(chttp_equiv text, cname text, ccontent text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$meta(chttp_equiv, cname, ccontent));
    
END;
]]></complex-attribute>
                        <category _I_D="12c4705a-e554-4f2f-ae66-efcc11f4bf45" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="22411cba-ed35-4445-bcbd-c10aa198bce9" name="htp$nextid" subcategories-loading="none" object-loading="extended" context="htp$nextid" is-trigger-function="0" unique-function-name="htp$nextid" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="cidentifier text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365505" volatility="VOLATILE" is-window="f" function-identity-arguments="cidentifier text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$nextid(cidentifier text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$nextid(cidentifier));
    
END;
]]></complex-attribute>
                        <category _I_D="3c4b283f-ed36-4d8b-bffa-300ae3a5e7eb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ea103999-663a-455f-a245-56e2e7acaecd" name="htp$nl" subcategories-loading="none" object-loading="extended" context="htp$nl" is-trigger-function="0" unique-function-name="htp$nl" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365506" volatility="VOLATILE" is-window="f" function-identity-arguments="cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$nl(cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$nl(cclear,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="40f140fa-9962-4956-8380-da27714a33f4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="01e2cb9e-9c8a-483b-af0f-0262d8933739" name="htp$nobr" subcategories-loading="none" object-loading="extended" context="htp$nobr" is-trigger-function="0" unique-function-name="htp$nobr" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365507" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$nobr(ctext text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$nobr(ctext));
    
END;
]]></complex-attribute>
                        <category _I_D="a17446d3-b53a-4a2e-b10c-5cfd5e5808ea" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="66847282-6295-4675-8426-814b02da40eb" name="htp$noframesclose" subcategories-loading="none" object-loading="extended" context="htp$noframesclose" is-trigger-function="0" unique-function-name="htp$noframesclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365508" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$noframesclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$noframesClose());
    
END;
]]></complex-attribute>
                        <category _I_D="721ee9af-30fc-4478-8777-76b5217cc99c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="26ca0e4a-27d4-4ce5-860b-3b4044055b85" name="htp$noframesopen" subcategories-loading="none" object-loading="extended" context="htp$noframesopen" is-trigger-function="0" unique-function-name="htp$noframesopen" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365509" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$noframesopen()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$noframesOpen());
    
END;
]]></complex-attribute>
                        <category _I_D="0a11190b-0e2e-4457-b5e0-650dab8ecbe6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="316f5124-bb8c-4cab-a315-88560bfc59a4" name="htp$olistclose" subcategories-loading="none" object-loading="extended" context="htp$olistclose" is-trigger-function="0" unique-function-name="htp$olistclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365510" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$olistclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$olistClose());
    
END;
]]></complex-attribute>
                        <category _I_D="ff5a23cd-b6e5-4819-b32e-28434800a959" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="09f1ba3a-37db-4926-895a-20239ef22f64" name="htp$olistopen" subcategories-loading="none" object-loading="extended" context="htp$olistopen" is-trigger-function="0" unique-function-name="htp$olistopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cclear text DEFAULT NULL::text, cwrap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365511" volatility="VOLATILE" is-window="f" function-identity-arguments="cclear text, cwrap text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$olistopen(cclear text, cwrap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$olistOpen(cclear,cwrap,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="575e4f3f-ddbd-4080-9a15-1203c0b59b3f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c1e621ef-2d12-4ad1-9114-ac74db899795" name="htp$p" subcategories-loading="none" object-loading="extended" context="htp$p(cbuf text)" is-trigger-function="0" unique-function-name="htp$p(cbuf text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="cbuf text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365558" volatility="VOLATILE" is-window="f" function-identity-arguments="cbuf text" overload-function-count="3" proc-language="plpgsql" function-signature="htp$p(cbuf text)" unique-suffix="(cbuf text)" routine-number="365558">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    INSERT INTO aws_htbuf_arr(column_value)
    SELECT CONCAT(
        cbuf,
        E'\n'
    );
    
END;
]]></complex-attribute>
                        <category _I_D="099db648-72ab-4076-aac7-6a4ea151ff87" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9d486489-d95c-47ad-b4a4-0c83f23a84a5" name="htp$p" subcategories-loading="none" object-loading="extended" context="htp$p(dbuf timestamp without time zone)" is-trigger-function="0" unique-function-name="htp$p(dbuf timestamp without time zone)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="timestamp without time zone" is-returning-set="f" ret-datatype="void" function-arguments="dbuf timestamp without time zone" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365559" volatility="VOLATILE" is-window="f" function-identity-arguments="dbuf timestamp without time zone" overload-function-count="3" proc-language="plpgsql" function-signature="htp$p(dbuf timestamp without time zone)" unique-suffix="(dbuf timestamp without time zone)" routine-number="365559">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    INSERT INTO aws_htbuf_arr(column_value)
    SELECT CONCAT(
        aws_oracle_ext.to_char(dbuf),
        E'\n'
    );
    
END;
]]></complex-attribute>
                        <category _I_D="09da4e54-bfa8-49c7-9b3f-4c31acdfc05d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="81ef6601-fd8a-48a6-a1f8-d3b2b6475cee" name="htp$p" subcategories-loading="none" object-loading="extended" context="htp$p(nbuf double precision)" is-trigger-function="0" unique-function-name="htp$p(nbuf double precision)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision" is-returning-set="f" ret-datatype="void" function-arguments="nbuf double precision" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365549" volatility="VOLATILE" is-window="f" function-identity-arguments="nbuf double precision" overload-function-count="3" proc-language="plpgsql" function-signature="htp$p(nbuf double precision)" unique-suffix="(nbuf double precision)" routine-number="365549">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    INSERT INTO aws_htbuf_arr(column_value)
    SELECT CONCAT(
        aws_oracle_ext.to_char(nbuf),
        E'\n'
    );
    
END;
]]></complex-attribute>
                        <category _I_D="87a4bdc2-02bc-481a-b1ea-1671a03a866e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f865c552-980c-43e7-8e1c-0e9c8c11cebd" name="htp$para" subcategories-loading="none" object-loading="extended" context="htp$para" is-trigger-function="0" unique-function-name="htp$para" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365514" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$para()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

  PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$para());
    
END;
]]></complex-attribute>
                        <category _I_D="0f8be13c-ec34-4391-b688-c82d168e0910" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="00f6e71f-2928-45b1-b66a-7681cfb9642b" name="htp$paragraph" subcategories-loading="none" object-loading="extended" context="htp$paragraph" is-trigger-function="0" unique-function-name="htp$paragraph" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="calign text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365512" volatility="VOLATILE" is-window="f" function-identity-arguments="calign text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$paragraph(calign text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$paragraph(calign,cnowrap,cclear,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="81f68525-f9ce-41fa-8aa0-776c2832c71d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3879f2c3-d587-44ea-aa27-dd0e56ff92f3" name="htp$param" subcategories-loading="none" object-loading="extended" context="htp$param" is-trigger-function="0" unique-function-name="htp$param" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="cname text, cvalue text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365513" volatility="VOLATILE" is-window="f" function-identity-arguments="cname text, cvalue text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$param(cname text, cvalue text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$param(cname,cvalue));
    
END;
]]></complex-attribute>
                        <category _I_D="6e5207ca-194e-4688-bbfd-49b1a2badf6d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e19aa8a3-3398-43f0-9957-f7f92f3d3fec" name="htp$plaintext" subcategories-loading="none" object-loading="extended" context="htp$plaintext" is-trigger-function="0" unique-function-name="htp$plaintext" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365515" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$plaintext(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$plaintext(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="12bc5f17-c242-48fd-ba50-10b056ea8554" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f0400217-602f-4f1a-9653-9cbeeb756936" name="htp$preclose" subcategories-loading="none" object-loading="extended" context="htp$preclose" is-trigger-function="0" unique-function-name="htp$preclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365516" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$preclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$$preClose());
    
END;
]]></complex-attribute>
                        <category _I_D="25ccdda7-9ef4-44e9-9584-233130084025" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3decb4fa-35c5-4478-83de-7daa7466f979" name="htp$preopen" subcategories-loading="none" object-loading="extended" context="htp$preopen" is-trigger-function="0" unique-function-name="htp$preopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cclear text DEFAULT NULL::text, cwidth text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365517" volatility="VOLATILE" is-window="f" function-identity-arguments="cclear text, cwidth text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$preopen(cclear text, cwidth text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$preOpen(cclear,cwidth,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="f9acde59-7488-49e9-96a3-74cec0fe1a53" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a62da811-ef49-413c-8330-fd903ef586cf" name="htp$print" subcategories-loading="none" object-loading="extended" context="htp$print(cbuf text)" is-trigger-function="0" unique-function-name="htp$print(cbuf text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="cbuf text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365552" volatility="VOLATILE" is-window="f" function-identity-arguments="cbuf text" overload-function-count="3" proc-language="plpgsql" function-signature="htp$print(cbuf text)" unique-suffix="(cbuf text)" routine-number="365552">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    INSERT INTO aws_htbuf_arr(column_value)
    SELECT CONCAT(
        cbuf,
        E'\n'
    );
    
END;
]]></complex-attribute>
                        <category _I_D="ab036dc4-27ae-40b4-be29-2dcc9eff6d9b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4baa89d6-1e5c-471f-a9f1-7dec6ef6ac2c" name="htp$print" subcategories-loading="none" object-loading="extended" context="htp$print(dbuf timestamp without time zone)" is-trigger-function="0" unique-function-name="htp$print(dbuf timestamp without time zone)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="timestamp without time zone" is-returning-set="f" ret-datatype="void" function-arguments="dbuf timestamp without time zone" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365553" volatility="VOLATILE" is-window="f" function-identity-arguments="dbuf timestamp without time zone" overload-function-count="3" proc-language="plpgsql" function-signature="htp$print(dbuf timestamp without time zone)" unique-suffix="(dbuf timestamp without time zone)" routine-number="365553">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    INSERT INTO aws_htbuf_arr(column_value)
    SELECT CONCAT(
        aws_oracle_ext.to_char(dbuf),
        E'\n'
    );
    
END;
]]></complex-attribute>
                        <category _I_D="8bd5b036-5fed-457a-9e4b-c46af99b6ec9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d696b927-1d04-4700-b65c-3adc0c65846e" name="htp$print" subcategories-loading="none" object-loading="extended" context="htp$print(nbuf double precision)" is-trigger-function="0" unique-function-name="htp$print(nbuf double precision)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision" is-returning-set="f" ret-datatype="void" function-arguments="nbuf double precision" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365550" volatility="VOLATILE" is-window="f" function-identity-arguments="nbuf double precision" overload-function-count="3" proc-language="plpgsql" function-signature="htp$print(nbuf double precision)" unique-suffix="(nbuf double precision)" routine-number="365550">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    INSERT INTO aws_htbuf_arr(column_value)
    SELECT CONCAT(
        aws_oracle_ext.to_char(nbuf),
        E'\n'
    );
    
END;
]]></complex-attribute>
                        <category _I_D="4c69d66e-71de-409c-90ae-ccc2f93e16cf" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0296b064-cf86-4548-9014-13601ec78b4a" name="htp$prints" subcategories-loading="none" object-loading="extended" context="htp$prints" is-trigger-function="0" unique-function-name="htp$prints" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365551" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$prints(ctext text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$escape_sc(ctext));
    
END;
]]></complex-attribute>
                        <category _I_D="b9cf281b-86f5-459c-9979-f5d5cd7458d6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d237f85a-55b5-4252-9520-03adc4b4f15f" name="htp$prn" subcategories-loading="none" object-loading="extended" context="htp$prn(cbuf text)" is-trigger-function="0" unique-function-name="htp$prn(cbuf text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="cbuf text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365555" volatility="VOLATILE" is-window="f" function-identity-arguments="cbuf text" overload-function-count="3" proc-language="plpgsql" function-signature="htp$prn(cbuf text)" unique-suffix="(cbuf text)" routine-number="365555">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    INSERT INTO aws_htbuf_arr(column_value)
    SELECT CONCAT(
        cbuf
    );
    
END;
]]></complex-attribute>
                        <category _I_D="782c35da-bdd7-40f8-a023-d4e25753fe43" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8a5faa7c-a351-4228-86f9-7ed6b07a2ed8" name="htp$prn" subcategories-loading="none" object-loading="extended" context="htp$prn(dbuf timestamp without time zone)" is-trigger-function="0" unique-function-name="htp$prn(dbuf timestamp without time zone)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="timestamp without time zone" is-returning-set="f" ret-datatype="void" function-arguments="dbuf timestamp without time zone" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365556" volatility="VOLATILE" is-window="f" function-identity-arguments="dbuf timestamp without time zone" overload-function-count="3" proc-language="plpgsql" function-signature="htp$prn(dbuf timestamp without time zone)" unique-suffix="(dbuf timestamp without time zone)" routine-number="365556">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    INSERT INTO aws_htbuf_arr(column_value)
    SELECT CONCAT(
        aws_oracle_ext.to_char(dbuf)
    );
    
END;
]]></complex-attribute>
                        <category _I_D="c0e9aba9-4eaf-4e17-9de5-6652582eb76a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="af096aee-d19a-4add-8af4-81357e0af955" name="htp$prn" subcategories-loading="none" object-loading="extended" context="htp$prn(nbuf double precision)" is-trigger-function="0" unique-function-name="htp$prn(nbuf double precision)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision" is-returning-set="f" ret-datatype="void" function-arguments="nbuf double precision" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365554" volatility="VOLATILE" is-window="f" function-identity-arguments="nbuf double precision" overload-function-count="3" proc-language="plpgsql" function-signature="htp$prn(nbuf double precision)" unique-suffix="(nbuf double precision)" routine-number="365554">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    INSERT INTO aws_htbuf_arr(column_value)
    SELECT CONCAT(
        aws_oracle_ext.to_char(nbuf)
    );
    
END;
]]></complex-attribute>
                        <category _I_D="1ab6287c-55a9-407b-9bd9-0b283d5672ba" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="997039f5-d815-4e9e-a408-dfde65c52819" name="htp$ps" subcategories-loading="none" object-loading="extended" context="htp$ps" is-trigger-function="0" unique-function-name="htp$ps" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365557" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$ps(ctext text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$escape_sc(ctext));
    
END;
]]></complex-attribute>
                        <category _I_D="583ecd84-cda7-4f14-9873-9e4ae8dec875" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="587a548a-9395-4f76-8188-2de5113b3365" name="htp$putraw" subcategories-loading="none" object-loading="extended" context="htp$putraw" is-trigger-function="0" unique-function-name="htp$putraw" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bytea,integer" is-returning-set="f" ret-datatype="void" function-arguments="bbuf bytea, buflen integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365560" volatility="VOLATILE" is-window="f" function-identity-arguments="bbuf bytea, buflen integer" overload-function-count="1" proc-language="plpgsql" function-signature="htp$putraw(bbuf bytea, buflen integer)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    NULL;
    
END;
]]></complex-attribute>
                        <category _I_D="9b8338c5-9465-4ccc-ad2b-1f62ec180677" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e94c9f41-ef3f-4972-ad10-dad008941251" name="htp$s" subcategories-loading="none" object-loading="extended" context="htp$s" is-trigger-function="0" unique-function-name="htp$s" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365521" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$s(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$s(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="85bae49c-56b5-43a2-88fa-a82036a1d7eb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ec83f5ca-f6d2-4955-b0bc-21eaf4d26397" name="htp$sample" subcategories-loading="none" object-loading="extended" context="htp$sample" is-trigger-function="0" unique-function-name="htp$sample" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365518" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$sample(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$sample(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="2ace1cf3-6aa1-4cc4-b6f8-31b629157f7a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="46a90f29-c4fe-4167-b68f-9dd3d8f61d0f" name="htp$script" subcategories-loading="none" object-loading="extended" context="htp$script" is-trigger-function="0" unique-function-name="htp$script" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="cscript text, clanguage text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365519" volatility="VOLATILE" is-window="f" function-identity-arguments="cscript text, clanguage text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$script(cscript text, clanguage text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$script(cscript, clanguage));
    
END;
]]></complex-attribute>
                        <category _I_D="a217c003-acc0-4594-8516-bed5bb5f69ed" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d832e708-c600-49bf-8573-7050ec20e1f9" name="htp$small" subcategories-loading="none" object-loading="extended" context="htp$small" is-trigger-function="0" unique-function-name="htp$small" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365520" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$small(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$small(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="aed33cc9-13a3-4ae0-bc06-55007bbf213c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="61b59d86-1e2d-4647-b1d3-2c88e79195ed" name="htp$strike" subcategories-loading="none" object-loading="extended" context="htp$strike" is-trigger-function="0" unique-function-name="htp$strike" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365522" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$strike(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$strike(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="52715914-3a1a-48cb-ab98-7b7bc8e8cc66" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ae0fc87b-4620-48df-800c-ac101f6d70d4" name="htp$strong" subcategories-loading="none" object-loading="extended" context="htp$strong" is-trigger-function="0" unique-function-name="htp$strong" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365530" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$strong(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$strong(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="ca57e0a3-38c5-4973-9c1e-00c36e0153c3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f357fae4-3da3-4ad7-82cf-98d81d12b724" name="htp$style" subcategories-loading="none" object-loading="extended" context="htp$style" is-trigger-function="0" unique-function-name="htp$style" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="cstyle text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365531" volatility="VOLATILE" is-window="f" function-identity-arguments="cstyle text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$style(cstyle text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$style(cstyle));
    
END;
]]></complex-attribute>
                        <category _I_D="5c2985b6-2649-46a9-8a1c-d2a11afbc84b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a4d11479-0fbd-4ea2-b160-77b8d950817c" name="htp$sub" subcategories-loading="none" object-loading="extended" context="htp$sub" is-trigger-function="0" unique-function-name="htp$sub" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365532" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, calign text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$sub(ctext text, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$sub(ctext,calign,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="818b1520-323a-4796-9112-ce738d617dff" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="adfb6006-3929-44d1-9788-64a997908623" name="htp$sup" subcategories-loading="none" object-loading="extended" context="htp$sup" is-trigger-function="0" unique-function-name="htp$sup" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365533" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, calign text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$sup(ctext text, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$sup(ctext,calign,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="b0446f2d-871b-4d5c-bd5b-517479f749bd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9adb8ed5-a201-496d-b19b-c36e57f474e6" name="htp$tablecaption" subcategories-loading="none" object-loading="extended" context="htp$tablecaption" is-trigger-function="0" unique-function-name="htp$tablecaption" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="ccaption text, calign text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365534" volatility="VOLATILE" is-window="f" function-identity-arguments="ccaption text, calign text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$tablecaption(ccaption text, calign text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$tableCaption(ccaption,calign,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="19344822-6890-4eca-8a95-4505bfb4d4b3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="159a287a-6d5e-477c-a235-ecbded7dbbfa" name="htp$tableclose" subcategories-loading="none" object-loading="extended" context="htp$tableclose" is-trigger-function="0" unique-function-name="htp$tableclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365535" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$tableclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$tableClose());
    
END;
]]></complex-attribute>
                        <category _I_D="23d16b8c-6855-4e07-a0c2-fd8cb284f372" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="169b1c98-b360-496a-b85f-d4cab61ff1c7" name="htp$tabledata" subcategories-loading="none" object-loading="extended" context="htp$tabledata" is-trigger-function="0" unique-function-name="htp$tabledata" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cvalue text DEFAULT NULL::text, calign text DEFAULT NULL::text, cdp text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, crowspan text DEFAULT NULL::text, ccolspan text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="7" function-id="365536" volatility="VOLATILE" is-window="f" function-identity-arguments="cvalue text, calign text, cdp text, cnowrap text, crowspan text, ccolspan text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$tabledata(cvalue text, calign text, cdp text, cnowrap text, crowspan text, ccolspan text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$tableData(cvalue,calign,cdp,cnowrap,crowspan,ccolspan,cattributes));

END;
]]></complex-attribute>
                        <category _I_D="8eb18999-b501-4ce0-ac44-63d43b3daa6f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2cbb4f64-5e82-4b64-a6b2-c14a2bd70e92" name="htp$tableheader" subcategories-loading="none" object-loading="extended" context="htp$tableheader" is-trigger-function="0" unique-function-name="htp$tableheader" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cvalue text DEFAULT NULL::text, calign text DEFAULT NULL::text, cdp text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, crowspan text DEFAULT NULL::text, ccolspan text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="7" function-id="365537" volatility="VOLATILE" is-window="f" function-identity-arguments="cvalue text, calign text, cdp text, cnowrap text, crowspan text, ccolspan text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$tableheader(cvalue text, calign text, cdp text, cnowrap text, crowspan text, ccolspan text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$tableHeader(cvalue,calign,cdp,cnowrap,crowspan,ccolspan,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="cabcf96d-34be-4572-8817-3365bcf628e3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a7b13861-cad2-4ff7-acbb-d5ba604d549a" name="htp$tableopen" subcategories-loading="none" object-loading="extended" context="htp$tableopen" is-trigger-function="0" unique-function-name="htp$tableopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cborder text DEFAULT NULL::text, calign text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cclear text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365538" volatility="VOLATILE" is-window="f" function-identity-arguments="cborder text, calign text, cnowrap text, cclear text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$tableopen(cborder text, calign text, cnowrap text, cclear text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$tableOpen(cborder,calign,cnowrap,cclear,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="32963605-5a53-4c07-bed2-e64b1d959ae5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8910cfe1-b3bd-4121-bd09-0e100e927f49" name="htp$tablerowclose" subcategories-loading="none" object-loading="extended" context="htp$tablerowclose" is-trigger-function="0" unique-function-name="htp$tablerowclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365539" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$tablerowclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$tableClose());
    
END;
]]></complex-attribute>
                        <category _I_D="028b54c8-c449-4299-8345-eb3a2eb39605" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9ecda0dc-7d1b-45db-8439-71f8632832f7" name="htp$tablerowopen" subcategories-loading="none" object-loading="extended" context="htp$tablerowopen" is-trigger-function="0" unique-function-name="htp$tablerowopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="calign text DEFAULT NULL::text, cvalign text DEFAULT NULL::text, cdp text DEFAULT NULL::text, cnowrap text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365540" volatility="VOLATILE" is-window="f" function-identity-arguments="calign text, cvalign text, cdp text, cnowrap text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$tablerowopen(calign text, cvalign text, cdp text, cnowrap text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$tableRowOpen(calign,cvalign,cdp,cnowrap,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="2f4e8899-1e5f-4c50-8267-9d6c41a35492" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="69acd414-b989-4f1d-b8ae-c9b83d149475" name="htp$teletype" subcategories-loading="none" object-loading="extended" context="htp$teletype" is-trigger-function="0" unique-function-name="htp$teletype" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365541" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$teletype(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$teletype(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="ef2f0f21-602a-489b-8f34-7629cfcc7ef4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="aea898d0-a520-4d73-8c4b-1c2737dcf0e9" name="htp$title" subcategories-loading="none" object-loading="extended" context="htp$title" is-trigger-function="0" unique-function-name="htp$title" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="ctitle text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365542" volatility="VOLATILE" is-window="f" function-identity-arguments="ctitle text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$title(ctitle text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$title(ctitle));
    
END;
]]></complex-attribute>
                        <category _I_D="165c9735-0844-4bd1-8fb3-eca8b5656b4f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="022d3d04-8523-40d9-88b5-f0280f6d7fe7" name="htp$ulistclose" subcategories-loading="none" object-loading="extended" context="htp$ulistclose" is-trigger-function="0" unique-function-name="htp$ulistclose" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365543" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$ulistclose()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$ulistClose());
    
END;
]]></complex-attribute>
                        <category _I_D="1156c3d7-432b-490e-9a15-2c443519c7b7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cc4c18c9-562a-4a5a-969c-d084c4bfe084" name="htp$ulistopen" subcategories-loading="none" object-loading="extended" context="htp$ulistopen" is-trigger-function="0" unique-function-name="htp$ulistopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="cclear text DEFAULT NULL::text, cwrap text DEFAULT NULL::text, cdingbat text DEFAULT NULL::text, csrc text DEFAULT NULL::text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365544" volatility="VOLATILE" is-window="f" function-identity-arguments="cclear text, cwrap text, cdingbat text, csrc text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$ulistopen(cclear text, cwrap text, cdingbat text, csrc text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$ulistOpen(cclear,cwrap,cdingbat,csrc,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="2ba296f6-8a01-43e6-8e83-b980e82bb473" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="98a4f80c-600f-4889-8deb-b10cf2273173" name="htp$underline" subcategories-loading="none" object-loading="extended" context="htp$underline" is-trigger-function="0" unique-function-name="htp$underline" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365545" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$underline(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$underline(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="bb5de88a-4eed-4e22-8cb4-2727616e645a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="659ca9b1-d97b-4372-9378-a17b1c90027b" name="htp$variable" subcategories-loading="none" object-loading="extended" context="htp$variable" is-trigger-function="0" unique-function-name="htp$variable" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="ctext text, cattributes text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365546" volatility="VOLATILE" is-window="f" function-identity-arguments="ctext text, cattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="htp$variable(ctext text, cattributes text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$variable(ctext,cattributes));
    
END;
]]></complex-attribute>
                        <category _I_D="e43cb147-a41c-4c42-9831-00d364346a37" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b19f389e-eeee-4fce-9c86-57d82ae78f19" name="htp$wbr" subcategories-loading="none" object-loading="extended" context="htp$wbr" is-trigger-function="0" unique-function-name="htp$wbr" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365547" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="htp$wbr()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$p(aws_oracle_ext.htf$wbr());
    
END;
]]></complex-attribute>
                        <category _I_D="c8ac0d4e-d662-4f5c-b449-deb3508c7786" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2330e14e-fa10-4503-a177-98c246d4fecf" name="immutable_concat" subcategories-loading="none" object-loading="extended" context="immutable_concat" is-trigger-function="0" unique-function-name="immutable_concat" is-aggregate="f" language-name="sql" arguments-datatypes="text[]" is-returning-set="f" ret-datatype="text" function-arguments="VARIADIC param_args text[]" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365943" volatility="IMMUTABLE" is-window="f" function-identity-arguments="VARIADIC param_args text[]" overload-function-count="1" proc-language="sql" function-signature="immutable_concat(VARIADIC param_args text[])">
                        <complex-attribute name="sql"><![CDATA[
SELECT array_to_string($1,'');
]]></complex-attribute>
                        <category _I_D="7700caeb-fd7d-4f52-b671-4680e830dcaf" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1e746183-25e5-4322-b591-da07714d45e2" name="immutable_concat_ws" subcategories-loading="none" object-loading="extended" context="immutable_concat_ws" is-trigger-function="0" unique-function-name="immutable_concat_ws" is-aggregate="f" language-name="sql" arguments-datatypes="text,text[]" is-returning-set="f" ret-datatype="text" function-arguments="text, VARIADIC param_args text[]" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365944" volatility="IMMUTABLE" is-window="f" function-identity-arguments="text, VARIADIC param_args text[]" overload-function-count="1" proc-language="sql" function-signature="immutable_concat_ws(text, VARIADIC param_args text[])">
                        <complex-attribute name="sql"><![CDATA[
SELECT array_to_string($2,$1);
]]></complex-attribute>
                        <category _I_D="9901f82c-ff0b-48eb-9322-ae2e3808b953" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="81d30e92-b220-4625-b4bc-b1b8d259eebf" name="increment_rowcount" subcategories-loading="none" object-loading="extended" context="increment_rowcount" is-trigger-function="0" unique-function-name="increment_rowcount" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bigint,boolean" is-returning-set="f" ret-datatype="int8" function-arguments="INOUT rc bigint, is_found boolean" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365140" volatility="VOLATILE" is-window="f" function-identity-arguments="INOUT rc bigint, is_found boolean" overload-function-count="1" proc-language="plpgsql" function-signature="increment_rowcount(INOUT rc bigint, is_found boolean)" comment="&amp;#x000a;  Increments the variable emulating the ROWCOUNT cursor attribute's behaviour in Oracle. &amp;#x000a;  Must be called whenever an explicit cursor's fetch occured, if the migrated object's &amp;#x000a;  code contains the ROWCOUNT cursor attribute.&amp;#x000a;&amp;#x000a;  Parameters:&amp;#x000a;    rc       -- variable emulating the ROWCOUNT attribute for the explicit cursor&amp;#x000a;    is_found -- value of the emulated FOUND curcor attribute, should be always set &amp;#x000a;                to FOUND when calling the function&amp;#x000a;&amp;#x000a;  Returns:&amp;#x000a;    Conditionally increased value of the rc parameter&amp;#x000a;">
                        <complex-attribute name="sql"><![CDATA[
begin
  rc := rc + case when is_found then 1 else 0 end;
end;
]]></complex-attribute>
                        <category _I_D="bd0b6969-755d-4a92-ae9f-db3e59a19760" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="90bb37ef-d584-4fb2-91f8-b8327565dfc1" name="init_context_struct" subcategories-loading="none" object-loading="extended" context="init_context_struct" is-trigger-function="0" unique-function-name="init_context_struct" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365790" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="init_context_struct()">
                        <complex-attribute name="sql"><![CDATA[
   	create temporary table if not exists context_local(
	  context_namespace text not null,
	  attribute_name text not null,  
	  attribute_value text,
	  user_name text,
	  cliend_id text,
	  signature text,
	  backend_start timestamp not null default now(),				  
	  pid int default pg_backend_pid(),
  	  constraint un_context_local unique (context_namespace, attribute_name)
	) on commit preserve rows;


	create unlogged table if not exists aws_oracle_context.context_global(
	  context_namespace text not null references aws_oracle_context.context on delete cascade,
	  attribute_name text not null,  
	  attribute_value text,
	  user_name text,
	  cliend_id text,
	  signature text,
	  backend_start timestamp not null default now(),				  
	  pid int default pg_backend_pid()
  	  ,constraint un_context_global unique (context_namespace, attribute_name, cliend_id)
	);
]]></complex-attribute>
                        <category _I_D="326d6467-6304-4b97-8d94-9b6dc86a75e9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8a4a88a4-72da-453a-b2ba-da17ca19190e" name="instr" subcategories-loading="none" object-loading="extended" context="instr" is-trigger-function="0" unique-function-name="instr" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,numeric,numeric" is-returning-set="f" ret-datatype="numeric" function-arguments="p_str text, p_substr text, p_pos numeric DEFAULT 1, p_occurancy numeric DEFAULT 1" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365141" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_str text, p_substr text, p_pos numeric, p_occurancy numeric" overload-function-count="1" proc-language="sql" function-signature="instr(p_str text, p_substr text, p_pos numeric, p_occurancy numeric)">
                        <complex-attribute name="sql"><![CDATA[


    SELECT
        CASE

            WHEN LENGTH($1) = 0 OR LENGTH($2) = 0 THEN NULL::NUMERIC

            WHEN TRUNC($4) = 0 THEN 1/TRUNC($4)

            WHEN $4 < 0 THEN SQRT($4)

            ELSE

                (

                    WITH RECURSIVE t(str, shift, pos, tail, o, n) AS 
                    (
                        SELECT CASE WHEN TRUNC($3) < 0 THEN REVERSE($1) ELSE $1 END AS str,
                            0 AS shift,
                            CASE WHEN TRUNC($3) < 0 THEN -1 * TRUNC($3)::INT ELSE TRUNC($3)::INT END AS pos,
                            CASE WHEN TRUNC($3) < 0 THEN REVERSE($1) ELSE $1 END AS tail,
                            0 AS o,
                            CASE WHEN TRUNC($3) < 0 THEN REVERSE($2) ELSE $2 END AS n
                        UNION ALL
                        SELECT str,
                            shift + pos AS shift,
                            STRPOS(SUBSTR(str, shift + pos), n) AS pos,
                            SUBSTR(str, shift + pos) AS tail,
                            o + 1 AS o,
                            n
                        FROM t
                        WHERE pos <> 0
                    )
                    ,r AS
                    (
                        SELECT t.str,
                            t.shift,
                            t.pos,
                            t.tail,
                            t.o,
                            CASE
                                WHEN TRUNC($3) > 0 THEN
                                    t.pos + t.shift - 1
                                ELSE
                                    LENGTH(t.str) - t.pos - t.shift + 2
                            END cc
                        FROM t
                        WHERE t.o = TRUNC($4)
                        AND t.pos <> 0
                    )
                    SELECT COALESCE
                    (
                        (
                            SELECT r.cc
                            FROM r
                        ),
                        0
                    )::NUMERiC
                )

        END;

]]></complex-attribute>
                        <category _I_D="2cdaa328-b0ae-4250-8949-b70250e39ba6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1acddf29-0314-42ca-bea9-2ae1174f8c03" name="instrb" subcategories-loading="none" object-loading="extended" context="instrb" is-trigger-function="0" unique-function-name="instrb" is-aggregate="f" language-name="sql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="int4" function-arguments="text, text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365273" volatility="VOLATILE" is-window="f" function-identity-arguments="text, text" overload-function-count="1" proc-language="sql" function-signature="instrb(text, text)" comment="Returns the byte position of a specified string in the input string">
                        <complex-attribute name="sql"><![CDATA[
  SELECT POSITION($2::bytea IN $1::bytea);
]]></complex-attribute>
                        <category _I_D="61349b5a-079e-4dd9-982f-d96973ac960d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7428d6b0-ae0a-4ea0-ad4a-6d70e74b055b" name="is_package_initialized" subcategories-loading="none" object-loading="extended" context="is_package_initialized" is-trigger-function="0" unique-function-name="is_package_initialized" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="bool" function-arguments="schema_name text, package_name text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365142" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name text, package_name text" overload-function-count="1" proc-language="plpgsql" function-signature="is_package_initialized(schema_name text, package_name text)" comment="&amp;#x000a; Checks a flag for the migrated package that it has already been initialized in the current session, &amp;#x000a; to prevent a re-execution for the initialization function.&amp;#x000a; &amp;#x000a; Parameters:&amp;#x000a;  schema_name -- migrated schema&amp;#x000a;  package_name -- migrated package&amp;#x000a;">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    RETURN aws_oracle_ext.get_package_variable
    (
        schema_name => is_package_initialized.schema_name,
        package_name => is_package_initialized.package_name,
        variable_name => 'Init$$'
    )::BOOLEAN;

EXCEPTION
    WHEN OTHERS THEN

        RETURN FALSE;

END;
]]></complex-attribute>
                        <category _I_D="05aa12e0-63f3-4322-b5c7-8a015ffb972b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fc25f7d9-f392-4082-9006-4dc1690019ab" name="is_spatial_present" subcategories-loading="none" object-loading="extended" context="is_spatial_present" is-trigger-function="0" unique-function-name="is_spatial_present" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="bool" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365270" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="is_spatial_present()">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vCount SMALLINT;
BEGIN
	
    SELECT COUNT(1)
	INTO vCount
	FROM  pg_views v
	WHERE v.schemaname  = ('aws_oracle_ext')
	AND v.viewname IN
    (
        'user_sdo_geom_metadata','all_sdo_geom_metadata','user_sdo_index_info','all_sdo_index_info'
    );

	RETURN (vCount = 4);

END;
]]></complex-attribute>
                        <category _I_D="5f929cd1-01fb-4950-bcb0-f2ee2baafc3d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="54f3008a-cef9-4752-aa26-cbe4390802aa" name="isopen" subcategories-loading="none" object-loading="extended" context="isopen" is-trigger-function="0" unique-function-name="isopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="bool" function-arguments="p_cursor_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365773" volatility="VOLATILE" is-window="f" function-identity-arguments="p_cursor_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="isopen(p_cursor_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
  RETURN EXISTS(SELECT 1 FROM pg_cursors WHERE name = lower(p_cursor_name));
END;
]]></complex-attribute>
                        <category _I_D="0006dba8-7647-42a3-a575-52a69d47a39a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="31aaeacd-8e85-4157-bd85-ad815e938c85" name="json_set_by_path" subcategories-loading="none" object-loading="extended" context="json_set_by_path" is-trigger-function="0" unique-function-name="json_set_by_path" is-aggregate="f" language-name="plpgsql" arguments-datatypes="jsonb,text,anyelement" is-returning-set="f" ret-datatype="jsonb" function-arguments="src jsonb, ppath text, pvalue anyelement" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365952" volatility="IMMUTABLE" is-window="f" function-identity-arguments="src jsonb, ppath text, pvalue anyelement" overload-function-count="1" proc-language="plpgsql" function-signature="json_set_by_path(src jsonb, ppath text, pvalue anyelement)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    pathParts TEXT[];
    valuetype TEXT;
    vres JSONB;
    vpart TEXT;
    vdatatype TEXT;
    vproxy JSONB;
    vleaf JSONB;
BEGIN

    SELECT JSONB_TYPEOF
    (
        JSONB_BUILD_OBJECT
        (
            'tst',
            pvalue
        ) -> 'tst'
    )
    INTO valuetype;

    pathParts := REGEXP_SPLIT_TO_ARRAY
    (
        REPLACE
        (
            REPLACE
            (
                ppath,
                '[',
                '.'
            ),
            ']',
            ''
        ),
        '\.'
    );



    SELECT
        CASE
            WHEN pt.typtype = 'b' THEN
                'base'
            ELSE
                'udt'
        END
    INTO vdatatype
    FROM pg_type pt
    WHERE pt.oid = PG_TYPEOF(pvalue); 

    IF NOT FOUND THEN

        vdatatype := 'udt';

    END IF;

    -- simple case
    IF CARDINALITY(pathParts) = 2 THEN

        IF vdatatype = 'base' THEN

            vres := JSONB_BUILD_OBJECT
            (
                'column_value',
                TO_JSONB(pvalue)
            );

        ELSE

            SELECT TO_JSONB(z)
            INTO vres
            FROM JSONB_POPULATE_RECORD
            (
                pvalue,
                TO_JSONB(pvalue)
            ) z;

        END IF;

        RETURN vres;

    END IF;

    IF vdatatype = 'base' THEN

        IF valuetype = 'null' THEN

            vproxy := 'null'::JSONB;
        
        ELSE
        
            vproxy := TO_JSONB(pvalue);

        END IF;

    ELSE

        SELECT TO_JSONB(z)
        INTO vproxy
        FROM JSONB_POPULATE_RECORD
        (
            pvalue,
            TO_JSONB(pvalue)
        ) z;

    END IF;
        
    FOR i IN REVERSE CARDINALITY(pathParts)..3 LOOP

        vleaf := src #> pathParts[3:i-1];
        vres := JSONB_SET
        (
            CASE
                WHEN vleaf IS NOT NULL AND JSONB_TYPEOF(vleaf) = 'object' THEN
                    vleaf
                ELSE
                    '{}'::JSONB
                END,
            ARRAY[pathParts[i]],
            CASE
                WHEN i = CARDINALITY(pathParts) THEN
                    vproxy
                ELSE
                    vres
            END
        );

    END LOOP;

    RETURN src || vres;

END;
]]></complex-attribute>
                        <category _I_D="390adce0-6bec-4e20-989d-569bb506765e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3f378dd7-4a7f-4c15-ab2d-997016fae8eb" name="last_day" subcategories-loading="none" object-loading="extended" context="last_day(pdate date)" is-trigger-function="0" unique-function-name="last_day(pdate date)" is-aggregate="f" language-name="sql" arguments-datatypes="date" is-returning-set="f" ret-datatype="date" function-arguments="pdate date" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365143" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pdate date" overload-function-count="3" proc-language="sql" function-signature="last_day(pdate date)" unique-suffix="(pdate date)" routine-number="365143">
                        <complex-attribute name="sql"><![CDATA[

    SELECT (
        DATE_TRUNC('month', pDate) +'1month'::INTERVAL - '1 day'::INTERVAL
    )::DATE;

]]></complex-attribute>
                        <category _I_D="8f68a8af-c334-4c92-be32-50c678b18b5b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="da3979e4-04d6-4a41-8aa3-f629df338682" name="last_day" subcategories-loading="none" object-loading="extended" context="last_day(pdate timestamp with time zone)" is-trigger-function="0" unique-function-name="last_day(pdate timestamp with time zone)" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp with time zone" is-returning-set="f" ret-datatype="timestamptz" function-arguments="pdate timestamp with time zone" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365145" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pdate timestamp with time zone" overload-function-count="3" proc-language="sql" function-signature="last_day(pdate timestamp with time zone)" unique-suffix="(pdate timestamp with time zone)" routine-number="365145">
                        <complex-attribute name="sql"><![CDATA[
  
    SELECT MAKE_TIMESTAMPTZ
    (
        EXTRACT('YEAR' FROM pDate)::INT,
        EXTRACT('MONTH' FROM pDate)::INT,
        EXTRACT('DAY' FROM (DATE_TRUNC('MONTH', pDate) +'1MONTH'::INTERVAL -'1 DAY'::INTERVAL))::INT,
        EXTRACT('HOUR' FROM PDATE)::INT,
        EXTRACT('MIN' FROM PDATE)::INT,
        EXTRACT('SEC' FROM PDATE)
    );

]]></complex-attribute>
                        <category _I_D="54be49f0-bcd9-4224-8540-a0998ddd59d4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b891c400-f27c-4c9a-9f05-32edb14f1ebb" name="last_day" subcategories-loading="none" object-loading="extended" context="last_day(pdate timestamp without time zone)" is-trigger-function="0" unique-function-name="last_day(pdate timestamp without time zone)" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone" is-returning-set="f" ret-datatype="timestamp" function-arguments="pdate timestamp without time zone" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365144" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pdate timestamp without time zone" overload-function-count="3" proc-language="sql" function-signature="last_day(pdate timestamp without time zone)" unique-suffix="(pdate timestamp without time zone)" routine-number="365144">
                        <complex-attribute name="sql"><![CDATA[

    SELECT MAKE_TIMESTAMP
    (
        EXTRACT('YEAR' FROM pDate)::INT,
        EXTRACT('MONTH' FROM pDate)::INT,
        EXTRACT('DAY' FROM (DATE_TRUNC('MONTH', pDate) + '1MONTH'::INTERVAL - '1 DAY'::INTERVAL))::INT,
        EXTRACT('HOUR' FROM pDate)::INT,
        EXTRACT('MIN' FROM pDate)::INT,
        EXTRACT('SEC' FROM pDate)
    );

]]></complex-attribute>
                        <category _I_D="7aaf5e3a-5f01-44fe-b4e1-6469ee35bbc8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c5b4fb7f-7ed9-4fc1-b5bd-efedf861d70c" name="least" subcategories-loading="none" object-loading="extended" context="least" is-trigger-function="0" unique-function-name="least" is-aggregate="f" language-name="sql" arguments-datatypes="anyarray" is-returning-set="f" ret-datatype="anyelement" function-arguments="VARIADIC anyarray" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365947" volatility="VOLATILE" is-window="f" function-identity-arguments="VARIADIC anyarray" overload-function-count="1" proc-language="sql" function-signature="least(VARIADIC anyarray)">
                        <complex-attribute name="sql"><![CDATA[
  SELECT unnest($1)
  ORDER BY 1 ASC NULLS FIRST
  LIMIT 1;
]]></complex-attribute>
                        <category _I_D="8664907f-0005-4c91-b8e2-327dd3d48975" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="75a6c811-3964-4747-80db-fb8dc39d6f30" name="limit" subcategories-loading="none" object-loading="extended" context="limit" is-trigger-function="0" unique-function-name="limit" is-aggregate="f" language-name="sql" arguments-datatypes="anyelement" is-returning-set="f" ret-datatype="int4" function-arguments="parray anyelement" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365147" volatility="STABLE" is-window="f" function-identity-arguments="parray anyelement" overload-function-count="1" proc-language="sql" function-signature="limit(parray anyelement)" comment="Implements Oracle Collection method limit">
                        <complex-attribute name="sql"><![CDATA[

    SELECT COALESCE(SUBSTRING(SUBSTRING(pg_get_constraintdef(pc.oid) FROM '<=\s*\d+') FROM '\d+')::INTEGER
                   ,SUBSTRING(SUBSTRING(pg_get_constraintdef(pc.oid) FROM '<\s*\d+') FROM '\d+')::INTEGER - 1)
    FROM pg_constraint pc
    JOIN pg_type pt ON pt.oid = pc.contypid
    WHERE pt.typname = SUBSTRING(PG_TYPEOF(pArray)::text FROM POSITION('.' in PG_TYPEOF(pArray)::text) + 1)
    AND pt.typcategory = 'A'
    AND pt.typtype = 'd'
    AND pc.conname LIKE '%_limit_1';

]]></complex-attribute>
                        <category _I_D="7cd45c2f-e3db-4e7b-bb44-dea48f190c00" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="19b8cfd8-9445-4770-94ad-b0babf1a7786" name="lnnvl" subcategories-loading="none" object-loading="extended" context="lnnvl" is-trigger-function="0" unique-function-name="lnnvl" is-aggregate="f" language-name="sql" arguments-datatypes="boolean" is-returning-set="f" ret-datatype="bool" function-arguments="boolean" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365276" volatility="IMMUTABLE" is-window="f" function-identity-arguments="boolean" overload-function-count="1" proc-language="sql" function-signature="lnnvl(boolean)" comment="Evaluates if a value is false or unknown">
                        <complex-attribute name="sql"><![CDATA[
SELECT NOT COALESCE($1, FALSE::BOOL)
/*
CASE $1
  WHEN FALSE THEN TRUE::BOOL
  WHEN TRUE THEN FALSE::BOOL
  ELSE TRUE::BOOL --NULL
END
*/
]]></complex-attribute>
                        <category _I_D="e2ca3bfe-23b6-4180-8dfa-b333725678d5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="afed972d-9900-47c7-ac95-ce97d6218cb4" name="localtimestamp" subcategories-loading="none" object-loading="extended" context="localtimestamp" is-trigger-function="0" unique-function-name="localtimestamp" is-aggregate="f" language-name="sql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="timestamp" function-arguments="p_precision integer DEFAULT 6" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365148" volatility="STABLE" is-window="f" function-identity-arguments="p_precision integer" overload-function-count="1" proc-language="sql" function-signature="localtimestamp(p_precision integer)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT 
    CASE
    
        WHEN p_precision = 0 THEN LOCALTIMESTAMP(0)
        WHEN p_precision = 1 THEN LOCALTIMESTAMP(1)
        WHEN p_precision = 2 THEN LOCALTIMESTAMP(3)
        WHEN p_precision = 4 THEN LOCALTIMESTAMP(4)
        WHEN p_precision = 5 THEN LOCALTIMESTAMP(5)

        ELSE LOCALTIMESTAMP

    END;
    
]]></complex-attribute>
                        <category _I_D="cb054c38-4ba4-4aa5-8fbb-30edab9a38d7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5956c40a-bedb-41fd-b251-3e3585f7f4d9" name="months_between" subcategories-loading="none" object-loading="extended" context="months_between" is-trigger-function="0" unique-function-name="months_between" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone,timestamp without time zone" is-returning-set="f" ret-datatype="numeric" function-arguments="enddate1 timestamp without time zone, startdate2 timestamp without time zone" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365149" volatility="IMMUTABLE" is-window="f" function-identity-arguments="enddate1 timestamp without time zone, startdate2 timestamp without time zone" overload-function-count="1" proc-language="sql" function-signature="months_between(enddate1 timestamp without time zone, startdate2 timestamp without time zone)">
                        <complex-attribute name="sql"><![CDATA[

SELECT
    CASE
        WHEN DATE_TRUNC('DAY', $1) = DATE_TRUNC('DAY', $2) THEN
        
            0::NUMERIC

        WHEN EXTRACT(DAY FROM $1) = EXTRACT(DAY FROM $2) THEN

            ROUND
            (
                EXTRACT(YEARS FROM AGE($1, $2)) * 12 +
                EXTRACT(MONTHS FROM AGE($1, $2))  +
                EXTRACT(DAYS FROM AGE($1, $2)) /31 +
                EXTRACT(HOURS FROM AGE($1, $2)) /31 /24 +
                EXTRACT(SECONDS FROM AGE($1, $2)) /86400 /31
            )::NUMERIC

        WHEN DATE_TRUNC('DAY', aws_oracle_ext.last_day($1)) = DATE_TRUNC('DAY', $1) AND
            DATE_TRUNC('DAY', aws_oracle_ext.last_day($2)) = DATE_TRUNC('DAY', $2) THEN

            FLOOR
            (
                EXTRACT(YEARS FROM AGE($1, $2)) * 12 +
                EXTRACT(MONTHS FROM AGE($1, $2))  +
                EXTRACT(DAYS FROM AGE($1, $2)) /31 +
                EXTRACT(HOURS FROM AGE($1, $2)) /31 /24 +
                EXTRACT(SECONDS FROM AGE($1, $2)) /86400 /31
            )::NUMERIC

        ELSE

            (
                EXTRACT(YEARS FROM AGE($1, $2)) * 12 +
                EXTRACT(MONTHS FROM AGE($1, $2))  +
                EXTRACT(DAYS FROM AGE($1, $2)) /31 +
                EXTRACT(HOURS FROM AGE($1, $2)) /31 /24 +
                EXTRACT(SECONDS FROM AGE($1, $2)) /86400 /31
            )::NUMERIC

    END;

]]></complex-attribute>
                        <category _I_D="2e75b58f-de80-40ed-aade-7729977df91d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a7c42b1d-128b-4de6-9fbc-1f4af10a99b2" name="multiset_operator" subcategories-loading="none" object-loading="extended" context="multiset_operator" is-trigger-function="0" unique-function-name="multiset_operator" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,anyelement,text,text,boolean" is-returning-set="f" ret-datatype="text" function-arguments="poperator text, pfirsttable text, psecondtable text, pcollectiontype anyelement, pmode text DEFAULT 'ALL'::text, pstoreto text DEFAULT NULL::text, pisglobal boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="7" function-id="365150" volatility="VOLATILE" is-window="f" function-identity-arguments="poperator text, pfirsttable text, psecondtable text, pcollectiontype anyelement, pmode text, pstoreto text, pisglobal boolean" overload-function-count="1" proc-language="plpgsql" function-signature="multiset_operator(poperator text, pfirsttable text, psecondtable text, pcollectiontype anyelement, pmode text, pstoreto text, pisglobal boolean)" comment="Emulates MULTISET OPERATORS for Nested tables. Please, note collection members order (differs from Oracle)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vSQL VARCHAR;
	vResultTable TEXT;
	vType VARCHAR;
    vFirstStorageTable VARCHAR;
    vSecondStorageTable VARCHAR;
    vResultStorageTable VARCHAR;

BEGIN

	vType := PG_TYPEOF(pCollectionType)::text;
	
    IF pIsGlobal THEN

        PERFORM aws_oracle_ext.array$copy
        (
            p_source_param_name => pFirstTable::JSONB ->> 'Array Name',
            p_source_procedure_name => pFirstTable::JSONB ->> 'Procedure Name',
            p_dest_param_name => 'ml1$'||(pFirstTable::JSONB ->> 'Array Name'),
            p_dest_procedure_name => pFirstTable::JSONB ->> 'Procedure Name'
        );

        PERFORM aws_oracle_ext.array$copy
        (
            p_source_param_name => pSecondTable::JSONB ->> 'Array Name',
            p_source_procedure_name => pSecondTable::JSONB ->> 'Procedure Name',
            p_dest_param_name => 'ml2$'||(pSecondTable::JSONB ->> 'Array Name'),
            p_dest_procedure_name => pSecondTable::JSONB ->> 'Procedure Name'
        );

        PERFORM aws_oracle_ext.array$create_storage_table
        (
            p_array_name => 'ml1$'||(pFirstTable::JSONB ->> 'Array Name'),
            p_procedure_name => pFirstTable::JSONB ->> 'Procedure Name',
            p_cast_type_name => vType
        );

        PERFORM aws_oracle_ext.array$create_storage_table
        (
            p_array_name => 'ml2$'||(pSecondTable::JSONB ->> 'Array Name'),
            p_procedure_name => pSecondTable::JSONB ->> 'Procedure Name',
            p_cast_type_name => vType
        );

        vFirstStorageTable := aws_oracle_ext.array$get_storage_table_name
        (
            --pFirstTable::JSONB ->> 'Array Name',
            p_array_path_without_indexes => 'ml1$'||(pFirstTable::JSONB ->> 'Array Name'),
            p_procedure_name => pFirstTable::JSONB ->> 'Procedure Name'
        );

        vSecondStorageTable := aws_oracle_ext.array$get_storage_table_name
        (
            --pSecondTable::JSONB ->> 'Array Name',
            p_array_path_without_indexes => 'ml2$'||(pSecondTable::JSONB ->> 'Array Name'),
            p_procedure_name => pSecondTable::JSONB ->> 'Procedure Name'
        );

        vResultStorageTable := aws_oracle_ext.array$get_storage_table_name
        (
            pStoreTo::JSONB ->> 'Array Name',
            pStoreTo::JSONB ->> 'Procedure Name'
        );

        IF vFirstStorageTable IS NULL OR
            vSecondStorageTable IS NULL OR
            vResultStorageTable IS NULL THEN

            RAISE USING MESSAGE := 'STG';

        END IF;

        vSql := CONCAT
        (
            'TRUNCATE TABLE ',
            vResultStorageTable
        );

        EXECUTE vSql;

        vSql := CONCAT
        (
            'ALTER SEQUENCE aws_oracle_ext$sq_',
            vResultStorageTable,
            ' RESTART WITH 1'
        );

        EXECUTE vSql;


        vSQL := CONCAT
        (
            'INSERT INTO ',
            vResultStorageTable,
            '(record_body)',
            CHR(10),
            'SELECT ROW_TO_JSON(mltst) FROM ('
            'SELECT f.* FROM ',
            vFirstStorageTable,
            ' CROSS JOIN LATERAL JSONB_POPULATE_RECORD(NULL::',
            vType,
            ', record_body) f',
            CHR(10),
            pOperator,
            ' ',
            pMode,
            CHR(10),
            'SELECT s.* FROM ',
            vSecondStorageTable,
            ' CROSS JOIN LATERAL JSONB_POPULATE_RECORD(NULL::',
            vType,
            ', record_body) s',
            CHR(10),
            ') mltst'
        );

        EXECUTE vSQL;

        PERFORM aws_oracle_ext.array$drop
        (
            p_array_name => 'ml1$'||(pFirstTable::JSONB ->> 'Array Name'),
            p_procedure_name => pFirstTable::JSONB ->> 'Procedure Name'
        );

        PERFORM aws_oracle_ext.array$drop
        (
            p_array_name => 'ml2$'||(pSecondTable::JSONB ->> 'Array Name'),
            p_procedure_name => pSecondTable::JSONB ->> 'Procedure Name'
        );

    ELSE
	
        vSQL := CONCAT(
            'SELECT ARRAY(',
            CHR(10),
            'SELECT UNNEST(CAST($1 '|| 'AS '||vType||'))',
            CHR(10),
            pOperator,
            ' ',
            pMode,
            CHR(10),
            'SELECT UNNEST(CAST ($2 AS '||vType||'))',
            CHR(10),
            ')::TExt'
        );

        EXECUTE vSQL USING pFirstTable, pSecondTable INTO vResultTable;

    END IF;

    RETURN vResultTable;
END;
]]></complex-attribute>
                        <category _I_D="fb58c82c-c167-45e8-a816-d97602ed29fe" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="45407727-cec0-4660-9d97-70bb2268aaab" name="nanvl" subcategories-loading="none" object-loading="extended" context="nanvl(double precision, character varying)" is-trigger-function="0" unique-function-name="nanvl(double precision, character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="double precision,character varying" is-returning-set="f" ret-datatype="float8" function-arguments="double precision, character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365278" volatility="IMMUTABLE" is-window="f" function-identity-arguments="double precision, character varying" overload-function-count="6" proc-language="sql" function-signature="nanvl(double precision, character varying)" unique-suffix="(double precision, character varying)" routine-number="365278" comment="Returns a substitute value when a value is not a number (NaN)">
                        <complex-attribute name="sql"><![CDATA[ SELECT CASE WHEN $1 = 'NaN' THEN $2::FLOAT8 ELSE $1 END; ]]></complex-attribute>
                        <category _I_D="5c07c63c-b5f2-456f-8f66-7554240ff26b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="77954450-31fa-4516-a3a7-dd50eaaa96ef" name="nanvl" subcategories-loading="none" object-loading="extended" context="nanvl(double precision, double precision)" is-trigger-function="0" unique-function-name="nanvl(double precision, double precision)" is-aggregate="f" language-name="sql" arguments-datatypes="double precision,double precision" is-returning-set="f" ret-datatype="float8" function-arguments="double precision, double precision" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365281" volatility="IMMUTABLE" is-window="f" function-identity-arguments="double precision, double precision" overload-function-count="6" proc-language="sql" function-signature="nanvl(double precision, double precision)" unique-suffix="(double precision, double precision)" routine-number="365281" comment="Returns a substitute value when a value is not a number (NaN)">
                        <complex-attribute name="sql"><![CDATA[ SELECT CASE WHEN $1 = 'NaN' THEN $2 ELSE $1 END; ]]></complex-attribute>
                        <category _I_D="1ac6bb37-0765-401e-8a8f-ecc7838f6f43" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e47b69b2-2a2e-4c22-93cb-36a215e73894" name="nanvl" subcategories-loading="none" object-loading="extended" context="nanvl(numeric, character varying)" is-trigger-function="0" unique-function-name="nanvl(numeric, character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="numeric,character varying" is-returning-set="f" ret-datatype="numeric" function-arguments="numeric, character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365277" volatility="IMMUTABLE" is-window="f" function-identity-arguments="numeric, character varying" overload-function-count="6" proc-language="sql" function-signature="nanvl(numeric, character varying)" unique-suffix="(numeric, character varying)" routine-number="365277" comment="Returns a substitute value when a value is not a number (NaN)">
                        <complex-attribute name="sql"><![CDATA[ SELECT CASE WHEN $1 = 'NaN' THEN $2::NUMERIC ELSE $1 END; ]]></complex-attribute>
                        <category _I_D="2781ea46-8cb8-46ba-882b-152a1d96a293" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4e5513be-b9aa-47c2-a53b-e6a71b66ce30" name="nanvl" subcategories-loading="none" object-loading="extended" context="nanvl(numeric, numeric)" is-trigger-function="0" unique-function-name="nanvl(numeric, numeric)" is-aggregate="f" language-name="sql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="numeric" function-arguments="numeric, numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365280" volatility="IMMUTABLE" is-window="f" function-identity-arguments="numeric, numeric" overload-function-count="6" proc-language="sql" function-signature="nanvl(numeric, numeric)" unique-suffix="(numeric, numeric)" routine-number="365280" comment="Returns a substitute value when a value is not a number (NaN)">
                        <complex-attribute name="sql"><![CDATA[ SELECT CASE WHEN $1 = 'NaN' THEN $2 ELSE $1 END; ]]></complex-attribute>
                        <category _I_D="ea332ccb-9d4e-45df-ab01-ebd07f3e8460" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="08b4a440-6920-4bda-92ca-521e2aa6dee8" name="nanvl" subcategories-loading="none" object-loading="extended" context="nanvl(real, character varying)" is-trigger-function="0" unique-function-name="nanvl(real, character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="real,character varying" is-returning-set="f" ret-datatype="float4" function-arguments="real, character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365279" volatility="IMMUTABLE" is-window="f" function-identity-arguments="real, character varying" overload-function-count="6" proc-language="sql" function-signature="nanvl(real, character varying)" unique-suffix="(real, character varying)" routine-number="365279" comment="Returns a substitute value when a value is not a number (NaN)">
                        <complex-attribute name="sql"><![CDATA[ SELECT CASE WHEN $1 = 'NaN' THEN $2::FLOAT4 ELSE $1 END; ]]></complex-attribute>
                        <category _I_D="c5f1f700-f807-4800-9c6b-5dfe1810b3ff" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="14219b6d-9dd8-4fc5-8ae3-b61f34c3e492" name="nanvl" subcategories-loading="none" object-loading="extended" context="nanvl(real, real)" is-trigger-function="0" unique-function-name="nanvl(real, real)" is-aggregate="f" language-name="sql" arguments-datatypes="real,real" is-returning-set="f" ret-datatype="float4" function-arguments="real, real" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365282" volatility="IMMUTABLE" is-window="f" function-identity-arguments="real, real" overload-function-count="6" proc-language="sql" function-signature="nanvl(real, real)" unique-suffix="(real, real)" routine-number="365282" comment="Returns a substitute value when a value is not a number (NaN)">
                        <complex-attribute name="sql"><![CDATA[ SELECT CASE WHEN $1 = 'NaN' THEN $2 ELSE $1 END; ]]></complex-attribute>
                        <category _I_D="a21bf20e-da4f-455d-a30e-6f3e94c6314d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="646d59ac-37f1-4267-b753-8d6a629561c1" name="nested_table$add_fields_to_array" subcategories-loading="none" object-loading="extended" context="nested_table$add_fields_to_array" is-trigger-function="0" unique-function-name="nested_table$add_fields_to_array" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bigint,text" is-returning-set="f" ret-datatype="void" function-arguments="p_array_id bigint, p_fields text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365151" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_array_id bigint, p_fields text" overload-function-count="1" proc-language="plpgsql" function-signature="nested_table$add_fields_to_array(p_array_id bigint, p_fields text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
END;
]]></complex-attribute>
                        <category _I_D="522eb99e-066d-44df-a9e4-ddac92507543" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="64bdf78b-0628-4dda-a57a-d27303cc7fbf" name="nested_table$assign" subcategories-loading="none" object-loading="extended" context="nested_table$assign" is-trigger-function="0" unique-function-name="nested_table$assign" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365152" volatility="VOLATILE" is-window="f" function-identity-arguments="p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying" overload-function-count="1" proc-language="plv8" function-signature="nested_table$assign(p_source_param_name character varying, p_source_procedure_name character varying, p_dest_param_name character varying, p_dest_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const chk = plv8.find_function("aws_oracle_ext.collectioncheck");
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");

const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");
let pathParts = parser(p_source_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const srcsn = pathParts[0].text;
const srcp = pathParts[2].text;
const srccol = caseCheck(p_source_param_name);
chk(srcsn, srcp, srccol);

pathParts = parser(p_dest_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');
    
const dtssn = pathParts[0].text;
const dstp = pathParts[2].text;

const dstcol = caseCheck(p_dest_param_name);
chk(dtssn, dstp, dstcol);

aws_oracle_ext[dtssn][dstp][dstcol] = aws_oracle_ext[srcsn][srcp][srccol].clone();


]]></complex-attribute>
                        <category _I_D="8bf769f5-1fd1-4e39-bf13-cfe295709230" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="347ea49b-d086-454e-8625-84e18ff57a6d" name="nested_table$clear_procedure" subcategories-loading="none" object-loading="extended" context="nested_table$clear_procedure" is-trigger-function="0" unique-function-name="nested_table$clear_procedure" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365153" volatility="VOLATILE" is-window="f" function-identity-arguments="p_procedure_name character varying" overload-function-count="1" proc-language="sql" function-signature="nested_table$clear_procedure(p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT aws_oracle_ext.collections_delete_by_routine
    (
        p_routine_name => p_procedure_name
    );
]]></complex-attribute>
                        <category _I_D="b144ab10-4cdc-48f3-bd9e-48da15ebfbf3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3f101934-a763-497e-a355-3c237d8c2277" name="nested_table$count" subcategories-loading="none" object-loading="extended" context="nested_table$count" is-trigger-function="0" unique-function-name="nested_table$count" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="int8" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365154" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="1" proc-language="sql" function-signature="nested_table$count(p_array_path character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT aws_oracle_ext.collection_count
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path
    );
]]></complex-attribute>
                        <category _I_D="fdf2c375-591e-46b4-b165-0e6b7f355dd3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="16819740-2e28-4c80-aa96-26de57158eca" name="nested_table$create_array" subcategories-loading="none" object-loading="extended" context="nested_table$create_array" is-trigger-function="0" unique-function-name="nested_table$create_array" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,bigint" is-returning-set="f" ret-datatype="int8" function-arguments="p_array_name character varying, p_procedure_name character varying, p_parent_array_id bigint DEFAULT NULL::bigint" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365155" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_name character varying, p_procedure_name character varying, p_parent_array_id bigint" overload-function-count="1" proc-language="plv8" function-signature="nested_table$create_array(p_array_name character varying, p_procedure_name character varying, p_parent_array_id bigint)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");
const pathParts = parser(p_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;
const indexBy = 'BIGINT';
const tree = new Tree(52);
tree.indexBy = indexBy;
tree.collectionType = 'NT';

if (typeof(aws_oracle_ext) === 'undefined') aws_oracle_ext = {};
if (!aws_oracle_ext.hasOwnProperty(sn)) aws_oracle_ext[sn] = {};
if (!aws_oracle_ext[sn].hasOwnProperty(pn)) aws_oracle_ext[sn][pn] = {};

aws_oracle_ext[sn][pn][caseCheck(p_array_name)] = tree;

return -1;

]]></complex-attribute>
                        <category _I_D="bdbb7499-f744-4839-a421-02b3f8a71e1e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e700ff3d-e678-4a10-96ba-729b48ec5b0c" name="nested_table$create_storage_table" subcategories-loading="none" object-loading="extended" context="nested_table$create_storage_table" is-trigger-function="0" unique-function-name="nested_table$create_storage_table" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying,character varying,boolean" is-returning-set="f" ret-datatype="void" function-arguments="p_array_name character varying, p_procedure_name character varying, p_cast_type_name character varying, pwithdata boolean DEFAULT true" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365156" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_name character varying, p_procedure_name character varying, p_cast_type_name character varying, pwithdata boolean" overload-function-count="1" proc-language="plv8" function-signature="nested_table$create_storage_table(p_array_name character varying, p_procedure_name character varying, p_cast_type_name character varying, pwithdata boolean)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");
const pathParts = parser(p_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;
const chk = plv8.find_function("aws_oracle_ext.collectioncheck");
const srccol = caseCheck(p_array_name);
chk(sn, pn, srccol);
aws_oracle_ext[sn][pn][srccol].rowType = p_cast_type_name;

]]></complex-attribute>
                        <category _I_D="4965c5b1-50c7-4777-9dc7-f859f4f3e25b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="128de179-d42b-4636-ac7a-05f718d9f0ba" name="nested_table$delete" subcategories-loading="none" object-loading="extended" context="nested_table$delete(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="nested_table$delete(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365158" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying" overload-function-count="3" proc-language="sql" function-signature="nested_table$delete(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)" routine-number="365158">
                        <complex-attribute name="sql"><![CDATA[
    SELECT aws_oracle_ext.collection_element_delete
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_start => p_array_key
    );
]]></complex-attribute>
                        <category _I_D="0365ecfc-60c2-4ad4-b77b-7827d9678278" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="653e219d-892b-4e96-bb3b-fdba328a3bda" name="nested_table$delete" subcategories-loading="none" object-loading="extended" context="nested_table$delete(p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="nested_table$delete(p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365159" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying" overload-function-count="3" proc-language="sql" function-signature="nested_table$delete(p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_array_key_from character varying, p_array_key_until character varying, p_procedure_name character varying)" routine-number="365159">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_element_delete
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_start => p_array_key_from,
        p_end => p_array_key_until
    );

]]></complex-attribute>
                        <category _I_D="b14c5b83-8d24-471c-a29a-471ee506d582" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="93f042a4-8f82-4756-9246-a5ad05f49c41" name="nested_table$delete" subcategories-loading="none" object-loading="extended" context="nested_table$delete(p_array_path character varying, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="nested_table$delete(p_array_path character varying, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365157" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="3" proc-language="sql" function-signature="nested_table$delete(p_array_path character varying, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_procedure_name character varying)" routine-number="365157">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_element_delete
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path
    );
]]></complex-attribute>
                        <category _I_D="939fd0c8-d8cb-4ed9-b3f8-22c881536c94" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="03fc8728-f98d-4ea0-a065-055db6e4bc13" name="nested_table$exists" subcategories-loading="none" object-loading="extended" context="nested_table$exists" is-trigger-function="0" unique-function-name="nested_table$exists" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying" is-returning-set="f" ret-datatype="bool" function-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365160" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying" overload-function-count="1" proc-language="sql" function-signature="nested_table$exists(p_array_path character varying, p_array_key character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT aws_oracle_ext.collection_element_exists
	(
		p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_idx => p_array_key
	);

]]></complex-attribute>
                        <category _I_D="2208fd3b-6cad-4285-9580-88869194318f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="410f363a-cbb4-4ac8-945b-b5fcee0b0762" name="nested_table$extend" subcategories-loading="none" object-loading="extended" context="nested_table$extend(p_array_path character varying, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="nested_table$extend(p_array_path character varying, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365163" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="3" proc-language="sql" function-signature="nested_table$extend(p_array_path character varying, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_procedure_name character varying)" routine-number="365163">
                        <complex-attribute name="sql"><![CDATA[
SELECT aws_oracle_ext.nested_table$extend
(
    p_array_path,
    NULL,
    NULL,
    p_procedure_name
);
]]></complex-attribute>
                        <category _I_D="f0c3c69e-94ad-4fe6-8b60-8c1e2e5e104b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="070c26e7-9dbe-4047-ab57-0a15ac16a881" name="nested_table$extend" subcategories-loading="none" object-loading="extended" context="nested_table$extend(p_array_path character varying, p_quantity_of_elements bigint, p_element_for_copy bigint, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="nested_table$extend(p_array_path character varying, p_quantity_of_elements bigint, p_element_for_copy bigint, p_procedure_name character varying)" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,bigint,bigint,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_quantity_of_elements bigint, p_element_for_copy bigint, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365161" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_quantity_of_elements bigint, p_element_for_copy bigint, p_procedure_name character varying" overload-function-count="3" proc-language="plv8" function-signature="nested_table$extend(p_array_path character varying, p_quantity_of_elements bigint, p_element_for_copy bigint, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_quantity_of_elements bigint, p_element_for_copy bigint, p_procedure_name character varying)" routine-number="365161">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

pathParts = parser(p_array_path);
const pathlength = pathParts.length;
if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}
const vn = pathParts[0].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");
chk(sn, pn, vn);

const errorMessage = `PLS-00306: wrong number or types of arguments in call to 'EXTEND'`;

if (aws_oracle_ext[sn][pn][vn] != null) {
  if (aws_oracle_ext[sn][pn][vn].collectionType !== 'NT') {
    plv8.elog(ERROR, errorMessage);
  }
}

const quantity = p_quantity_of_elements === null ? 1 : Number(p_quantity_of_elements);
if (isNaN(quantity)) {
  plv8.elog(ERROR, errorMessage);
}

const srcIdx = p_element_for_copy === null ? null : Number(p_element_for_copy);

if ( srcIdx !== null &&  isNaN(srcIdx)) {
  plv8.elog(ERROR, errorMessage);
}

let fillValue = null;

if (srcIdx !== null) {
  fillValue = aws_oracle_ext[sn][pn][vn].getValue(srcIdx);
  if (typeof(fillValue) === 'undefined') {
    plv8.elog(ERROR, `ORA-06533: Subscript beyond count`);
  }
  if (typeof(fillValue) === 'object' && fillValue == emptyCollectionElement) {
    plv8.elog(ERROR, `ORA-01403: no data found`);
  }
}

let lastIdx = 0;
const cnt = aws_oracle_ext[sn][pn][vn].count();
if (cnt > 0 ) {
  aws_oracle_ext[sn][pn][vn].walkDesc(null,null, function(key, value){
    lastIdx = key;
    return true;
  });
}

for (let i = 1; i<= quantity; i++) {
  lastIdx++;
  aws_oracle_ext[sn][pn][vn].putValue(lastIdx, fillValue);  
}

]]></complex-attribute>
                        <category _I_D="013d94a4-87c7-497b-9ab3-c8cbd1050048" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="904ea925-d714-4e72-ba59-2f28c5f42912" name="nested_table$extend" subcategories-loading="none" object-loading="extended" context="nested_table$extend(p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="nested_table$extend(p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,bigint,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365162" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying" overload-function-count="3" proc-language="sql" function-signature="nested_table$extend(p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying)" routine-number="365162">
                        <complex-attribute name="sql"><![CDATA[
SELECT aws_oracle_ext.nested_table$extend
(
    p_array_path,
    p_quantity_of_elements,
    NULL,
    p_procedure_name
);
]]></complex-attribute>
                        <category _I_D="5f9a2d28-471b-44c7-82f6-f904b770e960" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d76fba77-5e36-42ad-b729-d05d22ac6310" name="nested_table$first" subcategories-loading="none" object-loading="extended" context="nested_table$first" is-trigger-function="0" unique-function-name="nested_table$first" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_path character varying, p_procedure_name character varying, p_def anyelement DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365164" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying, p_def anyelement" overload-function-count="1" proc-language="sql" function-signature="nested_table$first(p_array_path character varying, p_procedure_name character varying, p_def anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_first
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_tp => p_def
    );

]]></complex-attribute>
                        <category _I_D="19f44863-2b47-4a61-9106-e07ebc6e9901" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="34222d9b-ac1e-4ed5-9fd7-9e62309d541d" name="nested_table$get_value" subcategories-loading="none" object-loading="extended" context="nested_table$get_value" is-trigger-function="0" unique-function-name="nested_table$get_value" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_value_path character varying, p_procedure_name character varying, p_value_datatype anyelement DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365165" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_value_path character varying, p_procedure_name character varying, p_value_datatype anyelement" overload-function-count="1" proc-language="plpgsql" function-signature="nested_table$get_value(p_array_value_path character varying, p_procedure_name character varying, p_value_datatype anyelement)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vret JSONB;
BEGIN

    vret := aws_oracle_ext.collection_element_get
	(
		p_routine_name => p_procedure_name,
        p_collection_path => p_array_value_path
	);

    IF vret IS NULL THEN

        RAISE NO_DATA_FOUND;

    END IF;

    RETURN JSONB_POPULATE_RECORD
    (
        p_value_datatype,
        vret
    );

END;
]]></complex-attribute>
                        <category _I_D="f010b43c-9080-4876-9d12-ad71ff1ae88d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="33da3c50-1dd3-48ba-84af-7b32afe789fc" name="nested_table$is_null" subcategories-loading="none" object-loading="extended" context="nested_table$is_null" is-trigger-function="0" unique-function-name="nested_table$is_null" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="bool" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365957" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="1" proc-language="plv8" function-signature="nested_table$is_null(p_array_path character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot')
  plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_array_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);

const collectionType = aws_oracle_ext[sn][pn][vn] === null ? 'NT' : aws_oracle_ext[sn][pn][vn].collectionType;

if (collectionType === 'ASSOC') {
  plv8.elog(ERROR, 'Incorrect collection type');
}

return aws_oracle_ext[sn][pn][vn] === null;

]]></complex-attribute>
                        <category _I_D="0f29f21b-6d65-40de-81da-88abf4d8c061" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ce3137f2-aa48-49fe-82b5-0ca1a2c1b957" name="nested_table$last" subcategories-loading="none" object-loading="extended" context="nested_table$last" is-trigger-function="0" unique-function-name="nested_table$last" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_path character varying, p_procedure_name character varying, p_def anyelement DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365166" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying, p_def anyelement" overload-function-count="1" proc-language="sql" function-signature="nested_table$last(p_array_path character varying, p_procedure_name character varying, p_def anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_last
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_tp => p_def
    );

]]></complex-attribute>
                        <category _I_D="809897ec-f73d-4085-9226-73b4be02ebe3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="478e483b-a748-4f2c-9ab7-c80b6ed401df" name="nested_table$limit" subcategories-loading="none" object-loading="extended" context="nested_table$limit" is-trigger-function="0" unique-function-name="nested_table$limit" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="int8" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365167" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="1" proc-language="plpgsql" function-signature="nested_table$limit(p_array_path character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
BEGIN
   RETURN NULL;  
END;
]]></complex-attribute>
                        <category _I_D="3e9def09-e343-40e4-b9f1-c5aaf7927fa2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c3b6005e-600a-462b-ba28-e30939785b22" name="nested_table$next" subcategories-loading="none" object-loading="extended" context="nested_table$next" is-trigger-function="0" unique-function-name="nested_table$next" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365168" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement" overload-function-count="1" proc-language="sql" function-signature="nested_table$next(p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_next
	(
		p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_idx => p_array_key,
        p_tp => p_def
	);

]]></complex-attribute>
                        <category _I_D="47f32ff9-b3e6-4c78-87af-624372605d3d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2c832522-0911-401d-8157-b9a40cea09c0" name="nested_table$prior" subcategories-loading="none" object-loading="extended" context="nested_table$prior" is-trigger-function="0" unique-function-name="nested_table$prior" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying,anyelement" is-returning-set="f" ret-datatype="anyelement" function-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365169" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement" overload-function-count="1" proc-language="sql" function-signature="nested_table$prior(p_array_path character varying, p_array_key character varying, p_procedure_name character varying, p_def anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_prior
	(
		p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_idx => p_array_key,
        p_tp => p_def
	);

]]></complex-attribute>
                        <category _I_D="922ea08d-e9ff-4331-ac5d-1a4de0d97a8f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="71f404d1-1cc7-45d8-b65a-8e661e4bc830" name="nested_table$set_null" subcategories-loading="none" object-loading="extended" context="nested_table$set_null" is-trigger-function="0" unique-function-name="nested_table$set_null" is-aggregate="f" language-name="plv8" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365958" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="1" proc-language="plv8" function-signature="nested_table$set_null(p_array_path character varying, p_procedure_name character varying)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
let pathParts = parser(p_procedure_name);

if (pathParts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
if (pathParts[0].group === 'dot' || pathParts[1].group !== 'dot' || pathParts[2].group === 'dot') plv8.elog(ERROR, 'Incorrect routine name');

const sn = pathParts[0].text;
const pn = pathParts[2].text;

const chk = plv8.find_function("aws_oracle_ext.collectioncheck");

pathParts = parser(p_array_path);
const pathlength = pathParts.length;

if (pathlength != 1) {
  plv8.elog(ERROR, 'Nested collection is not supported');
}
if (pathParts[0].group === 'idx' || pathParts[0].group === 'dot') {
  plv8.elog(ERROR, 'Incorrect collection path');
}

const vn = pathParts[0].text;
chk(sn, pn, vn);

const collectionType = aws_oracle_ext[sn][pn][vn].collectionType;

if (collectionType === 'ASSOC') {
  plv8.elog(ERROR, 'Incorrect collection type');
}

aws_oracle_ext[sn][pn][vn] = null;

]]></complex-attribute>
                        <category _I_D="af2bdb2e-fa0e-48bd-9925-4caf96b3ef2d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="149b4983-8ba4-41fd-ae5b-138b2761d0ce" name="nested_table$set_value" subcategories-loading="none" object-loading="extended" context="nested_table$set_value" is-trigger-function="0" unique-function-name="nested_table$set_value" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,anyelement" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_procedure_name character varying, p_value anyelement" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365170" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying, p_value anyelement" overload-function-count="1" proc-language="sql" function-signature="nested_table$set_value(p_array_path character varying, p_procedure_name character varying, p_value anyelement)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT aws_oracle_ext.collection_element_set
    (
        p_routine_name => p_procedure_name,
        p_collection_path => p_array_path,
        p_val => p_value
    );

]]></complex-attribute>
                        <category _I_D="075af24f-9a8e-431a-8829-30f29fd25384" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="80b10c50-38be-4195-b120-b0f7065f8969" name="nested_table$trim" subcategories-loading="none" object-loading="extended" context="nested_table$trim(p_array_path character varying, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="nested_table$trim(p_array_path character varying, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365172" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_procedure_name character varying" overload-function-count="2" proc-language="sql" function-signature="nested_table$trim(p_array_path character varying, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_procedure_name character varying)" routine-number="365172">
                        <complex-attribute name="sql"><![CDATA[
SELECT aws_oracle_ext.collection_element_trim
(
    p_routine_name => p_procedure_name,
    p_collection_path => p_array_path,
    p_n => 1
);
]]></complex-attribute>
                        <category _I_D="49a80756-f8be-4354-ab0a-ab46e76e2ec9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="642ab62d-acb9-4919-a433-739e61b8490c" name="nested_table$trim" subcategories-loading="none" object-loading="extended" context="nested_table$trim(p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying)" is-trigger-function="0" unique-function-name="nested_table$trim(p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying)" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,bigint,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365171" volatility="VOLATILE" is-window="f" function-identity-arguments="p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying" overload-function-count="2" proc-language="sql" function-signature="nested_table$trim(p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying)" unique-suffix="(p_array_path character varying, p_quantity_of_elements bigint, p_procedure_name character varying)" routine-number="365171">
                        <complex-attribute name="sql"><![CDATA[
SELECT aws_oracle_ext.collection_element_trim
(
    p_routine_name => p_procedure_name,
    p_collection_path => p_array_path,
    p_n => p_quantity_of_elements
);
]]></complex-attribute>
                        <category _I_D="bff864b5-a1cb-40d3-a805-0c3ea2f2b02e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9191b4bc-61b3-4b6a-a10e-24945600dec1" name="next" subcategories-loading="none" object-loading="extended" context="next" is-trigger-function="0" unique-function-name="next" is-aggregate="f" language-name="sql" arguments-datatypes="anyarray,integer" is-returning-set="f" ret-datatype="int4" function-arguments="parray anyarray, n integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365174" volatility="VOLATILE" is-window="f" function-identity-arguments="parray anyarray, n integer" overload-function-count="1" proc-language="sql" function-signature="next(parray anyarray, n integer)">
                        <complex-attribute name="sql"><![CDATA[  
    
    SELECT
        CASE
            WHEN n >= ARRAY_LENGTH(pArray, 1) THEN
                NULL::INT
            WHEN n < 1 THEN
                1::INT
            ELSE 
                (n + 1)::INT
        END;

]]></complex-attribute>
                        <category _I_D="44ac2c35-bb31-46ef-8dbd-05071e5e3998" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="19a9e246-5dc8-453a-bbb0-d81a6a162757" name="next_day" subcategories-loading="none" object-loading="extended" context="next_day" is-trigger-function="0" unique-function-name="next_day" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone,text" is-returning-set="f" ret-datatype="timestamp" function-arguments="ddate timestamp without time zone, cchar text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365173" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ddate timestamp without time zone, cchar text" overload-function-count="1" proc-language="sql" function-signature="next_day(ddate timestamp without time zone, cchar text)">
                        <complex-attribute name="sql"><![CDATA[

    WITH dn AS
    (
        SELECT
            CASE
                WHEN UPPER(cchar) = 'MONDAY' THEN 1 
                WHEN UPPER(cchar) = 'TUESDAY' THEN 2 
                WHEN UPPER(cchar) = 'WEDNESDAY' THEN 3 
                WHEN UPPER(cchar) = 'THURSDAY' THEN 4 
                WHEN UPPER(cchar) = 'FRIDAY' THEN 5 
                WHEN UPPER(cchar) = 'SATURDAY' THEN 6 
                WHEN UPPER(cchar) = 'SUNDAY' THEN 7 
                ELSE 0
            END AS dnum
    ) 
    SELECT ddate + make_interval
    (
        days =>
        CASE
            WHEN TO_CHAR(ddate, 'd')::INT > dnum THEN
                
                7 + dnum - TO_CHAR(ddate, 'd')::INT + 1

            ELSE

                dnum - TO_CHAR(ddate, 'd')::INT + 1

        END::INT
    )
    FROM dn;

]]></complex-attribute>
                        <category _I_D="0e820838-1b20-4f61-a8f5-40fef3af0113" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d8d3783c-d5c7-40bc-b2c8-3b7506b4db28" name="nls_parameters_init" subcategories-loading="none" object-loading="extended" context="nls_parameters_init" is-trigger-function="0" unique-function-name="nls_parameters_init" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean" is-returning-set="f" ret-datatype="void" function-arguments="pterritory text DEFAULT NULL::text, precalc boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="364956" volatility="VOLATILE" is-window="f" function-identity-arguments="pterritory text, precalc boolean" overload-function-count="1" proc-language="plpgsql" function-signature="nls_parameters_init(pterritory text, precalc boolean)" comment="Set some NLS session parameters on first to_char/to_date/to_number call">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vNlsTerritory TEXT;
    vctype TEXT;
    rec RECORD;
    vrecalc BOOLEAN DEFAULT FALSE;
BEGIN
    
    IF precalc THEN

        vrecalc := TRUE;

    ELSE

        vrecalc := CASE WHEN COALESCE(UPPER(aws_oracle_ext.get_extpack_variable(variable_name => 'RECALCNLS', missing_ok => TRUE)), 'TRUE') <> 'TRUE' THEN FALSE ELSE TRUE END;

    END IF;
    
    IF vrecalc THEN

        IF pterritory IS NULL THEN

            SELECT SPLIT_PART(pd.datctype::TEXT, '.', 1)
            INTO vctype
            FROM pg_database pd
            WHERE pd.datname = CURRENT_DATABASE();

            SELECT ap.nls_territory
            INTO vNlsTerritory
            FROM aws_oracle_ext.nls_parameters ap
            WHERE ap.pg_territory_ux = vctype
            ORDER BY 1
            LIMIT 1;

            IF NOT FOUND THEN

                vNlsTerritory := 'AMERICA';

            END IF;
        ELSE

            SELECT ap.nls_territory
            INTO vNlsTerritory
            FROM aws_oracle_ext.nls_parameters ap
            WHERE ap.nls_territory = pterritory;

            IF NOT FOUND THEN

                vNlsTerritory := 'AMERICA';

            END IF;

        END IF;
        
        FOR rec IN
        (
            SELECT anp.nls_territory,
                anp.params_dictionary ->> 'NLS_CURRENCY' AS NLS_CURRENCY,
                anp.params_dictionary ->> 'NLS_ISO_CURRENCY' AS NLS_ISO_CURRENCY,
                anp.params_dictionary ->> 'NLS_DATE_FORMAT' AS NLS_DATE_FORMAT,
                anp.params_dictionary ->> 'NLS_DUAL_CURRENCY' AS NLS_DUAL_CURRENCY,
                anp.params_dictionary ->> 'NLS_NUMERIC_CHARACTERS' AS NLS_NUMERIC_CHARACTERS,
                anp.params_dictionary ->> 'NLS_CALENDAR' AS nls_calendar,
                anp.params_dictionary ->> 'NLS_CHARACTERSET' AS nls_characterset,
                anp.params_dictionary ->> 'NLS_COMP' AS nls_comp,
                anp.params_dictionary ->> 'NLS_DATE_LANGUAGE' AS nls_date_language,
                anp.params_dictionary ->> 'NLS_LANGUAGE' AS nls_language,
                anp.params_dictionary ->> 'NLS_LENGTH_SEMANTICS' AS nls_length_semantics,
                anp.params_dictionary ->> 'NLS_NCHAR_CHARACTERSET' AS nls_nchar_characterset,
                anp.params_dictionary ->> 'NLS_NCHAR_CONV_EXCP' AS nls_nchar_conv_excp,
                anp.params_dictionary ->> 'NLS_SORT' AS nls_sort,
                anp.params_dictionary ->> 'NLS_TERRITORY' AS nls_territory,
                anp.params_dictionary ->> 'NLS_TIMESTAMP_FORMAT' AS nls_timestamp_format,
                anp.params_dictionary ->> 'NLS_TIMESTAMP_TZ_FORMAT' AS nls_timestamp_tz_format,
                anp.params_dictionary ->> 'NLS_TIME_FORMAT' AS nls_time_format,
                anp.params_dictionary ->> 'NLS_TIME_TZ_FORMAT' AS nls_time_tz_format

            FROM aws_oracle_ext.nls_parameters anp
            WHERE anp.nls_territory = vNlsTerritory
        )
        LOOP

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_TERRITORY',
                variable_value => rec.nls_territory::TEXT
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_CURRENCY',
                variable_value => rec.nls_currency::TEXT
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_ISO_CURRENCY',
                variable_value => rec.nls_iso_currency::TEXT
            );
            
            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_DATE_FORMAT',
                variable_value => rec.nls_date_format::TEXT
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_DUAL_CURRENCY',
                variable_value => rec.nls_dual_currency::TEXT
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_NUMERIC_CHARACTERS',
                variable_value => rec.nls_numeric_characters::TEXT
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_CALENDAR',
                variable_value => rec.nls_calendar
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_CHARACTERSET',
                variable_value => rec.nls_characterset
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_COMP',
                variable_value => rec.nls_comp
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_DATE_LANGUAGE',
                variable_value => rec.nls_date_language
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_LANGUAGE',
                variable_value => rec.nls_language
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_LENGTH_SEMANTICS',
                variable_value => rec.nls_length_semantics
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_NCHAR_CHARACTERSET',
                variable_value => rec.nls_nchar_characterset
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_NCHAR_CONV_EXCP',
                variable_value => rec.nls_nchar_conv_excp
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_SORT',
                variable_value => rec.nls_sort
            );
            
            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_TERRITORY',
                variable_value => rec.nls_territory
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_TIMESTAMP_FORMAT',
                variable_value => rec.nls_timestamp_format
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_TIMESTAMP_TZ_FORMAT',
                variable_value => rec.nls_timestamp_tz_format
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_TIME_FORMAT',
                variable_value => rec.nls_timestamp_tz_format
            );

            PERFORM aws_oracle_ext.set_package_variable
            (
                variable_name => 'NLS_TIME_TZ_FORMAT',
                variable_value => rec.nls_timestamp_tz_format
            );

        END LOOP;

    PERFORM aws_oracle_ext.set_package_variable
    (
        variable_name => 'RECALCNLS',
        variable_value => FALSE::TEXT
    );

    END IF;

END;

]]></complex-attribute>
                        <category _I_D="a9fec696-db0d-43cb-92c8-904d93a055ba" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="03d5efb0-6d9b-4776-a3da-cca9999b504f" name="number_limit_correct" subcategories-loading="none" object-loading="extended" context="number_limit_correct" is-trigger-function="0" unique-function-name="number_limit_correct" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="numeric" function-arguments="pval numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365175" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pval numeric" overload-function-count="1" proc-language="plpgsql" function-signature="number_limit_correct(pval numeric)" comment="Check if value is in range for Oracle Number">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    IF pVal < -1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    OR pVal > 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    THEN

        RAISE USING MESSAGE := 'ORA-01426: numeric overflow', HINT := '-01426';

    END IF;

    RETURN pVal;
    
END;
]]></complex-attribute>
                        <category _I_D="67082717-6ae3-4617-aa93-f279e434f405" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="91085610-fc11-4d72-ad93-3aa76d61d7c5" name="owa$init_cgi_env" subcategories-loading="none" object-loading="extended" context="owa$init_cgi_env" is-trigger-function="0" unique-function-name="owa$init_cgi_env" is-aggregate="f" language-name="plpgsql" arguments-datatypes="json" is-returning-set="f" ret-datatype="void" function-arguments="pparams json" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365299" volatility="VOLATILE" is-window="f" function-identity-arguments="pparams json" overload-function-count="1" proc-language="plpgsql" function-signature="owa$init_cgi_env(pparams json)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    CREATE TEMPORARY TABLE IF NOT EXISTS aws_cgi_env
    (
        id BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        cgi_var_name TEXT NULL,
        cgi_var_val TEXT NULL,
        CONSTRAINT ht_headers_pk PRIMARY KEY (id)
    );

    TRUNCATE TABLE aws_cgi_env;

    INSERT INTO aws_cgi_env(cgi_var_name, cgi_var_val)
    SELECT * FROM JSON_EACH_TEXT(pParams);

    INSERT INTO aws_cgi_env(cgi_var_name, cgi_var_val)
    VALUES ('REMOTE_USER', CURRENT_SCHEMA());


END;
]]></complex-attribute>
                        <category _I_D="4ccd9de4-3ebd-4fe4-aae3-ee99887829f9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8a354dde-fbf1-4af8-b5fc-8ff4ec1b7b0f" name="owa_cookie$get" subcategories-loading="none" object-loading="extended" context="owa_cookie$get" is-trigger-function="0" unique-function-name="owa_cookie$get" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="json" function-arguments="name text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365305" volatility="VOLATILE" is-window="f" function-identity-arguments="name text" overload-function-count="1" proc-language="plpgsql" function-signature="owa_cookie$get(name text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    http_cookie TEXT;
    vResult JSON;
BEGIN

    http_cookie := aws_oracle_ext.owa_util$get_cgi_env('HTTP_COOKIE');

    TRUNCATE TABLE aws_cgi_cookie;

    IF LENGTH(COALESCE(TRIM(http_cookie),'')) <> 0 THEN

        INSERT INTO aws_cgi_cookie(cookie_name, cookie_val)
        SELECT
            SUBSTR
            (
                LTRIM(v),
                1,
                STRPOS
                (
                    LTRIM(v),
                    '='
                ) - 1
            ),
            SUBSTR
            (
                LTRIM(v),
                STRPOS(LTRIM(v), '=') + 1
            )
        FROM REGEXP_SPLIT_TO_TABLE(SUBSTR(http_cookie, 1, LENGTH(http_cookie) - 1), ';') v;

    END IF;

    SELECT JSON_BUILD_OBJECT
    (
        'name', cookie_name
        ,
        'vals', vals
        ,
        'num_vals', num_vals
    )
    INTO vResult
    FROM
    (
        SELECT cookie_name,
            COUNT(cookie_val_id) AS num_vals,
        ARRAY_AGG(cookie_val) AS vals
        FROM aws_cgi_cookie 
        WHERE cookie_name = name
        GROUP BY cookie_name
    ) z;

    IF vResult IS NULL THEN

        vResult := JSON_BUILD_OBJECT
        (
            'name', name
            ,
            'num_vals', 0
        );

    END IF;


    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="618e21d9-8270-4f7b-9088-31c7c7390396" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="931f9ef8-2342-482d-aabb-31585cda1953" name="owa_cookie$send" subcategories-loading="none" object-loading="extended" context="owa_cookie$send" is-trigger-function="0" unique-function-name="owa_cookie$send" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,timestamp without time zone,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="name text, value text, expires timestamp without time zone DEFAULT NULL::timestamp without time zone, path text DEFAULT NULL::text, domain text DEFAULT NULL::text, secure text DEFAULT NULL::text, httponly text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="7" function-id="365306" volatility="VOLATILE" is-window="f" function-identity-arguments="name text, value text, expires timestamp without time zone, path text, domain text, secure text, httponly text" overload-function-count="1" proc-language="plpgsql" function-signature="owa_cookie$send(name text, value text, expires timestamp without time zone, path text, domain text, secure text, httponly text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$print
    (
        CONCAT
        (
            'Set-Cookie: ',
            name,
            '=',
            value,
            ';',
            CASE
                WHEN expires IS NOT NULL THEN
                    CONCAT(' expires=', aws_oracle_ext.to_char(expires, 'DD-Mon-YYYY HH24:MI:SS', 'NLS_DATE_LANGUAGE=en_US'), ';')
                ELSE
                    ''
            END,
            CASE
                WHEN path IS NOT NULL THEN
                    CONCAT(' path=', path, ';')
                ELSE
                    ''
            END,
            CASE
                WHEN domain IS NOT NULL THEN
                    CONCAT(' domain=', domain, ';')
                ELSE
                    ''
            END,
            CASE
                WHEN secure IS NOT NULL THEN
                    ' secure;'
                ELSE
                    ''
            END,
            CASE
                WHEN httponly IS NOT NULL THEN
                    ' HttpOnly'
                ELSE
                    ''
            END
        )
    );

END;
]]></complex-attribute>
                        <category _I_D="b9ee46d2-a57e-49d3-a2e2-e0c7223343f5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="79aef142-6c8a-494a-a07c-6e253ba85540" name="owa_util$get_cgi_env" subcategories-loading="none" object-loading="extended" context="owa_util$get_cgi_env" is-trigger-function="0" unique-function-name="owa_util$get_cgi_env" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="param_name text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365302" volatility="VOLATILE" is-window="f" function-identity-arguments="param_name text" overload-function-count="1" proc-language="plpgsql" function-signature="owa_util$get_cgi_env(param_name text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult TEXT;
BEGIN

    SELECT cgi_var_val
    INTO vResult
    FROM aws_cgi_env
    WHERE UPPER(cgi_var_name) = UPPER(param_name)
    ORDER BY id
    LIMIT 1;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="087457b2-ccc6-4d55-a55f-271d87708804" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8d6dc7ae-e772-4173-b24b-e8f3fc382e5e" name="owa_util$get_owa_service_path" subcategories-loading="none" object-loading="extended" context="owa_util$get_owa_service_path" is-trigger-function="0" unique-function-name="owa_util$get_owa_service_path" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365303" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="owa_util$get_owa_service_path()">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    script_name TEXT;
BEGIN

    script_name := aws_oracle_ext.owa_util$get_cgi_env('SCRIPT_NAME');

    script_name := CONCAT
    (
        script_name,
        CASE
            WHEN SUBSTR(script_name,-1) = '/' then
                ''
            ELSE
                '/'
        END
    );
    
    RETURN script_name;

END;
]]></complex-attribute>
                        <category _I_D="487a403c-9a25-479b-8857-69b27e53fcfb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bbf315ee-c683-4fc8-a021-4d11b54c2346" name="owa_util$http_header_close" subcategories-loading="none" object-loading="extended" context="owa_util$http_header_close" is-trigger-function="0" unique-function-name="owa_util$http_header_close" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365562" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="owa_util$http_header_close()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$prn(E'\n');
    
END;
]]></complex-attribute>
                        <category _I_D="9597e992-4d02-4f6c-9b98-7b2db894010c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="27cc6c83-74e6-40d7-bf92-c0b69b6bc791" name="owa_util$mime_header" subcategories-loading="none" object-loading="extended" context="owa_util$mime_header" is-trigger-function="0" unique-function-name="owa_util$mime_header" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean,text" is-returning-set="f" ret-datatype="void" function-arguments="ccontent_type text DEFAULT 'text/html'::text, bclose_header boolean DEFAULT true, ccharset text DEFAULT 'MaGiC_KeY'::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365561" volatility="VOLATILE" is-window="f" function-identity-arguments="ccontent_type text, bclose_header boolean, ccharset text" overload-function-count="1" proc-language="plpgsql" function-signature="owa_util$mime_header(ccontent_type text, bclose_header boolean, ccharset text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    charset VARCHAR(40);
BEGIN

    IF ccharset = 'MaGiC_KeY' THEN

        IF UPPER(ccontent_type) LIKE 'TEXT%' THEN

            charset := aws_oracle_ext.owa_util$get_cgi_env('REQUEST_IANA_CHARSET');
            
            IF charset IS NULL THEN
               
                PERFORM aws_oracle_ext.htp$prn
                (
                    CONCAT
                    (
                        'Content-type: ',
                        ccontent_type,
                        E'\n'
                    )
                );

            ELSE

                PERFORM aws_oracle_ext.htp$prn
                (
                    CONCAT
                    (
                        'Content-type: ',
                        ccontent_type,
                        '; charset=',
                        charset,
                        E'\n'
                    )
                );

            END IF;

         ELSE

            PERFORM aws_oracle_ext.htp$prn
            (
                CONCAT
                (
                    'Content-type: ',
                    ccontent_type,
                    E'\n'
                )
            );

        END IF;

    ELSE
         
         IF charset IS NULL THEN

            PERFORM aws_oracle_ext.htp$prn
            (
                CONCAT
                (
                    'Content-type: ',
                    ccontent_type,
                    E'\n'
                )
            );

         ELSE
            
            PERFORM aws_oracle_ext.htp$prn
            (
                CONCAT
                (
                    'Content-type: ',
                    ccontent_type,
                    '; charset=',
                    charset,
                    E'\n'
                )
            );

         END IF;

    END IF;

    IF bclose_header THEN

        PERFORM aws_oracle_ext.owa_util$http_header_close();

    END IF;

END;
]]></complex-attribute>
                        <category _I_D="3c81fe88-cec7-4adb-ac7d-f2bf9000308a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1bc013a6-552d-4c05-91cc-9c0cd00767b8" name="owa_util$print_cgi_env" subcategories-loading="none" object-loading="extended" context="owa_util$print_cgi_env" is-trigger-function="0" unique-function-name="owa_util$print_cgi_env" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365301" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="owa_util$print_cgi_env()">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    rec RECORD;
BEGIN

    FOR rec IN
    (
        SELECT cgi_var_name,
            cgi_var_val
        FROM aws_cgi_env
        ORDER BY id
    ) LOOP
        
        PERFORM aws_oracle_ext.htp$print
        (
            CONCAT
            (
                rec.cgi_var_name,
                ' = ',
                rec.cgi_var_val,
                aws_oracle_ext.htf$nl()
            )
        );

    END LOOP;
    
END;
]]></complex-attribute>
                        <category _I_D="f6a0c5da-c7a5-49c9-b583-b6495e40c892" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c60dae24-6947-497b-8395-887128e7ccd2" name="owa_util$redirect_url" subcategories-loading="none" object-loading="extended" context="owa_util$redirect_url" is-trigger-function="0" unique-function-name="owa_util$redirect_url" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean" is-returning-set="f" ret-datatype="void" function-arguments="curl text, bclose_header boolean DEFAULT true" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365304" volatility="VOLATILE" is-window="f" function-identity-arguments="curl text, bclose_header boolean" overload-function-count="1" proc-language="plpgsql" function-signature="owa_util$redirect_url(curl text, bclose_header boolean)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.owa_util$status_line
    (
        nstatus      => 302,
        bclose_header => FALSE
    );
    
    PERFORM aws_oracle_ext.htp$prn
    (
        CONCAT
        (
            'Location: ',
            curl,
            E'\n'
        )
    );

    IF bclose_header THEN

        PERFORM aws_oracle_ext.owa_util$http_header_close();

    END IF;

END;
]]></complex-attribute>
                        <category _I_D="32fd3290-c8fb-41bb-bbeb-26290d35a3a6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ca654261-5df4-48d1-90ff-e9c8f91bfa0f" name="owa_util$status_line" subcategories-loading="none" object-loading="extended" context="owa_util$status_line" is-trigger-function="0" unique-function-name="owa_util$status_line" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,text,boolean" is-returning-set="f" ret-datatype="void" function-arguments="nstatus numeric, creason text DEFAULT NULL::text, bclose_header boolean DEFAULT true" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365300" volatility="VOLATILE" is-window="f" function-identity-arguments="nstatus numeric, creason text, bclose_header boolean" overload-function-count="1" proc-language="plpgsql" function-signature="owa_util$status_line(nstatus numeric, creason text, bclose_header boolean)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.htp$prn
    (
        CONCAT
        (
            'Status: ',
            nstatus,
            ' ',
            creason,
            E'\n'
        )
    );

    IF (bclose_header) THEN
        
        PERFORM aws_oracle_ext.owa_util$http_header_close();

    END IF;
    
END;
]]></complex-attribute>
                        <category _I_D="94cfa393-7546-4268-b379-e8cd163fff04" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4a0fc0c1-eead-4328-be2c-8fd123db350c" name="owa_wrapper" subcategories-loading="none" object-loading="extended" context="owa_wrapper" is-trigger-function="0" unique-function-name="owa_wrapper" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,json" is-returning-set="f" ret-datatype="void" function-arguments="proutinepath text, pparams json" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365564" volatility="VOLATILE" is-window="f" function-identity-arguments="proutinepath text, pparams json" overload-function-count="1" proc-language="plpgsql" function-signature="owa_wrapper(proutinepath text, pparams json)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vSchema TEXT;
    vRoutineName TEXT;
    vRarray TEXT[];
    vStatusCode SMALLINT DEFAULT 404;
    vStatusDescription TEXT;
    vRoutineExists SMALLINT DEFAULT 0;
    rec RECORD;
    vParamsPassed TEXT[];
    vParamsExpected TEXT[];
    vSQL TEXT;
    vDefaults JSONB;
    vArgs TEXT;
BEGIN

    vRarray := REGEXP_SPLIT_TO_ARRAY(pRoutinePath, '\.');

    IF ARRAY_LENGTH(vRarray, 1) = 1 THEN

        vSchema := CURRENT_SCHEMA();
        vRoutineName := vRarray[1];

    ELSE

        vSchema := vRarray[1];

        vRoutineName := ARRAY_TO_STRING(ARRAY_REMOVE(vRarray, vSchema), '');

    END IF;

    IF vSchema IS NOT NULL THEN

        SELECT COUNT(*)
        INTO vRoutineExists
        FROM pg_proc p
        JOIN pg_namespace n ON p.pronamespace = n.oid
        WHERE n.nspname = TRIM(LOWER(vSchema))
        AND p.proname = TRIM(LOWER(vRoutineName));

    END IF;

    IF vRoutineExists = 1 THEN

        SELECT COALESCE(
            ARRAY_AGG(V),
            ARRAY[]::TEXT[]
        )
        INTO vParamsPassed
        FROM JSON_OBJECT_KEYS(pParams) AS v;

        <<procsearch>>
        FOR rec IN
        (
            SElECT p.oid,
                p.proname,
                p.proargnames,
                p.pronargdefaults,
                p.proargtypes
            FROM pg_proc p
            JOIN pg_namespace n ON p.pronamespace = n.oid
            WHERE n.nspname = TRIM(LOWER(vSchema))
            AND p.proname = TRIM(LOWER(vRoutineName))
        )
        LOOP

            CASE
                
                WHEN rec.proargnames IS NULL AND vParamsPassed = ARRAY[]::TEXT[] THEN

                    vArgs := '';

                WHEN rec.pronargdefaults > 0 AND vParamsPassed <@ rec.proargnames AND rec.proargnames IS NOT NULL THEN

                    FOR i IN 1..ARRAY_LENGTH(rec.proargnames, 1) LOOP

                        IF NOT pParams::JSONB ? rec.proargnames[i]
                            AND PG_GET_FUNCTION_ARG_DEFAULT(rec.oid, i) IS NULL THEN

                            RAISE SQLSTATE '42883';

                        END IF;

                        vArgs := CONCAT(
                            vArgs,
                            rec.proargnames[i],
                            ' => ',
                            CASE
                                WHEN pParams::JSONB ? rec.proargnames[i] THEN
                                    CONCAT(
                                        CASE WHEN rec.proargtypes[i - 1] <> 701 AND LENGTH(COALESCE(pParams->rec.proargnames[i]->>0, '')) <> 0 THEN E'\'' ELSE '' END,
                                        CASE WHEN LENGTH(COALESCE(pParams->rec.proargnames[i]->>0, '')) = 0 THEN 'NULL' ELSE pParams->rec.proargnames[i]->>0 END,
                                        CASE WHEN rec.proargtypes[i - 1] <> 701 AND LENGTH(COALESCE(pParams->rec.proargnames[i]->>0, '')) <> 0 THEN E'\'' ELSE '' END,
                                        '::',
                                        CASE WHEN rec.proargtypes[i - 1] = 701 THEN 'DOUBLE PRECISION' ELSE 'TEXT' END      
                                    )
                                ELSE
                                    PG_GET_FUNCTION_ARG_DEFAULT(rec.oid, i)
                            END,
                            CASE WHEN i = ARRAY_LENGTH(rec.proargnames, 1) THEN '' ELSE ',' END
                        );

                    END LOOP;

                WHEN rec.pronargdefaults = 0 AND 
                    (JSONB_ARRAY_LENGTH(TO_JSONB(vParamsPassed)) = ARRAY_LENGTH(rec.proargnames, 1)) AND
                    TO_JSONB(vParamsPassed) ?& rec.proargnames THEN

                    FOR i IN 1..ARRAY_LENGTH(rec.proargnames, 1) LOOP

                        vArgs := CONCAT(
                            vArgs,
                            rec.proargnames[i],
                            ' => ',
                            CASE WHEN rec.proargtypes[i - 1] <> 701 THEN E'\'' ELSE '' END,
                            pParams->rec.proargnames[i]->>0,
                            CASE WHEN rec.proargtypes[i - 1] <> 701 THEN E'\'' ELSE '' END,
                            '::',
                            CASE WHEN rec.proargtypes[i - 1] = 701 THEN 'DOUBLE PRECISION' ELSE 'TEXT' END,
                            CASE WHEN i = ARRAY_LENGTH(rec.proargnames, 1) THEN '' ELSE ',' END
                        );

                    END LOOP;

                ELSE

                    CONTINUE procsearch;

            END CASE;

        END LOOP procsearch;

        IF vArgs IS NOT NULL THEN

            vSQL := CONCAT(
                'SELECT ',
                TRIM(LOWER(vSchema)),
                '.',
                TRIM(LOWER(vRoutineName)),
                '(',
                vArgs,
                ')'
            );

        END IF;

        IF vSQL IS NULL THEN

            RAISE SQLSTATE '42883';

        ELSE

            EXECUTE vSQL;

        END IF;

    ELSE
        
        RAISE SQLSTATE '42883';

    END IF;

EXCEPTION
    
    WHEN SQLSTATE '42883' THEN
        
        PERFORM aws_oracle_ext.owa_util$status_line(404);
        
END;
]]></complex-attribute>
                        <category _I_D="725108c2-35b0-4e5d-9b2c-74daeccafaab" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="105eeb89-7ac3-475d-92f7-f890195247b1" name="packageinitialize" subcategories-loading="none" object-loading="extended" context="packageinitialize" is-trigger-function="0" unique-function-name="packageinitialize" is-aggregate="f" language-name="plv8" arguments-datatypes="text,boolean" is-returning-set="f" ret-datatype="bool" function-arguments="proutinename text, pforce boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="366067" volatility="VOLATILE" is-window="f" function-identity-arguments="proutinename text, pforce boolean" overload-function-count="1" proc-language="plv8" function-signature="packageinitialize(proutinename text, pforce boolean)">
                        <complex-attribute name="sql"><![CDATA[
'use strict';
  if (typeof(require) !== 'function') {
    const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
    initColl();
  }
  const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
  let parts = parser(proutinename);
  if (parts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
  const sn = parts[0].text;
  const pn = parts[2].text;
  let doInit = false;
  if (pforce) {
    if (typeof(aws_oracle_ext) !== 'undefined') {
      if (aws_oracle_ext.hasOwnProperty(sn)) {
        delete aws_oracle_ext[sn][pn];
      }
    }
    return doInit;
  }
  if (typeof(aws_oracle_ext) === 'undefined') {
  aws_oracle_ext = {};
    doInit = true;
  }
  if (!aws_oracle_ext.hasOwnProperty(sn)) {
    aws_oracle_ext[sn] = {};
    doInit = true;
  }
  if (!aws_oracle_ext[sn].hasOwnProperty(pn)) {
    aws_oracle_ext[sn][pn] = {};
    doInit = true;
  }

  if (!aws_oracle_ext[sn][pn].hasOwnProperty('Init$$')) doInit = true;
  
  if (doInit) aws_oracle_ext[sn][pn]['Init$$'] = true;
  return doInit;


]]></complex-attribute>
                        <category _I_D="b195696c-e7d7-4ec0-bf45-8938316359d1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="19d578a3-2994-452e-84d8-29953c709dd0" name="plv8_require" subcategories-loading="none" object-loading="extended" context="plv8_require" is-trigger-function="0" unique-function-name="plv8_require" is-aggregate="f" language-name="plv8" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="366045" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plv8" function-signature="plv8_require()">
                        <complex-attribute name="sql"><![CDATA[
moduleCache = {};

load = function(key, source) {
  var module = {exports: {}};
  eval("(function(module, exports) {" + source + "; })")(module, module.exports);
      
  // store in cache
  moduleCache[key] = module.exports;
  return module.exports;
};

require = function(module) {
  if(moduleCache[module]) return moduleCache[module];

  var rows = plv8.execute(
      "select source from aws_oracle_ext.plv8_js_modules where module = $1", 
      [module]
  );

  if(rows.length === 0) {
    plv8.elog(NOTICE, 'Could not load module: ' + module);
    return null;
  }

  return load(module, rows[0].source);
};

// Grab modules worth auto-loading at context start and let them cache
var query = 'select module, source from aws_oracle_ext.plv8_js_modules where autoload = true';
plv8.execute(query).forEach(function(row) {
  load(row.module, row.source);
});

TreeUtility = require('TreeUtility');
Tree = require('Tree');
Object.prototype.clone=TreeUtility.clone;
emptyCollectionElement = Object.freeze(Object.create(null));
aws_oracle_ext = {};

]]></complex-attribute>
                        <category _I_D="6ff30faf-b10d-4e28-b28a-a14365072659" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="57e2f221-87ee-44d6-8f0e-0892f887ec03" name="prior" subcategories-loading="none" object-loading="extended" context="prior" is-trigger-function="0" unique-function-name="prior" is-aggregate="f" language-name="sql" arguments-datatypes="anyarray,integer" is-returning-set="f" ret-datatype="int4" function-arguments="parray anyarray, n integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365176" volatility="STABLE" is-window="f" function-identity-arguments="parray anyarray, n integer" overload-function-count="1" proc-language="sql" function-signature="prior(parray anyarray, n integer)">
                        <complex-attribute name="sql"><![CDATA[  

    SELECT
        CASE
            WHEN n > ARRAY_LENGTH(pArray, 1) THEN
                ARRAY_LENGTH(pArray, 1)
            WHEN n < 2 THEN
                NULL
            ELSE
                n - 1
        END;

]]></complex-attribute>
                        <category _I_D="73b15654-fb82-407f-9e8f-d0ba56f05b01" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d5e9508d-c5f7-4d30-88da-e8f6b35faec1" name="record_to_json" subcategories-loading="none" object-loading="extended" context="record_to_json" is-trigger-function="0" unique-function-name="record_to_json" is-aggregate="f" language-name="sql" arguments-datatypes="anyelement" is-returning-set="f" ret-datatype="json" function-arguments="anyelement" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="366032" volatility="IMMUTABLE" is-window="f" function-identity-arguments="anyelement" overload-function-count="1" proc-language="sql" function-signature="record_to_json(anyelement)">
                        <complex-attribute name="sql"><![CDATA[
SELECT ROW_TO_JSON(z.*)
        FROM JSON_POPULATE_RECORD
        (
            $1,
            TO_JSON($1)
        ) z;
]]></complex-attribute>
                        <category _I_D="15f55dab-755f-4cf2-83e1-5058be5343cc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c7fb0f14-23e2-4b81-92fc-d2c9eb9d2921" name="record_to_jsonb" subcategories-loading="none" object-loading="extended" context="record_to_jsonb" is-trigger-function="0" unique-function-name="record_to_jsonb" is-aggregate="f" language-name="sql" arguments-datatypes="anyelement" is-returning-set="f" ret-datatype="jsonb" function-arguments="anyelement" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365955" volatility="IMMUTABLE" is-window="f" function-identity-arguments="anyelement" overload-function-count="1" proc-language="sql" function-signature="record_to_jsonb(anyelement)">
                        <complex-attribute name="sql"><![CDATA[
SELECT TO_JSONB(z)
        FROM JSONB_POPULATE_RECORD
        (
            $1,
            TO_JSONB($1)
        ) z;
]]></complex-attribute>
                        <category _I_D="14677dfa-a57a-44dc-adc5-b3e305aefdc3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0fe10686-9a79-4b4d-822c-217c79dfb9ca" name="regexp_count" subcategories-loading="none" object-loading="extended" context="regexp_count" is-trigger-function="0" unique-function-name="regexp_count" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,character varying,numeric,character varying" is-returning-set="f" ret-datatype="int4" function-arguments="p_src_string text, p_regexp_pat character varying, p_position numeric DEFAULT 1, p_match_param character varying DEFAULT 'c'::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365177" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_src_string text, p_regexp_pat character varying, p_position numeric, p_match_param character varying" overload-function-count="1" proc-language="plpgsql" function-signature="regexp_count(p_src_string text, p_regexp_pat character varying, p_position numeric, p_match_param character varying)" comment="Returns a count of the number of times that a regular expression pattern is matched in a string. If the pattern expression is not found and no argument is null, the result is 0">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_res_count INTEGER;
    v_position INTEGER := floor(p_position);
    v_match_param VARCHAR := trim(p_match_param);
    v_src_string TEXT := substr(p_src_string, v_position);
BEGIN
    IF (coalesce(p_src_string, '') = '' OR coalesce(p_regexp_pat, '') = '' OR p_position IS NULL)
    THEN
        RETURN NULL;
    ELSIF (v_position <= 0) THEN
        RAISE EXCEPTION 'The value of the argument for parameter in position "3" (start position) should be greater than or equal to 1';
    ELSIF (coalesce(v_match_param, '') = '') THEN
        v_match_param := 'c';
    ELSIF (v_match_param !~ 'i|c|n|m|x') THEN
        RAISE EXCEPTION 'The value of the argument for parameter in position "4" (match_parameter) must be one of the following: "i", "c", "n", "m", "x"';
    END IF;

    v_match_param := concat('g', v_match_param);
    v_match_param := regexp_replace(v_match_param, 'm|x', '', 'g');
    v_match_param := CASE
                       WHEN v_match_param !~ 'n' THEN concat(v_match_param, 'p')
                       ELSE regexp_replace(v_match_param, 'n', '', 'g')
                    END;

    SELECT COUNT(regexpval)::INTEGER
      INTO v_res_count
      FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) AS rownum,
                   regexpval
              FROM (SELECT unnest(regexp_matches(v_src_string,
                                                 p_regexp_pat,
                                                 v_match_param)) AS regexpval
                   ) AS regexpvals
             WHERE char_length(regexpval) > 0
           ) AS rankexpvals;

    RETURN v_res_count;
END;
]]></complex-attribute>
                        <category _I_D="509311cd-70d9-4db8-8a28-4d3834dc65c7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="286f6014-6689-40e6-9856-c9023aab0c3d" name="regexp_instr" subcategories-loading="none" object-loading="extended" context="regexp_instr" is-trigger-function="0" unique-function-name="regexp_instr" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,character varying,numeric,numeric,numeric,character varying" is-returning-set="f" ret-datatype="int4" function-arguments="p_src_string text, p_regexp_pat character varying, p_position numeric DEFAULT 1, p_occurrence numeric DEFAULT 1, p_retopt numeric DEFAULT 0, p_match_param character varying DEFAULT 'c'::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365178" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_src_string text, p_regexp_pat character varying, p_position numeric, p_occurrence numeric, p_retopt numeric, p_match_param character varying" overload-function-count="1" proc-language="plpgsql" function-signature="regexp_instr(p_src_string text, p_regexp_pat character varying, p_position numeric, p_occurrence numeric, p_retopt numeric, p_match_param character varying)" comment="Returns the starting or ending position of the matched substring, depending on the value of the return_option (p_ret_opt) argument">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_resposition INTEGER;
    v_regexpres_row RECORD;
    v_match_count INTEGER := 0;
    v_retopt INTEGER := floor(p_retopt);
    v_position INTEGER := floor(p_position);
    v_occurrence INTEGER := floor(p_occurrence);
    v_match_param VARCHAR := trim(p_match_param);
    v_src_string TEXT := substr(p_src_string, v_position);
    v_srcstr_len INTEGER := char_length(v_src_string);
BEGIN
    IF (coalesce(p_src_string, '') = '' OR coalesce(p_regexp_pat, '') = '' OR
        p_position IS NULL OR p_occurrence IS NULL OR p_retopt IS NULL)
    THEN
        RETURN NULL;
    ELSIF (v_position <= 0) THEN
        RAISE EXCEPTION 'The value of the argument for parameter in position "3" (start position) should be greater than or equal to 1';
    ELSIF (v_occurrence <= 0) THEN
        RAISE EXCEPTION 'The value of the argument parameter in position "4" (occurrence of match) should be greater than or equal to 1';
    ELSIF (v_retopt NOT IN (0, 1)) THEN
        RAISE EXCEPTION 'The value of the argument for parameter in position "5" (return-option) should be either 0 or 1';
    ELSIF (coalesce(v_match_param, '') = '') THEN
        v_match_param := 'c';
    ELSIF (v_match_param !~ 'i|c|n|m|x') THEN
        RAISE EXCEPTION 'The value of the argument for parameter in position "6" (match_parameter) must be one of the following: "i", "c", "n", "m", "x"';
    END IF;

    v_match_param := concat('g', v_match_param);
    v_match_param := regexp_replace(v_match_param, 'm|x', '', 'g');
    v_match_param := CASE
                       WHEN v_match_param !~ 'n' THEN concat(v_match_param, 'p')
                       ELSE regexp_replace(v_match_param, 'n', '', 'g')
                    END;

    FOR v_regexpres_row IN
    (SELECT rownum,
            regexpval,
            char_length(regexpval) AS value_len
       FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) AS rownum,
                    regexpval
               FROM (SELECT unnest(regexp_matches(v_src_string,
                                                  p_regexp_pat,
                                                  v_match_param)) AS regexpval
                    ) AS regexpvals
              WHERE char_length(regexpval) > 0
            ) AS rankexpvals
      ORDER BY rownum ASC)
    LOOP
        v_src_string := substr(v_src_string, strpos(v_src_string, v_regexpres_row.regexpval) + v_regexpres_row.value_len);
        v_resposition := v_srcstr_len - char_length(v_src_string) - v_regexpres_row.value_len + 1;

        IF (v_position > 1) THEN
            v_resposition := v_resposition + v_position - 1;
        END IF;

        IF (v_retopt = 1) THEN
            v_resposition := v_resposition + v_regexpres_row.value_len;
        END IF;

        v_match_count := v_regexpres_row.rownum;
        EXIT WHEN v_match_count = v_occurrence;
    END LOOP;

    RETURN CASE
              WHEN v_match_count != v_occurrence THEN 0
              ELSE v_resposition
           END;
END;
]]></complex-attribute>
                        <category _I_D="60f7d4b3-c93b-4c95-8f27-076afc437882" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e3049583-a375-479e-9a05-cdb5c2150826" name="regexp_like" subcategories-loading="none" object-loading="extended" context="regexp_like" is-trigger-function="0" unique-function-name="regexp_like" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,character varying,character varying" is-returning-set="f" ret-datatype="bool" function-arguments="p_src_string text, p_regexp_pat character varying, p_match_param character varying DEFAULT 'c'::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365179" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_src_string text, p_regexp_pat character varying, p_match_param character varying" overload-function-count="1" proc-language="plpgsql" function-signature="regexp_like(p_src_string text, p_regexp_pat character varying, p_match_param character varying)" comment="Returns a boolean value indicating if the regular expression pattern is found in a string">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_regexpres_row RECORD;
    v_match_param VARCHAR := trim(p_match_param);
BEGIN
    IF (coalesce(p_src_string, '') = '' OR coalesce(p_regexp_pat, '') = '') THEN
        RETURN FALSE;
    ELSIF (coalesce(v_match_param, '') = '') THEN
        v_match_param := 'c';
    ELSIF (v_match_param !~ 'i|c|n|m|x') THEN
        RAISE EXCEPTION 'The value of the argument for parameter in position "3" (match_parameter) must be one of the following: "i", "c", "n", "m", "x"';
    END IF;

    v_match_param := concat('g', v_match_param);
    v_match_param := regexp_replace(v_match_param, 'm|x', '', 'g');
    v_match_param := CASE
                       WHEN v_match_param !~ 'n' THEN concat(v_match_param, 'p')
                       ELSE regexp_replace(v_match_param, 'n', '', 'g')
                    END;

    FOR v_regexpres_row IN
    (SELECT rownum,
            regexpval,
            char_length(regexpval) AS value_len
       FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) AS rownum,
                    regexpval
               FROM (SELECT unnest(regexp_matches(p_src_string,
                                                  p_regexp_pat,
                                                  v_match_param)) AS regexpval
                    ) AS regexpvals
              WHERE char_length(regexpval) > 0
            ) AS rankexpvals
      ORDER BY rownum ASC)
    LOOP
        RETURN TRUE;
    END LOOP;

    RETURN FALSE;
END;
]]></complex-attribute>
                        <category _I_D="3e698072-447e-4cd6-a81b-a44b3d6838b5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="70419e26-9e0a-4091-a167-c6d38dd11340" name="regexp_replace" subcategories-loading="none" object-loading="extended" context="regexp_replace" is-trigger-function="0" unique-function-name="regexp_replace" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,character varying,text,numeric,numeric,character varying" is-returning-set="f" ret-datatype="text" function-arguments="p_src_string text, p_regexp_pat character varying, p_replace_string text DEFAULT ''::text, p_position numeric DEFAULT 1, p_occurrence numeric DEFAULT 0, p_match_param character varying DEFAULT 'c'::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365180" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_src_string text, p_regexp_pat character varying, p_replace_string text, p_position numeric, p_occurrence numeric, p_match_param character varying" overload-function-count="1" proc-language="plpgsql" function-signature="regexp_replace(p_src_string text, p_regexp_pat character varying, p_replace_string text, p_position numeric, p_occurrence numeric, p_match_param character varying)" comment="Returns a modified version of the source string where occurrences of the regular expression pattern found in the source string are replaced with the specified replacement string">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_res_string TEXT;
    v_regexp_val TEXT;
    v_res_position INTEGER;
    v_regexpres_row RECORD;
    v_match_count INTEGER := 0;
    v_position INTEGER := floor(p_position);
    v_occurrence INTEGER := floor(p_occurrence);
    v_match_param VARCHAR := trim(p_match_param);
    v_src_string TEXT := substr(p_src_string, v_position);
    v_srcstr_len INTEGER := char_length(v_src_string);
BEGIN
    IF (char_length(v_src_string) = 0 AND char_length(p_regexp_pat) = 0 AND
        v_position = 1 AND v_occurrence IN (0, 1))
    THEN
        RETURN p_replace_string;
    ELSIF (char_length(v_src_string) != 0 AND char_length(p_regexp_pat) = 0)
	THEN
        RETURN p_src_string;
    END IF;

    IF (coalesce(p_src_string, '') = '' OR coalesce(p_regexp_pat, '') = '' OR
        p_position IS NULL OR p_occurrence IS NULL)
    THEN
        RETURN NULL;
    ELSIF (v_position <= 0) THEN
        RAISE EXCEPTION 'The value for parameter in position "4" (start position) should be greater than or equal to 1';
    ELSIF (v_occurrence < 0) THEN
        RAISE EXCEPTION 'The value for parameter in position "5" (occurrence of match) should be greater than or equal to 0';
    ELSIF (coalesce(v_match_param, '') = '') THEN
        v_match_param := 'c';
    ELSIF (v_match_param !~ 'i|c|n|m|x') THEN
        RAISE EXCEPTION 'The value of the argument for parameter in position "6" (match_parameter) must be one of the following: "i", "c", "n", "m", "x"';
    END IF;

    v_match_param := concat('g', v_match_param);
    v_match_param := regexp_replace(v_match_param, 'm|x', '', 'g');
    v_match_param := CASE
                       WHEN v_match_param !~ 'n' THEN concat(v_match_param, 'p')
                       ELSE regexp_replace(v_match_param, 'n', '', 'g')
                    END;

    IF (v_occurrence = 0) THEN
        v_res_string := regexp_replace(v_src_string,
                                      p_regexp_pat,
                                      coalesce(p_replace_string, ''),
                                      v_match_param);

        v_res_string := concat(substr(p_src_string, 1, v_position - 1), v_res_string);
    ELSE
        FOR v_regexpres_row IN
        (SELECT rownum,
                regexpval,
                char_length(regexpval) AS value_len
           FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) AS rownum,
                        regexpval
                   FROM (SELECT unnest(regexp_matches(v_src_string,
                                                      p_regexp_pat,
                                                      v_match_param)) AS regexpval
                        ) AS regexpvals
                  WHERE char_length(regexpval) > 0
                ) AS rankexpvals
          ORDER BY rownum ASC)
        LOOP
            v_regexp_val := v_regexpres_row.regexpval;
            v_src_string := substr(v_src_string, strpos(v_src_string, v_regexp_val) + v_regexpres_row.value_len);
            v_res_position := v_srcstr_len - char_length(v_src_string) - v_regexpres_row.value_len + 1;

            IF (p_position > 1) THEN
                v_res_position := v_res_position + p_position - 1;
            END IF;

            v_match_count := v_regexpres_row.rownum;
            EXIT WHEN v_match_count = v_occurrence;
        END LOOP;

        IF (v_match_count = v_occurrence) THEN
            v_res_string := concat(substr(p_src_string, 0, v_res_position),
                           p_replace_string,
                           substr(p_src_string, v_res_position + char_length(v_regexp_val)));
        END IF;
    END IF;

    RETURN coalesce(v_res_string, p_src_string);
END;
]]></complex-attribute>
                        <category _I_D="6c355f9e-56fe-4af8-9b09-11f2b8b72cb0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cb6b8c52-9325-45f0-adb6-e7e0a3da6fe3" name="regexp_substr" subcategories-loading="none" object-loading="extended" context="regexp_substr" is-trigger-function="0" unique-function-name="regexp_substr" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,character varying,numeric,numeric,character varying" is-returning-set="f" ret-datatype="text" function-arguments="p_src_string text, p_regexp_pat character varying, p_position numeric DEFAULT 1, p_occurrence numeric DEFAULT 1, p_match_param character varying DEFAULT 'c'::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365181" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_src_string text, p_regexp_pat character varying, p_position numeric, p_occurrence numeric, p_match_param character varying" overload-function-count="1" proc-language="plpgsql" function-signature="regexp_substr(p_src_string text, p_regexp_pat character varying, p_position numeric, p_occurrence numeric, p_match_param character varying)" comment="Returns one occurrence of a substring of a string that matches the regular expression pattern. If the pattern expression is not found, the result is the null value">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_res_string TEXT;
    v_regexp_val TEXT;
    v_regexpres_row RECORD;
    v_match_count INTEGER := 0;
    v_position INTEGER := floor(p_position);
    v_occurrence INTEGER := floor(p_occurrence);
    v_match_param VARCHAR := trim(p_match_param);
    v_src_string TEXT := substr(p_src_string, v_position);
BEGIN
    IF (coalesce(p_src_string, '') = '' OR coalesce(p_regexp_pat, '') = '' OR
        p_position IS NULL OR p_occurrence IS NULL)
    THEN
        RETURN NULL;
    ELSIF (v_position <= 0) THEN
        RAISE EXCEPTION 'The value for parameter in position "3" (start position) should be greater than or equal to 1';
    ELSIF (v_occurrence < 0) THEN
        RAISE EXCEPTION 'The value for parameter in position "4" (occurrence of match) should be greater than or equal to 1';
    ELSIF (coalesce(v_match_param, '') = '') THEN
        v_match_param := 'c';
    ELSIF (v_match_param !~ 'i|c|n|m|x') THEN
        RAISE EXCEPTION 'The value of the argument for parameter in position "5" (match_parameter) must be one of the following: "i", "c", "n", "m", "x"';
    END IF;

    v_match_param := concat('g', v_match_param);
    v_match_param := regexp_replace(v_match_param, 'm|x', '', 'g');
    v_match_param := CASE
                       WHEN v_match_param !~ 'n' THEN concat(v_match_param, 'p')
                       ELSE regexp_replace(v_match_param, 'n', '', 'g')
                    END;

    FOR v_regexpres_row IN
    (SELECT rownum,
            regexpval,
            char_length(regexpval) AS value_len
       FROM (SELECT ROW_NUMBER() OVER (ORDER BY 1) AS rownum,
                    regexpval
               FROM (SELECT unnest(regexp_matches(v_src_string,
                                                  p_regexp_pat,
                                                  v_match_param)) AS regexpval
                    ) AS regexpvals
              WHERE char_length(regexpval) > 0
            ) AS rankexpvals
      ORDER BY rownum ASC)
    LOOP
        v_match_count := v_regexpres_row.rownum;
        v_regexp_val := v_regexpres_row.regexpval;
        v_src_string := substr(v_src_string, strpos(v_src_string, v_regexp_val) + v_regexpres_row.value_len);

        IF (v_match_count = v_occurrence) THEN
            v_res_string := v_regexp_val;
            EXIT;
        END IF;
    END LOOP;

    RETURN v_res_string;
END;
]]></complex-attribute>
                        <category _I_D="5eec5b94-2ccf-4179-b9b4-4cdae642bed1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e359e39d-b116-4b2e-88fd-5950b61d0daf" name="return_v$nls_parameters" subcategories-loading="none" object-loading="extended" context="return_v$nls_parameters" is-trigger-function="0" unique-function-name="return_v$nls_parameters" is-aggregate="f" language-name="plpgsql" is-returning-set="t" ret-datatype="nls_param" schema-id="364663" function-type="RET_DATASET" count-arguments="0" function-id="364957" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="return_v$nls_parameters()">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    ret aws_oracle_ext.nls_param;
    vjsonrow JSON;
BEGIN
    PERFORM aws_oracle_ext.nls_parameters_init();

    WITH by_default AS
    (
        SELECT params_dictionary ->> 'NLS_CALENDAR' AS NLS_CALENDAR,
            params_dictionary ->> 'NLS_CHARACTERSET' AS NLS_CHARACTERSET,
            params_dictionary ->> 'NLS_COMP' AS NLS_COMP,
            params_dictionary ->> 'NLS_CURRENCY' AS NLS_CURRENCY,
            params_dictionary ->> 'NLS_DATE_FORMAT' AS NLS_DATE_FORMAT,
            params_dictionary ->> 'NLS_DATE_LANGUAGE' AS NLS_DATE_LANGUAGE,
            params_dictionary ->> 'NLS_DUAL_CURRENCY' AS NLS_DUAL_CURRENCY,
            params_dictionary ->> 'NLS_ISO_CURRENCY' AS NLS_ISO_CURRENCY,
            params_dictionary ->> 'NLS_LANGUAGE' AS NLS_LANGUAGE,
            params_dictionary ->> 'NLS_LENGTH_SEMANTICS' AS NLS_LENGTH_SEMANTICS,
            params_dictionary ->> 'NLS_NCHAR_CHARACTERSET' AS NLS_NCHAR_CHARACTERSET,
            params_dictionary ->> 'NLS_NCHAR_CONV_EXCP' AS NLS_NCHAR_CONV_EXCP,
            params_dictionary ->> 'NLS_NUMERIC_CHARACTERS' AS NLS_NUMERIC_CHARACTERS,
            params_dictionary ->> 'NLS_SORT' AS NLS_SORT,
            params_dictionary ->> 'NLS_TERRITORY' AS NLS_TERRITORY,
            params_dictionary ->> 'NLS_TIMESTAMP_FORMAT' AS NLS_TIMESTAMP_FORMAT,
            params_dictionary ->> 'NLS_TIMESTAMP_TZ_FORMAT' AS NLS_TIMESTAMP_TZ_FORMAT,
            params_dictionary ->> 'NLS_TIME_FORMAT' AS nls_time_format,
            params_dictionary ->> 'NLS_TIME_TZ_FORMAT' AS nls_time_tz_format
        FROM aws_oracle_ext.nls_parameters
        WHERE nls_territory ='AMERICA'
    ),
    cur_nls as
    (
        SELECT params_dictionary ->> 'NLS_CALENDAR' AS NLS_CALENDAR,
            params_dictionary ->> 'NLS_CHARACTERSET' AS NLS_CHARACTERSET,
            params_dictionary ->> 'NLS_COMP' AS NLS_COMP,
            params_dictionary ->> 'NLS_CURRENCY' AS NLS_CURRENCY,
            params_dictionary ->> 'NLS_DATE_FORMAT' AS NLS_DATE_FORMAT,
            params_dictionary ->> 'NLS_DATE_LANGUAGE' AS NLS_DATE_LANGUAGE,
            params_dictionary ->> 'NLS_DUAL_CURRENCY' AS NLS_DUAL_CURRENCY,
            params_dictionary ->> 'NLS_ISO_CURRENCY' AS NLS_ISO_CURRENCY,
            params_dictionary ->> 'NLS_LANGUAGE' AS NLS_LANGUAGE,
            params_dictionary ->> 'NLS_LENGTH_SEMANTICS' AS NLS_LENGTH_SEMANTICS,
            params_dictionary ->> 'NLS_NCHAR_CHARACTERSET' AS NLS_NCHAR_CHARACTERSET,
            params_dictionary ->> 'NLS_NCHAR_CONV_EXCP' AS NLS_NCHAR_CONV_EXCP,
            params_dictionary ->> 'NLS_NUMERIC_CHARACTERS' AS NLS_NUMERIC_CHARACTERS,
            params_dictionary ->> 'NLS_SORT' AS NLS_SORT,
            params_dictionary ->> 'NLS_TERRITORY' AS NLS_TERRITORY,
            params_dictionary ->> 'NLS_TIMESTAMP_FORMAT' AS NLS_TIMESTAMP_FORMAT,
            params_dictionary ->> 'NLS_TIMESTAMP_TZ_FORMAT' AS NLS_TIMESTAMP_TZ_FORMAT,
            params_dictionary ->> 'NLS_TIME_FORMAT' AS nls_time_format,
            params_dictionary ->> 'NLS_TIME_TZ_FORMAT' AS nls_time_tz_format
        FROM aws_oracle_ext.nls_parameters
        WHERE nls_territory = aws_oracle_ext.get_package_variable(variable_name => 'NLS_TERRITORY')
    ), vals as
    (
    SELECT COALESCE(aws_oracle_ext.get_package_variable(variable_name => 'NLS_CALENDAR'), cn.nls_calendar, bd.nls_calendar) AS nls_calendar,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_CHARACTERSET'), cn.nls_characterset, bd.nls_characterset) AS nls_characterset,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_COMP'), cn.nls_comp, bd.nls_comp) AS nls_comp,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_CURRENCY'), cn.nls_currency, bd.nls_currency) AS nls_currency,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_DATE_FORMAT'), cn.nls_date_format, bd.nls_date_format) AS nls_date_format,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_DATE_LANGUAGE'), cn.nls_date_language, bd.nls_date_language) AS nls_date_language,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_DUAL_CURRENCY'), cn.nls_dual_currency, bd.nls_dual_currency) AS nls_dual_currency,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_ISO_CURRENCY'), cn.nls_iso_currency, bd.nls_iso_currency) AS nls_iso_currency,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_LANGUAGE'), cn.nls_language, bd.nls_language) AS nls_language,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_LENGTH_SEMANTICS'), cn.nls_length_semantics, bd.nls_length_semantics) AS nls_length_semantics,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_NCHAR_CHARACTERSET'), cn.nls_nchar_characterset, bd.nls_nchar_characterset) AS nls_nchar_characterset,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_NCHAR_CONV_EXCP'), cn.nls_nchar_conv_excp, bd.nls_nchar_conv_excp) AS nls_nchar_conv_excp,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_NUMERIC_CHARACTERS'), cn.nls_numeric_characters, bd.nls_numeric_characters) AS nls_numeric_characters,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_SORT'), cn.nls_sort, bd.nls_sort) AS nls_sort,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_TERRITORY'), cn.nls_territory, bd.nls_territory) AS nls_territory,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_TIMESTAMP_FORMAT'), cn.nls_timestamp_format, bd.nls_timestamp_format) AS nls_timestamp_format,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_TIMESTAMP_TZ_FORMAT'), cn.nls_timestamp_tz_format, bd.nls_timestamp_tz_format) AS nls_timestamp_tz_format,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_TIME_FORMAT'), cn.nls_time_format, bd.nls_time_format) AS nls_time_format,
        COALESCE(aws_oracle_ext.get_extpack_variable(variable_name => 'NLS_TIME_TZ_FORMAT'), cn.nls_time_tz_format, bd.nls_time_tz_format) AS nls_time_tz_format
    FROM by_default bd
    LEFT JOIN cur_nls cn ON 1=1
    )
    SELECT ROW_TO_JSON(vals)
    INTO vjsonrow
    FROM vals;

    FOR ret IN
    SELECT UPPER(parameter),
        value,
        0 AS con_id
    FROM json_each_text(vjsonrow) AS t(parameter, value)
    LOOP

        RETURN NEXT ret;

    END LOOP;


END;
]]></complex-attribute>
                        <category _I_D="ab9e9190-fdfb-4c14-88bd-0a148ffb8b62" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="41386521-2ab0-4e0b-b835-a70689a4f0a7" name="round" subcategories-loading="none" object-loading="extended" context="round(date)" is-trigger-function="0" unique-function-name="round(date)" is-aggregate="f" language-name="sql" arguments-datatypes="date" is-returning-set="f" ret-datatype="date" function-arguments="date" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365287" volatility="IMMUTABLE" is-window="f" function-identity-arguments="date" overload-function-count="6" proc-language="sql" function-signature="round(date)" unique-suffix="(date)" routine-number="365287" comment="Round dates according to the specified format">
                        <complex-attribute name="sql"><![CDATA[ 
SELECT $1;
]]></complex-attribute>
                        <category _I_D="cd48de99-2eae-4791-ab4b-03377c385bba" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="67d80297-efa6-4f23-afab-4e7e85f7477b" name="round" subcategories-loading="none" object-loading="extended" context="round(value date, fmt text)" is-trigger-function="0" unique-function-name="round(value date, fmt text)" is-aggregate="f" language-name="sql" arguments-datatypes="date,text" is-returning-set="f" ret-datatype="date" function-arguments="value date, fmt text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365286" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value date, fmt text" overload-function-count="6" proc-language="sql" function-signature="round(value date, fmt text)" unique-suffix="(value date, fmt text)" routine-number="365286" comment="Round dates according to the specified format">
                        <complex-attribute name="sql"><![CDATA[ 
SELECT aws_oracle_ext.round($1::TIMESTAMP(0), $2)::DATE;
]]></complex-attribute>
                        <category _I_D="1366b44f-a244-4bec-9164-c11c76f31d27" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fcf9a727-2954-455e-91d1-45f5f7173fe8" name="round" subcategories-loading="none" object-loading="extended" context="round(value timestamp with time zone)" is-trigger-function="0" unique-function-name="round(value timestamp with time zone)" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp with time zone" is-returning-set="f" ret-datatype="timestamptz" function-arguments="value timestamp with time zone" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365289" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value timestamp with time zone" overload-function-count="6" proc-language="sql" function-signature="round(value timestamp with time zone)" unique-suffix="(value timestamp with time zone)" routine-number="365289" comment="Round dates according to the specified format">
                        <complex-attribute name="sql"><![CDATA[ 
SELECT aws_oracle_ext.round($1, 'DDD');
]]></complex-attribute>
                        <category _I_D="1b5d3f7a-7cbc-4240-b8e2-4b72f686622f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2abcb280-d4db-496e-ae3c-6eb513dea26e" name="round" subcategories-loading="none" object-loading="extended" context="round(value timestamp with time zone, fmt text)" is-trigger-function="0" unique-function-name="round(value timestamp with time zone, fmt text)" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp with time zone,text" is-returning-set="f" ret-datatype="timestamptz" function-arguments="value timestamp with time zone, fmt text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365288" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value timestamp with time zone, fmt text" overload-function-count="6" proc-language="sql" function-signature="round(value timestamp with time zone, fmt text)" unique-suffix="(value timestamp with time zone, fmt text)" routine-number="365288" comment="Round dates according to the specified format">
                        <complex-attribute name="sql"><![CDATA[ 
SELECT NULL::TIMESTAMP WITH TIME ZONE;
]]></complex-attribute>
                        <category _I_D="156e3065-eaad-4363-95ac-240e360e9006" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="64ccb8fc-d657-4593-80b9-e9aec5a9de85" name="round" subcategories-loading="none" object-loading="extended" context="round(value timestamp without time zone)" is-trigger-function="0" unique-function-name="round(value timestamp without time zone)" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone" is-returning-set="f" ret-datatype="timestamp" function-arguments="value timestamp without time zone" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365285" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value timestamp without time zone" overload-function-count="6" proc-language="sql" function-signature="round(value timestamp without time zone)" unique-suffix="(value timestamp without time zone)" routine-number="365285" comment="Round dates according to the specified format">
                        <complex-attribute name="sql"><![CDATA[ 
SELECT aws_oracle_ext.round($1, 'DDD'); 
]]></complex-attribute>
                        <category _I_D="8883c4fb-4d36-4885-a12c-307545d55eb4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f052bbb9-7681-4f37-89b8-ff5481eda5bb" name="round" subcategories-loading="none" object-loading="extended" context="round(value timestamp without time zone, fmt text)" is-trigger-function="0" unique-function-name="round(value timestamp without time zone, fmt text)" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone,text" is-returning-set="f" ret-datatype="timestamp" function-arguments="value timestamp without time zone, fmt text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365284" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value timestamp without time zone, fmt text" overload-function-count="6" proc-language="sql" function-signature="round(value timestamp without time zone, fmt text)" unique-suffix="(value timestamp without time zone, fmt text)" routine-number="365284" comment="Round dates according to the specified format">
                        <complex-attribute name="sql"><![CDATA[
WITH cte0 AS (
SELECT
UPPER(fmt) AS fmt,
date_part('year',$1)::int AS y,
date_part('month',$1)::int AS m,
date_part('day',$1)::int AS d,
--
make_date(date_part('year',$1)::int, 1, 1) AS firstDayOfYear,
date_part('isodow',make_date(date_part('year',$1)::int, 1, 1))::int - 1 AS weekdayOfYear,
date_part('isodow',$1)::int - 1 AS weekdayOfMonth,
date_part('isodow',make_date(date_part('year',$1)::int, date_part('month',$1)::int, 1))::int - 1 AS weekdayOfMonth_W
)
, cte1 AS (
SELECT
cte0.*,
DATE_PART('isodow',$1)::int AS z_DAY,
DATE_PART('day',$1 - make_date(y, 1, 1))::int % 7 AS z_WW,
DATE_PART('day',$1 - make_date(y, m, 1))::int % 7 AS z_W,
--
weekdayOfYear - weekdayOfMonth AS diffDay,
CASE
  WHEN weekdayOfYear > 3
  THEN firstDayOfYear - weekdayOfYear * interval '1 day' + interval '1 week'
  ELSE firstDayOfYear - weekdayOfYear * interval '1 day'
END AS isoYear,
weekdayOfMonth_W - weekdayOfMonth AS diffDay_W
FROM cte0)
, cte2 AS (
SELECT
cte1.*,
date_part('isodow'
         ,make_date(date_part('year',isoYear)::int
                   ,date_part('month',isoYear)::int
                   ,date_part('day',isoYear)::int))::int - 1 AS isoWeekdayOfYear
FROM cte1)
, cte AS (
SELECT
cte2.*,
isoWeekdayOfYear - weekdayOfYear AS diffDay_IW
FROM cte2)
SELECT
/* ---------------------------------------------------------------------------- */
CASE
--Century
WHEN cte.fmt IN ('CC', 'SCC') THEN
  CASE
  WHEN date_part('year',$1)::int % 100 > 50
  THEN make_date(floor(date_part('year',$1) / 100)::int * 100 + 101, 1, 1)
  ELSE make_date(floor(date_part('year',$1) / 100)::int * 100 + 1, 1, 1)
  END
--Year
WHEN cte.fmt IN ('SYYYY','YYYY','YEAR','SYEAR','YYY','YY','Y') THEN
  CASE
  WHEN date_part('month',$1) > 6
  THEN date_trunc('year',$1) + interval '1 year'
  ELSE date_trunc('year',$1)
  END
--ISO Year
WHEN cte.fmt IN ('IYYY','IYY','IY','I') THEN
  CASE
  WHEN date_part('month', $1) <= 6
  THEN aws_oracle_ext.trunc($1::timestamp,'IYYY')
  ELSE aws_oracle_ext.trunc($1::timestamp + interval '1 year','IYYY')
  END
--Quarter
WHEN cte.fmt IN ('Q') THEN
  CASE
  WHEN date_part('month',$1) IN (1,4,7,10) OR (date_part('month',$1) IN (2,5,8,11) AND date_part('day',$1) <= 15)
  THEN make_date(date_part('year',$1)::int
                ,date_part('month',$1)::int - (date_part('month',$1)::int - 1) % 3
                ,1)
  WHEN date_part('month',$1) IN (3,6,9,12) OR (date_part('month',$1) IN (2,5,8,11) AND date_part('day',$1) > 15)
  THEN make_date(date_part('year',$1)::int + floor(date_part('month',$1)/11)::int
                ,(date_part('month',$1)::int + ((12 - date_part('month',$1)::int + 1) % 3)) % 12
                ,1)
  END
--Month
WHEN cte.fmt IN ('MONTH','MON','MM','RM') THEN
  CASE
  WHEN date_part('day',$1) >= 16
  THEN date_trunc('month',$1) + interval '1 month'
  ELSE date_trunc('month',$1)
  END
--Week (First day of the year/Same day of the week as the first day of the year)
WHEN cte.fmt IN ('WW') THEN
  CASE
  WHEN z_WW < 4
  THEN date_trunc('day',$1 - z_WW * interval '1 day')
  ELSE date_trunc('day',$1 - z_WW * interval '1 day' + 7 * interval '1 day')
  END
--Week (Monday of that week/Same day of the week as the first day of the ISO year)
WHEN cte.fmt IN ('IW') THEN
  CASE
  WHEN date_part('isodow',$1) < 4 OR (date_part('isodow',$1) = 4 AND date_part('hour',$1) <= 11)
  THEN date_trunc('week',$1)
  ELSE date_trunc('week',$1 + interval '1 week')
  END
--Week (First weekday on which the first day of the month falls/Same day of the week as the first day of the month)
WHEN cte.fmt IN ('W') THEN
  CASE
  WHEN z_W < 4
  THEN date_trunc('day',$1 - z_W * interval '1 day')
  ELSE date_trunc('day',$1 - z_W * interval '1 day' + 7 * interval '1 day')
  END
--Day
WHEN cte.fmt IN ('DDD', 'DD', 'J') THEN
  CASE
  WHEN date_part('hour',$1) > 11
  THEN date_trunc('day',$1) + interval '1 day'
  ELSE date_trunc('day',$1)
  END
--Starting day of the week
WHEN cte.fmt IN ('DAY', 'DY', 'D') THEN
  CASE
  WHEN y > 0
  THEN
    CASE
    WHEN z_DAY < 4
    THEN date_trunc('day',$1 - z_DAY * interval '1 day')
    ELSE date_trunc('day',$1 - z_DAY * interval '1 day' + 7 * interval '1 day')
    END
  ELSE
    CASE
    WHEN z_DAY > 0
    THEN date_trunc('day', $1 + (5 - CASE WHEN z_DAY > 1 THEN z_DAY ELSE z_DAY + 7 END) * interval '1 day')
    ELSE date_trunc('day', $1 + (5 - 7) * interval '1 day')
    END
  END
--Hour
WHEN cte.fmt IN ('HH24', 'HH12', 'HH') THEN
  CASE
  WHEN date_part('minute',$1) >= 30
  THEN date_trunc('hour',$1) + interval '1 hour'
  ELSE date_trunc('hour',$1)
  END
--Minute
WHEN cte.fmt IN ('MI') THEN
  CASE
  WHEN date_part('second',$1) >= 30
  THEN date_trunc('minute',$1) + interval '1 minute'
  ELSE date_trunc('minute',$1)
  END
END AS date_round
/* ---------------------------------------------------------------------------- */
FROM cte;
]]></complex-attribute>
                        <category _I_D="1b2c48fe-c203-4019-9e5a-1fd7da9a1d06" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ed4e9c57-9acc-4fc4-8801-e072675f16d0" name="rowidtochar" subcategories-loading="none" object-loading="extended" context="rowidtochar" is-trigger-function="0" unique-function-name="rowidtochar" is-aggregate="f" language-name="sql" arguments-datatypes="aws_oracle_ext.rowid" is-returning-set="f" ret-datatype="text" function-arguments="p_rowid aws_oracle_ext.rowid" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365798" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_rowid aws_oracle_ext.rowid" overload-function-count="1" proc-language="sql" function-signature="rowidtochar(p_rowid aws_oracle_ext.rowid)">
                        <complex-attribute name="sql"><![CDATA[
   SELECT p_rowid::text;
]]></complex-attribute>
                        <category _I_D="65a39fb9-b407-4122-ba64-9ac8432a5a35" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b705727d-4479-4de7-8f85-2cb4e4e733bc" name="sdo_closest_points" subcategories-loading="none" object-loading="extended" context="sdo_closest_points" is-trigger-function="0" unique-function-name="sdo_closest_points" is-aggregate="f" language-name="plpgsql" arguments-datatypes="geometry,geometry,character varying,double precision,geometry,geometry" is-returning-set="f" ret-datatype="record" function-arguments="ip_geom1 geometry, ip_geom2 geometry, ip_unit character varying, INOUT op_dist double precision, INOUT op_geoma geometry, INOUT op_geomb geometry" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365182" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ip_geom1 geometry, ip_geom2 geometry, ip_unit character varying, INOUT op_dist double precision, INOUT op_geoma geometry, INOUT op_geomb geometry" overload-function-count="1" proc-language="plpgsql" function-signature="sdo_closest_points(ip_geom1 geometry, ip_geom2 geometry, ip_unit character varying, INOUT op_dist double precision, INOUT op_geoma geometry, INOUT op_geomb geometry)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
BEGIN 
   op_geoma := ST_CLOSESTPOINT(ip_geom1, ip_geom2);
   op_geomb := ST_CLOSESTPOINT(ip_geom2, ip_geom1);
   op_dist  := ST_DISTANCE(op_geoma, op_geomb);
 
  if ip_unit is not null then 
  case 
    when ip_unit = 'KM' or ip_unit = 'KILOMETER' then op_dist := op_dist/1000;   
    when ip_unit = 'CM' or ip_unit = 'CENTIMETER' then op_dist := op_dist/0.01;
    when ip_unit = 'MM' or ip_unit = 'MILLIIMETER' then op_dist := op_dist/0.001;
    when ip_unit = 'MILE'                           then op_dist := op_dist/1609.344;
    when ip_unit = 'NAUT_MILE'                       then op_dist := op_dist/1852;
    when ip_unit = 'SURVEY_FOOT'                      then op_dist := op_dist/0.3048006096012;
    when ip_unit = 'FOOT'                            then op_dist := op_dist/0.3048;
    when ip_unit = 'INCH'                           then op_dist := op_dist/0.0254;
    when ip_unit = 'YARD'                          then op_dist := op_dist/0.9144;
    when ip_unit = 'CHAIN'                        then op_dist := op_dist/20.1168;
    when ip_unit = 'ROD'                           then op_dist := op_dist/5.0292;
    when ip_unit = 'ROD'                            then op_dist := op_dist/5.0292;
    when ip_unit = 'LINK'                            then op_dist := op_dist/0.201166194975966;
    when ip_unit = 'MOD_USFT'                         then op_dist := op_dist/0.304812252984506;
    when ip_unit = 'CL_FT'                             then op_dist := op_dist/0.3047972651151;
    when ip_unit = 'IND_FT'                           then op_dist := op_dist/0.304799517990042;
    when ip_unit = 'LINK_BEN'                        then op_dist := op_dist/0.201167824943759;
    when ip_unit = 'LINK_SRS'                       then op_dist := op_dist/0.201167651215526;
    when ip_unit = 'CHN_BEN'                       then op_dist := op_dist/20.1167824943759;
    when ip_unit = 'CHN_SRS'                      then op_dist := op_dist/20.1167651215526;
    when ip_unit = 'IND_YARD'                      then op_dist := op_dist/0.914398553970127;
    when ip_unit = 'SRS_YARD'                       then op_dist := op_dist/0.914398414616029;
    when ip_unit = 'FATHOM'                          then op_dist := op_dist/1.8288;
    when ip_unit = 'British foot (1936)'              then op_dist := op_dist/0.3048007491;
  end case;
 end if; 
END;
]]></complex-attribute>
                        <category _I_D="6e81e28d-aa91-4a04-8b85-4cd8a0bd43f2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="84143186-721a-4013-973f-5ce2fcd5ba18" name="sdo_gtype" subcategories-loading="none" object-loading="extended" context="sdo_gtype" is-trigger-function="0" unique-function-name="sdo_gtype" is-aggregate="f" language-name="sql" arguments-datatypes="geometry" is-returning-set="f" ret-datatype="float8" function-arguments="ip_geom1 geometry" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365183" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ip_geom1 geometry" overload-function-count="1" proc-language="sql" function-signature="sdo_gtype(ip_geom1 geometry)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT
    (
        ST_CoordDim(ip_geom1)::VARCHAR,
        '00',
        CASE GeometryType(ip_geom1)
            WHEN 'POINT' THEN '1'
            WHEN 'LINESTRING' THEN '2'
            WHEN 'CIRCULARSTRING' THEN '2'
            WHEN 'COMPOUNDCURVE' THEN '2'
            WHEN 'POLYGON' THEN '3'
            WHEN 'GEOMETRYCOLLECTION' THEN '4'
            WHEN 'MULTIPOINT' THEN '5'
            WHEN 'MULTILINESTRING' THEN '6'
            WHEN 'MULTICURVE' THEN '6'
            WHEN 'MULTIPOLYGON' THEN '7'
            WHEN 'SOLID' THEN '8'
            WHEN 'MULTISOLID' THEN '9'
            ELSE '0'  
        END 
    )::DOUBLE PRECISION;

]]></complex-attribute>
                        <category _I_D="ead47c37-ea17-4f27-b734-552b3a0105d0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="89cf93c4-b9da-4024-a9f5-eb3486b88ffb" name="sdo_length" subcategories-loading="none" object-loading="extended" context="sdo_length" is-trigger-function="0" unique-function-name="sdo_length" is-aggregate="f" language-name="sql" arguments-datatypes="geometry" is-returning-set="f" ret-datatype="float8" function-arguments="ip_geom geometry" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365184" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ip_geom geometry" overload-function-count="1" proc-language="sql" function-signature="sdo_length(ip_geom geometry)">
                        <complex-attribute name="sql"><![CDATA[

    SELECT
        CASE
            WHEN GeometryType(ip_geom) IN ('LINESTRING','MULTILINESTRING') THEN
                st_length(ip_geom)::DOUBLE PRECISION
            WHEN GeometryType(ip_geom) IN ('POLYGON','MULTIPOLYGON') THEN
                st_perimeter(ip_geom)::DOUBLE PRECISION
        END;

]]></complex-attribute>
                        <category _I_D="aca091f1-7fc9-427e-a2d3-436b89325245" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="335a557d-ee34-4c93-b509-6755de7666f9" name="session_env_restore" subcategories-loading="none" object-loading="extended" context="session_env_restore" is-trigger-function="0" unique-function-name="session_env_restore" is-aggregate="f" language-name="plv8" arguments-datatypes="json" is-returning-set="f" ret-datatype="bool" function-arguments="session_env json" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="366066" volatility="VOLATILE" is-window="f" function-identity-arguments="session_env json" overload-function-count="1" proc-language="plv8" function-signature="session_env_restore(session_env json)">
                        <complex-attribute name="sql"><![CDATA[
  if (typeof(require) !== 'function') {
    const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
    initColl();
  }
  if (session_env == null || typeof(session_env) !== 'object') {
    plv8.elog(ERROR, 'Incorrect argument for session_env_restore call!');
  }
  let result = false;
  const schemas = Object.getOwnPropertyNames(session_env);
  const setVariable = function setVariable(schema, package, variable, value) {
    if (typeof(value) !== 'object') {
      if (!(aws_oracle_ext[schema][package][variable] instanceof Tree)) {
        aws_oracle_ext[schema][package][variable] = value;
      }
    } else {
      if (!value.hasOwnProperty('collectionType')) {
        aws_oracle_ext[schema][package][variable] = value;
      } else {
        const tree = value.indexBy == 'BIGINT' ? new Tree(52)  : new Tree(52, TreeUtility.stringCompare);
        tree.indexBy = value.indexBy;
        tree.collectionType = value.collectionType;
        tree.rowType = value.rowType;
        for (let i = 0; i < value.value.length; i++) {
          let v;
          if (!value.value[i].v.hasOwnProperty('empty')) {
            v = value.value[i].v;
          } else {
            v = emptyCollectionElement;
          }
          tree.putValue(value.value[i].k, v);
        }
        aws_oracle_ext[schema][package][variable] = tree;
      }
    }
  };

  for (let i = 0; i < schemas.length; i++) {
    if (schemas[i] !== 'aws_oracle_ext') {
      const packages = Object.getOwnPropertyNames(session_env[schemas[i]]);
      for (let j = 0; j < packages.length; j++) {
        if (typeof(aws_oracle_ext) === 'undefined') {
          aws_oracle_ext = {};
          if (!result) result = true;
        }
        if (!aws_oracle_ext.hasOwnProperty(schemas[i])) {
          aws_oracle_ext[schemas[i]] = {};
          if (!result) result = true;
        }
        if(!aws_oracle_ext[schemas[i]].hasOwnProperty(packages[j])) {
          aws_oracle_ext[schemas[i]][packages[j]] = {};
          if (!result) result = true;
        }
        const initSql = `SELECT ${schemas[i]}.${packages[j]}$Init()`;
        if (!aws_oracle_ext[schemas[i]][packages[j]].hasOwnProperty('Init$$')) {
          plv8.execute(initSql);
        }
        const vars = Object.getOwnPropertyNames(session_env[schemas[i]][packages[j]]);
        for (let k = 0; k < vars.length; k++) {
          if (vars[k] !== 'Init$$') {
            setVariable(schemas[i], packages[j], vars[k],  session_env[schemas[i]][packages[j]][vars[k]]);
            if (!result) result = true;
          }
        }       
      }
    }
  }
  return result;

]]></complex-attribute>
                        <category _I_D="1e51ee0e-b808-4d12-bbe5-43f2a9321444" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5ef4f0c1-fd20-4120-8666-5815f49d0e3e" name="session_env_store" subcategories-loading="none" object-loading="extended" context="session_env_store" is-trigger-function="0" unique-function-name="session_env_store" is-aggregate="f" language-name="plv8" arguments-datatypes="text,boolean" is-returning-set="f" ret-datatype="json" function-arguments="setting_list text, use_setting_list boolean DEFAULT true" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="366065" volatility="VOLATILE" is-window="f" function-identity-arguments="setting_list text, use_setting_list boolean" overload-function-count="1" proc-language="plv8" function-signature="session_env_store(setting_list text, use_setting_list boolean)">
                        <complex-attribute name="sql"><![CDATA[
  if (setting_list == null) return null;

  const result = {};
  if (typeof(aws_oracle_ext) === 'undefined') return result;
  if (typeof(require) !== 'function') {
    const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
    initColl();
  }
  const schemas = Object.getOwnPropertyNames(aws_oracle_ext);

  const returnValue = function returnValue(schema, package, variable) {
    let result;
    if (aws_oracle_ext[schema][package][variable] instanceof Tree) {

      let res = [];
      let collectionType;
      aws_oracle_ext[schema][package][variable].walkAsc(null, null, function(key,value) {
        if (typeof(collectionType) === 'undefined') collectionType = aws_oracle_ext[schema][package][variable].collectionType;
        if (collectionType === 'ASSOC') {
          res.push({k: key, v: value});
        } else {
          const pvalue = value !== emptyCollectionElement ? value : {empty: true};
          res.push({k: key, v: pvalue});
        }
      });
      result = {
        value: res,
        collectionType: collectionType,
        indexBy: aws_oracle_ext[schema][package][variable].indexBy,
        rowType: aws_oracle_ext[schema][package][variable].rowType
      };
    } else {
      result = aws_oracle_ext[schema][package][variable];
    }
    return result;
  };

  if (!use_setting_list) {

    for (let i = 0; i < schemas.length; i++) {
      
    if (schemas[i] !== 'aws_oracle_ext') {
      if (!result.hasOwnProperty(schemas[i])) result[schemas[i]] = {};
      const packages = Object.getOwnPropertyNames(aws_oracle_ext[schemas[i]]);
      for (let j = 0; j < packages.length; j++) {

        if(!result[schemas[i]].hasOwnProperty(packages[j])) result[schemas[i]][packages[j]] = {};
        const vars = Object.getOwnPropertyNames(aws_oracle_ext[schemas[i]][packages[j]]);
        for (let k = 0; k < vars.length; k++) {
          if (vars[k] !== 'init$$') {
            result[schemas[i]][packages[j]][vars[k]] = returnValue(schemas[i], packages[j], vars[k]);
          }
        }

      }
    }

    }

  } else {

    const split = require('StringUtils').splitBy;
    const passed = split(setting_list, ',', ['"'])
      .filter((item) => item !=='');

    if (passed.length > 0) {

      const searchList = {};
      const caseCheck = plv8.find_function("aws_oracle_ext.check_identifier_case");

      for (let i = 0; i < passed.length; i++) {

        const varray = split(passed[i], '.', '"' )
          .filter((item) => item !=='');
        if (varray.length != 3) plv8.elog(ERROR, `Incorrect filter entry ${passed[i]}`);
        const sn = caseCheck(varray[0]);
        const pn = caseCheck(varray[1]);
        const vn = caseCheck(varray[2]);
        if (!searchList.hasOwnProperty(sn)) searchList[sn] = {};
        if (!searchList[sn].hasOwnProperty(pn)) searchList[sn][pn] = {};
        searchList[sn][pn][vn] = null;

      }

      const s = Object.getOwnPropertyNames(searchList);
      const schemasFiltered = schemas.filter(function(item) {
        return s.includes(item);
      });

      for (let i = 0; i < schemasFiltered.length; i++) {

        if (!result.hasOwnProperty(schemasFiltered[i])) result[schemasFiltered[i]] = {};
        const p = Object.getOwnPropertyNames(searchList[schemasFiltered[i]]);
        const packagesFiltered = Object.getOwnPropertyNames(aws_oracle_ext[schemasFiltered[i]]).filter(function(item) {
          return p.includes(item);

        });

        for (let j = 0; j < packagesFiltered.length; j++) {
          const v = Object.getOwnPropertyNames(searchList[schemasFiltered[i]][packagesFiltered[j]]);

          const varsFiltered = Object.getOwnPropertyNames(aws_oracle_ext[schemasFiltered[i]][packagesFiltered[j]]).filter(function(item) {
            return v.includes(item);
          });

          for (let k = 0; k < varsFiltered.length; k++) {

            if(!result[schemasFiltered[i]].hasOwnProperty(packagesFiltered[j])) result[schemasFiltered[i]][packagesFiltered[j]] = {};
            result[schemasFiltered[i]][packagesFiltered[j]][varsFiltered[k]] = returnValue(schemasFiltered[i], packagesFiltered[j], varsFiltered[k]);

          }

        }
      }
    }
  }
  return result;

]]></complex-attribute>
                        <category _I_D="68c85462-736a-472d-b5fc-a560794a2e76" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3b2dbfc7-052d-445f-a5d7-a8f1c3f5888e" name="sessiontimezone" subcategories-loading="none" object-loading="extended" context="sessiontimezone" is-trigger-function="0" unique-function-name="sessiontimezone" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365185" volatility="STABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sessiontimezone()">
                        <complex-attribute name="sql"><![CDATA[
  	
      SELECT  COALESCE(CURRENT_SETTING('TIMEZONE', TRUE), 'UTC');
      
]]></complex-attribute>
                        <category _I_D="4aa30150-4585-4cdb-a228-5af44ce5f390" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b8d0a685-4ec1-40b3-b26a-e1e3e60dd4fc" name="set_application_name" subcategories-loading="none" object-loading="extended" context="set_application_name" is-trigger-function="0" unique-function-name="set_application_name" is-aggregate="f" language-name="plpgsql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="void" function-arguments="p_app_name jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365932" volatility="VOLATILE" is-window="f" function-identity-arguments="p_app_name jsonb" overload-function-count="1" proc-language="plpgsql" function-signature="set_application_name(p_app_name jsonb)">
                        <complex-attribute name="sql"><![CDATA[
begin
  	execute 'set application_name = ' || quote_ident(p_app_name::json::text);
end;
]]></complex-attribute>
                        <category _I_D="fb9d7933-d96c-4b1d-ad47-dd87f993589c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4abb881b-5ae2-460f-8744-a4a269ca7622" name="set_extpack_variable" subcategories-loading="none" object-loading="extended" context="set_extpack_variable" is-trigger-function="0" unique-function-name="set_extpack_variable" is-aggregate="f" language-name="sql" arguments-datatypes="text,anyelement" is-returning-set="f" ret-datatype="void" function-arguments="variable_name text, variable_value anyelement DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="364703" volatility="VOLATILE" is-window="f" function-identity-arguments="variable_name text, variable_value anyelement" overload-function-count="1" proc-language="sql" function-signature="set_extpack_variable(variable_name text, variable_value anyelement)">
                        <complex-attribute name="sql"><![CDATA[
SELECT aws_oracle_ext.set_package_variable
(
    variable_name => $1,
    variable_value => $2
);
]]></complex-attribute>
                        <category _I_D="62de61c3-1930-4f12-aa46-d2055ef196b1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e3cd1210-696a-47b8-93d1-e266abe0cf9b" name="set_package_initialized" subcategories-loading="none" object-loading="extended" context="set_package_initialized" is-trigger-function="0" unique-function-name="set_package_initialized" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="schema_name text, package_name text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365186" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name text, package_name text" overload-function-count="1" proc-language="plpgsql" function-signature="set_package_initialized(schema_name text, package_name text)" comment="&amp;#x000a; Sets a flag for the migrated package in state uninitialized in the current session, &amp;#x000a; to a re-execution for the initialization function.&amp;#x000a; &amp;#x000a; Parameters:&amp;#x000a;  schema_name -- migrated schema&amp;#x000a;  package_name -- migrated package&amp;#x000a;">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.set_package_variable
    (
        schema_name => set_package_initialized.schema_name,
        package_name => set_package_initialized.package_name,
        variable_name => 'Init$$',
        variable_value => TRUE
    );

END;
]]></complex-attribute>
                        <category _I_D="b4bba9aa-3c25-4957-a832-aeed83842f3c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a5085bb8-d671-488a-b058-97bc4f9d1035" name="set_package_uninitialized" subcategories-loading="none" object-loading="extended" context="set_package_uninitialized" is-trigger-function="0" unique-function-name="set_package_uninitialized" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="schema_name text, package_name text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365187" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name text, package_name text" overload-function-count="1" proc-language="plpgsql" function-signature="set_package_uninitialized(schema_name text, package_name text)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    PERFORM aws_oracle_ext.set_package_variable
    (
        schema_name => set_package_uninitialized.schema_name,
        package_name => set_package_uninitialized.package_name,
        variable_name => 'Init$$',
        variable_value => FALSE
    );

END;
]]></complex-attribute>
                        <category _I_D="2c5a907f-76be-488a-bb8a-480a2078e13d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="316a16c3-a20a-4776-8f1f-51f265f3bddf" name="set_package_variable" subcategories-loading="none" object-loading="extended" context="set_package_variable" is-trigger-function="0" unique-function-name="set_package_variable" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,anyelement" is-returning-set="f" ret-datatype="void" function-arguments="schema_name text DEFAULT 'AWS_ORACLE_EXT'::text, package_name text DEFAULT 'AWS_ORACLE_ENV'::text, variable_name text DEFAULT ''::text, variable_value anyelement DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="364701" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name text, package_name text, variable_name text, variable_value anyelement" overload-function-count="1" proc-language="plpgsql" function-signature="set_package_variable(schema_name text, package_name text, variable_name text, variable_value anyelement)" comment="&amp;#x000a; Stores a value of migrated package variable / constant as a text to the session setting.&amp;#x000a; An assignment a value to the schema.package.var is migrated as following:&amp;#x000a;&amp;#x000a;   perform aws_oracle_ext.set_package_variable( 'schema', 'package', 'var' );&amp;#x000a; &amp;#x000a; Parameters:&amp;#x000a;  schema_name -- migrated schema&amp;#x000a;  package_name -- migrated package&amp;#x000a;  variable_name -- migrated global variable or constant&amp;#x000a;  variable_value -- new value&amp;#x000a;">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vschema_name TEXT := schema_name;
    vpackage_name TEXT := package_name;
BEGIN

    IF COALESCE(schema_name, 'AWS_ORACLE_EXT') <> 'AWS_ORACLE_EXT' AND

        COALESCE(package_name, 'AWS_ORACLE_ENV') <> 'AWS_ORACLE_ENV' THEN

        vschema_name := aws_oracle_ext.check_identifier_case(schema_name);
        vpackage_name := aws_oracle_ext.check_identifier_case(package_name);
    
        IF aws_oracle_ext.check_identifier_case(variable_name) <> 'init$$' THEN
        
            EXECUTE CONCAT
            (
                'SELECT ',
                schema_name,
                '.',
                package_name,
                '$Init()'
            );
    
        END IF;

    END IF;
    
    PERFORM aws_oracle_ext.set_package_variable_v8
    (
        sn => vschema_name,
        pn => vpackage_name,
        vn => aws_oracle_ext.check_identifier_case(variable_name),
        vv => variable_value::TEXT
    );

END;
]]></complex-attribute>
                        <category _I_D="2d9045a6-761e-4b02-9f14-5bf05a6a99be" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f15b7361-cd25-443c-95c9-1c7bef905eca" name="set_package_variable_object" subcategories-loading="none" object-loading="extended" context="set_package_variable_object" is-trigger-function="0" unique-function-name="set_package_variable_object" is-aggregate="f" language-name="plpgsql" arguments-datatypes="name,name,name,anyelement" is-returning-set="f" ret-datatype="void" function-arguments="schema_name name, package_name name, object_name name, object_value anyelement" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365189" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name name, package_name name, object_name name, object_value anyelement" overload-function-count="1" proc-language="plpgsql" function-signature="set_package_variable_object(schema_name name, package_name name, object_name name, object_value anyelement)">
                        <complex-attribute name="sql"><![CDATA[  
  begin
    perform aws_oracle_ext.set_package_variable
      ( schema_name := schema_name
      , package_name := package_name
      , variable_name := object_name || '$OBJ'
      , variable_value := object_value::text );

    perform aws_oracle_ext.set_package_variable
      ( schema_name := schema_name
      , package_name := package_name
      , variable_name := object_name || '$TYPE'
      , variable_value := pg_typeof( object_value ) );
  end;
]]></complex-attribute>
                        <category _I_D="aee09851-c703-42f3-93ea-667b690c6107" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6c2b85ba-c6be-4d07-9524-25bd122548fa" name="set_package_variable_object_field" subcategories-loading="none" object-loading="extended" context="set_package_variable_object_field" is-trigger-function="0" unique-function-name="set_package_variable_object_field" is-aggregate="f" language-name="plpgsql" arguments-datatypes="name,name,name,text,anyelement" is-returning-set="f" ret-datatype="void" function-arguments="schema_name name, package_name name, variable_name name, field_name text, field_value anyelement" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365188" volatility="VOLATILE" is-window="f" function-identity-arguments="schema_name name, package_name name, variable_name name, field_name text, field_value anyelement" overload-function-count="1" proc-language="plpgsql" function-signature="set_package_variable_object_field(schema_name name, package_name name, variable_name name, field_name text, field_value anyelement)">
                        <complex-attribute name="sql"><![CDATA[
  begin
    perform aws_oracle_ext.set_package_variable
      ( schema_name, package_name, variable_name || '.' || field_name, field_value );
  end;
]]></complex-attribute>
                        <category _I_D="217b6eab-a9e0-48e9-85f7-ab854a749076" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4cc80bf0-51ab-428e-828e-8305017a0bd0" name="set_package_variable_v8" subcategories-loading="none" object-loading="extended" context="set_package_variable_v8" is-trigger-function="0" unique-function-name="set_package_variable_v8" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="sn text, pn text, vn text, vv text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="366061" volatility="VOLATILE" is-window="f" function-identity-arguments="sn text, pn text, vn text, vv text" overload-function-count="1" proc-language="plv8" function-signature="set_package_variable_v8(sn text, pn text, vn text, vv text)">
                        <complex-attribute name="sql"><![CDATA[
if (typeof(require) !== 'function') {
  const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
  initColl();
}
if (typeof(aws_oracle_ext) === 'undefined')aws_oracle_ext = {};
if (!aws_oracle_ext.hasOwnProperty(sn)) aws_oracle_ext[sn] = {};
if (!aws_oracle_ext[sn].hasOwnProperty(pn)) aws_oracle_ext[sn][pn] = {};

if (!(aws_oracle_ext[sn][pn][vn] instanceof Tree)) aws_oracle_ext[sn][pn][vn] = vv;

]]></complex-attribute>
                        <category _I_D="55233b0f-4f7e-4e36-b4d4-86aa6a418855" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e4b244ac-ed05-4a89-abd6-b9b0cb361c90" name="set_service_setting" subcategories-loading="none" object-loading="extended" context="set_service_setting" is-trigger-function="0" unique-function-name="set_service_setting" is-aggregate="f" language-name="sql" arguments-datatypes="character varying,character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="p_service character varying, p_setting character varying, p_value character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365190" volatility="VOLATILE" is-window="f" function-identity-arguments="p_service character varying, p_setting character varying, p_value character varying" overload-function-count="1" proc-language="sql" function-signature="set_service_setting(p_service character varying, p_setting character varying, p_value character varying)">
                        <complex-attribute name="sql"><![CDATA[
  WITH 
  upd AS (
       UPDATE aws_oracle_ext.service_settings
       SET    value = p_value
       WHERE  service_settings.service = p_service
         AND  service_settings.setting = p_setting
       RETURNING service_settings.service, service_settings.setting
  )
  INSERT INTO aws_oracle_ext.service_settings(service, setting, value)
  SELECT p_service, p_setting, p_value
  WHERE  ( p_service, p_setting ) NOT IN (SELECT service, setting FROM upd);
]]></complex-attribute>
                        <category _I_D="1f3644a9-9477-41b6-9717-cc0ce7037261" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="55432f94-a310-4c5f-9c31-7d96cb07da1b" name="set_version" subcategories-loading="none" object-loading="extended" context="set_version" is-trigger-function="0" unique-function-name="set_version" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying" is-returning-set="f" ret-datatype="void" function-arguments="pcomponentversion character varying, pcomponentname character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365191" volatility="VOLATILE" is-window="f" function-identity-arguments="pcomponentversion character varying, pcomponentname character varying" overload-function-count="1" proc-language="plpgsql" function-signature="set_version(pcomponentversion character varying, pcomponentname character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  rowcount smallint;
BEGIN
	UPDATE aws_oracle_ext.versions 
	   SET componentversion = pComponentVersion
	 WHERE extpackcomponentname = pComponentName;	 
	GET DIAGNOSTICS rowcount = ROW_COUNT;
	
	IF rowcount < 1 THEN
	 INSERT INTO aws_oracle_ext.versions(extpackcomponentname,componentversion) 
	      VALUES (pComponentName,pComponentVersion);
	END IF;
END;
]]></complex-attribute>
                        <category _I_D="46401c4f-a6b7-4b6a-8c00-a388e6de9ae8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4e828a54-156f-4805-83f7-4a93691cd12a" name="setglobalvariable" subcategories-loading="none" object-loading="extended" context="setglobalvariable" is-trigger-function="0" unique-function-name="setglobalvariable" is-aggregate="f" language-name="plv8" arguments-datatypes="text,text,anyelement,json" is-returning-set="f" ret-datatype="void" function-arguments="proutinename text, pvariable text, pval anyelement DEFAULT NULL::text, poptions json DEFAULT NULL::json" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="366068" volatility="VOLATILE" is-window="f" function-identity-arguments="proutinename text, pvariable text, pval anyelement, poptions json" overload-function-count="1" proc-language="plv8" function-signature="setglobalvariable(proutinename text, pvariable text, pval anyelement, poptions json)">
                        <complex-attribute name="sql"><![CDATA[
'use strict';
  if (typeof(require) !== 'function') {
    const initColl = plv8.find_function("aws_oracle_ext.plv8_require");
    initColl();
  }
  const parser = plv8.find_function("aws_oracle_ext.collection_path_parse");
  const PackageTools = require('PackageTools');
  let parts = parser(proutinename);
  if (parts.length != 3) plv8.elog(ERROR, 'Incorrect routine name');
  const sn = parts[0].text;
  const pn = parts[2].text;
  
  parts = parser(pvariable);
  const recordTarget = parts.length == 1 ? false : true;
  const vn = parts[0].text;
  const valuePath = parts.slice(1);
  let writable = true;

  let isConstant = false;
  let srcGlobal = false;
  if (poptions != null && typeof(poptions) === 'object') {
    if (poptions.hasOwnProperty('constant')) isConstant = true;
    if (poptions.hasOwnProperty('srcGlobal')) srcGlobal = true;
  }

  if (typeof(aws_oracle_ext) === 'undefined')aws_oracle_ext = {};
  if (!aws_oracle_ext.hasOwnProperty(sn)) aws_oracle_ext[sn] = {};
  if (!aws_oracle_ext[sn].hasOwnProperty(pn)) aws_oracle_ext[sn][pn] = {};
  
  plv8.execute(`SELECT ${sn}.${pn}$Init()`);

  let val;

  if (!srcGlobal) {
    val = pval;
  } else {
    parts = parser(poptions['srcGlobal']);
    const srcsn = parts[0].text;
    const srcpn = parts[2].text;
    const srcvaluePath = parts.slice(4);
    const srcvn = srcvaluePath[0].text;
    if (sn === srcsn && pn === srcpn && PackageTools.partsCompare(valuePath, srcvaluePath)) return;
    if (srcvaluePath.length == 1) {
      val = aws_oracle_ext[srcsn][srcpn][srcvn];
    } else {
      val = PackageTools.getRecordField(aws_oracle_ext[srcsn][srcpn][srcvn], srcvaluePath.slice(1));
    }
  }
  let isRecord = false;
  if (typeof(val) === 'undefined' || val == null || typeof(val) !== 'object' || val instanceof Date) {
    if (isConstant) writable = false;
  } else {
    isRecord = true;
    writable = false;
    if (isConstant) {
      val = PackageTools.deepFreeze(val);
    }
  }
  if (!aws_oracle_ext[sn][pn].hasOwnProperty(vn)) {
    Object.defineProperty(aws_oracle_ext[sn][pn], vn,
      {
        value: val,
        writable : writable,
        enumerable : true,
        configurable : false
      }
    );
  } else {
    if (!recordTarget) {
      if (!isRecord && (typeof(aws_oracle_ext[sn][pn][vn]) !== 'object' || aws_oracle_ext[sn][pn][vn] == null || aws_oracle_ext[sn][pn][vn] instanceof Date)) {
        aws_oracle_ext[sn][pn][vn] = val;
      } else {
        PackageTools.deepCopy(val, aws_oracle_ext[sn][pn][vn]);
      }
    } else {
      PackageTools.setRecordField(aws_oracle_ext[sn][pn][vn], valuePath, val);
    }
  }

]]></complex-attribute>
                        <category _I_D="e6c0bea9-a9ef-4cff-b5fe-0d2a7a6ad203" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9c4569bf-a276-42a3-99d5-078044522eed" name="sp_get_dbmail" subcategories-loading="none" object-loading="extended" context="sp_get_dbmail" is-trigger-function="0" unique-function-name="sp_get_dbmail" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,bigint,xml" is-returning-set="t" ret-datatype="table" function-arguments="p_limit integer DEFAULT 1" schema-id="364663" function-type="RET_DATASET" count-arguments="1" function-id="365192" volatility="VOLATILE" is-window="f" function-identity-arguments="p_limit integer" overload-function-count="1" proc-language="plpgsql" function-signature="sp_get_dbmail(p_limit integer)">
                        <complex-attribute name="sql"><![CDATA[
declare
  l_now timestamp with time zone := clock_timestamp();
begin
  return query
    update aws_oracle_ext.mail_messages m
       set read_at = l_now
      from ( 
        select mm.id 
          from aws_oracle_ext.mail_messages mm 
         where mm.read_at is null
           and pg_try_advisory_xact_lock( mm.id )
         limit p_limit 
           for update
      ) i
     where m.id = i.id
    returning m.id, xmlelement( name mail, null, xmlconcat( xmlelement(name source, null, m.sender ), xmlelement( name rawmessage, null, m.body ) ) ) ;
end;
]]></complex-attribute>
                        <category _I_D="cbddf9ff-a548-4775-8e5f-7b8ecb7f05c2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="63f3fa64-1907-4bf1-be07-00430a7b6297" name="sp_set_dbmail" subcategories-loading="none" object-loading="extended" context="sp_set_dbmail" is-trigger-function="0" unique-function-name="sp_set_dbmail" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bigint,integer,character varying,timestamp with time zone" is-returning-set="f" ret-datatype="void" function-arguments="par_mail_id bigint, par_sent_status integer, par_message character varying DEFAULT NULL::character varying, par_processed_at timestamp with time zone DEFAULT clock_timestamp()" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365193" volatility="VOLATILE" is-window="f" function-identity-arguments="par_mail_id bigint, par_sent_status integer, par_message character varying, par_processed_at timestamp with time zone" overload-function-count="1" proc-language="plpgsql" function-signature="sp_set_dbmail(par_mail_id bigint, par_sent_status integer, par_message character varying, par_processed_at timestamp with time zone)">
                        <complex-attribute name="sql"><![CDATA[
begin
  update aws_oracle_ext.mail_messages m
     set processed_at = par_processed_at
       , error_text = par_message
   where m.id = par_mail_id;
end;
]]></complex-attribute>
                        <category _I_D="0382ee75-4731-4e7e-8d0d-fcdedee9501f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="28b0bdc2-51d9-4358-bb6f-93b37c0e1d9a" name="sqs_aa_lambda_payload" subcategories-loading="none" object-loading="extended" context="sqs_aa_lambda_payload" is-trigger-function="0" unique-function-name="sqs_aa_lambda_payload" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="fn_name text, fn_args text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365671" volatility="VOLATILE" is-window="f" function-identity-arguments="fn_name text, fn_args text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_aa_lambda_payload(fn_name text, fn_args text)">
                        <complex-attribute name="sql"><![CDATA[
begin
	return aws_oracle_ext.awslambda_fn (fn_name, fn_args);
end;
]]></complex-attribute>
                        <category _I_D="222828ff-ba7c-4278-8bf0-bd74d7d3af09" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="01408aa5-29f4-41d9-9b58-89321bdd3530" name="sqs_aq_create_queue" subcategories-loading="none" object-loading="extended" context="sqs_aq_create_queue" is-trigger-function="0" unique-function-name="sqs_aq_create_queue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="pvqueuename text, pvqueueattributes text DEFAULT aws_oracle_ext.sqs_default_queue_attributes()" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365672" volatility="VOLATILE" is-window="f" function-identity-arguments="pvqueuename text, pvqueueattributes text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_aq_create_queue(pvqueuename text, pvqueueattributes text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	/*create queue*/
	LambdaArn constant varchar(250) := aws_oracle_ext.sqs_lu_inited_funcarn('CREATE_QUEUE');
	QueueName constant varchar(30) := 'QueueName';
	lvJSON text;
	lvResult text;
begin
	--
	if pvQueueName = '' then
		raise exception 'invalid value NULL, QUEUE_NAME should be defined'
		using hint  = 'Please check your user Queue name';
	end if;

	with q as (select key, pvQueueName as value
	             from json_each_text(pvQueueAttributes::json)
	            where lower(key) = lower(QueueName)
	           union all
	           select key, value
	             from json_each_text(pvQueueAttributes::json)
	            where lower(key) != lower(QueueName))
	select json_object(array_agg(key), array_agg(value))::text
	  into lvJSON
	 from (
	       select QueueName as key, pvQueueName as value
	       where not exists (select 1 from q where lower(key) = lower(QueueName))
			union all
		  select key, value from q
			) a;

	lvResult = aws_oracle_ext.sqs_aa_lambda_payload(LambdaArn, lvJSON);
	return lvResult;
end;
]]></complex-attribute>
                        <category _I_D="07c6d69a-ee26-4ec4-847d-9aa1f40ccd0d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b849c820-cdee-400b-b127-8d3fa53d6173" name="sqs_aq_delete_message" subcategories-loading="none" object-loading="extended" context="sqs_aq_delete_message" is-trigger-function="0" unique-function-name="sqs_aq_delete_message" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="pvqueueurl text, pvreceipthandle text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365677" volatility="VOLATILE" is-window="f" function-identity-arguments="pvqueueurl text, pvreceipthandle text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_aq_delete_message(pvqueueurl text, pvreceipthandle text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	/*delete message*/
	LambdaArn constant varchar(4000) := aws_oracle_ext.sqs_lu_inited_funcarn('DELETE_MESSAGE');
	QueueUrl constant varchar(30) := 'QueueUrl';
	ReceiptHandle constant varchar(30) := 'ReceiptHandle';
	Service constant varchar(30) := 'sqs';
	lvJSON text;
	lvResult text;
begin
	with q (key, value) as (values (QueueUrl, pvQueueUrl), (ReceiptHandle, pvReceiptHandle)
	       )
    select json_object(array_agg(key), array_agg(value))
      into lvJSON
     from q;

    lvResult = aws_oracle_ext.sqs_aa_lambda_payload(LambdaArn, lvJSON);

    return lvResult;
end;
]]></complex-attribute>
                        <category _I_D="979e9842-8e02-4949-b8e6-6afeaedcddc8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="20db8f32-04d5-41dd-b45f-250a08df5a9b" name="sqs_aq_delete_queue" subcategories-loading="none" object-loading="extended" context="sqs_aq_delete_queue" is-trigger-function="0" unique-function-name="sqs_aq_delete_queue" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="pvqueueurl text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365673" volatility="VOLATILE" is-window="f" function-identity-arguments="pvqueueurl text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_aq_delete_queue(pvqueueurl text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	/*delete queue*/
	LambdaArn constant varchar(250) := aws_oracle_ext.sqs_lu_inited_funcarn('DELETE_QUEUE');
	QueueUrl constant varchar(30) := 'QueueUrl';
	AttributeNames constant varchar(30) := 'AttributeNames';
	lvJSON text;
	lvResult text;
begin
	lvJSON = json_object(array_agg(QueueUrl), array_agg(pvQueueUrl));
	lvResult = aws_oracle_ext.sqs_aa_lambda_payload(LambdaArn, lvJSON);
	return lvResult;
end;
]]></complex-attribute>
                        <category _I_D="2e8817ce-8926-4f2e-b5c0-af0b08e1007c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1943458b-41e7-41a4-9bba-905de793d86d" name="sqs_aq_get_message" subcategories-loading="none" object-loading="extended" context="sqs_aq_get_message" is-trigger-function="0" unique-function-name="sqs_aq_get_message" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="pvqueueurl text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365674" volatility="VOLATILE" is-window="f" function-identity-arguments="pvqueueurl text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_aq_get_message(pvqueueurl text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	/*receive message*/
	LambdaArn constant varchar(250) := aws_oracle_ext.sqs_lu_inited_funcarn('GET_MESSAGE');
	QueueUrl constant varchar(30) := 'QueueUrl';
	lvJSON text;
	lvResult text;
begin
	lvJSON = json_object(array_agg(QueueUrl), array_agg(pvQueueUrl));
	lvResult = aws_oracle_ext.sqs_aa_lambda_payload(LambdaArn, lvJSON);
	return lvResult;
end;
]]></complex-attribute>
                        <category _I_D="a8d4d0b1-b0e2-4462-97bb-4f4944499645" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="09720540-60c4-4f91-961e-c7eef4144566" name="sqs_aq_get_messages_body" subcategories-loading="none" object-loading="extended" context="sqs_aq_get_messages_body" is-trigger-function="0" unique-function-name="sqs_aq_get_messages_body" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,character varying,character varying,character varying,text" is-returning-set="t" ret-datatype="table" function-arguments="pvqueueurl text" schema-id="364663" function-type="RET_DATASET" count-arguments="1" function-id="365675" volatility="VOLATILE" is-window="f" function-identity-arguments="pvqueueurl text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_aq_get_messages_body(pvqueueurl text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lvStatusCode text;
	lvResult json;
begin
	lvResult := aws_oracle_ext.sqs_aq_get_message(pvQueueUrl)::json;

	lvStatusCode := trim(both '"' from json_extract_path(lvResult, 'statusCode')::text);

	if lvStatusCode = '200' then
		return query
		select "MessageId" as MessageId, "ReceiptHandle" as ReceiptHandle, "MD5OfBody" as MD5OfBody, "Body" as Body
		from json_to_recordset(json_extract_path(lvResult, aws_oracle_ext.sqs_queue_body())
		                      ) as x("MessageId" varchar(250),
		                             "ReceiptHandle" varchar(4000),
		                             "MD5OfBody" varchar(250),
		                             "Body" text);

    else
	    return query
	    select null::varchar(250) as MessageId, null::varchar(4000) as ReceiptHandle,
	           null::varchar(250) as MD5OfBody, lvResult::text as Body;
    end if;
end;
]]></complex-attribute>
                        <category _I_D="a52bd095-0539-4f06-b6f4-f96c2470a947" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="95ce9118-dd97-4950-bb7a-4504f9f31044" name="sqs_aq_send_message" subcategories-loading="none" object-loading="extended" context="sqs_aq_send_message" is-trigger-function="0" unique-function-name="sqs_aq_send_message" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="text" function-arguments="pvqueueurl text, pvmessagebody text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365676" volatility="VOLATILE" is-window="f" function-identity-arguments="pvqueueurl text, pvmessagebody text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_aq_send_message(pvqueueurl text, pvmessagebody text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	QueueUrl constant varchar(30) := 'QueueUrl';
	MessageBody constant varchar(30) := 'MessageBody';
	LambdaArn constant varchar(250) := sqs_lu_inited_funcarn('SEND_MESSAGE');
	lvJSON text;
	lvResult text;
begin
	with q (key, value) as (values (QueueUrl, pvQueueUrl), (MessageBody, pvMessageBody)
	       )
    select json_object(array_agg(key), array_agg(value))
      into lvJSON
     from q;

    lvResult = sqs_aa_lambda_payload(LambdaArn, lvJSON);

    return lvResult;
end;
]]></complex-attribute>
                        <category _I_D="eb17bcce-706c-40cd-853f-e4aa8c276496" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="feb376d7-b061-4153-b7a3-8316ecec891f" name="sqs_before" subcategories-loading="none" object-loading="extended" context="sqs_before" is-trigger-function="0" unique-function-name="sqs_before" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365625" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_before()">
                        <complex-attribute name="sql"><![CDATA[ select 2]]></complex-attribute>
                        <category _I_D="6d524a47-22d3-49e4-8b75-2b3c03d372b0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="22eeb829-ecaf-409b-b5e5-3ee7d98cb23f" name="sqs_browse" subcategories-loading="none" object-loading="extended" context="sqs_browse" is-trigger-function="0" unique-function-name="sqs_browse" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365626" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_browse()">
                        <complex-attribute name="sql"><![CDATA[ select 1]]></complex-attribute>
                        <category _I_D="c709ab4e-8f34-4f85-9409-70a0c8a1469d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4dc5e431-6077-4c1b-ba10-4121b0efaa1f" name="sqs_default_error" subcategories-loading="none" object-loading="extended" context="sqs_default_error" is-trigger-function="0" unique-function-name="sqs_default_error" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365627" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_default_error()">
                        <complex-attribute name="sql"><![CDATA[select 'ERROR.Something gone wrong!']]></complex-attribute>
                        <category _I_D="53d3eb21-413a-46c9-bced-6eb1acb8083f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d0a97540-02db-415b-b5ad-a39b555e32aa" name="sqs_default_queue_attributes" subcategories-loading="none" object-loading="extended" context="sqs_default_queue_attributes" is-trigger-function="0" unique-function-name="sqs_default_queue_attributes" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365628" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_default_queue_attributes()">
                        <complex-attribute name="sql"><![CDATA[select '{"QueueName": "", "FifoQueue": "true", "Policy": ""}']]></complex-attribute>
                        <category _I_D="3932a340-c66a-46af-8596-ec7dfa323b06" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="17a56612-4d9b-401b-9ce0-4fbb5c9d4be8" name="sqs_expired" subcategories-loading="none" object-loading="extended" context="sqs_expired" is-trigger-function="0" unique-function-name="sqs_expired" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365629" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_expired()">
                        <complex-attribute name="sql"><![CDATA[ select 3]]></complex-attribute>
                        <category _I_D="a8abd2a9-3ae6-4bc9-b843-cb0bb49ffd5b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="65a2c545-5f29-4363-85d4-d07495e42844" name="sqs_first_message" subcategories-loading="none" object-loading="extended" context="sqs_first_message" is-trigger-function="0" unique-function-name="sqs_first_message" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365630" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_first_message()">
                        <complex-attribute name="sql"><![CDATA[ select 1]]></complex-attribute>
                        <category _I_D="e1be5c38-effa-48c5-a83e-c065368cfc9b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9a7c8dfc-09ae-4a80-b40a-ec13e5eb03e0" name="sqs_forever" subcategories-loading="none" object-loading="extended" context="sqs_forever" is-trigger-function="0" unique-function-name="sqs_forever" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365631" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_forever()">
                        <complex-attribute name="sql"><![CDATA[ select -1]]></complex-attribute>
                        <category _I_D="7934a201-f8d2-428e-a49b-409b2e3f4d1e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5420ee40-1daa-4d7e-bd21-64e6f910e678" name="sqs_immediate" subcategories-loading="none" object-loading="extended" context="sqs_immediate" is-trigger-function="0" unique-function-name="sqs_immediate" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365632" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_immediate()">
                        <complex-attribute name="sql"><![CDATA[ select 1]]></complex-attribute>
                        <category _I_D="e7711d4c-3487-473a-b250-85d8bd2e117d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4f6dc144-996f-4e8a-9bd5-de0a879f4460" name="sqs_init_aq$_agent" subcategories-loading="none" object-loading="extended" context="sqs_init_aq$_agent" is-trigger-function="0" unique-function-name="sqs_init_aq$_agent" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,double precision" is-returning-set="f" ret-datatype="sqs_aq$_agent" function-arguments="name text DEFAULT NULL::text, address text DEFAULT NULL::text, protocol double precision DEFAULT NULL::double precision" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365655" volatility="IMMUTABLE" is-window="f" function-identity-arguments="name text, address text, protocol double precision" overload-function-count="1" proc-language="sql" function-signature="sqs_init_aq$_agent(name text, address text, protocol double precision)">
                        <complex-attribute name="sql"><![CDATA[ select (name, address, coalesce(protocol, 0)):: aws_oracle_ext.SQS_AQ$_AGENT;]]></complex-attribute>
                        <category _I_D="1178896b-3015-4069-9b5d-4a39c9a8a31e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="83c3da57-416f-4f67-9299-0504afa46656" name="sqs_init_aq$_sig_prop" subcategories-loading="none" object-loading="extended" context="sqs_init_aq$_sig_prop" is-trigger-function="0" unique-function-name="sqs_init_aq$_sig_prop" is-aggregate="f" language-name="sql" arguments-datatypes="bytea,text,text,text,text,bytea" is-returning-set="f" ret-datatype="sqs_aq$_sig_prop" function-arguments="signature bytea DEFAULT NULL::bytea, canalgo text DEFAULT NULL::text, digalgo text DEFAULT NULL::text, sigalgo text DEFAULT NULL::text, certificate text DEFAULT NULL::text, digval bytea DEFAULT NULL::bytea" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365656" volatility="IMMUTABLE" is-window="f" function-identity-arguments="signature bytea, canalgo text, digalgo text, sigalgo text, certificate text, digval bytea" overload-function-count="1" proc-language="sql" function-signature="sqs_init_aq$_sig_prop(signature bytea, canalgo text, digalgo text, sigalgo text, certificate text, digval bytea)">
                        <complex-attribute name="sql"><![CDATA[ select (signature, canalgo, digalgo, sigalgo, certificate, digval)::aws_oracle_ext.SQS_aq$_sig_prop;
]]></complex-attribute>
                        <category _I_D="f5249ca2-a2b7-4b68-8940-942237d7c7bb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a02ac98c-6492-45c3-b866-342f976d17f7" name="sqs_init_dbms_aq$dequeue_options_t" subcategories-loading="none" object-loading="extended" context="sqs_init_dbms_aq$dequeue_options_t" is-trigger-function="0" unique-function-name="sqs_init_dbms_aq$dequeue_options_t" is-aggregate="f" language-name="sql" arguments-datatypes="text,integer,integer,integer,integer,bytea,text,text,json,text,integer" is-returning-set="f" ret-datatype="dbms_aq$dequeue_options_t" function-arguments="consumer_name text DEFAULT NULL::text, dequeue_mode integer DEFAULT NULL::integer, navigation integer DEFAULT NULL::integer, visibility integer DEFAULT NULL::integer, wait integer DEFAULT NULL::integer, msgid bytea DEFAULT NULL::bytea, correlation text DEFAULT NULL::text, deq_condition text DEFAULT NULL::text, signature json DEFAULT NULL::json, transformation text DEFAULT NULL::text, delivery_mode integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="11" function-id="365657" volatility="IMMUTABLE" is-window="f" function-identity-arguments="consumer_name text, dequeue_mode integer, navigation integer, visibility integer, wait integer, msgid bytea, correlation text, deq_condition text, signature json, transformation text, delivery_mode integer" overload-function-count="1" proc-language="sql" function-signature="sqs_init_dbms_aq$dequeue_options_t(consumer_name text, dequeue_mode integer, navigation integer, visibility integer, wait integer, msgid bytea, correlation text, deq_condition text, signature json, transformation text, delivery_mode integer)">
                        <complex-attribute name="sql"><![CDATA[ select (
consumer_name ,
coalesce(dequeue_mode, aws_oracle_ext.sqs_remove()),
coalesce(navigation,aws_oracle_ext.sqs_next_message()),
coalesce(visibility,aws_oracle_ext.sqs_on_commit()),
coalesce(wait, aws_oracle_ext.sqs_forever()),
msgid,
correlation,
deq_condition,
json_populate_record(null::aws_oracle_ext.SQS_aq$_sig_prop, signature),
transformation,
coalesce(delivery_mode, aws_oracle_ext.sqs_persistent())
                      )::aws_oracle_ext.dbms_aq$dequeue_options_t;]]></complex-attribute>
                        <category _I_D="d1a00ccb-a3d3-4e71-8740-73127b8c5bae" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="19a5a4f6-54b8-469d-9993-442134c30c4a" name="sqs_init_dbms_aq$enqueue_options_t" subcategories-loading="none" object-loading="extended" context="sqs_init_dbms_aq$enqueue_options_t" is-trigger-function="0" unique-function-name="sqs_init_dbms_aq$enqueue_options_t" is-aggregate="f" language-name="sql" arguments-datatypes="integer,bytea,integer,text,integer" is-returning-set="f" ret-datatype="dbms_aq$enqueue_options_t" function-arguments="visibility integer DEFAULT NULL::integer, relative_msgid bytea DEFAULT NULL::bytea, sequence_deviation integer DEFAULT NULL::integer, transformation text DEFAULT NULL::text, delivery_mode integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365658" volatility="IMMUTABLE" is-window="f" function-identity-arguments="visibility integer, relative_msgid bytea, sequence_deviation integer, transformation text, delivery_mode integer" overload-function-count="1" proc-language="sql" function-signature="sqs_init_dbms_aq$enqueue_options_t(visibility integer, relative_msgid bytea, sequence_deviation integer, transformation text, delivery_mode integer)">
                        <complex-attribute name="sql"><![CDATA[ select (coalesce(visibility, aws_oracle_ext.sqs_on_commit()),
                      relative_msgid, sequence_deviation, transformation,
                      coalesce(delivery_mode, aws_oracle_ext.sqs_persistent())
                      )::aws_oracle_ext.dbms_aq$enqueue_options_t;]]></complex-attribute>
                        <category _I_D="09745b23-74fc-4a8c-ae10-1668ad9ee2ca" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2591de5b-e2a5-4808-9409-8fb0bb875954" name="sqs_init_dbms_aq$message_properties_t" subcategories-loading="none" object-loading="extended" context="sqs_init_dbms_aq$message_properties_t" is-trigger-function="0" unique-function-name="sqs_init_dbms_aq$message_properties_t" is-aggregate="f" language-name="sql" arguments-datatypes="integer,integer,integer,text,integer,json,text,timestamp without time zone,integer,json,bytea,json,text,text,integer" is-returning-set="f" ret-datatype="dbms_aq$message_properties_t" function-arguments="priority integer DEFAULT NULL::integer, delay integer DEFAULT NULL::integer, expiration integer DEFAULT NULL::integer, correlation text DEFAULT NULL::text, attempts integer DEFAULT NULL::integer, recipient_list json DEFAULT NULL::json, exception_queue text DEFAULT NULL::text, enqueue_time timestamp without time zone DEFAULT NULL::timestamp without time zone, state integer DEFAULT NULL::integer, sender_id json DEFAULT NULL::json, original_msgid bytea DEFAULT NULL::bytea, signature json DEFAULT NULL::json, transaction_group text DEFAULT NULL::text, user_property text DEFAULT NULL::text, delivery_mode integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="15" function-id="365659" volatility="IMMUTABLE" is-window="f" function-identity-arguments="priority integer, delay integer, expiration integer, correlation text, attempts integer, recipient_list json, exception_queue text, enqueue_time timestamp without time zone, state integer, sender_id json, original_msgid bytea, signature json, transaction_group text, user_property text, delivery_mode integer" overload-function-count="1" proc-language="sql" function-signature="sqs_init_dbms_aq$message_properties_t(priority integer, delay integer, expiration integer, correlation text, attempts integer, recipient_list json, exception_queue text, enqueue_time timestamp without time zone, state integer, sender_id json, original_msgid bytea, signature json, transaction_group text, user_property text, delivery_mode integer)">
                        <complex-attribute name="sql"><![CDATA[ select (
coalesce(priority,1),
coalesce(delay, aws_oracle_ext.sqs_no_delay()),
coalesce(expiration, aws_oracle_ext.sqs_never()),
correlation,
attempts,
recipient_list,
exception_queue,
enqueue_time,
state,
json_populate_record(null::aws_oracle_ext.sqs_aq$_agent, sender_id),
original_msgid,
json_populate_record(null::aws_oracle_ext.sqs_aq$_sig_prop, signature),
transaction_group,
user_property,
coalesce(delivery_mode, aws_oracle_ext.sqs_persistent())
)::aws_oracle_ext.dbms_aq$message_properties_t;]]></complex-attribute>
                        <category _I_D="164d5ac5-6485-4cf2-a3ba-ce2c3b8a5941" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d8ca8894-2f3b-4553-b4e2-dd2b20c51ebc" name="sqs_locked" subcategories-loading="none" object-loading="extended" context="sqs_locked" is-trigger-function="0" unique-function-name="sqs_locked" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365633" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_locked()">
                        <complex-attribute name="sql"><![CDATA[ select 2]]></complex-attribute>
                        <category _I_D="5bca097b-fa76-4497-b882-ce39ca0abe97" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="be1e85b4-936f-48d2-8095-5222873829b7" name="sqs_lu_create_queue_table" subcategories-loading="none" object-loading="extended" context="sqs_lu_create_queue_table" is-trigger-function="0" unique-function-name="sqs_lu_create_queue_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="pvtablename text, pvtypename text, pvtableschema text DEFAULT ''::text, pvtypeschema text DEFAULT ''::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365660" volatility="VOLATILE" is-window="f" function-identity-arguments="pvtablename text, pvtypename text, pvtableschema text, pvtypeschema text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_lu_create_queue_table(pvtablename text, pvtypename text, pvtableschema text, pvtypeschema text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lrT aws_oracle_ext.sqs_queues_tables%rowtype;

	TABLE_DDL  text = 'CREATE TABLE %s.%s '
						'(q_name VARCHAR(61), '
						'msgid BYTEA, '
						'corrid VARCHAR(128), '
						'priority DOUBLE PRECISION, '
						'state DOUBLE PRECISION, '
						'delay TIMESTAMP (6) WITHOUT TIME ZONE, '
						'expiration DOUBLE PRECISION, '
						'time_manager_info TIMESTAMP (6) WITHOUT TIME ZONE, '
						'local_order_no DOUBLE PRECISION, '
						'chain_no DOUBLE PRECISION, '
						'cscn DOUBLE PRECISION, '
						'dscn DOUBLE PRECISION, '
						'enq_time TIMESTAMP (6) WITHOUT TIME ZONE, '
						'enq_uid VARCHAR(30), '
						'enq_tid VARCHAR(30), '
						'deq_time TIMESTAMP (6) WITHOUT TIME ZONE, '
						'deq_uid VARCHAR(30), '
						'deq_tid VARCHAR(30), '
						'retry_count DOUBLE PRECISION, '
						'exception_qschema VARCHAR(30), '
						'exception_queue VARCHAR(30), '
						'step_no DOUBLE PRECISION, '
						'recipient_key DOUBLE PRECISION, '
						'dequeue_msgid BYTEA, '
						'sender_name VARCHAR(30), '
						'sender_address VARCHAR(1024), '
						'sender_protocol DOUBLE PRECISION, '
						'user_data %s.%s, '
						'user_prop VARCHAR(8000), '
						'primary KEY (MSGID)'
						')';
	REGISTER_TABLE text = 'INSERT INTO aws_oracle_ext.sqs_queues_tables '
						  '(tschema, tname, tdatatypeschema, tdatatypename) '
						  'VALUES '
						  '(%s, %s, %s, %s)';
	EXECUTE_BLOCK text = '%s;'
				         '%s;';
begin
	lrT.tschema := lower(coalesce(nullif(pvTableSchema, ''), current_schema()));
	lrT.tname := lower(pvTableName);
	lrT.tdatatypeschema := lower(coalesce(nullif(pvTypeSchema, ''), current_schema()));
	lrT.tdatatypename := lower(pvTypeName);

	select t.user_defined_type_schema,
		   t.user_defined_type_name
	  into lrT.tdatatypeschema,
	       lrT.tdatatypename
	  from information_schema.user_defined_types t
	 where t.user_defined_type_schema = lrT.tdatatypeschema
	   and t.user_defined_type_name = lrT.tdatatypename;

	if nullif(lrT.tdatatypeschema, '') is not null and nullif(lrT.tdatatypename, '') is not null then

		TABLE_DDL := format(TABLE_DDL, lrT.tschema, lrT.tname, lrT.tdatatypeschema, lrT.tdatatypename);
		REGISTER_TABLE := format(REGISTER_TABLE, quote_literal(lrT.tschema), quote_literal(lrT.tname), quote_literal(lrT.tdatatypeschema), quote_literal(lrT.tdatatypename));

		EXECUTE_BLOCK := format(EXECUTE_BLOCK, TABLE_DDL, REGISTER_TABLE);

		EXECUTE EXECUTE_BLOCK;
	else
		raise exception '%', aws_oracle_ext.sqs_default_error();
	end if;
end;
]]></complex-attribute>
                        <category _I_D="a5e1ce25-83c6-4994-adfc-9749b0b70155" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f2042d1a-66ee-412f-a3fa-ecc045f65496" name="sqs_lu_define_table" subcategories-loading="none" object-loading="extended" context="sqs_lu_define_table" is-trigger-function="0" unique-function-name="sqs_lu_define_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="record" function-arguments="pvtablename text, OUT ovschemaname text, OUT ovtablename text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365661" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pvtablename text, OUT ovschemaname text, OUT ovtablename text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_lu_define_table(pvtablename text, OUT ovschemaname text, OUT ovtablename text)">
                        <complex-attribute name="sql"><![CDATA[
begin
	ovtablename := coalesce(nullif(split_part(lower(pvtablename), '.', 2), ''), lower(pvtablename));

	if lower(pvtablename) = ovtablename then
		ovschemaname = current_schema();
	else
		ovschemaname := split_part(lower(pvtablename), '.', 1);
	end if;
end;
]]></complex-attribute>
                        <category _I_D="bc4351cc-d050-4136-aaca-f47c56d3f4d5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6ed8c4b8-f8a3-432a-a85e-d0efb3b9859d" name="sqs_lu_define_type" subcategories-loading="none" object-loading="extended" context="sqs_lu_define_type" is-trigger-function="0" unique-function-name="sqs_lu_define_type" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="record" function-arguments="pvtypename text, OUT ovschemaname text, OUT ovtypename text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365662" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pvtypename text, OUT ovschemaname text, OUT ovtypename text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_lu_define_type(pvtypename text, OUT ovschemaname text, OUT ovtypename text)">
                        <complex-attribute name="sql"><![CDATA[
begin
	select a.ovschemaname, a.ovtablename
	  into ovschemaname, ovtypename
 	from aws_oracle_ext.sqs_lu_define_table(pvtypename) a;
end;
]]></complex-attribute>
                        <category _I_D="e59076e8-57d4-4463-81f1-cd503d1a7423" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5aff3d70-599b-4305-89c9-0914427f2a59" name="sqs_lu_delete_queue_message" subcategories-loading="none" object-loading="extended" context="sqs_lu_delete_queue_message" is-trigger-function="0" unique-function-name="sqs_lu_delete_queue_message" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="queue text, msgid text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365664" volatility="VOLATILE" is-window="f" function-identity-arguments="queue text, msgid text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_lu_delete_queue_message(queue text, msgid text)">
                        <complex-attribute name="sql"><![CDATA[
declare
DELETE_DDL  text = 'DELETE FROM %s.%s t'
						' WHERE t.q_name = %s and'
						' t.msgid = %s';

lrT aws_oracle_ext.sqs_queues_tables%rowtype;
begin
	lrT := aws_oracle_ext.sqs_lu_inited_queuetbl(pvname := queue);
	DELETE_DDL := format(DELETE_DDL, lrT.tschema, lrT.tname, quote_literal(queue), quote_literal(msgid));

	EXECUTE DELETE_DDL;
end;
]]></complex-attribute>
                        <category _I_D="1066cd7e-b519-4455-b685-c764160cf139" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c753c635-c23e-4c18-bc9d-f6647ea25004" name="sqs_lu_delete_queue_table" subcategories-loading="none" object-loading="extended" context="sqs_lu_delete_queue_table" is-trigger-function="0" unique-function-name="sqs_lu_delete_queue_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="pvqueuename text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365663" volatility="VOLATILE" is-window="f" function-identity-arguments="pvqueuename text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_lu_delete_queue_table(pvqueuename text)">
                        <complex-attribute name="sql"><![CDATA[
begin
	DELETE FROM aws_oracle_ext.sqs_queues_settings WHERE qname = pvqueuename;
end;
]]></complex-attribute>
                        <category _I_D="48f9bba6-0f47-4471-a849-3993017801a9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0e238847-a2c9-4632-aec7-2c7d74bc527e" name="sqs_lu_drop_queue_table" subcategories-loading="none" object-loading="extended" context="sqs_lu_drop_queue_table" is-trigger-function="0" unique-function-name="sqs_lu_drop_queue_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="pvtablename text, pvschemaname text DEFAULT ''::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365665" volatility="VOLATILE" is-window="f" function-identity-arguments="pvtablename text, pvschemaname text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_lu_drop_queue_table(pvtablename text, pvschemaname text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lvSchemaName text := coalesce(nullif(pvschemaname, ''), current_schema());
	lvTableName text := pvtablename;
	UNREGISTER_TABLE text := 'DELETE FROM aws_oracle_ext.sqs_queues_tables WHERE tschema = %s and tname = %s';
	TABLE_DDL  text := 'DROP TABLE %s.%s';
	EXECUTE_BLOCK text := '%s;'
	                      '%s;';
	lnQueueRegistered int;
begin

  select count(1)
    into lnQueueRegistered
	from aws_oracle_ext.sqs_vw_queues_settings q
	where q.tschema = lvSchemaName
      and q.tname = lvTableName;

    if lnQueueRegistered = 0 then
		UNREGISTER_TABLE := format(UNREGISTER_TABLE, quote_literal(lvSchemaName),quote_literal(pvTableName));
		TABLE_DDL := format(TABLE_DDL, lvSchemaName, pvTableName);
		EXECUTE_BLOCK := format(EXECUTE_BLOCK, UNREGISTER_TABLE, TABLE_DDL);
		EXECUTE EXECUTE_BLOCK;
	else
		raise exception '%', aws_oracle_ext.sqs_default_error();
	end if;

end;
]]></complex-attribute>
                        <category _I_D="3ef8f283-2cf7-436a-bf74-a3d87942a4da" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e352438c-58bf-443a-95d1-df29d01c42bc" name="sqs_lu_inited_funcarn" subcategories-loading="none" object-loading="extended" context="sqs_lu_inited_funcarn" is-trigger-function="0" unique-function-name="sqs_lu_inited_funcarn" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="varchar" function-arguments="pvaction text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365666" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pvaction text" overload-function-count="1" proc-language="sql" function-signature="sqs_lu_inited_funcarn(pvaction text)">
                        <complex-attribute name="sql"><![CDATA[
	select f.Arn
	  from aws_oracle_ext.sqs_functions_settings f
	 where f.fAction = pvAction
	;
]]></complex-attribute>
                        <category _I_D="176bfcef-d928-4dfe-82f1-9848c297b255" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ed8d4eb2-c77e-46aa-8ed9-1d06027daa33" name="sqs_lu_inited_queuetbl" subcategories-loading="none" object-loading="extended" context="sqs_lu_inited_queuetbl" is-trigger-function="0" unique-function-name="sqs_lu_inited_queuetbl" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="sqs_queues_tables" function-arguments="pvname text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365667" volatility="VOLATILE" is-window="f" function-identity-arguments="pvname text" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_lu_inited_queuetbl(pvname text)">
                        <complex-attribute name="sql"><![CDATA[
declare
	lrT aws_oracle_ext.sqs_queues_tables%rowtype;
	lnTID integer;
begin

	select -1 id, tschema, tname, tdatatypeschema, tdatatypename
	  into lrT
	  from aws_oracle_ext.sqs_vw_queues_settings q
	 where q.qName = pvName
	;

	if lrT.Id is null or lrT.tname is null or lrT.tdatatypename is null then

	   select tableid
	   	 into lnTID
		 from aws_oracle_ext.sqs_queues_settings s
		where s.qname = pvname;

		if lnTID is null then
			raise exception '% does not exist or does not define', pvname
			using hint  = '-24010';
		else
			raise exception 'invalid value. Queue table or type does not exist or does not define for queue %', pvname
			using hint  = '-24000';
		end if;

	end if;

	return lrT;
end;
]]></complex-attribute>
                        <category _I_D="4d365720-5dd7-41f2-862e-20ddb47347f5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="374233bf-a00e-403f-ad3a-0c2105c210d5" name="sqs_lu_inited_queueurl" subcategories-loading="none" object-loading="extended" context="sqs_lu_inited_queueurl" is-trigger-function="0" unique-function-name="sqs_lu_inited_queueurl" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="varchar" function-arguments="pvname text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365668" volatility="IMMUTABLE" is-window="f" function-identity-arguments="pvname text" overload-function-count="1" proc-language="sql" function-signature="sqs_lu_inited_queueurl(pvname text)">
                        <complex-attribute name="sql"><![CDATA[
	select q.Url
	  from aws_oracle_ext.sqs_queues_settings q
	 where q.qName = pvName
	;
]]></complex-attribute>
                        <category _I_D="62650b2d-01a8-4ab4-b30c-8696575a9bc6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="25f8f5f0-2a24-420a-b1f0-42d56de2889b" name="sqs_lu_insert_func_arn" subcategories-loading="none" object-loading="extended" context="sqs_lu_insert_func_arn" is-trigger-function="0" unique-function-name="sqs_lu_insert_func_arn" is-aggregate="f" language-name="sql" arguments-datatypes="text,text,text" is-returning-set="f" ret-datatype="varchar" function-arguments="pvaction text, pvfunctionname text, pvarn text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365669" volatility="VOLATILE" is-window="f" function-identity-arguments="pvaction text, pvfunctionname text, pvarn text" overload-function-count="1" proc-language="sql" function-signature="sqs_lu_insert_func_arn(pvaction text, pvfunctionname text, pvarn text)">
                        <complex-attribute name="sql"><![CDATA[
	with d (action_, functionname, arn) as
			  (select upper(pvaction) , lower(pvfunctionname) , lower(pvarn)
				where upper(pvaction) = any ('{DELETE_QUEUE,SEND_MESSAGE,DELETE_MESSAGE,CREATE_QUEUE,GET_MESSAGE,INIT_QUEUES}')
 		  		  and lower(pvfunctionname) = split_part(lower(pvarn), ':', 7)
 		  		  and pvfunctionname != ''
 		  		  and pvarn != ''
 	          )
	insert into aws_oracle_ext.sqs_functions_settings select action_, functionname, arn from d
	on conflict(faction) do
		update set fname = lower(pvfunctionname),
		           arn = lower(pvarn)
	returning fname;
]]></complex-attribute>
                        <category _I_D="01610e93-75ec-455e-ab98-96b58b2eabd0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1ad24e69-bcaf-4145-afc5-ae0e30e35aea" name="sqs_lu_insert_queue_table" subcategories-loading="none" object-loading="extended" context="sqs_lu_insert_queue_table" is-trigger-function="0" unique-function-name="sqs_lu_insert_queue_table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="json,json" is-returning-set="f" ret-datatype="void" function-arguments="queue_table_record json, msg_record json" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365670" volatility="VOLATILE" is-window="f" function-identity-arguments="queue_table_record json, msg_record json" overload-function-count="1" proc-language="plpgsql" function-signature="sqs_lu_insert_queue_table(queue_table_record json, msg_record json)">
                        <complex-attribute name="sql"><![CDATA[
declare
USER_DATA text = 'json_populate_record(null::%s.%s, %s)';
TABLE_DDL  text = 'INSERT INTO %s.%s ('
						'q_name, msgid, corrid, '
						'priority, state, delay, '
						'expiration, time_manager_info, local_order_no, '
						'chain_no, cscn, dscn, '
						'enq_time, enq_uid, enq_tid, '
						'deq_time, deq_uid,  deq_tid, '
						'retry_count, exception_qschema, exception_queue, '
						'step_no, recipient_key, dequeue_msgid, '
						'sender_name, sender_address, sender_protocol, '
						'user_data, user_prop'
						')'
						'VALUES ( '
							'%s, %s::bytea, null, '
							'0, 0, null, '
							'null, null, 0, '
							'0, 0, 0, '
							'now(), current_user, txid_current() , '
							'null, null, null, '
							'0, null, null, '
							'0, 0, null::bytea, '
							'null, null, 0, '
							'%s, null'
							')';

lrT aws_oracle_ext.sqs_queues_tables%rowtype;
lrM aws_oracle_ext.sqs_queue_record;
begin
	lrT := json_populate_record(lrT, queue_table_record);
 	lrM := json_populate_record(lrM, msg_record);

	USER_DATA := format(USER_DATA, lrT.tdatatypeschema, lrT.tdatatypename, quote_literal(lrM.user_data));
	TABLE_DDL := format(TABLE_DDL, lrT.tschema, lrT.tname, quote_literal(lrM.q_name), quote_literal(lrM.msgid), USER_DATA);

	EXECUTE TABLE_DDL;
end;
]]></complex-attribute>
                        <category _I_D="ebb44c57-a4ab-4634-a01f-df8abb9088ee" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2032d8a0-79ff-47a5-a520-8b8d67363a68" name="sqs_namespace_anonymous" subcategories-loading="none" object-loading="extended" context="sqs_namespace_anonymous" is-trigger-function="0" unique-function-name="sqs_namespace_anonymous" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365634" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_namespace_anonymous()">
                        <complex-attribute name="sql"><![CDATA[ select 0]]></complex-attribute>
                        <category _I_D="56e201c6-3502-4349-8b9c-42f8e8e5d877" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9dc6370f-dce2-40bd-8e56-8f77cf721c71" name="sqs_namespace_aq" subcategories-loading="none" object-loading="extended" context="sqs_namespace_aq" is-trigger-function="0" unique-function-name="sqs_namespace_aq" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365636" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_namespace_aq()">
                        <complex-attribute name="sql"><![CDATA[ select 1]]></complex-attribute>
                        <category _I_D="03cf74c7-5231-4606-b4b3-6a03298b4197" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ae4d568f-5545-4ddf-b72a-ca5c2023f1ee" name="sqs_never" subcategories-loading="none" object-loading="extended" context="sqs_never" is-trigger-function="0" unique-function-name="sqs_never" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365635" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_never()">
                        <complex-attribute name="sql"><![CDATA[ select -1]]></complex-attribute>
                        <category _I_D="1171e7d4-7138-4185-af65-30e5dbbf0770" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1f0f8c12-fb79-4af1-9050-7dbf6037837a" name="sqs_next_message" subcategories-loading="none" object-loading="extended" context="sqs_next_message" is-trigger-function="0" unique-function-name="sqs_next_message" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365637" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_next_message()">
                        <complex-attribute name="sql"><![CDATA[ select 3]]></complex-attribute>
                        <category _I_D="7626ad3c-8c71-4108-a505-161dd0194f54" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f7145d22-bb1a-4b39-bdee-fdd070adc454" name="sqs_no_delay" subcategories-loading="none" object-loading="extended" context="sqs_no_delay" is-trigger-function="0" unique-function-name="sqs_no_delay" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365638" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_no_delay()">
                        <complex-attribute name="sql"><![CDATA[ select 0]]></complex-attribute>
                        <category _I_D="7314c292-0439-4db4-a2ea-a6edf467b537" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="99f53a5d-ad97-497b-aee6-aedb83bac2d5" name="sqs_no_wait" subcategories-loading="none" object-loading="extended" context="sqs_no_wait" is-trigger-function="0" unique-function-name="sqs_no_wait" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365639" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_no_wait()">
                        <complex-attribute name="sql"><![CDATA[ select 0]]></complex-attribute>
                        <category _I_D="15340fa8-bb2d-423c-a9d1-d84968df9763" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d5d6839f-3305-4afa-bf61-b7520c4d6585" name="sqs_none" subcategories-loading="none" object-loading="extended" context="sqs_none" is-trigger-function="0" unique-function-name="sqs_none" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365640" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_none()">
                        <complex-attribute name="sql"><![CDATA[ select 0]]></complex-attribute>
                        <category _I_D="cf195c68-a774-459e-98e6-dbb839e03155" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e15ecd61-1c5d-434e-8330-77b69d1281f0" name="sqs_normal_queue" subcategories-loading="none" object-loading="extended" context="sqs_normal_queue" is-trigger-function="0" unique-function-name="sqs_normal_queue" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365641" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_normal_queue()">
                        <complex-attribute name="sql"><![CDATA[ select 0]]></complex-attribute>
                        <category _I_D="dc4c49b2-a03a-4c1d-aa7c-4d95480b56fb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b6cedeb9-5791-4252-8e67-9bda28dcb107" name="sqs_ntfn_grouping_forever" subcategories-loading="none" object-loading="extended" context="sqs_ntfn_grouping_forever" is-trigger-function="0" unique-function-name="sqs_ntfn_grouping_forever" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365642" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_ntfn_grouping_forever()">
                        <complex-attribute name="sql"><![CDATA[ select -1]]></complex-attribute>
                        <category _I_D="223b1ec8-bb65-4540-a893-7a4bb23f9f75" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="881193df-e9ad-43e3-aea1-643a60238643" name="sqs_ntfn_grouping_type_last" subcategories-loading="none" object-loading="extended" context="sqs_ntfn_grouping_type_last" is-trigger-function="0" unique-function-name="sqs_ntfn_grouping_type_last" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365643" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_ntfn_grouping_type_last()">
                        <complex-attribute name="sql"><![CDATA[ select 2]]></complex-attribute>
                        <category _I_D="1cf1a8ad-d841-4105-8eb4-1f7ee3bb56dc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="db4190aa-efaa-41de-8c5d-e4f02724875b" name="sqs_ntfn_grouping_type_summary" subcategories-loading="none" object-loading="extended" context="sqs_ntfn_grouping_type_summary" is-trigger-function="0" unique-function-name="sqs_ntfn_grouping_type_summary" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365644" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_ntfn_grouping_type_summary()">
                        <complex-attribute name="sql"><![CDATA[ select 1]]></complex-attribute>
                        <category _I_D="ca00d1eb-ab97-4dd2-aced-f6e9df504326" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f3d1ec8c-f656-450a-849e-32db3976e176" name="sqs_on_commit" subcategories-loading="none" object-loading="extended" context="sqs_on_commit" is-trigger-function="0" unique-function-name="sqs_on_commit" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365645" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_on_commit()">
                        <complex-attribute name="sql"><![CDATA[ select 2]]></complex-attribute>
                        <category _I_D="462026e0-dacb-4ea2-b06f-3c8fc0d9e738" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0cf9dac5-47b5-474a-9097-46a650ba7c6a" name="sqs_persistent" subcategories-loading="none" object-loading="extended" context="sqs_persistent" is-trigger-function="0" unique-function-name="sqs_persistent" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365646" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_persistent()">
                        <complex-attribute name="sql"><![CDATA[select 1]]></complex-attribute>
                        <category _I_D="fe1bdfaa-13ad-4bb7-8dc6-311be980ceec" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="60615517-743f-400b-b532-28bc3bde77f3" name="sqs_processed" subcategories-loading="none" object-loading="extended" context="sqs_processed" is-trigger-function="0" unique-function-name="sqs_processed" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365647" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_processed()">
                        <complex-attribute name="sql"><![CDATA[ select 2]]></complex-attribute>
                        <category _I_D="5e52d328-a8ee-4f90-98bb-3f86389c9c53" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="28a0b073-55d2-46e7-9c49-e05f19db2888" name="sqs_queue_body" subcategories-loading="none" object-loading="extended" context="sqs_queue_body" is-trigger-function="0" unique-function-name="sqs_queue_body" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365648" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_queue_body()">
                        <complex-attribute name="sql"><![CDATA[select 'body']]></complex-attribute>
                        <category _I_D="97707967-3bc8-49fd-a3ee-7ddeef6f1512" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="44afac89-56ee-40ed-a798-422febc88dac" name="sqs_queue_fifo" subcategories-loading="none" object-loading="extended" context="sqs_queue_fifo" is-trigger-function="0" unique-function-name="sqs_queue_fifo" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="varchar" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365649" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_queue_fifo()">
                        <complex-attribute name="sql"><![CDATA[select 'fifo']]></complex-attribute>
                        <category _I_D="5399d08b-3d46-4d7d-bc73-8307b877f2e3" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c6a97d5a-743a-44a4-8547-5bc7dc715db8" name="sqs_ready" subcategories-loading="none" object-loading="extended" context="sqs_ready" is-trigger-function="0" unique-function-name="sqs_ready" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365650" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_ready()">
                        <complex-attribute name="sql"><![CDATA[ select 0]]></complex-attribute>
                        <category _I_D="e8600781-d584-4e93-9f2f-c0047c94898a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a1f01bac-ca72-4358-9330-55b14ad6e9b9" name="sqs_remove" subcategories-loading="none" object-loading="extended" context="sqs_remove" is-trigger-function="0" unique-function-name="sqs_remove" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365651" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_remove()">
                        <complex-attribute name="sql"><![CDATA[ select 3]]></complex-attribute>
                        <category _I_D="63dbc57b-f50a-4afe-b064-91eb5802d017" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="17d7dc74-31db-4aff-b543-d6568289ecff" name="sqs_remove_nodata" subcategories-loading="none" object-loading="extended" context="sqs_remove_nodata" is-trigger-function="0" unique-function-name="sqs_remove_nodata" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365652" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_remove_nodata()">
                        <complex-attribute name="sql"><![CDATA[ select 4]]></complex-attribute>
                        <category _I_D="b99768ed-85d1-4cf5-ac96-6971fc10b070" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="940bd37e-b817-4037-8b47-d0874a5ffafe" name="sqs_top" subcategories-loading="none" object-loading="extended" context="sqs_top" is-trigger-function="0" unique-function-name="sqs_top" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365653" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_top()">
                        <complex-attribute name="sql"><![CDATA[ select 3]]></complex-attribute>
                        <category _I_D="5a5f514e-aab2-44cb-879d-d78978256a52" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="712e635c-7a74-42d0-b299-26554d548bcb" name="sqs_waiting" subcategories-loading="none" object-loading="extended" context="sqs_waiting" is-trigger-function="0" unique-function-name="sqs_waiting" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365654" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sqs_waiting()">
                        <complex-attribute name="sql"><![CDATA[ select 1]]></complex-attribute>
                        <category _I_D="f32d9082-cab3-4577-ba93-ba15505074fd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3844b8d1-f0f7-400c-8a48-17dfb6f35688" name="strip_sql_comments" subcategories-loading="none" object-loading="extended" context="strip_sql_comments" is-trigger-function="0" unique-function-name="strip_sql_comments" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean,text[],boolean" is-returning-set="f" ret-datatype="text" function-arguments="p_sql_statement text, p_skip_hints boolean DEFAULT false, p_adv_quote_tags text[] DEFAULT ARRAY[''::text], p_validate_multiline boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365090" volatility="VOLATILE" is-window="f" function-identity-arguments="p_sql_statement text, p_skip_hints boolean, p_adv_quote_tags text[], p_validate_multiline boolean" overload-function-count="1" proc-language="plpgsql" function-signature="strip_sql_comments(p_sql_statement text, p_skip_hints boolean, p_adv_quote_tags text[], p_validate_multiline boolean)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    i_tag RECORD;
    v_tag_pos INTEGER;
    v_tag_len INTEGER;
    v_adv_tag VARCHAR;
    v_reversed_sql TEXT;
    i_multi_comment RECORD;
    v_unpaired_cnt INTEGER;
    v_comm_startpos INTEGER;
    v_comm_endpos INTEGER;
    v_comm_length INTEGER;
    v_adv_quote_tags TEXT[];
    v_adv_tag_idx INTEGER[];
    v_idx_offset INTEGER := 0;
    v_hints_single_regexp TEXT;
    v_hints_multi_regexp TEXT;
    v_hints_list_regexp TEXT;
    v_dml_multi_regexp VARCHAR;
    v_singlecomm_cnt INTEGER;
    v_adv_quote_tag_cnt INTEGER;
    v_left_multicomm_cnt INTEGER;
    v_right_multicomm_cnt INTEGER;
    v_adv_quote_tag_idx TEXT[];
    v_single_comm_idx INTEGER[];
    v_literal_start_idx INTEGER[];
    v_literal_end_idx INTEGER[];
    v_left_multicomm_idx INTEGER[];
    v_right_multicomm_idx INTEGER[];
    v_ambiguously_comm_pos INTEGER;
    v_within_literal_res SMALLINT := 0;
    v_sql_statement TEXT := trim(p_sql_statement);
    v_dml_keywords_regexp CONSTANT VARCHAR := 'SELECT|INSERT|UPDATE|DELETE|MERGE';
    v_hints_list CONSTANT TEXT[] := ARRAY['ALL_ROWS', 'FIRST_ROWS', 'FIRST_ROWS_1', 'FIRST_ROWS_100', 'CHOOSE', 'RULE', 'NO_PUSH_PRED',
                                          'CLUSTER', 'FULL', 'HASH', 'ROWID', 'INDEX', 'NO_INDEX', 'INDEX_ASC', 'INDEX_DESC', 'USE_NL',
                                          'INDEX_COMBINE', 'INDEX_FFS', 'ORDERED', 'ORDERED_PREDICATES', 'STAR', 'DRIVING_SITE', 'NL_SJ',
                                          'HASH_SJ', 'MERGE_SJ', 'LEADING', 'USE_HASH', 'USE_MERGE', 'NOPARALLEL', 'PARALLEL_INDEX',
                                          'PARALLEL', 'PQ_DISTRIBUTE', 'NOPARALLEL_INDEX', 'STAR_TRANSFORMATION', 'USE_NL_WITH_INDEX',
                                          'NO_EXPAND', 'FACT', 'NOFACT', 'MERGE', 'NO_MERGE', 'REWRITE', 'NOREWRITE', 'USE_CONCAT',
                                          'APPEND', 'NOAPPEND', 'CACHE', 'NOCACHE', 'PUSH_PRED', 'AND_EQUAL', 'PUSH_SUBQ', 'NO_PUSH_SUBQ',
                                          'BYPASS_RECURSIVE_CHECK', 'BYPASS_UJVC', 'CACHE_CB', 'CACHE_TEMP_TABLE', 'CIV_GB',
                                          'COLLECTIONS_GET_REFS', 'CUBE_GB', 'CURSOR_SHARING_EXACT', 'DEREF_NO_REWRITE', 'DML_UPDATE',
                                          'DOMAIN_INDEX_NO_SORT', 'DOMAIN_INDEX_SORT', 'DYNAMIC_SAMPLING', 'DYNAMIC_SAMPLING_EST_CDN',
                                          'EXPAND_GSET_TO_UNION', 'FORCE_SAMPLE_BLOCK', 'GBY_CONC_ROLLUP', 'GLOBAL_TABLE_HINTS',
                                          'HWM_BROKERED', 'IGNORE_ON_CLAUSE', 'IGNORE_WHERE_CLAUSE', 'INDEX_RRS', 'INDEX_SS', 'UNNEST',
                                          'INDEX_SS_ASC', 'INDEX_SS_DESC', 'LIKE_EXPAND', 'LOCAL_INDEXES', 'MV_MERGE', 'NO_FILTERING',
                                          'NESTED_TABLE_GET_REFS', 'NESTED_TABLE_SET_REFS', 'NESTED_TABLE_SET_SETID', 'REMOTE_MAPPED',
                                          'NO_EXPAND_GSET_TO_UNION', 'NO_FACT', 'NO_ORDER_ROLLUPS', 'NO_PRUNE_GSETS', 'NO_STATS_GSETS',
                                          'NO_UNNEST', 'NOCPU_COSTING OVERFLOW_NOMOVE', 'PIV_GB', 'PIV_SSF', 'PQ_MAP', 'SCN_ASCENDING',
                                          'RESTORE_AS_INTERVALS', 'SAVE_AS_INTERVALS', 'SKIP_EXT_OPTIMIZER', 'PQ_NOMAP', 'TIV_SSF',
                                          'USE_TTT_FOR_GSETS', 'SQLLDR', 'SYS_DL_CURSOR', 'SYS_PARALLEL_TXN', 'SYS_RID_ORDER', 'PQ_SKEW',
                                          'HASH_AJ', 'INDEX_JOIN', 'NO_INDEX_FFS', 'NO_INDEX_SS', 'NO_QUERY_TRANSFORMATION', 'BITMAP',
                                          'NO_STAR_TRANSFORMATION', 'NO_USE_NL', 'NO_USE_MERGE', 'NO_USE_HASH', 'NO_PARALLEL', 'NL_AJ',
                                          'NO_PARALLEL_INDEX', 'QB_NAME', 'SPREAD_MIN_ANALYSIS', 'MERGE_AJ', 'NO_REWRITE', 'NO_USE_BAND',
                                          'CLUSTERING', 'NO_CLUSTERING', 'NATIVE_FULL_OUTER_JOIN', 'NO_NATIVE_FULL_OUTER_JOIN', 'TIV_GB',
                                          'NO_ZONEMAP', 'USE_BAND', 'NO_INMEMORY_PRUNING', 'INMEMORY_PRUNING', 'NO_PQ_CONCURRENT_UNION',
                                          'ENABLE_PARALLEL_DML', 'DISABLE_PARALLEL_DML', 'PQ_CONCURRENT_UNION', 'USE_CUBE', 'INMEMORY',
                                          'CHANGE_DUPKEY_ERROR_INDEX', 'IGNORE_ROW_ON_DUPKEY_INDEX', 'RETRY_ON_ROW_CHANGE', 'PQ_FILTER',
                                          'GATHER_OPTIMIZER_STATISTICS', 'NO_GATHER_OPTIMIZER_STATISTICS', 'GROUPING', 'PX_JOIN_FILTER',
                                          'MODEL_MIN_ANALYSIS', 'NO_PX_JOIN_FILTER', 'NO_XMLINDEX_REWRITE', 'NO_XML_QUERY_REWRITE',
                                          'NO_PQ_SKEW', 'APPEND_VALUES', 'CONTAINERS', 'NOCACHE', 'FRESH_MV', 'MONITOR', 'NO_MONITOR',
                                          'OPT_PARAM', 'CACHE', 'NOCACHE', 'NO_USE_CUBE', 'NO_INMEMORY'];
BEGIN
    v_ambiguously_comm_pos := position('*/*' in v_sql_statement);

    IF v_ambiguously_comm_pos > 0 THEN
        RAISE escape_character_conflict;
    END IF;

    v_hints_list_regexp := array_to_string(v_hints_list, '|');

    IF p_skip_hints THEN
        v_dml_multi_regexp := format('(%s)\s*$', v_dml_keywords_regexp);
        v_hints_multi_regexp := format('^/\*\+\s*(%s)', v_hints_list_regexp);

        v_hints_single_regexp := format('(?<!(?:%s)\s*)--\+\s*(%s).*|(?<=(?:%s)\s*)--\+(?!\s*(?:%s)).*|(?<=(?:\s*))--(?!\+).*',
                                        v_dml_keywords_regexp,
                                        v_hints_list_regexp,
                                        v_dml_keywords_regexp,
                                        v_hints_list_regexp);
    ELSE
        v_hints_single_regexp := '\s*--.*';
    END IF;

    SELECT array_agg(DISTINCT adv_quote_tag)
      INTO v_adv_quote_tags
      FROM unnest(p_adv_quote_tags) tags (adv_quote_tag)
     WHERE adv_quote_tag IS NOT NULL;

    v_adv_quote_tag_cnt := coalesce(array_length(v_adv_quote_tags, 1), 0);

    IF v_adv_quote_tag_cnt > 0
    THEN
        FOREACH v_adv_tag IN ARRAY v_adv_quote_tags
        LOOP
            v_idx_offset := 0;
            v_adv_tag_idx := '{}'::INTEGER[];

            v_tag_len = char_length(v_adv_tag);
            v_tag_pos = position(v_adv_tag IN v_sql_statement);

            WHILE v_tag_pos > 0
            LOOP
                v_idx_offset := v_idx_offset + v_tag_pos;

                IF aws_oracle_ext.regexp_count(substring(v_sql_statement, v_idx_offset), '''') % 2 = 1
                THEN
                    v_idx_offset := v_idx_offset + v_tag_len;
                    v_tag_pos = position(v_adv_tag IN substring(v_sql_statement, v_idx_offset)) - 1;
                    CONTINUE;
                END IF;

                v_adv_tag_idx := array_append(v_adv_tag_idx, v_idx_offset);

                v_idx_offset := v_idx_offset + v_tag_len;
                v_tag_pos = position(v_adv_tag IN substring(v_sql_statement, v_idx_offset)) - 1;
            END LOOP;

            v_adv_quote_tag_idx := array_append(v_adv_quote_tag_idx, array_to_string(v_adv_tag_idx, ','));
            v_adv_tag_idx := '{}'::INTEGER[];
            v_adv_tag := NULL;
        END LOOP;

        FOR i_tag IN
        (WITH adv_quote_tags AS (
         SELECT tags,
                generate_subscripts(tags, 1) tag_num
           FROM (VALUES (v_adv_quote_tags)) adv_quote_tags (tags)
         ),
         adv_quote_tag_idx AS (
         SELECT tags[tag_num] tag,
                unnest(string_to_array((v_adv_quote_tag_idx)[tag_num], ','))::INTEGER tag_idx
           FROM adv_quote_tags
          ORDER BY tag_idx ASC)

         SELECT ROW_NUMBER() OVER (ORDER BY tag_idx) tag_num,
                tag_idx.*
           FROM adv_quote_tag_idx tag_idx)
        LOOP
            IF v_adv_tag IS NULL THEN
                v_adv_tag := i_tag.tag;
                v_literal_start_idx := array_append(v_literal_start_idx, i_tag.tag_idx);
                CONTINUE;
            END IF;

            CONTINUE WHEN i_tag.tag <> v_adv_tag;

            v_literal_end_idx := array_append(v_literal_end_idx,
                                              i_tag.tag_idx + char_length(v_adv_tag));
            v_adv_tag := NULL;
        END LOOP;

        v_idx_offset := 0;
    END IF;

    SELECT COUNT(1)
      INTO v_singlecomm_cnt
      FROM regexp_matches(v_sql_statement, '--', 'ngi');

    FOR i_comment_num IN 1..v_singlecomm_cnt
    LOOP
        v_comm_startpos := aws_oracle_ext.regexp_instr(v_sql_statement, '--', p_occurrence => i_comment_num);

        IF (aws_oracle_ext.regexp_count(v_sql_statement, '''', v_comm_startpos) % 2 = 1)
        THEN
            v_single_comm_idx := array_append(v_single_comm_idx, v_comm_startpos);
            CONTINUE;
        ELSIF v_adv_quote_tag_cnt > 0 THEN
            SELECT COUNT(1)
              INTO v_within_literal_res
              FROM unnest(v_literal_start_idx,
                          v_literal_end_idx) adv_tag_positions (tag_start, tag_end)
             WHERE v_comm_startpos BETWEEN tag_start + 1
                                       AND tag_end;

            IF coalesce(v_within_literal_res, 0) > 0 THEN
                v_single_comm_idx := array_append(v_single_comm_idx, v_comm_startpos);
                CONTINUE;
            END IF;
        END IF;

        v_reversed_sql := reverse(substring(v_sql_statement, 1, v_comm_startpos));

        IF (v_comm_startpos - CASE
                                 WHEN position('*/' in v_reversed_sql) = 0 THEN v_comm_startpos
                                 ELSE position('*/' in v_reversed_sql)
                              END > CASE
                                       WHEN position('/*' in v_reversed_sql) = 0 THEN 0
                                       ELSE v_comm_startpos
                                    END - position('/*' in v_reversed_sql))
        THEN
            v_single_comm_idx := array_append(v_single_comm_idx, v_comm_startpos);
        END IF;
    END LOOP;

    FOR i_comment_num IN 1..coalesce(array_length(v_single_comm_idx, 1), 0)
    LOOP
        v_sql_statement := overlay(v_sql_statement placing '<_($-$$-$)_>'
                                                      from (v_single_comm_idx[i_comment_num] + (i_comment_num - 1) * 10)
                                                       for 2);
    END LOOP;

    v_sql_statement := regexp_replace(v_sql_statement, v_hints_single_regexp, '', 'ngi');

    v_sql_statement := replace(v_sql_statement, '<_($-$$-$)_>', '--');

    SELECT COUNT(1)
      INTO v_left_multicomm_cnt
      FROM regexp_matches(v_sql_statement, '/\*', 'ngi');

    FOR i_comment_num IN 1..v_left_multicomm_cnt
    LOOP
        v_within_literal_res := 0;
        v_comm_startpos := aws_oracle_ext.regexp_instr(v_sql_statement, '/\*', p_occurrence => i_comment_num);

        IF v_adv_quote_tag_cnt > 0
        THEN
            SELECT COUNT(1)
              INTO v_within_literal_res
              FROM unnest(v_literal_start_idx,
                          v_literal_end_idx) adv_tag_positions (tag_start, tag_end)
             WHERE v_comm_startpos BETWEEN tag_start + 1
                                       AND tag_end;

            v_within_literal_res := coalesce(v_within_literal_res, 0);
        END IF;

        IF (aws_oracle_ext.regexp_count(v_sql_statement, '''', v_comm_startpos) % 2 = 0 AND v_within_literal_res = 0)
        THEN
            v_left_multicomm_idx := array_append(v_left_multicomm_idx, v_comm_startpos);
        END IF;
    END LOOP;

    SELECT COUNT(1)
      INTO v_right_multicomm_cnt
      FROM regexp_matches(v_sql_statement, '\*/', 'ngi');

    FOR i_comment_num IN 1..v_right_multicomm_cnt
    LOOP
        v_within_literal_res := 0;
        v_comm_endpos := aws_oracle_ext.regexp_instr(v_sql_statement, '\*/', p_occurrence => i_comment_num);

        IF v_adv_quote_tag_cnt > 0
        THEN
            SELECT COUNT(1)
              INTO v_within_literal_res
              FROM unnest(v_literal_start_idx,
                          v_literal_end_idx) adv_tag_positions (tag_start, tag_end)
             WHERE v_comm_endpos BETWEEN tag_start + 1
                                     AND tag_end;

            v_within_literal_res := coalesce(v_within_literal_res, 0);
        END IF;

        IF (aws_oracle_ext.regexp_count(v_sql_statement, '''', v_comm_endpos) % 2 = 0 AND v_within_literal_res = 0)
        THEN
            v_right_multicomm_idx := array_append(v_right_multicomm_idx, v_comm_endpos);
        END IF;
    END LOOP;

    FOR i_multi_comment IN
    (WITH src_data AS (
     SELECT left_part,
            right_part,
            coalesce(LAG(right_part, 1) OVER (ORDER BY right_part), 0) prev_right
       FROM unnest(v_left_multicomm_idx,
                   v_right_multicomm_idx) AS src (left_part, right_part)
     ),
     pair_set AS (
     SELECT (SELECT MIN(left_part)
               FROM src_data src2
              WHERE src2.left_part < src1.right_part
                AND src2.left_part > src1.prev_right
            ) left_part,
            src1.right_part
       FROM src_data src1
     UNION ALL
     SELECT left_part,
            NULL
       FROM src_data
      WHERE left_part > (SELECT MAX(right_part)
                           FROM src_data))
     SELECT *
       FROM pair_set
      WHERE NOT (left_part IS NULL AND
                 right_part IS NULL))
    LOOP
        v_comm_startpos := i_multi_comment.left_part;
        v_comm_endpos := i_multi_comment.right_part + 2;

        IF (coalesce(v_comm_startpos, v_comm_endpos) = v_comm_endpos OR
            coalesce(v_comm_endpos, v_comm_startpos) = v_comm_startpos)
        THEN
            IF p_validate_multiline THEN
                RAISE invalid_xml_comment;
            ELSE CONTINUE;
            END IF;
        ELSIF p_skip_hints THEN
            IF (substring(v_sql_statement, 1, v_comm_startpos - v_idx_offset - 1) ~* v_dml_multi_regexp AND
                substring(v_sql_statement, v_comm_startpos - v_idx_offset) ~* v_hints_multi_regexp)
            THEN
                CONTINUE;
            END IF;
        END IF;

        v_comm_length := v_comm_endpos - v_comm_startpos;
        v_comm_startpos := v_comm_startpos - v_idx_offset;
        v_idx_offset := v_idx_offset + v_comm_length - 1;

        v_sql_statement := overlay(v_sql_statement placing ' ' from v_comm_startpos
                                                       for v_comm_length);
    END LOOP;

    RETURN regexp_replace(v_sql_statement, '^\s*(?=\S*)|(?<=\S*)\s*$', '', 'gi');
EXCEPTION
    WHEN escape_character_conflict THEN
        RAISE USING MESSAGE := 'SQL statement contains ambiguously defined multi-line comment.',
                    DETAIL := format('Supplied SQL statement contains ambiguously defined (*/*) multi-line comment at position %s.', v_ambiguously_comm_pos),
                    HINT := 'Correct the SQL statement so that any multi-line comment opening\closing tag be explicitly defined.';
    WHEN invalid_xml_comment THEN
        RAISE USING MESSAGE := 'SQL statement contains unpaired multi-line comment.',
                    DETAIL := 'Supplied SQL statement contains unpaired multi-line comment. Oracle error ''ORA-01742: comment not terminated properly''.',
                    HINT := 'Correct the SQL statement so that any multi-line comment has its own opening\closing tag.';
END;
]]></complex-attribute>
                        <category _I_D="16723d01-dfed-41c4-88d1-94534706b1b6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="20ca3463-fa02-454f-aa76-c375e9de7588" name="substr" subcategories-loading="none" object-loading="extended" context="substr(text, numeric)" is-trigger-function="0" unique-function-name="substr(text, numeric)" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric" is-returning-set="f" ret-datatype="text" function-arguments="text, numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365271" volatility="IMMUTABLE" is-window="f" function-identity-arguments="text, numeric" overload-function-count="2" proc-language="sql" function-signature="substr(text, numeric)" unique-suffix="(text, numeric)" routine-number="365271" comment="Implements Oracle SUBSTR(). Original PostgreSQL SUBSTR() uses different logic with negative arguments and rejects numeric argoments for position">
                        <complex-attribute name="sql"><![CDATA[
    
    SELECT
        CASE
            WHEN ABS(TRUNC($2)::INTEGER) > LENGTH($1) THEN
                
                NULL::TEXT

            WHEN TRUNC($2)::INTEGER >= 0 THEN

                SUBSTR($1, CASE WHEN TRUNC($2)::INTEGER = 0 THEN 1 ELSE TRUNC($2)::INTEGER END)

            ELSE
                
                SUBSTR($1, LENGTH($1) + TRUNC($2)::INTEGER + 1)
        END;

]]></complex-attribute>
                        <category _I_D="7cdd4e7f-c0be-45de-9aef-542849fcafa5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d5a7359c-29ba-4adf-84d2-a27b9e4f1723" name="substr" subcategories-loading="none" object-loading="extended" context="substr(text, numeric, numeric)" is-trigger-function="0" unique-function-name="substr(text, numeric, numeric)" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric,numeric" is-returning-set="f" ret-datatype="text" function-arguments="text, numeric, numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365272" volatility="IMMUTABLE" is-window="f" function-identity-arguments="text, numeric, numeric" overload-function-count="2" proc-language="sql" function-signature="substr(text, numeric, numeric)" unique-suffix="(text, numeric, numeric)" routine-number="365272" comment="Implements Oracle SUBSTR(). Original PostgreSQL SUBSTR() uses different logic with negative arguments and rejects numeric argoments for position and length">
                        <complex-attribute name="sql"><![CDATA[
    
    SELECT
        CASE
            WHEN TRUNC($3)::INTEGER <= 0 THEN

                NULL::TEXT

            WHEN ABS(TRUNC($2)::INTEGER) > LENGTH($1) THEN
                
                NULL::TEXT

            WHEN TRUNC($2)::INTEGER >= 0 THEN

                SUBSTR($1, CASE WHEN TRUNC($2)::INTEGER = 0 THEN 1 ELSE TRUNC($2)::INTEGER END, TRUNC($3)::INTEGER)

            ELSE
                
                SUBSTR($1, LENGTH($1) + TRUNC($2)::INTEGER + 1, TRUNC($3)::INTEGER)
        END;

]]></complex-attribute>
                        <category _I_D="8fce139d-c0f0-42bd-b9de-0de3bc819bdd" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e6b5635a-818b-41bb-bdc4-22947cf11406" name="substrb" subcategories-loading="none" object-loading="extended" context="substrb(text, numeric)" is-trigger-function="0" unique-function-name="substrb(text, numeric)" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric" is-returning-set="f" ret-datatype="text" function-arguments="text, numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365274" volatility="IMMUTABLE" is-window="f" function-identity-arguments="text, numeric" overload-function-count="2" proc-language="sql" function-signature="substrb(text, numeric)" unique-suffix="(text, numeric)" routine-number="365274" comment="Implements Oracle SUBSTRB(). Original PostgreSQL SUBSTRB() uses different logic with negative arguments and rejects numeric argoments for position">
                        <complex-attribute name="sql"><![CDATA[
    
    SELECT
        CASE
            WHEN ABS(TRUNC($2)::INTEGER) > OCTET_LENGTH($1) THEN
                
                NULL::TEXT

            WHEN TRUNC($2)::INTEGER >= 0 THEN

                CONVERT_FROM(SUBSTR($1::BYTEA, CASE WHEN TRUNC($2)::INTEGER = 0 THEN 1 ELSE TRUNC($2)::INTEGER END),'UTF8')

            ELSE
                
                CONVERT_FROM(SUBSTR($1::BYTEA, OCTET_LENGTH($1) + TRUNC($2)::INTEGER + 1),'UTF8')
        END;

]]></complex-attribute>
                        <category _I_D="656901b1-53cb-46cb-98ed-f23937f48523" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e413e7c1-5dac-4473-8930-73412e3ecf87" name="substrb" subcategories-loading="none" object-loading="extended" context="substrb(text, numeric, numeric)" is-trigger-function="0" unique-function-name="substrb(text, numeric, numeric)" is-aggregate="f" language-name="sql" arguments-datatypes="text,numeric,numeric" is-returning-set="f" ret-datatype="text" function-arguments="text, numeric, numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365275" volatility="IMMUTABLE" is-window="f" function-identity-arguments="text, numeric, numeric" overload-function-count="2" proc-language="sql" function-signature="substrb(text, numeric, numeric)" unique-suffix="(text, numeric, numeric)" routine-number="365275" comment="Implements Oracle SUBSTRB(). Original PostgreSQL SUBSTRB() uses different logic with negative arguments and rejects numeric argoments for position and length">
                        <complex-attribute name="sql"><![CDATA[
    
    SELECT
        CASE
            WHEN TRUNC($3)::INTEGER <= 0 THEN

                NULL::TEXT

            WHEN ABS(TRUNC($2)::INTEGER) > OCTET_LENGTH($1) THEN
                
                NULL::TEXT

            WHEN TRUNC($2)::INTEGER >= 0 THEN
                
                CONVERT_FROM(SUBSTR($1::BYTEA, CASE WHEN TRUNC($2)::INTEGER = 0 THEN 1 ELSE TRUNC($2)::INTEGER END, TRUNC($3)::INTEGER),'UTF8')

            ELSE
                
                CONVERT_FROM(SUBSTR($1::BYTEA, OCTET_LENGTH($1) + TRUNC($2)::INTEGER + 1, TRUNC($3)::INTEGER),'UTF8')
        END;

]]></complex-attribute>
                        <category _I_D="862e10f6-03b8-4b64-923a-0fc1754fd304" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="71f3d3d6-fc54-4c2d-a2a5-b00a150bc04d" name="sys_anydata$accessbdouble" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessbdouble" is-trigger-function="0" unique-function-name="sys_anydata$accessbdouble" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="float8" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365960" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessbdouble(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.BINARY_DOUBLE')
   AND ($1 ->> 'SYS.BINARY_DOUBLE' <> '') 
  THEN
	 ($1->> 'SYS.BINARY_DOUBLE')::DOUBLE PRECISION
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="144745ca-4e46-42b8-8bd4-84159ab99353" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b71db0aa-7e8a-4514-af34-add015e05ed2" name="sys_anydata$accessbfile" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessbfile" is-trigger-function="0" unique-function-name="sys_anydata$accessbfile" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="varchar" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365961" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessbfile(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.BFILE' THEN
     ($1->> 'SYS.BFILE')::CHARACTER VARYING
  ELSE
    NULL
  END;
]]></complex-attribute>
                        <category _I_D="0a84097e-8a90-4e38-8c8e-f087d4838f0e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7c1945b0-0bf3-42d0-8b8f-6152d2976f38" name="sys_anydata$accessbfloat" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessbfloat" is-trigger-function="0" unique-function-name="sys_anydata$accessbfloat" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="float4" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365962" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessbfloat(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.BINARY_FLOAT')
   AND ($1 ->> 'SYS.BINARY_FLOAT' <> '') 
  THEN
	 ($1->> 'SYS.BINARY_FLOAT')::REAL
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="807ee267-7d65-4626-b463-e296b3ccd00d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="27b89af3-4a3f-4938-80f1-1c9b4230472f" name="sys_anydata$accessblob" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessblob" is-trigger-function="0" unique-function-name="sys_anydata$accessblob" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="bytea" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365963" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessblob(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.BLOB')
   AND ($1 ->> 'SYS.BLOB' <> '') 
  THEN
	 ($1->> 'SYS.BLOB')::BYTEA
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="b6260d3c-728c-4685-b0e4-f9af28b27066" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ec2204f5-90ba-4c9d-9214-72d163275230" name="sys_anydata$accesschar" subcategories-loading="none" object-loading="extended" context="sys_anydata$accesschar" is-trigger-function="0" unique-function-name="sys_anydata$accesschar" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="bpchar" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365964" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accesschar(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.CHAR')
   AND ($1 ->> 'SYS.CHAR' <> '') 
  THEN
	 ($1->> 'SYS.CHAR')::CHARACTER
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="ca9b7795-c345-4c5a-8f8a-0fefc7fb8b3e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fb97b496-0643-40c1-b03b-2df68618170e" name="sys_anydata$accessclob" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessclob" is-trigger-function="0" unique-function-name="sys_anydata$accessclob" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="text" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365965" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessclob(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.CLOB' 
    AND ($1 ->> 'SYS.CLOB' <> '')
  THEN
     ($1->> 'SYS.CLOB')
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="c6649608-46cd-44c5-ac06-e2a639517b8e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f2641517-d113-4f3f-b4a4-6eb9586a2bef" name="sys_anydata$accessdate" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessdate" is-trigger-function="0" unique-function-name="sys_anydata$accessdate" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="timestamp" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365966" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessdate(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.DATE' AND ($1 ->> 'SYS.DATE' <> '') 
  THEN
     ($1 ->> 'SYS.DATE')::TIMESTAMP(0) WITHOUT TIME ZONE    
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="cb362794-2366-4af5-86c4-9634c2d17c19" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e5ace37d-a2d0-4b48-8f40-b1d5105ce142" name="sys_anydata$accessintervalds" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessintervalds" is-trigger-function="0" unique-function-name="sys_anydata$accessintervalds" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="interval" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365967" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessintervalds(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.INTERVAL_DAY_SECOND')
   AND ($1 ->> 'SYS.INTERVAL_DAY_SECOND' <> '') 
  THEN
	 ($1->> 'SYS.INTERVAL_DAY_SECOND')::INTERVAL DAY TO SECOND
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="909c46c5-ec3c-4aa7-8836-727910e60f76" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="bc586b7b-3236-4d41-9c71-9c6a4a914d45" name="sys_anydata$accessintervalym" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessintervalym" is-trigger-function="0" unique-function-name="sys_anydata$accessintervalym" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="interval" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365968" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessintervalym(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.INTERVAL_YEAR_MONTH')
   AND ($1 ->> 'SYS.INTERVAL_YEAR_MONTH' <> '') 
  THEN
	 ($1->> 'SYS.INTERVAL_YEAR_MONTH')::INTERVAL YEAR TO MONTH
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="696f1133-d1a4-4873-a39c-106a4dc4897c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cfcea580-ebb2-43fe-bedf-125ef34a1c2b" name="sys_anydata$accessnchar" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessnchar" is-trigger-function="0" unique-function-name="sys_anydata$accessnchar" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="bpchar" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365969" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessnchar(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.NCHAR')
   AND ($1 ->> 'SYS.NCHAR' <> '') 
  THEN
	 ($1->> 'SYS.NCHAR')
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="2a553fc9-3cb7-4373-a444-1d3cb20932de" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cb57d892-2124-4120-a7f9-642ea7f9b806" name="sys_anydata$accessnclob" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessnclob" is-trigger-function="0" unique-function-name="sys_anydata$accessnclob" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="text" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365970" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessnclob(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.NCLOB')
   AND ($1 ->> 'SYS.NCLOB' <> '') 
  THEN
	 ($1->> 'SYS.NCLOB')
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="b114ed00-16e1-4c3b-9698-ef0918e40c57" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="40a7043e-b787-4a17-a06f-12982a8e424b" name="sys_anydata$accessnumber" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessnumber" is-trigger-function="0" unique-function-name="sys_anydata$accessnumber" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="numeric" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365971" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessnumber(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.NUMBER')
   AND ($1 ->> 'SYS.NUMBER' <> '') 
  THEN
	 ($1->> 'SYS.NUMBER')::NUMERIC
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="00d7e436-385b-454a-b76e-ee04cfd8bcd1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="78bc6f4d-c9b2-4ff4-9ddd-8836d731b8e7" name="sys_anydata$accessnvarchar2" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessnvarchar2" is-trigger-function="0" unique-function-name="sys_anydata$accessnvarchar2" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="text" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365972" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessnvarchar2(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.NVARCHAR2')
   AND ($1 ->> 'SYS.NVARCHAR2' <> '') 
  THEN
	 ($1->> 'SYS.NVARCHAR2')
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="0d5124a6-dd51-491c-946b-405e06dab7d4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="eca9ec6d-0667-4c1b-9dbd-4d3706381c8b" name="sys_anydata$accessraw" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessraw" is-trigger-function="0" unique-function-name="sys_anydata$accessraw" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="bytea" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365973" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessraw(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.RAW')
   AND ($1 ->> 'SYS.RAW' <> '') 
  THEN
	 ($1->> 'SYS.RAW')::BYTEA
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="a4979916-d72b-413c-8008-33d46f91d1c2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c50bc1f0-7b07-406a-816c-565e325fec16" name="sys_anydata$accesstimestamp" subcategories-loading="none" object-loading="extended" context="sys_anydata$accesstimestamp" is-trigger-function="0" unique-function-name="sys_anydata$accesstimestamp" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="timestamp" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365974" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accesstimestamp(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.TIMESTAMP' AND ($1 ->> 'SYS.TIMESTAMP' <> '') THEN
     ($1 ->> 'SYS.TIMESTAMP')::TIMESTAMP WITHOUT TIME ZONE    
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="00e397b8-eda6-4f59-8fb5-520df798d495" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="87d07a29-fb82-4f9e-850a-2f71889054c3" name="sys_anydata$accesstimestampltz" subcategories-loading="none" object-loading="extended" context="sys_anydata$accesstimestampltz" is-trigger-function="0" unique-function-name="sys_anydata$accesstimestampltz" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="timestamp" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365975" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accesstimestampltz(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.TIMESTAMP_WITH_LTZ' AND ($1 ->> 'SYS.TIMESTAMP_WITH_LTZ' <> '') THEN
     ($1 ->> 'SYS.TIMESTAMP_WITH_LTZ')::TIMESTAMP WITHOUT TIME ZONE
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="35825019-b809-43b3-8639-27878a097269" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a1f7ff96-7f58-4f95-92aa-2c95ef7a47b5" name="sys_anydata$accesstimestamptz" subcategories-loading="none" object-loading="extended" context="sys_anydata$accesstimestamptz" is-trigger-function="0" unique-function-name="sys_anydata$accesstimestamptz" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="timestamptz" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365976" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accesstimestamptz(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.TIMESTAMP_WITH_TIMEZONE' AND ($1 ->> 'SYS.TIMESTAMP_WITH_TIMEZONE' <> '') THEN
     ($1 ->> 'SYS.TIMESTAMP_WITH_TIMEZONE')::TIMESTAMP WITH TIME ZONE
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="bccc2f34-a597-4ae9-b96c-521a72851452" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5551e497-8d4d-474e-9840-7dfbfe5d1a9c" name="sys_anydata$accessurowid" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessurowid" is-trigger-function="0" unique-function-name="sys_anydata$accessurowid" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="text" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365977" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessurowid(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.UROWID') AND ($1 ->> 'SYS.UROWID' <> '') 
  THEN
	 ($1->> 'SYS.UROWID')
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="1afe2e79-c6e1-4108-ad36-899191bfe0c8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="18840033-9663-4caa-aca0-e3a92fe88f1e" name="sys_anydata$accessvarchar" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessvarchar" is-trigger-function="0" unique-function-name="sys_anydata$accessvarchar" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="text" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365979" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessvarchar(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.VARCHAR')
   AND ($1 ->> 'SYS.VARCHAR' <> '') 
  THEN
	 ($1->> 'SYS.VARCHAR')
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="a2aaa569-ffc0-4630-b9ad-f1de0cdd82a9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="872aa2d4-a81d-4524-a76f-88fa16169ff8" name="sys_anydata$accessvarchar2" subcategories-loading="none" object-loading="extended" context="sys_anydata$accessvarchar2" is-trigger-function="0" unique-function-name="sys_anydata$accessvarchar2" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="text" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365978" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$accessvarchar2(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
SELECT
  CASE WHEN (aws_oracle_ext.sys_anydata$gettypename($1) = 'SYS.VARCHAR2')
   AND ($1 ->> 'SYS.VARCHAR2' <> '') 
  THEN
	 ($1->> 'SYS.VARCHAR2')
  ELSE
     NULL
  END;
]]></complex-attribute>
                        <category _I_D="3d136296-94d3-4217-a783-7df50d3eae10" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1a6925ed-96ed-4b0c-9e61-3b88c5e79262" name="sys_anydata$convertbdouble" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertbdouble" is-trigger-function="0" unique-function-name="sys_anydata$convertbdouble" is-aggregate="f" language-name="sql" arguments-datatypes="double precision" is-returning-set="f" ret-datatype="jsonb" function-arguments="value double precision" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365980" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value double precision" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertbdouble(value double precision)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.BINARY_DOUBLE', $1);
]]></complex-attribute>
                        <category _I_D="58b25b3d-54a7-4dcd-9c1a-cc81269d09bc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5af7dd2b-1e17-47c7-9bec-d66e3159212c" name="sys_anydata$convertbfile" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertbfile" is-trigger-function="0" unique-function-name="sys_anydata$convertbfile" is-aggregate="f" language-name="sql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="jsonb" function-arguments="value character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365981" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value character varying" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertbfile(value character varying)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.BFILE', $1);    
]]></complex-attribute>
                        <category _I_D="0bbf4329-d8bc-47e1-bbc8-44a1926c525d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9c3c059b-2aeb-4c5e-8891-60bd5bcb6de1" name="sys_anydata$convertbfloat" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertbfloat" is-trigger-function="0" unique-function-name="sys_anydata$convertbfloat" is-aggregate="f" language-name="sql" arguments-datatypes="real" is-returning-set="f" ret-datatype="jsonb" function-arguments="value real" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365982" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value real" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertbfloat(value real)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.BINARY_FLOAT', $1);    
]]></complex-attribute>
                        <category _I_D="195f8fff-4aa6-4875-8b1e-d4b907246c96" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="76c9e5ea-b879-456a-b9c2-b453ea164d57" name="sys_anydata$convertblob" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertblob" is-trigger-function="0" unique-function-name="sys_anydata$convertblob" is-aggregate="f" language-name="sql" arguments-datatypes="bytea" is-returning-set="f" ret-datatype="jsonb" function-arguments="value bytea" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365983" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value bytea" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertblob(value bytea)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.BLOB', $1);    
]]></complex-attribute>
                        <category _I_D="92973927-e87c-49d3-aa37-f39ea2147334" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ad95310b-9a8f-40de-8acc-61dd903e9ddf" name="sys_anydata$convertchar" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertchar" is-trigger-function="0" unique-function-name="sys_anydata$convertchar" is-aggregate="f" language-name="sql" arguments-datatypes="character" is-returning-set="f" ret-datatype="jsonb" function-arguments="value character" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365984" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value character" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertchar(value character)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.CHAR', $1);     
]]></complex-attribute>
                        <category _I_D="cb7184e4-9dc9-4b7b-b9aa-ea2899ca46a2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2e54aa03-5e9e-4e2d-b93d-887bddc68c23" name="sys_anydata$convertclob" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertclob" is-trigger-function="0" unique-function-name="sys_anydata$convertclob" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="jsonb" function-arguments="value text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365994" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value text" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertclob(value text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.CLOB', $1);     
]]></complex-attribute>
                        <category _I_D="376c4a06-a1fd-4b7e-90c0-9c2c67de60f9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="5c1f0c61-10d9-4e5e-9c9a-def38bd34713" name="sys_anydata$convertdate" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertdate" is-trigger-function="0" unique-function-name="sys_anydata$convertdate" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone" is-returning-set="f" ret-datatype="jsonb" function-arguments="value timestamp without time zone" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365995" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value timestamp without time zone" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertdate(value timestamp without time zone)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.DATE', $1);  
]]></complex-attribute>
                        <category _I_D="e2e66592-6557-4dba-995b-c57aca868b59" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cc9227c8-e02b-4043-a54e-91853a3fbf9c" name="sys_anydata$convertintervalds" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertintervalds" is-trigger-function="0" unique-function-name="sys_anydata$convertintervalds" is-aggregate="f" language-name="sql" arguments-datatypes="interval" is-returning-set="f" ret-datatype="jsonb" function-arguments="value interval" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365985" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value interval" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertintervalds(value interval)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.INTERVAL_DAY_SECOND', $1);  
]]></complex-attribute>
                        <category _I_D="fb4c8c2b-83da-4987-a189-a05c2f7d5ee6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0f2a2fc9-ea15-4906-9eec-05c13e4bb45d" name="sys_anydata$convertintervalym" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertintervalym" is-trigger-function="0" unique-function-name="sys_anydata$convertintervalym" is-aggregate="f" language-name="sql" arguments-datatypes="interval" is-returning-set="f" ret-datatype="jsonb" function-arguments="value interval" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365986" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value interval" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertintervalym(value interval)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.INTERVAL_YEAR_MONTH', $1);  
]]></complex-attribute>
                        <category _I_D="84bd80c0-ddfc-45d5-a501-5551226a1c9e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e0f4a9f2-77ce-435f-88ef-fffeb9a50950" name="sys_anydata$convertnchar" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertnchar" is-trigger-function="0" unique-function-name="sys_anydata$convertnchar" is-aggregate="f" language-name="sql" arguments-datatypes="character" is-returning-set="f" ret-datatype="jsonb" function-arguments="value character" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365987" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value character" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertnchar(value character)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.NCHAR', $1);  
]]></complex-attribute>
                        <category _I_D="92a7394a-4b6c-4288-946a-1503d05f2178" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8a8c262f-a0e5-4600-9ad7-2bdfcce7fa56" name="sys_anydata$convertnclob" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertnclob" is-trigger-function="0" unique-function-name="sys_anydata$convertnclob" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="jsonb" function-arguments="value text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365988" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value text" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertnclob(value text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.NCLOB', $1);  
]]></complex-attribute>
                        <category _I_D="36365ff2-d51a-4c1b-94b1-164cbd897dd4" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="498d0a0c-9290-4ea2-bbaa-fd2720f04b83" name="sys_anydata$convertnumber" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertnumber" is-trigger-function="0" unique-function-name="sys_anydata$convertnumber" is-aggregate="f" language-name="sql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="jsonb" function-arguments="value numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365996" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value numeric" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertnumber(value numeric)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.NUMBER', $1);  
]]></complex-attribute>
                        <category _I_D="b8a31252-d3ae-4203-9bc1-f189fc31ae9b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="18f9c6e5-1408-46dd-a78a-7ec500ba68b9" name="sys_anydata$convertnvarchar2" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertnvarchar2" is-trigger-function="0" unique-function-name="sys_anydata$convertnvarchar2" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="jsonb" function-arguments="value text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365989" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value text" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertnvarchar2(value text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.NVARCHAR2', $1);    
]]></complex-attribute>
                        <category _I_D="2d6fae65-a1fc-4dcc-b0b8-cd3f8140c74e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a6a13594-e3a0-45b3-81b7-ab5b6e3adec0" name="sys_anydata$convertraw" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertraw" is-trigger-function="0" unique-function-name="sys_anydata$convertraw" is-aggregate="f" language-name="sql" arguments-datatypes="bytea" is-returning-set="f" ret-datatype="jsonb" function-arguments="value bytea" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365990" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value bytea" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertraw(value bytea)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.RAW', $1);     
]]></complex-attribute>
                        <category _I_D="c0b69cf4-916c-4b07-88ca-3e427c6ad00f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a5d32133-276d-45fb-a187-0cbed94788cb" name="sys_anydata$converttimestamp" subcategories-loading="none" object-loading="extended" context="sys_anydata$converttimestamp" is-trigger-function="0" unique-function-name="sys_anydata$converttimestamp" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone" is-returning-set="f" ret-datatype="jsonb" function-arguments="value timestamp without time zone" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365997" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value timestamp without time zone" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$converttimestamp(value timestamp without time zone)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.TIMESTAMP', $1);     
]]></complex-attribute>
                        <category _I_D="17a6cc48-c271-4a96-a44b-fe2b105043b9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="01213a26-479d-4881-ae13-93e193a80d36" name="sys_anydata$converttimestampltz" subcategories-loading="none" object-loading="extended" context="sys_anydata$converttimestampltz" is-trigger-function="0" unique-function-name="sys_anydata$converttimestampltz" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone" is-returning-set="f" ret-datatype="jsonb" function-arguments="value timestamp without time zone" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365991" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value timestamp without time zone" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$converttimestampltz(value timestamp without time zone)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.TIMESTAMP_WITH_LTZ', $1);     
]]></complex-attribute>
                        <category _I_D="3918b99b-70a0-43e7-9f6c-8f5cdd75d73d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7debaf6f-ae60-4f26-8842-4ebf8b916d11" name="sys_anydata$converttimestamptz" subcategories-loading="none" object-loading="extended" context="sys_anydata$converttimestamptz" is-trigger-function="0" unique-function-name="sys_anydata$converttimestamptz" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp with time zone" is-returning-set="f" ret-datatype="jsonb" function-arguments="value timestamp with time zone" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365992" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value timestamp with time zone" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$converttimestamptz(value timestamp with time zone)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.TIMESTAMP_WITH_TIMEZONE', $1);        
]]></complex-attribute>
                        <category _I_D="ca793ff1-400e-4ad4-a97c-6c474a69d6db" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0bf81f6e-5e2e-48c3-b6a5-25516a3a30ab" name="sys_anydata$converturowid" subcategories-loading="none" object-loading="extended" context="sys_anydata$converturowid" is-trigger-function="0" unique-function-name="sys_anydata$converturowid" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="jsonb" function-arguments="value text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365993" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value text" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$converturowid(value text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.UROWID', $1); 
]]></complex-attribute>
                        <category _I_D="d957c9cb-7b97-45af-a4cb-b358e0b781b7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="163acb1b-3dfe-4e73-a436-8fead493bfc4" name="sys_anydata$convertvarchar" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertvarchar" is-trigger-function="0" unique-function-name="sys_anydata$convertvarchar" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="jsonb" function-arguments="value text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365998" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value text" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertvarchar(value text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.VARCHAR', $1); 
]]></complex-attribute>
                        <category _I_D="348328dc-6b41-4354-850a-08ed186a9abe" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="855d6364-5bcf-4e53-ad49-3ee20eceb4c7" name="sys_anydata$convertvarchar2" subcategories-loading="none" object-loading="extended" context="sys_anydata$convertvarchar2" is-trigger-function="0" unique-function-name="sys_anydata$convertvarchar2" is-aggregate="f" language-name="sql" arguments-datatypes="text" is-returning-set="f" ret-datatype="jsonb" function-arguments="value text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365999" volatility="IMMUTABLE" is-window="f" function-identity-arguments="value text" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$convertvarchar2(value text)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT JSONB_BUILD_OBJECT('SYS.VARCHAR2', $1);
]]></complex-attribute>
                        <category _I_D="253d5f07-f4d9-4bdd-8cc1-ee43607caa47" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ac8f734a-c02d-4169-a76a-dbccfae2c06d" name="sys_anydata$gettypename" subcategories-loading="none" object-loading="extended" context="sys_anydata$gettypename" is-trigger-function="0" unique-function-name="sys_anydata$gettypename" is-aggregate="f" language-name="sql" arguments-datatypes="jsonb" is-returning-set="f" ret-datatype="varchar" function-arguments="jsonb_value jsonb" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365959" volatility="IMMUTABLE" is-window="f" function-identity-arguments="jsonb_value jsonb" overload-function-count="1" proc-language="sql" function-signature="sys_anydata$gettypename(jsonb_value jsonb)">
                        <complex-attribute name="sql"><![CDATA[
  SELECT
  case
      WHEN jsonb_value ? 'SYS.NUMBER' then 'SYS.NUMBER'
      WHEN jsonb_value ? 'SYS.DATE' then 'SYS.DATE'
      WHEN jsonb_value ? 'SYS.CHAR' then 'SYS.CHAR'
      WHEN jsonb_value ? 'SYS.VARCHAR' then 'SYS.VARCHAR'
      WHEN jsonb_value ? 'SYS.VARCHAR2' then 'SYS.VARCHAR2'
      WHEN jsonb_value ? 'SYS.RAW' then 'SYS.RAW'
      WHEN jsonb_value ? 'SYS.CLOB' then 'SYS.CLOB'
      WHEN jsonb_value ? 'SYS.BLOB' then 'SYS.BLOB'
      WHEN jsonb_value ? 'SYS.BFILE' then 'SYS.BFILE'
      WHEN jsonb_value ? 'SYS.TIMESTAMP' then 'SYS.TIMESTAMP'
      WHEN jsonb_value ? 'SYS.TIMESTAMP_WITH_TIMEZONE' then 'SYS.TIMESTAMP_WITH_TIMEZONE'
      WHEN jsonb_value ? 'SYS.TIMESTAMP_WITH_LTZ' then 'SYS.TIMESTAMP_WITH_LTZ'
      WHEN jsonb_value ? 'SYS.INTERVAL_YEAR_MONTH' then 'SYS.INTERVAL_YEAR_MONTH'
      WHEN jsonb_value ? 'SYS.INTERVAL_DAY_SECOND' then 'SYS.INTERVAL_DAY_SECOND'
      WHEN jsonb_value ? 'SYS.NCHAR' then 'SYS.NCHAR'
      WHEN jsonb_value ? 'SYS.NVARCHAR2' then 'SYS.NVARCHAR2'
      WHEN jsonb_value ? 'SYS.NCLOB' then 'SYS.NCLOB'
      WHEN jsonb_value ? 'SYS.BINARY_FLOAT' then 'SYS.BINARY_FLOAT'
      WHEN jsonb_value ? 'SYS.BINARY_DOUBLE' then 'SYS.BINARY_DOUBLE'
      WHEN jsonb_value ? 'SYS.UROWID' then 'SYS.UROWID'
      ELSE NULL
  end;
]]></complex-attribute>
                        <category _I_D="371d3575-5d3b-4d5f-960e-4dc2fbb9011c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="52b78d98-d8c9-4d36-befe-cb943664adea" name="sys_context" subcategories-loading="none" object-loading="extended" context="sys_context" is-trigger-function="0" unique-function-name="sys_context" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="namespace character varying, attribute character varying, username character varying DEFAULT NULL::character varying, client_id character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365194" volatility="VOLATILE" is-window="f" function-identity-arguments="namespace character varying, attribute character varying, username character varying, client_id character varying" overload-function-count="1" proc-language="plpgsql" function-signature="sys_context(namespace character varying, attribute character varying, username character varying, client_id character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  v_res character varying;
  l_namespace text;
  l_attribute text;

begin
  
  l_namespace := aws_oracle_ext.format_identifier_case(namespace);
  l_attribute := aws_oracle_ext.format_identifier_case(attribute);
  
  case l_namespace
    when 'USERENV' then 
      v_res = aws_oracle_ext.SYS_CONTEXT_USERENV(l_attribute);
    when 'CLIENTCONTEXT'  then 
     v_res = aws_oracle_ext.get_extpack_variable(variable_name => l_namespace||'_'||l_attribute)::character varying; 
  else 
    v_res = aws_oracle_ext.get_application_context(l_namespace, l_attribute, username, client_id);
  end case;

  return v_res;
  
  exception 
    when internal_error then return null; 
end;
]]></complex-attribute>
                        <category _I_D="f94bf4a8-1299-4344-be18-33cb3402014c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8625aee1-036c-4721-868d-004acebde5dd" name="sys_context_userenv" subcategories-loading="none" object-loading="extended" context="sys_context_userenv" is-trigger-function="0" unique-function-name="sys_context_userenv" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="parameter character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365936" volatility="STABLE" is-window="f" function-identity-arguments="parameter character varying" overload-function-count="1" proc-language="plpgsql" function-signature="sys_context_userenv(parameter character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare l_context json;
begin 
  case upper(parameter)
    when 'ACTION' then return (select action_name from aws_oracle_ext.dbms_application_info$read_module());
    when 'AUDITED_CURSORID' then return null;
    when 'AUTHENTICATED_IDENTITY' then return null;
    when 'AUTHENTICATION_DATA' then return null;
    when 'AUTHENTICATION_METHOD' then return null;
	when 'AUTHENTICATION_TYPE' then return null;
    when 'BG_JOB_ID' then return null;
    when 'CLIENT_IDENTIFIER' then return aws_oracle_ext.get_extpack_variable(upper(parameter));     
    when 'CLIENT_INFO' then return (select client_info from aws_oracle_ext.dbms_application_info$read_client_info());
    when 'CURRENT_BIND' then return null;
    when 'CURRENT_SCHEMA' then return current_schema::character varying;
    when 'CURRENT_SCHEMAID' then return null;
    when 'CURRENT_SQL' then return (select query from pg_stat_activity where pid = pg_backend_pid())::character varying;
    when 'CURRENT_SQL_LENGTH' then return char_length((select query from pg_stat_activity where pid = pg_backend_pid()))::character varying;
	when 'CURRENT_USER' then return current_user::character varying;
	when 'CURRENT_USERID' then return (select usesysid from pg_catalog.pg_user where usename = current_user limit 1)::character varying;	
    when 'DB_DOMAIN' then return null;
    when 'DB_NAME' then return current_database()::character varying;    
    when 'DB_UNIQUE_NAME' then return current_database()::character varying;        
    when 'ENTRYID' then return null;            
    when 'ENTERPRISE_IDENTITY' then return null;            
    when 'FG_JOB_ID' then return null;            
    when 'GLOBAL_CONTEXT_MEMORY' then return '0'::character varying;                
    when 'GLOBAL_UID' then return '0'::character varying; 
    when 'HOST' then return (select client_hostname from pg_stat_activity where pid = pg_backend_pid())::character varying;
    when 'IDENTIFICATION_TYPE' then return null;            
    when 'INSTANCE' then return null;            
    when 'INSTANCE_NAME' then return inet_server_addr()::character varying;           
    when 'IP_ADDRESS' then return inet_client_addr()::character varying;  
    when 'ISDBA'  then return (select usesuper from pg_catalog.pg_user where usename = user limit 1)::character varying;
    when 'LANG' then return (select pg_encoding_to_char(encoding) from pg_database where datname = current_database())::character varying;
    when 'LANGUAGE' then return (select datctype from pg_database where datname = current_database())::character varying;    
    when 'MODULE' then return (select module_name from aws_oracle_ext.dbms_application_info$read_module());            
    when 'NETWORK_PROTOCOL' then return null;                
    when 'NLS_CALENDAR' then return aws_oracle_ext.get_extpack_variable(upper(parameter));     
    when 'NLS_CURRENCY' then return aws_oracle_ext.get_extpack_variable(upper(parameter));
    when 'NLS_DATE_FORMAT' then return aws_oracle_ext.get_extpack_variable(upper(parameter));     
    when 'NLS_DATE_LANGUAGE' then return aws_oracle_ext.get_extpack_variable(upper(parameter));     
    when 'NLS_SORT' then return aws_oracle_ext.get_extpack_variable(upper(parameter));     
    when 'NLS_TERRITORY' then return aws_oracle_ext.get_extpack_variable(upper(parameter));     
    when 'OS_USER' then return null;            
    when 'POLICY_INVOKER' then return null;                
    when 'PROXY_ENTERPRISE_IDENTITY' then return null;            
    when 'PROXY_GLOBAL_UID' then return null;                
    when 'PROXY_USER' then return null;            
    when 'PROXY_USERID' then return null;                
    when 'SERVER_HOST' then  return inet_server_addr()::character varying;           
    when 'SERVICE_NAME' then return null;                
    when 'SESSION_USER' then return SESSION_USER::character varying;            
    when 'SESSION_USERID' then return (select usesysid from pg_catalog.pg_user where usename = user limit 1)::character varying;
    when 'SESSIONID' then return pg_backend_pid()::character varying;
    when 'SID' then return null;                
    when 'STATEMENTID' then return null;                
    when 'TERMINAL' then return null;                
    else raise exception 'invalid parameter';  
  end case;
  
  exception
    when internal_error then
      return null;
end;
]]></complex-attribute>
                        <category _I_D="79c5023a-46f7-4c74-85a8-b84da6646bc6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cf28d434-83f9-4733-90be-3b49ab28069a" name="sys_guid" subcategories-loading="none" object-loading="extended" context="sys_guid" is-trigger-function="0" unique-function-name="sys_guid" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="text" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365196" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="sys_guid()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    IF (NOT aws_oracle_ext.is_package_initialized('SYS_GUID', 'INITIALIZE')) THEN
        CREATE EXTENSION IF NOT EXISTS pgcrypto SCHEMA public;

        PERFORM aws_oracle_ext.set_package_initialized('SYS_GUID', 'INITIALIZE');
    END IF;

    RETURN upper(replace(public.gen_random_uuid()::TEXT, '-', ''));
END;
]]></complex-attribute>
                        <category _I_D="9e628aeb-1ccd-4e85-9f40-fc0e198e6e8f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="717d823a-f919-4bdf-b416-ba9c5d7bb75f" name="sysdate" subcategories-loading="none" object-loading="extended" context="sysdate" is-trigger-function="0" unique-function-name="sysdate" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="timestamp" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365195" volatility="STABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="sysdate()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT
    (
        COALESCE
        (
            MAX(tz_offset),
            0
        )::TEXT,
        ' HOURS'
    )::INTERVAL + clock_timestamp()::TIMESTAMP(0) 
    FROM aws_oracle_data.aws_oracle_ext_session_local_tz;
    
]]></complex-attribute>
                        <category _I_D="a85048cb-2bd1-416a-bd53-b66bda7cc86a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4ea7eef9-c8ed-4968-aff0-71eff6077fa5" name="systimestamp" subcategories-loading="none" object-loading="extended" context="systimestamp" is-trigger-function="0" unique-function-name="systimestamp" is-aggregate="f" language-name="sql" is-returning-set="f" ret-datatype="timestamptz" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365197" volatility="STABLE" is-window="f" overload-function-count="1" proc-language="sql" function-signature="systimestamp()">
                        <complex-attribute name="sql"><![CDATA[

    SELECT CONCAT
    (
        COALESCE
        (
            MAX(tz_offset),
            0
        )::TEXT,
        ' HOURS'
    )::INTERVAL + clock_timestamp() 
    FROM aws_oracle_data.aws_oracle_ext_session_local_tz;
    
]]></complex-attribute>
                        <category _I_D="a9d4a316-1485-4cc8-b77a-4d95c7205d4e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="643f3ba6-78c7-4ba0-a406-e4fa5bc3b395" name="table" subcategories-loading="none" object-loading="extended" context="table" is-trigger-function="0" unique-function-name="table" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,character varying,character varying,bigint[]" is-returning-set="t" ret-datatype="record" function-arguments="pval anyelement, pvaltype character varying, ptypetocast character varying DEFAULT NULL::character varying, pindexes bigint[] DEFAULT NULL::bigint[]" schema-id="364663" function-type="RET_DATASET" count-arguments="4" function-id="365198" volatility="VOLATILE" is-window="f" function-identity-arguments="pval anyelement, pvaltype character varying, ptypetocast character varying, pindexes bigint[]" overload-function-count="1" proc-language="plpgsql" function-signature="table(pval anyelement, pvaltype character varying, ptypetocast character varying, pindexes bigint[])" comment="Function returns recordset from nested table variable as Oracle TABLE() does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vSQL TEXT;
    vStorageTableName VARCHAR;
BEGIN

    IF pIndexes IS NOT NULL AND COALESCE(array_length(pIndexes, 1), 0) < 1 THEN
        RAISE USING MESSAGE := 'Limits are incorrect!';
    END IF;

    CASE
        WHEN pValType = 'NESTED' THEN

            IF pIndexes IS NOT NULL THEN

                vSQL := CONCAT
                (
                    'SELECT UNNEST',
                    CHR(10),
                    '(',
                    CHR(10),
                    'ARRAY',
                    CHR(10),
                    '(',
                    CHR(10),
                    'SELECT CAST(ROW(src.v) AS ',
                    pTypeToCast,
                    ')',
                    CHR(10),
                    'FROM UNNEST($1) WITH ORDINALITY AS src(v, rownum)',
                    CHR(10),
                    'JOIN UNNEST($2) AS lim(v) ON src.rownum = lim.v',
                    CHR(10),
                    ')',
                    CHR(10),
                    ')'
                );

                RETURN QUERY EXECUTE vSQL USING pVal, pIndexes;
            
            ELSE

                vSQL := CONCAT('SELECT UNNEST(ARRAY(SELECT CAST(ROW(v) AS ', pTypeToCast, ') FROM UNNEST($1) WITH ORDINALITY AS v ))');
                RETURN QUERY EXECUTE vSQL USING pVal;

            END IF;
                        
        WHEN pValType = 'NESTEDREC' THEN
            
            IF pIndexes IS NOT NULL THEN

                vSQL := CONCAT
                (
                    'SELECT JSONB_POPULATE_RECORD(NULL::',
                    pTypeToCast,
                    ', ROW_TO_JSON(src)::JSONB - ''ordinality'') FROM UNNEST($1) WITH ORDINALITY AS src JOIN UNNEST($2) AS lim(v) ON src.ordinality = lim.v'
                );

                RETURN QUERY EXECUTE vSQL USING pVal, pIndexes;

            ELSE

                vSQL := CONCAT
                (
                    'SELECT JSONB_POPULATE_RECORD(NULL::',
                    pTypeToCast,
                    ', ROW_TO_JSON(src)::JSONB - ''ordinality'') FROM UNNEST($1) WITH ORDINALITY AS src'
                );

                RETURN QUERY EXECUTE vSQL USING pVal;

            END IF;

        WHEN pValType = 'ASSOC' THEN

            IF PG_TYPEOF(pVal)::TEXT <> 'jsonb' THEN

                RAISE USING MESSAGE := 'Associative array is incorrect. Please, specify procedure name and array path';

            END IF;

            vSQL := FORMAT
            (
                $$
SELECT JSONB_POPULATE_RECORD(null::%s, z.*)
FROM aws_oracle_ext.collection_to_table
(
    p_val => $1,
    pindexes => $2
) AS z
                $$,
                pTypeToCast
            );

            RETURN QUERY EXECUTE vSQL USING pVal, pindexes;

        ELSE
            NULL;
    END CASE;

END;
]]></complex-attribute>
                        <category _I_D="703d137e-7ef0-46a9-b232-c8142594a2f8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a070671b-e17e-494d-9436-e7d109ab1914" name="to_base" subcategories-loading="none" object-loading="extended" context="to_base" is-trigger-function="0" unique-function-name="to_base" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,numeric" is-returning-set="f" ret-datatype="text" function-arguments="p_dec numeric, p_base numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365295" volatility="VOLATILE" is-window="f" function-identity-arguments="p_dec numeric, p_base numeric" overload-function-count="1" proc-language="plpgsql" function-signature="to_base(p_dec numeric, p_base numeric)" comment="Convert decimal to any specified base">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  l_str CHARACTER VARYING(255) DEFAULT '';
  l_num NUMERIC(78,1) DEFAULT p_dec;
  l_hex CHARACTER VARYING(16) DEFAULT '0123456789abcdef';
BEGIN
  IF TRUNC (p_dec) <> p_dec OR p_dec < 0
  THEN
    RAISE plpgsql_error;
  END IF;

  LOOP
    l_str := SUBSTR(l_hex, (MOD(l_num, p_base) + 1)::int, 1) || l_str;
    l_num := TRUNC(l_num / p_base);
    EXIT WHEN l_num = 0;
  END LOOP;

  RETURN l_str;
END;
]]></complex-attribute>
                        <category _I_D="53ac663d-14f7-4919-b869-bd432dee7bb7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b1613435-a719-40c7-92d8-6828ed543f76" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval character varying)" is-trigger-function="0" unique-function-name="to_char(pval character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365219" volatility="VOLATILE" is-window="f" function-identity-arguments="pval character varying" overload-function-count="17" proc-language="plpgsql" function-signature="to_char(pval character varying)" unique-suffix="(pval character varying)" routine-number="365219" comment="to_char convertion VARCHAR2 as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL AND pVal <> '' THEN
    
        vResult := aws_oracle_ext.to_char_formatter
        (
            pVal => pVal
        );
    END IF;

    RETURN vResult;
    
END;
]]></complex-attribute>
                        <category _I_D="906183f9-5f7e-4248-8f9a-0d038b725d92" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="6b1e9314-e847-4a16-94dc-258f18a3d886" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval character)" is-trigger-function="0" unique-function-name="to_char(pval character)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character" is-returning-set="f" ret-datatype="varchar" function-arguments="pval character" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365199" volatility="VOLATILE" is-window="f" function-identity-arguments="pval character" overload-function-count="17" proc-language="plpgsql" function-signature="to_char(pval character)" unique-suffix="(pval character)" routine-number="365199" comment="to_char convertion CHAR as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult VARCHAR DEFAULT NULL;
    vargs TEXT;
BEGIN

    IF pVal IS NOT NULL AND pVal <> '' THEN
        

        vResult := aws_oracle_ext.to_char_formatter
        (
            pVal => pVal
        );

    END IF;

    RETURN vResult;
    
END;
]]></complex-attribute>
                        <category _I_D="f417b1ae-1b35-4d9c-a6b2-abd938ca0c47" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="21c44fae-d95c-4f7b-b589-cdd7906bf3cd" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval double precision)" is-trigger-function="0" unique-function-name="to_char(pval double precision)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision" is-returning-set="f" ret-datatype="varchar" function-arguments="pval double precision" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365200" volatility="VOLATILE" is-window="f" function-identity-arguments="pval double precision" overload-function-count="17" proc-language="plpgsql" function-signature="to_char(pval double precision)" unique-suffix="(pval double precision)" routine-number="365200" comment="to_char convertion Number as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt     VARCHAR;
    vResult  VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL THEN
        

        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => '', -- not used
            pNoNumberFormat => '' -- value is just a flag
        );

        vResult := vFmt;

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="cae0f272-d29d-4e4f-bcbf-75a6109fb8f9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d9abbdf0-e345-4273-a8f0-bee7c3e4fca4" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval double precision, pfmt character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_char(pval double precision, pfmt character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval double precision, pfmt character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365201" volatility="VOLATILE" is-window="f" function-identity-arguments="pval double precision, pfmt character varying, pnlsparam character varying" overload-function-count="17" proc-language="plpgsql" function-signature="to_char(pval double precision, pfmt character varying, pnlsparam character varying)" unique-suffix="(pval double precision, pfmt character varying, pnlsparam character varying)" routine-number="365201" comment="to_char convertion Number as Oracle does. Some Format models could return incorrect results. Only NLS_DATE_LANGUAGE is allowed for NLS param. Value must be correct as lc_time value">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt     VARCHAR;
    vResult  VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL THEN

        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => pFmt,
            pNlsParam => pNlsParam
        );

        vResult := vFmt;

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="d214124b-4384-46c0-ae4c-f5a1b2bc2481" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e90e312e-3290-45f7-961d-2950b9d29b4a" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval integer)" is-trigger-function="0" unique-function-name="to_char(pval integer)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer" is-returning-set="f" ret-datatype="varchar" function-arguments="pval integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365204" volatility="VOLATILE" is-window="f" function-identity-arguments="pval integer" overload-function-count="17" proc-language="plpgsql" function-signature="to_char(pval integer)" unique-suffix="(pval integer)" routine-number="365204" comment="to_char convertion Number as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt     VARCHAR;
    vResult  VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL THEN

        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => '', -- not used
            pNoNumberFormat => '' -- value is just a flag
        );

        vResult := vFmt;

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="413aaba5-ba7e-4a1d-bc04-1dcb95208ac0" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="be7bb80d-9383-416b-9fff-25a29d370c66" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval integer, pfmt character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_char(pval integer, pfmt character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="integer,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval integer, pfmt character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365205" volatility="VOLATILE" is-window="f" function-identity-arguments="pval integer, pfmt character varying, pnlsparam character varying" overload-function-count="17" proc-language="plpgsql" function-signature="to_char(pval integer, pfmt character varying, pnlsparam character varying)" unique-suffix="(pval integer, pfmt character varying, pnlsparam character varying)" routine-number="365205" comment="to_char convertion Number as Oracle does. Some Format models could return incorrect results. Only NLS_DATE_LANGUAGE is allowed for NLS param. Value must be correct as lc_time value">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt     VARCHAR;
    vResult  VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL THEN
        

        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => pFmt,
            pNlsParam => pNlsParam
        );

        vResult := vFmt;

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="a3e1e021-d5d6-4fa2-a289-fb7a15b45aa8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="560b330f-eddc-4613-8fd5-5a4819e1531f" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval interval)" is-trigger-function="0" unique-function-name="to_char(pval interval)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="interval" is-returning-set="f" ret-datatype="varchar" function-arguments="pval interval" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365206" volatility="VOLATILE" is-window="f" function-identity-arguments="pval interval" overload-function-count="17" proc-language="plpgsql" function-signature="to_char(pval interval)" unique-suffix="(pval interval)" routine-number="365206" comment="to_char convertion interval with TZ as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    RETURN aws_oracle_ext.to_char
    (
        pVal => pVal,
        pFmt => 'd' -- won't be used, just to pass something correct
    );
    
END;
]]></complex-attribute>
                        <category _I_D="0b4bc957-038e-461a-a78e-b14c64629978" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c73814e3-2455-4729-84ef-8f3b345a2746" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval interval, pfmt character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_char(pval interval, pfmt character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="interval,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval interval, pfmt character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365207" volatility="VOLATILE" is-window="f" function-identity-arguments="pval interval, pfmt character varying, pnlsparam character varying" overload-function-count="17" proc-language="plpgsql" function-signature="to_char(pval interval, pfmt character varying, pnlsparam character varying)" unique-suffix="(pval interval, pfmt character varying, pnlsparam character varying)" routine-number="365207" comment="to_char convertion interval with TZ as Oracle does. Some Format models could return incorrect results. Only NLS_DATE_LANGUAGE is allowed for NLS param. Value must be correct as lc_time value">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult VARCHAR DEFAULT NULL;
    vFmt VARCHAR;
BEGIN

    IF pVal IS NOT NULL THEN
        
        IF LENGTH(pFmt) <> 0 THEN

            vFmt := aws_oracle_ext.to_char_formatter
            (
                pVal      => pVal,
                pFormat   => pFmt,
                pNlsParam => pNlsParam
            );
            -- it is year to month 
            IF pVal::TEXT ~* 'YEAR' OR pVal::TEXT ~* 'MON' THEN

                vResult := CONCAT
                (
                    COALESCE(SUBSTRING(EXTRACT(year FROM pVal)::TEXT FROM '-'),'+'),
                    CASE
                        WHEN EXTRACT(year FROM pVal) < 2 THEN
                            LPAD(SUBSTRING(EXTRACT(year FROM pVal)::TEXT FROM '\d+'), 2, '0')
                        ELSE
                            SUBSTRING(EXTRACT(year FROM pVal)::TEXT FROM '\d+')
                    END,
                    '-',
                    LPAD(ABS(EXTRACT(month FROM pVal))::TEXT, 2, '0')
                );
            -- it is day to second
            ELSE

                vResult := CONCAT
                (
                    COALESCE(SUBSTRING(EXTRACT(day FROM pVal)::TEXT FROM '\-'),'+'),
                    LPAD(SUBSTRING(EXTRACT(day FROM pVal)::TEXT FROM '\d+'), 2, '0'),
                    ' ',
                    LPAD(EXTRACT(hour FROM pVal)::TEXT, 2, '0'),
                    ':',
                    LPAD(EXTRACT(minute FROM pVal)::TEXT, 2, '0'),
                    ':',
                    CASE 
                        WHEN STRPOS(pVal::TEXT, '.') >0 THEN
                            REGEXP_REPLACE(LPAD(EXTRACT(microseconds FROM pVal)::TEXT, 8, '0'), '(\d\d)(\d+)', '\1.\2')
                        ELSE
                            LPAD(EXTRACT(seconds FROM pVal)::TEXT, 2, '0')
                    END
                );

            END IF;

        END IF;

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="01d70d32-82a5-4f0e-aa34-4fe88e70c9c1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9ebba468-5d11-4655-85f5-2e55997794de" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval numeric)" is-trigger-function="0" unique-function-name="to_char(pval numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="varchar" function-arguments="pval numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365208" volatility="VOLATILE" is-window="f" function-identity-arguments="pval numeric" overload-function-count="17" proc-language="plpgsql" function-signature="to_char(pval numeric)" unique-suffix="(pval numeric)" routine-number="365208" comment="to_char convertion Number as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt     VARCHAR;
    vResult  VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL THEN
        
        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => '', -- not used
            pNoNumberFormat => '' -- value is just a flag
        );

        vResult := vFmt;

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="1c43b0b0-aae4-4f95-81df-89c56230b5a7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1643ca4c-77b9-4124-9637-2db5088b8619" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval numeric, pfmt character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_char(pval numeric, pfmt character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval numeric, pfmt character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365209" volatility="VOLATILE" is-window="f" function-identity-arguments="pval numeric, pfmt character varying, pnlsparam character varying" overload-function-count="17" proc-language="plpgsql" function-signature="to_char(pval numeric, pfmt character varying, pnlsparam character varying)" unique-suffix="(pval numeric, pfmt character varying, pnlsparam character varying)" routine-number="365209" comment="to_char convertion Number as Oracle does. Some Format models could return incorrect results. Only NLS_DATE_LANGUAGE is allowed for NLS param. Value must be correct as lc_time value">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt     VARCHAR;
    vResult  VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL THEN

        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => pFmt,
            pNlsParam => pNlsParam
        );

        vResult := vFmt;

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="44ac20a9-b0fc-4205-b66c-dca45db7add1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0b7bc6e6-1fe5-452f-b4bf-4641c2ce83e3" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval real)" is-trigger-function="0" unique-function-name="to_char(pval real)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="real" is-returning-set="f" ret-datatype="varchar" function-arguments="pval real" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365212" volatility="VOLATILE" is-window="f" function-identity-arguments="pval real" overload-function-count="17" proc-language="plpgsql" function-signature="to_char(pval real)" unique-suffix="(pval real)" routine-number="365212" comment="to_char convertion Number as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt     VARCHAR;
    vResult  VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL THEN

        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => '', -- not used
            pNoNumberFormat => '' -- value is just a flag
        );

        vResult := vFmt;

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="28e5af8a-a266-418b-883d-075110a26c52" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1eac0512-17c9-4b6a-bf59-b8f4200e0824" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval real, pfmt character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_char(pval real, pfmt character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="real,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval real, pfmt character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365213" volatility="VOLATILE" is-window="f" function-identity-arguments="pval real, pfmt character varying, pnlsparam character varying" overload-function-count="17" proc-language="plpgsql" function-signature="to_char(pval real, pfmt character varying, pnlsparam character varying)" unique-suffix="(pval real, pfmt character varying, pnlsparam character varying)" routine-number="365213" comment="to_char convertion Number as Oracle does. Some Format models could return incorrect results. Only NLS_DATE_LANGUAGE is allowed for NLS param. Value must be correct as lc_time value">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt     VARCHAR;
    vResult  VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL THEN

        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => pFmt,
            pNlsParam => pNlsParam
        );

        vResult := vFmt;

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="ea1f000e-4195-4151-acc4-869f8da0ab07" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="748ac058-405d-43f5-afe4-7eae675f894f" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval text)" is-trigger-function="0" unique-function-name="to_char(pval text)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="varchar" function-arguments="pval text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365214" volatility="VOLATILE" is-window="f" function-identity-arguments="pval text" overload-function-count="17" proc-language="plpgsql" function-signature="to_char(pval text)" unique-suffix="(pval text)" routine-number="365214" comment="to_char convertion CLOB as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult VARCHAR DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL AND pVal <> '' THEN
        
            vResult := aws_oracle_ext.to_char_formatter
            (
                pVal => pVal
            );

    END IF;

    RETURN vResult;
    
END;
]]></complex-attribute>
                        <category _I_D="01ac0214-bebd-4de2-9ad3-1a1551b8d482" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d50fc87b-7202-48ed-801e-b856dde0299c" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval timestamp with time zone)" is-trigger-function="0" unique-function-name="to_char(pval timestamp with time zone)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="timestamp with time zone" is-returning-set="f" ret-datatype="varchar" function-arguments="pval timestamp with time zone" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365217" volatility="VOLATILE" is-window="f" function-identity-arguments="pval timestamp with time zone" overload-function-count="17" proc-language="plpgsql" function-signature="to_char(pval timestamp with time zone)" unique-suffix="(pval timestamp with time zone)" routine-number="365217" comment="to_char convertion timestamp with TZ as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt VARCHAR;
BEGIN

    SELECT value
    INTO vFmt
    FROM aws_oracle_ext.v$nls_parameters
    WHERE parameter = 'NLS_TIMESTAMP_TZ_FORMAT';

    RETURN aws_oracle_ext.to_char
    (
        pVal => pVal,
        pFmt => vFmt
    );
    
END;
]]></complex-attribute>
                        <category _I_D="edc73281-7828-4a5c-896d-1f8e37398a68" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cd848d33-8f28-4b79-bcad-cad0ffa04d02" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval timestamp with time zone, pfmt character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_char(pval timestamp with time zone, pfmt character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="timestamp with time zone,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval timestamp with time zone, pfmt character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365218" volatility="VOLATILE" is-window="f" function-identity-arguments="pval timestamp with time zone, pfmt character varying, pnlsparam character varying" overload-function-count="17" proc-language="plpgsql" function-signature="to_char(pval timestamp with time zone, pfmt character varying, pnlsparam character varying)" unique-suffix="(pval timestamp with time zone, pfmt character varying, pnlsparam character varying)" routine-number="365218" comment="to_char convertion timestamp with TZ as Oracle does. Some Format models could return incorrect results. Only NLS_DATE_LANGUAGE is allowed for NLS param. Value must be correct as lc_time value">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult VARCHAR DEFAULT NULL;
    vFmt VARCHAR;
BEGIN

    IF pVal IS NOT NULL THEN

        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => pFmt,
            pNlsParam => pNlsParam
        );

        vResult := TO_CHAR(pVal, vFmt);

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="ac33cc77-6968-49af-8ea3-6b4c3f6a232d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="affb1f43-8d39-4462-b97d-e7b8b7587272" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval timestamp without time zone)" is-trigger-function="0" unique-function-name="to_char(pval timestamp without time zone)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="timestamp without time zone" is-returning-set="f" ret-datatype="varchar" function-arguments="pval timestamp without time zone" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365215" volatility="VOLATILE" is-window="f" function-identity-arguments="pval timestamp without time zone" overload-function-count="17" proc-language="plpgsql" function-signature="to_char(pval timestamp without time zone)" unique-suffix="(pval timestamp without time zone)" routine-number="365215" comment="to_char convertion date or timestamp without TZ as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt VARCHAR;
BEGIN

    IF SUBSTRING(TO_CHAR(EXTRACT('epoch' FROM pVal), '9999999999D9999999'),12,6) = '.00000' THEN

        SELECT value
        INTO vFmt
        FROM aws_oracle_ext.v$nls_parameters
        WHERE parameter = 'NLS_DATE_FORMAT';

    ELSE

        SELECT value
        INTO vFmt
        FROM aws_oracle_ext.v$nls_parameters
        WHERE parameter = 'NLS_TIMESTAMP_FORMAT';

    END IF;

    RETURN aws_oracle_ext.to_char
    (
        pVal => pVal,
        pFmt => vFmt
    );

END;
]]></complex-attribute>
                        <category _I_D="13ad907b-2427-4c04-8f1a-a489bedf5e04" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8e6736bf-fb37-4220-99ed-b8d0df475ce5" name="to_char" subcategories-loading="none" object-loading="extended" context="to_char(pval timestamp without time zone, pfmt character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_char(pval timestamp without time zone, pfmt character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="timestamp without time zone,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval timestamp without time zone, pfmt character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365216" volatility="VOLATILE" is-window="f" function-identity-arguments="pval timestamp without time zone, pfmt character varying, pnlsparam character varying" overload-function-count="17" proc-language="plpgsql" function-signature="to_char(pval timestamp without time zone, pfmt character varying, pnlsparam character varying)" unique-suffix="(pval timestamp without time zone, pfmt character varying, pnlsparam character varying)" routine-number="365216" comment="to_char convertion date or timestamp without TZ as Oracle does. Some Format models could return incorrect results. Only NLS_DATE_LANGUAGE is allowed for NLS param. Value must be correct as lc_time value">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult VARCHAR DEFAULT NULL;
    vFmt VARCHAR;
BEGIN

    IF pVal IS NOT NULL THEN

        vFmt := aws_oracle_ext.to_char_formatter
        (
            pVal      => pVal,
            pFormat   => pFmt,
            pNlsParam => pNlsParam
        );

        vResult := TO_CHAR(pVal, vFmt);

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="3d37ca95-1b36-4ee8-9c01-511200d2edc8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="501c26a4-f2ac-4902-8520-a6768ca59a9b" name="to_char_formatter" subcategories-loading="none" object-loading="extended" context="to_char_formatter" is-trigger-function="0" unique-function-name="to_char_formatter" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,character varying,character varying,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="pval anyelement, pformat character varying DEFAULT NULL::character varying, pnlsparam character varying DEFAULT NULL::character varying, pnonumberformat character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365202" volatility="VOLATILE" is-window="f" function-identity-arguments="pval anyelement, pformat character varying, pnlsparam character varying, pnonumberformat character varying" overload-function-count="1" proc-language="plpgsql" function-signature="to_char_formatter(pval anyelement, pformat character varying, pnlsparam character varying, pnonumberformat character varying)" comment="Utility function making to_char results similar to expected on Oracle side">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vFmt VARCHAR;
    rec RECORD;
    vResult VARCHAR;
    vDataType VARCHAR;
    vIsDateTime BOOLEAN DEFAULT FALSE;
    cAllowedDatatypes CONSTANT VARCHAR[] := ARRAY
    [
        -- numeric
        'REAL',
        'DOUBLE PRECISION',
        'NUMERIC',
        'INTEGER',
        --datetime
        'INTERVAL',
        'TIMESTAMP WITHOUT TIME ZONE',
        'TIMESTAMP WITH TIME ZONE',
        -- char
        'CHARACTER',
        'CHARACTER VARYING',
        'TEXT'

    ];
    vIsDate BOOLEAN DEFAULT FALSE;
    vIsNumeric BOOLEAN DEFAULT FALSE;
    vIsChar BOOLEAN DEFAULT FALSE;

    verrorMessages CONSTANT VARCHAR[] := ARRAY
    [
        'ORA-01722: invalid number', --1
        'ORA-01821: date format not recognized', --2
        'ORA-01822: era format code is not valid with this calendar', --3
        'not implemented', --4
        'ORA-12702: invalid NLS parameter string used in SQL function', --5
        'ORA-01481: invalid number format model', --6
        'ORA-22835: Buffer too small for CLOB to CHAR', --7
        'ORA-00902: invalid datatype' --8
    ];

    v_lctime VARCHAR;
    vNlsParam VARCHAR;
    vNlsParamCopy VARCHAR;
    vDayMaxLengh INTEGER;
    vDyMaxLengh INTEGER;
    vMonthMaxLength INTEGER;
    vMonMaxLength INTEGER;
    --used to calculate localized day/month names
    cDayMonthNumbers CONSTANT INTEGER[] := ARRAY[1,2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
    vTm VARCHAR;

    vtail VARCHAR;
    vfm VARCHAR;

    vIsDollarSign BOOLEAN DEFAULT FALSE;
    vGroupSeparator VARCHAR(2) DEFAULT NULL;
    vDecimalSeparator VARCHAR(2) DEFAULT NULL;
    vCurrencySymbol VARCHAR;
    vIsoCurrency VARCHAR;
    vDualCurrency VARCHAR;
    bd BOOLEAN DEFAULT FALSE;
    vln INTEGER;

BEGIN

    vDataType := UPPER(PG_TYPEOF(pVal)::VARCHAR);

    IF ARRAY_POSITION(cAllowedDatatypes,  vDataType) IS NULL THEN

        RAISE USING MESSAGE := verrorMessages[8];

    END IF;

    CASE
        WHEN vDataType IN
        (
            'INTERVAL',
            'TIMESTAMP WITHOUT TIME ZONE',
            'TIMESTAMP WITH TIME ZONE'
        ) THEN

            vIsDateTime := TRUE;

        WHEN vDataType IN
        (
            'REAL',
            'DOUBLE PRECISION',
            'NUMERIC',
            'INTEGER'
        ) THEN

            vIsNumeric := TRUE;

        ELSE

            vIsChar := TRUE; 

    END CASE;

    IF (vIsDateTime OR  (vIsNumeric AND pNoNumberFormat IS NULL)) AND (pFormat IS NULL OR pFormat = '') THEN

        IF vIsNumeric AND pFormat = '' THEN

            vResult := '#';
        
        ELSE

            vResult := NULL;

        END IF;

    ELSE

        CASE
            WHEN vIsDateTime AND vDataType <> 'INTERVAL' AND pFormat ~* '^FX$' THEN

                vResult := NULL;

            WHEN vIsDateTime THEN

                IF pNlsParam IS NOT NULL THEN

                    bd := TRUE;

                    vNlsParam := REPLACE(pNlsParam,' ', '');

                    SELECT STRING_AGG(TRIM(nls),'')
                    INTO vNlsParam
                    FROM  REGEXP_SPLIT_TO_TABLE
                    ( 
                        vNlsParam,
                        'NLS_',
                        'i'
                    ) nls
                    WHERE TRIM(nls) <> '' AND TRIM(nls) !~* 'CALENDAR';

                    IF vNlsParam IS NOT NULL THEN

                        IF vNlsParam  !~* 'DATE_LANGUAGE=' THEN

                            RAISE USING MESSAGE := verrorMessages[5];

                        END IF;

                        -- store original language
                        v_lctime := CURRENT_SETTING('lc_time');

                        vNlsParam := REGEXP_REPLACE(vNlsParam, 'DATE_LANGUAGE=', '', 'i');

                        -- try to set NLS
                        BEGIN

                            vTm := SET_CONFIG
                            (
                                'lc_time',
                                vNlsParam,
                                TRUE
                            );

                        EXCEPTION 
                            WHEN OTHERS THEN

                                RAISE USING MESSAGE := verrorMessages[5]; 
                        END;

                    END IF;

                END IF;

                IF vDataType = 'TIMESTAMP WITHOUT TIME ZONE' AND
                
                    SUBSTRING(TO_CHAR(EXTRACT('epoch' FROM pVal), '9999999999D9999999'),12,6) = '.00000' THEN

                    vIsDate := TRUE;

                END IF;

                IF NOT bd THEN

                    SELECT f.dmodelto
                    INTO vResult
                    FROM aws_oracle_data.dfmt f
                    WHERE f.dmodel = pFormat;

                    IF FOUND THEN

                        RETURN vResult;

                    END IF;

                END IF;
        
                vtail:= pFormat;

                LOOP

                    SELECT ok, tail, fm
                    INTO vFmt, vtail, vfm
                    FROM aws_oracle_ext.to_char_parser
                    (
                        pStr  => vtail,
                        pType => 'datetime',
                        pFm   => vfm
                    );

                    IF vFmt !~ '"' THEN

                        -- exact set of dates is chosen to be sure about day names
                        --calculate max day of week name length for language
                        IF vDataType <> 'INTERVAL' THEN

                            IF vFmt ~* '^tmMON$' OR vFmt ~* '^tmMONTH$' OR vFmt ~* '^tmDAY$' OR vFmt ~* '^tmDY$' THEN

                                bd := TRUE;

                                SELECT MAX(LENGTH(TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0') , '102017'), 'ddmmyyyy'),'TMDAY'))),
                                            MAX(LENGTH(TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '102017'), 'ddmmyyyy'),'TMDY')))
                                INTO vDayMaxLengh,
                                    vDyMaxLengh
                                FROM UNNEST(cDayMonthNumbers) AS val
                                WHERE val BETWEEN 2 AND 8;

                                --calculate max month name length for language
                                SELECT MAX(LENGTH(TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '2017'), 'mmyyyy'),'TMMONTH'))),
                                    MAX(LENGTH(TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '2017'), 'mmyyyy'),'TMMON')))
                                INTO vMonthMaxLength,
                                    vMonMaxLength
                                FROM UNNEST(cDayMonthNumbers) AS val;

                            END IF;

                        END IF;

                        IF vDataType <> 'INTERVAL' THEN
    
                            FOR rec IN
                            (
                                SELECT fm.fmt
                                FROM aws_oracle_ext.format_models fm
                                WHERE fm.tp = 'datetime'
                                AND fm.grp = UPPER(SUBSTR(vFmt,1,1))
                                AND
                                (
                                    fm.fmt LIKE '%SP%' OR
                                    fm.fmt IN ('SYEAR', 'YEAR')
                                )
                            )
                            LOOP

                                
                                IF vFmt ~* CONCAT('^', rec.fmt, '$') THEN

                                    RAISE USING MESSAGE := verrorMessages[4];
                                
                                END IF;

                            END LOOP;


                            IF vFmt ~* '^E$' OR vFmt ~* '^EE$' THEN

                                RAISE USING MESSAGE := verrorMessages[3];

                            END IF;
                       
                        END IF;

                        IF vFmt ~* 'TZ[HM]' AND vDataType = 'TIMESTAMP WITHOUT TIME ZONE' THEN

                            FOR rec IN
                            (
                                SELECT fm.fmt
                                FROM aws_oracle_ext.format_models fm
                                WHERE fm.tp = 'datetime'
                                AND fm.grp = UPPER(SUBSTR(vFmt,1,1))
                                AND 
                                (
                                    fm.fmt LIKE 'TZH%' OR 
                                    fm.fmt LIKE 'TZM%'
                                )
                            )
                            LOOP

                                IF vFmt ~* CONCAT('^', rec.fmt) THEN

                                    RAISE USING MESSAGE := verrorMessages[2];

                                END IF;

                            END LOOP;

                        END IF;

                        IF vIsDate AND vFmt ~* 'FF|X|TZ[DHMR]' THEN

                            FOR rec IN
                            (
                                SELECT fm.fmt
                                FROM aws_oracle_ext.format_models fm
                                WHERE fm.tp = 'datetime'
                                AND fm.grp = UPPER(SUBSTR(vFmt,1,1))
                                AND 
                                (
                                    fm.fmt = 'X' OR
                                    fm.fmt LIKE 'FF%' OR
                                    fm.fmt LIKE 'TZ%'
                                )
                            )
                            LOOP

                                IF vFmt ~* CONCAT('^', rec.fmt) THEN

                                    RAISE USING MESSAGE := verrorMessages[2];

                                END IF;

                            END LOOP;

                        END IF; 

                        IF vDataType <> 'INTERVAL' THEN
                        
                            IF vDataType = 'TIMESTAMP WITHOUT TIME ZONE' THEN

                                bd := TRUE;

                                vFmt := REGEXP_REPLACE(vFmt, 'tzr', '"+00:00"', 'ig');

                            END IF;

                            vFmt := REGEXP_REPLACE(vFmt, 'tzd', '', 'ig');

                            -- Unable to calculate TS correctly, will produce
                            -- Oracle behavior 9:01:01 AM
                            IF vFmt ~* 'TS' THEN

                                bd := TRUE;
                            
                                vFmt := REGEXP_REPLACE
                                (
                                    vFmt,
                                    'ts',
                                    CONCAT
                                    (
                                        '"',
                                        TRIM(TO_CHAR(pVal, 'hh'),'0'),
                                        ':',
                                        TO_CHAR(pVal, 'mi'),
                                        ':',
                                        TO_CHAR(pVal, 'ss'),
                                        ' ',
                                        TO_CHAR(pVal, 'AM'),
                                        '"'
                                    ),
                                    'ig'
                                );

                            END IF;

                            -- X will be .
                            IF vFmt !~* 'FX' AND vFmt ~* '^x' THEN

                                vFmt := REGEXP_REPLACE(vFmt, 'x', '.', 'ig');

                            END IF;

                            -- Fix cases
                            vFmt := REPLACE(vFmt, 'A.d.', 'A.D.');
                            vFmt := REPLACE(vFmt, 'A.m.', 'A.M.');
                            vFmt := REPLACE(vFmt, 'B.c.', 'B.C.');
                            vFmt := REPLACE(vFmt, 'P.m.', 'P.M.');

                            FOR rec IN
                            (
                                SELECT
                                    ARRAY_TO_STRING
                                    (
                                        REGEXP_MATCHES(vFmt, 'Rm|Ad|Bc|Pm|Am', 'g'),
                                        ''
                                    ) case_match
                            ) LOOP

                                vFmt := REPLACE
                                (
                                    vFmt,
                                    rec.case_match,
                                    CONCAT
                                    (
                                        '"',
                                        INITCAP(TO_CHAR(pVal, UPPER(rec.case_match))),
                                        '"'
                                    )
                                );

                                bd := TRUE;

                            END LOOP;

                            -- PG has SSSS, but Oracle SSSSS, so we need to convert SSSSS to SSSS
                            -- ssss to ss + ss
                            IF vFmt ~* '^FMS{2}$' OR vFmt ~* '^S{2}$' THEN

                                bd := TRUE;

                                vFmt := CONCAT
                                (
                                    '"',
                                    TO_CHAR(pVal, 'ss'),
                                    '"'
                                );

                            END IF;

                            IF vFmt ~* '^FMS{5}$' OR vFmt ~* '^S{5}$' THEN

                                bd := TRUE;

                                vFmt := CONCAT
                                (
                                    '"',
                                    TO_CHAR(pVal, REGEXP_REPLACE(vFmt, 's{5}', 'ssss', 'i')),
                                    '"'
                                );

                            END IF;

                            -- PG has ID, but Oracle use it as I + D, no ID
                            IF vFmt ~* '^i$' THEN
                                
                                bd := TRUE;

                                vFmt := 
                                    CONCAT
                                    (
                                        '"',
                                        TO_CHAR(pVal, 'I'),
                                        '"'
                                    );
                            
                            END IF;

                            /* PG unable to convert TH if contains lower case letters in model */
                            IF vFmt ~* 'TH' AND vFmt !~* 'MONTH' AND vFmt ~ '[[:lower:]]' THEN

                                bd := TRUE;

                                vFmt := CONCAT
                                (
                                    '"',
                                    REGEXP_REPLACE(TO_CHAR(pVal, vFmt), '(\d+)(\D+)', '\1', 'i'),
                                    LOWER(REGEXP_REPLACE(TO_CHAR(pVal, UPPER(vFmt)), '(\d+)(\D+)', '\2', 'i')),
                                    '"'
                                );
                            
                            END IF;

                            -- hard to calculate correct DS format, will set to fmmm/fmdd/fmyyyy
                            IF vFmt ~* 'ds' THEN

                                bd := TRUE;
                            
                                vFmt := REGEXP_REPLACE
                                (
                                    vFmt,
                                    'ds',
                                    CONCAT
                                    (
                                        '"',
                                        LTRIM(TO_CHAR(pVal, 'mm'), '0'),
                                        '/',
                                        LTRIM(TO_CHAR(pVal, 'dd'), '0'),
                                        '/',
                                        LTRIM(TO_CHAR(pVal, 'yyyy'), '0'), 
                                        '"'
                                    ),
                                    'ig'
                                );

                            END IF;

                            IF vFmt ~* 'SYYYY' THEN

                                bd := TRUE;
                            
                                vFmt := REGEXP_REPLACE
                                (
                                    vFmt,
                                    'syyyy',
                                    CONCAT
                                    (
                                        '"',
                                        CASE
                                            WHEN TO_CHAR(pVal,'BC') = 'BC' THEN
                                                CONCAT('-', TO_CHAR(pVal, 'YYYY'))
                                            ELSE
                                                CONCAT(' ', TO_CHAR(pVal, 'YYYY'))
                                        END,
                                        '"'
                                    ),
                                    'ig'
                                );

                            END IF;

                            IF vFmt ~* 'CC' AND vFmt !~* 'SCC' THEN

                                bd := TRUE;

                                vFmt := REGEXP_REPLACE
                                (
                                    vFmt,
                                    'cc',
                                    CONCAT
                                    (
                                        '"',
                                        CASE
                                            WHEN TO_CHAR(pVal,'BC') = 'BC' THEN
                                                REPLACE(TO_CHAR(pVal, 'CC'),'-','')
                                            ELSE
                                                TO_CHAR(pVal, 'CC')
                                        END,
                                        '"'
                                    ),
                                    'ig'
                                );

                            END IF;

                            IF vFmt ~* 'SCC' THEN

                                bd := TRUE;

                                vFmt := REGEXP_REPLACE
                                (
                                    vFmt,
                                    'scc',
                                    CONCAT
                                    (
                                        '"',
                                        CASE
                                            WHEN TO_CHAR(pVal,'BC') = 'BC' THEN
                                                TO_CHAR(pVal, 'CC')
                                            ELSE
                                                CONCAT(' ', TO_CHAR(pVal, 'CC'))
                                        END,
                                        '"'
                                    ),
                                    'ig'
                                );

                            END IF;

                            IF vFmt ~* 'TZH' THEN

                                bd := TRUE;

                                vFmt := REGEXP_REPLACE
                                (
                                    vFmt,
                                    'tzh',
                                    CONCAT
                                    (
                                        '"',
                                        SUBSTRING(EXTRACT(TIMEZONE_HOUR FROM pVal)::TEXT FROM '\D'),
                                        LPAD
                                        (
                                            SUBSTRING(EXTRACT(TIMEZONE_HOUR FROM pVal)::TEXT FROM '\d+'),
                                            2,
                                            '0'
                                        ),
                                        '"'
                                    ),
                                    'ig'
                                );

                            END IF;

                            IF vFmt ~* 'TZM' THEN

                                bd := TRUE;

                                vFmt := REGEXP_REPLACE
                                (
                                    vFmt,
                                    'tzm',
                                    CONCAT
                                    (
                                        '"',
                                        SUBSTRING(EXTRACT(TIMEZONE_MINUTES FROM pVal)::TEXT FROM '\D'),
                                        LPAD
                                        (
                                            SUBSTRING(EXTRACT(TIMEZONE_MINUTES FROM pVal)::TEXT FROM '\d+'),
                                            2,
                                            '0'
                                        ),
                                        '"'
                                    ),
                                    'ig'
                                );

                            END IF;

                            IF vFmt ~* 'TZR' THEN

                                bd := TRUE;

                                vFmt := REGEXP_REPLACE
                                (
                                    vFmt,
                                    'tzr',
                                    CONCAT
                                    (
                                        '"',
                                        SUBSTRING(EXTRACT(TIMEZONE_HOUR FROM pVal)::TEXT FROM '\D'),
                                        LPAD
                                        (
                                            SUBSTRING(EXTRACT(TIMEZONE_HOUR FROM pVal)::TEXT FROM '\d+'),
                                            2,
                                            '0'
                                        ),
                                        ':',
                                        SUBSTRING(EXTRACT(TIMEZONE_MINUTES FROM pVal)::TEXT FROM '\D'),
                                        LPAD
                                        (
                                            SUBSTRING(EXTRACT(TIMEZONE_MINUTES FROM pVal)::TEXT FROM '\d+'),
                                            2,
                                            '0'
                                        ),
                                        '"'
                                    ),
                                    'ig'
                                );

                            END IF;

                            -- hard to calculate correct DL, set to hardcoded format
                            IF vFmt ~* '^DL' THEN

                                bd := TRUE;

                                vFmt := 
                                    CONCAT
                                    (
                                        '"',
                                        TRIM(TO_CHAR(pVal, 'TMDay')),
                                        ', ',
                                        TRIM(TO_CHAR(pVal, 'TMMonth')),
                                        ' ',
                                        TO_CHAR(pVal, 'dd'),
                                        ', ',
                                        TO_CHAR(pVal, 'yyyy'),
                                        
                                        '"'
                                    );

                            END IF;

                            --FF[1..9] FF = FF6 here
                            IF vFmt ~* '^FF\d' THEN

                                bd := TRUE;

                                vln := SUBSTRING(vFmt FROM '\d')::INTEGER;

                                IF vln < 6 THEN

                                    vFmt := CONCAT('"', SUBSTR(TO_CHAR(pVal, 'US'), 1, vln), '"');

                                ELSE

                                    vFmt := CONCAT('"', RPAD(TO_CHAR(pVal, 'US'), vln, '0'), '"');

                                END IF;

                            END IF;

                            IF vFmt ~* '^tmMON$' THEN

                                bd := TRUE;

                                vFmt := CONCAT
                                (
                                    '"',
                                    RPAD(TO_CHAR(pVal, vFmt), vMonMaxLength),
                                    '"'
                                );

                            END IF;

                            IF vFmt ~* '^tmMONTH$' THEN

                                bd := TRUE;

                                vFmt := CONCAT
                                (
                                    '"',
                                    RPAD(TO_CHAR(pVal, vFmt), vMonthMaxLength),
                                    '"'
                                );

                            END IF;

                            IF vFmt ~* '^tmDAY$' THEN

                                bd := TRUE;

                                vFmt := CONCAT
                                (
                                    '"',
                                    RPAD(TO_CHAR(pVal, vFmt), vDayMaxLengh),
                                    '"'
                                );

                            END IF;

                            IF vFmt ~* '^tmDY$' THEN

                                bd := TRUE;

                                vFmt := CONCAT
                                (
                                    '"',
                                    RPAD(TO_CHAR(pVal, vFmt), vDyMaxLengh),
                                    '"'
                                );

                            END IF;

                        END IF;

                    END IF;

                    IF vResult ~ 'Dd' THEN

                        vResult := REPLACE(vResult, 'Dd', 'dd');

                    END IF;

                    IF vResult ~ 'dD' THEN

                        vResult := REPLACE(vResult, 'dD', 'dd');

                    END IF;

                    vResult := CONCAT(vResult, vFmt);

                    EXIT WHEN vtail IS NULL;

                END LOOP;

                IF NOT bd THEN

                    INSERT INTO aws_oracle_data.dfmt
                    VALUES(pFormat, vResult)
                    ON CONFLICT ON CONSTRAINT dfmt_pkey DO NOTHING;

                END IF;

                -- restore language setting if they were changed
                IF CURRENT_SETTING('lc_time') <> v_lctime THEN

                    vTm := SET_CONFIG('lc_time', v_lctime, TRUE);

                END IF;

            WHEN vIsNumeric AND pNoNumberFormat IS NULL AND pNlsParam = '' THEN

                vResult := NULL;

            WHEN vIsNumeric THEN

                IF pNoNumberFormat IS NULL THEN

                    IF pNlsParam IS NOT NULL THEN

                        bd := TRUE;

                        SELECT STRING_AGG(CASE WHEN nls ~* 'CALENDAR' THEN '' ELSE nls END, '')
                        INTO vNlsParamCopy
                        FROM REGEXP_SPLIT_TO_TABLE
                        ( 
                            pNlsParam,
                            'NLS_',
                        'i') nls;

                        -- check if paramters are allowed
                        IF pNlsParam ~ '^\s+$' THEN

                            RAISE USING MESSAGE := verrorMessages[5];

                        END IF;
                        
                        vNlsParam := REGEXP_REPLACE
                        (
                            vNlsParamCopy,
                            'NUMERIC_CHARACTERS\s*=\s*\''..\''',
                            '',
                            'i'
                        );

                        vNlsParam := REGEXP_REPLACE
                        (
                            vNlsParam,
                            'CURRENCY\s*=\s*\''.+\''',
                            '',
                            'i'
                        );

                        vNlsParam := REGEXP_REPLACE
                        (
                            vNlsParam,
                            'ISO_CURRENCY\s*=\s*\S+',
                            '',
                            'i'
                        );

                        IF LENGTH(TRIM(vNlsParam)) > 0 THEN

                            RAISE USING MESSAGE := verrorMessages[5];

                        END IF;
                        
                        -- Try to get set NLS parts
                        FOR rec IN 
                        (
                            SELECT ARRAY_TO_STRING
                            (
                                REGEXP_MATCHES
                                (
                                    vNlsParamCopy,
                                    'NUMERIC_CHARACTERS\s*=\s*\''..\''',
                                    'i'
                                ),''
                            ) m
                        ) LOOP

                            vDecimalSeparator := SUBSTR(REGEXP_REPLACE(SUBSTRING(rec.m FROM '=\s*\S.{3}'), '=\s*', ''), 2, 1);
                            
                            IF LENGTH(vDecimalSeparator) = 0 THEN

                                RAISE USING MESSAGE := verrorMessages[5];

                            END IF;

                            vGroupSeparator := SUBSTR(REGEXP_REPLACE(SUBSTRING(rec.m FROM '=\s*\S.{3}'), '=\s*', ''), 3, 1);

                            IF LENGTH(vGroupSeparator) = 0 THEN

                                RAISE USING MESSAGE := verrorMessages[5];

                            END IF;

                            PERFORM SET_CONFIG('NLS.NUMERIC_CHARACTERS', CONCAT(vDecimalSeparator, vGroupSeparator), TRUE);

                        END LOOP;

                        FOR rec IN 
                        (
                            SELECT ARRAY_TO_STRING
                            (
                                REGEXP_MATCHES
                                (
                                    vNlsParamCopy,
                                    'CURRENCY\s*=\s*\''.+\''',
                                    'i'
                                ),''
                            ) m
                        ) LOOP

                            vCurrencySymbol := REGEXP_REPLACE(SUBSTRING(rec.m FROM '=\s*\''.+\'''),'=\s*', '');
                            vCurrencySymbol := SUBSTR(vCurrencySymbol, 2, LENGTH(vCurrencySymbol)-2);

                            IF LENGTH(vCurrencySymbol) = 0 THEN

                                RAISE USING MESSAGE := verrorMessages[5];

                            END IF;

                            vCurrencySymbol := SET_CONFIG('NLS.CURRENCY', vCurrencySymbol, TRUE);

                        END LOOP;

                        FOR rec IN 
                        (
                            SELECT ARRAY_TO_STRING
                            (
                                REGEXP_MATCHES
                                (
                                    vNlsParamCopy,
                                    'ISO_CURRENCY\s*=\s*\S+',
                                    'i'
                                ),''
                            ) m
                        ) LOOP

                            vIsoCurrency := REGEXP_REPLACE(SUBSTRING(rec.m FROM '=\s*\S+'), '(=\s*)(\S+)', '\2');

                            IF LENGTH(vIsoCurrency) = 0 THEN

                                RAISE USING MESSAGE := verrorMessages[5];

                            END IF;

                            BEGIN

                                SELECT anp.params_dictionary ->> 'NLS_ISO_CURRENCY' AS NLS_ISO_CURRENCY,
                                    COALESCE(vCurrencySymbol, anp.params_dictionary ->> 'NLS_CURRENCY') AS NLS_CURRENCY,
                                    anp.params_dictionary ->> 'NLS_DUAL_CURRENCY' AS NLS_DUAL_CURRENCY
                                INTO vIsoCurrency,
                                    vCurrencySymbol,
                                    vDualCurrency
                                FROM aws_oracle_ext.nls_parameters anp
                                WHERE anp.nls_territory = UPPER(TRIM(vIsoCurrency));

                                IF NOT FOUND THEN

                                    RAISE USING MESSAGE := verrorMessages[5];

                                END IF;

                                vIsoCurrency := SET_CONFIG('NLS.ISO_CURRENCY', vIsoCurrency, TRUE);
                                vCurrencySymbol := SET_CONFIG('NLS.CURRENCY', vCurrencySymbol, TRUE);
                                vDualCurrency := SET_CONFIG('NLS.DUAL_CURRENCY', vDualCurrency, TRUE);

                            EXCEPTION
                                WHEN NO_DATA_FOUND THEN

                                  RAISE USING MESSAGE := verrorMessages[5];
                            END;

                        END LOOP;

                    END IF;

                    IF NOT bd THEN

                        SELECT f.nmodel
                        INTO vFmt
                        FROM aws_oracle_data.nfmt f
                        WHERE f.nmodel = pFormat;

                        IF FOUND THEN

                            vResult := TO_CHAR
                            (
                                pVal,
                                REGEXP_REPLACE(vFmt, 'FM', 'FM', 'i')
                            );

                        IF vResult ~ '#' AND NOT pFormat ~* '[^09GD\.]' THEN

                                vResult := REPEAT('#', LENGTH(pFormat) + 1);

                        END IF;
                            
                        RETURN vResult;

                        END IF;

                    END IF;

                    vtail:= pFormat;

                    LOOP

                        SELECT ok, tail, fm
                        INTO vFmt, vtail, vfm
                        FROM aws_oracle_ext.to_char_parser
                        (
                            pStr  => vtail,
                            pType => 'number',
                            pFm   => vfm
                        );
                        
                    
                        vResult := CONCAT(vResult, vFmt);

                        EXIT WHEN vtail IS NULL;

                    END LOOP;

                    /* Restrictions */
                    --A comma element cannot begin a number format model
                    IF SUBSTR(vResult, 1, 1) = ',' THEN

                        RAISE USING MESSAGE := verrorMessages[6];

                    END IF;
                    -- A comma cannot appear to the right of a decimal
                    -- character or period in a number format model
                    CASE 
                        WHEN vResult ~* '[\.D].*\,' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        --only one period in a number format model
                        WHEN vResult ~ '\..*\.' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- only one decimal character in a number format model
                        WHEN vResult ~* 'd.*d' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- group separator cannot appear to the right of a decimal 
                        -- character or period in a number format model
                        -- V also
                        WHEN vResult ~* '[\.DV].*g' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- Start with g is not allowed
                        WHEN vResult ~* '^G' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- It's not allowed to mix different type group and
                        -- decimal model symbols
                        WHEN vResult ~ '\.|\,' AND vResult ~* 'D|G' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- The MI format element can appear only in the last position 
                        -- of a number format model
                        WHEN vResult ~* 'MI.+' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        --The PR format element can appear only in the last position
                        -- of a number format model
                        WHEN vResult ~* 'PR.+' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- The S format element can appear only in the first 
                        -- or last position of a number format model
                        WHEN vResult ~* '[^S]+S[^S]+' OR vResult ~* 'S[^S]*S' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- You cannot precede this element with any other element
                        WHEN vResult ~* '.+TM' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- You can follow this element only with one 9 or 
                        -- one E (or e), but not with any combination of these
                        WHEN vResult ~* 'TM.{2,}' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        WHEN vResult ~* 'TM[^9e]' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- You can precede this element only with 0 (which returns leading zeroes)
                        -- or FM. Any other elements return an error
                        WHEN vResult ~* '.*X.?'
                            AND vResult !~* '^0+X{1,}$'
                            AND vResult !~* '^FMX{1,}$'
                            AND vResult !~* '^FM0{1,}X{1,}$'
                            AND vResult !~* '^X{1,}$' THEN

                                RAISE USING MESSAGE := verrorMessages[6];
                        -- only one $ allowed
                        WHEN vResult ~ '\$.*\$' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- only one C allowed
                        WHEN vResult ~* 'C.*C' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- only one L allowed
                        WHEN vResult ~* 'L.*L' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- only one U allowed
                        WHEN vResult ~* 'U.*U' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- C, L, $, U together is not allowed
                        WHEN vResult ~* 'C.*[\$LU]' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        WHEN vResult ~* '[UL\$].*C' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- only one V allowed
                        WHEN vResult ~* 'V.*V' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- V and period or decimal is not allowed
                        WHEN vResult ~* 'V.*[\.D]' OR vResult ~* '[\.D].*V' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- If RN - no other models allowed
                        WHEN vResult ~* '.+RN' OR vResult ~* 'RN.+' THEN

                            RAISE USING MESSAGE := verrorMessages[6];
                        -- Only EEEE is not allowed. No chars after EEEE. No comma before EEEE
                        WHEN vResult ~* '^EEEE$' 
                            OR vResult ~* 'EEEE[^S]+' 
                            OR vResult ~* '\,.*EEEE'
                            OR vResult ~* 'EEEE.{2,}' THEN

                                RAISE USING MESSAGE := verrorMessages[6];
                        ELSE

                            NULL;
                    END CASE;

                    /* Some Oracle actions repeated */
                    IF UPPER(vResult) = 'S' THEN

                        bd := TRUE;

                        vResult := '#';

                    END IF;

                    IF vResult ~* 'U|C|L' THEN

                        bd := TRUE;

                        FOR rec IN
                        (
                            SELECT
                            (SELECT value FROM aws_oracle_ext.v$nls_parameters WHERE parameter = 'NLS_ISO_CURRENCY') AS nls_iso_currency,
                            (SELECT value FROM aws_oracle_ext.v$nls_parameters WHERE parameter = 'NLS_CURRENCY') AS nls_currency,
                            (SELECT value FROM aws_oracle_ext.v$nls_parameters WHERE parameter = 'NLS_DUAL_CURRENCY') AS nls_dual_currency
                        )
                        LOOP

                            IF vResult ~* 'U' THEN

                                vResult := REGEXP_REPLACE(vResult, 'U',  CONCAT('"', rec.nls_dual_currency, '"') , 'i');

                            END IF;

                            IF vResult ~* 'C' THEN

                                vResult := REGEXP_REPLACE(vResult, 'C',  CONCAT('"', rec.nls_iso_currency, '"') , 'i');

                            END IF;

                            IF vResult ~* 'L' THEN

                                vResult := REGEXP_REPLACE(vResult, 'L',  CONCAT('"', rec.nls_currency, '"') , 'i');

                            END IF;


                        END LOOP;

                    END IF;

                    IF vResult ~ '\$' AND vResult !~ '"\$"' THEN

                        bd := TRUE;

                        vResult := CONCAT('"$"', REPLACE(vResult, '$', ''));

                    END IF;

                    -- converting
                    CASE
                        WHEN vResult ~* 'X' AND vResult !~ '"' THEN

                            bd := TRUE;
                            
                            vResult := CONCAT
                            (
                                CASE
                                    WHEN vResult ~* 'FM' THEN
                                        ''
                                    ELSE
                                        ' '
                                    END,
                                LPAD
                                (
                                    CASE
                                        WHEN vResult ~ 'X' THEN
                                            UPPER(TO_HEX(ROUND(pVal,0)::INTEGER)::TEXT)
                                        ELSE TO_HEX(ROUND(pVal,0)::INTEGER)::TEXT
                                    END,
                                    LENGTH
                                    (
                                        REGEXP_REPLACE
                                        (
                                            vResult,
                                            'FM',
                                            '',
                                            'i'
                                        )
                                    ),
                                    '0'
                                )
                            );
                            
                        WHEN vResult ~* 'EEEE' THEN

                            bd := TRUE;

                            vResult := 
                            CASE 
                                WHEN vResult ~* 'FM' THEN 
                                    LTRIM
                                    (
                                        REPLACE
                                        (
                                            REGEXP_REPLACE
                                            (
                                                TO_CHAR
                                                (
                                                    pVal,
                                                    REGEXP_REPLACE(vResult, 'FM', '', 'i')
                                                ),
                                                '00(\d)',
                                                '0\1'
                                            ),
                                            'e',
                                            'E'
                                        )
                                    )
                                ELSE
                                    CONCAT(' ', REPLACE(REGEXP_REPLACE(TO_CHAR(pVal, vResult), '00(\d)', '0\1'), 'e', 'E'))
                            END;
                        WHEN vResult ~* 'G|D' AND vDecimalSeparator IS NOT NULL AND vGroupSeparator IS NOT NULL THEN

                            bd := TRUE;

                            vResult := REPLACE(REPLACE(TO_CHAR(pVal, REGEXP_REPLACE(vResult, 'FM', 'FM', 'i')), REPLACE(TO_CHAR(1.1, 'FM9D9'),'1',''), vDecimalSeparator), REPLACE(TO_CHAR(1111, 'FM9G999'),'1',''), vGroupSeparator);
                        
                        --  case with format = '.999'  
                        WHEN vResult ~* '^\.(?=\d+$)' THEN  

                            bd := TRUE;
                            
                            vResult :=
                            REGEXP_REPLACE
                            (
                                TO_CHAR
                                    (
                                        pVal,
                                        REGEXP_REPLACE
                                        (
                                            vResult, 
                                            '^\.(?=\d+$)', 
                                            '0.', 
                                            'g'
                                        )
                                    ),
                                '^\ ?0\.',
                                ' .',
                                'g'
                            );
						
						ELSE

                            vResult := TO_CHAR
                            (
                                pVal,
                                REGEXP_REPLACE(vResult, 'FM', 'FM', 'i')
                            );

                            IF vResult ~ '#' AND NOT pFormat ~* '[^09GD\.]' THEN

                                bd := TRUE;

                                vResult := REPEAT('#', LENGTH(pFormat) + 1);

                            END IF;

                            IF NOT bd THEN

                                INSERT INTO aws_oracle_data.nfmt
                                VALUES (pFormat)
                                ON CONFLICT ON CONSTRAINT nfmt_pkey DO NOTHING;

                            END IF;

                    END CASE;
                
                ELSE

                        IF pVal = 0 THEN

                            vResult := '0';
                            
                        ELSE

                            vResult := REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(pVal::TEXT, '^0\.(\d+)', '.\1'), '\.0{2,}$', ''), '\.$', '');

                            vResult := REGEXP_REPLACE(vResult, '^-0\.(\d+)', '-.\1');

                            IF vResult ~ '\.' THEN

                                vResult := REGEXP_REPLACE(REGEXP_REPLACE(vResult, '0+$', ''), '\.$', '');

                            END IF;
                        
                        END IF;

                END IF;
                
            ELSE

                IF pFormat IS NOT NULL THEN
                    
                    RAISE USING MESSAGE := verrorMessages[1];

                END IF;
                
                IF LENGTH(pVal) > 4000 THEN

                    RAISE USING MESSAGE := verrorMessages[7];

                END IF;

                vResult := pVal::VARCHAR;

        END CASE;

    END IF;

    RETURN vResult;

END;

]]></complex-attribute>
                        <category _I_D="ae96474e-d63c-4696-a210-0ef354ecd21e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="03543148-21ef-488d-bf07-0a7bba406569" name="to_char_parser" subcategories-loading="none" object-loading="extended" context="to_char_parser" is-trigger-function="0" unique-function-name="to_char_parser" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying,character varying,character varying,character varying" is-returning-set="t" ret-datatype="table" function-arguments="pstr character varying, ptype character varying, pfm character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_DATASET" count-arguments="3" function-id="365210" volatility="VOLATILE" is-window="f" function-identity-arguments="pstr character varying, ptype character varying, pfm character varying" overload-function-count="1" proc-language="plpgsql" function-signature="to_char_parser(pstr character varying, ptype character varying, pfm character varying)" comment="Parse to_char format parameter value to check it against Oracle rules">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vRes VARCHAR;
    vStr VARCHAR;
    vPos INTEGER;
    vChunk VARCHAR;
    vGrp VARCHAR;
    vWrapTo VARCHAR;
    vYYYY VARCHAR;
    
    curDateFmtModels CURSOR (pGrp VARCHAR, pYYY VARCHAR) FOR
    SELECT fm.fmt,
        fm.wrapto
    FROM aws_oracle_ext.format_models fm
    WHERE tp = 'datetime'
    AND grp = pGrp
    AND (pYYY IS NULL OR (pYYY IS NOT NULL AND fm.fmt = pYYY))
    ORDER BY ord,
        fmt;

    eDateFormatNotRecognized CONSTANT VARCHAR := 'ORA-01821: date format not recognized';

    curNumberFmtModels CURSOR FOR
    SELECT fmt
    FROM aws_oracle_ext.format_models fm
    WHERE tp = 'number';

    eInvalidNumberFormat CONSTANT VARCHAR := 'ORA-01481: invalid number format model';

    vModel VARCHAR;

    vFM VARCHAR;
BEGIN

    vStr := pStr;
    vPos := 1;

    vFm := COALESCE(pFm,'');

    CASE
        
        WHEN pType = 'number' THEN
            
            OPEN curNumberFmtModels;
            
            LOOP
                            
                FETCH curNumberFmtModels INTO vModel;
                
                EXIT WHEN NOT FOUND;

                vChunk := SUBSTR(vStr,1,  LENGTH(REPLACE(vModel, '\', '')));

                IF UPPER(vChunk) <> REPLACE(vModel, '\', '') THEN

                    vChunk := NULL;

                END IF;
                            
                IF vChunk IS NOT NULL THEN

                    vRes := CONCAT(vRes, SUBSTR(vStr, 1, LENGTH(vChunk)));
                    vPos := vPos + LENGTH(vChunk);
                    vStr := SUBSTR(vStr, vPos);

                    EXIT;

                END IF;

            END LOOP;

            CLOSE curNumberFmtModels;

            IF vChunk IS NULL THEN
                            
                RAISE USING MESSAGE := eInvalidNumberFormat;

            END IF;

        ELSE

            LOOP
            
                    -- special treat for FM/FX
                    IF UPPER(SUBSTR(vStr,1,2)) = 'FM' THEN

                        vFM := CASE WHEN vFM <> 'FM' THEN 'FM' ELSE '' END;
                        vStr := SUBSTR(vStr,3);
                    
                    END IF;

                    --If quotted - grab it
                    IF SUBSTR(vStr,1,1) = '"' THEN

                        vChunk := SUBSTRING(vStr FROM '"[^"]*"');

                        -- if unclosed quota - raise
                        IF vChunk IS NULL THEN

                            RAISE USING MESSAGE := eDateFormatNotRecognized;

                        END IF;

                        vRes := CONCAT(vFm, vRes, vChunk);
                        vPos := vPos + LENGTH(vChunk);
                        vStr := SUBSTR(vStr, vPos);

                        EXIT;

                    END IF;

                    -- spacers grab it
                    -- we will treat , and . specialy because of A.M. likes or Y,YYYY
                    IF SUBSTR(vStr,1,1) ~ '^[\.\,]' THEN

                        vChunk := SUBSTRING(vStr FROM '[\.\,]+');
                        vRes := CONCAT(vFM, vRes, vChunk);
                        vPos := vPos + LENGTH(vChunk);
                        vStr := SUBSTR(vStr, vPos);

                        EXIT;

                    END IF;

                    IF SUBSTR(vStr,1,1) ~ '[\s\!\\\/\#\$\%\&\''\(\)\*\+\\\-\:\;\<\=\>\?\@\[\]\^\_\`\{\|\}\~]' THEN
                        
                        vChunk := SUBSTRING(vStr FROM '[\s\!\\\/\#\$\%\&\''\(\)\*\+\\\-\:\;\<\=\>\?\@\[\]\^\_\`\{\|\}\~]+');
                        vRes := CONCAT(vFM, vRes, vChunk);
                        vPos := vPos + LENGTH(vChunk);
                        vStr := SUBSTR(vStr, vPos);

                        EXIT;

                    END IF;

                    vGrp := UPPER(SUBSTR(vStr,1,1));
                    
                    IF vGrp = 'Y' THEN
			
                        CASE
                            WHEN UPPER(SUBSTR(vStr,1,9)) IN ('Y,YYYTHSP', 'Y,YYYSPTH') THEN
                                vYYYY := REPLACE(UPPER(SUBSTR(vStr,1,9)),',','\,');
                            WHEN UPPER(SUBSTR(vStr,1,7)) IN ('Y,YYYTH', 'Y,YYYSP') THEN
                                vYYYY := REPLACE(UPPER(SUBSTR(vStr,1,7)),',','\,');
                            WHEN UPPER(SUBSTR(vStr,1,5)) = 'Y,YYY' THEN
                                vYYYY := REPLACE(UPPER(SUBSTR(vStr,1,5)),',','\,');
                            ELSE
                                vYYYY := NULL;
                        END CASE;

                    END IF;

                    OPEN curDateFmtModels(CASE WHEN vGrp = 'E' THEN 'Y' ELSE vGrp END, vYYYY);

                    LOOP
                        
                        FETCH curDateFmtModels INTO vModel, vWrapTo;
                        
                        EXIT WHEN NOT FOUND;
        
                        vChunk := SUBSTR(vStr,1,  LENGTH(REPLACE(vModel, '\', '')));

                        IF UPPER(vChunk) <> REPLACE(vModel, '\', '') THEN

                            vChunk := NULL;

                        END IF;
                        
                        IF vChunk IS NOT NULL THEN

                            vRes := CONCAT
                            (
                                vFM,
                                vRes,
                                CASE 
                                    WHEN vWrapTo IS NOT NULL THEN
                                        CASE 
                                            WHEN  vWrapTo = 'R->Y' THEN
                                                REPLACE(REPLACE(vChunk, 'R', 'Y'), 'r', 'y')
                                            ELSE
                                                REGEXP_REPLACE(SUBSTR(vStr, 1, LENGTH(vChunk)), CONCAT('(',SUBSTR(vStr, 1, LENGTH(vChunk)),')'), vWrapTo)
                                        END
                                    ELSE 
                                        SUBSTR(vStr, 1, LENGTH(vChunk)) 
                                END
                            );
                            vPos := vPos + LENGTH(vChunk);
                            vStr := SUBSTR(vStr, vPos);

                            EXIT;

                        END IF;

                    END LOOP;

                    CLOSE curDateFmtModels;

                    IF vChunk IS NULL THEN
                        
                        RAISE USING MESSAGE := eDateFormatNotRecognized;

                    END IF;

                    EXIT;

                END LOOP;

        END CASE;

    RETURN QUERY VALUES (vRes, CASE WHEN LENGTH(vStr) = 0 THEN NULL::VARCHAR ELSE vStr END, vFM);
        
END;
]]></complex-attribute>
                        <category _I_D="4dbf7691-7096-4ef9-8449-c7ceb97e2b23" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="61a37545-2d32-4aa4-8896-2a97fc5e3b01" name="to_date" subcategories-loading="none" object-loading="extended" context="to_date(pval character varying)" is-trigger-function="0" unique-function-name="to_date(pval character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="timestamp" function-arguments="pval character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365222" volatility="VOLATILE" is-window="f" function-identity-arguments="pval character varying" overload-function-count="2" proc-language="plpgsql" function-signature="to_date(pval character varying)" unique-suffix="(pval character varying)" routine-number="365222" comment="Converts VARCHAR2 to DATE as Oracle does">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult TIMESTAMP DEFAULT NULL;
    vFmt VARCHAR;
BEGIN
    
    SELECT value
    INTO vFmt
    FROM aws_oracle_ext.v$nls_parameters
    WHERE parameter = 'NLS_DATE_FORMAT';

    vResult := aws_oracle_ext.to_date
    (
        pVal => pVal,
        pFmt => vFmt
    );

    RETURN vResult::TIMESTAMP(0);

END;
]]></complex-attribute>
                        <category _I_D="019a38ac-d454-4ad6-a1c4-9af40f21d0da" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2ff35a7c-01f8-4dbd-b862-44b2c4fc4528" name="to_date" subcategories-loading="none" object-loading="extended" context="to_date(pval character varying, pfmt character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_date(pval character varying, pfmt character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying" is-returning-set="f" ret-datatype="timestamp" function-arguments="pval character varying, pfmt character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365223" volatility="VOLATILE" is-window="f" function-identity-arguments="pval character varying, pfmt character varying, pnlsparam character varying" overload-function-count="2" proc-language="plpgsql" function-signature="to_date(pval character varying, pfmt character varying, pnlsparam character varying)" unique-suffix="(pval character varying, pfmt character varying, pnlsparam character varying)" routine-number="365223" comment="Converts VARCHAR2 to DATE as Oracle does. Some Format models could return incorrect results. Only NLS_DATE_LANGUAGE is allowed for NLS param. Value must be correct as lc_time value">
                        <complex-attribute name="sql"><![CDATA[
DECLARE

    vResult TIMESTAMP DEFAULT NULL;
    vFmt VARCHAR;
    vValFormatted VARCHAR;

BEGIN

    IF pVal IS NOT NULL AND pVal <> '' THEN
        
        IF pNlsParam IS NULL THEN

            SELECT f.dmodelto
            INTO vFmt
            FROM aws_oracle_data.tdfmt f
            WHERE f.dmodel = pFmt;

            IF FOUND THEN

                RETURN TO_TIMESTAMP(pVal, vFmt)::TIMESTAMP(0);

            END IF;

        END IF;
        
        SELECT vval,
            format
        INTO vValFormatted,
            vFmt
        FROM aws_oracle_ext.to_date_formatter
        (
            pVal      => pVal,
            pFormat   => pFmt,
            pNlsParam => pNlsParam
        );

        vResult := TO_TIMESTAMP(vValFormatted, vFmt);

    END IF;

    RETURN vResult::TIMESTAMP(0);

END;
]]></complex-attribute>
                        <category _I_D="d74635ad-9df6-4586-8df7-de0fcca89c0b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a7b5dc6d-27bd-4f0e-b834-440e4d3b8312" name="to_date_formatter" subcategories-loading="none" object-loading="extended" context="to_date_formatter" is-trigger-function="0" unique-function-name="to_date_formatter" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying,character varying,character varying" is-returning-set="t" ret-datatype="table" function-arguments="pval character varying, pformat character varying DEFAULT NULL::character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_DATASET" count-arguments="3" function-id="365220" volatility="VOLATILE" is-window="f" function-identity-arguments="pval character varying, pformat character varying, pnlsparam character varying" overload-function-count="1" proc-language="plpgsql" function-signature="to_date_formatter(pval character varying, pformat character varying, pnlsparam character varying)" comment="Utility function making to_char results similar to expected on Oracle side">
                        <complex-attribute name="sql"><![CDATA[
DECLARE

    v_lctime VARCHAR;
    vNlsParam VARCHAR;

    vFmt VARCHAR;
    rec RECORD;
    vVal VARCHAR;
    vResult VARCHAR;

    vtail VARCHAR;
    vfm VARCHAR;

    verrorMessages CONSTANT VARCHAR[] := ARRAY
    [
        'ORA-01821: date format not recognized', --1
        'not implemented', --2
        'ORA-12702: invalid NLS parameter string used in SQL function', --3
        'ORA-01843: not a valid month', --4
        'ORA-01846: not a valid day of the week' --5
    ];
    --used to calculate localized day/month names
    cDayMonthNumbers CONSTANT INTEGER[] := ARRAY[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
    vMonthNumber INTEGER DEFAULT NULL;
    vLocalName VARCHAR;
    vGlobalName VARCHAR;
    vDayNumber INTEGER DEFAULT NULL;
    vIncompleteYear INTEGER;
    bd BOOLEAN DEFAULT FALSE;
BEGIN

    vVal := pVal;

    IF pFormat = '' THEN

        vResult := NULL;

    ELSE
    
        vtail:= pFormat;

        LOOP

            SELECT ok, tail, fm
            INTO vFmt, vtail, vfm
            FROM aws_oracle_ext.to_char_parser
            (
                pStr  => vtail,
                pType => 'datetime',
                pFm   => vfm
            );

            vResult := CONCAT(vResult, vFmt);

            EXIT WHEN vtail IS NULL;

        END LOOP;

    END IF;
    
    -- store original language
    v_lctime := CURRENT_SETTING('lc_time');

    IF pNlsParam IS NOT NULL THEN

        vNlsParam := REPLACE(pNlsParam,' ', '');

        SELECT STRING_AGG(TRIM(nls),'')
        INTO vNlsParam
        FROM  REGEXP_SPLIT_TO_TABLE
        ( 
            vNlsParam,
            'NLS_',
            'i'
        ) nls
        WHERE TRIM(nls) <> '' AND TRIM(nls) !~* 'CALENDAR';

        IF vNlsParam IS NOT NULL THEN

            IF vNlsParam  !~* 'DATE_LANGUAGE=' THEN

                RAISE USING MESSAGE := verrorMessages[3];

            END IF;

            vNlsParam := REGEXP_REPLACE(vNlsParam, 'DATE_LANGUAGE=', '', 'i');

            -- try to set NLS
            BEGIN

                PERFORM SET_CONFIG('lc_time', vNlsParam, TRUE);

            EXCEPTION 
                WHEN OTHERS THEN

                    RAISE USING MESSAGE := verrorMessages[3]; 
            END;
            
        END IF;

    END IF;
    -- month literal
    IF vResult ~* 'TMMONTH' THEN

        FOR rec IN
        (
            WITH mnames AS
            (
                SELECT val,
                    TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '2017'), 'mmyyyy'), 'TMMONTH') AS localMonthName,
                    TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '2017'), 'mmyyyy'), 'MONTH') AS monthName
                FROM UNNEST(cDayMonthNumbers) AS val
            )
            SELECT m.val,
                m.localMonthName,
                m.monthName
            FROM mnames m
            WHERE pVal ~* m.localMonthName
        )
        LOOP

            vMonthNumber := rec.val;
            vLocalName := rec.localMonthName;
            vGlobalName := rec.monthName;

        END LOOP;

        IF vMonthNumber IS NULL THEN

            RAISE USING MESSAGE := verrorMessages[4];

        END IF;

        vResult := REGEXP_REPLACE(vResult, 'TMMONTH', 'MONTH', 'i');
        vVal := REGEXP_REPLACE(vVal, vLocalName, vGlobalName, 'i');
        bd := TRUE;

    END IF;

    IF vResult ~* 'TMMON' THEN

        FOR rec IN
        (
            WITH mnames AS
            (
                SELECT val,
                    TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '2017'), 'mmyyyy'), 'TMMON') AS localMonthName,
                    TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '2017'), 'mmyyyy'), 'MON') AS monthName
                FROM UNNEST(cDayMonthNumbers) AS val
            )
            SELECT m.val,
                m.localMonthName,
                m.monthName
            FROM mnames m
            WHERE pVal ~* m.localMonthName
        )
        LOOP

            vMonthNumber := rec.val;
            vLocalName := rec.localMonthName;
            vGlobalName := rec.monthName;

        END LOOP;

        IF vMonthNumber IS NULL THEN

            RAISE USING MESSAGE := verrorMessages[4];

        END IF;

            vResult := REGEXP_REPLACE(vResult, 'TMMON', 'MON', 'i');
            vVal := REGEXP_REPLACE(vVal, vLocalName, vGlobalName, 'i');
            bd := TRUE;

    END IF;
    -- day literal
    IF vResult ~* 'TMDAY' THEN

        FOR rec IN
        (
            WITH mnames AS
            (
                SELECT val,
                    TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '102017'), 'ddmmyyyy'), 'TMDAY') AS localDayName,
                    TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '102017'), 'ddmmyyyy'), 'DAY') AS dayName
                FROM UNNEST(cDayMonthNumbers) AS val
                WHERE val BETWEEN 2 AND 8
            )
            SELECT m.val,
                m.localDayName,
                m.dayName
            FROM mnames m
            WHERE pVal ~* m.localDayName
        )
        LOOP

            vDayNumber := rec.val;
            vLocalName := rec.localDayName;
            vGlobalName := rec.dayName;

        END LOOP;

        IF vDayNumber IS NULL THEN

            RAISE USING MESSAGE := verrorMessages[5];

        END IF;

            vResult := REGEXP_REPLACE(vResult, 'TMDAY', 'DAY', 'i');
            vVal := REGEXP_REPLACE(vVal, vLocalName, vGlobalName, 'i');
            bd := TRUE;

    END IF;

    IF vResult ~* 'TMDY' THEN

        FOR rec IN
        (
            WITH mnames AS
            (
                SELECT val,
                    TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '102017'), 'ddmmyyyy'), 'TMDY') AS localDayName,
                    TO_CHAR(TO_DATE(CONCAT(LPAD(val::TEXT, 2, '0'), '102017'), 'ddmmyyyy'), 'DY') AS dayName
                FROM UNNEST(cDayMonthNumbers) AS val
                WHERE val BETWEEN 2 AND 8
            )
            SELECT m.val,
                m.localDayName,
                m.dayName
            FROM mnames m
            WHERE pVal ~* m.localDayName
        )
        LOOP

            vDayNumber := rec.val;
            vLocalName := rec.localDayName;
            vGlobalName := rec.dayName;

        END LOOP;

        IF vDayNumber IS NULL THEN

            RAISE USING MESSAGE := verrorMessages[5];

        END IF;

            vResult := REGEXP_REPLACE(vResult, 'TMDY', 'DY', 'i');
            vVal := REGEXP_REPLACE(vVal, vLocalName, vGlobalName, 'i');
            bd := TRUE;

    END IF;

    IF vResult ~* 'MI' THEN
        
        vResult := REGEXP_REPLACE(vResult, 'MI', 'mi', 'i');

    END IF;

    IF vResult ~ 'Dd' THEN

        vResult := REPLACE(vResult, 'Dd', 'dd');

    END IF;

    IF vResult ~ 'dD' THEN

        vResult := REPLACE(vResult, 'dD', 'dd');

    END IF;

    -- try to calculate incomplete dates
    BEGIN

        vIncompleteYear := EXTRACT(YEAR FROM TO_TIMESTAMP(vVal, vResult));

    EXCEPTION
        WHEN OTHERS THEN

            vIncompleteYear := -1;
    END;

    IF vIncompleteYear = -1 THEN

        vVal := CONCAT
        (
            LPAD(EXTRACT(YEAR FROM CLOCK_TIMESTAMP()::TIMESTAMP(0))::TEXT, 4, '0'),
            CASE WHEN vResult !~* 'MM|MON|MONTH' THEN LPAD(EXTRACT(MONTH FROM CLOCK_TIMESTAMP()::TIMESTAMP(0))::TEXT, 2, '0') ELSE '' END,
            vVal
        );
        bd := TRUE;

        vResult := CONCAT
        (
            'YYYY',
            CASE WHEN vResult !~* 'MM|MON|MONTH' THEN 'MM' ELSE '' END,
            vResult
        );

    END IF;

    -- restore language setting if they were changed
    IF CURRENT_SETTING('lc_time') <> v_lctime THEN

        v_lctime := SET_CONFIG('lc_time', v_lctime, TRUE);

    END IF;

    IF NOT bd THEN

        INSERT INTO aws_oracle_data.tdfmt
        VALUES(pFormat, vResult)
        ON CONFLICT ON CONSTRAINT tdfmt_pkey DO NOTHING;

    END IF;

    RETURN QUERY VALUES(vVal, vResult);

END;

]]></complex-attribute>
                        <category _I_D="935704b5-143b-4ae1-acf8-cc2d8b4b6051" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="aceaefb5-50b9-4766-be49-528f363ac9de" name="to_hex" subcategories-loading="none" object-loading="extended" context="to_hex" is-trigger-function="0" unique-function-name="to_hex" is-aggregate="f" language-name="sql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="text" function-arguments="p_dec numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365296" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_dec numeric" overload-function-count="1" proc-language="sql" function-signature="to_hex(p_dec numeric)" comment="Convert decimal to hexadecimal">
                        <complex-attribute name="sql"><![CDATA[
  SELECT aws_oracle_ext.to_base($1, 16); 
]]></complex-attribute>
                        <category _I_D="ff88dd86-c106-41c5-b776-eb5937308765" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ed41e1ef-06c6-4ccd-a865-662f2e2597be" name="to_multi_byte" subcategories-loading="none" object-loading="extended" context="to_multi_byte" is-trigger-function="0" unique-function-name="to_multi_byte" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_str text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365290" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_str text" overload-function-count="1" proc-language="plpgsql" function-signature="to_multi_byte(p_str text)" comment="Returns char with all of its single-byte characters converted to their corresponding multibyte characters.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  db_encoding TEXT;

  TO_MULTI_BYTE_UTF8 CONSTANT TEXT[95] :=
  ARRAY
  [
	'\343\200\200',
	'\357\274\201',
	'\342\200\235',
	'\357\274\203',
	'\357\274\204',
	'\357\274\205',
	'\357\274\206',
	'\342\200\231',
	'\357\274\210',
	'\357\274\211',
	'\357\274\212',
	'\357\274\213',
	'\357\274\214',
	'\357\274\215',
	'\357\274\216',
	'\357\274\217',
	'\357\274\220',
	'\357\274\221',
	'\357\274\222',
	'\357\274\223',
	'\357\274\224',
	'\357\274\225',
	'\357\274\226',
	'\357\274\227',
	'\357\274\230',
	'\357\274\231',
	'\357\274\232',
	'\357\274\233',
	'\357\274\234',
	'\357\274\235',
	'\357\274\236',
	'\357\274\237',
	'\357\274\240',
	'\357\274\241',
	'\357\274\242',
	'\357\274\243',
	'\357\274\244',
	'\357\274\245',
	'\357\274\246',
	'\357\274\247',
	'\357\274\250',
	'\357\274\251',
	'\357\274\252',
	'\357\274\253',
	'\357\274\254',
	'\357\274\255',
	'\357\274\256',
	'\357\274\257',
	'\357\274\260',
	'\357\274\261',
	'\357\274\262',
	'\357\274\263',
	'\357\274\264',
	'\357\274\265',
	'\357\274\266',
	'\357\274\267',
	'\357\274\270',
	'\357\274\271',
	'\357\274\272',
	'\357\274\273',
	'\357\277\245',
	'\357\274\275',
	'\357\274\276',
	'\357\274\277',
	'\342\200\230',
	'\357\275\201',
	'\357\275\202',
	'\357\275\203',
	'\357\275\204',
	'\357\275\205',
	'\357\275\206',
	'\357\275\207',
	'\357\275\210',
	'\357\275\211',
	'\357\275\212',
	'\357\275\213',
	'\357\275\214',
	'\357\275\215',
	'\357\275\216',
	'\357\275\217',
	'\357\275\220',
	'\357\275\221',
	'\357\275\222',
	'\357\275\223',
	'\357\275\224',
	'\357\275\225',
	'\357\275\226',
	'\357\275\227',
	'\357\275\230',
	'\357\275\231',
	'\357\275\232',
	'\357\275\233',
	'\357\275\234',
	'\357\275\235',
	'\357\275\236',
	'\357\277\243'
  ];

  TO_MULTI_BYTE_EUCJP CONSTANT TEXT[95] :=
  ARRAY
  [
	'\241\241',
	'\241\252',
	'\241\311',
	'\241\364',
	'\241\360',
	'\241\363',
	'\241\365',
	'\241\307',
	'\241\312',
	'\241\313',
	'\241\366',
	'\241\334',
	'\241\244',
	'\241\335',
	'\241\245',
	'\241\277',
	'\243\260',
	'\243\261',
	'\243\262',
	'\243\263',
	'\243\264',
	'\243\265',
	'\243\266',
	'\243\267',
	'\243\270',
	'\243\271',
	'\241\247',
	'\241\250',
	'\241\343',
	'\241\341',
	'\241\344',
	'\241\251',
	'\241\367',
	'\243\301',
	'\243\302',
	'\243\303',
	'\243\304',
	'\243\305',
	'\243\306',
	'\243\307',
	'\243\310',
	'\243\311',
	'\243\312',
	'\243\313',
	'\243\314',
	'\243\315',
	'\243\316',
	'\243\317',
	'\243\320',
	'\243\321',
	'\243\322',
	'\243\323',
	'\243\324',
	'\243\325',
	'\243\326',
	'\243\327',
	'\243\330',
	'\243\331',
	'\243\332',
	'\241\316',
	'\241\357',
	'\241\317',
	'\241\260',
	'\241\262',
	'\241\306',
	'\243\341',
	'\243\342',
	'\243\343',
	'\243\344',
	'\243\345',
	'\243\346',
	'\243\347',
	'\243\350',
	'\243\351',
	'\243\352',
	'\243\353',
	'\243\354',
	'\243\355',
	'\243\356',
	'\243\357',
	'\243\360',
	'\243\361',
	'\243\362',
	'\243\363',
	'\243\364',
	'\243\365',
	'\243\366',
	'\243\367',
	'\243\370',
	'\243\371',
	'\243\372',
	'\241\320',
	'\241\303',
	'\241\321',
	'\241\301',
	'\241\261'
  ];

  map TEXT[];
  result TEXT;
BEGIN
  IF p_str ='' THEN RETURN NULL::TEXT; END IF;

  SELECT character_set_name FROM information_schema.character_sets INTO db_encoding;

  CASE db_encoding
    WHEN 'UTF8' THEN map := TO_MULTI_BYTE_UTF8;
    WHEN 'EUC_JP' THEN map := TO_MULTI_BYTE_EUCJP;
    WHEN 'PG_EUC_JIS_2004' THEN map := TO_MULTI_BYTE_EUCJP;
    ELSE RETURN p_str; --no need to convert
  END CASE;

  SELECT ARRAY_TO_STRING(ARRAY_AGG(CONCAT(CASE
                                            WHEN i BETWEEN 32 AND 126
                                            THEN CONVERT_FROM(DECODE(map[i - 32 + 1],'escape'),db_encoding)
                                            ELSE v
                                          END
                                         ,'')
                                  )
                        ,'')
    FROM (SELECT v, aws_oracle_ext.hex_to_int(LTRIM(v::BYTEA::text,'\x')) AS i
            FROM REGEXP_SPLIT_TO_TABLE(p_str,'') AS v) t
    INTO result;

  RETURN result;
END;
]]></complex-attribute>
                        <category _I_D="986ffd4e-57e6-4b8b-9c42-56963e6398e8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="42fe5730-6ecc-4c40-95ae-a126d61f3dc0" name="to_number" subcategories-loading="none" object-loading="extended" context="to_number(pval character varying)" is-trigger-function="0" unique-function-name="to_number(pval character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="numeric" function-arguments="pval character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365236" volatility="VOLATILE" is-window="f" function-identity-arguments="pval character varying" overload-function-count="6" proc-language="plpgsql" function-signature="to_number(pval character varying)" unique-suffix="(pval character varying)" routine-number="365236" comment="Converts VARCHAR to NUMBER when no additional params set">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult NUMERIC DEFAULT NULL;
BEGIN

    IF pVal IS NOT NULL AND pVal <> '' THEN

        vResult := aws_oracle_ext.to_number_formatter
        (
            pVal => pVal,
            pNoNumberFormat => 'Y'
        );

    END IF;

    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="4af0dd9f-06df-4ab7-8107-6e9c00f03e59" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4a788256-89e0-4808-844e-a3b3d3b40b44" name="to_number" subcategories-loading="none" object-loading="extended" context="to_number(pval character varying, pformat character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_number(pval character varying, pformat character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,character varying" is-returning-set="f" ret-datatype="numeric" function-arguments="pval character varying, pformat character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365237" volatility="VOLATILE" is-window="f" function-identity-arguments="pval character varying, pformat character varying, pnlsparam character varying" overload-function-count="6" proc-language="plpgsql" function-signature="to_number(pval character varying, pformat character varying, pnlsparam character varying)" unique-suffix="(pval character varying, pformat character varying, pnlsparam character varying)" routine-number="365237" comment="Converts VARCHAR to NUMBER. Some format models could return incorrect result. NLS params must be valid.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult NUMERIC DEFAULT NULL;
    vFormat VARCHAR;
BEGIN

    IF pVal IS NOT NULL AND pVal <> '' THEN

        IF pNlsParam IS NULL THEN

            SELECT f.nmodel
            INTO vFormat
            FROM aws_oracle_data.tnfmt f
            WHERE f.nmodel = pFormat;

            IF FOUND THEN

                 RETURN TO_NUMBER(pVal, vFormat);

            END IF;

        END IF;

        vResult := aws_oracle_ext.to_number_formatter
        (
            pVal      => pVal,
            pFormat   => pFormat,
            pNlsParam => pNlsParam
        );

    END IF;
    
    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="28f2c14c-eba3-4585-93bc-eaef3a44a9df" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e650bb4e-ee6e-44af-9d07-73baeb385835" name="to_number" subcategories-loading="none" object-loading="extended" context="to_number(pval double precision)" is-trigger-function="0" unique-function-name="to_number(pval double precision)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="double precision" is-returning-set="f" ret-datatype="numeric" function-arguments="pval double precision" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365224" volatility="VOLATILE" is-window="f" function-identity-arguments="pval double precision" overload-function-count="6" proc-language="plpgsql" function-signature="to_number(pval double precision)" unique-suffix="(pval double precision)" routine-number="365224" comment="Converts BINARY_DOUBLE to NUMBER, no additional params allowed">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    RETURN aws_oracle_ext.number_limit_correct(pVal::NUMERIC);

END;
]]></complex-attribute>
                        <category _I_D="73528d21-c6aa-4feb-a790-5415246c2055" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a2c2d092-8d93-45e5-b7ca-5d0bdb5b2a8e" name="to_number" subcategories-loading="none" object-loading="extended" context="to_number(pval numeric)" is-trigger-function="0" unique-function-name="to_number(pval numeric)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="numeric" function-arguments="pval numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365227" volatility="VOLATILE" is-window="f" function-identity-arguments="pval numeric" overload-function-count="6" proc-language="plpgsql" function-signature="to_number(pval numeric)" unique-suffix="(pval numeric)" routine-number="365227" comment="Converts NUMBER to NUMBER when no additional params set">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    RETURN aws_oracle_ext.number_limit_correct(pVal);

END;
]]></complex-attribute>
                        <category _I_D="14659b36-0e87-45ff-a75e-97feaa5ce516" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f7b1f7cc-cf27-4c34-a2e9-d8bf46b6c098" name="to_number" subcategories-loading="none" object-loading="extended" context="to_number(pval numeric, pformat character varying, pnlsparam character varying)" is-trigger-function="0" unique-function-name="to_number(pval numeric, pformat character varying, pnlsparam character varying)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="numeric,character varying,character varying" is-returning-set="f" ret-datatype="numeric" function-arguments="pval numeric, pformat character varying, pnlsparam character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365228" volatility="VOLATILE" is-window="f" function-identity-arguments="pval numeric, pformat character varying, pnlsparam character varying" overload-function-count="6" proc-language="plpgsql" function-signature="to_number(pval numeric, pformat character varying, pnlsparam character varying)" unique-suffix="(pval numeric, pformat character varying, pnlsparam character varying)" routine-number="365228" comment="Converts NUMBER to NUMBER when additional params are set. Some format models could return incorrect result. NLS params must be valid.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult NUMERIC DEFAULT NULL;
    vFormat VARCHAR;
BEGIN

    IF pVal IS NOT NULL THEN

        IF pNlsParam IS NULL THEN

            SELECT f.nmodel
            INTO vFormat
            FROM aws_oracle_data.tnfmt f
            WHERE f.nmodel = pFormat;

            IF FOUND THEN

                 RETURN TO_NUMBER(aws_oracle_ext.number_limit_correct(pVal), vFormat);

            END IF;

        END IF;

        vResult := aws_oracle_ext.to_number_formatter
        (
            pVal      => pVal,
            pFormat   => pFormat,
            pNlsParam => pNlsParam
        );

    END IF;
    
    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="2b999442-9b4a-4b97-b08e-a7a8abc00584" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="02ee81c3-fcdc-4f0c-af2b-0a146527855d" name="to_number" subcategories-loading="none" object-loading="extended" context="to_number(pval real)" is-trigger-function="0" unique-function-name="to_number(pval real)" is-aggregate="f" language-name="plpgsql" arguments-datatypes="real" is-returning-set="f" ret-datatype="numeric" function-arguments="pval real" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365235" volatility="VOLATILE" is-window="f" function-identity-arguments="pval real" overload-function-count="6" proc-language="plpgsql" function-signature="to_number(pval real)" unique-suffix="(pval real)" routine-number="365235" comment="Converts BINARY_FLOAT to NUMBER, no additional params allowed">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    RETURN aws_oracle_ext.number_limit_correct(pVal::NUMERIC);

END;
]]></complex-attribute>
                        <category _I_D="586a0b94-da92-492e-a57e-85488fa97ac1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="752af6b3-2ed7-4607-85c9-7ebd685720c4" name="to_number_formatter" subcategories-loading="none" object-loading="extended" context="to_number_formatter" is-trigger-function="0" unique-function-name="to_number_formatter" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyelement,character varying,character varying,character varying" is-returning-set="f" ret-datatype="numeric" function-arguments="pval anyelement, pformat character varying DEFAULT NULL::character varying, pnlsparam character varying DEFAULT NULL::character varying, pnonumberformat character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365225" volatility="VOLATILE" is-window="f" function-identity-arguments="pval anyelement, pformat character varying, pnlsparam character varying, pnonumberformat character varying" overload-function-count="1" proc-language="plpgsql" function-signature="to_number_formatter(pval anyelement, pformat character varying, pnlsparam character varying, pnonumberformat character varying)" comment="Utility function making to_number results similar to expected on Oracle side">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    rec RECORD;
    cAllowedDatatypes CONSTANT VARCHAR[] := ARRAY
    [
        'NUMERIC',
        'INTEGER',
        'CHARACTER',
        'CHARACTER VARYING',
        'TEXT'
    ];
    vResult NUMERIC DEFAULT NULL;
    vDataType VARCHAR;
    verrorMessages CONSTANT VARCHAR[] := ARRAY
    [
        'ORA-00902: invalid datatype', --1
        'ORA-22835: Buffer too small for CLOB to CHAR', --2
        'ORA-01481: invalid number format model', --3
        'ORA-12702: invalid NLS parameter string used in SQL function', --4
        'ORA-01722: invalid number', --5
        'ORA-01481: invalid number format model' --6
    ];
    vNlsParam VARCHAR;
    vNlsParamCopy VARCHAR;
    vGroupSeparator VARCHAR(2) DEFAULT NULL;
    vDecimalSeparator VARCHAR(2) DEFAULT NULL;
    vCurrencySymbol VARCHAR;
    vIsoCurrency VARCHAR;
    vDualCurrency VARCHAR;
    vVal VARCHAR;
    vFmt VARCHAR;
    vtail VARCHAR;
    vfm VARCHAR;
    vTextResult VARCHAR;
    bd BOOLEAN DEFAULT FALSE;
BEGIN

    vDataType := UPPER(PG_TYPEOF(pVal)::VARCHAR);

    IF ARRAY_POSITION(cAllowedDatatypes,  vDataType) IS NULL THEN

        RAISE USING MESSAGE := verrorMessages[1];

    END IF;

    vVal := pVal::TEXT;

    IF LENGTH(vVal) > 4000 THEN

        RAISE USING MESSAGE := verrorMessages[2];

    END IF;

    IF pNoNumberFormat IS NOT NULL THEN
        
        vResult := pVal::NUMERIC;
        bd := TRUE;

    ELSE

        CASE
            WHEN pNlsParam = '' THEN

                vResult := NULL;

            WHEN pNlsParam IS NOT NULL THEN

                SELECT STRING_AGG(CASE WHEN nls ~* 'CALENDAR' THEN '' ELSE nls END, '')
                INTO vNlsParamCopy
                FROM REGEXP_SPLIT_TO_TABLE
                ( 
                    pNlsParam,
                    'NLS_',
                'i') nls;
                
                vNlsParam := REGEXP_REPLACE
                (
                    vNlsParamCopy,
                    'NUMERIC_CHARACTERS\s*=\s*\''..\''',
                    '',
                    'i'
                );

                vNlsParam := REGEXP_REPLACE
                (
                    vNlsParam,
                    'CURRENCY\s*=\s*\''.+\''',
                    '',
                    'i'
                );

                vNlsParam := REGEXP_REPLACE
                (
                    vNlsParam,
                    'ISO_CURRENCY\s*=\s*\S+',
                    '',
                    'i'
                );

                IF LENGTH(TRIM(vNlsParam)) > 0 THEN

                    RAISE USING MESSAGE := verrorMessages[4];

                END IF;

                -- Try to get set NLS parts
                FOR rec IN 
                (
                    SELECT ARRAY_TO_STRING
                    (
                        REGEXP_MATCHES
                        (
                            vNlsParamCopy,
                            'NUMERIC_CHARACTERS\s*=\s*\''..\''',
                            'i'
                        ),''
                    ) m
                ) LOOP

                    vDecimalSeparator := SUBSTR(REGEXP_REPLACE(SUBSTRING(rec.m FROM '=\s*\S.{3}'), '=\s*', ''), 2, 1);
                    
                    IF LENGTH(vDecimalSeparator) = 0 THEN

                        RAISE USING MESSAGE := verrorMessages[4];

                    END IF;

                    vGroupSeparator := SUBSTR(REGEXP_REPLACE(SUBSTRING(rec.m FROM '=\s*\S.{3}'), '=\s*', ''), 3, 1);

                    IF LENGTH(vGroupSeparator) = 0 THEN

                        RAISE USING MESSAGE := verrorMessages[4];

                    END IF;

                    PERFORM SET_CONFIG('NLS.NUMERIC_CHARACTERS', CONCAT(vDecimalSeparator, vGroupSeparator), TRUE);

                END LOOP;

                FOR rec IN 
                (
                    SELECT ARRAY_TO_STRING
                    (
                        REGEXP_MATCHES
                        (
                            vNlsParamCopy,
                            'CURRENCY\s*=\s*\''.+\''',
                            'i'
                        ),''
                    ) m
                ) LOOP

                    vCurrencySymbol := REGEXP_REPLACE(SUBSTRING(rec.m FROM '=\s*\''.+\'''),'=\s*', '');
                    vCurrencySymbol := SUBSTR(vCurrencySymbol, 2, LENGTH(vCurrencySymbol)-2);

                    IF LENGTH(vCurrencySymbol) = 0 THEN

                        RAISE USING MESSAGE := verrorMessages[4];

                    END IF;

                    vCurrencySymbol := SET_CONFIG('NLS.CURRENCY', vCurrencySymbol, TRUE);

                END LOOP;

                FOR rec IN 
                (
                    SELECT ARRAY_TO_STRING
                    (
                        REGEXP_MATCHES
                        (
                            vNlsParamCopy,
                            'ISO_CURRENCY\s*=\s*\S+',
                            'i'
                        ),''
                    ) m
                ) LOOP

                    vIsoCurrency := REGEXP_REPLACE(SUBSTRING(rec.m FROM '=\s*\S+'), '(=\s*)(\S+)', '\2');

                    IF LENGTH(vIsoCurrency) = 0 THEN

                        RAISE USING MESSAGE := verrorMessages[4];

                    END IF;

                    BEGIN

                        SELECT anp.params_dictionary ->> 'NLS_ISO_CURRENCY' AS NLS_ISO_CURRENCY,
                            COALESCE(vCurrencySymbol, anp.params_dictionary ->> 'NLS_CURRENCY') AS NLS_CURRENCY,
                            anp.params_dictionary ->> 'NLS_DUAL_CURRENCY' AS NLS_DUAL_CURRENCY
                        INTO vIsoCurrency,
                            vCurrencySymbol,
                            vDualCurrency
                        FROM aws_oracle_ext.nls_parameters anp
                        WHERE anp.nls_territory = UPPER(TRIM(vIsoCurrency));

                        IF NOT FOUND THEN

                            RAISE USING MESSAGE := verrorMessages[4];

                        END IF;

                        vIsoCurrency := SET_CONFIG('NLS.ISO_CURRENCY', vIsoCurrency, TRUE);
                        vCurrencySymbol := SET_CONFIG('NLS.CURRENCY', vCurrencySymbol, TRUE);
                        vDualCurrency := SET_CONFIG('NLS.DUAL_CURRENCY', vDualCurrency, TRUE);

                    EXCEPTION
                        WHEN NO_DATA_FOUND THEN

                            RAISE USING MESSAGE := verrorMessages[4];
                    END;

                END LOOP;

            ELSE

                NULL;       

        END CASE;

        vtail:= pFormat;

        LOOP

            SELECT ok, tail, fm
            INTO vFmt, vtail, vfm
            FROM aws_oracle_ext.to_char_parser
            (
                pStr  => vtail,
                pType => 'number',
                pFm   => vfm
            );
            
        
            vTextResult := CONCAT(vTextResult, vFmt);

            EXIT WHEN vtail IS NULL;

        END LOOP;

        /* Restrictions */
            --A comma element cannot begin a number format model
        IF SUBSTR(vTextResult, 1, 1) = ',' THEN

            RAISE USING MESSAGE := verrorMessages[6];

        END IF;
        -- A comma cannot appear to the right of a decimal
        -- character or period in a number format model
        CASE 
            WHEN vTextResult ~* '[\.D].*\,' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            --only one period in a number format model
            WHEN vTextResult ~ '\..*\.' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- only one decimal character in a number format model
            WHEN vTextResult ~* 'd.*d' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- group separator cannot appear to the right of a decimal 
            -- character or period in a number format model
            -- V also
            WHEN vTextResult ~* '[\.DV].*g' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- Start with g is not allowed
            WHEN vTextResult ~* '^G' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- It's not allowed to mix different type group and
            -- decimal model symbols
            WHEN vTextResult ~ '\.|\,' AND vTextResult ~* 'D|G' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- The MI format element can appear only in the last position 
            -- of a number format model
            WHEN vTextResult ~* 'MI.+' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            --The PR format element can appear only in the last position
            -- of a number format model
            WHEN vTextResult ~* 'PR.+' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- The S format element can appear only in the first 
            -- or last position of a number format model
            WHEN vTextResult ~* '[^S]+S[^S]+' OR vTextResult ~* 'S[^S]*S' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- You cannot precede this element with any other element
            WHEN vTextResult ~* '.+TM' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- You can follow this element only with one 9 or 
            -- one E (or e), but not with any combination of these
            WHEN vTextResult ~* 'TM.{2,}' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            WHEN vTextResult ~* 'TM[^9e]' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- You can precede this element only with 0 (which returns leading zeroes)
            -- or FM. Any other elements return an error
            WHEN vTextResult ~* '.*X.?'
                AND vTextResult !~* '^0+X{1,}$'
                AND vTextResult !~* '^FMX{1,}$'
                AND vTextResult !~* '^FM0{1,}X{1,}$'
                AND vTextResult !~* '^X{1,}$' THEN

                    RAISE USING MESSAGE := verrorMessages[6];
            -- only one $ allowed
            WHEN vTextResult ~ '\$.*\$' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- only one C allowed
            WHEN vTextResult ~* 'C.*C' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- only one L allowed
            WHEN vTextResult ~* 'L.*L' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- only one U allowed
            WHEN vTextResult ~* 'U.*U' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- C, L, $, U together is not allowed
            WHEN vTextResult ~* 'C.*[\$LU]' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            WHEN vTextResult ~* '[UL\$].*C' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- only one V allowed
            WHEN vTextResult ~* 'V.*V' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- V and period or decimal is not allowed
            WHEN vTextResult ~* 'V.*[\.D]' OR vTextResult ~* '[\.D].*V' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- If RN - no other models allowed
            WHEN vTextResult ~* '.+RN' OR vTextResult ~* 'RN.+' THEN

                RAISE USING MESSAGE := verrorMessages[6];
            -- Only EEEE is not allowed. No chars after EEEE. No comma before EEEE
            WHEN vTextResult ~* '^EEEE$' 
                OR vTextResult ~* 'EEEE[^S]+' 
                OR vTextResult ~* '\,.*EEEE'
                OR vTextResult ~* 'EEEE.{2,}' THEN

                    RAISE USING MESSAGE := verrorMessages[6];
            ELSE

                NULL;
        END CASE;
        
        -- converting
        IF vTextResult ~* 'U|C|L' THEN

            bd := TRUE;

            FOR rec IN
            (
                SELECT
                (SELECT value FROM aws_oracle_ext.v$nls_parameters  WHERE parameter = 'NLS_ISO_CURRENCY') AS nls_iso_currency,
                (SELECT value FROM aws_oracle_ext.v$nls_parameters  WHERE parameter = 'NLS_CURRENCY') AS nls_currency,
                (SELECT value FROM aws_oracle_ext.v$nls_parameters  WHERE parameter = 'NLS_DUAL_CURRENCY') AS nls_dual_currency
            )
            LOOP

                IF vTextResult ~* 'U' THEN

                    vVal := REGEXP_REPLACE(vVal, rec.nls_dual_currency, '$', 'i');
                    vTextResult := REGEXP_REPLACE(vTextResult, 'U', '$', 'i');

                END IF;

                IF vTextResult ~* 'C' THEN

                    vVal := REGEXP_REPLACE(vVal, rec.nls_iso_currency, '$' , 'i');
                    vTextResult := REGEXP_REPLACE(vTextResult, 'C', '$', 'i');

                END IF;

                IF vTextResult ~* 'L' THEN

                    vVal := REGEXP_REPLACE(vVal, rec.nls_currency, '$' , 'i');
                    vTextResult := REGEXP_REPLACE(vTextResult, 'L', '$', 'i');

                END IF;

            END LOOP;

        END IF;

        IF vTextResult ~* 'G|D' AND vDecimalSeparator IS NOT NULL AND vGroupSeparator IS NOT NULL THEN

            bd := TRUE;

            vVal := REGEXP_REPLACE(vVal, vDecimalSeparator, '.', 'i');
            vVal := REGEXP_REPLACE(vVal, vGroupSeparator, ',', 'ig');

            vTextResult := REGEXP_REPLACE(vTextResult, 'D', '.', 'i');
            vTextResult := REGEXP_REPLACE(vTextResult, 'G', ',', 'ig');

        END IF;
        
        CASE
            WHEN vTextResult ~* 'X' THEN

                bd := TRUE;

                EXECUTE 'SELECT x''' || vVal || '''::BIGINT::NUMERIC' INTO vResult;

            WHEN vTextResult ~* 'EEEE' THEN

                bd := TRUE;

                vResult := vVal::NUMERIC;

            ELSE

                vResult := TO_NUMBER(vVal, vTextResult);

        END CASE;

    END IF;

    IF NOT bd THEN

        INSERT INTO aws_oracle_data.tnfmt
        VALUES(pFormat)
        ON CONFLICT ON CONSTRAINT tnfmt_pkey DO NOTHING;

    END IF;

    RETURN aws_oracle_ext.number_limit_correct(vResult);

END;
]]></complex-attribute>
                        <category _I_D="9c427bda-e14f-43e1-8422-a7b217024014" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="538e50cc-6fe1-4292-ac08-10ab6fc7bf5f" name="to_oct" subcategories-loading="none" object-loading="extended" context="to_oct" is-trigger-function="0" unique-function-name="to_oct" is-aggregate="f" language-name="sql" arguments-datatypes="numeric" is-returning-set="f" ret-datatype="text" function-arguments="p_dec numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365297" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_dec numeric" overload-function-count="1" proc-language="sql" function-signature="to_oct(p_dec numeric)" comment="Convert decimal to octal">
                        <complex-attribute name="sql"><![CDATA[
  SELECT aws_oracle_ext.to_base($1, 8); 
]]></complex-attribute>
                        <category _I_D="2ce5dc06-04f4-4135-bff1-0c4c105ad5a7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="34ac0755-c593-4cc5-a504-a05ab410905a" name="to_single_byte" subcategories-loading="none" object-loading="extended" context="to_single_byte" is-trigger-function="0" unique-function-name="to_single_byte" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="p_str text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365291" volatility="IMMUTABLE" is-window="f" function-identity-arguments="p_str text" overload-function-count="1" proc-language="plpgsql" function-signature="to_single_byte(p_str text)" comment="Returns char with all of its multibyte characters converted to their corresponding single-byte characters.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  db_encoding TEXT;

  TO_MULTI_BYTE_UTF8 CONSTANT TEXT[95] :=
  ARRAY
  [
	'\343\200\200',
	'\357\274\201',
	'\342\200\235',
	'\357\274\203',
	'\357\274\204',
	'\357\274\205',
	'\357\274\206',
	'\342\200\231',
	'\357\274\210',
	'\357\274\211',
	'\357\274\212',
	'\357\274\213',
	'\357\274\214',
	'\357\274\215',
	'\357\274\216',
	'\357\274\217',
	'\357\274\220',
	'\357\274\221',
	'\357\274\222',
	'\357\274\223',
	'\357\274\224',
	'\357\274\225',
	'\357\274\226',
	'\357\274\227',
	'\357\274\230',
	'\357\274\231',
	'\357\274\232',
	'\357\274\233',
	'\357\274\234',
	'\357\274\235',
	'\357\274\236',
	'\357\274\237',
	'\357\274\240',
	'\357\274\241',
	'\357\274\242',
	'\357\274\243',
	'\357\274\244',
	'\357\274\245',
	'\357\274\246',
	'\357\274\247',
	'\357\274\250',
	'\357\274\251',
	'\357\274\252',
	'\357\274\253',
	'\357\274\254',
	'\357\274\255',
	'\357\274\256',
	'\357\274\257',
	'\357\274\260',
	'\357\274\261',
	'\357\274\262',
	'\357\274\263',
	'\357\274\264',
	'\357\274\265',
	'\357\274\266',
	'\357\274\267',
	'\357\274\270',
	'\357\274\271',
	'\357\274\272',
	'\357\274\273',
	'\357\277\245',
	'\357\274\275',
	'\357\274\276',
	'\357\274\277',
	'\342\200\230',
	'\357\275\201',
	'\357\275\202',
	'\357\275\203',
	'\357\275\204',
	'\357\275\205',
	'\357\275\206',
	'\357\275\207',
	'\357\275\210',
	'\357\275\211',
	'\357\275\212',
	'\357\275\213',
	'\357\275\214',
	'\357\275\215',
	'\357\275\216',
	'\357\275\217',
	'\357\275\220',
	'\357\275\221',
	'\357\275\222',
	'\357\275\223',
	'\357\275\224',
	'\357\275\225',
	'\357\275\226',
	'\357\275\227',
	'\357\275\230',
	'\357\275\231',
	'\357\275\232',
	'\357\275\233',
	'\357\275\234',
	'\357\275\235',
	'\357\275\236',
	'\357\277\243'
  ];

  TO_MULTI_BYTE_EUCJP CONSTANT TEXT[95] :=
  ARRAY
  [
	'\241\241',
	'\241\252',
	'\241\311',
	'\241\364',
	'\241\360',
	'\241\363',
	'\241\365',
	'\241\307',
	'\241\312',
	'\241\313',
	'\241\366',
	'\241\334',
	'\241\244',
	'\241\335',
	'\241\245',
	'\241\277',
	'\243\260',
	'\243\261',
	'\243\262',
	'\243\263',
	'\243\264',
	'\243\265',
	'\243\266',
	'\243\267',
	'\243\270',
	'\243\271',
	'\241\247',
	'\241\250',
	'\241\343',
	'\241\341',
	'\241\344',
	'\241\251',
	'\241\367',
	'\243\301',
	'\243\302',
	'\243\303',
	'\243\304',
	'\243\305',
	'\243\306',
	'\243\307',
	'\243\310',
	'\243\311',
	'\243\312',
	'\243\313',
	'\243\314',
	'\243\315',
	'\243\316',
	'\243\317',
	'\243\320',
	'\243\321',
	'\243\322',
	'\243\323',
	'\243\324',
	'\243\325',
	'\243\326',
	'\243\327',
	'\243\330',
	'\243\331',
	'\243\332',
	'\241\316',
	'\241\357',
	'\241\317',
	'\241\260',
	'\241\262',
	'\241\306',
	'\243\341',
	'\243\342',
	'\243\343',
	'\243\344',
	'\243\345',
	'\243\346',
	'\243\347',
	'\243\350',
	'\243\351',
	'\243\352',
	'\243\353',
	'\243\354',
	'\243\355',
	'\243\356',
	'\243\357',
	'\243\360',
	'\243\361',
	'\243\362',
	'\243\363',
	'\243\364',
	'\243\365',
	'\243\366',
	'\243\367',
	'\243\370',
	'\243\371',
	'\243\372',
	'\241\320',
	'\241\303',
	'\241\321',
	'\241\301',
	'\241\261'
  ];

  map TEXT[];
  result TEXT;
BEGIN
  IF p_str ='' THEN RETURN NULL::TEXT; END IF;

  SELECT character_set_name FROM information_schema.character_sets INTO db_encoding;

  CASE db_encoding
    WHEN 'UTF8' THEN map := TO_MULTI_BYTE_UTF8;
    WHEN 'EUC_JP' THEN map := TO_MULTI_BYTE_EUCJP;
    WHEN 'PG_EUC_JIS_2004' THEN map := TO_MULTI_BYTE_EUCJP;
    ELSE RETURN p_str; --no need to convert
  END CASE;

  SELECT ARRAY_TO_STRING(ARRAY_AGG(CONCAT(CASE
                                            WHEN array_position(map,u) IS NOT NULL
                                            THEN CONVERT_FROM(DECODE(to_hex(array_position(map,u)+32-1),'hex'),db_encoding)
                                            ELSE v
                                          END
                                         ,'')
                                  )
                        ,'')
    FROM (SELECT v, encode(v::bytea,'escape') AS u
            FROM REGEXP_SPLIT_TO_TABLE(p_str,'') AS v) t
    INTO result;

  RETURN result;
END;
]]></complex-attribute>
                        <category _I_D="3458dfba-ec82-490f-87a8-c3f43f938174" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="38845e12-cd23-4260-9ff7-78b8ef1eaeac" name="trim" subcategories-loading="none" object-loading="extended" context="trim" is-trigger-function="0" unique-function-name="trim" is-aggregate="f" language-name="plpgsql" arguments-datatypes="anyarray,numeric" is-returning-set="f" ret-datatype="anyarray" function-arguments="parray anyarray, pn numeric DEFAULT NULL::numeric" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365238" volatility="VOLATILE" is-window="f" function-identity-arguments="parray anyarray, pn numeric" overload-function-count="1" proc-language="plpgsql" function-signature="trim(parray anyarray, pn numeric)" comment="Implements Oracle Collection method TRIM">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    
    vN INTEGER;
    vLength INTEGER;
BEGIN

    vLength := ARRAY_LENGTH(pArray, 1);
    
    IF pn IS NULL THEN

        vN := 1;

    ELSE

        vN := ROUND(pn)::INTEGER;

    END IF;

    IF vN < 0 THEN 
    
        RAISE EXCEPTION USING MESSAGE := 'ORA-06502: PL/SQL: numeric or value error';

    END IF;
    
    IF vN > vLength THEN
    
        RAISE EXCEPTION USING MESSAGE := 'ORA-06533: Subscript beyond count';

    END IF;

    RETURN pArray[1:vLength - vN];

END;
]]></complex-attribute>
                        <category _I_D="6e07bb42-0c32-47c9-aa57-b2c4fde8232e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="b0c6c3dd-445b-4831-bb6e-a7d0eda47c38" name="trunc" subcategories-loading="none" object-loading="extended" context="trunc" is-trigger-function="0" unique-function-name="trunc" is-aggregate="f" language-name="sql" arguments-datatypes="timestamp without time zone,character varying" is-returning-set="f" ret-datatype="timestamp" function-arguments="p_date timestamp without time zone, p_fmt character varying DEFAULT 'DD'::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365239" volatility="VOLATILE" is-window="f" function-identity-arguments="p_date timestamp without time zone, p_fmt character varying" overload-function-count="1" proc-language="sql" function-signature="trunc(p_date timestamp without time zone, p_fmt character varying)">
                        <complex-attribute name="sql"><![CDATA[
    SELECT
        CASE
            WHEN LENGTH(p_fmt) = 0 THEN
                
                NULL::TIMESTAMP
            
            WHEN UPPER(p_fmt) IN
            (
                'CC', 'SCC', 'SYYYY', 'YYYY', 'YEAR', 'SYEAR', 'YYY', 'YY', 'Y', 'Q',
                'MONTH', 'MON', 'MM', 'RM', 'IW', 'DDD', 'DD', 'J', 'HH', 'HH12', 'HH24', 'MI'
            ) THEN

                DATE_TRUNC
                (
                    CASE
                        WHEN UPPER(p_fmt) IN ('CC', 'SCC') THEN 'CENTURY'
                        WHEN UPPER(p_fmt) IN ('SYYYY', 'YYYY', 'YEAR', 'SYEAR', 'YYY', 'YY', 'Y') THEN 'YEAR'
                        WHEN UPPER(p_fmt) = 'Q' THEN 'QUARTER'
                        WHEN UPPER(p_fmt) IN ('MONTH', 'MON', 'MM', 'RM') THEN 'MONTH'
                        WHEN UPPER(p_fmt) = 'IW' THEN 'WEEK'
                        WHEN UPPER(p_fmt) IN ('DDD', 'DD', 'J') THEN 'DAY'
                        WHEN UPPER(p_fmt) IN ('HH', 'HH12', 'HH24') THEN 'HOUR'
                        WHEN UPPER(p_fmt) = 'MI' THEN 'MINUTE'
                    END,
                    p_date
                )
            
            WHEN UPPER(p_fmt) IN ('IYYY', 'IYY', 'IY', 'I') THEN

                CASE
                    WHEN 
                    (
                        EXTRACT 
                        (
                            EPOCH FROM
                            aws_oracle_ext.next_day
                            (
                                TO_TIMESTAMP('01.01.' || extract(ISOYEAR from p_date)::INTEGER, 'DD.MM.YYYY')::TIMESTAMP,
                                'MONDAY'
                            ) - TO_TIMESTAMP('01.01.' || extract(ISOYEAR from p_date)::INTEGER, 'DD.MM.YYYY')::TIMESTAMP
                        )/86400
                    )::INTEGER >= 4 THEN

                        aws_oracle_ext.next_day
                        (
                            TO_TIMESTAMP('01.01.' || extract(ISOYEAR from p_date)::INTEGER, 'DD.MM.YYYY')::TIMESTAMP - INTERVAL '7' DAY,
                            'MONDAY'
                        )
                        
                    ELSE
                        aws_oracle_ext.next_day
                        (
                            TO_TIMESTAMP('01.01.' || extract(ISOYEAR from p_date)::INTEGER, 'DD.MM.YYYY')::TIMESTAMP,
                            'MONDAY'
                        )
                END

            WHEN UPPER(p_fmt) IN ('W', 'WW') THEN

                aws_oracle_ext.next_day
                (
                    DATE_TRUNC('DAY',p_date) - INTERVAL '7' DAY,
                    RTRIM
                    (
                        TO_CHAR
                        (
                            DATE_TRUNC
                            (
                                CASE
                                    WHEN UPPER(p_fmt) = 'W' THEN 'MONTH'
                                    ELSE 'YEAR'
                                END,
                                p_date
                            ),
                            'DAY'
                        )
                    )
                )

            WHEN UPPER(p_fmt) IN ('DAY', 'DY', 'D') THEN
            -- todo d is incorrect 

                aws_oracle_ext.next_day
                (
                    DATE_TRUNC('DAY',p_date) - INTERVAL '7' DAY,
                    'MONDAY'
                )

            ELSE

                DATE_TRUNC(p_fmt, p_date)

        END;

]]></complex-attribute>
                        <category _I_D="aa09d66d-7e93-4336-a591-f9fdc4ae32d7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="aebad49f-6618-4dbe-900d-0965f9b4278f" name="unistr" subcategories-loading="none" object-loading="extended" context="unistr" is-trigger-function="0" unique-function-name="unistr" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="text" function-arguments="asourcetext text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365240" volatility="VOLATILE" is-window="f" function-identity-arguments="asourcetext text" overload-function-count="1" proc-language="plpgsql" function-signature="unistr(asourcetext text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  idx        int;
  len        int;
  lSymb      varchar;
  lChar      char;
  test_cur   refcursor;
  lResult    text;
BEGIN
  len := LENGTH(aSourceText);
  idx := 1;
  lResult := '';
 
  LOOP
    lSymb := SUBSTR(aSourceText, idx, 1);
 
    IF lSymb = '\' THEN
      lSymb := SUBSTR(aSourceText, idx + 1, 4);
      OPEN test_cur FOR EXECUTE 'SELECT chr(x'''|| lSymb || '''::int)';
      FETCH test_cur INTO lChar;
      CLOSE test_cur;
      lResult := CONCAT(lResult, lChar);
      idx := idx + 4;
    ELSE    
      lResult := CONCAT(lResult, lSymb);
    END IF;
        
    IF idx = len THEN
      EXIT;
    ELSE
      idx := idx + 1;
      CONTINUE;
    END IF;
    
  END LOOP;

  RETURN lResult;
END;
]]></complex-attribute>
                        <category _I_D="783d3ba5-2ea9-430f-9bce-2dd212ae0cda" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="27d1fdd9-1a32-4d7d-bc76-573ab09492ff" name="update_job" subcategories-loading="none" object-loading="extended" context="update_job" is-trigger-function="0" unique-function-name="update_job" is-aggregate="f" language-name="plpgsql" arguments-datatypes="bigint,text" is-returning-set="f" ret-datatype="void" function-arguments="p_job bigint, p_error_message text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365241" volatility="VOLATILE" is-window="f" function-identity-arguments="p_job bigint, p_error_message text" overload-function-count="1" proc-language="plpgsql" function-signature="update_job(p_job bigint, p_error_message text)">
                        <complex-attribute name="sql"><![CDATA[
  declare
    l_failure boolean := p_error_message is not null and p_error_message <> '';
    l_interval aws_oracle_ext.jobs."interval"%type;
    l_next_date timestamp with time zone;
    l_now timestamp with time zone := clock_timestamp();
  begin
    begin
      select j.interval into strict l_interval from aws_oracle_ext.jobs j where j.job = p_job;
    exception
      when no_data_found then
        raise exception 'Job #% not found', p_job;
    end;
  
    execute 'select ' || l_interval into l_next_date;

    if l_next_date is not null or l_failure then
      update aws_oracle_ext.jobs j
         set last_date = case when l_failure then last_date else this_date end
           , this_date = null
           , failures = case when l_failure then failures + 1 else 0 end
           , broken = case when l_failure and failures + 1 > 16 then 'Y' else 'N' end
           , last_failure_message = case when l_failure then p_error_message end
           , next_date = coalesce( l_next_date, next_date )
           , total_time = total_time + case when l_failure then 0 else extract( second from l_now - this_date ) end
       where j.job = p_job
         and j.this_date is not null;
    end if;   

    if l_next_date is null and not l_failure then
      delete from aws_oracle_ext.jobs where job = p_job;
    end if;
  end;
]]></complex-attribute>
                        <category _I_D="438e1b25-57b3-409b-8ab4-4990715a90b8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="57f0eec6-3a79-478a-9067-0761e36ee818" name="userenv" subcategories-loading="none" object-loading="extended" context="userenv" is-trigger-function="0" unique-function-name="userenv" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="parameter character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365243" volatility="VOLATILE" is-window="f" function-identity-arguments="parameter character varying" overload-function-count="1" proc-language="plpgsql" function-signature="userenv(parameter character varying)">
                        <complex-attribute name="sql"><![CDATA[
begin
  if upper(parameter) in ('ISDBA', 'LANG', 'LANGUAGE', 'CLIENT_INFO', 'TERMINAL') then
  return aws_oracle_ext.SYS_CONTEXT_USERENV(parameter);
  else raise EXCEPTION 'invalid USERENV parameter';  
  end if;
end;
]]></complex-attribute>
                        <category _I_D="1bb11235-b63a-468c-ae95-d462f6adaa2e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="c3835f79-aeee-4910-8fe8-c6711f36487e" name="userenv_number" subcategories-loading="none" object-loading="extended" context="userenv_number" is-trigger-function="0" unique-function-name="userenv_number" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="int4" function-arguments="parameter character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365242" volatility="VOLATILE" is-window="f" function-identity-arguments="parameter character varying" overload-function-count="1" proc-language="plpgsql" function-signature="userenv_number(parameter character varying)">
                        <complex-attribute name="sql"><![CDATA[
begin
  if upper(parameter) = ('SESSIONID') then
    return pg_backend_pid();
  else 
    /*another  calls with the COMMITSCN and ENTRYID parameters have no analogs in PostgreSQL*/
    return NULL;
  end if;
end;
]]></complex-attribute>
                        <category _I_D="ec9e02c7-77d3-4371-90e2-6ea6561b0668" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0fe027ed-70a2-4e74-858a-23ecc1dc2f65" name="utl_encode$base64" subcategories-loading="none" object-loading="extended" context="utl_encode$base64" is-trigger-function="0" unique-function-name="utl_encode$base64" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365244" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="utl_encode$base64()" comment="Emulates UTL_ENCODE.BASE64 package constant">
                        <complex-attribute name="sql"><![CDATA[  
begin
  return 1;
end;
]]></complex-attribute>
                        <category _I_D="389c3d2e-7be6-4789-a43e-8e5cee4dbef6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7e2ae98c-c1dd-4907-862f-c6a01639786b" name="utl_encode$mimeheader_decode" subcategories-loading="none" object-loading="extended" context="utl_encode$mimeheader_decode" is-trigger-function="0" unique-function-name="utl_encode$mimeheader_decode" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="buf character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365245" volatility="VOLATILE" is-window="f" function-identity-arguments="buf character varying" overload-function-count="1" proc-language="plpgsql" function-signature="utl_encode$mimeheader_decode(buf character varying)" comment="This function accepts as input an &quot;encoded word&quot; of the form:&amp;#x000a;=?&lt;charset&gt;?&lt;encoding&gt;?&lt;encoded text&gt;?= &amp;#x000a;=?ISO-8859-1?Q?Here is some encoded text?= &amp;#x000a;The &lt;encoded text&gt; is encapsulated in mime header tags which give the MIMEHEADER_DECODE function information about how to decode the string. &amp;#x000a;The mime header metadata tags are stripped from the input string and the &lt;encoded text&gt; is converted to the base database character set&amp;#x000a;">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
  l_charset CHARACTER VARYING;
  encoding_flag  CHARACTER VARYING;
BEGIN
  l_charset := (regexp_matches(buf, '\=\?(.*?)\?', 'g'))[1];
  encoding_flag := (regexp_matches(buf, '\?(.)\?', 'g'))[1];

  if l_charset is null or encoding_flag is null then return null; end if;  

  buf := (regexp_matches(buf, concat(encoding_flag, '\?(.*?)\?\='), 'g'))[1];

  return decode(convert_from(buf::bytea, l_charset), case when encoding_flag = 'B' then 'base64' else 'escape' end); 
END
]]></complex-attribute>
                        <category _I_D="f36339ec-3652-46bf-b324-2e94707455c1" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d778e653-1f68-43db-99bd-ebd151636d88" name="utl_encode$mimeheader_encode" subcategories-loading="none" object-loading="extended" context="utl_encode$mimeheader_encode" is-trigger-function="0" unique-function-name="utl_encode$mimeheader_encode" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,integer" is-returning-set="f" ret-datatype="varchar" function-arguments="buf character varying, encode_charset character varying DEFAULT NULL::character varying, encoding_flag integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365246" volatility="VOLATILE" is-window="f" function-identity-arguments="buf character varying, encode_charset character varying, encoding_flag integer" overload-function-count="1" proc-language="plpgsql" function-signature="utl_encode$mimeheader_encode(buf character varying, encode_charset character varying, encoding_flag integer)" comment="The buf input parameter is the text to be encoded and becomes the &lt;encoded text&gt;.&amp;#x000a;The &lt;encoding&gt; value is either &quot;Q&quot; or &quot;B&quot; for quoted-printable encode or base64 encoding respectively. The ENCODING input parameter accepts as valid values UTL_ENCODE.QUOTED_PRINTABLE or UTL_ENCODE.BASE64 or NULL. If NULL, quoted-printable encoding is selected as a default value.&amp;#x000a;The &lt;charset&gt; value is specified as the input parameter encode_charset. If NULL, the database character set is selected as a default value.&amp;#x000a;">
                        <complex-attribute name="sql"><![CDATA[  
BEGIN
  if encode_charset is null then
    -- if encode_charset is null the current db charset will be used instead 
    SELECT pg_encoding_to_char(encoding) into encode_charset FROM pg_database WHERE datname = current_database();
  else 
    -- override encode_charset due mapping info
    encode_charset := aws_oracle_ext.get_charset_name(encode_charset);   
  end if;
  return concat('=?', 
		encode_charset, 
		case when encoding_flag = 1 then '?B?' else '?Q?' end, 
		encode(convert_to(buf, encode_charset)::bytea, case when encoding_flag = 1 then 'base64' else 'escape' end), 		
		'?=');
END;  
]]></complex-attribute>
                        <category _I_D="2995db8a-4c2a-4b3e-924a-ecfe99c9c569" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ad5e1f39-ab53-44ee-93a9-9b708363769a" name="utl_encode$quoted_printable" subcategories-loading="none" object-loading="extended" context="utl_encode$quoted_printable" is-trigger-function="0" unique-function-name="utl_encode$quoted_printable" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="int4" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365247" volatility="IMMUTABLE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="utl_encode$quoted_printable()" comment="Emulates UTL_ENCODE.BASE64 package constant">
                        <complex-attribute name="sql"><![CDATA[  
begin
  return 2;
end;
]]></complex-attribute>
                        <category _I_D="01c7a85c-847c-4a3d-b738-4beea24d9f54" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="cef42a21-43f7-4820-9b2b-9586fc011981" name="utl_encode$text_decode" subcategories-loading="none" object-loading="extended" context="utl_encode$text_decode" is-trigger-function="0" unique-function-name="utl_encode$text_decode" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,integer" is-returning-set="f" ret-datatype="varchar" function-arguments="buf character varying, encode_charset character varying DEFAULT NULL::character varying, encoding_flag integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365248" volatility="VOLATILE" is-window="f" function-identity-arguments="buf character varying, encode_charset character varying, encoding_flag integer" overload-function-count="1" proc-language="plpgsql" function-signature="utl_encode$text_decode(buf character varying, encode_charset character varying, encoding_flag integer)" comment="This function converts the input text to the target character set as specified by the encode_charset parameter, if not NULL. The encoded text is converted to the base character set of database">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
BEGIN
  if encode_charset is not null then buf := convert_from(buf::bytea, encode_charset); end if;
  return decode(buf, case when encoding_flag = 1 then 'base64' else 'escape' end); 
END;
]]></complex-attribute>
                        <category _I_D="a40d5e56-d42d-4f79-9e3a-b6a75b3a9319" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3d0fe55a-3893-4c3e-86a0-190ca08e26da" name="utl_encode$text_encode" subcategories-loading="none" object-loading="extended" context="utl_encode$text_encode" is-trigger-function="0" unique-function-name="utl_encode$text_encode" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,character varying,integer" is-returning-set="f" ret-datatype="varchar" function-arguments="buf character varying, encode_charset character varying DEFAULT NULL::character varying, encoding_flag integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365249" volatility="VOLATILE" is-window="f" function-identity-arguments="buf character varying, encode_charset character varying, encoding_flag integer" overload-function-count="1" proc-language="plpgsql" function-signature="utl_encode$text_encode(buf character varying, encode_charset character varying, encoding_flag integer)" comment="This function converts the input text to the target character set as specified by the encode_charset parameter, if not NULL. &amp;#x000a;The text is encoded to either base64 or quoted-printable format, as specified by the encoding parameter.">
                        <complex-attribute name="sql"><![CDATA[  
BEGIN
  if encode_charset is null then    
    SELECT pg_encoding_to_char(encoding) into encode_charset FROM pg_database WHERE datname = current_database();
  else 
    encode_charset := aws_oracle_ext.get_charset_name(encode_charset);   
  end if;
  return encode(convert_to(buf, encode_charset)::bytea, case when encoding_flag = 1 then 'base64' else 'escape' end);
END;  
]]></complex-attribute>
                        <category _I_D="376fa60d-ad9f-4f48-822f-523a4a92e879" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="db553f55-f1f0-46c7-924f-5703ddf78f93" name="utl_file$exceptions" subcategories-loading="none" object-loading="extended" context="utl_file$exceptions" is-trigger-function="0" unique-function-name="utl_file$exceptions" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text" is-returning-set="f" ret-datatype="void" function-arguments="src_exception text" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365696" volatility="VOLATILE" is-window="f" function-identity-arguments="src_exception text" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$exceptions(src_exception text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    oracodes CONSTANT JSONB :=
    '
    {
        "invalid_path": {
            "code": -29280,
            "message": "invalid directory path"
        },
        "invalid_mode": {
            "code": -29281,
            "message": "invalid mode"
        },
        "invalid_filehandle": {
            "code": -29282,
            "message": "invalid file ID"
        },
        "invalid_operation": {
            "code": -29283,
            "message": "invalid file operation"
        },
        "read_error": {
            "code": -29284,
            "message": "file read error"
        },
        "write_error": {
            "code": -29285,
            "message": "file write error"
        },
        "internal_error": {
            "code": -29286,
            "message": "internal error"
        },
        "charsetmismatch": {
            "code": -29298,
            "message": "Character set mismatch"
        },
        "invalid_maxlinesize": {
            "code": -29287,
            "message": "invalid maximum line size"
        },
        "invalid_filename": {
            "code": -29288,
            "message": "invalid file name"
        },
        "access_denied": {
            "code": -29289,
            "message": "directory access denied"
        },
        "invalid_offset": {
            "code": -29290,
            "message": "invalid offset specified for seek"
        },
        "delete_failed": {
            "code": -29291,
            "message": "file remove operation failed"
        },
        "rename_failed": {
            "code": -29292,
            "message": "file rename operation failed"
        }
    }
    '::JSONB;
    vCode TEXT;
    vException TEXT;
    vMessage TEXT;
BEGIN

    vException := TRIM(LOWER(src_exception));

    IF vException = 'no_data_found' THEN

        RAISE no_data_found;

    END IF;

    IF NOT oracodes ? vException THEN

        RAISE UNDEFINED_OBJECT;

    ELSE

        vCode := oracodes -> vException ->> 'code' ;

        vMessage := oracodes -> vException ->> 'message';
        
        RAISE USING HINT = vCode, message = vMessage;

    END IF;

END;        
]]></complex-attribute>
                        <category _I_D="01ac664d-15fb-4673-98ec-f09500206412" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="074b7543-c50c-4384-8005-a1bb3873710e" name="utl_file$fclose" subcategories-loading="none" object-loading="extended" context="utl_file$fclose" is-trigger-function="0" unique-function-name="utl_file$fclose" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_file$file_type&quot;" is-returning-set="f" ret-datatype="utl_file$file_type" function-arguments="INOUT file aws_oracle_ext.&quot;utl_file$file_type&quot;" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365698" volatility="VOLATILE" is-window="f" function-identity-arguments="INOUT file aws_oracle_ext.&quot;utl_file$file_type&quot;" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$fclose(INOUT file aws_oracle_ext.&quot;utl_file$file_type&quot;)">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    DELETE FROM aws$utl_file_files
    WHERE id = file.id;

    IF NOT FOUND THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_filehandle');        

    END IF;

END;
]]></complex-attribute>
                        <category _I_D="796b303b-bc78-4fa4-a1f5-9b89f8ca728b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="8088963c-bd2e-4ec3-9efe-794ab9317a55" name="utl_file$fclose_all" subcategories-loading="none" object-loading="extended" context="utl_file$fclose_all" is-trigger-function="0" unique-function-name="utl_file$fclose_all" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365702" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$fclose_all()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN

    TRUNCATE TABLE aws$utl_file_files;

END;
]]></complex-attribute>
                        <category _I_D="ddc9af3f-5b5e-49e3-a183-13a679cdcf1a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="df2f4771-94aa-4e90-9b8b-10330c336a21" name="utl_file$fcopy" subcategories-loading="none" object-loading="extended" context="utl_file$fcopy" is-trigger-function="0" unique-function-name="utl_file$fcopy" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,text,integer,integer" is-returning-set="f" ret-datatype="void" function-arguments="src_location text, src_filename text, dest_location text, dest_filename text, start_line integer DEFAULT 1, end_line integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365700" volatility="VOLATILE" is-window="f" function-identity-arguments="src_location text, src_filename text, dest_location text, dest_filename text, start_line integer, end_line integer" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$fcopy(src_location text, src_filename text, dest_location text, dest_filename text, start_line integer, end_line integer)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vDirectory TEXT;
    vsrcBucket TEXT;
    vdstBucket TEXT;
    vResponse JSON;
    vPayload JSON;
    vErrorMessage TEXT;
    vEXCEPTION TEXT;
BEGIN

    SELECT directory_name,
        s3bucket
    INTO vDirectory,
        vsrcBucket
    FROM aws_oracle_ext.directory
    WHERE directory_name = src_location;

    IF NOT FOUND THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_path');

    END IF;

    IF src_location <> dest_location THEN

        SELECT directory_name,
            s3bucket
        INTO vDirectory,
            vdstBucket
        FROM aws_oracle_ext.directory
        WHERE directory_name = dest_location;

        IF NOT FOUND THEN

            PERFORM aws_oracle_ext.utl_file$exceptions('invalid_path');

        END IF;

    ELSE

        vdstBucket := vsrcBucket;

    END IF;

    vPayload := JSON_BUILD_OBJECT
    (
        'Action', 'FCOPY',
        'srcBucket', vsrcBucket,
        'srcDIRECTORY', src_location,
        'srcFilename', src_filename,
        'dstBucket', vdstBucket,
        'dstDIRECTORY', dest_location,
        'dstFilename', dest_filename
    );

    vResponse := aws_oracle_ext.awslambda_fn
    (
        aws_oracle_ext.get_service_setting
        (
            'UTL_FILE',
            'LAMBDA_ARN' 
        ),
        vPayload::TEXT
    )::JSON;
    
    IF vResponse -> 'error' IS NOT NULL THEN

        vEXCEPTION := vResponse -> 'error' ->> 'EXCEPTION';

        IF vEXCEPTION = '-1' THEN

            vErrorMessage := vResponse -> 'error' ->> 'Description';
            RAISE USING MESSAGE = vErrorMessage;

        END IF;

        PERFORM aws_oracle_ext.utl_file$exceptions(vEXCEPTION);

    END IF;

END;
]]></complex-attribute>
                        <category _I_D="ea1ac646-ddec-45f8-858b-65dd46849204" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e97e8bc5-981c-44f2-adbd-2a48249dc64e" name="utl_file$fhstorage" subcategories-loading="none" object-loading="extended" context="utl_file$fhstorage" is-trigger-function="0" unique-function-name="utl_file$fhstorage" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" schema-id="364663" function-type="RET_SCALAR" count-arguments="0" function-id="365692" volatility="VOLATILE" is-window="f" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$fhstorage()">
                        <complex-attribute name="sql"><![CDATA[
BEGIN
    CREATE TEMPORARY TABLE IF NOT EXISTS aws$utl_file_files
    (
        id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
        open_mode TEXT NOT NULL,
        directory_name TEXT NOT NULL,
        open_filename TEXT NOT NULL,
        max_linesize SMALLINT NOT NULL,
        fpos BIGINT NOT NULL DEFAULT 0,
        text_contents TEXT,
        CONSTRAINT uk_directory_file UNIQUE(directory_name, open_filename)
    );
END;
]]></complex-attribute>
                        <category _I_D="1e047fc8-a6ac-4584-a7e5-82c03b3e0948" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="05ee9827-18f0-41a6-afcb-69e3cba73bc3" name="utl_file$fopen" subcategories-loading="none" object-loading="extended" context="utl_file$fopen" is-trigger-function="0" unique-function-name="utl_file$fopen" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text,text,integer" is-returning-set="f" ret-datatype="utl_file$file_type" function-arguments="location text, filename text, open_mode text, max_linesize integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365697" volatility="VOLATILE" is-window="f" function-identity-arguments="location text, filename text, open_mode text, max_linesize integer" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$fopen(location text, filename text, open_mode text, max_linesize integer)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult aws_oracle_ext.utl_file$file_type;
    vDirectory TEXT;
    vBucket TEXT;
    vResponse JSON;
    vPayload JSON;
    vErrorMessage TEXT;
    vEXCEPTION TEXT;
    vmax_linesize INTEGER;
BEGIN

    vmax_linesize := COALESCE(max_linesize, 1024);

    IF vmax_linesize NOT BETWEEN 1 AND 32767 THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_maxlinesize');

    END IF;

    IF ARRAY_POSITION(ARRAY['R', 'W', 'A', 'RB', 'WB', 'AB'], UPPER(open_mode)) IS NULL THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_mode');

    END IF;

    SELECT directory_name,
        s3bucket
    INTO vDirectory,
        vBucket
    FROM aws_oracle_ext.directory
    WHERE directory_name = location;

    IF NOT FOUND THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_path');

    END IF;

    vPayload := JSON_BUILD_OBJECT
    (
        'Action', 'FOPEN',
        'Bucket', vBucket,
        'DIRECTORY', vDirectory,
        'filename', filename,
        'openmode', open_mode
    );

    vResponse := aws_oracle_ext.awslambda_fn
    (
        aws_oracle_ext.get_service_setting
        (
            'UTL_FILE',
            'LAMBDA_ARN' 
        ),
        vPayload::TEXT
    )::JSON;
    
    IF vResponse -> 'error' IS NOT NULL THEN

        vEXCEPTION := vResponse -> 'error' ->> 'EXCEPTION';

        IF vEXCEPTION = '-1' THEN

            vErrorMessage := vResponse -> 'error' ->> 'Description';
            RAISE USING MESSAGE = vErrorMessage;

        END IF;

        PERFORM aws_oracle_ext.utl_file$exceptions(vEXCEPTION);

    END IF;

    IF vResponse::TEXT = 'null' THEN
    
        PERFORM aws_oracle_ext.utl_file$fhstorage();

        DELETE FROM aws$utl_file_files
        WHERE directory_name = vDirectory
        AND open_filename = filename;

        INSERT INTO aws$utl_file_files(open_mode, directory_name, open_filename, max_linesize)
        VALUES(LOWER(open_mode), vDirectory, filename, vmax_linesize)
        RETURNING id INTO vResult.id;

        vResult.datatype := 1;
        vResult.byte_mode := CASE WHEN UPPER(open_mode) LIKE '%B' THEN TRUE ELSE FALSE END;

    END IF;
    
    RETURN vResult;

END;
]]></complex-attribute>
                        <category _I_D="ba408a20-174a-4a1b-9c35-db57f10b3ffb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f9fd77d3-047b-4662-aa72-40e0c660d3e8" name="utl_file$fremove" subcategories-loading="none" object-loading="extended" context="utl_file$fremove" is-trigger-function="0" unique-function-name="utl_file$fremove" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,text" is-returning-set="f" ret-datatype="void" function-arguments="location text, filename text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365699" volatility="VOLATILE" is-window="f" function-identity-arguments="location text, filename text" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$fremove(location text, filename text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vDirectory TEXT;
    vBucket TEXT;
    vResponse JSON;
    vPayload JSON;
    vErrorMessage TEXT;
    vEXCEPTION TEXT;
BEGIN

    SELECT directory_name,
        s3bucket
    INTO vDirectory,
        vBucket
    FROM aws_oracle_ext.directory
    WHERE directory_name = location;

    IF NOT FOUND THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_path');

    END IF;

    vPayload := JSON_BUILD_OBJECT
    (
        'Action', 'FREMOVE',
        'Bucket', vBucket,
        'DIRECTORY', vDirectory,
        'filename', filename
    );

    vResponse := aws_oracle_ext.awslambda_fn
    (
        aws_oracle_ext.get_service_setting
        (
            'UTL_FILE',
            'LAMBDA_ARN' 
        ),
        vPayload::TEXT
    )::JSON;
    
    IF vResponse -> 'error' IS NOT NULL THEN

        vEXCEPTION := vResponse -> 'error' ->> 'EXCEPTION';

        IF vEXCEPTION = '-1' THEN

            vErrorMessage := vResponse -> 'error' ->> 'Description';
            RAISE USING MESSAGE = vErrorMessage;

        END IF;

        PERFORM aws_oracle_ext.utl_file$exceptions(vEXCEPTION);

    END IF;
    
END;
]]></complex-attribute>
                        <category _I_D="3203a09d-d646-496e-9491-b328aaeb0950" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="a8ef782e-0829-46c4-9e18-441af1a5c6b8" name="utl_file$get_line" subcategories-loading="none" object-loading="extended" context="utl_file$get_line" is-trigger-function="0" unique-function-name="utl_file$get_line" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_file$file_type&quot;,text,integer" is-returning-set="f" ret-datatype="text" function-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, OUT buffer text, len integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365701" volatility="VOLATILE" is-window="f" function-identity-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, OUT buffer text, len integer" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$get_line(file aws_oracle_ext.&quot;utl_file$file_type&quot;, OUT buffer text, len integer)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vDirectory TEXT;
    vBucket TEXT;
    vFilename TEXT;
    vOpenMode TEXT;
    vLen INTEGER;
    vOpenLen INTEGER;
    vResponse JSON;
    vPayload JSON;
    vErrorMessage TEXT;
    vEXCEPTION TEXT;
    vPos INTEGER;
    vData TEXT;
    vNl TEXT;
    vNLpos INTEGER;
    vText TEXT;
BEGIN

    SELECT f.open_mode,
        d.directory_name,
        f.open_filename,
        f.max_linesize,
        d.s3bucket,
        f.text_contents,
        f.fpos
    INTO vOpenMode,
        vDirectory,
        vFilename,
        vOpenLen,
        vBucket,
        vText,
        vPos
    FROM aws$utl_file_files f
    JOIN aws_oracle_ext.directory d ON d.directory_name = f.directory_name
    WHERE id = file.id;

    IF NOT FOUND THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_filehandle');

    END IF;

    IF UPPER(vOpenMode) <> 'R' THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_operation');

    END IF;

    IF vText IS NULL THEN

        vPayload := JSON_BUILD_OBJECT
        (
            'Action', 'GET_LINE',
            'Bucket', vBucket,
            'DIRECTORY', vDirectory,
            'filename', vFilename,
            'pos', 0,
            'len', 0
        );

        vResponse := aws_oracle_ext.awslambda_fn
        (
            aws_oracle_ext.get_service_setting
            (
                'UTL_FILE',
                'LAMBDA_ARN' 
            ),
            vPayload::TEXT
        )::JSON;
    
        IF vResponse -> 'error' IS NOT NULL THEN

            vEXCEPTION := vResponse -> 'error' ->> 'EXCEPTION';

            IF vEXCEPTION = '-1' THEN

                vErrorMessage := vResponse -> 'error' ->> 'Description';
                RAISE USING MESSAGE = vErrorMessage;

            END IF;

            PERFORM aws_oracle_ext.utl_file$exceptions(vEXCEPTION);

        END IF;

        vData := vResponse ->> 'data';

        vNl := COALESCE
        (
            aws_oracle_ext.get_service_setting
            (
                'UTL_FILE',
                'NEWLINE' 
            ),
            E'\n'
        );

        IF vNl <> E'\n' THEN
            
            vData := REPLACE(vData, vNl, E'\n');

        END IF;
    
        UPDATE aws$utl_file_files
        SET text_contents = vData;

        vText := vData;

    END IF;
    
    vData := SUBSTR(vText, vPos + 1);

    IF LENGTH(vData) = 0 THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('read_error');

    END IF;

    vNLpos := POSITION(E'\n' IN vData);

    IF (vNLpos = 0 AND LENGTH(vData) >= vOpenLen) OR (vNLpos > vOpenLen) THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('read_error');

    END IF;

    vLen := LEAST(len, vOpenLen);
    
    vData := SUBSTR
    (
        vData,
        1,
        CASE
            WHEN vNLpos <> 0 THEN
                LEAST(vLen, vNLpos)
            ELSE
                vLen
        END
    );

    vPos := LENGTH(vData);

    buffer := REPLACE(vData, E'\n', '');

    UPDATE aws$utl_file_files
    SET fpos = fpos + vPos;

END;
]]></complex-attribute>
                        <category _I_D="ea59fcc9-e9b3-49c2-aef4-10404e9fb488" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1bbe02da-b44f-4a8e-81ea-979b4496a563" name="utl_file$get_raw" subcategories-loading="none" object-loading="extended" context="utl_file$get_raw" is-trigger-function="0" unique-function-name="utl_file$get_raw" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_file$file_type&quot;,bytea,integer" is-returning-set="f" ret-datatype="bytea" function-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, OUT buffer bytea, len integer DEFAULT NULL::integer" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365703" volatility="VOLATILE" is-window="f" function-identity-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, OUT buffer bytea, len integer" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$get_raw(file aws_oracle_ext.&quot;utl_file$file_type&quot;, OUT buffer bytea, len integer)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vDirectory TEXT;
    vBucket TEXT;
    vFilename TEXT;
    vOpenMode TEXT;
    vLen INTEGER;
    vOpenLen INTEGER;
    vResponse JSON;
    vPayload JSON;
    vErrorMessage TEXT;
    vEXCEPTION TEXT;
    vPos BIGINT;
    vData TEXT;
BEGIN

    SELECT f.open_mode,
        d.directory_name,
        f.open_filename,
        f.max_linesize,
        d.s3bucket,
        f.fpos
    INTO vOpenMode,
        vDirectory,
        vFilename,
        vOpenLen,
        vBucket,
        vPos
    FROM aws$utl_file_files f
    JOIN aws_oracle_ext.directory d ON d.directory_name = f.directory_name
    WHERE id = file.id;

    IF NOT FOUND THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_filehandle');

    END IF;

    IF UPPER(vOpenMode) <> 'RB' THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_operation');

    END IF;

    vLen := COALESCE(len, 32767);

    vPayload := JSON_BUILD_OBJECT
    (
        'Action', 'GET_RAW',
        'Bucket', vBucket,
        'DIRECTORY', vDirectory,
        'filename', vFilename,
        'pos', vPos,
        'len', vLen
    );

    vResponse := aws_oracle_ext.awslambda_fn
    (
        aws_oracle_ext.get_service_setting
        (
            'UTL_FILE',
            'LAMBDA_ARN' 
        ),
        vPayload::TEXT
    )::JSON;
    
    IF vResponse -> 'error' IS NOT NULL THEN

        vEXCEPTION := vResponse -> 'error' ->> 'EXCEPTION';

        IF vEXCEPTION = '-1' THEN

            vErrorMessage := vResponse -> 'error' ->> 'Description';
            RAISE USING MESSAGE = vErrorMessage;

        END IF;

        PERFORM aws_oracle_ext.utl_file$exceptions(vEXCEPTION);

    END IF;

    SELECT STRING_AGG(UPPER(LPAD(TO_HEX(v::INT), 2, '0')),''),
        COUNT(*)
    INTO vData, vPos
    FROM JSON_ARRAY_ELEMENTS_TEXT(vResponse -> 'data') AS v;

    buffer := DECODE(vData, 'hex');

    UPDATE aws$utl_file_files
    SET fpos = fpos + vPos;

END;
]]></complex-attribute>
                        <category _I_D="5b2492d4-d767-4e95-b072-dbeddbc62cc9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0ed69a6f-a469-4513-a959-a71aa040b704" name="utl_file$is_open" subcategories-loading="none" object-loading="extended" context="utl_file$is_open" is-trigger-function="0" unique-function-name="utl_file$is_open" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_file$file_type&quot;" is-returning-set="f" ret-datatype="bool" function-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365709" volatility="VOLATILE" is-window="f" function-identity-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$is_open(file aws_oracle_ext.&quot;utl_file$file_type&quot;)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vResult BOOLEAN DEFAULT FALSE;
BEGIN

    SELECT TRUE
    INTO
    vResult
    FROM aws$utl_file_files
    WHERE id = file.id;

    IF NOT FOUND THEN

        vResult := FALSE;

    END IF;

    RETURN vResult;

EXCEPTION
    WHEN undefined_table THEN
    
        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_filehandle');

END;
]]></complex-attribute>
                        <category _I_D="5d7207e0-cbe6-47d7-bc17-26e49b86ddbb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="662d5d82-d698-49bb-9fd9-3ebed62c161e" name="utl_file$new_line" subcategories-loading="none" object-loading="extended" context="utl_file$new_line" is-trigger-function="0" unique-function-name="utl_file$new_line" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_file$file_type&quot;,integer" is-returning-set="f" ret-datatype="void" function-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, lines integer DEFAULT 1" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365707" volatility="VOLATILE" is-window="f" function-identity-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, lines integer" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$new_line(file aws_oracle_ext.&quot;utl_file$file_type&quot;, lines integer)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vNl TEXT;
BEGIN

    vNl := COALESCE
    (
        CASE
            WHEN aws_oracle_ext.get_service_setting
            (
                'UTL_FILE',
                'NEWLINE' 
            ) = '\r\n' THEN
                E'\r\n'
            ELSE
                NULL
        END,
        E'\n'
    );

    vNl := REPEAT(vNl, lines);

    PERFORM aws_oracle_ext.utl_file$put(file, vNl);

END;
]]></complex-attribute>
                        <category _I_D="9736b004-bb35-4c2d-a7dd-231ed72548fb" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="eb8b15a0-cb19-4954-ba53-b967f60decdd" name="utl_file$put" subcategories-loading="none" object-loading="extended" context="utl_file$put" is-trigger-function="0" unique-function-name="utl_file$put" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_file$file_type&quot;,text" is-returning-set="f" ret-datatype="void" function-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, buffer text" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365704" volatility="VOLATILE" is-window="f" function-identity-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, buffer text" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$put(file aws_oracle_ext.&quot;utl_file$file_type&quot;, buffer text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vDirectory TEXT;
    vBucket TEXT;
    vFilename TEXT;
    vOpenMode TEXT;
    vLen INTEGER;
    vOpenLen INTEGER;
    vResponse JSON;
    vPayload JSON;
    vErrorMessage TEXT;
    vEXCEPTION TEXT;
BEGIN

    SELECT f.open_mode,
        d.directory_name,
        f.open_filename,
        f.max_linesize,
        d.s3bucket
    INTO vOpenMode,
        vDirectory,
        vFilename,
        vOpenLen,
        vBucket
    FROM aws$utl_file_files f
    JOIN aws_oracle_ext.directory d ON d.directory_name = f.directory_name
    WHERE id = file.id;

    IF NOT FOUND THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_filehandle');

    END IF;

    IF NOT (UPPER(vOpenMode) LIKE 'W%' OR UPPER(vOpenMode) LIKE 'A%') THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_operation');

    END IF;

    vPayload := JSON_BUILD_OBJECT
    (
        'Action', 'PUT',
        'Bucket', vBucket,
        'DIRECTORY', vDirectory,
        'filename', vFilename,
        'buffer', SUBSTR(buffer, 1, 32767)
    );

    vResponse := aws_oracle_ext.awslambda_fn
    (
        aws_oracle_ext.get_service_setting
        (
            'UTL_FILE',
            'LAMBDA_ARN' 
        ),
        vPayload::TEXT
    )::JSON;
    
    IF vResponse -> 'error' IS NOT NULL THEN

        vEXCEPTION := vResponse -> 'error' ->> 'EXCEPTION';

        IF vEXCEPTION = '-1' THEN

            vErrorMessage := vResponse -> 'error' ->> 'Description';
            RAISE USING MESSAGE = vErrorMessage;

        END IF;

        PERFORM aws_oracle_ext.utl_file$exceptions(vEXCEPTION);

    END IF;

END;
]]></complex-attribute>
                        <category _I_D="4686e220-5104-4310-9709-43b94315455f" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d5742458-ee8b-426f-b6ea-4658581bf606" name="utl_file$put_line" subcategories-loading="none" object-loading="extended" context="utl_file$put_line" is-trigger-function="0" unique-function-name="utl_file$put_line" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_file$file_type&quot;,text,boolean" is-returning-set="f" ret-datatype="void" function-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, buffer text, autoflush boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365706" volatility="VOLATILE" is-window="f" function-identity-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, buffer text, autoflush boolean" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$put_line(file aws_oracle_ext.&quot;utl_file$file_type&quot;, buffer text, autoflush boolean)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vNl TEXT;
BEGIN

    vNl := COALESCE
    (
        CASE
            WHEN aws_oracle_ext.get_service_setting
            (
                'UTL_FILE',
                'NEWLINE' 
            ) = '\r\n' THEN
                E'\r\n'
            ELSE
                NULL
        END,
        E'\n'
    );

    PERFORM  aws_oracle_ext.utl_file$put
    (
        $1,
        CONCAT
        (
            $2,
            vNl
        )
    );

END;
]]></complex-attribute>
                        <category _I_D="10245825-4a9a-41e1-932f-ccdfc8163303" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="4b924e27-c7db-4c8f-bf17-f46f9f8757cb" name="utl_file$put_raw" subcategories-loading="none" object-loading="extended" context="utl_file$put_raw" is-trigger-function="0" unique-function-name="utl_file$put_raw" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_file$file_type&quot;,bytea,boolean" is-returning-set="f" ret-datatype="void" function-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, buffer bytea, autoflush boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365705" volatility="VOLATILE" is-window="f" function-identity-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, buffer bytea, autoflush boolean" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$put_raw(file aws_oracle_ext.&quot;utl_file$file_type&quot;, buffer bytea, autoflush boolean)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vDirectory TEXT;
    vBucket TEXT;
    vFilename TEXT;
    vOpenMode TEXT;
    vLen INTEGER;
    vOpenLen INTEGER;
    vResponse JSON;
    vPayload JSON;
    vErrorMessage TEXT;
    vEXCEPTION TEXT;
BEGIN

    SELECT f.open_mode,
        d.directory_name,
        f.open_filename,
        f.max_linesize,
        d.s3bucket
    INTO vOpenMode,
        vDirectory,
        vFilename,
        vOpenLen,
        vBucket
    FROM aws$utl_file_files f
    JOIN aws_oracle_ext.directory d ON d.directory_name = f.directory_name
    WHERE id = file.id;

    IF NOT FOUND THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_filehandle');

    END IF;

    IF UPPER(vOpenMode) NOT IN ('WB', 'AB') THEN

        PERFORM aws_oracle_ext.utl_file$exceptions('invalid_operation');

    END IF;

    vPayload := JSON_BUILD_OBJECT
    (
        'Action', 'PUT_RAW',
        'Bucket', vBucket,
        'DIRECTORY', vDirectory,
        'filename', vFilename,
        'buffer', ENCODE(buffer, 'hex')
    );

    vResponse := aws_oracle_ext.awslambda_fn
    (
        aws_oracle_ext.get_service_setting
        (
            'UTL_FILE',
            'LAMBDA_ARN' 
        ),
        vPayload::TEXT
    )::JSON;

    IF vResponse -> 'error' IS NOT NULL THEN

        vEXCEPTION := vResponse -> 'error' ->> 'EXCEPTION';

        IF vEXCEPTION = '-1' THEN

            vErrorMessage := vResponse -> 'error' ->> 'Description';
            RAISE USING MESSAGE = vErrorMessage;

        END IF;

        PERFORM aws_oracle_ext.utl_file$exceptions(vEXCEPTION);
        
    END IF;

END;
]]></complex-attribute>
                        <category _I_D="9df07956-1b90-4d82-8202-955fe64a6e15" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="2b68979d-5f7c-41aa-ae24-82661952637e" name="utl_file$putf" subcategories-loading="none" object-loading="extended" context="utl_file$putf" is-trigger-function="0" unique-function-name="utl_file$putf" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_file$file_type&quot;,text,text,text,text,text,text" is-returning-set="f" ret-datatype="void" function-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, format text, arg1 text DEFAULT NULL::text, arg2 text DEFAULT NULL::text, arg3 text DEFAULT NULL::text, arg4 text DEFAULT NULL::text, arg5 text DEFAULT NULL::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="7" function-id="365708" volatility="VOLATILE" is-window="f" function-identity-arguments="file aws_oracle_ext.&quot;utl_file$file_type&quot;, format text, arg1 text, arg2 text, arg3 text, arg4 text, arg5 text" overload-function-count="1" proc-language="plpgsql" function-signature="utl_file$putf(file aws_oracle_ext.&quot;utl_file$file_type&quot;, format text, arg1 text, arg2 text, arg3 text, arg4 text, arg5 text)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vText TEXT;
    vNl TEXT;
    vAddNewLine BOOLEAN DEFAULT TRUE;
BEGIN

    vNl := COALESCE
    (
        CASE
            WHEN aws_oracle_ext.get_service_setting
            (
                'UTL_FILE',
                'NEWLINE' 
            ) = '\r\n' THEN
                E'\r\n'
            ELSE
                NULL
        END,
        E'\n'
    );

    IF SUBSTR(REVERSE(format), 1, 2) = '\n' THEN

        vAddNewLine := FALSE;
        
    END IF;
    
    vText := REPLACE(format, '\n', vNl);

    vText := format(vText, arg1, arg2, arg3, arg4, arg5);

    IF vAddNewLine THEN

        vText := CONCAT(vText, vNl);

    EnD IF;

    PERFORM aws_oracle_ext.utl_file$put(file, vText);

END;
]]></complex-attribute>
                        <category _I_D="c985c151-e84e-4b2f-91d9-7c37b003cf0e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="08367441-5352-49d5-af90-7fc3ef473025" name="utl_smtp$auth" subcategories-loading="none" object-loading="extended" context="utl_smtp$auth" is-trigger-function="0" unique-function-name="utl_smtp$auth" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;,character varying,character varying,character varying" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, username character varying, password character varying, schemes character varying DEFAULT 'CRAM-MD5'::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="4" function-id="365250" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, username character varying, password character varying, schemes character varying" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$auth(c aws_oracle_ext.&quot;utl_smtp$connection&quot;, username character varying, password character varying, schemes character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare
  l_result aws_oracle_ext.utl_smtp$reply;
begin
  l_result.code := 235;
  l_result.text := 'Authentication successful';
  return l_result;
end;
]]></complex-attribute>
                        <category _I_D="ea0ab622-e276-4a27-b041-64ffc4466b5b" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3e8ed831-59d6-47d4-ab67-a28d2c84008b" name="utl_smtp$close_connection" subcategories-loading="none" object-loading="extended" context="utl_smtp$close_connection" is-trigger-function="0" unique-function-name="utl_smtp$close_connection" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;" is-returning-set="f" ret-datatype="void" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365251" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$close_connection(c aws_oracle_ext.&quot;utl_smtp$connection&quot;)">
                        <complex-attribute name="sql"><![CDATA[
begin
  drop table if exists utl_smtp$new_message;
  drop table if exists utl_smtp$recipients;
  drop table if exists utl_smtp$connection;

  return;
end;
]]></complex-attribute>
                        <category _I_D="301ea8e4-eb64-4934-bf9d-f5271f56efc9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="e9530a79-acd8-4c2a-85c8-1d078a625f68" name="utl_smtp$close_data" subcategories-loading="none" object-loading="extended" context="utl_smtp$close_data" is-trigger-function="0" unique-function-name="utl_smtp$close_data" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365252" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$close_data(c aws_oracle_ext.&quot;utl_smtp$connection&quot;)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  l_reply.code := 250;
  l_reply.text := 'Requested mail action okay, completed';

  return l_reply;
end;
]]></complex-attribute>
                        <category _I_D="bcf26871-160b-4930-a6fe-38b69d27224e" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="51334f27-d655-4914-bc3c-599ce4a9130b" name="utl_smtp$data" subcategories-loading="none" object-loading="extended" context="utl_smtp$data" is-trigger-function="0" unique-function-name="utl_smtp$data" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;,character varying" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, body character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365253" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, body character varying" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$data(c aws_oracle_ext.&quot;utl_smtp$connection&quot;, body character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  insert into utl_smtp$new_message( msg_body ) values( body );

  l_reply.code := 250;
  l_reply.text := 'Requested mail action okay, completed';

  return l_reply;
end;
]]></complex-attribute>
                        <category _I_D="672d0123-d37f-4a29-9612-4733c998398c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1321caff-f789-473b-b6fd-240657c79420" name="utl_smtp$ehlo" subcategories-loading="none" object-loading="extended" context="utl_smtp$ehlo" is-trigger-function="0" unique-function-name="utl_smtp$ehlo" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;,character varying" is-returning-set="f" ret-datatype="utl_smtp$replies" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, domain character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365254" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, domain character varying" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$ehlo(c aws_oracle_ext.&quot;utl_smtp$connection&quot;, domain character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  l_reply.code := 250;
  l_reply.text := '250-AUTH';
  return ARRAY[ l_reply ]::aws_oracle_ext.utl_smtp$replies;
end;
]]></complex-attribute>
                        <category _I_D="5dfcd9b5-c442-4e48-9afe-b3a36cb00bd7" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="3d72d4c8-a3ef-4c89-b2dd-2c404454a9dd" name="utl_smtp$helo" subcategories-loading="none" object-loading="extended" context="utl_smtp$helo" is-trigger-function="0" unique-function-name="utl_smtp$helo" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;,character varying" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, domain character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365255" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, domain character varying" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$helo(c aws_oracle_ext.&quot;utl_smtp$connection&quot;, domain character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  l_reply.code := 250;
  l_reply.text := 'Hello ' || domain;
  return l_reply;
end;
]]></complex-attribute>
                        <category _I_D="04bf342d-29c6-4423-9c73-1e963e03469a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="caac8dc3-12bc-4358-9585-41f6ae24d922" name="utl_smtp$mail" subcategories-loading="none" object-loading="extended" context="utl_smtp$mail" is-trigger-function="0" unique-function-name="utl_smtp$mail" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;,character varying,character varying" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, sender character varying, parameters character varying DEFAULT ''::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365256" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, sender character varying, parameters character varying" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$mail(c aws_oracle_ext.&quot;utl_smtp$connection&quot;, sender character varying, parameters character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
  l_sender character varying := sender;
begin
  /* Temporary table to store message parts */
  drop table if exists utl_smtp$new_message;
  create temporary table if not exists utl_smtp$new_message
    ( msg_part serial
    , msg_body text );
  /* Temporary table to store recepients */
  drop table if exists utl_smtp$recipients;
  create temporary table if not exists utl_smtp$recipients
    ( num serial
    , address character varying( 512 ) );

  update utl_smtp$connection set sender = l_sender;

  l_reply.code := 250;
  l_reply.text := 'Requested mail action okay, completed';
  return l_reply;
end;
]]></complex-attribute>
                        <category _I_D="2dfb9ee6-27a5-4c13-bb17-7d947ebae953" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="301d87df-2e8b-49a7-8ab1-4b96c435992c" name="utl_smtp$noop" subcategories-loading="none" object-loading="extended" context="utl_smtp$noop" is-trigger-function="0" unique-function-name="utl_smtp$noop" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365257" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$noop(c aws_oracle_ext.&quot;utl_smtp$connection&quot;)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  l_reply.code := 250;
  l_reply.text := 'Requested mail action okay, completed';
  return l_reply;
end;
]]></complex-attribute>
                        <category _I_D="8d4a81fc-c211-45f3-928d-1ffc8c6c9747" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="d27a9d6a-4413-411a-8ccb-d43881916e1b" name="utl_smtp$open_connection" subcategories-loading="none" object-loading="extended" context="utl_smtp$open_connection" is-trigger-function="0" unique-function-name="utl_smtp$open_connection" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,double precision,double precision,character varying,character varying,boolean" is-returning-set="f" ret-datatype="utl_smtp$connection" function-arguments="host character varying, port double precision DEFAULT 25, tx_timeout double precision DEFAULT NULL::double precision, wallet_path character varying DEFAULT NULL::character varying, wallet_password character varying DEFAULT NULL::character varying, secure_connection_before_smtp boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="6" function-id="365259" volatility="VOLATILE" is-window="f" function-identity-arguments="host character varying, port double precision, tx_timeout double precision, wallet_path character varying, wallet_password character varying, secure_connection_before_smtp boolean" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$open_connection(host character varying, port double precision, tx_timeout double precision, wallet_path character varying, wallet_password character varying, secure_connection_before_smtp boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
  l_result aws_oracle_ext.utl_smtp$connection;
begin
  drop table if exists utl_smtp$connection;
  create temporary table if not exists utl_smtp$connection
    ( conn aws_oracle_ext.utl_smtp$connection
    , sender character varying );

  l_result.host := host;
  l_result.port := port;
  l_result.tx_timeout := tx_timeout;

  insert into utl_smtp$connection( conn ) values( l_result );

  return l_result;
end;
]]></complex-attribute>
                        <category _I_D="44739127-1d1c-47b0-a4c8-1bd38f8e8e25" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="0716cbb2-5c4c-47a2-8151-c8db43dc510a" name="utl_smtp$open_connection2" subcategories-loading="none" object-loading="extended" context="utl_smtp$open_connection2" is-trigger-function="0" unique-function-name="utl_smtp$open_connection2" is-aggregate="f" language-name="plpgsql" arguments-datatypes="character varying,double precision,aws_oracle_ext.&quot;utl_smtp$connection&quot;,double precision,character varying,character varying,boolean" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="host character varying, port double precision DEFAULT 25, c aws_oracle_ext.&quot;utl_smtp$connection&quot; DEFAULT NULL::aws_oracle_ext.&quot;utl_smtp$connection&quot;, tx_timeout double precision DEFAULT NULL::double precision, wallet_path character varying DEFAULT NULL::character varying, wallet_password character varying DEFAULT NULL::character varying, secure_connection_before_smtp boolean DEFAULT false" schema-id="364663" function-type="RET_SCALAR" count-arguments="7" function-id="365258" volatility="VOLATILE" is-window="f" function-identity-arguments="host character varying, port double precision, c aws_oracle_ext.&quot;utl_smtp$connection&quot;, tx_timeout double precision, wallet_path character varying, wallet_password character varying, secure_connection_before_smtp boolean" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$open_connection2(host character varying, port double precision, c aws_oracle_ext.&quot;utl_smtp$connection&quot;, tx_timeout double precision, wallet_path character varying, wallet_password character varying, secure_connection_before_smtp boolean)">
                        <complex-attribute name="sql"><![CDATA[
declare
  l_conn aws_oracle_ext.utl_smtp$connection;
  
  l_result aws_oracle_ext.utl_smtp$reply;
begin
  l_conn := aws_oracle_ext.utl_smtp$open_connection
    ( host, port, tx_timeout, wallet_path, wallet_password, secure_connection_before_smtp );

  l_result.code := 220;
  l_result.text := host || ' Service ready.';

  return l_result;
end;
]]></complex-attribute>
                        <category _I_D="6dd80184-297e-470e-a8ed-e3422a3475a5" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="9f4ad17e-93e1-4511-b517-09e95faeed73" name="utl_smtp$open_data" subcategories-loading="none" object-loading="extended" context="utl_smtp$open_data" is-trigger-function="0" unique-function-name="utl_smtp$open_data" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365260" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$open_data(c aws_oracle_ext.&quot;utl_smtp$connection&quot;)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  l_reply.code := 354;
  l_reply.text := 'Start mail input end <CRLF>.<CRLF>';

  return l_reply;
end;
]]></complex-attribute>
                        <category _I_D="d6708797-1f15-4263-baab-1feb84c2e40d" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="17e1f5cb-46e1-4d3d-8f65-88855f021ec8" name="utl_smtp$quit" subcategories-loading="none" object-loading="extended" context="utl_smtp$quit" is-trigger-function="0" unique-function-name="utl_smtp$quit" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365261" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$quit(c aws_oracle_ext.&quot;utl_smtp$connection&quot;)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE 
    l_response TEXT;
    l_reply aws_oracle_ext.utl_smtp$reply;
    l_message TEXT;
    l_sender CHARACTER VARYING(512);
    vto TEXT;
BEGIN

    SELECT sender,
        message,
        TO_JSON(recipient_list)
    INTO strict l_sender,
        l_message,
        vto
    FROM
    (     
        SELECT c.sender,
            (
                SELECT STRING_AGG(msg_body, '') AS msg_body 
                FROM
                (
                    SELECT msg_body
                    FROM utl_smtp$new_message
                    order by msg_part 
                ) r
            ) AS message,
            (
                SELECT ARRAY_AGG(address)
                FROM utl_smtp$recipients
            ) AS recipient_list
        FROM utl_smtp$connection c
       ) x;
  
    BEGIN

        l_response := aws_oracle_ext.awslambda_fn
        (
            aws_oracle_ext.get_service_setting
            (
                'MAIL',
                'LAMBDA_ARN'
            ),
            CONCAT
            (
                '{ "service": "ses", "args": { "Destinations": ',
                vto,
                ', "source": ',
                TO_JSON(l_sender::TEXT),
                ', "rawmessage": { "Data": ',
                TO_JSON(l_message::TEXT),
                '} } }' 
            )
        );
    
        BEGIN
            
            l_response := l_response::jsonb->>'Error';

        EXCEPTION WHEN OTHERS THEN

            GET STACKED DIAGNOSTICS l_response := MESSAGE_TEXT;

        END;

        IF l_response IS NOT NULL AND l_response <> '' THEN

            RAISE EXCEPTION 'Email sending failed: %', l_response;

        END IF;

        l_reply.code := 221;
        l_reply.text := 'Service closing transmission channel';
        
        RETURN l_reply;

    END;

END;
]]></complex-attribute>
                        <category _I_D="88d62174-6ddf-440e-a893-12c5fd23d827" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="7f3a5799-efe3-4036-94c0-ef78ebd97cb6" name="utl_smtp$rcpt" subcategories-loading="none" object-loading="extended" context="utl_smtp$rcpt" is-trigger-function="0" unique-function-name="utl_smtp$rcpt" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;,character varying,character varying" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, recipient character varying, parameters character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365262" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, recipient character varying, parameters character varying" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$rcpt(c aws_oracle_ext.&quot;utl_smtp$connection&quot;, recipient character varying, parameters character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  insert into utl_smtp$recipients( address ) values( recipient );

  l_reply.code := 250;
  l_reply.text := 'Requested mail action okay, completed';
  return l_reply;
end;
]]></complex-attribute>
                        <category _I_D="4b70d351-b5d0-4d1c-a88a-20f53a1bee4a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="ef94d17c-99b9-436e-a39e-dcc11736c231" name="utl_smtp$rset" subcategories-loading="none" object-loading="extended" context="utl_smtp$rset" is-trigger-function="0" unique-function-name="utl_smtp$rset" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365263" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$rset(c aws_oracle_ext.&quot;utl_smtp$connection&quot;)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  delete from utl_mail$recipients;
  delete from utl_mail$new_message;

  l_reply.code := 250;
  l_reply.text := 'Requested mail action okay, completed';
  return l_reply;
end;
]]></complex-attribute>
                        <category _I_D="ddde1bab-cc0d-4113-ae65-99e17f9e7ede" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="429ce4dc-bbfa-4348-8604-b264c55c2621" name="utl_smtp$starttls" subcategories-loading="none" object-loading="extended" context="utl_smtp$starttls" is-trigger-function="0" unique-function-name="utl_smtp$starttls" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;" is-returning-set="f" ret-datatype="utl_smtp$reply" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" schema-id="364663" function-type="RET_SCALAR" count-arguments="1" function-id="365264" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$starttls(c aws_oracle_ext.&quot;utl_smtp$connection&quot;)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  l_reply.code := 220;
  l_reply.text := 'Go ahead';
  return l_reply;
end;
]]></complex-attribute>
                        <category _I_D="9ddae8f3-6ed7-46b2-aea1-45f0d9e97b6a" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="fcce7d32-d3d6-480a-84f6-4390d49082a2" name="utl_smtp$write_data" subcategories-loading="none" object-loading="extended" context="utl_smtp$write_data" is-trigger-function="0" unique-function-name="utl_smtp$write_data" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;,character varying" is-returning-set="f" ret-datatype="void" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, data character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365265" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, data character varying" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$write_data(c aws_oracle_ext.&quot;utl_smtp$connection&quot;, data character varying)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  insert into utl_smtp$new_message( msg_body ) values( data );

  return;
end;
]]></complex-attribute>
                        <category _I_D="58c204b7-3b8b-47f9-a990-0f727fba8e00" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="f3366597-05c0-4f66-b536-f4ca4050256f" name="utl_smtp$write_raw_data" subcategories-loading="none" object-loading="extended" context="utl_smtp$write_raw_data" is-trigger-function="0" unique-function-name="utl_smtp$write_raw_data" is-aggregate="f" language-name="plpgsql" arguments-datatypes="aws_oracle_ext.&quot;utl_smtp$connection&quot;,bytea" is-returning-set="f" ret-datatype="void" function-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, data bytea" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365266" volatility="VOLATILE" is-window="f" function-identity-arguments="c aws_oracle_ext.&quot;utl_smtp$connection&quot;, data bytea" overload-function-count="1" proc-language="plpgsql" function-signature="utl_smtp$write_raw_data(c aws_oracle_ext.&quot;utl_smtp$connection&quot;, data bytea)">
                        <complex-attribute name="sql"><![CDATA[
declare 
  l_reply aws_oracle_ext.utl_smtp$reply;
begin
  insert into utl_smtp$new_message_data( msg_body ) values( data );

  return;
end;
]]></complex-attribute>
                        <category _I_D="54f6bdac-cafd-4288-b394-ad668d047fd8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="db019562-d7a7-4ed0-bdc6-1696e837512d" name="utl_url$escape" subcategories-loading="none" object-loading="extended" context="utl_url$escape" is-trigger-function="0" unique-function-name="utl_url$escape" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,boolean,character varying" is-returning-set="f" ret-datatype="text" function-arguments="p_url text, p_escape_reserved boolean DEFAULT false, p_url_charset character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="365267" volatility="VOLATILE" is-window="f" function-identity-arguments="p_url text, p_escape_reserved boolean, p_url_charset character varying" overload-function-count="1" proc-language="plpgsql" function-signature="utl_url$escape(p_url text, p_escape_reserved boolean, p_url_charset character varying)" comment="This function returns a URL with illegal characters (and optionally reserved characters) escaped using the %2-digit-hex-code format.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
   v_err_message TEXT;
   v_encoded_url TEXT;
   v_temp_char VARCHAR;
   v_char_reqexp VARCHAR;
   v_url_charset VARCHAR;
   v_ascii_val INTEGER;
   v_temp_charcode BYTEA;
BEGIN
   /* Requires functions to be installed in "aws_oracle_ext" schema:
      - get_charset_name.
    */

   -- Determining the set of unescapable characters
   v_char_reqexp := CASE
                       WHEN p_escape_reserved THEN '[0-9a-zA-Z\-_.!~*`()]+'
                       ELSE '[0-9a-zA-Z\-_.!~*`();/?:@&=+$,\[\]]+'
                    END;

   -- Determining the charset for character encoding
   v_url_charset := CASE
                       WHEN p_url_charset IS NULL THEN pg_client_encoding()
                       ELSE aws_oracle_ext.get_charset_name(p_url_charset)
                    END;

   -- Iterating over all characters in the string
   FOR i_charpos IN 1..char_length(coalesce(p_url, ''))
   LOOP
      v_temp_char := substr(p_url, i_charpos, 1);

      -- Skipping unescapable characters and convert others
      IF (v_temp_char ~ v_char_reqexp) THEN
         v_encoded_url := concat(v_encoded_url, v_temp_char);
      ELSE
         -- Encoding character to selected charset
         v_temp_charcode := convert_to(v_temp_char, v_url_charset);
         
         -- Casting each character byte to hex and escaping it with "%"
         FOR i_charcode IN 1..octet_length(v_temp_charcode)
         LOOP
            v_temp_char := upper(encode(substring(v_temp_charcode, i_charcode, 1), 'hex'));
            v_encoded_url := concat(v_encoded_url, '%', v_temp_char);
         END LOOP;
      END IF;
   END LOOP;

   RETURN v_encoded_url;
EXCEPTION
   WHEN untranslatable_character THEN
      GET STACKED DIAGNOSTICS v_err_message = MESSAGE_TEXT;

      RAISE USING MESSAGE := format('Failed to encode character "%s" to %s charset (Oracle %s).',
                                    v_temp_char,
                                    upper(v_url_charset),
                                    upper(p_url_charset)),
                  DETAIL := concat(v_err_message, '.'),
                  HINT := format('Try to use another charset (not %s) in order to encode mentioned character (symbol).',
                                 upper(p_url_charset));
END;
]]></complex-attribute>
                        <category _I_D="4454ba85-a9d9-4591-9288-76e77d8bf4d9" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="1038e8fb-26d9-4a0d-bbe8-bcc49b1189c8" name="utl_url$unescape" subcategories-loading="none" object-loading="extended" context="utl_url$unescape" is-trigger-function="0" unique-function-name="utl_url$unescape" is-aggregate="f" language-name="plpgsql" arguments-datatypes="text,character varying" is-returning-set="f" ret-datatype="text" function-arguments="p_url text, p_url_charset character varying DEFAULT NULL::character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365268" volatility="VOLATILE" is-window="f" function-identity-arguments="p_url text, p_url_charset character varying" overload-function-count="1" proc-language="plpgsql" function-signature="utl_url$unescape(p_url text, p_url_charset character varying)" comment="This function unescapes the escape character sequences to its original form in a URL, to convert the %XX escape character sequences to the original characters.">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
   v_err_message TEXT;
   v_char_code TEXT;
   v_char_byte BYTEA;
   v_url_charset VARCHAR;
   v_decoded_url BYTEA := '';
BEGIN
   /* Requires functions to be installed in "aws_oracle_ext" schema:
      - get_charset_name.
    */

   -- Determining the charset for character decoding
   v_url_charset := CASE
                       WHEN p_url_charset IS NULL THEN pg_client_encoding()
                       ELSE aws_oracle_ext.get_charset_name(p_url_charset)
                    END;

   -- Iterating over all significant characters in the string
   FOR v_char_code IN
   (SELECT unnest(regexp_matches(p_url, '(%..|.)', 'g')) url_char)
   LOOP
      -- Unescaping "%XX" characters
      v_char_byte := CASE
                        WHEN v_char_code !~ '%' THEN v_char_code::BYTEA
                        ELSE decode(substring(v_char_code, 2, 2), 'hex')
                     END;

      -- Concatenating into resulting byte string
      v_decoded_url := v_decoded_url || v_char_byte;
   END LOOP;

   RETURN convert_from(v_decoded_url, v_url_charset);
EXCEPTION
   WHEN character_not_in_repertoire THEN
      GET STACKED DIAGNOSTICS v_err_message = MESSAGE_TEXT;

      RAISE USING MESSAGE := format('Failed to decode url byte string "%s" to %s charset (Oracle %s).',
                                    v_decoded_url::TEXT,
                                    upper(v_url_charset),
                                    upper(p_url_charset)),
                  DETAIL := concat(v_err_message, '.'),
                  HINT := format('Try to use another charset (not %s) or correct initial url string.',
                                 upper(p_url_charset));
END;
]]></complex-attribute>
                        <category _I_D="02c4829f-a426-4460-b295-2cf4990aaea2" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="18195b27-042b-4561-a95e-9a96a3219b76" name="within_distance" subcategories-loading="none" object-loading="extended" context="within_distance" is-trigger-function="0" unique-function-name="within_distance" is-aggregate="f" language-name="plpgsql" arguments-datatypes="geometry,numeric,geometry,numeric,character varying" is-returning-set="f" ret-datatype="varchar" function-arguments="ip_geom1 geometry, ip_dist numeric, ip_geom2 geometry, ip_tol numeric, ip_units character varying" schema-id="364663" function-type="RET_SCALAR" count-arguments="5" function-id="365269" volatility="IMMUTABLE" is-window="f" function-identity-arguments="ip_geom1 geometry, ip_dist numeric, ip_geom2 geometry, ip_tol numeric, ip_units character varying" overload-function-count="1" proc-language="plpgsql" function-signature="within_distance(ip_geom1 geometry, ip_dist numeric, ip_geom2 geometry, ip_tol numeric, ip_units character varying)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    v_dist  FLOAT;
    v_res   VARCHAR := 'FALSE';
    BEGIN
      v_dist := st_distance(ip_geom1, ip_geom2);
      if abs(v_dist - ip_dist) < ip_tol 
        then v_res := 'TRUE'; 
      end if; 
 RETURN v_res;
END;
]]></complex-attribute>
                        <category _I_D="bf08aab5-1298-4206-9bdd-97cebdc2fdcc" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="dc626e69-edc2-419e-b773-d340cb83e48c" name="wrap_refcursor" subcategories-loading="none" object-loading="extended" context="wrap_refcursor" is-trigger-function="0" unique-function-name="wrap_refcursor" is-aggregate="f" language-name="plpgsql" arguments-datatypes="refcursor,refcursor" is-returning-set="f" ret-datatype="refcursor" function-arguments="refcursor, INOUT refcursor" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365931" volatility="VOLATILE" is-window="f" function-identity-arguments="refcursor, INOUT refcursor" overload-function-count="1" proc-language="plpgsql" function-signature="wrap_refcursor(refcursor, INOUT refcursor)">
                        <complex-attribute name="sql"><![CDATA[
DECLARE
    vstmt TEXT;
BEGIN
    
	vstmt := $1;

	SELECT pc.statement 
	INTO vstmt
	FROM pg_cursors pc
	WHERE pc.name = vstmt;

	OPEN $2 FOR EXECUTE vstmt;

	CLOSE $1;
    
END;
]]></complex-attribute>
                        <category _I_D="1e3ca201-60bb-4143-bed1-116a833f70a8" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                    <function _I_D="54479490-8ca9-4b29-89e1-6fa6aa8ce795" name="xmltype$tojson" subcategories-loading="none" object-loading="extended" context="xmltype$tojson" is-trigger-function="0" unique-function-name="xmltype$tojson" is-aggregate="f" language-name="plpgsql" arguments-datatypes="xml,json" is-returning-set="f" ret-datatype="json" function-arguments="pxml xml, ptargetjobj json" schema-id="364663" function-type="RET_SCALAR" count-arguments="2" function-id="365848" volatility="STABLE" is-window="f" function-identity-arguments="pxml xml, ptargetjobj json" overload-function-count="1" proc-language="plpgsql" function-signature="xmltype$tojson(pxml xml, ptargetjobj json)">
                        <complex-attribute name="sql"><![CDATA[
declare
    ILIMIT constant integer := 1024;
    PDELIMETER constant varchar(1) := '/';
    PROOT constant varchar(2) := '//';
    XVALUE constant varchar(7) := '/text()';
    XSCHEMA constant varchar(3) := 'xsi';
    XURI constant varchar(41) := 'http://www.w3.org/2001/XMLSchema-instance';

    mainData aws_oracle_ext.xmltype$txml2json[];
    dummyData aws_oracle_ext.xmltype$txml2json[];
    lnMx int;
    lnMn int;
begin

	if pXML is null or pTargetJObj is null then
	    raise exception 'XMLTYPE.Null Exception.' using hint = '29532';
	end if;

	with recursive rStructure (iNum, rNum, pNum, recFullKey, recKey, recValue, recValType)
	               as (select 0 as iNum,
		                      row_number() over () as rNum,
		                      0::bigint as pNum,
		                      t.key as recFullKey,
		                      t.key as recKey,
		                      t.value as recValue,
		                      json_typeof(t.value) as recValType
		                 from json_each(pTargetJObj) t
		                union all
		               select r.iNum + 1 as iNum,
		                       row_number() over () as rNum,
		                       r.rNum as pNum,
		                       r.recFullKey||PDELIMETER||t.key as recFullKey,
		                       t.key as recKey,
		                       t.value as recValue,
		                       json_typeof(t.value) as recValType
		                  from rStructure r left join json_each(r.recValue) t on r.recValue is not null
		                 where r.recValType = json_typeof(pTargetJObj)
		                   and r.iNum < ILIMIT
		               ),
				   rMatchData (iNum, rNum, pNum, recFullKey, recKey, recValue, recValType)
				   as (select r.iNum as iNum,
			              	  r.rNum as rNum,
			              	  r.pNum as pNum,
			              	  r.recFullKey as recFullKey,
			              	  r.recKey as recKey,
			              	  to_json(case when r.recValType != json_typeof(pTargetJObj) then
								              coalesce((xpath(PROOT||r.recFullKey||XVALUE, pXML, array[array[XSCHEMA, XURI]]))[1]::text,
								                       (xpath(PROOT||r.recFullKey, pXML, array[array[XSCHEMA, XURI]]))[1]::text
						                     		  )
					                       else null end
					                  ) as recValue,
			                  r.recValType as recValType
			             from rStructure r
			            where r.recFullKey is not null
			          )
    select array_agg(row(d.iNum, d.rNum, d.pNum, d.recKey, d.recValue)::aws_oracle_ext.xmltype$txml2json)
      into mainData
      from rMatchData d;

    select max(iNum), min(iNum)
      into lnMx, lnMn
      from unnest(mainData);

    select array_agg(row(d.iNum, null, d.pNum, null, d.recValue)::aws_oracle_ext.xmltype$txml2json)
      into dummyData
      from (select d1.iNum, d1.pNum, json_object_agg(d1.recKey, d1.recValue) recValue
              from unnest(mainData) d1
             where d1.iNum = lnMx
             group by d1.iNum, d1.pNum
           ) d;

    for i in reverse lnMx -1 .. lnMn loop
		 select array_agg(row(d.iNum, null, d.pNum, null, d.recValue)::aws_oracle_ext.xmltype$txml2json)
		   into dummyData
		   from (select d1.iNum, d1.pNum, json_object_agg(d1.recKey, coalesce(d1.recValue, g1.recValue)) recValue
				   from unnest(mainData) d1 left join unnest(dummyData) g1 on d1.iNum = g1.iNum -1 and d1.rNum = g1.pNum
				  where d1.iNum = i
				  group by d1.iNum, d1.pNum
		        ) d;
	end loop;

    return dummyData[1].recValue;
end; ]]></complex-attribute>
                        <category _I_D="b740951b-b186-4a54-bdb9-73d8b67d311c" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </function>
                </category>
                <category _I_D="dc71203c-dc60-4418-8d06-03e62f0165d1" name="Trigger functions" order-num="9" objects-loading="empty" subcategories-loading="full" child-type="function"/>
                <category _I_D="8aec6fb6-64a2-4553-8df1-f1d8da505944" name="Procedures" order-num="10" objects-loading="extended" subcategories-loading="none" child-type="procedure">
                    <procedure _I_D="654cabd1-e727-4093-9104-6d08c351b5b5" name="raise_ai_exception" arguments-datatypes="integer,text,text" subcategories-loading="none" object-loading="extended" context="raise_ai_exception" is-trigger-function="0" unique-function-name="raise_ai_exception" is-aggregate="f" language-name="plpgsql" is-returning-set="f" ret-datatype="void" function-arguments="p_ai_code integer, p_message text, p_severity text DEFAULT 'CRITICAL'::text" schema-id="364663" function-type="RET_SCALAR" count-arguments="3" function-id="366031" volatility="VOLATILE" is-window="f" function-identity-arguments="p_ai_code integer, p_message text, p_severity text" overload-function-count="1" proc-language="plpgsql" function-signature="raise_ai_exception(p_ai_code integer, p_message text, p_severity text)">
                        <complex-attribute name="sql"><![CDATA[ 
declare
  l_stack text;
  l_object text;
  l_line integer;
begin
 get diagnostics l_stack = pg_context;
 
  select line[1], line[2]
    into l_object, l_line
    from regexp_matches(l_stack,'PL/pgSQL function (.*?)line (.*?) ', 'g') as stack_lines(line)
   limit 1 offset 1;
  
  if l_object is null then
  select line[1], line[2]
    into l_object, l_line
    from regexp_matches( l_stack, 'SQL function (\S+) statement (\d+)', 'g') as stack_lines(line)
    limit 1;
  end if;
  raise exception 
    using message = format('%I at line %s, AI %s [%s]: %s', l_object, l_line, p_ai_code, p_severity, p_message);
end;
]]></complex-attribute>
                        <category _I_D="3f89a900-9ffb-43de-abe4-745bbda231e6" name="Parameters" order-num="0" objects-loading="none" subcategories-loading="none" child-type="parameter"/>
                    </procedure>
                </category>
                <category _I_D="e1a2246e-a544-459d-b69e-8d8acc4b8e01" name="Sequences" order-num="11" objects-loading="extended" subcategories-loading="full" child-type="sequence">
                    <sequence _I_D="3d0e7239-fdb5-4123-a542-0a365293bccd" name="charset_mapping_id_seq" context="charset_mapping_id_seq" subcategories-loading="full" object-loading="extended" data-type="bigint" start-value="1" minimum-value="1" maximum-value="9223372036854775807" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL" last-value="230" cache-value="1"/>
                    <sequence _I_D="94149a00-3e7d-4e9e-9981-2c701bb73e54" name="jobs_job_seq" context="jobs_job_seq" subcategories-loading="full" object-loading="extended" data-type="bigint" start-value="1" minimum-value="1" maximum-value="9223372036854775807" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL" cache-value="1"/>
                    <sequence _I_D="116e7602-1bb7-447a-97fa-580a7be85181" name="mail_messages_id_seq" context="mail_messages_id_seq" subcategories-loading="full" object-loading="extended" data-type="bigint" start-value="1" minimum-value="1" maximum-value="9223372036854775807" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL" cache-value="1"/>
                    <sequence _I_D="9e5aa7aa-8eac-4410-9621-f27117c7d6fb" name="sqs_queues_tables_id_seq" context="sqs_queues_tables_id_seq" subcategories-loading="full" object-loading="extended" data-type="integer" start-value="1" minimum-value="1" maximum-value="2147483647" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL" cache-value="1"/>
                </category>
                <category _I_D="0f69fc79-1782-49da-8fdb-5e3e60ff0dba" name="User defined types" order-num="12" objects-loading="extended" subcategories-loading="none" child-type="type">
                    <type _I_D="8794d150-fddc-477f-b10e-032f32c249ea" name="dbms_aq$dequeue_options_t" subcategories-loading="none" object-loading="extended" context="dbms_aq$dequeue_options_t" udt-type="STRUCTURED">
                        <category _I_D="47d585f7-eb9f-48b2-b181-842a451770ee" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="217fddbe-807f-4f8c-88b7-ddad1483e2a6" name="dbms_aq$enqueue_options_t" subcategories-loading="none" object-loading="extended" context="dbms_aq$enqueue_options_t" udt-type="STRUCTURED">
                        <category _I_D="2ec7931d-d344-453f-aba7-f8f6409c4832" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="9d556f13-8651-4765-bea0-3e1955277fb6" name="dbms_aq$message_properties_t" subcategories-loading="none" object-loading="extended" context="dbms_aq$message_properties_t" udt-type="STRUCTURED">
                        <category _I_D="0906e677-9f00-4128-a4de-b49022a16766" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="4debe8f7-f36e-4105-9db7-ee7b7e422922" name="dbms_xmlgen$tcontext" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$tcontext" udt-type="STRUCTURED">
                        <category _I_D="5b25ac21-0c2f-45b3-85ab-3ebbf2e0306b" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="598b1074-2536-4787-a601-c27984aae746" name="dbms_xmlgen$tctxattributes" subcategories-loading="none" object-loading="extended" context="dbms_xmlgen$tctxattributes" udt-type="STRUCTURED">
                        <category _I_D="28b881e8-8274-4e0b-9b4f-7e8b0fb20e88" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="426efa5a-f861-48ad-b38d-8e357ec8c37e" name="dbms_xmlquery$tcontext" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$tcontext" udt-type="STRUCTURED">
                        <category _I_D="1eac464d-837d-4c90-8388-7cd0b3db4b6a" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="764d7675-23e6-4499-a2fc-8d89a6dfda3a" name="dbms_xmlquery$tctxattributes" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$tctxattributes" udt-type="STRUCTURED">
                        <category _I_D="fe1243f5-4349-45ee-90ad-b3bc3758b1fe" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="3cd4ad2a-e79c-4b52-96d1-f7e7a0379a8e" name="dbms_xmlquery$tctxdictionary" subcategories-loading="none" object-loading="extended" context="dbms_xmlquery$tctxdictionary" udt-type="STRUCTURED">
                        <category _I_D="adfcbaca-a424-4138-8f5b-4d4e46bd1609" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="491ee78b-1d70-4f59-bffb-013ff8152d4e" name="nls_param" subcategories-loading="none" object-loading="extended" context="nls_param" udt-type="STRUCTURED">
                        <category _I_D="691587db-78ab-4411-b30d-9171861977f5" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="4a4863b3-1719-4c60-80c5-75e80195694e" name="sql$bulk_exceptions" subcategories-loading="none" object-loading="extended" context="sql$bulk_exceptions" udt-type="STRUCTURED">
                        <category _I_D="45da4a6c-3cdb-455c-8c5e-2b60a9e47f43" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="55e50965-2334-48c1-a57a-7a717827f3df" name="sqs_aq$_agent" subcategories-loading="none" object-loading="extended" context="sqs_aq$_agent" udt-type="STRUCTURED">
                        <category _I_D="d6e777dc-539d-4622-ad3d-f0e1913504bc" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="391b24a0-c27e-47ac-ba78-d815cbc01c24" name="sqs_aq$_sig_prop" subcategories-loading="none" object-loading="extended" context="sqs_aq$_sig_prop" udt-type="STRUCTURED">
                        <category _I_D="617f03f2-6c3d-42ff-a7cf-69e2fd2fab39" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="97714664-5a4e-4463-96f3-4ade37ad4df8" name="sqs_queue_record" subcategories-loading="none" object-loading="extended" context="sqs_queue_record" udt-type="STRUCTURED">
                        <category _I_D="10b22091-a8e1-464c-9c76-37523e8bcf3e" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="631787c4-d8e4-4b6f-9c63-adcf3b128716" name="utl_file$file_type" subcategories-loading="none" object-loading="extended" context="utl_file$file_type" udt-type="STRUCTURED">
                        <category _I_D="2938ee15-77a9-4c9e-a6ab-3bd59a2bec94" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="d37d0781-50ea-40e9-82dc-154a49b60278" name="utl_smtp$connection" subcategories-loading="none" object-loading="extended" context="utl_smtp$connection" udt-type="STRUCTURED">
                        <category _I_D="5fe62371-bd82-4699-a1fc-e4dfde5eb5a3" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="0a8bbcb7-c484-47b0-9248-4fe3a2cf2326" name="utl_smtp$reply" subcategories-loading="none" object-loading="extended" context="utl_smtp$reply" udt-type="STRUCTURED">
                        <category _I_D="667844bf-a781-402a-be84-b968e3fe5351" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                    <type _I_D="1eaebb10-da03-4000-93d9-56df6813fb4e" name="xmltype$txml2json" subcategories-loading="none" object-loading="extended" context="xmltype$txml2json" udt-type="STRUCTURED">
                        <category _I_D="7baa2596-ccc2-49b0-8fce-14b76d015f69" name="Attributes" order-num="0" objects-loading="none" subcategories-loading="none" child-type="attribute"/>
                    </type>
                </category>
                <category _I_D="acdb21a4-6fdf-4523-a6e2-676f8b874efa" name="Domains" order-num="13" objects-loading="extended" subcategories-loading="none" child-type="domain">
                    <domain _I_D="e1921c0e-c512-4ee5-95d2-5ce547a63d24" domain-schema="aws_oracle_ext" name="ora_exception" data-type="character varying" character-maximum-length="92" dt-name="character varying" dt-attr-1="92" is-nullable="N" context="ora_exception" subcategories-loading="none" object-loading="extended">
                        <category _I_D="970ffea5-f83a-43d7-b6ab-d073c5114530" name="Constraints" order-num="0" objects-loading="none" subcategories-loading="none" child-type="constraint"/>
                    </domain>
                    <domain _I_D="9c1135e5-1a22-4afb-9914-9aeb236aa117" domain-schema="aws_oracle_ext" name="rowid" data-type="character varying" character-maximum-length="36" dt-name="character varying" dt-attr-1="36" is-nullable="Y" context="rowid" subcategories-loading="none" object-loading="extended">
                        <category _I_D="701a633e-b8c2-4ff6-9bd3-c4512c166a51" name="Constraints" order-num="0" objects-loading="none" subcategories-loading="none" child-type="constraint"/>
                    </domain>
                    <domain _I_D="15cec08a-60d3-4290-b669-de27f8b833f0" domain-schema="aws_oracle_ext" name="utl_smtp$replies" data-type="aws_oracle_ext.&quot;utl_smtp$reply&quot;[]" dt-name="aws_oracle_ext.&quot;utl_smtp$reply&quot;[]" is-nullable="Y" context="utl_smtp$replies" subcategories-loading="none" object-loading="extended" element-type="USER-DEFINED">
                        <category _I_D="106fe3e7-22e2-4230-88e8-76555cef905e" name="Constraints" order-num="0" objects-loading="none" subcategories-loading="none" child-type="constraint"/>
                    </domain>
                </category>
                <category _I_D="afb74afe-6275-46f9-a6c9-f8b24d2189c7" name="Materialized Views" order-num="14" objects-loading="empty" subcategories-loading="full" child-type="materialized-view"/>
                <category _I_D="a7046527-393f-4aec-b524-7b622ef65839" name="Aggregates" order-num="15" objects-loading="empty" subcategories-loading="full" child-type="aggregate"/>
            </schema>
            <schema _I_D="b7216326-0470-4bc4-a1e4-64304d7455a2" name="aws_postgis" context="aws_postgis" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="9a7bab09-4105-4daf-a11e-109a275f0370" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="8ae6b205-9d43-4e6b-a2ba-aac020ee903e" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="24e15c54-932e-4617-a9dd-52236870654e" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="9bb212d7-874c-4b8d-807f-2bcc4a1fbe4b" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="cc545752-00e3-41f3-bdbf-ea0fbd9bc1ba" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="f2f8dedb-2491-4416-962c-f06a66c9694a" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="aa1afed5-b96e-4fc4-b381-7305612dd2a8" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="2da0f889-4275-47b8-9cae-bd708a012301" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="d2b4fc4c-521a-43d2-846c-4f68f229acb6" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="6078ad06-cd8e-4ae8-b9a2-8e573d18c4cd" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="e5147971-cbbb-49ca-8e5b-4344ba43845c" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="94cd2999-5451-457e-8d68-523729243591" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="9c709726-7b91-4bbe-835e-45dfb2438538" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="cb52b19a-5dea-4c61-9c1c-fb9e6c365c64" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="c49463fb-b317-4fc9-a246-62c1e22fc15b" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="dffd9b61-b51a-4ed4-b61f-0e1d5c05ce0c" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="29e0b411-789c-4065-9e6b-0df37db24276" name="camd" context="camd" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="75a03216-6366-41c2-a91d-f08d59986d8e" name="Tables" order-num="0" objects-loading="main" subcategories-loading="none" child-type="table">
                    <table _I_D="ce2c688f-dc2a-4627-8668-a092a7c871af" name="generator" context="generator" subcategories-loading="full" object-loading="extended" is-typed="NO" comment="Identifies power generator associated with FACILITY." partitioned="NO" is-unlogged="NO">
                        <category _I_D="83801fe5-0e5c-46de-8da1-02a6512da924" name="Columns" order-num="0" objects-loading="extended" subcategories-loading="full" child-type="column">
                            <column _I_D="abecfc37-c578-4829-8090-b1ad45df788f" name="gen_id" dt-name="numeric" dt-attr-1="38" dt-attr-2="0" context="gen_id" subcategories-loading="full" object-loading="extended" ordinal-position="1" is-nullable="N" comment="Identity key for GENERATOR table." system-type-schema="pg_catalog" system-type-name="numeric" type-name="numeric" is-updatable="YES" is-xml-document="N" is-user-defined="0" is-inherited="NO" is-identity="NO" numeric-precision="38" numeric-scale="0"/>
                            <column _I_D="f8400ede-828f-4efb-939c-ff17df2265bf" name="fac_id" dt-name="numeric" dt-attr-1="38" dt-attr-2="0" context="fac_id" subcategories-loading="full" object-loading="extended" ordinal-position="2" is-nullable="N" comment="FACILITY ID identity key." system-type-schema="pg_catalog" system-type-name="numeric" type-name="numeric" is-updatable="YES" is-xml-document="N" is-user-defined="0" is-inherited="NO" is-identity="NO" numeric-precision="38" numeric-scale="0"/>
                            <column _I_D="d97cdacf-447b-4e0b-a4f4-835b46a89036" name="genid" dt-name="character varying" dt-attr-1="8" context="genid" subcategories-loading="full" object-loading="extended" ordinal-position="3" is-nullable="N" comment="Public identifier used for GENERATOR as reported to EIA and for New Unit Exemption purposes." system-type-schema="pg_catalog" system-type-name="varchar" type-name="character varying" is-updatable="YES" is-xml-document="N" is-user-defined="0" is-inherited="NO" is-identity="NO" character-maximum-length="8"/>
                            <column _I_D="2e64183b-0617-44df-bcd1-cb96cca521ad" name="gen_source_cd" dt-name="character varying" dt-attr-1="7" context="gen_source_cd" subcategories-loading="full" object-loading="extended" ordinal-position="4" is-nullable="N" comment="Source code of GENERATOR data." system-type-schema="pg_catalog" system-type-name="varchar" type-name="character varying" is-updatable="YES" is-xml-document="N" is-user-defined="0" is-inherited="NO" is-identity="NO" character-maximum-length="7"/>
                            <column _I_D="d0823c3b-ae37-4c24-8b44-589a84bf39ba" name="arp_nameplate_capacity" dt-name="numeric" dt-attr-1="7" dt-attr-2="3" context="arp_nameplate_capacity" subcategories-loading="full" object-loading="extended" ordinal-position="5" is-nullable="Y" comment="Design nameplate capacity, in megawatts, of the GENERATOR." system-type-schema="pg_catalog" system-type-name="numeric" type-name="numeric" is-updatable="YES" is-xml-document="N" is-user-defined="0" is-inherited="NO" is-identity="NO" numeric-precision="7" numeric-scale="3" default-definition="NULL"/>
                            <column _I_D="1d503be6-4368-465b-ae78-7e8528ceaad1" name="other_nameplate_capacity" dt-name="numeric" dt-attr-1="7" dt-attr-2="3" context="other_nameplate_capacity" subcategories-loading="full" object-loading="extended" ordinal-position="6" is-nullable="Y" comment="Nameplate capacity, in megawatts, of the GENERATOR as applicable to other programs such as CAIR." system-type-schema="pg_catalog" system-type-name="numeric" type-name="numeric" is-updatable="YES" is-xml-document="N" is-user-defined="0" is-inherited="NO" is-identity="NO" numeric-precision="7" numeric-scale="3" default-definition="NULL"/>
                            <column _I_D="93946100-a8c6-4dac-96ba-0caa09276553" name="utility_ind" dt-name="numeric" dt-attr-1="1" dt-attr-2="0" context="utility_ind" subcategories-loading="full" object-loading="extended" ordinal-position="7" is-nullable="Y" comment="Identifies whether a GENERATOR is a utility or a non-utility." system-type-schema="pg_catalog" system-type-name="numeric" type-name="numeric" is-updatable="YES" is-xml-document="N" is-user-defined="0" is-inherited="NO" is-identity="NO" numeric-precision="1" numeric-scale="0" default-definition="NULL"/>
                            <column _I_D="768e269e-4da9-46b5-aa2c-2bf92631fa18" name="prime_mover_type_cd" dt-name="character varying" dt-attr-1="7" context="prime_mover_type_cd" subcategories-loading="full" object-loading="extended" ordinal-position="8" is-nullable="Y" comment="Type, such as combined cycle, steam turbine, etc., of a GENERATOR." system-type-schema="pg_catalog" system-type-name="varchar" type-name="character varying" is-updatable="YES" is-xml-document="N" is-user-defined="0" is-inherited="NO" is-identity="NO" character-maximum-length="7" default-definition="NULL"/>
                            <column _I_D="32c00955-5fe6-4f42-ae05-f2f99f0d11ba" name="gen_capacity_factor" dt-name="numeric" dt-attr-1="5" dt-attr-2="3" context="gen_capacity_factor" subcategories-loading="full" object-loading="extended" ordinal-position="9" is-nullable="Y" comment="Capacity factor based on actual operations." system-type-schema="pg_catalog" system-type-name="numeric" type-name="numeric" is-updatable="YES" is-xml-document="N" is-user-defined="0" is-inherited="NO" is-identity="NO" numeric-precision="5" numeric-scale="3" default-definition="NULL"/>
                            <column _I_D="6808c4ed-ed50-4f7f-bbb1-bac2c2cae10c" name="online_year" dt-name="numeric" dt-attr-1="4" dt-attr-2="0" context="online_year" subcategories-loading="full" object-loading="extended" ordinal-position="10" is-nullable="Y" comment="Four digit year that the GENERATOR came online." system-type-schema="pg_catalog" system-type-name="numeric" type-name="numeric" is-updatable="YES" is-xml-document="N" is-user-defined="0" is-inherited="NO" is-identity="NO" numeric-precision="4" numeric-scale="0" default-definition="NULL"/>
                            <column _I_D="5afed8d5-5e98-45c6-8001-548ad70b9297" name="eia_year" dt-name="numeric" dt-attr-1="4" dt-attr-2="0" context="eia_year" subcategories-loading="full" object-loading="extended" ordinal-position="11" is-nullable="Y" comment="The year for which EIA identification information is provided." system-type-schema="pg_catalog" system-type-name="numeric" type-name="numeric" is-updatable="YES" is-xml-document="N" is-user-defined="0" is-inherited="NO" is-identity="NO" numeric-precision="4" numeric-scale="0" default-definition="NULL"/>
                            <column _I_D="9e62172c-03b4-4d46-841c-efc20477fd72" name="userid" dt-name="character varying" dt-attr-1="25" context="userid" subcategories-loading="full" object-loading="extended" ordinal-position="12" is-nullable="N" comment="The user name of the person or process that created the record if the Update Date is empty.  Otherwise this is the user name of the person or process that made the last update." system-type-schema="pg_catalog" system-type-name="varchar" type-name="character varying" is-updatable="YES" is-xml-document="N" is-user-defined="0" is-inherited="NO" is-identity="NO" character-maximum-length="25"/>
                            <column _I_D="a46ba4d1-acaa-4340-ba9d-ad4a22b0c9a2" name="add_date" dt-name="timestamp without time zone" dt-attr-1="6" context="add_date" subcategories-loading="full" object-loading="extended" ordinal-position="13" is-nullable="N" comment="Date the record was created." system-type-schema="pg_catalog" system-type-name="timestamp" type-name="timestamp without time zone" is-updatable="YES" is-xml-document="N" is-user-defined="0" is-inherited="NO" is-identity="NO" datetime-precision="6"/>
                            <column _I_D="fe6139a3-dd11-4f3c-b328-60fee5561c38" name="update_date" dt-name="timestamp without time zone" dt-attr-1="6" context="update_date" subcategories-loading="full" object-loading="extended" ordinal-position="14" is-nullable="Y" comment="Date of the last record update." system-type-schema="pg_catalog" system-type-name="timestamp" type-name="timestamp without time zone" is-updatable="YES" is-xml-document="N" is-user-defined="0" is-inherited="NO" is-identity="NO" default-definition="NULL" datetime-precision="6"/>
                        </category>
                        <category _I_D="1ba0dd46-ab89-4119-abab-6ee10c100a49" name="Partition columns" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="column"/>
                        <category _I_D="369eddc0-60f3-4694-9d28-4a676f25113d" name="Subpartition columns" order-num="2" objects-loading="empty" subcategories-loading="full" child-type="column"/>
                        <category _I_D="4a7c4ed9-b608-4d7a-b084-0eca93648d39" name="Constraints" order-num="3" objects-loading="extended" subcategories-loading="full" child-type="constraint" mdl-expected-node-count="5">
                            <constraint _I_D="0bfd2866-8feb-418c-8b2c-1af47c5c7355" table-name="generator" name="fk_generator_gen_source_cd" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" context="fk_generator_gen_source_cd" subcategories-loading="full" object-loading="extended" delete-rule="NO ACTION" constraint-schema="camd" is-deferrable="NO" initially-deferred="NO" referenced-table-schema="camdmd" referenced-table-name="generator_source_code" referenced-constraint-schema="camdmd" referenced-constraint-name="pk_generator_source_code" match-option="NONE" update-rule="NO ACTION">
                                <complex-attribute name="check-clause"><![CDATA[FOREIGN KEY (gen_source_cd) REFERENCES camdmd.generator_source_code(gen_source_cd)]]></complex-attribute>
                                <category _I_D="269a10e2-3f7e-4615-a1a8-e21422760a06" name="Columns" order-num="0" objects-loading="extended" subcategories-loading="full" child-type="column">
                                    <column _I_D="aceede41-447c-4898-ba55-24bc42389ba0" name="gen_source_cd" context="gen_source_cd" subcategories-loading="full" object-loading="extended" ordinal-position="1" column-char-length="7" position-in-referenced-unique-constraint="1" column-in-referenced-unique-constraint="gen_source_cd" referenced-table-schema="camdmd" referenced-table-name="generator_source_code"/>
                                </category>
                            </constraint>
                            <constraint _I_D="7d78891a-3d4a-4c69-bd6e-6af4d0142f0e" table-name="generator" name="fk_generator_plant" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" context="fk_generator_plant" subcategories-loading="full" object-loading="extended" delete-rule="NO ACTION" constraint-schema="camd" is-deferrable="NO" initially-deferred="NO" referenced-table-schema="camd" referenced-table-name="plant" referenced-constraint-schema="camd" referenced-constraint-name="pk_plant" match-option="NONE" update-rule="NO ACTION">
                                <complex-attribute name="check-clause"><![CDATA[FOREIGN KEY (fac_id) REFERENCES camd.plant(fac_id)]]></complex-attribute>
                                <category _I_D="9a1f60a5-438c-4112-8e3f-8e1bdb6a22e3" name="Columns" order-num="0" objects-loading="extended" subcategories-loading="full" child-type="column">
                                    <column _I_D="8b32c0fe-0fd9-42f5-bf14-e0e3c930066f" name="fac_id" context="fac_id" subcategories-loading="full" object-loading="extended" ordinal-position="1" position-in-referenced-unique-constraint="1" column-in-referenced-unique-constraint="fac_id" referenced-table-schema="camd" referenced-table-name="plant"/>
                                </category>
                            </constraint>
                            <constraint _I_D="cf236fba-eed5-4bbd-9ff2-726df29d7ce9" table-name="generator" name="fk_generator_prime_mover_cd" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" context="fk_generator_prime_mover_cd" subcategories-loading="full" object-loading="extended" delete-rule="NO ACTION" constraint-schema="camd" is-deferrable="NO" initially-deferred="NO" referenced-table-schema="camdmd" referenced-table-name="prime_mover_type_code" referenced-constraint-schema="camdmd" referenced-constraint-name="pk_prime_mover_type_code" match-option="NONE" update-rule="NO ACTION">
                                <complex-attribute name="check-clause"><![CDATA[FOREIGN KEY (prime_mover_type_cd) REFERENCES camdmd.prime_mover_type_code(prime_mover_type_cd)]]></complex-attribute>
                                <category _I_D="0c625ff3-b2e1-4793-9576-d3ba2c525e2c" name="Columns" order-num="0" objects-loading="extended" subcategories-loading="full" child-type="column">
                                    <column _I_D="1854fc50-ba0e-46c0-aa50-f544d7b82e03" name="prime_mover_type_cd" context="prime_mover_type_cd" subcategories-loading="full" object-loading="extended" ordinal-position="1" column-char-length="7" position-in-referenced-unique-constraint="1" column-in-referenced-unique-constraint="prime_mover_type_cd" referenced-table-schema="camdmd" referenced-table-name="prime_mover_type_code"/>
                                </category>
                            </constraint>
                            <constraint _I_D="f149826c-ddad-4d23-96a8-4b7fc13d4359" table-name="generator" name="pk_generator" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" context="pk_generator" subcategories-loading="full" object-loading="extended" constraint-schema="camd" is-deferrable="NO" initially-deferred="NO">
                                <complex-attribute name="check-clause"><![CDATA[PRIMARY KEY (gen_id)]]></complex-attribute>
                                <category _I_D="29b6a162-5f04-412d-9b4b-dcb83994ad33" name="Columns" order-num="0" objects-loading="extended" subcategories-loading="full" child-type="column">
                                    <column _I_D="8735a244-0e86-481e-93a3-7407f3e2ab91" name="gen_id" context="gen_id" subcategories-loading="full" object-loading="extended" ordinal-position="1"/>
                                </category>
                            </constraint>
                            <constraint _I_D="740f2475-4d15-4a2d-8440-053e867a5eae" table-name="generator" name="uq_generator" constraint-type="UNIQUE" constraint-type-desc="UNIQUE KEY" context="uq_generator" subcategories-loading="full" object-loading="extended" constraint-schema="camd" is-deferrable="NO" initially-deferred="NO">
                                <complex-attribute name="check-clause"><![CDATA[UNIQUE (fac_id, genid)]]></complex-attribute>
                                <category _I_D="725f66d4-fc53-41c6-9d23-974cd6aaaeb6" name="Columns" order-num="0" objects-loading="extended" subcategories-loading="full" child-type="column">
                                    <column _I_D="6af47198-fa73-40f9-b784-63dbae3b9a5c" name="fac_id" context="fac_id" subcategories-loading="full" object-loading="extended" ordinal-position="1"/>
                                    <column _I_D="a0e6d66d-7d11-4123-a4e7-a64e43623776" name="genid" context="genid" subcategories-loading="full" object-loading="extended" ordinal-position="2" column-char-length="8"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="b975c33c-cc07-4ed4-9812-849e510b1c6e" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="4c136058-5188-44df-9100-6a8558eaf579" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="d091dbe6-c549-4ed9-9fd6-0acb98b71612" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f8e26dff-3a7d-43fd-9a97-ea6a898781c5" name="plant" context="plant" subcategories-loading="none" object-loading="main">
                        <category _I_D="82eabe5d-1a5c-4aa3-94b0-19a0a55a1498" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e6895896-d084-465f-be0b-dbbe3b981a56" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="10578f33-618e-494c-88bc-6c7635336e26" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="11c8df0e-2e0f-44cd-89fa-aa0c28acdcfb" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="9"/>
                        <category _I_D="b063b68c-ed52-4e6c-9c1f-503c5ce5bc5f" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="7"/>
                        <category _I_D="4dd7c101-5f57-4f61-a159-4116ff4acfef" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="ae2b6d08-3ac0-479d-a570-28fa81da5601" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="dc061454-33a5-4d67-86d3-d2d2a955587f" name="program" context="program" subcategories-loading="none" object-loading="main">
                        <category _I_D="a5159e57-ce34-422d-a197-934d4f1a518b" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ab5d5f07-7639-46b7-9109-64ce6fe8a31d" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a9a89bda-222e-491b-bbd2-1231675c742c" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bc70e769-9e35-42cd-bd3e-385426a24c00" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="5"/>
                        <category _I_D="f0801e8c-1c2e-4ec2-9e0f-15a484d77b73" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="c0acc44c-1370-4bb8-b438-184f5a50f548" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="a34642f2-f777-4964-9af0-ba4b7caab8f8" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="95928f01-cbf2-454c-b780-8fb70c57a05c" name="unit" context="unit" subcategories-loading="none" object-loading="main">
                        <category _I_D="a8a158aa-ede8-45b9-bc89-4c81fe153eb5" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="73c77b7b-bc95-49a5-a25f-7d4115ea14cb" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="984f6854-0d2e-4616-b632-3bcc5d7d9f52" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="addb828a-39fb-48cb-84f3-d3a8e343dc69" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="5"/>
                        <category _I_D="c6cce56c-2cf0-4392-91d9-2be8c685fe9e" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="21b1ed11-bd40-4670-960e-b19c8340bbf8" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="260a9da5-b714-4534-b851-1f8777940db6" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="80cee6f6-b3c5-43dc-960c-04f87f02c9e6" name="unit_boiler_type" context="unit_boiler_type" subcategories-loading="none" object-loading="main">
                        <category _I_D="ffa15f4c-bf51-41f1-ac7a-e53d48f2b0ce" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="790f8801-8dc3-47e4-afd3-82cb9dc8ea94" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c9588c39-d6cb-4083-820f-de194a130b05" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fe2c068c-2966-4375-86fd-308c8d562f25" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="de6edef3-9338-40d5-a4c8-d2800e2e95e9" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="71a5ee72-db08-4b84-8feb-7954f2387a87" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="39ba473b-700c-4e80-a62f-9cc0d02a5505" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="2830daf7-97b3-435e-8505-a97794781b06" name="unit_exemption" context="unit_exemption" subcategories-loading="none" object-loading="main">
                        <category _I_D="f91279ea-fcbc-4921-82de-a3da8ff97452" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7fbf6d6a-9d5d-4e13-a69e-811eb299e5a3" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="840339ef-71f0-41d0-9464-1335d502e94c" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a68056c5-c036-4d27-8ba3-ce9de9adb285" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="f82401ae-c8cc-4f0e-bec0-abf1bf2325e4" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="852f33fb-105a-4b5a-b752-d87db7d47024" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="f62bf85a-ee5e-4da3-aaf0-e465902671ab" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="27ba0e2f-5749-426b-9ce6-05621f14167b" name="unit_generator" context="unit_generator" subcategories-loading="none" object-loading="main">
                        <category _I_D="571428fa-32b8-4207-bb3d-eb195c876df0" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a5e901e6-f49f-49d4-9162-3773e91c4d1c" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="64bf2955-55d3-4818-9dc4-5357b2415db5" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5dc2084e-f04c-4bab-8f63-3be04d304c8c" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="8adf462f-5f01-4eec-aa15-efa78e47ebd1" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="028b9e3d-a897-4cad-a584-b0b630e994a1" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="20c350bb-3a9c-4ff8-a7a0-2b56f288bf86" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="2788751d-fa45-4515-b843-c4d0d0335cb8" name="unit_op_status" context="unit_op_status" subcategories-loading="none" object-loading="main">
                        <category _I_D="d69d641f-d6b3-4f2d-b042-d426d256eb15" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c13a1461-c053-4850-b232-8b3a6b68c699" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="04c782d0-b09e-4047-ab90-b4e191b7180a" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="66228872-7273-478b-b97b-52cafa889053" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="048ee338-fd38-44bf-8555-64d8f7ffa3cb" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="128bbe8f-6478-45e3-bf6c-541574eea762" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="92ac2108-be98-4e1e-b00c-92b902cba5ff" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="e5c7a1e2-3938-43e8-9a43-32299bfe842c" name="unit_program" context="unit_program" subcategories-loading="none" object-loading="main">
                        <category _I_D="a0f8d571-53a6-458c-a509-9215c67eaf9b" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5edf64d3-be7f-40b0-89e9-c3c983c66d2e" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="78914f11-2a30-406b-9cd9-bc17937999a6" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f2b521e7-818f-4501-a2df-a0aff015a27a" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="7"/>
                        <category _I_D="7474a88d-2214-43d1-b2ca-6a4f2c38694a" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="7"/>
                        <category _I_D="234ffc56-43c9-4c6b-a27d-8a758013a2b3" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="b857a74b-712c-4820-a5c4-8eab818a8295" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                </category>
                <category _I_D="104dcd63-9641-4bfb-b752-3b81033525b5" name="Foreign tables" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="foreigntable"/>
                <category _I_D="1169941d-be6a-4ec4-b8cd-595534b144df" name="Views" order-num="2" objects-loading="empty" subcategories-loading="full" child-type="view"/>
                <category _I_D="b5a4e353-1ae3-4f03-9e6c-fe3a0a8130ee" name="Collations" order-num="3" objects-loading="empty" subcategories-loading="full" child-type="collation"/>
                <category _I_D="cf953512-8ba1-413c-9f41-3028f33642be" name="Operators" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="operator"/>
                <category _I_D="9466ebbb-0a7a-4bbc-91f1-a93ccd3b6b70" name="Rules" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="rule"/>
                <category _I_D="36baf081-83bb-4696-8900-1add50d0460b" name="FTS Configurations" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="ftsconfiguration"/>
                <category _I_D="91dc988d-939c-445b-8827-794ba5f14b80" name="FTS Dictionaries" order-num="7" objects-loading="empty" subcategories-loading="full" child-type="ftsdictionary"/>
                <category _I_D="5ac89fe1-512a-461a-8447-90454c53b63b" name="Functions" order-num="8" objects-loading="empty" subcategories-loading="full" child-type="function"/>
                <category _I_D="d834b1aa-7ac6-45d0-8195-d3564048004b" name="Trigger functions" order-num="9" objects-loading="empty" subcategories-loading="full" child-type="function"/>
                <category _I_D="8a6b7e89-3f66-4963-9102-643afe922912" name="Procedures" order-num="10" objects-loading="empty" subcategories-loading="full" child-type="procedure"/>
                <category _I_D="d077f19c-f89b-498c-b6b6-e5419782e9fc" name="Sequences" order-num="11" objects-loading="empty" subcategories-loading="full" child-type="sequence"/>
                <category _I_D="43398c63-4a8f-4a10-987a-0231e202adc5" name="User defined types" order-num="12" objects-loading="empty" subcategories-loading="full" child-type="type"/>
                <category _I_D="3c964e73-fff0-4b88-ad32-e0807190ecdd" name="Domains" order-num="13" objects-loading="empty" subcategories-loading="full" child-type="domain"/>
                <category _I_D="b23281d6-57ad-4f59-a1bc-ad70fb6aa33f" name="Materialized Views" order-num="14" objects-loading="empty" subcategories-loading="full" child-type="materialized-view"/>
                <category _I_D="efe2b456-2f5f-4716-9e51-fdd73e13c184" name="Aggregates" order-num="15" objects-loading="empty" subcategories-loading="full" child-type="aggregate"/>
            </schema>
            <schema _I_D="5c44ab79-7315-4782-9d19-272cd4fcd3fb" name="camdaux" context="camdaux" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="802cf123-e8f6-43e3-bbc4-83fb46552d64" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="74b57db0-03ec-49d2-a9fa-0d40cc7181d4" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="233e94c4-3c18-4d72-a00d-4504b61e055a" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="181af9e9-47f8-40e7-82d3-ee7ba4a35284" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="28a63d53-1c7b-4839-aa4e-c7ee7c769df9" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="392eb3ff-fd26-4d3b-9480-343ffde3cf76" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="ae7691ae-d16e-473f-b5ec-17143567ada7" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="be720727-f944-4c89-b21f-309b292d16e9" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="16bbaac8-4a17-40fb-8c74-e28d2434134b" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="2e0dc48e-a4ad-4d66-b74f-ee176478b1e5" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="221b2d93-5a82-4503-9388-ae5c87717d77" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="2a14b19f-8c3c-44c0-8467-b281ea0991f0" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="d4a049f6-930f-45b9-80da-2abffc414c3e" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="aef88911-6019-4765-9fe3-235668c4401d" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="b9d35e78-66d4-4f95-95ab-43ee1f0a7e36" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="602b850c-82c4-4e6f-bcf3-985122699447" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="a208ee7c-6627-4118-bac9-ff5bf5ff800a" name="camddmw" context="camddmw" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="8ac7af7d-30dd-47c8-b020-82a386629a7d" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="4b41ab55-d0d9-4b7a-b565-6be98b5c8436" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="3dea1b25-0261-42e5-b27c-3551ebe27fe1" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="be6d3ca2-7c24-4a1e-8875-8ade73fa9651" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="f4a75a1a-e23f-4242-a0ba-80e4ad57abbf" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="5caef81a-d4bf-4134-a248-4fc76918ec53" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="b239e72c-69cf-4c35-85d7-bcf505a0d5b7" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="f8cc035a-0780-466f-87f9-dfadf71ef49c" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="807837f1-3f48-4a04-b74c-2ec645642a6c" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="e81cf803-fcaa-4ca3-9cc8-8a1025931488" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="1129860d-ee87-4e78-bce9-6d416b7e03d9" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="fa1df62a-0a8a-433e-be92-167db97c6f74" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="ecab77f5-e397-4e94-8b2c-d5cf76b24169" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="6e1beef8-6336-406a-b6ea-3e054c60e280" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="265890a4-fde9-43ac-b29a-8b145b970383" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="a02842f9-750f-4692-8a9c-cef12c8151be" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="73cd9f54-47d7-4240-bf6a-87147a61814c" name="camddmw_arch" context="camddmw_arch" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="dd1fb545-af71-48c9-b022-90c050c4a90f" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="b1143941-2019-42af-8cc9-80cef2235d5f" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="30bfc7e5-742f-4db4-a972-3570ca3b22a8" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="29bf31e3-f16c-4024-a6ee-ffa4d3faa8e3" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="8fbfe8eb-3f01-4371-a877-07e75798dfcd" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="876ee310-7820-4376-a219-5ca45a78fefc" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="dfc2b35e-bf97-4cec-8034-30f6ab6ee389" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="627c1e9d-d4a1-45f6-b5af-4be2a89f620e" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="c256b4ba-1894-4c2a-b50f-032afc51d0fb" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="f8be3025-235c-4b6f-9471-4c89ec3acacb" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="520904ec-69ca-42e0-b8f1-3b1087b1a913" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="006dc2d8-0061-491d-89a4-8784cad84ea8" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="8119a792-ace8-43e7-b1fd-83bdb17efd01" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="50e11509-a30b-44dc-94c3-c87fa756beb0" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="38c45d74-69fd-4a22-8376-e363b48a3821" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="dfd2f882-b4f4-4701-8fbc-ec9950644fb7" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="8bc26a7f-07ba-4df2-8306-9bafa9689b28" name="camdecmps" context="camdecmps" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL" mdl-applying-result="applying-success" mdl-applied="2022-07-19 12:50:30">
                <category _I_D="3268391d-1d9d-43b7-9779-65463f9f14cc" name="Tables" order-num="0" objects-loading="main" subcategories-loading="none" child-type="table">
                    <table _I_D="ea96de3c-2772-4e9d-b24a-dcdd25a58738" name="ae_correlation_test_run" context="ae_correlation_test_run" subcategories-loading="none" object-loading="main">
                        <category _I_D="5e65a1ea-3264-4349-98a1-78f6a6d5b4bb" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6cec7ca9-20f8-44ba-81da-63528d8bd51b" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c61068d3-a550-44f1-bccf-91f89bd4a6e8" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3da55930-a713-4239-93ef-c5bd3f0d47e8" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="e8783ea9-795c-47a1-8438-e011d21eb158" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="5c78645b-70ed-435a-a47b-2ae30a643524" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="ebf10f0d-7bad-4322-9013-72abbff88031" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="11c9ee6d-b290-471b-bb33-afd7db6eeff4" name="ae_correlation_test_sum" context="ae_correlation_test_sum" subcategories-loading="none" object-loading="main">
                        <category _I_D="bf27a4d9-68ef-4b39-a28b-48515274dab9" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2f0e2211-f8c6-4846-8601-66db49a62fb1" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2b845a96-8f22-468b-b19a-8980a05ddb24" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cbaf1528-88ec-46b0-b17d-ccad349920fa" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="6479ba58-9674-4266-b281-e2eeab0dd015" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="2dc43a29-e70b-4c7a-b989-979774111241" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="cdc7542c-36d8-4b6b-aa2e-b80df56128b0" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="aa36b172-9b76-45b8-a49a-9b777eb778ad" name="ae_hi_gas" context="ae_hi_gas" subcategories-loading="none" object-loading="main">
                        <category _I_D="40e4b8ca-46b6-40a7-b0f0-1181faab7a6a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f7bb7a94-6f6e-4a98-a215-54d040939e24" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="178487de-9f2a-42bc-bd3c-5a25252e875c" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5397b17a-0506-48d4-9246-9637228cbfb3" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="76b6c47c-0af6-4a0f-b75c-68486d1604b0" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="6055762f-7605-49ad-950a-a1bfa6560998" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="3990414f-eada-4776-8e2a-3869b82b7b1a" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="a034e7ef-ee02-44b1-b9f4-020a2c9036e4" name="ae_hi_oil" context="ae_hi_oil" subcategories-loading="none" object-loading="main">
                        <category _I_D="8068bdbb-825e-4d03-9b72-1eb33c0c7aaa" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e0123936-0b31-40b5-a5b3-b03dfb56c382" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="099cf9e7-f971-4acb-82b8-009c6e5a4964" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fdb3aec6-eb64-4805-8b0c-1ccf0a0f87b7" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="6"/>
                        <category _I_D="4471ccf9-d40d-4a1c-93ab-aa74bb129097" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="5"/>
                        <category _I_D="a22cc4f0-7084-46a4-9d42-3a68ff9bc713" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="508cb261-0219-46ff-bbe2-37824cde0507" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="2ca60feb-06e0-4cb3-b4af-c89816ea9b62" name="air_emission_testing" context="air_emission_testing" subcategories-loading="none" object-loading="main">
                        <category _I_D="69dce949-7f33-443e-b12a-a56965126266" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="16922ddd-8a53-42ff-8f39-1fc5bb06d6a4" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8f2c37ab-d89d-4826-addf-a3c953a89883" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="380bb83c-41b6-4551-af4c-3e84a3876a14" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="d31bc41f-1c0d-445f-a5da-01f405d9b17b" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="5b51e4ce-a08d-4e83-8bf3-81ecc8987da6" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="17ffa8f4-4cc2-4a2a-b705-09ed7a47d88f" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="951ff7df-50d6-4a9d-b363-6d778032580c" name="analyzer_range" context="analyzer_range" subcategories-loading="none" object-loading="main">
                        <category _I_D="3640a59b-1625-40f7-ad3f-985f9053b1f0" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a7c91140-c837-49ff-8bb8-12206207b20e" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ab6eb583-bc7c-4086-8135-798b2b4e311a" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e10328b0-4f31-4759-8a5c-c8a5b1945934" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="0fc046df-419d-4c3f-860b-fcbda8dfa547" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="6a03c167-dd3c-42d1-823a-45c4a1e723ab" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="32f935c8-726b-4010-89fa-d8da0c83d693" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="9f0fd0fa-05e6-4c4b-b02d-82f09c95cd25" name="calibration_injection" context="calibration_injection" subcategories-loading="none" object-loading="main">
                        <category _I_D="17191b7d-e55c-4275-a53f-bde905739f16" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5925dfac-47f1-4e5c-a2d3-db9b226f12e2" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0f164333-6b58-45a4-98af-99f43ae06026" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f21a5134-1244-43d1-a163-06686beaf092" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="26272b58-9c76-4397-90cb-48972d04c073" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="1ecaf774-de83-4532-b8de-0a0b0bbb9d7a" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="df7da2d1-ceee-4865-aa96-67fe233942b0" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f30efae8-d166-4426-b862-fa2311dd9cb6" name="component" context="component" subcategories-loading="none" object-loading="main">
                        <category _I_D="2b688e76-7c82-4050-a834-f5215b24ec7b" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d6b20a18-646b-4ae9-b45b-8680a5b2b19a" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="529b1ce3-88dd-45a0-adb1-d36ef4cfcee8" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1747877e-475e-48b3-bd8f-30f90ce02e48" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="5"/>
                        <category _I_D="a9ded1b5-d671-40e6-9389-52f923978224" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="5"/>
                        <category _I_D="73cf4471-44ec-47e2-918a-d57e84f656d3" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="22f947fe-91b8-456a-a120-8bfac868b3ef" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="ba1e59b0-a1e6-45b7-8737-2ee5cb2d111c" name="cycle_time_injection" context="cycle_time_injection" subcategories-loading="none" object-loading="main">
                        <category _I_D="743577c2-6a53-4899-b93d-44a6b44a2c8b" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="24f7beae-4926-4c20-b139-d749dae1249d" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c51c85d8-17a3-4eb3-bfc6-3b085c540c3b" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cfd98e0a-ce1a-4d3b-96f9-f93d0a2637c2" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="d8d45ae1-e1a7-410a-b1b6-b20908f36fc4" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="5dbb85d1-0af8-4696-9fd7-4cd7f3c6f387" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="031f4d4c-ad93-4240-81e4-ce4cf19a4734" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="c0378d2c-3091-469e-95d0-57ed1853c3b0" name="cycle_time_summary" context="cycle_time_summary" subcategories-loading="none" object-loading="main">
                        <category _I_D="05d4089c-f0a7-4ad5-bf7f-59bc644b4674" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="194f57b5-81ce-4ad2-835b-57c955eae37b" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="19b465ad-f01d-4f80-bd81-bcb8c5fcf693" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="15b3d450-3fa1-4a4c-a9f1-e6816f11cb81" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="d1f9615d-959c-4047-9c76-1b31024bc0b0" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="702cb4a0-653e-4a46-9b28-58f6af67f2b3" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="faf6dbef-0478-4968-a305-b944b7b931ca" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="d7aae66a-8965-4d22-8977-216a0469294e" name="dm_emissions" context="dm_emissions" subcategories-loading="none" object-loading="main">
                        <category _I_D="c84bc36e-d3d5-4ace-abac-ba75bb6e27d5" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6f2b2ac9-433a-4e15-8ec6-432a42791063" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="856344ff-e0ca-4796-b437-665f38f50f3d" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="31162b5d-0dc2-44da-910c-6cac44e84b43" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="c42acb75-0456-4c80-bc78-63fe66705b72" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="07637ca0-c5c2-4df6-a296-d7b76cba58db" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="f462b095-5693-4ba6-b930-4bc088633f9d" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="8eab96af-8e59-4d1f-b59a-c1b9788f23a7" name="dm_emissions_user" context="dm_emissions_user" subcategories-loading="none" object-loading="main">
                        <category _I_D="edb73060-6de5-4504-bdb5-cc33a5df7be5" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="56b84f4a-cf41-49a6-a006-f69055c0a9f0" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ea69a16f-da01-4548-967b-6bc85652ad59" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0d2e0e0d-37fb-41e4-b108-53105c16f9c3" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="f58e79d6-ef83-441c-a9ad-4b25f233b695" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="bf071410-c5a5-444d-bd15-3cfdd6bcef30" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="72cae815-123f-4ff1-9765-19eaeba8cc4e" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="bf5f3977-6124-4e94-999c-91dddf443370" name="emission_evaluation" context="emission_evaluation" subcategories-loading="none" object-loading="main">
                        <category _I_D="db7ab807-24a5-4a72-b17e-9a7cad5183ed" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d592c34c-dc8c-4945-81d9-c6e594bec374" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="023134b1-e58b-4474-b341-c432c3de65ae" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4cdba1cd-b32c-451b-ab25-0d59b859c03f" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="9215ac3c-f8ae-4d49-8898-6959bbcbb0e8" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="4"/>
                        <category _I_D="4794bb8d-a6e9-45a3-9811-a4b56712d198" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="3b43ab72-0361-436c-8d44-a42262cd914b" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f28bf816-105b-4a0e-a782-e7f7eda4a1e7" name="flow_rata_run" context="flow_rata_run" subcategories-loading="none" object-loading="main">
                        <category _I_D="00f66e58-2b0c-4ee7-b2ef-7ce7619ce956" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="34569d55-0709-4f39-9111-9e3725a556c3" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7ddd2480-f659-490d-993b-7faf54c04d78" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e02c2315-62a8-4340-97c3-827d6ec45a2b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="ee33eefb-c49c-4b9d-9cdd-644cd049a145" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="807cfad2-7001-4efd-97b6-05b51d35d63e" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="86a5d85e-15f0-4f48-a2f4-3298ab5ddb24" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="0720a0a1-2431-49de-86d5-e797b3735c5f" name="flow_to_load_check" context="flow_to_load_check" subcategories-loading="none" object-loading="main">
                        <category _I_D="5b0079e5-f70c-4d66-b12e-0089517abe98" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3a3a7d47-f219-4423-8486-11ce50b98f9e" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="835fe1a4-34c6-4e06-81a9-206576e2a3a6" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="926bd4ed-c1e9-463d-985c-6df9a2ac2168" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="70082fe4-34f3-4b85-866f-fab715f04ed1" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="3c2f391a-3e5f-4f13-ad05-7528fc48b009" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="53d62bb4-1e3a-4d1c-bde2-85468f9492a3" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="444b89bf-0af3-4375-9b31-bff5dce8c88b" name="flow_to_load_reference" context="flow_to_load_reference" subcategories-loading="none" object-loading="main">
                        <category _I_D="79c84ed1-b899-4ea0-9c6b-84236c935dd9" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5fa9ed5d-42af-4d16-88da-baf1879cf272" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fcd5d802-0ad4-4df8-a58f-bb183cccc395" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="55e0cba6-bf30-4155-b0f7-29c56ae5a035" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="3c8ad78a-824a-4776-a666-0d27194587a8" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="15ee13bb-efee-4045-b280-b3a9e6792289" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="5a89bfe2-0d24-4029-b750-eb1e118e8771" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="12684614-f304-44e3-894c-09d6c0a33087" name="fuel_flow_to_load_baseline" context="fuel_flow_to_load_baseline" subcategories-loading="none" object-loading="main">
                        <category _I_D="556ae384-f3b5-400d-a5fa-4de473403467" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c9c18612-080e-4fbc-b47a-970464b9b5d0" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f3206417-118f-4e09-8102-dd248439cb14" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5bb8b4fc-08bc-4507-bd30-77e00c72b132" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="c7700c05-cad5-4cba-b7e7-727c67f3f21b" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="8177912e-8870-4de6-a8bc-c486702208c5" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="75d585c6-7731-48a0-a430-cdeba963b07b" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="965637fe-b5bd-4d93-91a3-48262a7a1c6a" name="fuel_flow_to_load_check" context="fuel_flow_to_load_check" subcategories-loading="none" object-loading="main">
                        <category _I_D="f7e4161b-8a0b-4128-909a-864c6b2f80ca" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3a567f0d-a7c7-474a-a79c-284455de7822" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e8432bb0-cfc6-47c9-969f-e00b3501a11c" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="646ff96a-73d7-41f7-aea5-fba75a25f39b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="5c0848cd-18c8-4b82-a364-dcb38ff8b825" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="cfc83024-50a5-48bc-af47-2c3921c767a9" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="02cbd094-694b-4b5d-9c97-cc2b289f97f2" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="6ca8243a-66e3-42ed-8516-449abf22a95c" name="fuel_flowmeter_accuracy" context="fuel_flowmeter_accuracy" subcategories-loading="none" object-loading="main">
                        <category _I_D="64ca5368-91cb-4ba2-9e07-6b5d661e6229" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="30015181-3f6f-4786-b9d3-5fa83a9c82a5" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="18f48680-0519-4e78-89d1-4c2c0926728b" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="355636b3-8040-4165-b4b0-a063f6c1b125" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="f23c11cf-9a43-4cbc-8f4a-7e87565f5357" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="1348f5f1-13ef-4b92-b062-c029c33ff53b" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="7099aae1-c8d2-4fae-ad37-4701b990b29a" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="fe5b2c72-ca64-4284-ac83-afcf98ccb162" name="hg_test_injection" context="hg_test_injection" subcategories-loading="none" object-loading="main">
                        <category _I_D="39c9a47b-0773-4c96-ba0f-b9a4c25d0ab3" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="58123af6-03ee-4de8-99b3-d46d3300f195" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0fad158f-7081-4e5e-82db-98c3beea77d4" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="aba9ef36-5091-4d09-9461-d5814edf6760" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="6f65d0b3-e0da-4fe6-a791-4bec6b6adfb7" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="e7e300c6-baf5-43a5-85a7-9f4c56fe7d11" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="4393854a-be2e-40c5-b212-7b50409b87e6" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="0a80dd56-39b6-443e-aae4-af9286e5dc14" name="hg_test_summary" context="hg_test_summary" subcategories-loading="none" object-loading="main">
                        <category _I_D="00c316e9-431c-44f0-a5e4-d4887e257b7c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e463d1e3-b39e-4e42-9335-2c4fc11c522f" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b33944a8-7153-4e30-b58f-752a7a4bc382" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2a8f89ef-589f-4761-a467-a2def82d9a34" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="488ce5e1-81cd-43f0-a455-612017332e93" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="b543e855-d7f1-4cf5-9c1e-fabe27c0fac2" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="fef29a67-61bd-4011-b2ad-c7d7876e9ae3" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="9ee515f7-5d93-4bdd-ab0c-82fb6cc9c481" name="linearity_injection" context="linearity_injection" subcategories-loading="none" object-loading="main">
                        <category _I_D="c7a2fb3e-015b-45e4-bfc0-257a1933bba6" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c32adeb5-4c3e-41d2-ab6d-eaccb39f7d49" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d71749c3-2d5d-427b-9d01-9ec882f453b5" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="729b6598-d805-445b-a972-ea96a6471a13" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="36059e8d-b43d-4489-8733-af097a2c4e59" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="949a71b3-357a-48c3-b63b-f2e6288e08be" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="6f2df70c-b708-4a6c-b9c2-cec717aba060" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="3a6fa279-72e9-4f7c-86f1-b1fa2e3ed13f" name="linearity_summary" context="linearity_summary" subcategories-loading="none" object-loading="main">
                        <category _I_D="1726fedd-7e62-4d09-848d-3b1bb9ad623e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="dfb26fef-aadc-4b7e-92b0-eec4a142aff4" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="dddb7d56-7f37-415d-89b5-2d0ef34ffd8b" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="85d6eb17-796c-4b2d-ac97-4fb1192ec1cb" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="5cd56d85-cd36-4105-a048-e6042d59d952" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="00dba720-ee36-4d4d-929a-57e339e8b070" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="0ffaea84-1e06-46e3-a1a2-5fedcf27bf2f" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="252158ad-9713-4915-a146-f2d569ef4961" name="mats_method_data" context="mats_method_data" subcategories-loading="none" object-loading="main">
                        <category _I_D="46c08f8b-b051-4ba7-b7e8-03fe782b189e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7c210a68-79bf-42d0-b1bc-f01cecf25f42" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7df8a681-8609-4609-930f-f2096d39a8d3" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1840e873-b8c3-4b3a-b782-34551caaa022" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="9324c604-cc8d-4417-8b44-706055dc7c17" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="93bf0fea-e704-41ad-ae98-c1b004074806" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="d80614e5-7879-4c00-a2d4-b50aa24da2da" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="95c0e7e4-a0b2-4b53-b2d4-8ea288bfba14" name="monitor_default" context="monitor_default" subcategories-loading="none" object-loading="main">
                        <category _I_D="b4eb1763-7692-44ac-b510-0b18eb004b48" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8ee39d1f-0e26-46e2-a994-ca2b4d9e1064" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d708d6ce-dc1c-49e0-85ca-6fa8984a8d35" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c43477ae-2804-4a69-97ec-d0a00154cf5a" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="8"/>
                        <category _I_D="9040ab75-aef7-4250-abed-e283b4ce5f65" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="8"/>
                        <category _I_D="ccfb5c81-d96a-433b-8c2e-04926ba1c1f2" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="7b8eb52e-5414-4047-ac0e-464014b8710b" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f7d4db56-59dd-44b4-bdc3-280f632fc77a" name="monitor_formula" context="monitor_formula" subcategories-loading="none" object-loading="main">
                        <category _I_D="ed5c1b44-0a9d-4e9f-afc4-039fdbb577f0" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ccc8eef5-582e-4256-823c-72b8d5cebbbb" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a999bf2f-d7e1-45e7-8b86-fea0c09b6c8c" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="efd49ccd-1b86-4568-8aeb-417d870ecc46" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="aef2c7ff-a56d-4bb8-924d-fa810191fc81" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="4"/>
                        <category _I_D="d147eb8f-b954-4f0e-bb68-99a2daad8f23" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="5cfd44b7-1930-41f1-a65a-099bc2d03ec1" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="da33624f-640f-4935-95c7-3d2b96e91571" name="monitor_load" context="monitor_load" subcategories-loading="none" object-loading="main">
                        <category _I_D="a402a14b-2216-43ad-9210-5f3446b974e9" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="724f60c2-a1d9-423b-80f6-348178746559" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cbe7bf89-b3a5-4319-a280-3246122b8adb" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b75f7832-6036-4366-8771-abfa4486be5b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="0b2b9fbc-e14d-4710-bd33-027ab12e2d27" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="35eb4b9c-f3bf-478d-b8bd-302ee144de62" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="7170adf3-2a4c-4c8c-a658-be6ecf34483a" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="2430e0d1-3a7d-4848-bf18-ce9cc56828f8" name="monitor_location" context="monitor_location" subcategories-loading="none" object-loading="main">
                        <category _I_D="4d43f4e5-4ed4-45aa-aaaa-0b35a33ddc93" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3ebdad49-e58b-4682-9116-09b6e11210e4" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="175da5fe-8b3e-44b9-b108-77c6fc023245" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="54c3ae98-4b2c-4c58-9bd8-e76fdc40ac7e" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="4a21f3a1-7d18-4e47-95e9-53af9cf90d8f" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="93aab753-84c2-403e-97ba-f7ec05b34f46" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="15c73c38-b29f-4932-93af-1c2d90502700" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="64fee776-5995-4525-81ee-577fabda47ac" name="monitor_location_attribute" context="monitor_location_attribute" subcategories-loading="none" object-loading="main">
                        <category _I_D="b46c3f84-16a4-486a-9aeb-c8c563ccfb7a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4ee4cabd-4a6f-4f5b-a4eb-777e9370154f" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="eaa5d4ed-4ae5-46e8-b1e6-c010115042c4" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a45c87a9-61d3-4f38-8967-e4775b6e1bfd" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="604b5a5a-7031-4ba5-a113-7cc0a37f086b" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="4"/>
                        <category _I_D="6acdd222-590a-4910-bc81-8f97e02c02a9" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="a00a14a9-4047-4591-9ca3-1df7f87386b0" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="ddc27643-96d9-4c83-ab65-b74942936797" name="monitor_method" context="monitor_method" subcategories-loading="none" object-loading="main">
                        <category _I_D="91593454-c214-4daf-81af-7726e8807b1d" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9793a163-2d08-4c05-9ae1-3ef35e90a53a" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="375c57c0-64b2-47ad-87e7-096718e90165" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="929d922b-2f57-48c1-8a67-b858371d48d7" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="6"/>
                        <category _I_D="58192715-6061-46df-bd8c-8615c265fbc8" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="6"/>
                        <category _I_D="f5b0d213-767a-4533-b0aa-a50da39c5a35" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="6c0c37e1-0d75-40a6-a2af-5e8160edaa8e" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="61689c60-ad97-45be-848b-0dae1e2642d4" name="monitor_plan" context="monitor_plan" subcategories-loading="none" object-loading="main">
                        <category _I_D="ea90b9f1-e3b4-494e-801d-134bf30fefb0" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4917deef-8ac1-41b7-96a7-c89ca2dc0f58" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f2c1e77d-36c7-47c6-86a2-020ff73c8002" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="547ef9b8-777a-49bb-8228-efa4cccb3416" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="5"/>
                        <category _I_D="b4448b36-aa3f-4095-bbdf-ce6d91ad34ea" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="7"/>
                        <category _I_D="7a32de87-ea64-4bf0-811e-db7169cee301" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="8fa2e341-ff7e-4f9c-bc52-4b449f847bb3" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="51c60ae4-53ef-46c0-a74f-e927a8012fce" name="monitor_plan_comment" context="monitor_plan_comment" subcategories-loading="none" object-loading="main">
                        <category _I_D="edcc9657-0567-4f85-a416-295c20184a6d" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8305a238-6ca6-4cbf-86df-be0c1d55da5d" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f498d493-5c7e-4954-8460-22ab7d3e7906" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="10113b79-b1ef-4923-bfbc-32dcb5ad06ae" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="9e3e9464-28cb-4cc8-90ac-4625eab605e5" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="f7704482-3d5c-45f5-9475-a7f76a8b0dbe" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="d9ec3a87-841f-4fc1-9972-8b3f2453bcb9" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="85624bb4-80b1-4c1c-bc90-7f8fecd4c861" name="monitor_plan_location" context="monitor_plan_location" subcategories-loading="none" object-loading="main">
                        <category _I_D="7d36abc5-5b45-4211-acc3-77d45a541d05" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a6f23094-b101-4ffd-8b62-4ae739d90cb1" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7c953d0f-235f-410a-a4c9-97ad1400a154" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="03ac90ce-77b7-4c08-b686-5f4db4f63e91" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="ca51598a-0320-45ff-bec6-3dac38569521" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="e59dd003-677a-49b1-affc-773bf65d4d62" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="8dc998a0-3acc-4f75-8985-d09c160274d7" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="279a2fef-e5a9-49f5-927f-754254b7e4ad" name="monitor_plan_reporting_freq" context="monitor_plan_reporting_freq" subcategories-loading="none" object-loading="main">
                        <category _I_D="a82c6823-377b-4354-af44-e0d26e486a42" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cb9ca056-8111-48b4-974a-78ae8f894e7f" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="314732c2-5bc6-463b-9b74-975140ea6b2f" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a5b3d554-d85f-4e04-8d8f-3dfab704c0ef" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="5"/>
                        <category _I_D="3d525a8b-6835-4f5e-80b3-422bebfcf648" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="4"/>
                        <category _I_D="e356e53d-0ec1-482d-b2a4-632317693326" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="8cd7454d-ffda-44cd-b36d-9afd1af063bd" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="a7c1f274-21c9-4b44-93a5-b452b2e670a1" name="monitor_qualification" context="monitor_qualification" subcategories-loading="none" object-loading="main">
                        <category _I_D="fd913481-fa17-4cee-afab-0e8dda299619" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="74fd81aa-f1ce-4174-81ef-6658052fc113" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fa24aa0e-52f5-4b35-a75f-2066f72cfc47" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="66aa5eb4-9720-4252-8df5-a8932cce1ac5" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="95d13d8b-3a1f-4eed-a30b-23638c3dee1c" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="d600adea-159a-40d2-944b-62291affebe1" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="07c0dcee-139a-4c0b-9dc9-881c12b67880" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="3da598d7-847d-4e91-a82c-e822c6b7d7ed" name="monitor_qualification_lee" context="monitor_qualification_lee" subcategories-loading="none" object-loading="main">
                        <category _I_D="f8cd2316-e903-476f-b7a7-c6fbafcc0135" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="98c0f471-73ff-48f6-9112-c1b976817279" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4062041f-cbe2-4e49-9b23-b8ad66e7829b" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1c105711-7816-4c10-8fc7-acd0b004470e" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="5"/>
                        <category _I_D="8965215a-0ec2-4a5b-9248-5c1eb1382906" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="4"/>
                        <category _I_D="b39a107c-4bbe-42f1-888c-3814b6c17068" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e4f702c9-7445-4067-b432-05d36db8a02c" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f48b9afb-d608-4191-a5ab-1c5b0a30c875" name="monitor_qualification_lme" context="monitor_qualification_lme" subcategories-loading="none" object-loading="main">
                        <category _I_D="48a6b589-819b-4dbd-84c5-d3f7ad8fcd7d" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a85ab659-9098-4980-a39a-dbf2ce31e620" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0bf34375-8138-4b91-bb3d-73669808929a" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="43dcd636-a582-4ebd-a246-a13183b782c8" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="b052583e-be22-4819-bad8-d54c18d7bb1d" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="a98070d3-ed46-458a-b9a6-41aef9885836" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="bc4dc8f6-a2e9-40e8-bc0d-987ec524fb29" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="d808eaf9-da3b-421a-8cf6-295b181a6169" name="monitor_qualification_pct" context="monitor_qualification_pct" subcategories-loading="none" object-loading="main">
                        <category _I_D="3f493725-e17b-4e86-a7f1-944afb618bab" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b3db3e2e-6731-4186-9778-7716c416f731" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9db20d41-6673-4a15-9f07-6cb2c1a60176" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="266a0d71-7c20-4257-a114-1795bd91637d" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="5"/>
                        <category _I_D="7b5c0a81-288e-45eb-bac6-4a08e79298fb" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="4"/>
                        <category _I_D="8bc115a5-f5b1-47d5-83ba-462239c98478" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="59deedab-0c80-40b5-8f8f-4c4a2563300f" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="8556c952-7327-494d-b65d-a5e1acad450a" name="monitor_span" context="monitor_span" subcategories-loading="none" object-loading="main">
                        <category _I_D="7bb1de4d-7fec-40e9-ad41-64f62ff19ad1" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c8d46e4f-08fa-4a4f-8974-286a831cb47c" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="87da95eb-9561-4fad-b76a-5c20618807a3" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="662bebf0-f154-49a4-9353-baadaf62ffec" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="6"/>
                        <category _I_D="3b4f4124-c01d-45f8-b9f4-bf6a7ec98e16" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="5"/>
                        <category _I_D="e9d1fc9d-89a2-43e8-a6e5-45df6471bb60" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="3cae4cbb-dcc3-4cf4-a462-cb76dd9812f1" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="06604b41-5c1a-4d57-ba2b-f09e30e93037" name="monitor_system" context="monitor_system" subcategories-loading="none" object-loading="main">
                        <category _I_D="72ae30e5-821b-4de0-a6fd-8b9cdf69751e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="15a4aa23-1149-4f06-960d-656f61db91bc" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8b75b94b-7d40-4a63-9090-15fcdcf0484f" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4fcd9608-98f4-40a9-ac4f-740c91c10ef2" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="5"/>
                        <category _I_D="2a8438ca-0c1e-493b-9141-b4dc581ad6fc" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="5"/>
                        <category _I_D="5db9ddad-8eac-4747-8d01-b126524963da" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="48b730de-c340-4846-80a0-ef937fbca83e" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="fb018b7b-b1a3-4e6a-a38f-0869e43270a4" name="monitor_system_component" context="monitor_system_component" subcategories-loading="none" object-loading="main">
                        <category _I_D="86b5df78-709c-4b4b-932d-06a73631006e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cc3dc46d-60cc-4298-83a8-a1b832aa1f81" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3fba7afc-e8c9-49b5-9d28-f7a18476c783" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c321a8e1-6036-456d-b4e4-14bb98fd5992" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="9ddb031e-8873-4c2a-a08a-c896a74c9f12" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="99d559b3-172e-4696-8e33-65e21fb82658" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="37c92b32-ccfa-47c5-952c-623b0fb80e3d" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="9e8b2077-3850-4e94-8df2-6faa7e8d9f4b" name="on_off_cal" context="on_off_cal" subcategories-loading="none" object-loading="main">
                        <category _I_D="306da007-f737-4912-b3c0-f69050c293db" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b60e8a56-0e7f-411e-b703-23195a0555c2" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7de965de-78dd-487d-b98a-11651a59c3ea" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a2310ed1-e927-43b3-8999-f3d99d97397d" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="cdc7fdaa-bf33-4fae-a1d6-2cc647ab51a3" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="7a4fff5b-c83e-480c-9e75-382b4e7d930d" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="bda31826-bded-4ae3-b9cc-400d505a8240" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="1a6cdaf4-4d43-4cbf-968f-6a4bc1bd84e9" name="protocol_gas" context="protocol_gas" subcategories-loading="none" object-loading="main">
                        <category _I_D="7fdd611e-fdd7-4251-a7ad-34afda8b1734" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ecff8d20-6250-4994-a973-51584991bf8a" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e2bc59a3-75f4-4ee9-85f9-79a62dd6eb45" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cfa0a2c2-353b-4ee1-98a1-5c542e618867" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="04ee3ba5-f549-4c6a-a41f-4c86ee5e2666" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="ada8be6f-1851-4409-8a4f-c2dfaa0a3dd7" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="7ab036fc-73c5-4595-b114-552a1e15074a" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="49689b57-d42e-4526-92a9-f369736cafd5" name="protocol_gas_vendor" context="protocol_gas_vendor" subcategories-loading="none" object-loading="main">
                        <category _I_D="b80bd660-223f-440e-a119-401b05975c68" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fedca371-12ba-4519-9fbe-bf3a7a90f048" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cb500901-45e1-4585-a0c8-f90bd2784c10" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3bcef6e0-0bc1-4fab-8d10-7ef7edd9e618" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="98cd6c79-0649-463e-aff3-c874b16acd93" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="2bfcdf46-5df6-4708-b68c-3354f468dcf8" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="b740eba0-3037-47a1-a260-761dc82b7a96" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="2925096f-02e6-47cb-875f-2b8d91d0a540" name="qa_cert_event" context="qa_cert_event" subcategories-loading="none" object-loading="main">
                        <category _I_D="668279d2-4197-4dcb-ace3-f514bafa0dd4" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="97a2be29-dd0d-4413-8168-b4d9c230e984" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ee8683aa-f08f-4427-95f9-2d10fb8c2558" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5bf6f9fe-9186-45c1-a8c0-ae57f11161ec" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="7"/>
                        <category _I_D="92b5b23d-e597-44d5-835b-3eb0a8ba2ab2" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="8"/>
                        <category _I_D="6fb0a995-3265-4010-a358-77cccb8950cc" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="59dc42ab-c161-4091-8109-66f82151c8dc" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="41da9896-6aa5-4555-8e2d-7641cbe6be53" name="qa_cert_event_supp_data" context="qa_cert_event_supp_data" subcategories-loading="none" object-loading="main">
                        <category _I_D="0327cf97-20f4-477f-b198-c64d844fdec7" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fad64eba-d0b8-46ce-a652-6300f7cc677b" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4732ab8e-78ad-4434-b0a1-d94b7ea7ff9e" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b4f1ba24-6516-42ea-aa70-099611e54714" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="5"/>
                        <category _I_D="75a86cb2-5bbf-4995-b966-a8c4dd9d26ee" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="5"/>
                        <category _I_D="6beeeb61-1577-4722-83c4-3edf65e6202a" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="507d6152-0029-4a20-a195-e1cd59d89bc2" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="4e49cebe-20da-4dc2-9e96-0fa69821e109" name="qa_supp_attribute" context="qa_supp_attribute" subcategories-loading="none" object-loading="main">
                        <category _I_D="92f35df1-c232-4161-aafc-69f2a31d6529" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7ab458c2-bb38-4904-ac57-377097059ece" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2dd33b5e-e534-4f85-9fcf-59380acc294e" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1e9ca798-b926-48b6-abd2-971cd6f6af0f" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="29d47c46-e0ee-4bb7-b6d8-322731226546" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="536f605f-2785-443f-ad02-b8606f2ec47e" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="1b57d1c4-6041-4a07-b771-70ba61addc3a" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="7025ca1d-0b8c-4063-8fbe-5a2838692e6a" name="qa_supp_data" context="qa_supp_data" subcategories-loading="none" object-loading="main">
                        <category _I_D="5d36174c-c4a4-4db9-ba3c-34f20eec1b5b" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="430d3ecb-d7e3-4009-a29f-4fb2d2ed9556" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0ece4049-013a-4ee7-b261-7416985af313" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3db7e277-3c1e-442e-895e-ce5d42508b74" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="13"/>
                        <category _I_D="97071030-9415-4ece-8d80-e6012116b586" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="14"/>
                        <category _I_D="984010cf-8005-454d-ab9c-cc8f60257304" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="ccf95e4f-5e7a-467d-84a0-530657c77981" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="7208b490-579a-484c-93cd-075b8e910978" name="rata" context="rata" subcategories-loading="none" object-loading="main">
                        <category _I_D="de9b4606-7b5b-4e55-849a-ffa09dc45893" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a0d85fa6-a40d-4115-8867-f2e0dc51c15f" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7091fb47-9697-4892-aa70-4c3d59a8293e" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2233697c-41ce-4314-9342-e43e3c752c7b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="9a09465f-1346-451d-a745-91ec0ebff1ed" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="ed07b55f-71d5-427b-80df-59a8ee50e1ee" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="cb11321d-a9f0-4dbf-85ce-304ac8f2912f" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="18c9efba-93a7-4af5-bc11-0c89d5293b92" name="rata_run" context="rata_run" subcategories-loading="none" object-loading="main">
                        <category _I_D="07b729ec-3508-4eaf-b854-c381e125950d" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c27c33ca-4052-42e5-aa8c-052b182d9481" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4da2b5d3-7fd8-43d1-b8e5-a6266553ff9c" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a3053b32-13a8-4059-bd94-0cd710a66a86" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="989fe4ce-f5f9-432a-86c6-fdf3c36ad561" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="0f500ec9-0f2b-4587-acb9-24a7800a922b" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="2ba82451-1afe-49ed-807f-83493d3be84e" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="e28e5367-f9f5-4459-a81b-97a6e8d999b8" name="rata_summary" context="rata_summary" subcategories-loading="none" object-loading="main">
                        <category _I_D="6dd65e40-b21d-4acd-aac5-8e3487de318d" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="aa270c66-99b2-4b1a-957a-e4b3a5b79d56" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="12c6c5d1-87ed-41ef-88ba-d72f5723adea" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="76a5f835-a1c4-4565-9578-23cc4cccac29" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="6"/>
                        <category _I_D="a06948c0-073e-4a38-8c96-d73622ff04c3" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="4"/>
                        <category _I_D="a99d72e7-c5cd-4903-8541-4267262e0af9" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="24678ff2-9a93-471c-ba84-81d4bfea05e4" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="b41a3a85-df6e-4746-a660-db7411c1d186" name="rata_traverse" context="rata_traverse" subcategories-loading="none" object-loading="main">
                        <category _I_D="a16fbe2f-0171-4dd4-9030-fd13b3d27739" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c8bff739-857e-46bb-a632-2eb9b20c9556" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="adad95eb-a062-4f92-b74e-ae983fd1bf4a" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c8578919-c4b3-4424-89a0-3b1ba78fba33" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="75ce974b-4a9a-403b-9e86-0ec247896936" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="fc689c5d-9d4f-4575-baab-6f63cbea6d46" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="ea219117-456f-4b27-ba47-151e62c1f68f" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="13ad3502-c42b-42c1-a464-42541063ddaf" name="rect_duct_waf" context="rect_duct_waf" subcategories-loading="none" object-loading="main">
                        <category _I_D="a348b86e-1bb9-484f-8f69-af1427f258e2" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f7b3d4ff-cecb-4142-abdf-b0e65f998c40" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0a8768b0-3d56-4477-b207-a4b818a6f526" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d19c75e6-6d87-43c3-b998-0ada73439ef8" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="c2319d87-bc1c-4a24-b446-025f18c045f5" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="1077b840-0903-4ac0-852f-781237d7d9fc" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="72eaaf42-6d6f-436b-ba8c-5f07957a3b0f" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="3203db70-506e-49c9-9a3c-bdcb1e709f95" name="stack_pipe" context="stack_pipe" subcategories-loading="none" object-loading="main">
                        <category _I_D="7575402b-38b9-4c86-9e47-128de27933b6" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9acebf76-1b89-4b82-91fc-b8109702daa1" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0f5004f3-c560-48b9-bbd8-0a688122f949" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c68029be-244c-43e7-b97d-e23da8c1bdf4" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="3f12ef0e-9056-436f-bb54-2d22fcd56230" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="2edd0f39-71dc-49b8-8ff0-8682d717cf60" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="3b89cb38-47cf-4d01-9bf5-9f5e035aaf4c" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f0e6e726-c0c7-458b-b551-08d41a491fed" name="system_fuel_flow" context="system_fuel_flow" subcategories-loading="none" object-loading="main">
                        <category _I_D="26da14bf-e77e-464a-99fb-68b8f2991422" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1fd302b7-9902-4e5b-9582-c8e2522a2650" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="afa0f329-52a5-41ae-9f8f-028c4845c914" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c055fc8b-d24e-409b-a47a-e0aaecc0ffb3" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="70e58f4a-ba58-4438-9474-c062138b2c58" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="56408136-554b-45e3-81da-61e0e5152b47" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="2346b458-341f-4bfe-a9de-c1401fbd5741" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="62a4ed56-f836-403e-b39e-504c61b18de2" name="test_extension_exemption" context="test_extension_exemption" subcategories-loading="none" object-loading="main">
                        <category _I_D="13d7e3d3-dace-49a5-8753-636eb4825a32" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cb034abf-ad7e-4177-a4ed-09bf4b1b5a18" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b9b4e68e-2df9-418a-8f61-c25aff6fb5f7" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="910f660e-591f-4f71-b34d-19d9ae834133" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="9"/>
                        <category _I_D="56ae6047-d3e1-496c-a918-3c0bc17190ad" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="10"/>
                        <category _I_D="9e6b530c-398f-431b-bc5b-537494d58765" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="6eaad234-0cb4-4a08-b87d-0db5dba7c363" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="461bfc3e-fdb5-44e0-b1e2-ef6bb2cff49b" name="test_qualification" context="test_qualification" subcategories-loading="none" object-loading="main">
                        <category _I_D="ce2f8f32-ff38-4d35-9817-cec909985801" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="09798b0d-d7f1-41c9-a2ae-f1f65b016d7b" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b6f51ac9-659a-4464-a1b8-0022ab20ca9c" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="196c2860-1a8b-4ac2-a857-2be7a9999737" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="3fafb72c-621f-4d2d-b885-b9f0d4ee7601" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="9b0b5a34-4d32-487e-b64e-2b905d20f398" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="5a824cd4-c1a7-4a8e-bbd6-fcc6dac5ce45" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="c06208e2-b0df-4db9-a67c-f2136f27d138" name="test_summary" context="test_summary" subcategories-loading="none" object-loading="main">
                        <category _I_D="f786e794-96ef-400c-ae1b-1a21683a00d3" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cd3855d1-a725-4171-909c-63f57855acb6" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1474a699-8aca-4cad-be3c-acad7bd9f72e" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="edc483e6-7bf2-41c3-8cc4-c368c0e757d4" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="12"/>
                        <category _I_D="bd548eb8-a226-49d5-ba7f-47a38aab422a" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="10"/>
                        <category _I_D="fa9de2b9-6738-45e5-8ba2-e5d48ab841fd" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="7f8e0c8b-dd14-470e-a870-bbbb975b26ac" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="b7b44327-a1a8-4226-b78d-f1a9c77aebae" name="trans_accuracy" context="trans_accuracy" subcategories-loading="none" object-loading="main">
                        <category _I_D="3924a9eb-61b0-401e-a462-c935afc3a0a8" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ffae39c1-84e2-44a4-b574-4069b3a763b2" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bb7764ef-8cd5-4e7d-8988-cd1d1b269674" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7fe7934e-3387-4e58-b538-3c3cf8c7fc45" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="5"/>
                        <category _I_D="067802f1-fd4b-4deb-a025-220ff988ebf8" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="4"/>
                        <category _I_D="b005f2f1-8996-4127-8a51-1ec24e22292b" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="32606e41-a3ac-4cbc-8c2b-faf923c86082" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="dec6a7c3-e46a-4419-be12-745c00a3e697" name="unit_capacity" context="unit_capacity" subcategories-loading="none" object-loading="main">
                        <category _I_D="113205fa-e32f-4287-b4cb-b3177704c8d3" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="87be5233-2d10-44eb-b8ab-f45cf382c3b3" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="35d9e705-5c3a-412e-b08f-ddd909eee78b" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1fdf3945-a15e-4fd2-a51e-d256baad054a" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="8a119686-331b-4c55-9b78-f6cc166a78d6" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="e84b6bc0-014b-41e5-b59b-5e6e51cdbdbe" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="c69f061d-e224-461c-9891-5f8107bb7afb" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="edcdba4c-6969-4e9a-b444-1dfcdb9bd270" name="unit_control" context="unit_control" subcategories-loading="none" object-loading="main">
                        <category _I_D="aa16fd5c-feb3-4cd8-8418-84df024d052c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f273e02a-b8e9-4b0a-9846-4424178a0c3a" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e63e01a1-db69-4c0e-afb8-747b02d53baa" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="346f2239-9f0c-4298-9eab-13139e02b116" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="44c30092-1865-4144-a9d5-61712d099186" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="b5415157-00d6-42c8-8708-2786e4411388" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="0946b7b6-51c0-436a-b31b-40fe1da42ad7" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="748e3b29-f3b0-4b45-beb4-a33eb9aa2875" name="unit_default_test" context="unit_default_test" subcategories-loading="none" object-loading="main">
                        <category _I_D="ed48e978-0cb4-49c9-ba18-c273845e0293" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="28b7fbb2-ee26-48c1-855f-ae62d16748c1" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f2389185-ce3c-4f82-b6f5-b9dab0ca78e9" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="19252c34-7818-4a95-8cc3-b89bee253023" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="3dff4fd8-303c-4e5f-a35c-85e162cb1cc5" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="862adb99-a34a-4b7e-9687-b3d8eeca835e" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="c7a22195-ce28-40b1-9e52-f304860c75b6" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="d5d7ea5c-9790-4096-85b7-94d20f5414b4" name="unit_default_test_run" context="unit_default_test_run" subcategories-loading="none" object-loading="main">
                        <category _I_D="b5a99a4b-2981-400a-a692-19e98ea81269" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2661bd29-6bf9-4674-bb54-90c945b47f93" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="699a3510-02b4-4201-9c6e-3a71a857cb85" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8159f222-c2e3-437f-9567-247aec6a7344" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="7edf9a1e-a0f9-4a07-9aae-a0e4715ecafc" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="4aab9939-b937-42a3-967b-bc5f0bc43523" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="14f315e2-57eb-40fd-b09c-942156f406f8" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="32777481-0fd5-4d39-b185-d87c2bd4a6fb" name="unit_fuel" context="unit_fuel" subcategories-loading="none" object-loading="main">
                        <category _I_D="c62fe6d5-22e2-47d6-a438-ee642e16f49d" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a19cb0c2-8b40-4d1f-88b2-460e445b237f" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="15700262-cede-423a-9713-3b887db71f76" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f6bd9cfe-48e5-40b5-bdd3-648a55ba63d4" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="8"/>
                        <category _I_D="22d6410e-fe59-4ead-bf48-227e05fd78e3" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="87291664-8366-434a-b56a-35153bf2c64d" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="138de556-8e96-43aa-8b56-043c56a8a232" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="41817148-1145-41f8-a4f1-30bb2ce7acb4" name="unit_stack_configuration" context="unit_stack_configuration" subcategories-loading="none" object-loading="main">
                        <category _I_D="9cd8a0f1-172a-416f-932a-1668d91146a9" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ffcf8b29-fd40-442f-a533-331895deb7d6" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bbc1d5cf-28b1-4220-82e6-7dfcfb863a58" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a5acd4a2-9ccf-4967-b89b-5da48249231e" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="a7b2ecab-9dd5-49ed-9684-0f18c525415e" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="6a01eaff-1c96-46f7-88ee-f8a2b87c1fc5" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="eb5ec8b0-4952-4cd6-b601-b0bea7de0529" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="e8f89f43-9e2c-4491-a43a-7ac7253b397b" name="used_identifier" context="used_identifier" subcategories-loading="none" object-loading="main">
                        <category _I_D="edf3954c-7bed-4c50-893c-b70b0d7ed74e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="faf889d4-a044-460d-8949-fb893d93f461" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="40f87a4d-2b93-4e17-8db8-c209c802f5e0" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b2f0cb96-447e-4cb2-9b76-b58331a8035b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="29ff5a39-a479-4c1f-a6f1-0e5decf4e1c1" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="2b56afc5-c4df-40bb-8e6f-e0ef32430180" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="032137a7-3c5d-49fc-9e75-6d706f24b290" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="78d2752a-e75b-4cb2-bb93-ce2670bc239c" name="daily_emission" transformed="2022-07-19 09:13:21" is-typed="N" comment="Daily total massEmissions.  Currently CO2 only from Record Type 331." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:35:34" gb-sql-text-modified="2022-07-19 09:29:21" sql="CREATE TABLE IF NOT EXISTS camdecmps.daily_emission(&amp;#x000a;    daily_emission_id CHARACTER VARYING(45) NOT NULL,&amp;#x000a;    rpt_period_id NUMERIC(38,0) NOT NULL,&amp;#x000a;    mon_loc_id CHARACTER VARYING(45) NOT NULL,&amp;#x000a;    parameter_cd CHARACTER VARYING(7) NOT NULL,&amp;#x000a;    begin_date DATE NOT NULL,&amp;#x000a;    total_daily_emission NUMERIC(10,1),&amp;#x000a;    adjusted_daily_emission NUMERIC(10,1),&amp;#x000a;    sorbent_mass_emission NUMERIC(10,1),&amp;#x000a;    userid CHARACTER VARYING(25),&amp;#x000a;    add_date TIMESTAMP WITHOUT TIME ZONE,&amp;#x000a;    update_date TIMESTAMP WITHOUT TIME ZONE,&amp;#x000a;    unadjusted_daily_emission NUMERIC(10,1),&amp;#x000a;    total_carbon_burned NUMERIC(13,1),&amp;#x000a;    calc_total_daily_emission NUMERIC(10,1),&amp;#x000a;    calc_total_op_time NUMERIC(4,2)&amp;#x000a;)&amp;#x000a;        WITH (&amp;#x000a;        OIDS=FALSE&amp;#x000a;        );&amp;#x000a;COMMENT ON TABLE camdecmps.daily_emission&amp;#x000a;     IS 'Daily total massEmissions.  Currently CO2 only from Record Type 331.';&amp;#x000a;COMMENT ON COLUMN camdecmps.daily_emission.daily_emission_id&amp;#x000a;     IS 'Unique identifier of a daily emission record. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.daily_emission.rpt_period_id&amp;#x000a;     IS 'Unique identifier of a reporting period record. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.daily_emission.mon_loc_id&amp;#x000a;     IS 'Unique identifier of a monitor location record. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.daily_emission.parameter_cd&amp;#x000a;     IS 'Code used to identify the parameter. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.daily_emission.begin_date&amp;#x000a;     IS 'Date corresponding to the daily emissions. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.daily_emission.total_daily_emission&amp;#x000a;     IS 'Total daily CO2 mass emissions. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.daily_emission.adjusted_daily_emission&amp;#x000a;     IS 'CO2 mass emissions adjusted for CO2 retained in fly ash. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.daily_emission.sorbent_mass_emission&amp;#x000a;     IS 'Total daily sorbent-related CO2 mass emissions. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.daily_emission.userid&amp;#x000a;     IS 'User account or source of data that added or updated record. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.daily_emission.add_date&amp;#x000a;     IS 'Date and time in which record was added. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.daily_emission.update_date&amp;#x000a;     IS 'Date and time in which record was last updated. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.daily_emission.unadjusted_daily_emission&amp;#x000a;     IS 'CO2 mass emissions. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.daily_emission.total_carbon_burned&amp;#x000a;     IS 'Total amount of carbon burned.';&amp;#x000a;COMMENT ON COLUMN camdecmps.daily_emission.calc_total_daily_emission&amp;#x000a;     IS 'Calculated total daily CO2 mass emissions. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.daily_emission.calc_total_op_time&amp;#x000a;     IS 'Calculated total operating time.';">
                        <category _I_D="874f40cc-9072-4e6c-b0c0-e661a3795793" name="Columns" order-num="0" child-type="column" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Columns">
                            <column _I_D="fb708dd4-4726-4094-afa1-0d0a740cfa6b" name="daily_emission_id" table-schema="CAMDECMPS" table-name="DAILY_EMISSION" dt-name="CHARACTER VARYING" dt-attr-1="45" transformed="2022-07-19 09:13:21" ordinal-position="1" is-nullable="N" comment="Unique identifier of a daily emission record. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Columns,column DAILY_EMISSION_ID" mdl-applying-result="applying-success"/>
                            <column _I_D="29cfe6bf-f41b-432c-b611-e2fbbfe8c340" name="rpt_period_id" table-schema="CAMDECMPS" table-name="DAILY_EMISSION" dt-name="NUMERIC" dt-attr-1="38" dt-attr-2="0" transformed="2022-07-19 09:13:21" ordinal-position="2" is-nullable="N" comment="Unique identifier of a reporting period record. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Columns,column RPT_PERIOD_ID" mdl-applying-result="applying-success"/>
                            <column _I_D="cb78e7e5-8e46-4b42-b155-7001af7bdfe2" name="mon_loc_id" table-schema="CAMDECMPS" table-name="DAILY_EMISSION" dt-name="CHARACTER VARYING" dt-attr-1="45" transformed="2022-07-19 09:13:21" ordinal-position="3" is-nullable="N" comment="Unique identifier of a monitor location record. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Columns,column MON_LOC_ID" mdl-applying-result="applying-success"/>
                            <column _I_D="e8cee5d6-330b-4271-b7cc-edbd8e465079" name="parameter_cd" table-schema="CAMDECMPS" table-name="DAILY_EMISSION" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-19 09:13:21" ordinal-position="4" is-nullable="N" comment="Code used to identify the parameter. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Columns,column PARAMETER_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="e2089d2b-87fa-4d79-9fb6-59e90ec7b180" name="begin_date" table-schema="CAMDECMPS" table-name="DAILY_EMISSION" dt-name="TIMESTAMP WITHOUT TIME ZONE" dt-attr-1="0" transformed="2022-07-19 09:13:21" ordinal-position="5" is-nullable="N" comment="Date corresponding to the daily emissions. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Columns,column BEGIN_DATE" mdl-applying-result="applying-success"/>
                            <column _I_D="9418b3d2-5b2f-4d0e-890e-5dfd81b09edc" name="total_daily_emission" table-schema="CAMDECMPS" table-name="DAILY_EMISSION" dt-name="NUMERIC" dt-attr-1="10" dt-attr-2="1" transformed="2022-07-19 09:13:21" ordinal-position="6" is-nullable="Y" comment="Total daily CO2 mass emissions. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Columns,column TOTAL_DAILY_EMISSION" mdl-applying-result="applying-success"/>
                            <column _I_D="1629abc2-98b3-44bc-bce6-fa78a375c4a4" name="adjusted_daily_emission" table-schema="CAMDECMPS" table-name="DAILY_EMISSION" dt-name="NUMERIC" dt-attr-1="10" dt-attr-2="1" transformed="2022-07-19 09:13:21" ordinal-position="7" is-nullable="Y" comment="CO2 mass emissions adjusted for CO2 retained in fly ash. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Columns,column ADJUSTED_DAILY_EMISSION" mdl-applying-result="applying-success"/>
                            <column _I_D="be89550c-ddbc-4665-8c58-1a3cba2c72d6" name="sorbent_mass_emission" table-schema="CAMDECMPS" table-name="DAILY_EMISSION" dt-name="NUMERIC" dt-attr-1="10" dt-attr-2="1" transformed="2022-07-19 09:13:21" ordinal-position="8" is-nullable="Y" comment="Total daily sorbent-related CO2 mass emissions. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Columns,column SORBENT_MASS_EMISSION" mdl-applying-result="applying-success"/>
                            <column _I_D="65c37aca-8a79-4c08-9c04-cb23786c7d97" name="userid" table-schema="CAMDECMPS" table-name="DAILY_EMISSION" dt-name="CHARACTER VARYING" dt-attr-1="8" transformed="2022-07-19 09:13:21" ordinal-position="9" is-nullable="Y" comment="User account or source of data that added or updated record. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Columns,column USERID" mdl-applying-result="applying-success"/>
                            <column _I_D="4ea09962-22a9-43da-bfeb-5cd5854fea8a" name="add_date" table-schema="CAMDECMPS" table-name="DAILY_EMISSION" dt-name="TIMESTAMP WITHOUT TIME ZONE" dt-attr-1="0" transformed="2022-07-19 09:13:21" ordinal-position="10" is-nullable="Y" comment="Date and time in which record was added. " default-definition="aws_oracle_ext.SYSDATE()" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Columns,column ADD_DATE" mdl-applying-result="applying-success"/>
                            <column _I_D="f60fc617-a00d-4ae6-a112-8e3291c2cf51" name="update_date" table-schema="CAMDECMPS" table-name="DAILY_EMISSION" dt-name="TIMESTAMP WITHOUT TIME ZONE" dt-attr-1="0" transformed="2022-07-19 09:13:21" ordinal-position="11" is-nullable="Y" comment="Date and time in which record was last updated. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Columns,column UPDATE_DATE" mdl-applying-result="applying-success"/>
                            <column _I_D="43078649-77be-4b7d-afb5-dde25c439d04" name="unadjusted_daily_emission" table-schema="CAMDECMPS" table-name="DAILY_EMISSION" dt-name="NUMERIC" dt-attr-1="10" dt-attr-2="1" transformed="2022-07-19 09:13:21" ordinal-position="12" is-nullable="Y" comment="CO2 mass emissions. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Columns,column UNADJUSTED_DAILY_EMISSION" mdl-applying-result="applying-success"/>
                            <column _I_D="9cccc1b1-21c0-4a3e-a7d9-31b32138eea7" name="total_carbon_burned" table-schema="CAMDECMPS" table-name="DAILY_EMISSION" dt-name="NUMERIC" dt-attr-1="13" dt-attr-2="1" transformed="2022-07-19 09:13:21" ordinal-position="13" is-nullable="Y" comment="Total amount of carbon burned." artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Columns,column TOTAL_CARBON_BURNED" mdl-applying-result="applying-success"/>
                            <column _I_D="5b918220-14c9-4c5e-93bf-9d582ebdaf9d" name="calc_total_daily_emission" table-schema="CAMDECMPS" table-name="DAILY_EMISSION" dt-name="NUMERIC" dt-attr-1="10" dt-attr-2="1" transformed="2022-07-19 09:13:21" ordinal-position="14" is-nullable="Y" comment="Calculated total daily CO2 mass emissions. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Columns,column CALC_TOTAL_DAILY_EMISSION" mdl-applying-result="applying-success"/>
                            <column _I_D="15057fa6-fe60-4c16-82f9-3ed4a8c1fa69" name="calc_total_op_time" table-schema="CAMDECMPS" table-name="DAILY_EMISSION" dt-name="NUMERIC" dt-attr-1="4" dt-attr-2="2" transformed="2022-07-19 09:13:21" ordinal-position="15" is-nullable="Y" comment="Calculated total operating time." artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Columns,column CALC_TOTAL_OP_TIME" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="fc8bd353-a2b9-47b8-b0b7-d50bd71c38bf" name="Partition columns" order-num="1" child-type="column" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Partition columns"/>
                        <category _I_D="aea9b9a2-def1-4169-accb-67a34af704c9" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Subpartition columns"/>
                        <category _I_D="abd80821-2b96-4507-8da3-6077d0110e23" name="Constraints" order-num="4" child-type="constraint" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Constraints">
                            <constraint _I_D="c1c96fb3-72d8-4050-b48f-beeca09854db" name="fk_monitor_locat_daily_emissio" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" delete-rule="NO ACTION" generated="USER" transformed="2022-07-19 09:13:21" referenced-table-schema="camdecmps" referenced-table-name="monitor_location" referenced-constraint-schema="camdecmps" referenced-constraint-name="camdecmps" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Constraints,constraint FK_MONITOR_LOCAT_DAILY_EMISSIO" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:35:34">
                                <category _I_D="7098a23b-6a5b-4376-a983-de1a53556a01" name="Columns" order-num="0" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Constraints,constraint FK_MONITOR_LOCAT_DAILY_EMISSIO,category Columns">
                                    <column _I_D="63bd9cb9-74e8-4fb4-817d-cc2d561662c0" name="mon_loc_id" transformed="2022-07-19 09:13:21" ordinal-position="1" position-in-referenced-unique-constraint="mon_loc_id" column-in-referenced-unique-constraint="mon_loc_id" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Constraints,constraint FK_MONITOR_LOCAT_DAILY_EMISSIO,category Columns,column MON_LOC_ID" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="ef25916f-927d-4398-8754-c41a763d157b" name="fk_parameter_cod_daily_emissio" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" delete-rule="NO ACTION" generated="USER" transformed="2022-07-19 09:13:21" referenced-table-schema="camdecmpsmd" referenced-table-name="parameter_code" referenced-constraint-schema="camdecmps" referenced-constraint-name="camdecmps" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Constraints,constraint FK_PARAMETER_COD_DAILY_EMISSIO" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:35:34">
                                <category _I_D="4854f7b0-4498-4f53-9e42-9f63789028da" name="Columns" order-num="0" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Constraints,constraint FK_PARAMETER_COD_DAILY_EMISSIO,category Columns">
                                    <column _I_D="c434a438-4aec-4fdc-b0ba-48f45f7f4c0c" name="parameter_cd" transformed="2022-07-19 09:13:21" ordinal-position="1" position-in-referenced-unique-constraint="parameter_cd" column-in-referenced-unique-constraint="parameter_cd" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Constraints,constraint FK_PARAMETER_COD_DAILY_EMISSIO,category Columns,column PARAMETER_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="853a4b2a-a1a4-4b20-8e0d-f693b26d8f08" name="fk_reporting_per_daily_emissio" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" delete-rule="NO ACTION" generated="USER" transformed="2022-07-19 09:13:21" referenced-table-schema="camdecmpsmd" referenced-table-name="reporting_period" referenced-constraint-schema="camdecmps" referenced-constraint-name="camdecmps" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Constraints,constraint FK_REPORTING_PER_DAILY_EMISSIO" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:35:34">
                                <category _I_D="cb569938-6a14-4f29-96c9-20b62c2672b6" name="Columns" order-num="0" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Constraints,constraint FK_REPORTING_PER_DAILY_EMISSIO,category Columns">
                                    <column _I_D="3611e298-f2f2-4877-a202-d2d260b2ee73" name="rpt_period_id" transformed="2022-07-19 09:13:21" ordinal-position="1" position-in-referenced-unique-constraint="rpt_period_id" column-in-referenced-unique-constraint="rpt_period_id" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Constraints,constraint FK_REPORTING_PER_DAILY_EMISSIO,category Columns,column RPT_PERIOD_ID" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="099d5a17-b4f7-42f5-9083-07520a3b115a" name="pk_daily_emission" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Constraints,constraint PK_DAILY_EMISSION" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:35:34">
                                <category _I_D="634c1e05-2c1f-4a3b-8321-08f23ff50fa5" name="Columns" order-num="0" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Constraints,constraint PK_DAILY_EMISSION,category Columns">
                                    <column _I_D="ec12f538-3580-48c5-a182-0ad9f5b7b07a" name="daily_emission_id" transformed="2022-07-19 09:13:21" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Constraints,constraint PK_DAILY_EMISSION,category Columns,column DAILY_EMISSION_ID" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="4bc63d60-b4d0-40dc-acfb-05d244ec4df0" name="Indexes" order-num="5" child-type="index" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Indexes">
                            <index _I_D="508088ab-624f-4684-af68-863e80a871f8" name="daily_emission_idx001" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Indexes,index DAILY_EMISSION_IDX001" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:35:34">
                                <category _I_D="200c1d5a-9876-498f-b13d-23be8c586919" name="Columns" order-num="0" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Indexes,index DAILY_EMISSION_IDX001,category Columns">
                                    <column _I_D="10579b24-b349-4d62-ac74-c54e132b6c9c" name="parameter_cd" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Indexes,index DAILY_EMISSION_IDX001,category Columns,column PARAMETER_CD" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                            <index _I_D="597505f2-f219-4c7c-a563-e684bdf5b181" name="daily_emission_idx003" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Indexes,index DAILY_EMISSION_IDX003" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:35:34">
                                <category _I_D="16364993-a12a-496c-9df1-8d557ff3893b" name="Columns" order-num="0" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Indexes,index DAILY_EMISSION_IDX003,category Columns">
                                    <column _I_D="01ebb951-c5a9-4965-86f6-f02b17c38947" name="rpt_period_id" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Indexes,index DAILY_EMISSION_IDX003,category Columns,column RPT_PERIOD_ID" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                    <column _I_D="10fb0c39-3e21-4bfe-8564-4cfadb803836" name="mon_loc_id" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Indexes,index DAILY_EMISSION_IDX003,category Columns,column MON_LOC_ID" mdl-applying-result="applying-success" order-column="2" descasc="ASC"/>
                                </category>
                            </index>
                            <index _I_D="c85e0b36-ec41-47ba-bdc7-27528580472c" name="idx_daily_emission_mon_loc_id" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Indexes,index IDX_DAILY_EMISSION_MON_LOC_ID" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:35:34">
                                <category _I_D="9de4ad2b-0ad1-4aca-b717-58aa31a08793" name="Columns" order-num="0" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Indexes,index IDX_DAILY_EMISSION_MON_LOC_ID,category Columns">
                                    <column _I_D="72645915-b9b0-40e6-ad0e-bd033aa70df6" name="mon_loc_id" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Indexes,index IDX_DAILY_EMISSION_MON_LOC_ID,category Columns,column MON_LOC_ID" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                            <index _I_D="18ecc428-9b10-4591-b8bd-33f127756d8a" name="idx_de_add_date" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Indexes,index IDX_DE_ADD_DATE" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:35:34" is-functional="Y" gb-sql-text-modified="2022-07-19 09:34:59" sql="CREATE INDEX idx_de_add_date&amp;#x000a;ON camdecmps.daily_emission&amp;#x000a;USING BTREE (add_date ASC);">
                                <category _I_D="09ee628c-1431-4371-af23-127a835adbfa" name="Columns" order-num="0" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Indexes,index IDX_DE_ADD_DATE,category Columns">
                                    <column _I_D="62f3ae06-3af1-4695-865c-f9170d0652a2" name="aws_oracle_ext.TRUNC(add_date)" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Indexes,index IDX_DE_ADD_DATE,category Columns,column SYS_NC00016$" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                        </category>
                        <category _I_D="c7180947-a05d-4acf-9070-f47652ee8f9a" name="Triggers" order-num="6" child-type="trigger" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Triggers"/>
                        <category _I_D="e88382f6-d3d4-4734-a773-62eddbe119c4" name="Partitions" order-num="7" child-type="partition" transformed="2022-07-19 09:13:21" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table DAILY_EMISSION,category Partitions"/>
                    </table>
                    <table _I_D="0fe7c773-78bf-43a6-bcc0-8ec8f8663bb0" name="hrly_op_data" transformed="2022-07-19 09:45:45" is-typed="N" comment="A collection of data that contains one record for each hour in which a monitor location may or may not have operated. RT 300." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:47:53" gb-sql-text-modified="2022-07-19 09:46:57" sql="CREATE TABLE IF NOT EXISTS camdecmps.hrly_op_data(&amp;#x000a;    hour_id CHARACTER VARYING(45) NOT NULL,&amp;#x000a;    rpt_period_id NUMERIC(38,0) NOT NULL,&amp;#x000a;    mon_loc_id CHARACTER VARYING(45) NOT NULL,&amp;#x000a;    begin_date DATE NOT NULL,&amp;#x000a;    begin_hour NUMERIC(2,0) NOT NULL,&amp;#x000a;    op_time NUMERIC(3,2),&amp;#x000a;    hr_load NUMERIC(6,0),&amp;#x000a;    load_range NUMERIC(38,0),&amp;#x000a;    common_stack_load_range NUMERIC(38,0),&amp;#x000a;    fc_factor NUMERIC(8,1),&amp;#x000a;    fd_factor NUMERIC(8,1),&amp;#x000a;    fw_factor NUMERIC(8,1),&amp;#x000a;    fuel_cd CHARACTER VARYING(7),&amp;#x000a;    multi_fuel_flg CHARACTER VARYING(1),&amp;#x000a;    userid CHARACTER VARYING(25),&amp;#x000a;    add_date TIMESTAMP WITHOUT TIME ZONE,&amp;#x000a;    update_date TIMESTAMP WITHOUT TIME ZONE,&amp;#x000a;    load_uom_cd CHARACTER VARYING(7),&amp;#x000a;    operating_condition_cd CHARACTER VARYING(7),&amp;#x000a;    fuel_cd_list CHARACTER VARYING(100),&amp;#x000a;    mhhi_indicator NUMERIC(38,0),&amp;#x000a;    mats_load NUMERIC(6,0),&amp;#x000a;    mats_startup_shutdown_flg CHARACTER VARYING(1)&amp;#x000a;)&amp;#x000a;        WITH (&amp;#x000a;        OIDS=FALSE&amp;#x000a;        );&amp;#x000a;COMMENT ON TABLE camdecmps.hrly_op_data&amp;#x000a;     IS 'A collection of data that contains one record for each hour in which a monitor location may or may not have operated. RT 300.';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.hour_id&amp;#x000a;     IS 'Unique identifier of an hourly operating data record. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.rpt_period_id&amp;#x000a;     IS 'Unique identifier of a reporting period record. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.mon_loc_id&amp;#x000a;     IS 'Unique identifier of a monitoring location record. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.begin_date&amp;#x000a;     IS 'Date of the hourly operating data. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.begin_hour&amp;#x000a;     IS 'Hour of the hourly operating data. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.op_time&amp;#x000a;     IS 'The fraction of the clock hour during which the unit (or any unit venting through the stack) combusted any fuel. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.hr_load&amp;#x000a;     IS 'Gross unit load or steam load value during unit operation. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.load_range&amp;#x000a;     IS 'Operating load range or load bin number (1 to 10). ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.common_stack_load_range&amp;#x000a;     IS 'Load range for stack flow at a common stack (between 1 and 20).  Optional alternative to standard load range. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.fc_factor&amp;#x000a;     IS 'Carbon based F-factor corresponding to fuel(s) burned during the hour. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.fd_factor&amp;#x000a;     IS 'Dry basis F-factor corresponding to fuel(s) burned during the hour. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.fw_factor&amp;#x000a;     IS 'Wet basis F-factor corresponding to fuel(s) burned during the hour. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.fuel_cd&amp;#x000a;     IS 'Code used to identify the type of fuel. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.multi_fuel_flg&amp;#x000a;     IS 'Flag indicating that more than one fuel was burned during the hour. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.userid&amp;#x000a;     IS 'User account or source of data that added or updated record. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.add_date&amp;#x000a;     IS 'Date and time in which record was added. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.update_date&amp;#x000a;     IS 'Date and time in which record was last updated. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.load_uom_cd&amp;#x000a;     IS 'Code used to identify the load units of measure. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.operating_condition_cd&amp;#x000a;     IS 'Code used to identify the operating condition. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.fuel_cd_list&amp;#x000a;     IS 'List of fuel codes for fuel combusted during the operating time (LME only).  ';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.mhhi_indicator&amp;#x000a;     IS 'Indicates whether maximum hourly heat input applies.';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.mats_load&amp;#x000a;     IS 'The MATS speciic megawatt load.';&amp;#x000a;COMMENT ON COLUMN camdecmps.hrly_op_data.mats_startup_shutdown_flg&amp;#x000a;     IS 'Flag indicating whether the current hour is either a MATS startup or shutdown hour.';">
                        <category _I_D="7595eaf7-a44c-4de3-b7cf-0be29a5c560b" name="Columns" order-num="0" child-type="column" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns">
                            <column _I_D="c9d43e58-fb91-4944-a793-74445c96290f" name="hour_id" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="CHARACTER VARYING" dt-attr-1="45" transformed="2022-07-19 09:45:45" ordinal-position="1" is-nullable="N" comment="Unique identifier of an hourly operating data record. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column HOUR_ID" mdl-applying-result="applying-success"/>
                            <column _I_D="92140225-386b-4518-9391-635a5fc6629a" name="rpt_period_id" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="NUMERIC" dt-attr-1="38" dt-attr-2="0" transformed="2022-07-19 09:45:45" ordinal-position="2" is-nullable="N" comment="Unique identifier of a reporting period record. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column RPT_PERIOD_ID" mdl-applying-result="applying-success"/>
                            <column _I_D="24f9446b-66ed-45c9-92e3-4868efbb0cdf" name="mon_loc_id" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="CHARACTER VARYING" dt-attr-1="45" transformed="2022-07-19 09:45:45" ordinal-position="3" is-nullable="N" comment="Unique identifier of a monitoring location record. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column MON_LOC_ID" mdl-applying-result="applying-success"/>
                            <column _I_D="7aee09ff-9a44-4ac8-970a-177c50b4f7a3" name="begin_date" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="TIMESTAMP WITHOUT TIME ZONE" dt-attr-1="0" transformed="2022-07-19 09:45:45" ordinal-position="4" is-nullable="N" comment="Date of the hourly operating data. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column BEGIN_DATE" mdl-applying-result="applying-success"/>
                            <column _I_D="ca4abbde-1cf6-4e21-a1f4-c3ce3f9dd1de" name="begin_hour" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="NUMERIC" dt-attr-1="2" dt-attr-2="0" transformed="2022-07-19 09:45:45" ordinal-position="5" is-nullable="N" comment="Hour of the hourly operating data. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column BEGIN_HOUR" mdl-applying-result="applying-success"/>
                            <column _I_D="51b75dec-f2eb-413f-b223-c4ccc1781533" name="op_time" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="NUMERIC" dt-attr-1="3" dt-attr-2="2" transformed="2022-07-19 09:45:45" ordinal-position="6" is-nullable="Y" comment="The fraction of the clock hour during which the unit (or any unit venting through the stack) combusted any fuel. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column OP_TIME" mdl-applying-result="applying-success"/>
                            <column _I_D="a0520629-519c-4e3c-97d0-f1d524758efe" name="hr_load" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="NUMERIC" dt-attr-1="6" dt-attr-2="0" transformed="2022-07-19 09:45:45" ordinal-position="7" is-nullable="Y" comment="Gross unit load or steam load value during unit operation. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column HR_LOAD" mdl-applying-result="applying-success"/>
                            <column _I_D="8293faef-b34d-4eca-9132-f34ebcb6ff8b" name="load_range" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="NUMERIC" dt-attr-1="38" dt-attr-2="0" transformed="2022-07-19 09:45:45" ordinal-position="8" is-nullable="Y" comment="Operating load range or load bin number (1 to 10). " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column LOAD_RANGE" mdl-applying-result="applying-success"/>
                            <column _I_D="6a0adc83-3996-46de-9447-c634f49c8bc5" name="common_stack_load_range" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="NUMERIC" dt-attr-1="38" dt-attr-2="0" transformed="2022-07-19 09:45:45" ordinal-position="9" is-nullable="Y" comment="Load range for stack flow at a common stack (between 1 and 20).  Optional alternative to standard load range. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column COMMON_STACK_LOAD_RANGE" mdl-applying-result="applying-success"/>
                            <column _I_D="961e22d7-e6eb-43c7-81e7-56ffbdb2c9a1" name="fc_factor" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="NUMERIC" dt-attr-1="8" dt-attr-2="1" transformed="2022-07-19 09:45:45" ordinal-position="10" is-nullable="Y" comment="Carbon based F-factor corresponding to fuel(s) burned during the hour. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column FC_FACTOR" mdl-applying-result="applying-success"/>
                            <column _I_D="b36b07be-1814-4371-bfc6-67a92987a484" name="fd_factor" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="NUMERIC" dt-attr-1="8" dt-attr-2="1" transformed="2022-07-19 09:45:45" ordinal-position="11" is-nullable="Y" comment="Dry basis F-factor corresponding to fuel(s) burned during the hour. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column FD_FACTOR" mdl-applying-result="applying-success"/>
                            <column _I_D="64552fa4-e7f3-42c4-8479-a9594cc5edd8" name="fw_factor" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="NUMERIC" dt-attr-1="8" dt-attr-2="1" transformed="2022-07-19 09:45:45" ordinal-position="12" is-nullable="Y" comment="Wet basis F-factor corresponding to fuel(s) burned during the hour. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column FW_FACTOR" mdl-applying-result="applying-success"/>
                            <column _I_D="24de44d5-0d57-408b-8e47-1b83d7340bbc" name="fuel_cd" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-19 09:45:45" ordinal-position="13" is-nullable="Y" comment="Code used to identify the type of fuel. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column FUEL_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="c2c6877a-7a9f-4085-b51f-18272623a7f0" name="multi_fuel_flg" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="CHARACTER VARYING" dt-attr-1="1" transformed="2022-07-19 09:45:45" ordinal-position="14" is-nullable="Y" comment="Flag indicating that more than one fuel was burned during the hour. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column MULTI_FUEL_FLG" mdl-applying-result="applying-success"/>
                            <column _I_D="ce65d62e-2764-44d0-b81f-3f079c0caec0" name="userid" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="CHARACTER VARYING" dt-attr-1="8" transformed="2022-07-19 09:45:45" ordinal-position="15" is-nullable="Y" comment="User account or source of data that added or updated record. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column USERID" mdl-applying-result="applying-success"/>
                            <column _I_D="a3794bf1-160a-4a29-856f-14fcd9d6777b" name="add_date" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="TIMESTAMP WITHOUT TIME ZONE" dt-attr-1="0" transformed="2022-07-19 09:45:45" ordinal-position="16" is-nullable="Y" comment="Date and time in which record was added. " default-definition="aws_oracle_ext.SYSDATE()" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column ADD_DATE" mdl-applying-result="applying-success"/>
                            <column _I_D="29429b57-0c0a-451a-bf87-3636b6d1de42" name="update_date" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="TIMESTAMP WITHOUT TIME ZONE" dt-attr-1="0" transformed="2022-07-19 09:45:45" ordinal-position="17" is-nullable="Y" comment="Date and time in which record was last updated. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column UPDATE_DATE" mdl-applying-result="applying-success"/>
                            <column _I_D="a3b0b9cf-5c20-47e0-9bab-b532701a2723" name="load_uom_cd" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-19 09:45:45" ordinal-position="18" is-nullable="Y" comment="Code used to identify the load units of measure. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column LOAD_UOM_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="709d0989-00e0-424e-bfcd-64179ff182ff" name="operating_condition_cd" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-19 09:45:45" ordinal-position="19" is-nullable="Y" comment="Code used to identify the operating condition. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column OPERATING_CONDITION_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="c56be4ae-e91a-4db3-ae92-1da6ca10b48e" name="fuel_cd_list" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="CHARACTER VARYING" dt-attr-1="100" transformed="2022-07-19 09:45:45" ordinal-position="20" is-nullable="Y" comment="List of fuel codes for fuel combusted during the operating time (LME only).  " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column FUEL_CD_LIST" mdl-applying-result="applying-success"/>
                            <column _I_D="2ab01a04-75a7-4855-8bb0-f9a8bdb9cc27" name="mhhi_indicator" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="NUMERIC" dt-attr-1="38" dt-attr-2="0" transformed="2022-07-19 09:45:45" ordinal-position="21" is-nullable="Y" comment="Indicates whether maximum hourly heat input applies." artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column MHHI_INDICATOR" mdl-applying-result="applying-success"/>
                            <column _I_D="0dc9c111-1c13-4982-8a66-6f699af4bedc" name="mats_load" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="NUMERIC" dt-attr-1="6" dt-attr-2="0" transformed="2022-07-19 09:45:45" ordinal-position="22" is-nullable="Y" comment="The MATS speciic megawatt load." artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column MATS_LOAD" mdl-applying-result="applying-success"/>
                            <column _I_D="2e47ddfb-ebac-4a44-b5ed-58dce5094b3e" name="mats_startup_shutdown_flg" table-schema="CAMDECMPS" table-name="HRLY_OP_DATA" dt-name="CHARACTER VARYING" dt-attr-1="1" transformed="2022-07-19 09:45:45" ordinal-position="23" is-nullable="Y" comment="Flag indicating whether the current hour is either a MATS startup or shutdown hour." artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Columns,column MATS_STARTUP_SHUTDOWN_FLG" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="5b740a83-249a-4c75-b450-065a981971ec" name="Partition columns" order-num="1" child-type="column" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Partition columns"/>
                        <category _I_D="3c023e6c-bc7c-440c-9e55-3b1be05b6859" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Subpartition columns"/>
                        <category _I_D="2b5a386d-a0e2-4568-951e-805e0f41c39e" name="Constraints" order-num="4" child-type="constraint" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints">
                            <constraint _I_D="3a6687b0-2bc5-4904-b29f-288c671e0ff9" name="fk_fuel_code_hrly_op_data" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" delete-rule="NO ACTION" generated="USER" transformed="2022-07-19 09:45:45" referenced-table-schema="camdecmpsmd" referenced-table-name="fuel_code" referenced-constraint-schema="camdecmps" referenced-constraint-name="camdecmps" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint FK_FUEL_CODE_HRLY_OP_DATA" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:47:54">
                                <category _I_D="63d8960f-3920-4044-8243-625fd732b6d0" name="Columns" order-num="0" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint FK_FUEL_CODE_HRLY_OP_DATA,category Columns">
                                    <column _I_D="772d3675-772e-4aa6-952d-d9431bf632b6" name="fuel_cd" transformed="2022-07-19 09:45:45" ordinal-position="1" position-in-referenced-unique-constraint="fuel_cd" column-in-referenced-unique-constraint="fuel_cd" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint FK_FUEL_CODE_HRLY_OP_DATA,category Columns,column FUEL_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="71e84dab-e3c3-4e31-a538-8c75882c2ba6" name="fk_monitor_locat_hrly_op_data" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" delete-rule="NO ACTION" generated="USER" transformed="2022-07-19 09:45:45" referenced-table-schema="camdecmps" referenced-table-name="monitor_location" referenced-constraint-schema="camdecmps" referenced-constraint-name="camdecmps" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint FK_MONITOR_LOCAT_HRLY_OP_DATA" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:47:54">
                                <category _I_D="1a34530d-93a6-40ae-af1a-37452e5b4126" name="Columns" order-num="0" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint FK_MONITOR_LOCAT_HRLY_OP_DATA,category Columns">
                                    <column _I_D="cc4fb9e8-c94d-4e84-9ef6-754ebff0ce5c" name="mon_loc_id" transformed="2022-07-19 09:45:45" ordinal-position="1" position-in-referenced-unique-constraint="mon_loc_id" column-in-referenced-unique-constraint="mon_loc_id" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint FK_MONITOR_LOCAT_HRLY_OP_DATA,category Columns,column MON_LOC_ID" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="6651b5e0-55ef-476e-be43-050d2f6a440d" name="fk_operating_con_hrly_op_data" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" delete-rule="NO ACTION" generated="USER" transformed="2022-07-19 09:45:45" referenced-table-schema="camdecmpsmd" referenced-table-name="operating_condition_code" referenced-constraint-schema="camdecmps" referenced-constraint-name="camdecmps" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint FK_OPERATING_CON_HRLY_OP_DATA" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:47:54">
                                <category _I_D="ebaafc87-798d-4363-8807-beeaea0e9c70" name="Columns" order-num="0" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint FK_OPERATING_CON_HRLY_OP_DATA,category Columns">
                                    <column _I_D="4a5e095e-0868-48a9-bd2b-1f3d26428cf9" name="operating_condition_cd" transformed="2022-07-19 09:45:45" ordinal-position="1" position-in-referenced-unique-constraint="operating_condition_cd" column-in-referenced-unique-constraint="operating_condition_cd" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint FK_OPERATING_CON_HRLY_OP_DATA,category Columns,column OPERATING_CONDITION_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="36eedc54-5bfb-4309-91e8-2c2ab998ff1f" name="fk_reporting_per_hrly_op_data" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" delete-rule="NO ACTION" generated="USER" transformed="2022-07-19 09:45:45" referenced-table-schema="camdecmpsmd" referenced-table-name="reporting_period" referenced-constraint-schema="camdecmps" referenced-constraint-name="camdecmps" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint FK_REPORTING_PER_HRLY_OP_DATA" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:47:54">
                                <category _I_D="75ab2fc3-61c9-46c2-bb25-67d93981ff42" name="Columns" order-num="0" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint FK_REPORTING_PER_HRLY_OP_DATA,category Columns">
                                    <column _I_D="085a927d-25ea-40ec-b8a9-66a4f7885beb" name="rpt_period_id" transformed="2022-07-19 09:45:45" ordinal-position="1" position-in-referenced-unique-constraint="rpt_period_id" column-in-referenced-unique-constraint="rpt_period_id" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint FK_REPORTING_PER_HRLY_OP_DATA,category Columns,column RPT_PERIOD_ID" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="eb5b8f70-fc1a-45d4-8fb2-de77c9e52a48" name="fk_units_of_meas_hrly_op_data" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" delete-rule="NO ACTION" generated="USER" transformed="2022-07-19 09:45:45" referenced-table-schema="camdecmpsmd" referenced-table-name="units_of_measure_code" referenced-constraint-schema="camdecmps" referenced-constraint-name="camdecmps" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint FK_UNITS_OF_MEAS_HRLY_OP_DATA" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:47:54">
                                <category _I_D="a0a4aa2d-cf4d-4a8a-b2e5-d941a9f6d099" name="Columns" order-num="0" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint FK_UNITS_OF_MEAS_HRLY_OP_DATA,category Columns">
                                    <column _I_D="86e512f2-6851-4b69-8f47-4ba7002f3651" name="load_uom_cd" transformed="2022-07-19 09:45:45" ordinal-position="1" position-in-referenced-unique-constraint="uom_cd" column-in-referenced-unique-constraint="uom_cd" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint FK_UNITS_OF_MEAS_HRLY_OP_DATA,category Columns,column LOAD_UOM_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="9fd315a8-d5a8-44b2-b577-522e8067efe8" name="pk_hrly_op_data" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint PK_HRLY_OP_DATA" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:47:54">
                                <category _I_D="e81172a2-2288-431a-bf02-0dd7aa9dfb5a" name="Columns" order-num="0" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint PK_HRLY_OP_DATA,category Columns">
                                    <column _I_D="87c04b8c-aa05-4f4c-b1c9-121bb521ba58" name="hour_id" transformed="2022-07-19 09:45:45" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint PK_HRLY_OP_DATA,category Columns,column HOUR_ID" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="8efd28b9-43c2-489c-9bfc-bcd7f4b14d7d" name="sys_c0029118" constraint-type="CHECK" constraint-type-desc="CHECK" generated="GENERATED" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint SYS_C0029118" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:47:54">
                                <complex-attribute name="check-clause"><![CDATA[begin_date IS NOT NULL]]></complex-attribute>
                                <category _I_D="ee2dcdc9-f9c3-45e4-92c2-00600493e8f3" name="Columns" order-num="0" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint SYS_C0029118,category Columns">
                                    <column _I_D="f0a36122-1548-4cd3-b840-e8279ab3fd03" name="begin_date" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint SYS_C0029118,category Columns,column BEGIN_DATE" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="46961a11-b34e-47a8-8bc8-62b8d374042e" name="sys_c0029120" constraint-type="CHECK" constraint-type-desc="CHECK" generated="GENERATED" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint SYS_C0029120" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:47:54">
                                <complex-attribute name="check-clause"><![CDATA[begin_hour IS NOT NULL]]></complex-attribute>
                                <category _I_D="4e39bb69-2e31-4b24-ab8e-7ff53521d234" name="Columns" order-num="0" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint SYS_C0029120,category Columns">
                                    <column _I_D="01086af9-b0c5-4ff3-8311-92af09f405f5" name="begin_hour" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint SYS_C0029120,category Columns,column BEGIN_HOUR" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="7489465d-d67f-44eb-8cf2-f7e420dfa4a7" name="sys_c0029341" constraint-type="CHECK" constraint-type-desc="CHECK" generated="GENERATED" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint SYS_C0029341" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:47:54">
                                <complex-attribute name="check-clause"><![CDATA[hour_id IS NOT NULL]]></complex-attribute>
                                <category _I_D="42f27140-0c23-4e55-be53-36883b5942f2" name="Columns" order-num="0" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint SYS_C0029341,category Columns">
                                    <column _I_D="5d09e464-bca9-4b05-bc2e-591f912a9925" name="hour_id" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint SYS_C0029341,category Columns,column HOUR_ID" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="783724b0-b3c1-4792-bfbe-46bb28389690" name="sys_c0029343" constraint-type="CHECK" constraint-type-desc="CHECK" generated="GENERATED" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint SYS_C0029343" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:47:54">
                                <complex-attribute name="check-clause"><![CDATA[rpt_period_id IS NOT NULL]]></complex-attribute>
                                <category _I_D="e0b49244-3dd2-4ff4-992b-4d6c91d529ed" name="Columns" order-num="0" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint SYS_C0029343,category Columns">
                                    <column _I_D="fccbcc7a-6b81-4137-be35-736f3d89441d" name="rpt_period_id" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint SYS_C0029343,category Columns,column RPT_PERIOD_ID" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="1ed260d3-064b-4150-83b9-badd920f6429" name="sys_c0029344" constraint-type="CHECK" constraint-type-desc="CHECK" generated="GENERATED" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint SYS_C0029344" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:47:54">
                                <complex-attribute name="check-clause"><![CDATA[mon_loc_id IS NOT NULL]]></complex-attribute>
                                <category _I_D="42c99155-e51e-448a-bf97-5b361edb3848" name="Columns" order-num="0" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint SYS_C0029344,category Columns">
                                    <column _I_D="fe4102ed-7088-4c79-ae02-ab0fedd1710e" name="mon_loc_id" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Constraints,constraint SYS_C0029344,category Columns,column MON_LOC_ID" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="95198c02-62ee-412c-a708-23832c423296" name="Indexes" order-num="5" child-type="index" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes">
                            <index _I_D="9bea7af7-a11d-4016-be13-95a6741c7f0d" name="idx_hod_add_date" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HOD_ADD_DATE" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:47:53">
                                <category _I_D="64121b32-57ed-4e9c-b56d-dd99094ea636" name="Columns" order-num="0" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HOD_ADD_DATE,category Columns">
                                    <column _I_D="f11413a8-bb50-4ee7-9801-e49245cb02c3" name="add_date" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HOD_ADD_DATE,category Columns,column ADD_DATE" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                            <index _I_D="023c733b-7aa6-4cfb-a67f-5bc7059d33c1" name="idx_hrly_op_data_1" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HRLY_OP_DATA_1" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:47:53">
                                <category _I_D="6ec48b78-6183-4c2a-bb94-3d7a267ee15b" name="Columns" order-num="0" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HRLY_OP_DATA_1,category Columns">
                                    <column _I_D="e25fcbaa-ab03-41cc-a3d5-a668b22be540" name="mon_loc_id" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HRLY_OP_DATA_1,category Columns,column MON_LOC_ID" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                            <index _I_D="78d37cfd-5454-4aae-a0d9-4ffdb581af95" name="idx_hrly_op_data_2" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HRLY_OP_DATA_2" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:47:53">
                                <category _I_D="aaf96124-c15e-4c9a-8efd-1a27bedfb902" name="Columns" order-num="0" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HRLY_OP_DATA_2,category Columns">
                                    <column _I_D="9b63bb8f-f93e-4897-b0d4-a54e5f5d7cf6" name="rpt_period_id" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HRLY_OP_DATA_2,category Columns,column RPT_PERIOD_ID" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                            <index _I_D="42da1308-d470-4991-a5fd-0130f589623b" name="idx_hrly_op_data_emr" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HRLY_OP_DATA_EMR" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:47:53">
                                <category _I_D="72db417a-0968-4372-a0bb-4f14dc53cc6c" name="Columns" order-num="0" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HRLY_OP_DATA_EMR,category Columns">
                                    <column _I_D="fdd3863b-583a-4efd-b8b1-879b72813aa4" name="rpt_period_id" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HRLY_OP_DATA_EMR,category Columns,column RPT_PERIOD_ID" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                    <column _I_D="408035f1-aae6-438a-9b5d-b1241ba3df1b" name="mon_loc_id" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HRLY_OP_DATA_EMR,category Columns,column MON_LOC_ID" mdl-applying-result="applying-success" order-column="2" descasc="ASC"/>
                                </category>
                            </index>
                            <index _I_D="12daa55e-5182-4f55-b9c7-36d163f9480e" name="idx_hrly_op_data_fuel_cd" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HRLY_OP_DATA_FUEL_CD" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:47:53">
                                <category _I_D="df0d21bd-f0c4-4576-ad2b-a841003ffc74" name="Columns" order-num="0" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HRLY_OP_DATA_FUEL_CD,category Columns">
                                    <column _I_D="e1e5c904-bac6-483f-b8a6-8541c719a706" name="fuel_cd" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HRLY_OP_DATA_FUEL_CD,category Columns,column FUEL_CD" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                            <index _I_D="20ee7798-87bd-4d69-ae2f-fe8b57fcc3c1" name="idx_hrly_op_data_operating_" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HRLY_OP_DATA_OPERATING_" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-07-19 09:47:53">
                                <category _I_D="6dfe4cc0-e2ed-4b3f-b7b1-3a6b627b1c4b" name="Columns" order-num="0" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HRLY_OP_DATA_OPERATING_,category Columns">
                                    <column _I_D="1c77be43-b2b8-4fbc-abc5-70c024ad596b" name="operating_condition_cd" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Indexes,index IDX_HRLY_OP_DATA_OPERATING_,category Columns,column OPERATING_CONDITION_CD" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                        </category>
                        <category _I_D="fea4fd7f-81d9-4265-8002-94ab3ebd7c95" name="Triggers" order-num="6" child-type="trigger" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Triggers"/>
                        <category _I_D="d18eea42-7338-457a-af17-31246f8da749" name="Partitions" order-num="7" child-type="partition" transformed="2022-07-19 09:45:45" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table HRLY_OP_DATA,category Partitions"/>
                    </table>
                    <table _I_D="75465d12-4d18-4eae-a7cf-ff6541579ed9" name="nsps4t_summary" transformed="2022-07-19 12:42:51" is-typed="N" comment="NSPS4T (quarterly) Summary Information. " partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY" mdl-applying-result="applying-success" mdl-applied="2022-07-19 12:50:30" gb-sql-text-modified="2022-07-19 12:49:42" sql="CREATE TABLE IF NOT EXISTS camdecmps.nsps4t_summary(&amp;#x000a;    nsps4t_sum_id CHARACTER VARYING(45) NOT NULL,&amp;#x000a;    emission_standard_cd CHARACTER VARYING(7),&amp;#x000a;    modus_value NUMERIC(5,0),&amp;#x000a;    modus_uom_cd CHARACTER VARYING(7),&amp;#x000a;    electrical_load_cd CHARACTER VARYING(7),&amp;#x000a;    no_period_ended_ind NUMERIC(38,0),&amp;#x000a;    no_period_ended_comment CHARACTER VARYING(4000),&amp;#x000a;    mon_loc_id CHARACTER VARYING(45) NOT NULL,&amp;#x000a;    rpt_period_id NUMERIC(38,0) NOT NULL,&amp;#x000a;    userid CHARACTER VARYING(25) NOT NULL,&amp;#x000a;    add_date TIMESTAMP WITHOUT TIME ZONE NOT NULL,&amp;#x000a;    update_date TIMESTAMP WITHOUT TIME ZONE&amp;#x000a;)&amp;#x000a;        WITH (&amp;#x000a;        OIDS=FALSE&amp;#x000a;        );&amp;#x000a;COMMENT ON TABLE camdecmps.nsps4t_summary&amp;#x000a;     IS 'NSPS4T (quarterly) Summary Information. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.nsps4t_summary.nsps4t_sum_id&amp;#x000a;     IS 'Unique identifier of a NSPS4T Summary record. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.nsps4t_summary.emission_standard_cd&amp;#x000a;     IS 'Code used to identify the NSPS4T Emission Standard.';&amp;#x000a;COMMENT ON COLUMN camdecmps.nsps4t_summary.modus_value&amp;#x000a;     IS 'Standard value for a modified steam generating or IGCC unit with a unit-specific stanrdard.';&amp;#x000a;COMMENT ON COLUMN camdecmps.nsps4t_summary.modus_uom_cd&amp;#x000a;     IS 'Code used to identify the NSPS4T Mass Rate for a modified steam generating or IGCC unit with a unit-specific stanrdard.';&amp;#x000a;COMMENT ON COLUMN camdecmps.nsps4t_summary.electrical_load_cd&amp;#x000a;     IS 'Code used to identify the NSPS4T Electrical Load.';&amp;#x000a;COMMENT ON COLUMN camdecmps.nsps4t_summary.no_period_ended_ind&amp;#x000a;     IS 'Indicates whether a compliance period ended during the reporting period.';&amp;#x000a;COMMENT ON COLUMN camdecmps.nsps4t_summary.no_period_ended_comment&amp;#x000a;     IS 'Comment about whether a compliance period ended during the reporting period.';&amp;#x000a;COMMENT ON COLUMN camdecmps.nsps4t_summary.mon_loc_id&amp;#x000a;     IS 'Unique identifier of a monitoring location record. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.nsps4t_summary.rpt_period_id&amp;#x000a;     IS 'Unique identifier of a reporting period record. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.nsps4t_summary.userid&amp;#x000a;     IS 'User account or source of data that added or updated record. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.nsps4t_summary.add_date&amp;#x000a;     IS 'Date and time in which record was added. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.nsps4t_summary.update_date&amp;#x000a;     IS 'Date and time in which record was last updated. ';">
                        <category _I_D="26dd8f63-3ead-4af7-bba7-dd3a079dd6dc" name="Columns" order-num="0" child-type="column" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Columns">
                            <column _I_D="cbd32e4e-649a-4bc1-8a08-7446dcb532b2" name="nsps4t_sum_id" table-schema="CAMDECMPS" table-name="NSPS4T_SUMMARY" dt-name="CHARACTER VARYING" dt-attr-1="45" transformed="2022-07-19 12:42:51" ordinal-position="1" is-nullable="N" comment="Unique identifier of a NSPS4T Summary record. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Columns,column NSPS4T_SUM_ID" mdl-applying-result="applying-success"/>
                            <column _I_D="79b8e9da-719e-49ad-a896-1b274bc260a9" name="emission_standard_cd" table-schema="CAMDECMPS" table-name="NSPS4T_SUMMARY" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-19 12:42:51" ordinal-position="2" is-nullable="Y" comment="Code used to identify the NSPS4T Emission Standard." artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Columns,column EMISSION_STANDARD_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="7c075379-579c-42b6-8967-3f8faff6e113" name="modus_value" table-schema="CAMDECMPS" table-name="NSPS4T_SUMMARY" dt-name="NUMERIC" dt-attr-1="5" dt-attr-2="0" transformed="2022-07-19 12:42:51" ordinal-position="3" is-nullable="Y" comment="Standard value for a modified steam generating or IGCC unit with a unit-specific stanrdard." artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Columns,column MODUS_VALUE" mdl-applying-result="applying-success"/>
                            <column _I_D="0e079f09-807f-4549-b88d-4312b7efbeb9" name="modus_uom_cd" table-schema="CAMDECMPS" table-name="NSPS4T_SUMMARY" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-19 12:42:51" ordinal-position="4" is-nullable="Y" comment="Code used to identify the NSPS4T Mass Rate for a modified steam generating or IGCC unit with a unit-specific stanrdard." artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Columns,column MODUS_UOM_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="346983a7-ab76-41cd-9e28-6303c21b91bc" name="electrical_load_cd" table-schema="CAMDECMPS" table-name="NSPS4T_SUMMARY" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-19 12:42:51" ordinal-position="5" is-nullable="Y" comment="Code used to identify the NSPS4T Electrical Load." artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Columns,column ELECTRICAL_LOAD_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="f2e5cbfd-2d8e-42a2-9094-16a29e52776b" name="no_period_ended_ind" table-schema="CAMDECMPS" table-name="NSPS4T_SUMMARY" dt-name="NUMERIC" dt-attr-1="38" dt-attr-2="0" transformed="2022-07-19 12:42:51" ordinal-position="6" is-nullable="Y" comment="Indicates whether a compliance period ended during the reporting period." artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Columns,column NO_PERIOD_ENDED_IND" mdl-applying-result="applying-success"/>
                            <column _I_D="b7a086fa-8e1e-4521-ad78-16d58a16d9e2" name="no_period_ended_comment" table-schema="CAMDECMPS" table-name="NSPS4T_SUMMARY" dt-name="CHARACTER VARYING" dt-attr-1="4000" transformed="2022-07-19 12:42:51" ordinal-position="7" is-nullable="Y" comment="Comment about whether a compliance period ended during the reporting period." artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Columns,column NO_PERIOD_ENDED_COMMENT" mdl-applying-result="applying-success"/>
                            <column _I_D="2ab6a3af-00d6-4082-8ed0-41044855710f" name="mon_loc_id" table-schema="CAMDECMPS" table-name="NSPS4T_SUMMARY" dt-name="CHARACTER VARYING" dt-attr-1="45" transformed="2022-07-19 12:42:51" ordinal-position="8" is-nullable="N" comment="Unique identifier of a monitoring location record. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Columns,column MON_LOC_ID" mdl-applying-result="applying-success"/>
                            <column _I_D="77f34e3c-73b1-4121-a29e-d64568556061" name="rpt_period_id" table-schema="CAMDECMPS" table-name="NSPS4T_SUMMARY" dt-name="NUMERIC" dt-attr-1="38" dt-attr-2="0" transformed="2022-07-19 12:42:51" ordinal-position="9" is-nullable="N" comment="Unique identifier of a reporting period record. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Columns,column RPT_PERIOD_ID" mdl-applying-result="applying-success"/>
                            <column _I_D="80e8b44f-7fdf-4369-8e90-1da2aa35649f" name="userid" table-schema="CAMDECMPS" table-name="NSPS4T_SUMMARY" dt-name="CHARACTER VARYING" dt-attr-1="8" transformed="2022-07-19 12:42:51" ordinal-position="10" is-nullable="N" comment="User account or source of data that added or updated record. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Columns,column USERID" mdl-applying-result="applying-success"/>
                            <column _I_D="1cbda6ac-2ef0-4a66-b1b6-6c8bfd0badf7" name="add_date" table-schema="CAMDECMPS" table-name="NSPS4T_SUMMARY" dt-name="TIMESTAMP WITHOUT TIME ZONE" dt-attr-1="0" transformed="2022-07-19 12:42:51" ordinal-position="11" is-nullable="N" comment="Date and time in which record was added. " default-definition="aws_oracle_ext.SYSDATE()" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Columns,column ADD_DATE" mdl-applying-result="applying-success"/>
                            <column _I_D="6743e7a8-5b1a-48e3-902b-e3efad76784b" name="update_date" table-schema="CAMDECMPS" table-name="NSPS4T_SUMMARY" dt-name="TIMESTAMP WITHOUT TIME ZONE" dt-attr-1="0" transformed="2022-07-19 12:42:51" ordinal-position="12" is-nullable="Y" comment="Date and time in which record was last updated. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Columns,column UPDATE_DATE" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="a2461b5d-51d5-4bd1-b465-7a840dcc7333" name="Partition columns" order-num="1" child-type="column" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Partition columns"/>
                        <category _I_D="1c18ec7e-9e83-4ace-8687-9c212af77d53" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Subpartition columns"/>
                        <category _I_D="2036ba50-3db3-4c62-bc96-117e25b9b5c9" name="Constraints" order-num="4" child-type="constraint" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints">
                            <constraint _I_D="e8564fcc-543d-4ac8-8dcf-ac16a741cf5c" name="fk_nsps4t_summary_loc" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" delete-rule="NO ACTION" generated="USER" transformed="2022-07-19 12:42:51" referenced-table-schema="camdecmps" referenced-table-name="monitor_location" referenced-constraint-schema="camdecmps" referenced-constraint-name="camdecmps" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints,constraint FK_NSPS4T_SUMMARY_LOC" mdl-applying-result="applying-success" mdl-applied="2022-07-19 12:50:31">
                                <category _I_D="048265c8-6bee-445c-89e6-0b9678282938" name="Columns" order-num="0" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints,constraint FK_NSPS4T_SUMMARY_LOC,category Columns">
                                    <column _I_D="60c2bbe6-8968-4634-bd21-d7d7fb55ed40" name="mon_loc_id" transformed="2022-07-19 12:42:51" ordinal-position="1" position-in-referenced-unique-constraint="mon_loc_id" column-in-referenced-unique-constraint="mon_loc_id" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints,constraint FK_NSPS4T_SUMMARY_LOC,category Columns,column MON_LOC_ID" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="2ce33beb-7562-4ad7-93d8-6725d51df286" name="fk_nsps4t_summary_lod" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" delete-rule="NO ACTION" generated="USER" transformed="2022-07-19 12:42:51" referenced-table-schema="camdecmpsmd" referenced-table-name="nsps4t_electrical_load_code" referenced-constraint-schema="camdecmps" referenced-constraint-name="camdecmps" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints,constraint FK_NSPS4T_SUMMARY_LOD" mdl-applying-result="applying-success" mdl-applied="2022-07-19 12:50:31">
                                <category _I_D="11afcb4d-5036-4060-800a-991c71b883ae" name="Columns" order-num="0" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints,constraint FK_NSPS4T_SUMMARY_LOD,category Columns">
                                    <column _I_D="a0e852b0-ec67-4755-9292-7c08a6cc96c3" name="electrical_load_cd" transformed="2022-07-19 12:42:51" ordinal-position="1" position-in-referenced-unique-constraint="electrical_load_cd" column-in-referenced-unique-constraint="electrical_load_cd" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints,constraint FK_NSPS4T_SUMMARY_LOD,category Columns,column ELECTRICAL_LOAD_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="8c221f7e-a28f-4988-96bb-065493e63871" name="fk_nsps4t_summary_prd" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" delete-rule="NO ACTION" generated="USER" transformed="2022-07-19 12:42:51" referenced-table-schema="camdecmpsmd" referenced-table-name="reporting_period" referenced-constraint-schema="camdecmps" referenced-constraint-name="camdecmps" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints,constraint FK_NSPS4T_SUMMARY_PRD" mdl-applying-result="applying-success" mdl-applied="2022-07-19 12:50:31">
                                <category _I_D="72e1a335-aa0d-4297-9fd6-0c241baa53b6" name="Columns" order-num="0" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints,constraint FK_NSPS4T_SUMMARY_PRD,category Columns">
                                    <column _I_D="7e54e25d-7749-49e7-80a4-a3589f6ab7f8" name="rpt_period_id" transformed="2022-07-19 12:42:51" ordinal-position="1" position-in-referenced-unique-constraint="rpt_period_id" column-in-referenced-unique-constraint="rpt_period_id" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints,constraint FK_NSPS4T_SUMMARY_PRD,category Columns,column RPT_PERIOD_ID" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="cb81f4ed-6db1-4b79-a9cf-9af1fbc756b6" name="fk_nsps4t_summary_stn" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" delete-rule="NO ACTION" generated="USER" transformed="2022-07-19 12:42:51" referenced-table-schema="camdecmpsmd" referenced-table-name="nsps4t_emission_standard_code" referenced-constraint-schema="camdecmps" referenced-constraint-name="camdecmps" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints,constraint FK_NSPS4T_SUMMARY_STN" mdl-applying-result="applying-success" mdl-applied="2022-07-19 12:50:31">
                                <category _I_D="6459020d-3503-471f-8bb9-e31ee6892585" name="Columns" order-num="0" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints,constraint FK_NSPS4T_SUMMARY_STN,category Columns">
                                    <column _I_D="e90f2ebe-49da-4f7c-b9c6-9685198aee6a" name="emission_standard_cd" transformed="2022-07-19 12:42:51" ordinal-position="1" position-in-referenced-unique-constraint="emission_standard_cd" column-in-referenced-unique-constraint="emission_standard_cd" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints,constraint FK_NSPS4T_SUMMARY_STN,category Columns,column EMISSION_STANDARD_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="36adce7e-8175-4619-af81-a0259845f871" name="fk_nsps4t_summary_uom" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" delete-rule="NO ACTION" generated="USER" transformed="2022-07-19 12:42:51" referenced-table-schema="camdecmpsmd" referenced-table-name="units_of_measure_code" referenced-constraint-schema="camdecmps" referenced-constraint-name="camdecmps" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints,constraint FK_NSPS4T_SUMMARY_UOM" mdl-applying-result="applying-success" mdl-applied="2022-07-19 12:50:31">
                                <category _I_D="bb94a71a-dbd7-4f40-a521-0bf2983baa87" name="Columns" order-num="0" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints,constraint FK_NSPS4T_SUMMARY_UOM,category Columns">
                                    <column _I_D="1deb1e27-124e-44b7-a092-260a574726e8" name="modus_uom_cd" transformed="2022-07-19 12:42:51" ordinal-position="1" position-in-referenced-unique-constraint="uom_cd" column-in-referenced-unique-constraint="uom_cd" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints,constraint FK_NSPS4T_SUMMARY_UOM,category Columns,column MODUS_UOM_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="a32c17b2-381b-4231-9c00-3b6571765e80" name="pk_nsps4t_summary" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints,constraint PK_NSPS4T_SUMMARY" mdl-applying-result="applying-success" mdl-applied="2022-07-19 12:50:31">
                                <category _I_D="b9f0bb25-928d-4dac-87cd-488e5e29d290" name="Columns" order-num="0" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints,constraint PK_NSPS4T_SUMMARY,category Columns">
                                    <column _I_D="68806a62-4baf-4abf-8352-079c570b8b03" name="nsps4t_sum_id" transformed="2022-07-19 12:42:51" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Constraints,constraint PK_NSPS4T_SUMMARY,category Columns,column NSPS4T_SUM_ID" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="1400e6c1-031f-4c49-b239-7e145d5dd684" name="Indexes" order-num="5" child-type="index" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes">
                            <index _I_D="0c73b8f0-0442-4c97-8054-a7b66e54b730" name="idx_nsps4t_summary_loc" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_LOC" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-07-19 12:50:30">
                                <category _I_D="0207ea0b-bdd9-4ba7-b2f5-98d0e897ef00" name="Columns" order-num="0" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_LOC,category Columns">
                                    <column _I_D="5ba3002b-434d-402c-9539-2082703788e8" name="mon_loc_id" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_LOC,category Columns,column MON_LOC_ID" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                            <index _I_D="697f49a3-50e1-449e-b346-e3546b0cad5e" name="idx_nsps4t_summary_lod" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_LOD" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-07-19 12:50:30">
                                <category _I_D="60143c3f-a009-4c2c-80f4-1c9903278add" name="Columns" order-num="0" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_LOD,category Columns">
                                    <column _I_D="005ff9e5-637d-4343-a7f2-137f1d5b024f" name="electrical_load_cd" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_LOD,category Columns,column ELECTRICAL_LOAD_CD" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                            <index _I_D="7387344a-8165-42c8-8289-ccfd8c871050" name="idx_nsps4t_summary_prd" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_PRD" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-07-19 12:50:30">
                                <category _I_D="3c148f83-cac6-4ce9-a065-1f6be9ce658e" name="Columns" order-num="0" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_PRD,category Columns">
                                    <column _I_D="430cd783-d460-441c-9c75-3b5904da4411" name="rpt_period_id" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_PRD,category Columns,column RPT_PERIOD_ID" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                            <index _I_D="dbe318c3-36c6-46c6-83e3-1f06602cf427" name="idx_nsps4t_summary_rpt" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_RPT" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-07-19 12:50:30">
                                <category _I_D="e2401702-c6e1-4e67-8ff8-9dd97c1c55fc" name="Columns" order-num="0" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_RPT,category Columns">
                                    <column _I_D="07f25538-5371-4f23-acc4-b3a6d1edbe78" name="rpt_period_id" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_RPT,category Columns,column RPT_PERIOD_ID" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                    <column _I_D="127c6be2-8906-4252-8742-a17c33806ccc" name="mon_loc_id" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_RPT,category Columns,column MON_LOC_ID" mdl-applying-result="applying-success" order-column="2" descasc="ASC"/>
                                </category>
                            </index>
                            <index _I_D="554c34d4-ae10-47fb-9428-49457cee0f58" name="idx_nsps4t_summary_stn" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_STN" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-07-19 12:50:30">
                                <category _I_D="2e32408a-0e65-433c-a38d-468d4c9a9701" name="Columns" order-num="0" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_STN,category Columns">
                                    <column _I_D="742f1f10-4c0b-4311-976e-c43b09f63c31" name="emission_standard_cd" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_STN,category Columns,column EMISSION_STANDARD_CD" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                            <index _I_D="779905aa-c644-45c8-a0ab-913b9a46bb1f" name="idx_nsps4t_summary_uom" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_UOM" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-07-19 12:50:30">
                                <category _I_D="6e8fd7f9-4311-46cf-8c1b-02a9afa18ec8" name="Columns" order-num="0" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_UOM,category Columns">
                                    <column _I_D="d3f0bccb-576c-452c-b3e7-6b6ddb74b65e" name="modus_uom_cd" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Indexes,index IDX_NSPS4T_SUMMARY_UOM,category Columns,column MODUS_UOM_CD" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                        </category>
                        <category _I_D="e900732d-dbbf-4539-94d6-57569a6f607f" name="Triggers" order-num="6" child-type="trigger" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Triggers"/>
                        <category _I_D="93abce59-4c92-4ba3-9e83-aa681d80babc" name="Partitions" order-num="7" child-type="partition" transformed="2022-07-19 12:42:51" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table NSPS4T_SUMMARY,category Partitions"/>
                    </table>
                    <table _I_D="81e9e1b3-1909-4988-a9c7-f7804e2d10f5" name="summary_value" transformed="2022-07-19 15:55:23" is-typed="N" comment="Cumulative Emissions data. Record Types 301 and 307." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE" gb-sql-text-modified="2022-07-19 16:10:39" sql="CREATE TABLE IF NOT EXISTS camdecmps.summary_value(&amp;#x000a;    sum_value_id CHARACTER VARYING(45) NOT NULL,&amp;#x000a;    rpt_period_id NUMERIC(38,0) NOT NULL,&amp;#x000a;    mon_loc_id CHARACTER VARYING(45) NOT NULL,&amp;#x000a;    parameter_cd CHARACTER VARYING(7) NOT NULL,&amp;#x000a;    current_rpt_period_total NUMERIC(13,3),&amp;#x000a;    calc_current_rpt_period_total NUMERIC(13,3),&amp;#x000a;    os_total NUMERIC(13,3),&amp;#x000a;    calc_os_total NUMERIC(13,3),&amp;#x000a;    year_total NUMERIC(13,3),&amp;#x000a;    calc_year_total NUMERIC(13,3),&amp;#x000a;    userid CHARACTER VARYING(25),&amp;#x000a;    add_date TIMESTAMP WITHOUT TIME ZONE,&amp;#x000a;    update_date TIMESTAMP WITHOUT TIME ZONE&amp;#x000a;)&amp;#x000a;        WITH (&amp;#x000a;        OIDS=FALSE&amp;#x000a;        );&amp;#x000a;COMMENT ON TABLE camdecmps.summary_value&amp;#x000a;     IS 'Cumulative Emissions data. Record Types 301 and 307.';&amp;#x000a;COMMENT ON COLUMN camdecmps.summary_value.sum_value_id&amp;#x000a;     IS 'Unique identifier of a summary value record. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.summary_value.rpt_period_id&amp;#x000a;     IS 'Unique identifier of a reporting period record. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.summary_value.mon_loc_id&amp;#x000a;     IS 'Unique identifier of a monitoring location record. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.summary_value.parameter_cd&amp;#x000a;     IS 'Code used to identify the parameter. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.summary_value.current_rpt_period_total&amp;#x000a;     IS 'Total value for current reporting period. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.summary_value.calc_current_rpt_period_total&amp;#x000a;     IS 'Total value for current reporting period. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.summary_value.os_total&amp;#x000a;     IS 'Ozone season year to date total. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.summary_value.calc_os_total&amp;#x000a;     IS 'Ozone season year to date total. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.summary_value.year_total&amp;#x000a;     IS 'Year to date total. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.summary_value.calc_year_total&amp;#x000a;     IS 'Year to date total. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.summary_value.userid&amp;#x000a;     IS 'User account or source of data that added or updated record. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.summary_value.add_date&amp;#x000a;     IS 'Date and time in which record was added. ';&amp;#x000a;COMMENT ON COLUMN camdecmps.summary_value.update_date&amp;#x000a;     IS 'Date and time in which record was last updated. ';">
                        <category _I_D="02fb2310-6a03-4cae-a932-d4fcb33bf36b" name="Columns" order-num="0" child-type="column" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Columns">
                            <column _I_D="0fb76aa2-93dd-4387-8af5-c80688f93de1" name="sum_value_id" table-schema="CAMDECMPS" table-name="SUMMARY_VALUE" dt-name="CHARACTER VARYING" dt-attr-1="45" transformed="2022-07-19 15:55:23" ordinal-position="1" is-nullable="N" comment="Unique identifier of a summary value record. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Columns,column SUM_VALUE_ID"/>
                            <column _I_D="dd69ac4a-90d3-46a4-86df-d3875cc95582" name="rpt_period_id" table-schema="CAMDECMPS" table-name="SUMMARY_VALUE" dt-name="NUMERIC" dt-attr-1="38" dt-attr-2="0" transformed="2022-07-19 15:55:23" ordinal-position="2" is-nullable="N" comment="Unique identifier of a reporting period record. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Columns,column RPT_PERIOD_ID"/>
                            <column _I_D="76c5d481-9073-4f30-8f72-646722fb9cf3" name="mon_loc_id" table-schema="CAMDECMPS" table-name="SUMMARY_VALUE" dt-name="CHARACTER VARYING" dt-attr-1="45" transformed="2022-07-19 15:55:23" ordinal-position="3" is-nullable="N" comment="Unique identifier of a monitoring location record. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Columns,column MON_LOC_ID"/>
                            <column _I_D="08cad5bb-8956-4f9e-bac2-8ea20f145700" name="parameter_cd" table-schema="CAMDECMPS" table-name="SUMMARY_VALUE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-19 15:55:23" ordinal-position="4" is-nullable="N" comment="Code used to identify the parameter. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Columns,column PARAMETER_CD"/>
                            <column _I_D="f0f2ef14-bf71-4b5f-a9af-78aa8b6db070" name="current_rpt_period_total" table-schema="CAMDECMPS" table-name="SUMMARY_VALUE" dt-name="NUMERIC" dt-attr-1="13" dt-attr-2="3" transformed="2022-07-19 15:55:23" ordinal-position="5" is-nullable="Y" comment="Total value for current reporting period. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Columns,column CURRENT_RPT_PERIOD_TOTAL"/>
                            <column _I_D="9b3125d7-2850-4ed6-88dd-d72272c3833c" name="calc_current_rpt_period_total" table-schema="CAMDECMPS" table-name="SUMMARY_VALUE" dt-name="NUMERIC" dt-attr-1="13" dt-attr-2="3" transformed="2022-07-19 15:55:23" ordinal-position="6" is-nullable="Y" comment="Total value for current reporting period. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Columns,column CALC_CURRENT_RPT_PERIOD_TOTAL"/>
                            <column _I_D="daa9d72d-3ad1-4933-82eb-bcd436a072ab" name="os_total" table-schema="CAMDECMPS" table-name="SUMMARY_VALUE" dt-name="NUMERIC" dt-attr-1="13" dt-attr-2="3" transformed="2022-07-19 15:55:23" ordinal-position="7" is-nullable="Y" comment="Ozone season year to date total. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Columns,column OS_TOTAL"/>
                            <column _I_D="75822b26-6f56-40db-8448-607eb5ffb41f" name="calc_os_total" table-schema="CAMDECMPS" table-name="SUMMARY_VALUE" dt-name="NUMERIC" dt-attr-1="13" dt-attr-2="3" transformed="2022-07-19 15:55:23" ordinal-position="8" is-nullable="Y" comment="Ozone season year to date total. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Columns,column CALC_OS_TOTAL"/>
                            <column _I_D="6f923b79-48f4-457a-a250-cdd226877c75" name="year_total" table-schema="CAMDECMPS" table-name="SUMMARY_VALUE" dt-name="NUMERIC" dt-attr-1="13" dt-attr-2="3" transformed="2022-07-19 15:55:23" ordinal-position="9" is-nullable="Y" comment="Year to date total. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Columns,column YEAR_TOTAL"/>
                            <column _I_D="935b2b01-f1d7-41ea-b6c4-52d4ddfd4c78" name="calc_year_total" table-schema="CAMDECMPS" table-name="SUMMARY_VALUE" dt-name="NUMERIC" dt-attr-1="13" dt-attr-2="3" transformed="2022-07-19 15:55:23" ordinal-position="10" is-nullable="Y" comment="Year to date total. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Columns,column CALC_YEAR_TOTAL"/>
                            <column _I_D="986aac18-8a73-4bc6-b9a3-7829e2a1d399" name="userid" table-schema="CAMDECMPS" table-name="SUMMARY_VALUE" dt-name="CHARACTER VARYING" dt-attr-1="8" transformed="2022-07-19 15:55:23" ordinal-position="11" is-nullable="Y" comment="User account or source of data that added or updated record. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Columns,column USERID"/>
                            <column _I_D="58e5ae60-43be-4a1a-aeb9-d9515f06c597" name="add_date" table-schema="CAMDECMPS" table-name="SUMMARY_VALUE" dt-name="TIMESTAMP WITHOUT TIME ZONE" dt-attr-1="0" transformed="2022-07-19 15:55:23" ordinal-position="12" is-nullable="Y" comment="Date and time in which record was added. " default-definition="aws_oracle_ext.SYSDATE()" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Columns,column ADD_DATE"/>
                            <column _I_D="fc91487e-c8b0-4b4f-8ba0-f1ff2387276f" name="update_date" table-schema="CAMDECMPS" table-name="SUMMARY_VALUE" dt-name="TIMESTAMP WITHOUT TIME ZONE" dt-attr-1="0" transformed="2022-07-19 15:55:23" ordinal-position="13" is-nullable="Y" comment="Date and time in which record was last updated. " artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Columns,column UPDATE_DATE"/>
                        </category>
                        <category _I_D="3f1c6567-cd37-425c-9e0a-faffdafa4fb4" name="Partition columns" order-num="1" child-type="column" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Partition columns"/>
                        <category _I_D="3476c6ec-dc3e-4db9-97af-684365d20331" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Subpartition columns"/>
                        <category _I_D="86790aa9-53bc-43d2-8334-f8f992895f6a" name="Constraints" order-num="4" child-type="constraint" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Constraints">
                            <constraint _I_D="7040e7a3-3d5e-4fb7-9779-2d14e9a148f8" name="fk_monitor_locat_summary_value" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" delete-rule="NO ACTION" generated="USER" transformed="2022-07-19 15:55:23" referenced-table-schema="camdecmps" referenced-table-name="monitor_location" referenced-constraint-schema="camdecmps" referenced-constraint-name="camdecmps" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Constraints,constraint FK_MONITOR_LOCAT_SUMMARY_VALUE" mdl-applying-result="applying-error" mdl-applied="2022-07-19 16:11:28" mdl-applying-message="ERROR: relation &quot;camdecmps.summary_value&quot; does not exist">
                                <category _I_D="1ea5db16-8e7e-471b-b91a-64330a9c9d9f" name="Columns" order-num="0" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Constraints,constraint FK_MONITOR_LOCAT_SUMMARY_VALUE,category Columns">
                                    <column _I_D="fd60166e-6329-4620-bacb-7601e91c1381" name="mon_loc_id" transformed="2022-07-19 15:55:23" ordinal-position="1" position-in-referenced-unique-constraint="mon_loc_id" column-in-referenced-unique-constraint="mon_loc_id" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Constraints,constraint FK_MONITOR_LOCAT_SUMMARY_VALUE,category Columns,column MON_LOC_ID" mdl-applying-result="applying-error"/>
                                </category>
                            </constraint>
                            <constraint _I_D="8e75cdf1-2002-478e-bc31-31c4be06c71d" name="fk_parameter_cod_summary_value" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" delete-rule="NO ACTION" generated="USER" transformed="2022-07-19 15:55:23" referenced-table-schema="camdecmpsmd" referenced-table-name="parameter_code" referenced-constraint-schema="camdecmps" referenced-constraint-name="camdecmps" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Constraints,constraint FK_PARAMETER_COD_SUMMARY_VALUE" mdl-applying-result="applying-error" mdl-applied="2022-07-19 16:11:28" mdl-applying-message="ERROR: relation &quot;camdecmps.summary_value&quot; does not exist">
                                <category _I_D="7dd7c9e2-e2eb-4a0a-be4e-a70914fa9820" name="Columns" order-num="0" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Constraints,constraint FK_PARAMETER_COD_SUMMARY_VALUE,category Columns">
                                    <column _I_D="4547b548-e240-4ef2-acab-fdb245c67108" name="parameter_cd" transformed="2022-07-19 15:55:23" ordinal-position="1" position-in-referenced-unique-constraint="parameter_cd" column-in-referenced-unique-constraint="parameter_cd" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Constraints,constraint FK_PARAMETER_COD_SUMMARY_VALUE,category Columns,column PARAMETER_CD" mdl-applying-result="applying-error"/>
                                </category>
                            </constraint>
                            <constraint _I_D="9e16c718-fe00-40fc-a66e-9ba6fb1e6e70" name="fk_reporting_per_summary_value" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" delete-rule="NO ACTION" generated="USER" transformed="2022-07-19 15:55:23" referenced-table-schema="camdecmpsmd" referenced-table-name="reporting_period" referenced-constraint-schema="camdecmps" referenced-constraint-name="camdecmps" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Constraints,constraint FK_REPORTING_PER_SUMMARY_VALUE" mdl-applying-result="applying-error" mdl-applied="2022-07-19 16:11:28" mdl-applying-message="ERROR: relation &quot;camdecmps.summary_value&quot; does not exist">
                                <category _I_D="8f28b7d7-0f5b-4bbb-8e41-557f6ca4cfcf" name="Columns" order-num="0" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Constraints,constraint FK_REPORTING_PER_SUMMARY_VALUE,category Columns">
                                    <column _I_D="75932d26-8a01-48cd-a88e-cfb1afb1a663" name="rpt_period_id" transformed="2022-07-19 15:55:23" ordinal-position="1" position-in-referenced-unique-constraint="rpt_period_id" column-in-referenced-unique-constraint="rpt_period_id" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Constraints,constraint FK_REPORTING_PER_SUMMARY_VALUE,category Columns,column RPT_PERIOD_ID" mdl-applying-result="applying-error"/>
                                </category>
                            </constraint>
                            <constraint _I_D="08cd9394-fdc0-441f-b95d-b44feb7d62e5" name="pk_summary_value" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Constraints,constraint PK_SUMMARY_VALUE" mdl-applying-result="applying-error" mdl-applied="2022-07-19 16:11:28" mdl-applying-message="ERROR: relation &quot;camdecmps.summary_value&quot; does not exist">
                                <category _I_D="5af3d2c9-ad7e-4e11-bc42-cff8b004ec9b" name="Columns" order-num="0" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Constraints,constraint PK_SUMMARY_VALUE,category Columns">
                                    <column _I_D="ea570835-3d7f-4709-87bb-30ad292c217a" name="sum_value_id" transformed="2022-07-19 15:55:23" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Constraints,constraint PK_SUMMARY_VALUE,category Columns,column SUM_VALUE_ID" mdl-applying-result="applying-error"/>
                                </category>
                            </constraint>
                            <constraint _I_D="bb85e106-a8f5-4545-906c-66b5698067bc" name="summary_value_u01" constraint-type="UNIQUE" constraint-type-desc="UNIQUE KEY" generated="USER" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Constraints,constraint SUMMARY_VALUE_U01" mdl-applying-result="applying-error" mdl-applied="2022-07-19 16:11:28" mdl-applying-message="ERROR: relation &quot;camdecmps.summary_value&quot; does not exist">
                                <category _I_D="7d1b98fa-7e4e-42c8-bb11-462389b78b76" name="Columns" order-num="0" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Constraints,constraint SUMMARY_VALUE_U01,category Columns">
                                    <column _I_D="1a34adb0-6eb5-4502-bd21-84ffc723ac67" name="mon_loc_id" transformed="2022-07-19 15:55:23" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Constraints,constraint SUMMARY_VALUE_U01,category Columns,column MON_LOC_ID" mdl-applying-result="applying-error"/>
                                    <column _I_D="2ce3ce90-b1f9-4453-b27d-f96215850757" name="rpt_period_id" transformed="2022-07-19 15:55:23" ordinal-position="2" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Constraints,constraint SUMMARY_VALUE_U01,category Columns,column RPT_PERIOD_ID" mdl-applying-result="applying-error"/>
                                    <column _I_D="660eccf0-0361-4d70-8512-615e5b90e757" name="parameter_cd" transformed="2022-07-19 15:55:23" ordinal-position="3" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Constraints,constraint SUMMARY_VALUE_U01,category Columns,column PARAMETER_CD" mdl-applying-result="applying-error"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="343a5cd5-857c-4e92-a39a-0fb5e67ae3d6" name="Indexes" order-num="5" child-type="index" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Indexes">
                            <index _I_D="724ca09c-ad08-4107-84fa-1eb66f058eb7" name="idx_summary_value_mon_loc_id" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Indexes,index IDX_SUMMARY_VALUE_MON_LOC_ID" is-unique="0" mdl-applying-result="applying-error" mdl-applied="2022-07-19 16:11:27" mdl-applying-message="ERROR: relation &quot;camdecmps.summary_value&quot; does not exist">
                                <category _I_D="1ba91a58-07f4-4b03-8048-200d90c4f154" name="Columns" order-num="0" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Indexes,index IDX_SUMMARY_VALUE_MON_LOC_ID,category Columns">
                                    <column _I_D="c28e0532-c80d-42b8-a9c7-e04244a7cb2b" name="mon_loc_id" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Indexes,index IDX_SUMMARY_VALUE_MON_LOC_ID,category Columns,column MON_LOC_ID" mdl-applying-result="applying-error" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                            <index _I_D="af553622-a25c-462b-86d5-61f7aa8b7522" name="idx_sv_add_date" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Indexes,index IDX_SV_ADD_DATE" is-unique="0" mdl-applying-result="applying-error" mdl-applied="2022-07-19 16:11:27" is-functional="Y" gb-sql-text-modified="2022-07-19 16:11:06" sql="CREATE INDEX idx_sv_add_date&amp;#x000a;ON camdecmps.summary_value&amp;#x000a;USING BTREE (add_date ASC);" mdl-applying-message="ERROR: relation &quot;camdecmps.summary_value&quot; does not exist">
                                <category _I_D="6ea19de1-627d-48a5-89c2-10ba91bee4b6" name="Columns" order-num="0" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Indexes,index IDX_SV_ADD_DATE,category Columns">
                                    <column _I_D="675bb461-f5f3-4086-83a1-b27017081b1d" name="aws_oracle_ext.TRUNC(add_date)" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Indexes,index IDX_SV_ADD_DATE,category Columns,column SYS_NC00014$" mdl-applying-result="applying-error" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                            <index _I_D="bb716ef6-4288-4cdc-b24c-63a7c5dca040" name="summary_value_idx001" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Indexes,index SUMMARY_VALUE_IDX001" is-unique="0" mdl-applying-result="applying-error" mdl-applied="2022-07-19 16:11:27" mdl-applying-message="ERROR: relation &quot;camdecmps.summary_value&quot; does not exist">
                                <category _I_D="49c1530f-75b9-44e5-b838-4c48372c440e" name="Columns" order-num="0" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Indexes,index SUMMARY_VALUE_IDX001,category Columns">
                                    <column _I_D="1fba1526-19bc-474d-b289-982d320ff9e5" name="parameter_cd" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Indexes,index SUMMARY_VALUE_IDX001,category Columns,column PARAMETER_CD" mdl-applying-result="applying-error" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                            <index _I_D="b87c44c2-62be-4b20-b823-2cb14d0a05fa" name="summary_value_idx002" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Indexes,index SUMMARY_VALUE_IDX002" is-unique="0" mdl-applying-result="applying-error" mdl-applied="2022-07-19 16:11:27" mdl-applying-message="ERROR: relation &quot;camdecmps.summary_value&quot; does not exist">
                                <category _I_D="1e3efd34-28c0-4f7f-bda8-9e5a8aee85f9" name="Columns" order-num="0" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Indexes,index SUMMARY_VALUE_IDX002,category Columns">
                                    <column _I_D="ce4b17ed-a292-4d1e-972f-28ec8f4bf54e" name="rpt_period_id" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Indexes,index SUMMARY_VALUE_IDX002,category Columns,column RPT_PERIOD_ID" mdl-applying-result="applying-error" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                        </category>
                        <category _I_D="575e7945-a55b-46b1-8b30-73090284574a" name="Triggers" order-num="6" child-type="trigger" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Triggers">
                            <trigger _I_D="9d87cc6d-8941-4fab-ad26-b791e9ab337f" name="SUMMARY_VALUE#TRIGGER" trigger-type="AFTER ROW" transformed="2022-07-19 15:55:23" trigger-schema="CAMDECMPS" row-or-statement="ROW" is-after-row="YES" is-instead-of-row="NO" is-before-statement="NO" is-after-statement="NO" before-after-instead-of="AFTER" is-before-row="NO" what-event="INSERT OR UPDATE OR DELETE" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Triggers,trigger SUMMARY_VALUE#TRIGGER$(CAMDECMPS)" count-all-parsable-nodes="689" count-error-parsable-nodes="0" is-insert="1" is-update="1" is-delete="1">
                                <complex-attribute name="sql"><![CDATA[EXECUTE PROCEDURE camdecmps."SUMMARY_VALUE#TRIGGER$summary_value"()]]></complex-attribute>
                            </trigger>
                        </category>
                        <category _I_D="bb9f271c-1eaf-4967-bea7-1c90c57fe07b" name="Partitions" order-num="7" child-type="partition" transformed="2022-07-19 15:55:23" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Partitions"/>
                    </table>
                </category>
                <category _I_D="62a221b8-534d-45d4-a6e8-6c9ee7f71f08" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="960bae12-0483-4a6e-92af-dd75e831f381" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="b9d110bf-2369-463d-ae56-364fbe803c3a" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="8a0621c6-302b-4b0e-8969-fedb1a90ad1c" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="559fc55e-3e49-465e-b1e8-6bcc804e8e2f" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="7bc9ccb4-67d4-455b-8b0f-3bdd9d2d90c6" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="e69becca-50f7-4919-a63b-f7430dcd25f5" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="1b8562e9-6e95-45e2-8994-a96309cbc12f" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="543cb917-b871-4c5f-b5cb-ead7644f4a6a" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function">
                    <function _I_D="4f206fac-3313-4d5a-9da1-0eb59b2d40db" name="SUMMARY_VALUE#TRIGGER$summary_value" artificial-src-full-name="category Schemas,schema CAMDECMPS,category Tables,table SUMMARY_VALUE,category Triggers,trigger SUMMARY_VALUE#TRIGGER$(CAMDECMPS)" transformed="2022-07-19 15:55:23">
                        <complex-attribute name="sql"><![CDATA[DECLARE&#x000d;
    auditId NUMERIC(38);&#x000d;
BEGIN&#x000d;
    IF TG_OP = 'INSERT' THEN&#x000d;
        BEGIN&#x000d;
            CALL camdaux.pkgaudit$add_audit_event('SUMMARY_VALUE'::TEXT, new.sum_value_id, 'INS'::TEXT, auditId);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'SUM_VALUE_ID'::TEXT, new.sum_value_id, NULL);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'RPT_PERIOD_ID'::TEXT, new.rpt_period_id, NULL);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'MON_LOC_ID'::TEXT, new.mon_loc_id, NULL);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'PARAMETER_CD'::TEXT, new.parameter_cd, NULL);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'CURRENT_RPT_PERIOD_TOTAL'::TEXT, new.current_rpt_period_total, NULL);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'CALC_CURRENT_RPT_PERIOD_TOTAL'::TEXT, new.calc_current_rpt_period_total, NULL);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'OS_TOTAL'::TEXT, new.os_total, NULL);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'CALC_OS_TOTAL'::TEXT, new.calc_os_total, NULL);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'YEAR_TOTAL'::TEXT, new.year_total, NULL);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'CALC_YEAR_TOTAL'::TEXT, new.calc_year_total, NULL);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'USERID'::TEXT, new.userid, NULL);&#x000d;
        END;&#x000d;
    ELSIF TG_OP = 'UPDATE' THEN&#x000d;
        BEGIN&#x000d;
            CALL camdaux.pkgaudit$add_audit_event('SUMMARY_VALUE'::TEXT, new.sum_value_id, 'UPD'::TEXT, auditId);&#x000d;
            CALL camdaux.pkgaudit$check_val(auditId, 'SUM_VALUE_ID'::TEXT, new.sum_value_id, old.sum_value_id);&#x000d;
            CALL camdaux.pkgaudit$check_val(auditId, 'RPT_PERIOD_ID'::TEXT, new.rpt_period_id, old.rpt_period_id);&#x000d;
            CALL camdaux.pkgaudit$check_val(auditId, 'MON_LOC_ID'::TEXT, new.mon_loc_id, old.mon_loc_id);&#x000d;
            CALL camdaux.pkgaudit$check_val(auditId, 'PARAMETER_CD'::TEXT, new.parameter_cd, old.parameter_cd);&#x000d;
            CALL camdaux.pkgaudit$check_val(auditId, 'CURRENT_RPT_PERIOD_TOTAL'::TEXT, new.current_rpt_period_total, old.current_rpt_period_total);&#x000d;
            CALL camdaux.pkgaudit$check_val(auditId, 'CALC_CURRENT_RPT_PERIOD_TOTAL'::TEXT, new.calc_current_rpt_period_total, old.calc_current_rpt_period_total);&#x000d;
            CALL camdaux.pkgaudit$check_val(auditId, 'OS_TOTAL'::TEXT, new.os_total, old.os_total);&#x000d;
            CALL camdaux.pkgaudit$check_val(auditId, 'CALC_OS_TOTAL'::TEXT, new.calc_os_total, old.calc_os_total);&#x000d;
            CALL camdaux.pkgaudit$check_val(auditId, 'YEAR_TOTAL'::TEXT, new.year_total, old.year_total);&#x000d;
            CALL camdaux.pkgaudit$check_val(auditId, 'CALC_YEAR_TOTAL'::TEXT, new.calc_year_total, old.calc_year_total);&#x000d;
            CALL camdaux.pkgaudit$check_val(auditId, 'USERID'::TEXT, new.userid, old.userid);&#x000d;
        END;&#x000d;
    ELSIF TG_OP = 'DELETE' THEN&#x000d;
        BEGIN&#x000d;
            CALL camdaux.pkgaudit$add_audit_event('SUMMARY_VALUE'::TEXT, old.sum_value_id, 'DEL'::TEXT, auditId);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'SUM_VALUE_ID'::TEXT, NULL, old.sum_value_id);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'RPT_PERIOD_ID'::TEXT, NULL, old.rpt_period_id);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'MON_LOC_ID'::TEXT, NULL, old.mon_loc_id);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'PARAMETER_CD'::TEXT, NULL, old.parameter_cd);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'CURRENT_RPT_PERIOD_TOTAL'::TEXT, NULL, old.current_rpt_period_total);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'CALC_CURRENT_RPT_PERIOD_TOTAL'::TEXT, NULL, old.calc_current_rpt_period_total);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'OS_TOTAL'::TEXT, NULL, old.os_total);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'CALC_OS_TOTAL'::TEXT, NULL, old.calc_os_total);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'YEAR_TOTAL'::TEXT, NULL, old.year_total);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'CALC_YEAR_TOTAL'::TEXT, NULL, old.calc_year_total);&#x000d;
            CALL camdaux.pkgaudit$add_value(auditId, 'USERID'::TEXT, NULL, old.userid);&#x000d;
        END;&#x000d;
    END IF;&#x000d;
&#x000d;
    IF TG_OP = 'INSERT' THEN&#x000d;
        RETURN NEW;&#x000d;
    ELSIF TG_OP = 'UPDATE' THEN&#x000d;
        RETURN NEW;&#x000d;
    ELSIF TG_OP = 'DELETE' THEN&#x000d;
        RETURN OLD;&#x000d;
    END IF;&#x000d;
END;]]></complex-attribute>
                        <category _I_D="977606f2-0bf8-4780-8e02-32849a02b89a" name="Parameters" order-num="0" child-type="parameter" transformed="2022-07-19 15:55:23">
                            <parameter _I_D="00b638c7-4e05-451e-b4dc-9d87ee739de1" dt-name="trigger" argument-order="0" name="(result)"/>
                        </category>
                    </function>
                </category>
                <category _I_D="98eaa13b-7445-4a82-b1dc-3f446eed61d0" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="a5f056f7-c6a3-45b7-91f3-fa565c90bdaf" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="2091dfa5-63f3-4162-b0a8-7af79c6b4c21" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="bde5a9ff-63e2-48ab-b157-83fab7aa43d5" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="d08dd12e-e2b5-4e3c-80aa-cad16d34dbe4" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="eb33856c-81eb-462d-8e25-912c663a9591" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="61682c0a-b987-40ba-b6bc-5bcbf497b820" name="camdecmpsaux" context="camdecmpsaux" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="35b6fa38-392d-4058-8c59-d53adbaeb793" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="1dd6987d-6e50-4d52-86ce-1b96455aebef" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="2511123e-d206-4ad6-a36f-9f31a65ad8b4" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="dd17c635-d1fb-4511-80a4-1ff83e48016d" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="0a0c9c46-d1cf-452a-a118-fc01cbc17202" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="0eba96cf-da06-417a-b05a-363601f4db9b" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="f76a47e8-a25b-46a7-83a5-11c919a08b32" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="79d7dc15-b5dd-4de5-8b30-d8aa9114c1ec" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="4b00922e-b40b-49a1-813c-2eedfe82334e" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="2b6d3fe4-8035-41e9-aa9d-9f098774e0af" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="b6cb071a-3e24-41f5-ac30-06ede8f2c847" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="1d19b3b1-bf54-4f60-bb5e-4f4af4cd02dd" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="4a7cfff1-c857-4957-87f1-5cb3d3bb4533" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="51f4de4e-609c-4c5c-a874-f474f9994bd9" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="e8aaabaf-fd08-4646-a6bc-78d485723fd5" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="9011ae96-8f32-4789-a620-d4a84fd5a0c4" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="ab38e07d-8fb9-488a-b618-b7a35e288aad" name="camdecmpsmd" context="camdecmpsmd" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL" mdl-applying-result="applying-success" mdl-applied="2022-07-18 16:34:42">
                <category _I_D="5119a059-69ef-4bf6-ac21-7024492f2de7" name="Tables" order-num="0" objects-loading="main" subcategories-loading="none" child-type="table">
                    <table _I_D="72f66326-c4dc-49bb-8762-c62e2684073e" name="accuracy_spec_code" context="accuracy_spec_code" subcategories-loading="full" object-loading="extended" is-typed="NO" comment="Lookup table for accuracy specification code." partitioned="NO" is-unlogged="NO">
                        <category _I_D="e58737e3-9139-4ca0-b0a0-2a2b73d81d62" name="Columns" order-num="0" objects-loading="extended" subcategories-loading="full" child-type="column">
                            <column _I_D="ec25c40b-518d-4ed4-a0cd-a46e4aa629c8" name="accuracy_spec_cd" dt-name="character varying" dt-attr-1="7" context="accuracy_spec_cd" subcategories-loading="full" object-loading="extended" ordinal-position="1" is-nullable="N" comment="Unique code value for a lookup table." system-type-schema="pg_catalog" system-type-name="varchar" type-name="character varying" is-updatable="YES" is-xml-document="N" is-user-defined="0" is-inherited="NO" is-identity="NO" character-maximum-length="7"/>
                            <column _I_D="ecbf987b-05a0-435c-bc92-a644af3f18da" name="accuracy_spec_cd_description" dt-name="character varying" dt-attr-1="1000" context="accuracy_spec_cd_description" subcategories-loading="full" object-loading="extended" ordinal-position="2" is-nullable="N" comment="Description of lookup code." system-type-schema="pg_catalog" system-type-name="varchar" type-name="character varying" is-updatable="YES" is-xml-document="N" is-user-defined="0" is-inherited="NO" is-identity="NO" character-maximum-length="1000"/>
                        </category>
                        <category _I_D="00e4870f-fac3-4be7-a72c-b467ddaff395" name="Partition columns" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="column"/>
                        <category _I_D="ce37fbc9-e0eb-4ab4-8c73-21bf17275c6e" name="Subpartition columns" order-num="2" objects-loading="empty" subcategories-loading="full" child-type="column"/>
                        <category _I_D="b4dea8e9-7fe6-4e35-9ccd-e9ed1d6efa1f" name="Constraints" order-num="3" objects-loading="extended" subcategories-loading="full" child-type="constraint" mdl-expected-node-count="1">
                            <constraint _I_D="782ff36b-db90-4ca8-ac40-938abfb5a445" table-name="accuracy_spec_code" name="pk_accuracy_spec_cd" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" context="pk_accuracy_spec_cd" subcategories-loading="full" object-loading="extended" constraint-schema="camdecmpsmd" is-deferrable="NO" initially-deferred="NO">
                                <complex-attribute name="check-clause"><![CDATA[PRIMARY KEY (accuracy_spec_cd)]]></complex-attribute>
                                <category _I_D="75cb1a3e-95c0-4dee-b97a-938ea66e3401" name="Columns" order-num="0" objects-loading="extended" subcategories-loading="full" child-type="column">
                                    <column _I_D="3061a9f7-8f42-4644-b508-ae9654792ed6" name="accuracy_spec_cd" context="accuracy_spec_cd" subcategories-loading="full" object-loading="extended" ordinal-position="1" column-char-length="7"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="eea520cc-1568-42b3-9070-e97052a6933c" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="2c657e60-233f-42a4-ae27-288f7ed7c55b" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="9f30f1c7-3168-47ed-ab97-304e7160fdf8" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="5e44e427-d67f-4dd5-af25-b322e27a522b" name="accuracy_test_method_code" context="accuracy_test_method_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="9673d53f-38be-4143-8485-7f261e47d43c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7e5797e3-f4a5-4fce-8c97-33a460116139" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="641ba05f-aa91-407f-8cde-2210293d53c3" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ad1e5e11-baa1-4761-bc3b-ba441c52826c" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="d748ccdd-d791-470b-80dd-148561a70689" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="b1429ac3-b124-458f-a4c7-fa2b4c4bc3d3" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="0badd994-1a87-4891-89d2-a80c8babd44f" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="7391bffc-333c-4ef1-aee6-ad942d5750c9" name="acquisition_method_code" context="acquisition_method_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="c36a9733-c091-4964-aa3d-b0185f1b7f7f" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="97dffb2b-5a2c-4718-b897-8ca32f5af984" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bf836caf-cad9-403f-a1bd-2f45193cb3ff" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9dafaea7-aaa5-40c3-a59e-074bf1d3ff60" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="6011eb3b-59af-46b5-b2e7-6d07e56b4952" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="36e59cba-48db-42fa-9e4f-f4c7b7e7292d" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="3c375df0-76a3-433c-b87f-8277b4ca3d4a" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="644c3c08-ac1b-486f-abd2-c2a8b37cda05" name="analyzer_range_code" context="analyzer_range_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="42251b31-549d-4082-a52c-a11213dbb894" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ffe911a6-8982-463d-b741-98d0b367e12f" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="677cd017-4c22-4410-a04b-a88c379ca241" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ab9d39d8-f674-4e2e-8d5f-59272f53037f" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="a238f5fe-ce8e-43b4-a1f0-acf74e171d48" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="c01c3f89-f57e-491d-b88e-34cc2a488c97" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="30df67fc-bdfd-460e-b3a0-dd003538a927" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="c6fd441d-54b6-49c0-abdd-8fcf5bf9961c" name="apportionment_type_code" context="apportionment_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="a3bfa9f1-6e11-4866-b807-5403a0d20c78" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="db34b9f1-cc5e-47c5-b637-34fbf5d21197" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="efbc831b-56eb-49ba-8c47-ddbd5f123940" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3f2e0e5f-b662-4621-ba05-8a73a42f27b5" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="3aa49887-4ebf-4aaf-8b70-3ac4e5285dbe" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="0aa0f99c-beed-4657-b526-f6d65bbd7fa3" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="394c6519-b319-42ea-afd8-acd289b1af4a" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="0ab8883c-dfc7-4601-aa84-42430f69cbfb" name="aps_code" context="aps_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="bbca4cda-5612-469c-9e4b-950ed45d6aa5" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="da5d067a-c0fc-4779-89eb-8529869609a6" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c0843edf-cf41-49b6-8e41-4e3d0c03b8e7" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bea06024-8fb3-43c4-a09a-33643e701250" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="9fa5d881-9089-4441-ab97-cb6abac226f7" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="04f53e23-7ebe-4b25-ad15-fde37873aed7" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="81acb984-7165-444f-ad16-8519b858a6c0" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="ed00bc49-2ab7-4441-a5ee-8db8e79a3beb" name="basis_code" context="basis_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="780cad7b-c8b2-4c35-a658-facb7b98f084" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="140ad4b9-99d2-4b66-90a4-4edc66af3d20" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="443fb79f-8cae-4dc5-b0b0-efeb7bd9b3a0" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d802fb97-8a65-4924-9ff0-9734eeb9762d" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="6c1fddc7-c928-46f1-b0f6-defe2e505b6e" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="1058b39c-8263-487e-8cd3-5c60180495cb" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="c5545224-07bb-4a94-8b32-49b47fcb5919" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f37daaa7-7711-4eca-8807-e23318aca0c3" name="bypass_approach_code" context="bypass_approach_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="7b78015e-0842-4401-8a28-515735c8bf7a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="00880567-5fb1-43f2-9319-d80182272d3e" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ed36211b-0067-4e01-bf5f-07faecf2ff24" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2af80683-b03c-4fde-955e-4003f2fff11c" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="fa602df3-09ac-47c4-9ca1-0cbf6f07ffa1" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="8d6de2e5-a2b0-44cc-98ce-3270f1753ce3" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="60dbd14e-b702-4595-9723-4cb0d4cb4f49" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="ef5b36db-2154-42ec-9104-af2077ebfac1" name="calibration_source_code" context="calibration_source_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="07a16347-bda8-4ca1-b353-0d850a107835" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ab410e8a-8061-4fce-806f-53ff15b16872" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b836641e-0046-41db-b1b6-65fd0a19e6d5" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2eac7d21-270b-4cda-969c-34885d21e41e" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="3eab90c6-891c-4c95-9b23-2421b382ebd8" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="24620aa9-3212-4053-8657-b73b748fb457" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="79a44db9-43e8-4684-a9e4-e1c9f07474ae" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="173e72a2-734d-4c83-a2e7-89a5f667f6f8" name="calibration_standard_code" context="calibration_standard_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="85081a7a-73a8-44d7-9b1f-049afbda72e7" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c65eb97e-1b90-4a15-a567-339e410b469f" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6e1fb76f-6aa6-40a5-8eaf-be8324f64cb9" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e9a0f6b0-abe9-4025-a04e-9093db15bfc7" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="ff5da446-a8d1-4b0e-b528-8fb76ede9882" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="bdd3106d-82d9-4cb7-823c-5aab04a881f7" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="9e210d1b-0f70-433b-a130-aba94dc0fd5f" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="383afb77-5fb8-485a-8258-ae871acad258" name="category_code" context="category_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="dfb90db9-3f32-46c6-ac26-916d1f90c173" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="48a18849-2a3e-4384-a4db-755d7d35547d" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="24f1492f-865b-4a0e-bf17-7527fc028c4f" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9896719f-7adf-4580-b0a8-25e057675e4d" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="0f779d50-636e-4ee1-bb91-ca9ae460beea" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="034ffc31-9803-4059-8b89-3579b13d4961" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="ba188cd1-40b6-4c20-8f1f-a6fea2fe46fd" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="41e9a194-487b-4705-a4dd-c5cc0c9c8126" name="check_applicability_code" context="check_applicability_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="2c30f896-6833-4d28-b901-ba2bb0b0eb6e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f3c8d6af-9520-4530-9512-62c2eb26c8dc" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f726d4a7-ee49-4e8b-980c-fc60299b3028" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0e8fb304-4962-4b6f-9491-ee0c54b20159" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="cac927e7-8b65-49d8-a662-374ce9c976e3" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="173e2775-4285-467d-a502-575f1c46912f" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e19a86d6-08fb-48b7-99e9-27e11b469970" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="55b6e5e8-1e9f-431f-9368-d60321db0307" name="check_catalog" context="check_catalog" subcategories-loading="none" object-loading="main">
                        <category _I_D="eeb84809-54a4-4960-a5a9-2270f0faf1b1" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cb5b8236-226b-4ac8-b9fe-dd5f29bb4ff1" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bc72f91f-b4d2-48da-a34d-c441558fbffa" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ac431df5-c5ab-4039-9f20-b0f4cba0da40" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="891d187a-ead9-4b10-9e9f-e60553a3c3ca" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="5"/>
                        <category _I_D="4f64e27f-6938-4bb3-81a0-2f0249db666f" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="439ccc92-41d3-4442-b9de-97e2a295bca7" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="07e5e5f4-8333-422e-b48a-d4bd9da0d088" name="check_catalog_parameter" context="check_catalog_parameter" subcategories-loading="none" object-loading="main">
                        <category _I_D="6a1f47ef-13e6-4ddc-9b07-f52c5d2b029a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0388d5db-a3ec-43de-9d43-123e304443a6" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="87c60f05-a1e0-45c3-9aff-e286b001a5bc" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="54280582-4d37-4059-aaf4-7b74b935ee49" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="b9b24697-b080-4a4c-afff-9652496824fb" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="831e343d-4e21-434d-8bd5-13186ae74a14" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="63d7d11c-4bf9-4eca-b193-b98fb0901f54" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="5f6da41f-3386-4696-8b68-f3ff0ba234cd" name="check_catalog_plugin" context="check_catalog_plugin" subcategories-loading="none" object-loading="main">
                        <category _I_D="b3e66159-6d11-4a90-9bb9-7e6b8d6422bb" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fead1f2a-55b6-44c4-bc0f-346399bf9597" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d211b9ec-d177-4ad5-8368-9050015f3279" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1a872b9a-6dcf-4fd5-9daf-699998dbf75d" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="dd88a954-1982-4ad5-be98-ba5ca204ccc6" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="65d23309-4deb-42ab-8f71-f98ff6cec935" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="ec598eb4-0100-403b-b132-523e1e6d0741" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="389b5780-9aef-407f-a8b7-6370ff3ce507" name="check_catalog_result" context="check_catalog_result" subcategories-loading="none" object-loading="main">
                        <category _I_D="6d72da28-6666-4e9f-8f5b-d88f8501bfad" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6db60224-d5ac-4784-af21-420b3e038250" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="dc6dea71-bd75-4045-8b13-f47e8ae40eb9" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="398fe541-13cf-490e-9b14-88e71b4ced4b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="d8fa48dd-1716-45dc-9dbf-180d86250dc3" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="3"/>
                        <category _I_D="a45514bf-5cae-4f29-b6a4-e8b741d3757b" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="21a504d0-3f8e-41f5-bed4-ddd87f475f8d" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="e9c88650-6dad-4578-b68d-66e872635ecd" name="check_data_type_code" context="check_data_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="9d22f8a4-9c1a-4cec-9840-c94e8707e412" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d730ebf5-03bb-49e3-b4f4-153075369e5f" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e7890a6d-b21b-454d-a3e8-a012f328703b" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="74c409dd-9635-4fb2-be40-bf49ad25ae0d" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="4cfa7864-19f7-40c5-a27e-14f101c8246a" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="8a0898d6-c5c7-4c89-912c-47eed0385cd4" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="736b90ca-4b96-4375-9d0e-30e8c6318ce4" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="510195ee-c545-45d0-b167-68db9b97c507" name="check_operator_code" context="check_operator_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="63a98fad-9784-406f-a222-e9b94b02a1de" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="869b67d7-13bf-4f0d-b141-db64b5d80454" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="062da928-f7f0-4010-9751-2f8cae6aca3d" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e585953e-c564-4de0-b38e-af914fd87402" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="a5f27434-d047-4a11-a84e-14efa38ac41e" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="ad6084bf-aace-49c5-9f96-d5048fc801fa" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="f846bfc0-2802-4b3f-9519-5989b0fa1ba2" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="4c2e4e6b-6113-4370-8591-25fcd3121d04" name="check_operator_data_type" context="check_operator_data_type" subcategories-loading="none" object-loading="main">
                        <category _I_D="7234c0dc-0d23-46f0-8982-7011c4fb03e9" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="418645dd-787e-4204-b6fa-53dbd5beedf8" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5e88e557-544c-4119-9902-333191f1e733" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="14fc4a0e-474c-4029-8435-873030f42393" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="6a303766-4120-4377-b5fd-4625dcabc46b" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="0b050ac3-e8af-4759-85de-89acf6cfc0f8" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="71f2e8e2-4b7a-46a5-a8f7-70df99300064" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="48274ab9-53f6-45e5-99a3-ab1e24848d4b" name="check_parameter_code" context="check_parameter_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="8200945f-0116-4d0a-a174-3e4019531b0a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9a7a4041-bd4f-4829-8de6-71329a62e968" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="242593b9-537d-4af2-bd39-1759ee401a9f" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="be03e371-031d-4642-af0e-5b2c3faf4456" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="a71f2f71-bc62-4cba-8a91-f47084089573" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="0bd14d2a-5104-4ffd-b42e-db4cc20efceb" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="6c9959a1-98ff-4057-9fda-1bb094bf7ae9" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="9c3e98bc-ca10-4cbe-a895-26b41b8654fc" name="check_parameter_type_code" context="check_parameter_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="78cec53e-2410-47a0-87cc-e79003938746" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d7d2c072-ed42-4bc3-8416-ae0845e30b82" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cfd21cbf-dfd9-4ac9-afad-e006f643bbe4" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7129477c-eaf4-465b-947d-25fed10e3c96" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="40a705b5-79b1-470e-8d7f-311b728f51ca" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="ba552bee-6d4d-4809-b8cd-634f04b96c76" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="166a97b5-2486-4a85-bead-97bcbf59f4b2" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="a3094c9e-92c5-42b2-90de-48233e777043" name="check_parameter_usage_code" context="check_parameter_usage_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="a27ff686-2175-4abd-a009-7f53d22f36c5" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="218c9c97-4be3-40fb-bc4d-3bbd8f5100db" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f99be7ec-c480-47ad-8175-b5245442d39f" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1df4aa3a-bb88-4155-b127-f93af7d21b38" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="64693b05-e73f-4456-94c8-93f594e99bb4" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="2a64ba9e-bde3-402e-875d-15cb31fbb337" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="f78047d8-e584-4302-8e76-f90bacf33133" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f77dc8d0-7ffd-43b0-a530-c67a98e6fbb5" name="check_status_code" context="check_status_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="afce20b1-897a-46cd-b8e3-2d7fe392096a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f02266d1-73b1-4b4a-a6d1-ce91ec3f1362" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="521813bf-34b9-41b6-bebe-f254a9dfe81f" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="778347bd-2ab7-4ac7-8a39-e16b0736ebc7" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="ce7273be-342d-4dd4-80d5-83a8951b762a" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="6066c64b-4e93-46ff-bfe1-42486028d286" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="16d7eb2b-eb61-4766-a405-505abfd87d60" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f493f7c9-6987-4112-8c88-947e37ba2fce" name="check_type_code" context="check_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="2c93ca11-8a7b-4c11-80f8-cb6a8c10df7c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a7a5e64e-1feb-4ef5-beaa-9a17a5c701aa" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="879e1ff5-b908-4467-8476-f29b9fa4ce02" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2e0c493f-3181-4563-8346-7e6a842164c8" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="130a2791-5686-4c91-b271-2cfbd766851c" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="34ac8704-3265-4c61-b3d8-ca8398cafb42" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="88d0392a-52b5-4209-83d0-bc1e3b89f8ef" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="3de8ff81-a645-44cf-8482-7a09f466aefe" name="component_type_code" context="component_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="88561958-cf31-498f-9057-1a480838baf9" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c5201bf7-c61f-463a-b0e2-cca48ab06217" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="871ccafe-7578-4266-b02b-16dbc4f931ed" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6cf25334-5164-455a-99ca-73670c08fcf6" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="93eac23d-8da6-4455-91fa-c16d6492ae16" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="d3c0dcce-b377-4bc5-8a29-ba0c9da23e55" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="512a2d47-23e3-4091-a73b-c37b1367b674" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="a6d246be-d4ee-41f5-a2c7-ed3d050004ac" name="configuration_type_code" context="configuration_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="60edc495-9108-4d46-bd27-190c0c42044a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c24ef066-7f17-4199-8ee4-6a4526968f16" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5faf25b4-e5eb-4c4d-b83c-c1617d9de30a" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4b328b7b-6624-4a93-bc05-d6def529ec7c" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="abfc7bea-c8b6-43a8-9318-f68eb1a17de2" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="c42cee08-5bde-4969-927d-0a96d481c292" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="88856b76-fcd4-4558-8704-a565e4537ef0" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="b76101e7-a7ba-4917-a099-c45080213938" name="control_code" context="control_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="54457e63-2c8f-4539-ad56-091d4ba4e32b" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9a9a497a-3295-429b-8edc-f74672db7d0a" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3ba3dec6-07bc-467e-934b-ca6a69e30e6d" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7649fcd2-2317-4e40-97de-4d2402b8f362" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="b7d97e01-8ce0-452b-8a2a-be099d4cdc71" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="1fedd767-119e-4d47-927b-83cd494b030b" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="ef2d35e2-bd6b-4d59-bc68-2321a0b75030" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f0064608-d630-467c-8bc8-2886cd2a69e9" name="control_equip_param_code" context="control_equip_param_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="36fae86c-bf73-449b-9410-82363917e690" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="77110cc7-b1f9-45e8-88f8-1860c018ea51" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c144a453-e9f7-49c5-959a-f9b1b92cb56a" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="adb71dfd-a873-45ef-818e-9655013b7d3b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="4cab7f68-d7c5-4219-9df1-8d9022a33d4c" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="8236f4d2-8630-4f85-95ba-f0f0cfb04b63" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="fce0261a-a413-41e9-82f3-707e4e91378b" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="9c02247d-585d-4185-8bd9-26582e2fb831" name="cross_check_catalog" context="cross_check_catalog" subcategories-loading="none" object-loading="main">
                        <category _I_D="cb4caf0c-8c57-445e-8e74-6901f92717cd" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4b3785a1-6a3a-43a0-9e53-00a0aea8733d" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2ac7aa9d-216e-40fd-843c-d1c6f53c6cd1" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d1ebf685-a071-46c5-b915-0a873c616738" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="82d21a17-f6c2-4d75-a1db-b45c30830645" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="0fe690a9-6320-4c47-aa5f-54b9d0b03da7" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="b98e62f2-b096-4556-ad4c-3320a54c0127" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="06e7a649-13e9-4027-baee-6e4539f397d2" name="cross_check_catalog_value" context="cross_check_catalog_value" subcategories-loading="none" object-loading="main">
                        <category _I_D="83189e89-96b8-4ef9-af45-1afb8d410d9c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c156dff8-8b84-4b11-9ec6-2a9b0f9c7527" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8806c253-41d7-4372-b56b-79a50eab46df" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cb0f8aba-8d37-4683-ab70-3a642335b4b8" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="1ad9bfa5-32c9-47c3-aebe-5706b590e76b" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="8c78a6db-952d-43f3-950b-e928132574db" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="03515e50-c82c-4525-85a3-b2ddbe4f3ce1" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="7509a007-21e5-4f61-a877-d1d3d6e83367" name="default_purpose_code" context="default_purpose_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="1ba4968d-49ca-42ec-bf4b-42335a88d63a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f20a924e-6100-4d21-9a8b-3718886daf05" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="18d106d4-1138-45b6-9989-d55184837631" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7148d84a-7097-48dc-b1ab-b0e2db0ad311" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="c3ed54b2-2dc8-447a-b87c-de7c3c6b8733" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="a2857209-0f07-4186-af40-e5d687d10652" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e883b882-69f7-49b8-9695-f916c141b8fe" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="171b6080-2a74-414c-a714-9202300d8948" name="default_source_code" context="default_source_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="2d636e25-5698-427b-a9eb-5bf1ed9d33f5" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="308a5446-c33e-4c88-ac92-95e189728fb8" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="82cd5c50-0080-460e-9c2b-ea585aa04748" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0f6845e3-fe78-46ec-89b2-d2f02e3dde59" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="bda7b768-662e-4a1f-b0d3-cb139623780a" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="b139d705-9ccc-4a0a-a613-bd7f71092c67" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="7e84ff94-9bba-445c-8a58-b5bb4a4aed28" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="ec0f8718-b739-47ad-84d0-0029d95d5897" name="dem_method_code" context="dem_method_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="c2a4e8a6-947a-4421-a072-c9e517ad98a2" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e397a2f6-9663-438b-a0e9-f10d2cd3ec62" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d790b0f3-c58c-461a-a633-cb46520ee37c" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c66e226d-37a4-480c-94d7-fd814944a07c" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="20c619d2-ab44-4030-8830-137e291d4d20" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="4124929f-2030-4b8d-8373-3efeb272b9e6" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="8701982d-f57c-469a-bbb0-8b0e255412e6" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="3abd175d-c211-461d-96d1-8fbb8fb8991a" name="dm_emissions_user_code" context="dm_emissions_user_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="f16bd84c-8352-4d48-a088-7492ec1a0635" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2b007178-e330-4f6e-bdb2-3090243244c0" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="08550857-493b-4bda-8ba4-b6ab646a54a2" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c08470cf-4076-4a21-a171-9cb9deda1a4b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="c3f0d2ed-e1dc-4c19-a43b-053ae0547615" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="ebabe379-0336-4a80-87ef-36f89026e690" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="7d4bc8e0-102b-4198-b85b-f4205cf4e8fe" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="1dcc6f76-090a-488d-a2c3-223d2958506a" name="em_status_code" context="em_status_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="eb8b7985-f683-426b-b747-61e19f8a6667" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="17c8fa50-941e-406b-833b-17ff8b27a124" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bf32cd88-f616-46c2-9f45-949ccfb046c6" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cedb415c-d82b-4f82-826c-52cf7bd71329" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="8be70ed4-eeff-4797-bf1c-95a03d73d734" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="0dfac2fe-5518-4a38-b7ba-4985946c9928" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="be6b3ddd-95ee-4f89-b43f-2c0d3624ab50" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="ac378a12-c3de-4346-931d-beefb90e8307" name="em_sub_type_code" context="em_sub_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="c5dd84e6-6086-4952-8ba8-4bf36307b9d8" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3c4cd421-99d6-43dd-9b38-c1fd5d12e291" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ee98dc02-92d2-403d-b0d5-d9ff14a96f4e" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7a979565-dca7-40ee-9475-28742bb53bb0" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="bcd20e21-191f-4d2f-83c1-4c8fb0ad71f2" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="a5d3596a-83d3-49c6-b94c-43598c93bd9b" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="898350fe-3371-4ef7-a2ae-44fb7c0d2bcc" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="dcfdd2d2-9e13-4fea-a4c3-bb3ee97498a2" name="equation_code" context="equation_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="990785a9-bada-4bf7-a99b-fa1f9a7a2b20" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8f4d0f34-a9a0-40ea-9030-91839019f29d" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f734ccb7-fedf-472e-a589-f9682782787a" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5e66b1fb-5ba7-42e8-9da9-fd4b049dd1d1" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="7a8a427d-6840-409f-b521-4f11a655d306" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="1fcb1621-e2a5-438b-89de-194a3ce9837f" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="78b0fca9-775f-434d-9667-40c8c6756e61" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="b9a403d3-cf3b-47da-89a7-bbbe7149d44d" name="es_match_data_type_code" context="es_match_data_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="dac0b0f8-56c4-4889-9b8e-db3d3fb77c65" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="885cc1e4-9955-4ce3-bf61-4dc56f8defa9" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f73878a8-8235-4b32-8f1c-236c9155d270" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="af7d8d40-17ac-4de6-9e74-dd86ec345ae6" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="95c431be-ac9e-4054-934b-0e12b42b0efe" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="bf5d72b6-49a4-425b-97ca-df091faf4ff4" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="8b755cc6-1dce-4141-be9b-b935b92e53ec" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="0ce92046-4869-4b19-80dd-cf5f557e6853" name="es_match_loc_type_code" context="es_match_loc_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="7ef5ed6c-1213-42f4-9f6b-a360426e4048" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d87cb201-fcf5-4c22-a111-46f2044c9692" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="78dce8ba-cd74-4602-a2a9-f1c148a90423" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="62c5aea8-e5af-4a82-b88f-8b5fcfc24f5b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="8b17e6ea-c8c4-4944-8622-330bea6a4be8" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="b70a0a39-ca16-49d0-a573-a1b0ff025750" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e539b275-a60b-4637-91b0-ab307f01da14" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f4fb9206-f8d1-411a-ae80-3ced6e6f71e2" name="es_match_time_type_code" context="es_match_time_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="d94830b1-b5a1-4318-8aab-bb6c46b6a409" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ce124b99-4ffe-46cd-8cd9-2c8c8a59c9a4" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="670863b3-adda-4f2e-96d7-b4f844b81981" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="980c2f01-2129-4c64-ad33-dcae60982ed7" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="ff2274f5-0d0f-418c-80cf-61257276b6f3" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="4b3ccf64-4f61-480b-bc96-1705ecc42be6" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="f1ebc236-fe23-43c3-8596-d0edeaf832b4" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="fb1b1678-5bdc-493a-a94e-e5fcfb7cb047" name="es_reason_code" context="es_reason_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="6719a1fe-df48-45be-8982-29cbef8deed6" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bdb5ab2f-0c37-44dc-97ff-308183a5a664" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5ea7a033-8276-49ce-b447-89a3c2e6b155" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2e5f16ac-14ed-4892-b6d1-b98a040522ac" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="4d47155c-1076-4033-ab9a-594c10295f87" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="2c0f462f-7127-4183-aac9-52984d0bc820" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="da9dcb9f-1606-46f7-b339-99f157fbce5f" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="0bb9fda3-2377-4959-864c-e8e65e8cb77e" name="eval_score_code" context="eval_score_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="5274ca49-f4e2-4905-8437-6c5d7c0159a2" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5be0a000-2552-46c4-ab9e-c6d8d93b4961" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="107e672f-9bae-4b6e-b28d-7fdecc611da4" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="683c30d8-9aee-43da-a602-2aa3496b8b8b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="de2449bf-9c80-4229-b452-14c0b6d3a420" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="6b7f2790-a25f-43cc-9feb-3c8dbc42a824" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="39304304-bedb-4686-b9f9-12eec51aeec9" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f66d8144-3f3b-47a8-ba1d-dff6a8d45427" name="eval_status_code" context="eval_status_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="18e8a124-2ac0-4115-aa45-e3fecb5df82f" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9322b072-64c2-400d-b708-bd59936b640e" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2c1c28ff-6393-47a8-b8e7-28e148026665" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cb1325af-a8bc-461f-ad45-78f5543f61fd" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="9f2eba3f-f824-4e1e-8e38-df91d8977f5e" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="b136322b-d291-40d5-a66e-b3f59160ecd8" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="b92ddd02-170c-4483-bec9-6e2873cff542" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="7c4ec298-d864-4018-8634-db134888d86b" name="extension_exemption_code" context="extension_exemption_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="ea71ed51-ffc0-4f57-8e07-46b202dcfcc9" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9d1eca36-2628-493d-8ddb-3200371a4a99" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="947a62b4-3333-4b3f-9e67-94d0eb4df378" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9d86a389-2b59-488e-89b1-649edd61782d" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="1498902f-d91c-4fc0-b87e-e8f28485389e" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="5164e146-fdeb-499e-a12b-831823519418" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="d4fe9eaf-fea2-4cbb-8b00-dd85950fa7fe" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="bd15ff1e-8f12-4215-8ce3-d2ab44307a07" name="file_type_code" context="file_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="113afaea-73df-4021-b092-0fd26a2ff87a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d61c69d4-08d1-401d-aaaf-07a65be48f4f" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bba7a5d0-8aeb-418c-a909-7ac7a1e2ae1d" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="dc8a2a9d-c278-4583-b181-b2b560cadad1" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="9d1455a5-e3a9-41d2-aae6-1bf3dca187a5" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="6b536466-b7eb-4b0f-a5d1-c25bb70ad45a" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="fd19b48c-897a-4d12-8f20-3c9d18da39c4" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="485da8a8-06cd-481a-a12e-80c478cec27e" name="fuel_code" context="fuel_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="5a7b40ac-4846-4fce-b61c-7118e0717d5d" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="811daa12-11a9-4a53-9b60-76389aefaa1b" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="443fad36-cbb5-4d42-b78d-3bf891a0139e" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2d392f1f-394e-4fba-8c22-de3eb8ead4ee" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="4e652e74-ed84-4010-b85a-a27973b3f9d7" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="52373363-19e5-4405-a98a-3c72c7786779" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="af79d9f2-1ea5-49a1-a520-d90d168c34cb" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="20f85762-1d61-427b-ac63-220f975e31dd" name="fuel_group_code" context="fuel_group_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="e5e54bac-e155-4c0a-b94a-f8b53caec216" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b933c19e-5753-4dca-add5-379e3ad4ba73" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c57a43b0-a91e-4d20-a82d-1390c5066342" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a3e3d7e4-bd2a-4012-9c23-2d1d7a795fbe" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="eb62239a-6a6a-41b8-9cb3-fa4a35f90435" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="8d2d8059-271a-4cb0-89e7-70c46b32c7d2" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="c4e279b4-f963-44b7-bc3d-d888b79eb44c" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f0149c8e-8f15-43aa-a0f6-541c0871b204" name="fuel_indicator_code" context="fuel_indicator_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="abd0bc7c-f834-483d-946d-c0d44e5a8336" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8866a7cd-bfd9-4012-b96f-9ab4f3b45e06" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6ff1d38b-dc9d-4f44-94b6-64ec959d1c2b" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6bd7f184-2696-49de-ae7a-544dc802b9cc" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="3a9f42bc-299d-485f-b3bd-84b2c9558d8f" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="d4d04bbb-65ce-4d46-8d56-b4ab44c93cf6" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="18c5b12a-e1c6-4bbe-a242-e8fae7ed1032" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="3525ca72-dcf1-4ee7-92e9-e798d849b137" name="fuel_type_code" context="fuel_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="64e291e7-602c-4c16-86bd-0e72ae770cc9" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8b56dbe5-c058-4950-accb-49742d3c774d" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="168a1759-9e8e-49f5-92a3-f3abb6e5980a" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4a0ed152-35a3-41fe-91d4-099dde463299" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="0f452291-d104-4a3f-a5cc-d033d9641531" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="75af84a9-4f92-4580-8ee8-1c97bd83fac9" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e0e1c93f-efb2-4a26-aa72-58ec57a0d216" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="e362746b-cdea-4489-b95c-72aa92ac9b89" name="gas_level_code" context="gas_level_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="b925c1fa-c1af-4dfd-aa5a-467334863629" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="2837bcfa-b5d7-4031-a008-cc611d2a7821" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5fee6da5-e288-46bb-87f6-5948b0907a89" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5aea7d4f-6322-4590-b076-5df4506b63cc" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="ba2419b4-cea0-4a91-928e-b06770fcfd0e" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="cd337f48-6216-4855-8ee1-61e40fa537f1" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="d11f0879-54f8-4c58-836c-ab2e61e670b6" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="6d3db4bc-180f-4c38-a6ad-3c5f8365954a" name="gas_type_code" context="gas_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="2e1eed89-30e5-40a3-9955-d59490943a70" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8c1098e1-baad-45a9-af72-e458ec86e43c" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="eff6c782-948a-47ba-899d-b58a2a250532" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b6bdaeae-f506-4f45-ab0f-9f98dbb8ffde" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="0e399f5e-9f24-4bb1-bda2-123e850aa1ee" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="51550d02-fa6c-4c6a-8877-a624690ee128" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="3053b313-bb88-48a3-91fd-818da6f9a58d" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="d57f74f0-2e54-4c94-87d1-5f47bb58fb12" name="injection_protocol_code" context="injection_protocol_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="fc847dcd-91ad-409b-aca4-c8770c16518c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6683d99c-d637-45f9-9a2e-d1544a69e1ca" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ec1c34e3-6368-4ac7-8835-1f8f336f469b" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6c07ab52-c001-4cd7-9e2b-50cabc020124" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="befa1c43-c926-4f74-acb8-e05bfaa4ca41" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="2d540c2e-4469-4182-8b34-11b4845879f8" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="5686d89f-a9ec-45ac-ae4b-988a9a5eb587" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="da840f93-736e-4b92-91ec-f7ada7bc2c8c" name="material_code" context="material_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="59c27088-df7e-43da-ac46-675ab197f19a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="81a62e3e-999c-494d-b19a-94c4a721c30b" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b0b9c842-5fe1-45a2-8385-da8f46092134" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f95bfd10-0508-4334-a48a-cdd224dd5e4a" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="ba864be1-9a5e-4d80-a906-f8c5ffe35f57" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="7cea59c3-6b2e-4c26-80ff-b29f3bb772c4" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="14428b51-7154-4576-a962-32c9526ce304" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="1340f845-2f06-43ee-89af-c1984e2d6c81" name="mats_method_code" context="mats_method_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="bb8873a0-45c0-4005-a21b-258c77eb52e3" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a45939ee-3629-4bf3-a3dc-c375610cb237" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d42f2788-5108-4ba2-8d83-300532162312" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="060cdbab-98df-4b34-a4d6-f803ec88d7dc" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="491b86bd-d911-4199-8b18-50fa81eb2ef6" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="d5349c66-18ca-473f-98f4-bb435b89c38c" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="470569a3-5a84-4a10-b0cf-fbeafc232f7e" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="81affe46-f03d-46f8-ad3b-4dbdd377ba0b" name="mats_method_parameter_code" context="mats_method_parameter_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="b129c4d2-551f-47ef-b6b9-4cc46e1f736e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="464cbc81-b47d-4240-a80d-abf4a9c01877" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1c38e143-ad89-4c02-b76a-17a3fb6ccf18" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1b704bf2-71bb-4faf-9b8d-d4a473c4b31b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="d1f541ce-0195-46cb-96e3-28c808662e6f" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="580ff2b9-ce0c-4004-9a04-78969ba78cb7" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="999c9f65-42d3-4ac6-b2d5-e10079d2043e" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="e3b9b0f1-6e67-4e92-b99e-090c3a8c9fbe" name="max_rate_source_code" context="max_rate_source_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="93a8a09a-343c-4fec-b7e3-b5d0094f7a81" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4f356f9d-d97a-4831-806b-34220fb808c4" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f4889728-4946-4218-8836-f3f5b561eaca" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="24f321f2-0983-4a28-8f16-e3be6a155c3f" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="06dabb81-aa0f-435a-ad23-6a1b7d9529e7" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="a3b09f2d-cc8e-4d1f-bf4f-eae05f6445cc" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="8b6b1a6e-8e36-459f-ae9d-31949cea4008" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="9e64c59b-fc8c-4c32-9d1d-d60f9fe8b5e0" name="method_code" context="method_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="300038af-11b7-4391-b14a-8253c2992e24" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f8b77b20-503b-41f5-acd4-8f2e1a9ca040" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="493c88c2-e303-45eb-ad23-a3b73d9b5ede" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b21069a5-e7b8-4a30-8ba7-c28651dcc724" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="a416e7fe-04fb-4d50-82ea-5602ab893abb" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="b7c6caa5-aa39-433e-b629-edaf72b1540b" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="3f0ebc4c-59bc-4b35-aafd-f85baba600db" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="0afbb17a-9012-4c79-ad32-50e7a86bb7de" name="modc_code" context="modc_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="e41c0754-083e-4282-8720-92b3d8f4cdaf" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="611854f0-353f-4dc1-a2c3-494151da8db2" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f88bcb76-65ce-45ad-b79c-b26ca13c969a" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c8e34bd1-95fa-40a1-803b-e22f27447caf" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="2f3b15cc-7da5-4906-b107-34432de1341f" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="c6a2c0b3-89f1-42a1-861d-6f7e8530d501" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="3f73d8ab-31fd-4c6c-813f-10d38dd2338e" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="82b66a85-f8a0-4b8e-af87-b13c99f1d568" name="monitoring_plan_status_code" context="monitoring_plan_status_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="b4361655-6012-4be7-a6c1-97d6edf8d2aa" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="dae6fa45-141c-42c7-823e-c1b85c3f9820" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b1c6bd10-5741-478c-a659-c6596af2f8e9" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b087e252-8bf5-4c1e-8baf-777f9a31c3da" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="d5095bc2-d8b8-41a2-972b-4284829c3fe8" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="72df5ad8-4eea-4076-a43f-22368cc78c89" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="99d49323-ee35-409e-9e27-39f39e5b7b27" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="ab4c338d-282b-42af-b252-55b8f3d8da4e" name="op_supp_data_type_code" context="op_supp_data_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="505de21d-8786-449b-82c0-0288a4dd0c4e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fde4d395-010b-4999-9f9e-57a2e294b4bd" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9edd016c-7763-44c6-8e15-b1adac71e8cb" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8541f9c6-8154-4f4a-a953-d6cc0dc30e84" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="81a8d496-8c75-4712-91f4-f08fb1a38649" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="e6dbdf14-9d7d-4a2e-a120-9d1c2d6769b1" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="cfa53e95-c2fe-4533-af3f-e5058f0eee69" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="006f304e-6b66-48bd-9a4b-a499e99b17be" name="operating_condition_code" context="operating_condition_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="4757810b-4132-4cd0-8ce2-3a3c0044190a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="da7f3eb8-077d-4308-9cc0-768e061c6ae1" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="488a062e-12d6-4a73-88f8-b5724190defc" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8e519bc4-632e-4f1d-8293-eb744bc2f1a2" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="497cf448-6937-4206-997b-0ba0167189b8" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="698c681f-696f-479e-b507-3a67a5bf4651" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="5216299b-3d74-4e07-a85a-8f9ace795f54" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="00146268-1eaa-4c3b-870c-0ed6c154ea92" name="operating_level_code" context="operating_level_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="8d866d28-32de-4e02-84e6-8d9ac0ad9b3c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="08e878ac-eec2-4592-9d50-2770fd6dfa50" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e0969b30-a44c-4a75-baef-0324b2a6574a" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="625d63db-3cee-4e5c-818c-3dc8f80a26e4" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="d081a381-949e-432d-93c3-aa5afdc7eeaa" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="62d08272-b429-443f-a32a-eb6692acd397" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="415f9209-e819-4810-b608-bd622a2c7110" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="bde64d29-ca80-4ffc-9ee2-d07803659f24" name="parameter_code" context="parameter_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="8ba3ca44-6ad7-4952-89e9-a5eb1fcc9235" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="daf37760-206f-4abd-9fa3-8e12ce1eb939" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7014827d-d687-4193-a886-b1e11fbbae94" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="64f2ff31-b098-44b1-8309-d0fb83feb16d" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="0bb7e816-972f-43bf-97a3-4cedaac67b8a" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="a4338be5-b79e-44a1-a114-aac388ae5f20" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="725d9a51-9839-4f04-85b8-9f388ff3b614" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="054fca5b-39ae-4cb3-b7cd-a62f3bd3a92b" name="parameter_group_override_code" context="parameter_group_override_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="933fd9c2-a31c-4ebf-9599-317666b10092" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f7630bb7-74a1-48bf-9b13-0e8f7fe16511" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="579bf3fd-f234-4aa3-b42e-854af623972b" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="85acc42b-97cd-4dc3-b0e7-ac227f3c204b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="79e152fe-862f-48fb-b702-408fd9fb8ae9" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="2189f135-bd94-49c0-99f2-ccfe6c3a243b" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="d5b012b4-2fa7-4c2e-bb50-1f6cde4937ec" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="24c2f377-d2c3-4789-b6c5-f018ab72d991" name="parameter_method_to_formula" context="parameter_method_to_formula" subcategories-loading="none" object-loading="main">
                        <category _I_D="9e2c6381-ac1b-40e8-a10a-a8d0d8d0bb29" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b37aac0e-8653-43dd-bf53-1ac33db51654" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e6168ef1-550b-4a6c-b2f9-fa677aece932" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5c4df96b-d63f-43c5-a350-9d6d35f3bb82" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="1744fa4b-058e-4669-aed2-7ee3480220cf" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="e41c95f7-72fb-4d15-9297-aeccd985ab39" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="036a7fb9-b546-484c-99d4-d71f690aa402" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="32e58f76-43fb-4c4a-8c52-377caff4b2ef" name="parameter_uom" context="parameter_uom" subcategories-loading="none" object-loading="main">
                        <category _I_D="1f3666aa-0f29-4450-a2c3-29f6cb56a6a8" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="58fc1667-a076-43c2-95c7-586c616effed" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a58ae593-6cc7-4216-bc34-cbc6f2e6d734" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7abfe0d7-95e2-4042-9c13-71c12ff9542b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="6840d3ff-0ed5-458a-b1f8-4ecce2cebd21" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="15a5ae07-3ab4-47be-b6f3-f25ebc3825a9" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="d5075cb1-8b9f-48a4-8285-111a4842579e" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="6831f158-39a4-4723-a853-a8570c3d3856" name="plugin_type_code" context="plugin_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="2390b26f-d469-4581-bf92-2161ffb3ac1a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="72179833-45d7-4be9-a2e1-cacf52377c54" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e4e4a465-25b4-454f-8618-41c7bd02a3a3" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="42f6f794-99be-4eed-93ce-92cff333fe79" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="f19b7512-8294-4697-9ff6-b163bc85abe4" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="e3ba20c1-d6fc-4aa5-8454-916317abb90e" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="8755f681-739b-44d8-a796-44a8a231b693" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="0ffcb6d0-5b31-451c-b778-7103cfcc2694" name="pressure_measure_code" context="pressure_measure_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="2a5f8d39-b1fa-4762-8c1b-233503a93020" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fb3a2d59-c4ec-4902-9bad-e9aea69113cd" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7dfc3cbd-8399-4693-a820-b97991c21cae" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d9c2b9b2-ace1-4ef2-b817-eb4547870b79" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="163c465b-4b08-4bb3-be59-1905209a79cb" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="8e194e04-1e61-4985-aa04-1b9b8f2ad4f8" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="424e9560-e3fc-4c31-aa1d-c5570e56beff" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="afd3ac12-02a9-4be4-bcad-fdfd024dfc96" name="probe_type_code" context="probe_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="17b33bfe-8a0a-4a6d-9962-51d68434b61e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="443983fd-f21e-4194-aba3-4d415b437543" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d4d91377-3197-4cfe-9222-833528975d19" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fea45e13-b2a0-4a38-a762-973e3b062c02" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="635ce574-a397-4d5b-9c5b-819135726ddc" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="86c5a35b-47ae-4671-aa18-5cd67c247b88" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="dc04a68d-b2bb-4550-a533-9b7d916206bc" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="8f025444-bc59-44c9-bcd6-952a157c46e0" name="process_code" context="process_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="f1a0ea61-c7d2-4cea-a735-3a99026282fc" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6a532d26-0391-4f84-9c50-6244e648bf02" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="84e96847-2f6e-4803-bcdb-5d75fa55401c" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7bd88fb6-0743-4fc9-9770-24be670a5b6a" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="c124e6e9-5411-47e4-ae3e-9ca07ffc88f6" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="f2c80f91-f260-47a5-8622-132ff0d9d39f" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="7908d866-c682-4a50-aa61-9fc374435144" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="ce9d93fa-c2ff-42b1-abcc-e189fb8e1c01" name="process_group_code" context="process_group_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="3132396f-feb7-4084-8b7c-c514f94ab7c0" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ab9b02c7-e7df-40bd-b26a-e9f336fe3f6c" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="28ee2337-2ea0-428a-b2c9-0c972e08e2b3" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="88d4134e-158a-49c1-9a93-ac50989922da" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="fe6634ad-94cf-4b90-9d85-d46c253b303a" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="48abc7a3-0e36-4cce-b575-84f82ed4bdb5" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="317006ec-f147-41cc-90c6-ecf46a651d75" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="e727cdb9-cc82-4353-a88a-8f248194702c" name="qa_cert_event_code" context="qa_cert_event_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="d44ba9a0-0699-4a74-80dd-ce403e11cf2f" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="619ab07d-6912-49fa-bbc5-613413fc2dcb" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d55bc35a-af8f-46ea-ae82-10ac40eccd2d" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1699a2c6-2dfa-4545-a04e-aca703f6b982" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="455346f4-ef52-4230-a140-545897fbc9eb" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="f16faed4-fa59-4117-8372-58ae919c101e" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="844cd1e1-0d29-4bb4-96a4-7ef6b1cd85e9" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="dea5ee0c-6643-4a55-9c85-d15ca030315f" name="qa_cert_event_supp_data_code" context="qa_cert_event_supp_data_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="32574c94-5f9d-4f30-b377-e4d39673e9a0" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6b5ba747-748b-46b6-a2d1-8d5c6edf77c0" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7b3e085d-10f9-4fa2-a4e5-61900b60c5df" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a33e4e9f-2e35-4c07-b705-186ade17342b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="b8115f56-b17b-4fbe-8b8b-865782982dd1" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="3c43e5df-5aaa-4599-a503-97d37ca493e5" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="6e1186f4-8d6b-4e6c-aa26-9e0d6ee80255" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="41ef3d15-9ec9-4b62-b429-b3f7d9c2213b" name="qual_data_type_code" context="qual_data_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="93d852e1-595a-4d22-bfe5-bed2dd9d511c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c9f9b4aa-7508-4583-b959-28e3f658293d" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="17423fe1-bc12-4288-862e-d604ffe6dedb" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="84414109-7cfa-497b-8c38-e5440a956459" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="ef06ac59-a448-44cb-a7c0-6f58b50da476" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="b520f928-b8ee-4440-8242-7fec959801c3" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="826b5135-45eb-4772-9b77-fed78d025e7f" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="8a6c6a18-c840-4a84-9d3f-b507d91587fc" name="qual_lee_test_type_code" context="qual_lee_test_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="7c43dec7-16e2-494e-82ed-73c73d6799df" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ba972ab6-97cf-4359-9628-e5e958e83656" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="302ad1d4-158f-427f-89c2-9849c011a9e3" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="75f01c3d-be94-41e8-ae5f-53fb1411556f" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="577fd2f2-04a9-4de2-a30f-a70e20b78986" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="3ef48eff-b01c-4bf8-98ae-2e93c63a7fe2" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="ae9269d4-9dc6-4daa-abba-7fb8d749bc8a" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="5bc8d556-d782-4969-8205-6d00a4889c6b" name="qual_type_code" context="qual_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="26fafc09-bbd8-42bd-8044-9cf3df243844" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4fa1f749-bcf1-4ba4-b886-ea64f7997b9e" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f90d70ed-611e-445e-aab1-99c68c7915ab" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a9c6892e-3e4e-43c8-b6ff-d5cb49a32a33" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="f04d8d49-fc2b-419d-bff7-d0982d7e49bb" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="f8c90074-e3cc-4d13-b6fc-1e39df52a914" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="56943b79-8565-48b6-8796-af81c9747110" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="6fd394d8-99b2-49d2-bb91-810b6a34f1da" name="rata_frequency_code" context="rata_frequency_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="cc995ca1-4dd7-40a4-b0c8-31bc7be7cebd" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="19ffc06c-6f58-4ba3-95ab-7da6e1475040" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="9cbd9611-9f3a-428f-81a6-62354f47d996" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="db00f4ad-55de-46cf-bac1-29723bc80368" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="74571bce-5089-442b-99b3-888413c8f1de" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="652257c8-4f44-4fbd-9f57-f70cdfde42ba" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="1e72cd47-9922-4db6-9559-fcf5541880dd" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="78d50758-5551-4a57-bde2-375410362014" name="ref_method_code" context="ref_method_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="94980d7c-9a64-4a1d-a822-95e53f183009" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="09c7104a-23a5-4efc-93d6-42acf710859b" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3a5c9f0e-bb3a-4865-b326-cdb32926daca" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5fcc6925-603c-4ef9-879d-89c6a7474107" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="2192112c-51e7-4d5e-a455-3394c7611a4b" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="2debd259-1779-4a0b-a9ce-d1693a9eeb2b" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="632184f4-4b92-4e5f-865e-e5bae49a3d72" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="0a5e6244-375b-4ef9-b5b9-b80b1bd21926" name="report_freq_code" context="report_freq_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="2305f07d-b1d3-49e2-886d-09b634a6a848" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d1e617c6-8a8a-4cbe-8d33-6a356132f213" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="5c622627-91d2-407a-ab5d-92645963b592" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="631b4730-5058-4e70-9bbb-e54aebdd4989" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="de19ffa7-fb91-47b3-bb4f-f4f736f677f7" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="b81b6d17-429e-43fc-bb9d-c97520f81329" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="d741a4df-7ed6-4769-86b3-23d86981faf2" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="2095c1ec-8db6-43c4-b124-102f4fa9ca0d" name="reporting_period" context="reporting_period" subcategories-loading="none" object-loading="main">
                        <category _I_D="0d989125-2716-4e5f-9e26-73a3abe35078" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cb39053f-2633-4fc5-89d3-a6863978313b" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="042dac0a-df88-414a-b6f4-4063fecdfbc3" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="1958649f-66c9-4cbb-9014-8d5a879100c7" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="78dc6567-b6fd-4db8-9557-e9c7eb24fc79" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="cf87cf41-5e57-4e01-a090-c355d298cfcd" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e21cf591-c236-4f0c-8ec3-64f8c1093eb2" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="647ae51a-e795-42dc-b2df-7c926dd7ac2c" name="required_test_code" context="required_test_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="53ba7723-6722-4134-8bdc-cee18df0ec13" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="817c1311-f1f6-4103-9a9f-086681934c8c" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a7f8979c-552f-4eee-b3ec-887c5106a459" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8f00c558-d64d-4e4a-90da-dd2bcd673fc7" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="65413af4-09db-4c67-88d4-038fd5052a98" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="400baa6d-cb20-4488-b226-23267f1dc84e" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e2385008-3c9f-4cc8-96d8-a1fc5d6eb084" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="629370e0-346f-45bc-832b-fe64cd80c16e" name="response_catalog" context="response_catalog" subcategories-loading="none" object-loading="main">
                        <category _I_D="d2840735-6ac6-4f01-8638-97e77e608573" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="44983c56-d2b5-48b8-b0ef-af4f3350a5f9" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a40e6aa4-97fc-43e6-975b-4c90bc1a0901" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="08acb92a-1369-4fe1-b5d1-6f98a9d3cb0b" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="92f73d96-a6ba-4131-9b28-1c387dc3c742" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="0c814a1b-9413-4e22-b43d-cc7f480ec687" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="52d6cbb3-a22c-42b1-96e9-62a113c7bf0d" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="becb9717-f26d-45ac-a8af-0092ceb0e6aa" name="response_type_code" context="response_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="017bdb8b-cb69-401d-b93c-7708894176a7" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="21c5f1ed-ed71-43c1-a132-7d256853f5dc" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="576312d3-1d39-4356-bdbe-f80a910c5c60" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8a089f9b-55bc-4b08-a768-4c6324b14a6d" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="e3cbd21d-1450-4f61-abbf-7a0c1c3eb19a" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="3f9310c6-5f86-43c8-8efd-9b82438c9eb0" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="5643a5ed-ba6a-4861-b8bd-a326f87208a6" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="e6d18964-7dc0-4bfb-af9a-2bf32867b911" name="rule_check" context="rule_check" subcategories-loading="none" object-loading="main">
                        <category _I_D="c27767a2-3457-4ad2-85dc-90ad93faf338" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b641784f-d8a7-4b56-8a16-c929a0b9ac51" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0830c004-8bf1-4266-9c68-28450119d8e2" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d34ae856-8e15-4792-bb16-7eae6d18d155" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="3"/>
                        <category _I_D="c1a7f7e1-56fa-43dd-9519-5d9a4e2de7c2" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="2"/>
                        <category _I_D="53bacba1-9ae1-4b00-b601-3b0ee85c1531" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e9ba162e-a7a4-4cac-920f-310ea948d0d8" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="3f4d15bb-9fe1-4322-b49e-99a3dec08ace" name="rule_check_condition" context="rule_check_condition" subcategories-loading="none" object-loading="main">
                        <category _I_D="ce93aad5-fb28-4eeb-9efd-64db52ef15ce" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f66e6b14-ce3c-4826-9f55-96439c65047e" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="83fe369b-b170-45fa-b2d4-7fdeaa4544e2" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="721bb7cf-54ac-44cb-ab7b-edaf50fbd354" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="2fc7049f-e80f-4097-a8cc-384bacffc986" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="82f40d72-1d46-4b26-83b5-5e4f4ff90b39" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="ebfc3a96-0b02-4b06-b626-ef505c49a373" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="d3e50081-cf73-4e88-b9a8-573b5705f86e" name="run_status_code" context="run_status_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="23f75fd7-f08c-400a-b71c-1324dd4a0a01" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6316c4c1-ce65-42ef-9ba5-e5a2c52d9026" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4cebb394-4ae0-455f-97bd-8dba5d28d86f" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="485ae1fb-e35e-48f1-8675-f98399dab3dd" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="12d6d5c6-8fa0-49a8-9165-9e43d00b0545" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="bcbf554c-1090-4cec-a41e-1e7f52a25863" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="c2f00479-9ce2-41e7-b9bd-be292a3db961" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="26dc6c91-5bed-4844-b83b-79ecae952ded" name="severity_code" context="severity_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="0ecbb9d8-85a1-4b65-a9ff-881f79927293" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ef673aa7-e2eb-4f47-9517-4dd9c005d998" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e4148f94-dfe3-46b5-8673-35cd4b663d8c" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="38608205-bbbc-4b92-8cf4-57963c62df05" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="4"/>
                        <category _I_D="4d7e63f0-80dd-4d7b-b061-d2df2515b16c" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="ae688534-137e-4208-93a6-0150469dc98c" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="06a8a09e-35e2-4716-9bb4-d7d658920c3f" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f8eb9915-5354-44e5-a15f-eabcacd48a8c" name="shape_code" context="shape_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="46f6e92c-5c26-4646-b58d-3fabe49b01f1" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7da06feb-9776-4567-9611-4f6970e422ef" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="605685be-6a68-4ec6-8508-209c7f515f81" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bbd8ff01-4309-43f4-b8aa-61a545bbcb59" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="25f9ee56-9079-4cb5-a0b4-fcdc8f238cc8" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="8a01a359-70c2-430f-97d5-f92ca6467013" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="f9816efe-8c7f-4ed0-bc45-c936159b6820" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="ed6f007c-eeb4-46c0-a804-804fd55fbe4c" name="span_method_code" context="span_method_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="f7b6e73b-e78b-459c-8b6b-a5bb83676b9e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="f6a74d6c-9f86-4ea0-9e19-1d7e87add4d5" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3db47ac0-2c0c-4d5c-aa35-5142ba67eac3" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="09fa0522-7635-4e92-bc3f-7404c7990279" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="17521847-a808-4c02-a6bd-6ce431569aee" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="8e685f90-a178-4d8b-8ded-0bac49fdfae8" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e5175930-39f2-4cad-bf06-88790e0dff0a" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f0387243-0af0-476a-93b3-7a744cecc682" name="span_scale_code" context="span_scale_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="1c934507-97a9-4a93-a209-0f2098543a8a" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="ceedfddb-3c79-4b99-a0cb-042938a1a531" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="37ba6621-62b0-416f-b5df-fc816bd05a53" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a87d78f6-7617-4481-a935-9aecb118b74e" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="412ce9b1-a2b0-4eed-ae5d-dc5023bad241" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="5de14003-22f4-4bc0-bfe5-77453d30b69c" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e5f45697-059d-44ec-98dc-8c9e31d700b7" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="32b10e0c-0cba-4b8e-9b1f-58b455540ebe" name="submission_availability_code" context="submission_availability_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="4d72f3f9-b9f5-46b1-9c59-efa1e37eef68" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6a7b9cd9-4f88-40bc-aeb6-1a43c3ef13d5" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c9b7a2b1-0b24-438e-ae43-e180a654b3a8" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="097963b3-f78b-41ff-8e1f-28a012888fb6" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="ec56978f-f6a9-405e-8866-0b1cf740fc55" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="64a91ac6-2fc6-4fe4-a471-6c42f393d17f" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="b838aa65-89c1-41e4-af36-fb592dd153c8" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="c00247da-e11f-4427-aede-d7fb4e8f9c83" name="substitute_data_code" context="substitute_data_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="bb67c106-fe90-4e48-be30-58129c791c6c" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="216ebfa3-9d7a-4104-b2bb-82d3b6683a2c" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c3a09358-5379-4fbb-b5e3-08057a8b6e49" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cf26afd6-7172-4300-a833-6d1a89903f88" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="dd130047-c186-409b-be67-1b5b58704532" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="43952fcc-49a1-489b-895a-ea48bf323235" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="9e5dffec-6631-4553-b997-1d574778dee7" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="71d43f14-83a3-4ab8-9378-7e76b029a6aa" name="system_designation_code" context="system_designation_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="e55135ee-a76f-4f3b-80e8-76b6745762bf" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="cf7685bd-9aa5-4122-928f-43f194580f0c" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7577ac87-c431-48e5-a807-12af7d2ea00c" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0bd9240b-5888-467b-88a7-e63f4401d949" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="2e5485ad-b7c2-4692-bc63-5cf6fd7aca8b" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="9a869213-41d2-4a48-b52a-434c28276c87" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="769358b6-96ad-4647-ba12-85c8bca55f59" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="aabf6ae2-ba15-4261-a85e-b5f3dc8f4974" name="system_parameter" context="system_parameter" subcategories-loading="none" object-loading="main">
                        <category _I_D="65f4ebe5-ad4f-427d-a8ba-9bddb0406321" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="254a839c-811d-496e-900b-b1c9124e5ee2" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3676e64f-1e57-41eb-8415-d7ba8b326094" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d50616ea-1087-43ff-b5ca-33bf51c043fd" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="a62582eb-416a-4bc7-8ca8-29af4a052a5a" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="c42817c4-1987-4413-aa90-cba4bc6bb8b2" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="28d0b03b-1a20-42c8-9186-d7d1db1fd875" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="0b73a37e-4625-4b4a-8d7c-2fef430d9026" name="system_parameter_name" context="system_parameter_name" subcategories-loading="none" object-loading="main">
                        <category _I_D="a973885f-18eb-41d6-b308-ecb9b8b1c399" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c16d8b31-8091-4256-9c35-837b5693921a" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="e29704f1-afd7-4c1b-8330-4aa30757e188" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="93b24830-d667-41f4-a22d-686d8fb6d1c9" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="93035f1f-2905-4e4e-a668-0e15d761dbcc" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="148af1c4-0a04-4aeb-ae1d-9171dbd14842" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="134c16cb-ebc5-416f-99e9-86d05569c60c" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="5f4d500f-3f0b-4fe0-b013-a2e8ce3768e8" name="system_type_code" context="system_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="89e8b897-f328-4706-9dd8-80da0c13d025" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8f613af8-0f85-40f4-b396-e4a03e999d45" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="82fe6c33-ff04-4078-99a3-bc1b22460478" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="69a54d67-b7f9-4cbd-a2b7-79551a687072" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="2"/>
                        <category _I_D="5e574532-3c57-4c57-b706-75fd75191f21" name="Indexes" order-num="4" objects-loading="none" subcategories-loading="none" child-type="index" mdl-expected-node-count="1"/>
                        <category _I_D="d9508485-1081-4410-90ff-f1d29d7912bc" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="f5fd32bf-9f74-45a0-8c16-b5d0c2859d99" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="251e375e-b71c-4f71-aa7d-92bb4f7475a0" name="test_basis_code" context="test_basis_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="cffb5133-1da6-4167-a43a-bbabd03f3fe3" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="254a6de0-dca1-4513-8ff4-76bdd4f18fc1" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8f5e6d29-b77d-49b3-ae13-7bc5df9df389" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0e05137a-06fc-4dee-bb50-ccb92ec26b4a" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="afd7a63c-ee28-4ea9-b63a-cabc5a21a292" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="d9a55d68-3745-4c2e-aded-2dda5d4bd078" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="a224a94e-65b8-46f4-9cd7-d3849ce01ca7" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="80e7b872-588d-4b7b-a82e-c6f08ac157f2" name="test_claim_code" context="test_claim_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="2f5de34c-d9d3-4812-93c2-883028116334" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c6623e27-fa7f-4f27-b72d-8db6085a7b88" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="76c65a6b-1663-40d2-9e1d-e1695db3df09" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="c930e423-6019-40ad-98f9-78d84d5177a4" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="e0cee3d9-4de1-4ffc-bf68-82fb05d532d4" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="84c92779-5a2a-4af0-8674-b43bab96bad7" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="c14953fe-c194-41d6-82be-5747f8800a4f" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="c9ad8840-275e-4241-b9e6-6a890a7e40c0" name="test_reason_code" context="test_reason_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="4bda860b-7f72-4539-a782-8ff884bee453" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="57261ec7-aae8-48c0-8026-189198cd996f" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d4869e5b-bfa6-43ca-9b2f-8f9308255de1" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6455d516-3cf8-4d27-9ffc-1da8bceb80df" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="95bc5872-6cd5-4d5e-9cf7-ed88117fb2c4" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="9532b391-2c68-486c-b7fd-600e074a3dbf" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="f33ef0d5-657f-4d12-95b5-5a74596fdd1e" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="f21e583d-6202-4be7-970d-7daacbabaa42" name="test_result_code" context="test_result_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="241a32a6-2262-4e8d-a890-25e49f33f8ed" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0bb3e6e0-f7e2-42dc-bbcd-9b3c2091c7d7" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3c4879d8-43e9-4d42-a78c-5285d9b65c48" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0ca57471-a671-49f4-8a6f-66c96a834ecb" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="d2729a9e-96da-4866-b2a3-187bf7931b9a" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="4062210a-158e-4de1-ac62-3f27ca74c448" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="3fd54710-effa-4a03-b325-59abab8a4405" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="ab0cf857-abb1-4d86-874a-db3f0687675f" name="test_type_code" context="test_type_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="ec325430-e44c-4201-a75a-74ae9d272d75" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="6ae749b2-c419-4cd8-a0cb-a2a4b303ad3d" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="8f64663b-ab8c-4f14-9683-d979824d01de" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="3471420e-f6a8-47d4-a787-d86a05f11b4c" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="6ae01490-c1a4-414d-be30-130b9332b878" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="28430d8f-9212-43b4-9c8b-37308cdc33bf" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="243565ad-e796-4d96-9a6c-8491c92aa68f" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="772a4794-1b23-4361-841a-a4757572d280" name="units_of_measure_code" context="units_of_measure_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="3968aad8-b0a8-473f-bdb1-b27ecdda9a68" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="22268491-2687-44bc-9a0c-dc48ef72ec91" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="b6c8bd14-54d2-4e25-817a-f528eae0d507" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d803d143-5d4f-41df-8efa-62dfcb400622" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="58fa4356-2b1c-48a1-be5c-d9db31003ff3" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="08e24153-4c5f-4ae4-a5a2-8bb509f43f3c" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="60553f6d-5f1a-43af-a730-2b18a51e584b" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="fc877290-328b-4f6b-b657-dbfed80759df" name="waf_method_code" context="waf_method_code" subcategories-loading="none" object-loading="main">
                        <category _I_D="76fbd8ac-6cc5-41e7-83ce-037d1f4145b0" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bd58eac6-6106-4e87-b49d-39636c38aa26" name="Partition columns" order-num="1" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a776db14-f499-4c5d-a5f2-dd591aca133f" name="Subpartition columns" order-num="2" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="7b737c7a-c018-46f3-994b-acdfcddb4ed5" name="Constraints" order-num="3" objects-loading="none" subcategories-loading="none" child-type="constraint" mdl-expected-node-count="1"/>
                        <category _I_D="40533cc4-341a-4b85-ab7e-9da019fc7b85" name="Indexes" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="index" mdl-expected-node-count="0"/>
                        <category _I_D="215a0ed8-dced-4f93-8b01-b408b72b356c" name="Triggers" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                        <category _I_D="e9062cc8-6e97-418a-bab4-471e3215a18a" name="Partitions" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="partition" mdl-expected-node-count="0"/>
                    </table>
                    <table _I_D="67947f3c-162e-4fe2-977b-2bbea8630558" name="fuel_flow_period_code" transformed="2022-07-15 15:43:36" is-typed="N" comment="Lookup table for fuel flow period code." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table FUEL_FLOW_PERIOD_CODE" mdl-applying-result="applying-success" mdl-applied="2022-07-15 15:51:17">
                        <category _I_D="0aff15df-f9ed-43d5-bc1f-4033b64e8b11" name="Columns" order-num="0" child-type="column" transformed="2022-07-15 15:43:36" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table FUEL_FLOW_PERIOD_CODE,category Columns">
                            <column _I_D="78ecf337-c9b6-414a-ad32-fa33423607b0" name="fuel_flow_period_cd" table-schema="CAMDECMPSMD" table-name="FUEL_FLOW_PERIOD_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-15 15:43:36" ordinal-position="1" is-nullable="N" comment="Unique code value for a lookup table." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table FUEL_FLOW_PERIOD_CODE,category Columns,column FUEL_FLOW_PERIOD_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="d0e72674-eb56-46e6-b453-795a2d4b4134" name="ff_period_cd_description" table-schema="CAMDECMPSMD" table-name="FUEL_FLOW_PERIOD_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-07-15 15:43:36" ordinal-position="2" is-nullable="N" comment="Description of lookup code." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table FUEL_FLOW_PERIOD_CODE,category Columns,column FF_PERIOD_CD_DESCRIPTION" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="b4e197f1-7c50-448e-b97d-623a2a52fdee" name="Partition columns" order-num="1" child-type="column" transformed="2022-07-15 15:43:36" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table FUEL_FLOW_PERIOD_CODE,category Partition columns"/>
                        <category _I_D="37f530ff-0232-4100-933b-2dcefe1442fb" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-07-15 15:43:36" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table FUEL_FLOW_PERIOD_CODE,category Subpartition columns"/>
                        <category _I_D="9cd30b89-cd3c-46a7-918e-724fa357c830" name="Constraints" order-num="4" child-type="constraint" transformed="2022-07-15 15:43:36" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table FUEL_FLOW_PERIOD_CODE,category Constraints">
                            <constraint _I_D="e334f369-71c7-4d98-97a0-a39cb86cf0e8" name="pk_fuel_flow_period_code" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-07-15 15:43:36" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table FUEL_FLOW_PERIOD_CODE,category Constraints,constraint PK_FUEL_FLOW_PERIOD_CODE" mdl-applying-result="applying-success" mdl-applied="2022-07-15 15:51:17">
                                <category _I_D="638ac8cf-775a-4457-a472-1cbed0ea3749" name="Columns" order-num="0" transformed="2022-07-15 15:43:36" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table FUEL_FLOW_PERIOD_CODE,category Constraints,constraint PK_FUEL_FLOW_PERIOD_CODE,category Columns">
                                    <column _I_D="344d8085-1526-4de0-8307-62c3156e6089" name="fuel_flow_period_cd" transformed="2022-07-15 15:43:36" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table FUEL_FLOW_PERIOD_CODE,category Constraints,constraint PK_FUEL_FLOW_PERIOD_CODE,category Columns,column FUEL_FLOW_PERIOD_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="c01ca904-0fa7-4fc8-b496-d689ab97dbb9" name="Indexes" order-num="5" child-type="index" transformed="2022-07-15 15:43:36" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table FUEL_FLOW_PERIOD_CODE,category Indexes"/>
                        <category _I_D="924bfd9e-017d-4939-aec3-692447423d8d" name="Triggers" order-num="6" child-type="trigger" transformed="2022-07-15 15:43:36" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table FUEL_FLOW_PERIOD_CODE,category Triggers"/>
                        <category _I_D="9433ea35-23b6-4f50-a38e-953b06a07cb3" name="Partitions" order-num="7" child-type="partition" transformed="2022-07-15 15:43:36" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table FUEL_FLOW_PERIOD_CODE,category Partitions"/>
                    </table>
                    <table _I_D="c7ff8023-edc5-4821-ba8d-0a6fe903be50" name="hour_measure_code" transformed="2022-07-15 16:58:51" is-typed="N" comment="Lookup table of codes that indicate how pollutant parameter values were measured." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOUR_MEASURE_CODE" mdl-applying-result="applying-success" mdl-applied="2022-07-15 16:59:31">
                        <category _I_D="c5dc2a8e-589e-4c67-aa1d-5f4d20e45a15" name="Columns" order-num="0" child-type="column" transformed="2022-07-15 16:58:51" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOUR_MEASURE_CODE,category Columns">
                            <column _I_D="170f043a-ca6f-4bb8-b6c6-e3efc4ea0d76" name="hour_measure_cd" table-schema="CAMDECMPSMD" table-name="HOUR_MEASURE_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-15 16:58:51" ordinal-position="1" is-nullable="N" comment="Code indicating how the associated value was measured." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOUR_MEASURE_CODE,category Columns,column HOUR_MEASURE_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="2dd78b66-baf3-4f74-bd38-6715f4479101" name="hour_measure_description" table-schema="CAMDECMPSMD" table-name="HOUR_MEASURE_CODE" dt-name="CHARACTER VARYING" dt-attr-1="100" transformed="2022-07-15 16:58:51" ordinal-position="2" is-nullable="N" comment="Description of hour measure code." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOUR_MEASURE_CODE,category Columns,column HOUR_MEASURE_DESCRIPTION" mdl-applying-result="applying-success"/>
                            <column _I_D="f0ea8b83-97e0-4d57-94a8-a8b923963d7a" name="unit_only" table-schema="CAMDECMPSMD" table-name="HOUR_MEASURE_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1" transformed="2022-07-15 16:58:51" ordinal-position="3" is-nullable="N" comment="Indicates whether the hour measure code is used for apportioned unit data only." default-definition="'N'" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOUR_MEASURE_CODE,category Columns,column UNIT_ONLY" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="0bbf0144-f072-4baa-93e9-6223f8c4523b" name="Partition columns" order-num="1" child-type="column" transformed="2022-07-15 16:58:51" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOUR_MEASURE_CODE,category Partition columns"/>
                        <category _I_D="a7ff1ca9-5ed7-43cf-bfa0-22bddcce7525" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-07-15 16:58:51" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOUR_MEASURE_CODE,category Subpartition columns"/>
                        <category _I_D="a1b453a9-5e84-41de-8b56-034c4c3a5517" name="Constraints" order-num="4" child-type="constraint" transformed="2022-07-15 16:58:51" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOUR_MEASURE_CODE,category Constraints">
                            <constraint _I_D="5f2b4721-a47e-4194-93dd-2481c98de6cb" name="hour_measure_code_pk" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-07-15 16:58:51" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOUR_MEASURE_CODE,category Constraints,constraint HOUR_MEASURE_CODE_PK" mdl-applying-result="applying-success" mdl-applied="2022-07-15 16:59:31">
                                <category _I_D="99d7f87a-97ec-49b5-b230-debf9d3c4c89" name="Columns" order-num="0" transformed="2022-07-15 16:58:51" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOUR_MEASURE_CODE,category Constraints,constraint HOUR_MEASURE_CODE_PK,category Columns">
                                    <column _I_D="24d9a4a6-374f-4f8d-b0aa-8e440427c08f" name="hour_measure_cd" transformed="2022-07-15 16:58:51" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOUR_MEASURE_CODE,category Constraints,constraint HOUR_MEASURE_CODE_PK,category Columns,column HOUR_MEASURE_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="5fe9a57a-4aa5-4cef-9c15-87afd9ef0824" name="hour_measure_code_uq" constraint-type="UNIQUE" constraint-type-desc="UNIQUE KEY" generated="USER" transformed="2022-07-15 16:58:51" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOUR_MEASURE_CODE,category Constraints,constraint HOUR_MEASURE_CODE_UQ" mdl-applying-result="applying-success" mdl-applied="2022-07-15 16:59:31">
                                <category _I_D="4bcf1496-97ff-4de7-b6a6-1ea5a923b332" name="Columns" order-num="0" transformed="2022-07-15 16:58:51" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOUR_MEASURE_CODE,category Constraints,constraint HOUR_MEASURE_CODE_UQ,category Columns">
                                    <column _I_D="53fefb02-8c1f-4895-a98b-e530a0b1e6a4" name="hour_measure_description" transformed="2022-07-15 16:58:51" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOUR_MEASURE_CODE,category Constraints,constraint HOUR_MEASURE_CODE_UQ,category Columns,column HOUR_MEASURE_DESCRIPTION" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="e5a4ca63-f5eb-4a94-a3bc-d3d2d3077169" name="Indexes" order-num="5" child-type="index" transformed="2022-07-15 16:58:51" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOUR_MEASURE_CODE,category Indexes"/>
                        <category _I_D="4581d9c6-b267-40b7-85ba-474125b31133" name="Triggers" order-num="6" child-type="trigger" transformed="2022-07-15 16:58:51" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOUR_MEASURE_CODE,category Triggers"/>
                        <category _I_D="0158a308-6859-4b48-8e48-54c61ddb8d5d" name="Partitions" order-num="7" child-type="partition" transformed="2022-07-15 16:58:51" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOUR_MEASURE_CODE,category Partitions"/>
                    </table>
                    <table _I_D="5c4994d5-ee1d-4640-9103-5b4fb6447501" name="hourly_type_code" transformed="2022-07-18 14:23:05" is-typed="N" comment="Lookup table for hourly type." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOURLY_TYPE_CODE" mdl-applying-result="applying-success" mdl-applied="2022-07-18 14:23:41">
                        <category _I_D="0a1b38c1-6c2a-43ce-ae11-212bea235c2e" name="Columns" order-num="0" child-type="column" transformed="2022-07-18 14:23:05" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOURLY_TYPE_CODE,category Columns">
                            <column _I_D="62d241a6-b671-4354-b1e6-657a0a21ca3e" name="hourly_type_cd" table-schema="CAMDECMPSMD" table-name="HOURLY_TYPE_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-18 14:23:05" ordinal-position="1" is-nullable="N" comment="Code used to identify the hourly type (Monitored vs Derived)." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOURLY_TYPE_CODE,category Columns,column HOURLY_TYPE_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="adb00da9-4797-4c5a-a149-18e779cca7e5" name="hourly_type_description" table-schema="CAMDECMPSMD" table-name="HOURLY_TYPE_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-07-18 14:23:05" ordinal-position="2" is-nullable="N" comment="Description of lookup code." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOURLY_TYPE_CODE,category Columns,column HOURLY_TYPE_DESCRIPTION" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="74905cc6-2d10-4751-8c01-15bd3b8eceda" name="Partition columns" order-num="1" child-type="column" transformed="2022-07-18 14:23:05" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOURLY_TYPE_CODE,category Partition columns"/>
                        <category _I_D="51297673-7686-40f3-ba0d-26a424edafef" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-07-18 14:23:05" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOURLY_TYPE_CODE,category Subpartition columns"/>
                        <category _I_D="17dfb2f6-481a-46c8-b2b4-bbd298587797" name="Constraints" order-num="4" child-type="constraint" transformed="2022-07-18 14:23:05" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOURLY_TYPE_CODE,category Constraints">
                            <constraint _I_D="4f25e1d5-bed5-4f43-8812-38f03329aaa0" name="pk_hourly_type_code" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-07-18 14:23:05" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOURLY_TYPE_CODE,category Constraints,constraint PK_HOURLY_TYPE_CODE" mdl-applying-result="applying-success" mdl-applied="2022-07-18 14:23:41">
                                <category _I_D="58d1bf7a-c876-4e70-bab0-496312f15501" name="Columns" order-num="0" transformed="2022-07-18 14:23:05" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOURLY_TYPE_CODE,category Constraints,constraint PK_HOURLY_TYPE_CODE,category Columns">
                                    <column _I_D="d23eec26-9276-455b-ba9d-77fd52607084" name="hourly_type_cd" transformed="2022-07-18 14:23:05" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOURLY_TYPE_CODE,category Constraints,constraint PK_HOURLY_TYPE_CODE,category Columns,column HOURLY_TYPE_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="faac0825-2bb4-4718-be08-784a95b7693c" name="Indexes" order-num="5" child-type="index" transformed="2022-07-18 14:23:05" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOURLY_TYPE_CODE,category Indexes"/>
                        <category _I_D="e2eaf05b-297f-43bf-a716-f9e4c21aff40" name="Triggers" order-num="6" child-type="trigger" transformed="2022-07-18 14:23:05" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOURLY_TYPE_CODE,category Triggers"/>
                        <category _I_D="f0224507-64dc-40fe-9180-82ba21efa19b" name="Partitions" order-num="7" child-type="partition" transformed="2022-07-18 14:23:05" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table HOURLY_TYPE_CODE,category Partitions"/>
                    </table>
                    <table _I_D="931d1760-cf8a-4fc9-9bab-0fad6a98528f" name="nsps4t_electrical_load_code" transformed="2022-07-18 14:27:22" is-typed="N" comment="NSPS4T (quarterly) Summary Information. " partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_ELECTRICAL_LOAD_CODE" mdl-applying-result="applying-success" mdl-applied="2022-07-18 14:27:52">
                        <category _I_D="89885092-9d52-4e84-adb9-9bfdf964831a" name="Columns" order-num="0" child-type="column" transformed="2022-07-18 14:27:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_ELECTRICAL_LOAD_CODE,category Columns">
                            <column _I_D="4ec7371d-bb46-4a92-b8f1-60447e4cd68d" name="electrical_load_cd" table-schema="CAMDECMPSMD" table-name="NSPS4T_ELECTRICAL_LOAD_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-18 14:27:22" ordinal-position="1" is-nullable="N" comment="Code used to identify the NSPS4T Energy Output." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_ELECTRICAL_LOAD_CODE,category Columns,column ELECTRICAL_LOAD_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="ab7cfe07-74c3-4083-8674-19278509ec23" name="electrical_load_description" table-schema="CAMDECMPSMD" table-name="NSPS4T_ELECTRICAL_LOAD_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-07-18 14:27:22" ordinal-position="2" is-nullable="N" comment="Description of the NSPS4T  Energy Output." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_ELECTRICAL_LOAD_CODE,category Columns,column ELECTRICAL_LOAD_DESCRIPTION" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="b1b35a3c-1bfc-46f1-a969-cf8aa53b28f0" name="Partition columns" order-num="1" child-type="column" transformed="2022-07-18 14:27:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_ELECTRICAL_LOAD_CODE,category Partition columns"/>
                        <category _I_D="53bed34b-3f16-4b5e-b16d-ef587d9d0fab" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-07-18 14:27:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_ELECTRICAL_LOAD_CODE,category Subpartition columns"/>
                        <category _I_D="b8be3d90-d7d9-42c9-8986-eedd1080c4b2" name="Constraints" order-num="4" child-type="constraint" transformed="2022-07-18 14:27:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_ELECTRICAL_LOAD_CODE,category Constraints">
                            <constraint _I_D="2fbc5a7c-a160-474e-8b54-2fa43cbef629" name="pk_nsps4t_electrical_load" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-07-18 14:27:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_ELECTRICAL_LOAD_CODE,category Constraints,constraint PK_NSPS4T_ELECTRICAL_LOAD" mdl-applying-result="applying-success" mdl-applied="2022-07-18 14:27:52">
                                <category _I_D="833e04fc-d080-4b29-9ada-af9f71919f9a" name="Columns" order-num="0" transformed="2022-07-18 14:27:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_ELECTRICAL_LOAD_CODE,category Constraints,constraint PK_NSPS4T_ELECTRICAL_LOAD,category Columns">
                                    <column _I_D="bb599556-5f93-4075-b149-145c374f1e96" name="electrical_load_cd" transformed="2022-07-18 14:27:22" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_ELECTRICAL_LOAD_CODE,category Constraints,constraint PK_NSPS4T_ELECTRICAL_LOAD,category Columns,column ELECTRICAL_LOAD_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="633103ba-9f8b-497d-8429-79a9f6a23565" name="uq_nsps4t_electrical_load" constraint-type="UNIQUE" constraint-type-desc="UNIQUE KEY" generated="USER" transformed="2022-07-18 14:27:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_ELECTRICAL_LOAD_CODE,category Constraints,constraint UQ_NSPS4T_ELECTRICAL_LOAD" mdl-applying-result="applying-success" mdl-applied="2022-07-18 14:27:52">
                                <category _I_D="d5771256-b96d-4097-a0c7-987abad74aaf" name="Columns" order-num="0" transformed="2022-07-18 14:27:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_ELECTRICAL_LOAD_CODE,category Constraints,constraint UQ_NSPS4T_ELECTRICAL_LOAD,category Columns">
                                    <column _I_D="9724b2a6-91ea-464c-b5a4-1af2997c76cf" name="electrical_load_description" transformed="2022-07-18 14:27:22" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_ELECTRICAL_LOAD_CODE,category Constraints,constraint UQ_NSPS4T_ELECTRICAL_LOAD,category Columns,column ELECTRICAL_LOAD_DESCRIPTION" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="f1136cb6-65ac-420d-8b2f-69ce7d3946c8" name="Indexes" order-num="5" child-type="index" transformed="2022-07-18 14:27:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_ELECTRICAL_LOAD_CODE,category Indexes"/>
                        <category _I_D="1657ad94-13bf-42c1-9d9c-dfca86de56a8" name="Triggers" order-num="6" child-type="trigger" transformed="2022-07-18 14:27:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_ELECTRICAL_LOAD_CODE,category Triggers"/>
                        <category _I_D="3608853f-2be3-42d3-a7f0-4259394788cb" name="Partitions" order-num="7" child-type="partition" transformed="2022-07-18 14:27:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_ELECTRICAL_LOAD_CODE,category Partitions"/>
                    </table>
                    <table _I_D="f26ceb64-85bf-4ae9-999d-432454c14592" name="nsps4t_emission_standard_code" transformed="2022-07-18 14:32:16" is-typed="N" comment="NSPS4T (quarterly) Summary Information. " partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE" mdl-applying-result="applying-success" mdl-applied="2022-07-18 14:32:50">
                        <category _I_D="c08d3d76-2299-4481-9217-ef1d65a2a202" name="Columns" order-num="0" child-type="column" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Columns">
                            <column _I_D="28328ca6-301c-4ac9-b9cb-5da8137503a5" name="emission_standard_cd" table-schema="CAMDECMPSMD" table-name="NSPS4T_EMISSION_STANDARD_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-18 14:32:16" ordinal-position="1" is-nullable="N" comment="Code used to identify the NSPS4T Emission Standard." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Columns,column EMISSION_STANDARD_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="299cfaa8-df4a-4820-8345-0b1495fcb0a4" name="emission_standard_description" table-schema="CAMDECMPSMD" table-name="NSPS4T_EMISSION_STANDARD_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-07-18 14:32:16" ordinal-position="2" is-nullable="N" comment="Description of the NSPS4T Emission Standard." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Columns,column EMISSION_STANDARD_DESCRIPTION" mdl-applying-result="applying-success"/>
                            <column _I_D="f6a4ed20-00da-475d-ab5a-e12c68eb4d79" name="emission_standard_uom_cd" table-schema="CAMDECMPSMD" table-name="NSPS4T_EMISSION_STANDARD_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-18 14:32:16" ordinal-position="3" is-nullable="Y" comment="Contains the unit of measure for the standard." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Columns,column EMISSION_STANDARD_UOM_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="82fcf4a9-0ef4-49dd-a489-c7c22f32906b" name="emission_standard_load_cd" table-schema="CAMDECMPSMD" table-name="NSPS4T_EMISSION_STANDARD_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-18 14:32:16" ordinal-position="4" is-nullable="Y" comment="Contains the type of electrical load for the standard." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Columns,column EMISSION_STANDARD_LOAD_CD" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="d6de46cb-38bf-457e-b26c-1808eb200094" name="Partition columns" order-num="1" child-type="column" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Partition columns"/>
                        <category _I_D="7f4e294b-f5ce-4b6d-ba61-a6ea9bd360f2" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Subpartition columns"/>
                        <category _I_D="718ba318-ce78-4336-8a0f-9b72e137af90" name="Constraints" order-num="4" child-type="constraint" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Constraints">
                            <constraint _I_D="1ac31b2d-6e38-4b87-9fea-f3b8569a9ae5" name="fk_nsps4t_emission_standard_l" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" delete-rule="NO ACTION" generated="USER" transformed="2022-07-18 14:32:16" referenced-table-schema="camdecmpsmd" referenced-table-name="nsps4t_electrical_load_code" referenced-constraint-schema="camdecmpsmd" referenced-constraint-name="camdecmpsmd" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Constraints,constraint FK_NSPS4T_EMISSION_STANDARD_L" mdl-applying-result="applying-success" mdl-applied="2022-07-18 14:32:50">
                                <category _I_D="9bac5559-8a70-491f-b184-a80109148485" name="Columns" order-num="0" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Constraints,constraint FK_NSPS4T_EMISSION_STANDARD_L,category Columns">
                                    <column _I_D="14aee811-fcd9-47c2-a9e1-15c6f84ad938" name="emission_standard_load_cd" transformed="2022-07-18 14:32:16" ordinal-position="1" position-in-referenced-unique-constraint="electrical_load_cd" column-in-referenced-unique-constraint="electrical_load_cd" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Constraints,constraint FK_NSPS4T_EMISSION_STANDARD_L,category Columns,column EMISSION_STANDARD_LOAD_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="be6f3e54-5245-419f-98d9-42542579d4bf" name="fk_nsps4t_emission_standard_u" constraint-type="FOREIGN KEY" constraint-type-desc="FOREIGN KEY" delete-rule="NO ACTION" generated="USER" transformed="2022-07-18 14:32:16" referenced-table-schema="camdecmpsmd" referenced-table-name="units_of_measure_code" referenced-constraint-schema="camdecmpsmd" referenced-constraint-name="camdecmpsmd" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Constraints,constraint FK_NSPS4T_EMISSION_STANDARD_U" mdl-applying-result="applying-success" mdl-applied="2022-07-18 14:32:50">
                                <category _I_D="1a003958-fa21-4036-a109-b84601cf143c" name="Columns" order-num="0" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Constraints,constraint FK_NSPS4T_EMISSION_STANDARD_U,category Columns">
                                    <column _I_D="c489d3e2-3ec6-4d4b-a65e-18f67dde5ac2" name="emission_standard_uom_cd" transformed="2022-07-18 14:32:16" ordinal-position="1" position-in-referenced-unique-constraint="uom_cd" column-in-referenced-unique-constraint="uom_cd" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Constraints,constraint FK_NSPS4T_EMISSION_STANDARD_U,category Columns,column EMISSION_STANDARD_UOM_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="4920b1d8-016d-4aed-a198-6e6de588dac1" name="pk_nsps4t_emission_standard" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Constraints,constraint PK_NSPS4T_EMISSION_STANDARD" mdl-applying-result="applying-success" mdl-applied="2022-07-18 14:32:50">
                                <category _I_D="62bb3474-302c-4450-b461-60de64ab4cac" name="Columns" order-num="0" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Constraints,constraint PK_NSPS4T_EMISSION_STANDARD,category Columns">
                                    <column _I_D="3b5558a7-3333-4a34-bbfc-3739a918970c" name="emission_standard_cd" transformed="2022-07-18 14:32:16" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Constraints,constraint PK_NSPS4T_EMISSION_STANDARD,category Columns,column EMISSION_STANDARD_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                            <constraint _I_D="f5dcf016-8c7a-4694-a178-641758cb1dea" name="uq_nsps4t_emission_standard" constraint-type="UNIQUE" constraint-type-desc="UNIQUE KEY" generated="USER" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Constraints,constraint UQ_NSPS4T_EMISSION_STANDARD" mdl-applying-result="applying-success" mdl-applied="2022-07-18 14:32:50">
                                <category _I_D="860ade4d-b2f9-4657-b880-96521a7fdf3a" name="Columns" order-num="0" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Constraints,constraint UQ_NSPS4T_EMISSION_STANDARD,category Columns">
                                    <column _I_D="731295ab-ea02-46e1-bb28-fa7e8d2c0346" name="emission_standard_description" transformed="2022-07-18 14:32:16" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Constraints,constraint UQ_NSPS4T_EMISSION_STANDARD,category Columns,column EMISSION_STANDARD_DESCRIPTION" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="611166c8-6bb5-48dc-bb64-19b816b9d1e8" name="Indexes" order-num="5" child-type="index" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Indexes">
                            <index _I_D="c823d74d-a8cf-4914-94ff-11a105c916eb" name="idx_nsps4t_emission_standard_l" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Indexes,index IDX_NSPS4T_EMISSION_STANDARD_L" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-07-18 14:32:50">
                                <category _I_D="dcf8884f-d6be-4f49-af26-28405f4c0416" name="Columns" order-num="0" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Indexes,index IDX_NSPS4T_EMISSION_STANDARD_L,category Columns">
                                    <column _I_D="709ca14f-4a51-4ace-9fb1-7a895189cea3" name="emission_standard_load_cd" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Indexes,index IDX_NSPS4T_EMISSION_STANDARD_L,category Columns,column EMISSION_STANDARD_LOAD_CD" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                            <index _I_D="9b0f67f0-ba94-49db-b621-c30448ad7618" name="idx_nsps4t_emission_standard_u" uniqueness="NONUNIQUE" index-type="BTREE" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Indexes,index IDX_NSPS4T_EMISSION_STANDARD_U" is-unique="0" mdl-applying-result="applying-success" mdl-applied="2022-07-18 14:32:50">
                                <category _I_D="6226b300-2446-4fa2-9729-75016e7f328b" name="Columns" order-num="0" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Indexes,index IDX_NSPS4T_EMISSION_STANDARD_U,category Columns">
                                    <column _I_D="cb9fe211-151c-4205-bbbb-318e5c09c8f8" name="emission_standard_uom_cd" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Indexes,index IDX_NSPS4T_EMISSION_STANDARD_U,category Columns,column EMISSION_STANDARD_UOM_CD" mdl-applying-result="applying-success" order-column="1" descasc="ASC"/>
                                </category>
                            </index>
                        </category>
                        <category _I_D="821c0689-eedf-4e2a-9452-f435e3fb6fe2" name="Triggers" order-num="6" child-type="trigger" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Triggers"/>
                        <category _I_D="00f210d5-7cca-4b3f-81e4-3f6f7be55000" name="Partitions" order-num="7" child-type="partition" transformed="2022-07-18 14:32:16" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table NSPS4T_EMISSION_STANDARD_CODE,category Partitions"/>
                    </table>
                    <table _I_D="30712d14-6902-486f-80e8-5f9addc55e62" name="operating_type_code" transformed="2022-07-18 14:56:34" is-typed="N" comment="Lookup table for operating type code (e.g., quarterly operating hours)." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table OPERATING_TYPE_CODE" mdl-applying-result="applying-success" mdl-applied="2022-07-18 14:56:56">
                        <category _I_D="f731c696-da00-4965-9794-237685b0d749" name="Columns" order-num="0" child-type="column" transformed="2022-07-18 14:56:34" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table OPERATING_TYPE_CODE,category Columns">
                            <column _I_D="b92db5ef-017a-4a88-8f94-452bcd1fddee" name="op_type_cd" table-schema="CAMDECMPSMD" table-name="OPERATING_TYPE_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-18 14:56:34" ordinal-position="1" is-nullable="N" comment="Code used to identify the operating type. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table OPERATING_TYPE_CODE,category Columns,column OP_TYPE_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="9ef7074c-d54f-410a-8025-9e333b06ba12" name="op_type_cd_description" table-schema="CAMDECMPSMD" table-name="OPERATING_TYPE_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-07-18 14:56:34" ordinal-position="2" is-nullable="N" comment="Description of lookup code. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table OPERATING_TYPE_CODE,category Columns,column OP_TYPE_CD_DESCRIPTION" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="edda5fb9-81da-4840-9873-0ea7c84acc82" name="Partition columns" order-num="1" child-type="column" transformed="2022-07-18 14:56:34" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table OPERATING_TYPE_CODE,category Partition columns"/>
                        <category _I_D="af047d51-46af-4c1b-9da1-42b161f56dea" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-07-18 14:56:34" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table OPERATING_TYPE_CODE,category Subpartition columns"/>
                        <category _I_D="ff63c306-1173-4d5a-9e10-312ca878889e" name="Constraints" order-num="4" child-type="constraint" transformed="2022-07-18 14:56:34" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table OPERATING_TYPE_CODE,category Constraints">
                            <constraint _I_D="a76f1044-d25a-4c64-8927-771d2ba1e37c" name="pk_operating_type_code" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-07-18 14:56:34" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table OPERATING_TYPE_CODE,category Constraints,constraint PK_OPERATING_TYPE_CODE" mdl-applying-result="applying-success" mdl-applied="2022-07-18 14:56:56">
                                <category _I_D="af926524-eb68-40ba-8ac2-92cfd3eccc38" name="Columns" order-num="0" transformed="2022-07-18 14:56:34" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table OPERATING_TYPE_CODE,category Constraints,constraint PK_OPERATING_TYPE_CODE,category Columns">
                                    <column _I_D="db82f67e-1ea0-4d87-8667-82b0cf97a0ed" name="op_type_cd" transformed="2022-07-18 14:56:34" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table OPERATING_TYPE_CODE,category Constraints,constraint PK_OPERATING_TYPE_CODE,category Columns,column OP_TYPE_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="6fc52e1c-a004-4880-9108-ee74b83a2cb5" name="Indexes" order-num="5" child-type="index" transformed="2022-07-18 14:56:34" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table OPERATING_TYPE_CODE,category Indexes"/>
                        <category _I_D="69fd925e-6050-4954-9345-323eec0f557d" name="Triggers" order-num="6" child-type="trigger" transformed="2022-07-18 14:56:34" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table OPERATING_TYPE_CODE,category Triggers"/>
                        <category _I_D="e623b604-371d-4211-9c06-9598b1d733d6" name="Partitions" order-num="7" child-type="partition" transformed="2022-07-18 14:56:34" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table OPERATING_TYPE_CODE,category Partitions"/>
                    </table>
                    <table _I_D="16b6fe7e-529f-474d-a083-583ae155c116" name="sample_type_code" transformed="2022-07-18 16:13:18" is-typed="N" comment="Lookup table for sample type codes." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SAMPLE_TYPE_CODE" mdl-applying-result="applying-success" mdl-applied="2022-07-18 16:14:01">
                        <category _I_D="1f3aa492-c515-46d2-9134-02bb59c23070" name="Columns" order-num="0" child-type="column" transformed="2022-07-18 16:13:18" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SAMPLE_TYPE_CODE,category Columns">
                            <column _I_D="0bf73c92-f255-46c3-bd1d-dcfd8f258cd7" name="sample_type_cd" table-schema="CAMDECMPSMD" table-name="SAMPLE_TYPE_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-18 16:13:18" ordinal-position="1" is-nullable="N" comment="Code used to identify the sample type. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SAMPLE_TYPE_CODE,category Columns,column SAMPLE_TYPE_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="6bd7743d-daa7-4516-a17c-f135e5323e73" name="sample_type_cd_description" table-schema="CAMDECMPSMD" table-name="SAMPLE_TYPE_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-07-18 16:13:18" ordinal-position="2" is-nullable="Y" comment="Description of lookup code. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SAMPLE_TYPE_CODE,category Columns,column SAMPLE_TYPE_CD_DESCRIPTION" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="61f6a3f9-d485-46b5-8b65-e0fc4294ec6c" name="Partition columns" order-num="1" child-type="column" transformed="2022-07-18 16:13:18" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SAMPLE_TYPE_CODE,category Partition columns"/>
                        <category _I_D="fc3bfa35-0d75-4191-a457-0f5e2eb52d6d" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-07-18 16:13:18" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SAMPLE_TYPE_CODE,category Subpartition columns"/>
                        <category _I_D="a408dc5e-5b78-48ba-b623-55617c5529e6" name="Constraints" order-num="4" child-type="constraint" transformed="2022-07-18 16:13:18" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SAMPLE_TYPE_CODE,category Constraints">
                            <constraint _I_D="18b57ac5-671b-4d83-b1fd-ca0b7e86b9b6" name="pk_sample_type_code" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-07-18 16:13:18" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SAMPLE_TYPE_CODE,category Constraints,constraint PK_SAMPLE_TYPE_CODE" mdl-applying-result="applying-success" mdl-applied="2022-07-18 16:14:01">
                                <category _I_D="c46584d9-4991-4c79-8cad-5991085a25f9" name="Columns" order-num="0" transformed="2022-07-18 16:13:18" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SAMPLE_TYPE_CODE,category Constraints,constraint PK_SAMPLE_TYPE_CODE,category Columns">
                                    <column _I_D="aee68b34-df8b-478f-84db-233f6277dbc9" name="sample_type_cd" transformed="2022-07-18 16:13:18" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SAMPLE_TYPE_CODE,category Constraints,constraint PK_SAMPLE_TYPE_CODE,category Columns,column SAMPLE_TYPE_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="3240b2ae-98e0-4701-a263-daede921e3a4" name="Indexes" order-num="5" child-type="index" transformed="2022-07-18 16:13:18" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SAMPLE_TYPE_CODE,category Indexes"/>
                        <category _I_D="67e63f9f-28f3-43ea-8c51-f77a1217f482" name="Triggers" order-num="6" child-type="trigger" transformed="2022-07-18 16:13:18" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SAMPLE_TYPE_CODE,category Triggers"/>
                        <category _I_D="0eef6d41-c2f5-4cf0-95bc-3ca293b4c93d" name="Partitions" order-num="7" child-type="partition" transformed="2022-07-18 16:13:18" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SAMPLE_TYPE_CODE,category Partitions"/>
                    </table>
                    <table _I_D="74696c91-7caa-475e-9a6f-568221a98509" name="sod_mass_code" transformed="2022-07-18 16:17:22" is-typed="N" comment="Lookup table of source of mass flow rate codes." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_MASS_CODE" mdl-applying-result="applying-success" mdl-applied="2022-07-18 16:21:02">
                        <category _I_D="dc1bd6d8-bfc6-4dda-a931-7840f8fbbf51" name="Columns" order-num="0" child-type="column" transformed="2022-07-18 16:17:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_MASS_CODE,category Columns">
                            <column _I_D="318be1f9-b92b-4c9a-a762-bf71a6a61d4a" name="sod_mass_cd" table-schema="CAMDECMPSMD" table-name="SOD_MASS_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-18 16:17:22" ordinal-position="1" is-nullable="N" comment="Code used to identify the source of mass flow rate. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_MASS_CODE,category Columns,column SOD_MASS_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="775cf4fb-156b-41d9-a167-54a887142003" name="sod_mass_cd_description" table-schema="CAMDECMPSMD" table-name="SOD_MASS_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-07-18 16:17:22" ordinal-position="2" is-nullable="N" comment="Description of lookup code. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_MASS_CODE,category Columns,column SOD_MASS_CD_DESCRIPTION" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="a4f57f4c-99aa-4080-84df-baf387da3ca1" name="Partition columns" order-num="1" child-type="column" transformed="2022-07-18 16:17:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_MASS_CODE,category Partition columns"/>
                        <category _I_D="960c48c5-4ffe-4c6b-9b91-d4762f18d7f1" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-07-18 16:17:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_MASS_CODE,category Subpartition columns"/>
                        <category _I_D="2e5c1f63-efab-4644-abad-3375df191765" name="Constraints" order-num="4" child-type="constraint" transformed="2022-07-18 16:17:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_MASS_CODE,category Constraints">
                            <constraint _I_D="ce50b6a4-e8c0-49ae-9e8d-b97e9236324c" name="pk_sod_mass_code" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-07-18 16:17:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_MASS_CODE,category Constraints,constraint PK_SOD_MASS_CODE" mdl-applying-result="applying-success" mdl-applied="2022-07-18 16:21:02">
                                <category _I_D="215f9c97-862e-4db8-b9db-5446777e427c" name="Columns" order-num="0" transformed="2022-07-18 16:17:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_MASS_CODE,category Constraints,constraint PK_SOD_MASS_CODE,category Columns">
                                    <column _I_D="169a9cd2-f2fb-47dd-a57c-64a8b6104e23" name="sod_mass_cd" transformed="2022-07-18 16:17:22" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_MASS_CODE,category Constraints,constraint PK_SOD_MASS_CODE,category Columns,column SOD_MASS_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="faf5ab52-8c2a-431c-acac-1f058b3564a3" name="Indexes" order-num="5" child-type="index" transformed="2022-07-18 16:17:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_MASS_CODE,category Indexes"/>
                        <category _I_D="b06cdde4-6e85-458d-be2e-31d5b249d3be" name="Triggers" order-num="6" child-type="trigger" transformed="2022-07-18 16:17:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_MASS_CODE,category Triggers"/>
                        <category _I_D="a7e3494a-e8e0-490f-a397-439004cb34af" name="Partitions" order-num="7" child-type="partition" transformed="2022-07-18 16:17:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_MASS_CODE,category Partitions"/>
                    </table>
                    <table _I_D="797b2b2d-d82c-451e-9aa0-60d85cd65e86" name="sod_volumetric_code" transformed="2022-07-18 16:24:44" is-typed="N" comment="Lookup table of source of volumetric flow rate codes." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_VOLUMETRIC_CODE" mdl-applying-result="applying-success" mdl-applied="2022-07-18 16:25:04">
                        <category _I_D="c11723c0-810d-4216-9a4d-a35d3704d50c" name="Columns" order-num="0" child-type="column" transformed="2022-07-18 16:24:44" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_VOLUMETRIC_CODE,category Columns">
                            <column _I_D="b99da427-19e7-4719-97bf-5ec4db5ce8d8" name="sod_volumetric_cd" table-schema="CAMDECMPSMD" table-name="SOD_VOLUMETRIC_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-18 16:24:44" ordinal-position="1" is-nullable="N" comment="Code used to identify the source of volumetric flow rate. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_VOLUMETRIC_CODE,category Columns,column SOD_VOLUMETRIC_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="303ec69c-6a38-4caa-8034-368cf606575a" name="sod_volumetric_cd_description" table-schema="CAMDECMPSMD" table-name="SOD_VOLUMETRIC_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-07-18 16:24:44" ordinal-position="2" is-nullable="N" comment="Description of lookup code. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_VOLUMETRIC_CODE,category Columns,column SOD_VOLUMETRIC_CD_DESCRIPTION" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="c45ab6af-06da-4bb7-9e8e-8b5c06919263" name="Partition columns" order-num="1" child-type="column" transformed="2022-07-18 16:24:44" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_VOLUMETRIC_CODE,category Partition columns"/>
                        <category _I_D="c2ce62aa-8521-4855-9983-cfde0740871a" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-07-18 16:24:44" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_VOLUMETRIC_CODE,category Subpartition columns"/>
                        <category _I_D="1c4f38d2-6f96-489f-8f16-7dc08f43bde8" name="Constraints" order-num="4" child-type="constraint" transformed="2022-07-18 16:24:44" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_VOLUMETRIC_CODE,category Constraints">
                            <constraint _I_D="fc0736e2-61e2-4031-bfca-f707b7e95dfa" name="pk_sod_volumetric_code" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-07-18 16:24:44" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_VOLUMETRIC_CODE,category Constraints,constraint PK_SOD_VOLUMETRIC_CODE" mdl-applying-result="applying-success" mdl-applied="2022-07-18 16:25:04">
                                <category _I_D="0227225e-add4-41e8-806a-5cf34a2d2580" name="Columns" order-num="0" transformed="2022-07-18 16:24:44" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_VOLUMETRIC_CODE,category Constraints,constraint PK_SOD_VOLUMETRIC_CODE,category Columns">
                                    <column _I_D="435d6f73-7f84-42c5-9e18-1cc0bdbe1539" name="sod_volumetric_cd" transformed="2022-07-18 16:24:44" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_VOLUMETRIC_CODE,category Constraints,constraint PK_SOD_VOLUMETRIC_CODE,category Columns,column SOD_VOLUMETRIC_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="26809e41-cee1-4ebe-9569-21c54c25f5ba" name="Indexes" order-num="5" child-type="index" transformed="2022-07-18 16:24:44" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_VOLUMETRIC_CODE,category Indexes"/>
                        <category _I_D="14e5ed02-5e9b-4f7d-820b-3e0a3d6ef214" name="Triggers" order-num="6" child-type="trigger" transformed="2022-07-18 16:24:44" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_VOLUMETRIC_CODE,category Triggers"/>
                        <category _I_D="5c6c74c9-660c-4cba-9c67-39c8da78e951" name="Partitions" order-num="7" child-type="partition" transformed="2022-07-18 16:24:44" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SOD_VOLUMETRIC_CODE,category Partitions"/>
                    </table>
                    <table _I_D="d7148cd6-1f3d-450e-b923-fd95a6d29b02" name="sorbent_trap_aps_code" transformed="2022-07-18 16:29:52" is-typed="N" comment="Lookup table of sorbent trap alternate performas specification codes." partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SORBENT_TRAP_APS_CODE" mdl-applying-result="applying-success" mdl-applied="2022-07-18 16:30:13">
                        <category _I_D="cdd52e41-858e-46e4-9cc5-1a292f1da4c0" name="Columns" order-num="0" child-type="column" transformed="2022-07-18 16:29:52" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SORBENT_TRAP_APS_CODE,category Columns">
                            <column _I_D="112e6edb-f932-4303-b0ed-52a69d66fa3c" name="sorbent_trap_aps_cd" table-schema="CAMDECMPSMD" table-name="SORBENT_TRAP_APS_CODE" dt-name="CHARACTER VARYING" dt-attr-1="7" transformed="2022-07-18 16:29:52" ordinal-position="1" is-nullable="N" comment="Code used to identify the sorbent trap APS." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SORBENT_TRAP_APS_CODE,category Columns,column SORBENT_TRAP_APS_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="ebe508f9-eb42-4d4a-9c00-cef2111cfb98" name="sorbent_trap_aps_description" table-schema="CAMDECMPSMD" table-name="SORBENT_TRAP_APS_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-07-18 16:29:52" ordinal-position="2" is-nullable="Y" comment="Description of the sorbent trap APS code." artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SORBENT_TRAP_APS_CODE,category Columns,column SORBENT_TRAP_APS_DESCRIPTION" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="e0848a3f-03cb-4fa1-8f45-fe2a077d374f" name="Partition columns" order-num="1" child-type="column" transformed="2022-07-18 16:29:52" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SORBENT_TRAP_APS_CODE,category Partition columns"/>
                        <category _I_D="ed036549-9914-40f1-81c8-a965f8a77ad8" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-07-18 16:29:52" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SORBENT_TRAP_APS_CODE,category Subpartition columns"/>
                        <category _I_D="d4239b13-cba3-4aab-96d9-4170691ba02d" name="Constraints" order-num="4" child-type="constraint" transformed="2022-07-18 16:29:52" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SORBENT_TRAP_APS_CODE,category Constraints">
                            <constraint _I_D="1ab6e4dd-9aa0-430f-a9a2-30c8e2b7e116" name="pk_sorbent_trap_aps_code" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-07-18 16:29:52" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SORBENT_TRAP_APS_CODE,category Constraints,constraint PK_SORBENT_TRAP_APS_CODE" mdl-applying-result="applying-success" mdl-applied="2022-07-18 16:30:13">
                                <category _I_D="bf4606cb-4266-4f09-b66f-ba88052b7bdb" name="Columns" order-num="0" transformed="2022-07-18 16:29:52" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SORBENT_TRAP_APS_CODE,category Constraints,constraint PK_SORBENT_TRAP_APS_CODE,category Columns">
                                    <column _I_D="d8293330-c864-40f1-ae60-263049c1dbc6" name="sorbent_trap_aps_cd" transformed="2022-07-18 16:29:52" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SORBENT_TRAP_APS_CODE,category Constraints,constraint PK_SORBENT_TRAP_APS_CODE,category Columns,column SORBENT_TRAP_APS_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="d15ae58b-a0b7-40db-b929-1602de4fa0ec" name="Indexes" order-num="5" child-type="index" transformed="2022-07-18 16:29:52" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SORBENT_TRAP_APS_CODE,category Indexes"/>
                        <category _I_D="89d85bb8-fc48-4b24-9743-59cf437831be" name="Triggers" order-num="6" child-type="trigger" transformed="2022-07-18 16:29:52" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SORBENT_TRAP_APS_CODE,category Triggers"/>
                        <category _I_D="5256612e-84d8-40e5-8a7e-d9aad92053d8" name="Partitions" order-num="7" child-type="partition" transformed="2022-07-18 16:29:52" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table SORBENT_TRAP_APS_CODE,category Partitions"/>
                    </table>
                    <table _I_D="9dad3465-fc8f-403e-939b-397246e37986" name="train_qa_status_code" transformed="2022-07-18 16:34:22" is-typed="N" comment="Lookup table of sampling train QA status. " partitioned="NO" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TRAIN_QA_STATUS_CODE" mdl-applying-result="applying-success" mdl-applied="2022-07-18 16:34:42">
                        <category _I_D="866d8240-78a0-42e2-b2f2-b28578d72678" name="Columns" order-num="0" child-type="column" transformed="2022-07-18 16:34:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TRAIN_QA_STATUS_CODE,category Columns">
                            <column _I_D="bc11ac5a-d0ca-48fd-8541-ef13703fbd6c" name="train_qa_status_cd" table-schema="CAMDECMPSMD" table-name="TRAIN_QA_STATUS_CODE" dt-name="CHARACTER VARYING" dt-attr-1="10" transformed="2022-07-18 16:34:22" ordinal-position="1" is-nullable="N" comment="Code used to identify sampling train QA status. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TRAIN_QA_STATUS_CODE,category Columns,column TRAIN_QA_STATUS_CD" mdl-applying-result="applying-success"/>
                            <column _I_D="d2ae0ec6-46d0-4ca9-89f5-24327e962bd9" name="train_qa_status_description" table-schema="CAMDECMPSMD" table-name="TRAIN_QA_STATUS_CODE" dt-name="CHARACTER VARYING" dt-attr-1="1000" transformed="2022-07-18 16:34:22" ordinal-position="2" is-nullable="N" comment="Description of a sampling train QA status. " artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TRAIN_QA_STATUS_CODE,category Columns,column TRAIN_QA_STATUS_DESCRIPTION" mdl-applying-result="applying-success"/>
                        </category>
                        <category _I_D="e956306e-4a0f-4370-9d47-675a5611aec2" name="Partition columns" order-num="1" child-type="column" transformed="2022-07-18 16:34:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TRAIN_QA_STATUS_CODE,category Partition columns"/>
                        <category _I_D="1506b5a0-5c7f-463e-bd14-f16c6be7fa36" name="Subpartition columns" order-num="2" child-type="column" transformed="2022-07-18 16:34:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TRAIN_QA_STATUS_CODE,category Subpartition columns"/>
                        <category _I_D="76583cda-16ff-4cb8-95a8-e40dae060054" name="Constraints" order-num="4" child-type="constraint" transformed="2022-07-18 16:34:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TRAIN_QA_STATUS_CODE,category Constraints">
                            <constraint _I_D="03ffc46d-b418-45e6-8857-b08f85a2d315" name="pk_train_qa_status_cd" constraint-type="PRIMARY KEY" constraint-type-desc="PRIMARY KEY" generated="USER" transformed="2022-07-18 16:34:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TRAIN_QA_STATUS_CODE,category Constraints,constraint PK_TRAIN_QA_STATUS_CD" mdl-applying-result="applying-success" mdl-applied="2022-07-18 16:34:42">
                                <category _I_D="b79caa95-5daf-49cc-9c74-b3dc5f9d8825" name="Columns" order-num="0" transformed="2022-07-18 16:34:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TRAIN_QA_STATUS_CODE,category Constraints,constraint PK_TRAIN_QA_STATUS_CD,category Columns">
                                    <column _I_D="382f57d0-be4d-49a5-8343-2e5d447b8e9a" name="train_qa_status_cd" transformed="2022-07-18 16:34:22" ordinal-position="1" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TRAIN_QA_STATUS_CODE,category Constraints,constraint PK_TRAIN_QA_STATUS_CD,category Columns,column TRAIN_QA_STATUS_CD" mdl-applying-result="applying-success"/>
                                </category>
                            </constraint>
                        </category>
                        <category _I_D="0163c527-0a8a-4981-8c34-eadb0d6ccf65" name="Indexes" order-num="5" child-type="index" transformed="2022-07-18 16:34:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TRAIN_QA_STATUS_CODE,category Indexes"/>
                        <category _I_D="a66eb8a8-8d1c-48d6-8181-51ba95a1924c" name="Triggers" order-num="6" child-type="trigger" transformed="2022-07-18 16:34:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TRAIN_QA_STATUS_CODE,category Triggers"/>
                        <category _I_D="c5b0a59a-ee8d-4ee0-be35-6411d9300d73" name="Partitions" order-num="7" child-type="partition" transformed="2022-07-18 16:34:22" artificial-src-full-name="category Schemas,schema CAMDECMPSMD,category Tables,table TRAIN_QA_STATUS_CODE,category Partitions"/>
                    </table>
                </category>
                <category _I_D="4bde7519-2575-4aff-9231-0f34e9ecf5ef" name="Foreign tables" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="foreigntable"/>
                <category _I_D="18273e77-5f06-4665-843b-b92ca5714578" name="Views" order-num="2" objects-loading="main" subcategories-loading="none" child-type="view">
                    <view _I_D="a4cf9617-ad15-4de8-a3bf-f27c77620550" name="vw_cross_check_catalog_value" context="vw_cross_check_catalog_value" subcategories-loading="none" object-loading="main">
                        <category _I_D="5b610b43-ab5d-4d53-b1d8-cce470edb23d" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="15e99b57-6cd4-4597-a2cf-1d535806a737" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="2b94fe04-87e7-4310-b4cb-e32dcb05a60d" name="vw_defaults_master_data_relationships" context="vw_defaults_master_data_relationships" subcategories-loading="none" object-loading="main">
                        <category _I_D="55adb3b2-f934-4aa7-bf01-e1600e7b8ba5" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="624cdacb-7af9-4876-aeb8-cff3ba04a11c" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="f2d991b7-dd8b-4889-b714-9b6da9b47b1c" name="vw_formula_master_data_relationships" context="vw_formula_master_data_relationships" subcategories-loading="none" object-loading="main">
                        <category _I_D="bf064926-bf3c-4591-ae6a-ddf554fd3fb0" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="434bab24-1f20-4755-92c9-8bf3baa82c2d" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="3384177e-25ab-44cd-922c-a853b0a4deb3" name="vw_load_master_data_relationships" context="vw_load_master_data_relationships" subcategories-loading="none" object-loading="main">
                        <category _I_D="cbed388c-692e-4750-8703-64611189c098" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="d9dbbeb4-e283-4f6d-9c48-fee5cb963cbe" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="7d26c3e3-de85-4a8f-87de-19ec66c870f0" name="vw_matsmethods_master_data_relationships" context="vw_matsmethods_master_data_relationships" subcategories-loading="none" object-loading="main">
                        <category _I_D="9c48592b-a09d-474c-b784-6225bcf40ad7" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="aeeb5940-cccf-494a-a293-af9b1e18e941" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="195da3f0-2e04-4cb7-aeab-a6d8ee9bfc48" name="vw_methods_master_data_relationships" context="vw_methods_master_data_relationships" subcategories-loading="none" object-loading="main">
                        <category _I_D="a463dd9c-7b71-4ca6-a494-a77791c72cf0" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="4fa71ab7-ebf1-4c15-b580-64af034eefc6" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="e5c457e6-388a-41a5-b037-2126e999bcda" name="vw_quallee_master_data_relationships" context="vw_quallee_master_data_relationships" subcategories-loading="none" object-loading="main">
                        <category _I_D="5c1cea0d-ac76-4a9b-93c1-25fce03d61ff" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="0072b704-779a-4f35-90ae-aee4e959f107" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="ca510ef6-2309-4a41-8edd-d5dc220e5a06" name="vw_span_master_data_relationships" context="vw_span_master_data_relationships" subcategories-loading="none" object-loading="main">
                        <category _I_D="76124116-7b5a-4915-82ad-b9e043dddccd" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="a6a83d24-39fd-4def-9272-26a2177de379" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="ea363b19-4dce-4155-be66-aaf9a4becf35" name="vw_systemcomponent_master_data_relationships" context="vw_systemcomponent_master_data_relationships" subcategories-loading="none" object-loading="main">
                        <category _I_D="6aab75b0-071f-4f79-95d5-67dea238fad6" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="45b66ec8-351c-4f85-bb56-39a4afb007ab" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="993c5e2b-37fc-4510-bd1c-1ba1d79fc475" name="vw_systemfuel_master_data_relationships" context="vw_systemfuel_master_data_relationships" subcategories-loading="none" object-loading="main">
                        <category _I_D="f3644137-68ed-4915-9bad-c91b92c410b1" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="52322c36-1c2d-4c58-9c75-709fbc528cf9" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="90c42fcc-41b6-4323-b1ae-9cfd362ceddb" name="vw_unitcontrol_master_data_relationships" context="vw_unitcontrol_master_data_relationships" subcategories-loading="none" object-loading="main">
                        <category _I_D="e9d73638-2447-43c4-b912-2124ee78a88e" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="bdf6faac-2343-4e11-b788-de3ac751bd6e" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                    <view _I_D="5787dcb8-e741-4b40-ab25-f325890668ba" name="vw_unitfuel_master_data_relationships" context="vw_unitfuel_master_data_relationships" subcategories-loading="none" object-loading="main">
                        <category _I_D="b689fbfc-b406-4b73-b187-609efe151027" name="Columns" order-num="0" objects-loading="none" subcategories-loading="none" child-type="column"/>
                        <category _I_D="fb1544a3-4f66-482e-88af-956c2dd6c194" name="Triggers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="trigger" mdl-expected-node-count="0"/>
                    </view>
                </category>
                <category _I_D="fb1a405b-8228-4c94-bc6e-7dfa0a2925a6" name="Collations" order-num="3" objects-loading="empty" subcategories-loading="full" child-type="collation"/>
                <category _I_D="b6acf552-b746-4d03-89ab-78b41dbeed8c" name="Operators" order-num="4" objects-loading="empty" subcategories-loading="full" child-type="operator"/>
                <category _I_D="e32508de-cf47-4c99-9548-01d88883346b" name="Rules" order-num="5" objects-loading="empty" subcategories-loading="full" child-type="rule"/>
                <category _I_D="2d6cf389-57f0-482e-a766-07cb63452167" name="FTS Configurations" order-num="6" objects-loading="empty" subcategories-loading="full" child-type="ftsconfiguration"/>
                <category _I_D="a046ecf3-c33a-4a3e-b642-f9c1ee04c7fb" name="FTS Dictionaries" order-num="7" objects-loading="empty" subcategories-loading="full" child-type="ftsdictionary"/>
                <category _I_D="f3b4acb5-561c-4d63-a42f-8c6d07637d34" name="Functions" order-num="8" objects-loading="empty" subcategories-loading="full" child-type="function"/>
                <category _I_D="b66d01c0-f987-4edd-9fc9-8c308765c5cc" name="Trigger functions" order-num="9" objects-loading="empty" subcategories-loading="full" child-type="function"/>
                <category _I_D="86525941-2e3c-441c-9ad1-6d33a2cd20fa" name="Procedures" order-num="10" objects-loading="empty" subcategories-loading="full" child-type="procedure"/>
                <category _I_D="ebdb708e-1bb1-444e-8897-48c1c1ce0182" name="Sequences" order-num="11" objects-loading="main" subcategories-loading="full" child-type="sequence">
                    <sequence _I_D="73649143-755b-4279-8ab9-8be810e0ea5a" name="check_catalog_parameter_check_catalog_param_id_seq" context="check_catalog_parameter_check_catalog_param_id_seq" subcategories-loading="full" object-loading="main" data-type="integer" start-value="1" minimum-value="1" maximum-value="2147483647" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL"/>
                    <sequence _I_D="467fcfdd-6aa8-4c94-822f-0b6c521c837e" name="check_catalog_plugin_check_catalog_plugin_id_seq" context="check_catalog_plugin_check_catalog_plugin_id_seq" subcategories-loading="full" object-loading="main" data-type="integer" start-value="1" minimum-value="1" maximum-value="2147483647" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL"/>
                    <sequence _I_D="a6c32d46-4c25-4b81-8365-d361ae27148e" name="check_parameter_code_check_param_id_seq" context="check_parameter_code_check_param_id_seq" subcategories-loading="full" object-loading="main" data-type="integer" start-value="1" minimum-value="1" maximum-value="2147483647" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL"/>
                    <sequence _I_D="e4cf9a78-7690-4d47-b6cb-588f01390336" name="cross_check_catalog_cross_chk_catalog_id_seq" context="cross_check_catalog_cross_chk_catalog_id_seq" subcategories-loading="full" object-loading="main" data-type="integer" start-value="98" minimum-value="1" maximum-value="2147483647" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL" last-value="108"/>
                    <sequence _I_D="cd9552e5-58f4-445e-a38e-51a4763258b4" name="cross_check_catalog_value_cross_chk_catalog_value_id_seq" context="cross_check_catalog_value_cross_chk_catalog_value_id_seq" subcategories-loading="full" object-loading="main" data-type="integer" start-value="1647" minimum-value="1" maximum-value="2147483647" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL" last-value="2659"/>
                    <sequence _I_D="f95f2cb1-631a-4efb-b167-a9cea2d6a78d" name="parameter_method_to_formula_param_method_to_formula_id_seq" context="parameter_method_to_formula_param_method_to_formula_id_seq" subcategories-loading="full" object-loading="main" data-type="integer" start-value="1" minimum-value="1" maximum-value="2147483647" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL" last-value="72"/>
                    <sequence _I_D="f26c0282-5369-45f0-9591-89ec56c44aec" name="response_catalog_response_catalog_id_seq" context="response_catalog_response_catalog_id_seq" subcategories-loading="full" object-loading="main" data-type="integer" start-value="1" minimum-value="1" maximum-value="2147483647" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL"/>
                    <sequence _I_D="c468b5cb-42cb-4cb7-a3f1-a4721a7524d9" name="rule_check_condition_rule_check_condition_id_seq" context="rule_check_condition_rule_check_condition_id_seq" subcategories-loading="full" object-loading="main" data-type="integer" start-value="1" minimum-value="1" maximum-value="2147483647" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL"/>
                    <sequence _I_D="b8f6d94d-036c-494e-84f4-d155c13320ab" name="system_parameter_sys_param_id_seq" context="system_parameter_sys_param_id_seq" subcategories-loading="full" object-loading="main" data-type="integer" start-value="1" minimum-value="1" maximum-value="2147483647" increment="1" cycle-option="NO" cache-size="1" owner="uImcwuf4K9dyaxeL"/>
                </category>
                <category _I_D="1d25a19c-d168-4890-9352-31f6547dca06" name="User defined types" order-num="12" objects-loading="empty" subcategories-loading="full" child-type="type"/>
                <category _I_D="ea31a32a-04b7-46ce-84dc-840ffbccc7a6" name="Domains" order-num="13" objects-loading="empty" subcategories-loading="full" child-type="domain"/>
                <category _I_D="9d314b12-7c3e-46fc-8596-5d33e220e713" name="Materialized Views" order-num="14" objects-loading="empty" subcategories-loading="full" child-type="materialized-view"/>
                <category _I_D="45dfe00d-d986-45ae-8d9d-42d1f79eeebf" name="Aggregates" order-num="15" objects-loading="empty" subcategories-loading="full" child-type="aggregate"/>
            </schema>
            <schema _I_D="ab549f98-bbdb-455b-bc76-5e91cb75dfe1" name="camdecmpswks" context="camdecmpswks" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="02b57110-7c5d-4dc1-9266-b347029fbc21" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="f34f342f-2e8e-4bae-a00a-dd93fc0cc108" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="bf03df88-c43d-4f39-8b16-a76c726b2595" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="fffe9017-c9f8-44f7-b22b-b26ec1774f74" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="4305c7f1-780a-458b-9d5d-a8eb7d3cf1c6" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="21cd3105-5e72-4249-8114-211ec72f1c24" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="5a155191-2f17-4918-9fba-e62b8569dfd2" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="4158d1c3-79f3-4e21-8210-80fca3b602e7" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="00012f32-f9d7-4f2e-8db6-2f5f6dc5b6fc" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="edbb4942-33a0-4c81-a5b0-a35899f9a43f" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="316eee68-5d71-44d6-8391-553448c8e9e5" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="e194d0e3-eda6-464f-a531-20f7dfb1f102" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="fb130a0b-2163-4037-a170-fde7b389d3f3" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="4c00685d-5464-4d54-b927-6d556ee0ff1c" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="077edd26-9c7f-4de5-9484-7f44e66e7bb6" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="ea2fabfa-7a10-403a-801a-453ee8621555" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="41835943-514b-4e2a-91e2-aceef5b1ba35" name="camdmd" context="camdmd" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="abb6abf8-6b5b-4eae-8cfb-3771349e6068" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="08021847-b372-44ee-adc9-7e16f3278534" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="647510b2-95cf-4942-83e8-e7c17a8ac4ae" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="53853e0b-d5fd-4633-ab36-b4678e8896e6" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="ea1e94af-f3f5-4c3b-9517-8be96045f36b" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="3e647871-bbcf-4dcc-a066-f958a0b75c72" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="8ce37ad3-6942-4a0b-a3bc-1af3e5c5656c" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="6204744a-6a95-4ca9-8218-4d75b2c448a2" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="94440566-4dd6-4191-a055-630bc6c722d8" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="c9f40ca0-1f1f-4e14-b932-e818cc59e883" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="26e033d3-5316-4c65-b210-116b1b003a4a" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="3bc3e32f-151a-4450-926f-049b5a1c48c6" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="1484cd94-ffe1-4c29-967b-95da8bb91a18" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="922a7441-9ccd-458b-87eb-11b94ae72f84" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="d80c4616-8681-4d7e-b294-8984e41814d0" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="17fe747c-68e2-4fa6-bdbb-d04d7c9af019" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
            <schema _I_D="d40642da-df81-486c-8679-eb5095d829be" name="public" context="public" subcategories-loading="none" object-loading="extended" schema-owner="uImcwuf4K9dyaxeL">
                <category _I_D="d7554435-a421-42da-ac23-23281a833257" name="Tables" order-num="0" objects-loading="none" subcategories-loading="none" child-type="table"/>
                <category _I_D="b4908c81-25a0-4b81-b711-454c75668718" name="Foreign tables" order-num="1" objects-loading="none" subcategories-loading="none" child-type="foreigntable"/>
                <category _I_D="d1c2d07b-8e00-4d44-90fe-2ff6dcdf1113" name="Views" order-num="2" objects-loading="none" subcategories-loading="none" child-type="view"/>
                <category _I_D="0cf8e274-124b-4f1b-ab41-7ce113336520" name="Collations" order-num="3" objects-loading="none" subcategories-loading="none" child-type="collation"/>
                <category _I_D="9c072ab5-0f00-4dd1-a8a3-d63dd38b3b3a" name="Operators" order-num="4" objects-loading="none" subcategories-loading="none" child-type="operator"/>
                <category _I_D="69d36419-c337-42d9-80bd-49bde08cd103" name="Rules" order-num="5" objects-loading="none" subcategories-loading="none" child-type="rule"/>
                <category _I_D="adfed9f6-bec8-495f-9ace-89e6842a73ff" name="FTS Configurations" order-num="6" objects-loading="none" subcategories-loading="none" child-type="ftsconfiguration"/>
                <category _I_D="a28f2dae-0342-4cb9-9adf-42fdf6bc4f75" name="FTS Dictionaries" order-num="7" objects-loading="none" subcategories-loading="none" child-type="ftsdictionary"/>
                <category _I_D="cb7c8f7a-7cfa-4566-8432-c5ae30f8bd8c" name="Functions" order-num="8" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="d93ad906-84c8-49b0-803a-6777756bafa4" name="Trigger functions" order-num="9" objects-loading="none" subcategories-loading="none" child-type="function"/>
                <category _I_D="b4c15578-63ef-4bb9-80ca-03bb6826beb3" name="Procedures" order-num="10" objects-loading="none" subcategories-loading="none" child-type="procedure"/>
                <category _I_D="596da914-9417-4732-84c1-d8f6057225af" name="Sequences" order-num="11" objects-loading="none" subcategories-loading="none" child-type="sequence"/>
                <category _I_D="a1567af6-8b11-4f5b-b519-da44904cc5d3" name="User defined types" order-num="12" objects-loading="none" subcategories-loading="none" child-type="type"/>
                <category _I_D="d04b976c-33f5-4c85-a2a6-c998b2a3493a" name="Domains" order-num="13" objects-loading="none" subcategories-loading="none" child-type="domain"/>
                <category _I_D="60d2a446-8062-446d-a128-760bd5e8a3f0" name="Materialized Views" order-num="14" objects-loading="none" subcategories-loading="none" child-type="materialized-view"/>
                <category _I_D="60b0bc17-680a-4578-b63e-946197912c51" name="Aggregates" order-num="15" objects-loading="none" subcategories-loading="none" child-type="aggregate"/>
            </schema>
        </category>
        <category _I_D="f7993fc1-0a9a-4072-8d49-84355ed9131a" name="Foreign Servers" order-num="1" objects-loading="empty" subcategories-loading="full" child-type="foreign-server"/>
        <category-group _I_D="fbe34b19-2d0e-42fd-ac24-0bae53cef6f7" name="Server Level Objects" order-num="2" objects-loading="none" subcategories-loading="none">
            <category _I_D="156ac9c9-dc16-4972-a2d9-9b42a8c0d67b" name="Contexts" order-num="0" objects-loading="none" subcategories-loading="none" child-type="context"/>
        </category-group>
        <category _I_D="0043fb20-09e1-49ac-a933-b7577849c4c5" name="SQL Scripts" script-root="true" disable-autocommit="true" data-format="DD-MON-RR" sql-plus-settings="{&quot;tnsAliases&quot;:[]}"/>
    </metadata>
</tree>