-- PROCEDURE: camdecmpswks.upd_session_calculated_qa(character varying, character varying, character, character varying)

DROP PROCEDURE IF EXISTS camdecmpswks.upd_session_calculated_qa(character varying, character varying, character, character varying);

CREATE OR REPLACE PROCEDURE camdecmpswks.upd_session_calculated_qa(
	v_session_id character varying,
	v_current_userid character varying,
	INOUT v_result character,
	INOUT v_error_msg character varying)
LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
	v_result := 'T';
	v_error_msg := '';
	
	UPDATE camdecmpswks.TEST_SUMMARY wks
	SET CALC_TEST_RESULT_CD = calc.CALC_TEST_RESULT_CD,
		CALC_SPAN_VALUE = calc.CALC_SPAN_VALUE,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.TEST_SUMMARY calc
	WHERE calc.CHK_SESSION_ID = v_session_id
	AND wks.TEST_SUM_ID = calc.TEST_SUM_ID;

	UPDATE camdecmpswks.LINEARITY_SUMMARY wks
	SET CALC_MEAN_REF_VALUE = calc.CALC_MEAN_REF_VALUE,
		CALC_MEAN_MEASURED_VALUE = calc.CALC_MEAN_MEASURED_VALUE,
		CALC_APS_IND = calc.CALC_APS_IND,
		CALC_PERCENT_ERROR = calc.CALC_PERCENT_ERROR,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.LINEARITY_SUMMARY calc
	WHERE calc.CHK_SESSION_ID = v_session_id
	AND wks.LIN_SUM_ID = calc.LIN_SUM_ID;

	UPDATE camdecmpswks.HG_TEST_SUMMARY wks
	SET CALC_MEAN_REF_VALUE = calc.CALC_MEAN_REF_VALUE,
		CALC_MEAN_MEASURED_VALUE = calc.CALC_MEAN_MEASURED_VALUE,
		CALC_APS_IND = calc.CALC_APS_IND,
		CALC_PERCENT_ERROR = calc.CALC_PERCENT_ERROR,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.HG_TEST_SUMMARY calc
	WHERE calc.CHK_SESSION_ID = v_session_id 
	AND wks.HG_TEST_SUM_ID = calc.HG_TEST_SUM_ID;

	UPDATE camdecmpswks.RATA wks
	SET CALC_RATA_FREQUENCY_CD = calc.CALC_RATA_FREQUENCY_CD,
		CALC_RELATIVE_ACCURACY = calc.CALC_RELATIVE_ACCURACY,
		CALC_OVERALL_BIAS_ADJ_FACTOR = calc.CALC_OVERALL_BIAS_ADJ_FACTOR,
		CALC_NUM_LOAD_LEVEL = calc.CALC_NUM_LOAD_LEVEL,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.RATA calc
	WHERE calc.CHK_SESSION_ID = v_session_id 
	AND wks.RATA_ID = calc.RATA_ID;

	UPDATE camdecmpswks.RATA_SUMMARY wks
	SET CALC_MEAN_RATA_REF_VALUE = calc.CALC_MEAN_RATA_REF_VALUE,
		CALC_MEAN_CEM_VALUE = calc.CALC_MEAN_CEM_VALUE,
		CALC_APS_IND = calc.CALC_APS_IND,
		CALC_MEAN_DIFF = calc.CALC_MEAN_DIFF,
		CALC_STND_DEV_DIFF = calc.CALC_STND_DEV_DIFF,
		CALC_CONFIDENCE_COEF = calc.CALC_CONFIDENCE_COEF,
		CALC_T_VALUE = calc.CALC_T_VALUE,
		CALC_RELATIVE_ACCURACY = calc.CALC_RELATIVE_ACCURACY,
		CALC_BIAS_ADJ_FACTOR = calc.CALC_BIAS_ADJ_FACTOR,
		CALC_AVG_GROSS_UNIT_LOAD = calc.CALC_AVG_GROSS_UNIT_LOAD,
		CALC_CALC_WAF = calc.CALC_CALC_WAF,
		CALC_STACK_AREA = calc.CALC_STACK_AREA,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.RATA_SUMMARY calc
	WHERE calc.CHK_SESSION_ID = v_session_id 
	AND wks.RATA_SUM_ID = calc.RATA_SUM_ID;

	UPDATE camdecmpswks.RATA_RUN wks
	SET CALC_RATA_REF_VALUE = calc.CALC_RATA_REF_VALUE,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.RATA_RUN calc
	WHERE calc.CHK_SESSION_ID = v_session_id 
	AND wks.RATA_RUN_ID = calc.RATA_RUN_ID;
	
	UPDATE camdecmpswks.FLOW_RATA_RUN wks
	SET CALC_DRY_MOLECULAR_WEIGHT = calc.CALC_DRY_MOLECULAR_WEIGHT,
	    CALC_WET_MOLECULAR_WEIGHT = calc.CALC_WET_MOLECULAR_WEIGHT,
		CALC_AVG_VEL_W_WALL = calc.CALC_AVG_VEL_W_WALL,
		CALC_AVG_VEL_WO_WALL = calc.CALC_AVG_VEL_WO_WALL,
		CALC_CALC_WAF = calc.CALC_CALC_WAF,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.FLOW_RATA_RUN calc
	WHERE calc.CHK_SESSION_ID = v_session_id 
	AND wks.FLOW_RATA_RUN_ID = calc.FLOW_RATA_RUN_ID;
	
	UPDATE camdecmpswks.RATA_TRAVERSE wks
	SET CALC_CALC_VEL = calc.CALC_CALC_VEL,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.RATA_TRAVERSE calc
	WHERE calc.CHK_SESSION_ID = v_session_id 
	AND wks.RATA_TRAVERSE_ID = calc.RATA_TRAVERSE_ID;
	
	UPDATE camdecmpswks.CALIBRATION_INJECTION wks
	SET CALC_ZERO_APS_IND = calc.CALC_ZERO_APS_IND,
		CALC_ZERO_CAL_ERROR = calc.CALC_ZERO_CAL_ERROR,
		CALC_UPSCALE_APS_IND = calc.CALC_UPSCALE_APS_IND,
		CALC_UPSCALE_CAL_ERROR = calc.CALC_UPSCALE_CAL_ERROR,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.CALIBRATION_INJECTION calc
	WHERE calc.CHK_SESSION_ID = v_session_id 
	AND wks.CAL_INJ_ID = calc.CAL_INJ_ID;
	
	UPDATE camdecmpswks.ON_OFF_CAL wks
	SET CALC_ONLINE_ZERO_APS_IND = calc.CALC_ONLINE_ZERO_APS_IND,
		CALC_ONLINE_ZERO_CAL_ERROR = calc.CALC_ONLINE_ZERO_CAL_ERROR,
		CALC_ONLINE_UPSCALE_APS_IND = calc.CALC_ONLINE_UPSCALE_APS_IND,
		CALC_ONLINE_UPSCALE_CAL_ERROR = calc.CALC_ONLINE_UPSCALE_CAL_ERROR,
		CALC_OFFLINE_ZERO_APS_IND = calc.CALC_OFFLINE_ZERO_APS_IND,
		CALC_OFFLINE_ZERO_CAL_ERROR = calc.CALC_OFFLINE_ZERO_CAL_ERROR,
		CALC_OFFLINE_UPSCALE_APS_IND = calc.CALC_OFFLINE_UPSCALE_APS_IND,
		CALC_OFFLINE_UPSCALE_CAL_ERROR = calc.CALC_OFFLINE_UPSCALE_CAL_ERROR,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.ON_OFF_CAL calc
	WHERE calc.CHK_SESSION_ID = v_session_id 
	AND wks.ON_OFF_CAL_ID = calc.ON_OFF_CAL_ID;
	
	UPDATE camdecmpswks.CYCLE_TIME_INJECTION wks
	SET CALC_INJECTION_CYCLE_TIME = calc.CALC_INJECTION_CYCLE_TIME,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.CYCLE_TIME_INJECTION calc
	WHERE calc.CHK_SESSION_ID = v_session_id 
	AND wks.CYCLE_TIME_INJ_ID = calc.CYCLE_TIME_INJ_ID;

	UPDATE camdecmpswks.CYCLE_TIME_SUMMARY wks
	SET CALC_TOTAL_TIME = calc.CALC_TOTAL_TIME,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.CYCLE_TIME_SUMMARY calc
	WHERE calc.CHK_SESSION_ID = v_session_id 
	AND wks.CYCLE_TIME_SUM_ID = calc.CYCLE_TIME_SUM_ID;
	
	UPDATE camdecmpswks.FLOW_TO_LOAD_REFERENCE wks
	SET CALC_AVG_GROSS_UNIT_LOAD = calc.CALC_AVG_GROSS_UNIT_LOAD,
		CALC_AVG_REF_METHOD_FLOW = calc.CALC_AVG_REF_METHOD_FLOW,
		CALC_REF_FLOW_LOAD_RATIO = calc.CALC_REF_FLOW_LOAD_RATIO,
		CALC_REF_GHR = calc.CALC_REF_GHR,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.FLOW_TO_LOAD_REFERENCE calc
	WHERE calc.CHK_SESSION_ID = v_session_id 
	AND wks.FLOW_LOAD_REF_ID = calc.FLOW_LOAD_REF_ID;
	
	UPDATE camdecmpswks.AE_CORRELATION_TEST_SUM wks
	SET CALC_MEAN_REF_VALUE = calc.CALC_MEAN_REF_VALUE,
		CALC_AVG_HRLY_HI_RATE = calc.CALC_AVG_HRLY_HI_RATE,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.AE_CORRELATION_TEST_SUM calc
	WHERE calc.CHK_SESSION_ID = v_session_id 
	AND wks.AE_CORR_TEST_SUM_ID = calc.AE_CORR_TEST_SUM_ID;
	
	UPDATE camdecmpswks.AE_CORRELATION_TEST_RUN wks
	SET CALC_TOTAL_HI = calc.CALC_TOTAL_HI,
		CALC_HOURLY_HI_RATE = calc.CALC_HOURLY_HI_RATE,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.AE_CORRELATION_TEST_RUN calc
	WHERE calc.CHK_SESSION_ID = v_session_id 
	AND wks.AE_CORR_TEST_RUN_ID = calc.AE_CORR_TEST_RUN_ID;

	UPDATE camdecmpswks.AE_HI_GAS wks
	SET CALC_GAS_HI = calc.CALC_GAS_HI,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.AE_HI_GAS calc
	WHERE calc.CHK_SESSION_ID = v_session_id 
	AND wks.AE_HI_GAS_ID = calc.AE_HI_GAS_ID;
	
	UPDATE camdecmpswks.AE_HI_OIL wks
	SET CALC_OIL_HI = calc.CALC_OIL_HI,
	    CALC_OIL_MASS = calc.CALC_OIL_MASS,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.AE_HI_OIL calc
	WHERE calc.CHK_SESSION_ID = v_session_id 
	AND wks.AE_HI_OIL_ID = calc.AE_HI_OIL_ID;
	
	UPDATE camdecmpswks.UNIT_DEFAULT_TEST wks
	SET CALC_NOX_DEFAULT_RATE = calc.CALC_NOX_DEFAULT_RATE,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.UNIT_DEFAULT_TEST calc
	WHERE calc.CHK_SESSION_ID = v_session_id 
	AND wks.UNIT_DEFAULT_TEST_SUM_ID = calc.UNIT_DEFAULT_TEST_SUM_ID;

	-- update existing qa supp recs for submittable tests
	UPDATE camdecmpswks.QA_SUPP_DATA wks
	SET	MON_LOC_ID = calc.MON_LOC_ID,
		MON_SYS_ID = calc.MON_SYS_ID, 
		COMPONENT_ID = calc.COMPONENT_ID,
		TEST_TYPE_CD = calc.TEST_TYPE_CD, 
		TEST_REASON_CD = calc.TEST_REASON_CD, 
		TEST_NUM = calc.TEST_NUM, 
    	SPAN_SCALE = calc.SPAN_SCALE, 
		OP_LEVEL_CD = calc.OP_LEVEL_CD,
		BEGIN_DATE = CAST(calc.BEGIN_DATE AS DATE), 
		BEGIN_HOUR = calc.BEGIN_HOUR, 
		BEGIN_MIN = calc.BEGIN_MIN,
		END_DATE = CAST(calc.END_DATE AS DATE),
		END_HOUR = calc.END_HOUR,
		END_MIN = calc.END_MIN,
		RPT_PERIOD_ID = calc.RPT_PERIOD_ID,
		TEST_RESULT_CD = calc.TEST_RESULT_CD,
		OPERATING_CONDITION_CD = calc.OPERATING_CONDITION_CD,
		FUEL_CD = calc.FUEL_CD,
		GP_IND = calc.GP_IND,
		REINSTALLATION_DATE = CAST(calc.REINSTALLATION_DATE AS DATE),
		REINSTALLATION_HOUR = calc.REINSTALLATION_HOUR,
		--TEST_EXPIRE_DATE = CAST(calc.TEST_EXPIRE_DATE AS DATE),
		--TEST_EXPIRE_HOUR = calc.TEST_EXPIRE_HOUR,
		USERID = v_current_userid,
		UPDATE_DATE = CURRENT_TIMESTAMP
	FROM camdecmpscalc.QA_SUPP_DATA calc
	WHERE calc.CHK_SESSION_ID = v_session_id 
	AND wks.TEST_SUM_ID = calc.TEST_SUM_ID 
	AND (
		wks.SUBMISSION_AVAILABILITY_CD IS NULL OR
		wks.SUBMISSION_AVAILABILITY_CD IN ('GRANTED', 'REQUIRE')
	);

	-- set resync for qa supp recs for resubmittable tests with fatal errors
	UPDATE camdecmpswks.QA_SUPP_DATA
	SET SUBMISSION_AVAILABILITY_CD = 'RESYNC'
	WHERE SUBMISSION_AVAILABILITY_CD IN ('GRANTED', 'REQUIRE')
		AND TEST_SUM_ID IN (
			SELECT TST.TEST_SUM_ID 
			FROM (
				SELECT * FROM camdecmpscalc.TEST_SUMMARY
				WHERE CHK_SESSION_ID = v_session_id
			) TST
			LEFT JOIN camdecmpscalc.QA_SUPP_DATA SUP
				ON SUP.CHK_SESSION_ID = v_session_id 
				AND SUP.TEST_SUM_ID = TST.TEST_SUM_ID
			WHERE SUP.TEST_SUM_ID IS NULL
		);
		
	-- delete existing qa supp and qa supp attribute recs for unsubmitted tests with fatal errors
	DELETE FROM camdecmpswks.QA_SUPP_ATTRIBUTE
	WHERE QA_SUPP_DATA_ID IN (
		SELECT QA_SUPP_DATA_ID 
		FROM camdecmpswks.QA_SUPP_DATA 
		WHERE SUBMISSION_AVAILABILITY_CD IS NULL
			AND TEST_SUM_ID IN (
				SELECT TST.TEST_SUM_ID
				FROM (
					SELECT * FROM camdecmpscalc.TEST_SUMMARY
					WHERE CHK_SESSION_ID = v_session_id
				) TST
				LEFT JOIN camdecmpscalc.QA_SUPP_DATA SUP
					ON	SUP.CHK_SESSION_ID = v_session_id 
					AND SUP.TEST_SUM_ID = TST.TEST_SUM_ID
				WHERE SUP.TEST_SUM_ID IS NULL
			)
	);

	DELETE FROM camdecmpswks.QA_SUPP_DATA
	WHERE SUBMISSION_AVAILABILITY_CD IS NULL
		AND TEST_SUM_ID IN (
			SELECT TST.TEST_SUM_ID 
			FROM (
				SELECT * FROM camdecmpscalc.TEST_SUMMARY 
				WHERE CHK_SESSION_ID = v_session_id
			) TST
			LEFT JOIN camdecmpscalc.QA_SUPP_DATA SUP
				ON SUP.CHK_SESSION_ID = v_session_id 
				AND SUP.TEST_SUM_ID = TST.TEST_SUM_ID
			WHERE SUP.TEST_SUM_ID IS NULL
		);

	-- add qa supp recs
	WITH NEW_QA_SUPP_DATA(
		QA_SUPP_DATA_ID, 
		MON_LOC_ID, 
		MON_SYS_ID, 
		COMPONENT_ID, 
		TEST_TYPE_CD, 
		TEST_SUM_ID, 
		TEST_REASON_CD, 
		TEST_NUM, 
		OP_LEVEL_CD,
        SPAN_SCALE, 
		BEGIN_DATE, 
		BEGIN_HOUR, 
		BEGIN_MIN,
		END_DATE, 
		END_HOUR, 
		END_MIN, 
		RPT_PERIOD_ID, 
		TEST_RESULT_CD, 
		OPERATING_CONDITION_CD, 
		FUEL_CD,
		GP_IND, 
		REINSTALLATION_DATE, 
		REINSTALLATION_HOUR,
		--TEST_EXPIRE_DATE, 
		--TEST_EXPIRE_HOUR,
		USERID, 
		ADD_DATE
	) AS (
		SELECT uuid_generate_v4() AS QA_SUPP_DATA_ID,
			MON_LOC_ID, 
			MON_SYS_ID, 
			COMPONENT_ID, 
			TEST_TYPE_CD, 
			TEST_SUM_ID, 
			TEST_REASON_CD, 
			TEST_NUM, 
			OP_LEVEL_CD,
      		SPAN_SCALE, 
			CAST(BEGIN_DATE AS DATE) AS BEGIN_DATE,
			BEGIN_HOUR, 
			BEGIN_MIN,
			CAST(END_DATE AS DATE) AS END_DATE,
			END_HOUR, 
			END_MIN, 
			RPT_PERIOD_ID, 
			TEST_RESULT_CD, 
			OPERATING_CONDITION_CD, 
			FUEL_CD, 
			GP_IND, 
			CAST(REINSTALLATION_DATE AS DATE) AS REINSTALLATION_DATE,
			REINSTALLATION_HOUR,
			--CAST(TEST_EXPIRE_DATE AS DATE) AS TEST_EXPIRE_DATE,
			--TEST_EXPIRE_HOUR,
			v_current_userid AS USERID, 
			CURRENT_TIMESTAMP AS ADD_DATE
		FROM camdecmpscalc.QA_SUPP_DATA qsd
		WHERE CHK_SESSION_ID = v_session_id 		
              /* Use of Not Exists to replace failed Not In */
          and not exists
              (
                select  1
                  from  camdecmpswks.QA_SUPP_DATA exs
                 where  exs.test_sum_id = qsd.test_sum_id 
              )
		/*	AND TEST_SUM_ID NOT IN (
				SELECT TEST_SUM_ID FROM camdecmpswks.QA_SUPP_DATA
			
		*/
	)

	INSERT INTO camdecmpswks.QA_SUPP_DATA(
		QA_SUPP_DATA_ID,
		MON_LOC_ID, 
		MON_SYS_ID, 
		COMPONENT_ID, 
		TEST_TYPE_CD, 
		TEST_SUM_ID, 
		TEST_REASON_CD, 
		TEST_NUM, 
		OP_LEVEL_CD,
        SPAN_SCALE, 
		BEGIN_DATE, 
		BEGIN_HOUR, 
		BEGIN_MIN,
		END_DATE, 
		END_HOUR, 
		END_MIN, 
		RPT_PERIOD_ID, 
		TEST_RESULT_CD, 
		OPERATING_CONDITION_CD, 
		FUEL_CD,  
		GP_IND, 
		REINSTALLATION_DATE, 
		REINSTALLATION_HOUR,
		--TEST_EXPIRE_DATE, 
		--TEST_EXPIRE_HOUR,
		USERID, 
		ADD_DATE
	)
	SELECT * FROM NEW_QA_SUPP_DATA;

	-- delete qa supp attribute recs if for submittable tests 
	DELETE FROM camdecmpswks.QA_SUPP_ATTRIBUTE
	WHERE QA_SUPP_DATA_ID IN (
		SELECT QA_SUPP_DATA_ID
		FROM camdecmpswks.QA_SUPP_DATA
		WHERE (
			SUBMISSION_AVAILABILITY_CD IS NULL OR 
			SUBMISSION_AVAILABILITY_CD IN ('GRANTED', 'REQUIRE')
		) AND TEST_SUM_ID IN (
			SELECT TEST_SUM_ID
			FROM camdecmpscalc.TEST_SUMMARY
			WHERE CHK_SESSION_ID = v_session_id
		)
	);

	-- (re)add qa supp attribute recs
	--UPDATE camdecmpscalc.QA_SUPP_ATTRIBUTE calc
	--SET QA_SUPP_DATA_ID = wks.QA_SUPP_DATA_ID
	--FROM camdecmpswks.QA_SUPP_DATA wks
	--WHERE calc.CHK_SESSION_ID = v_session_id
	--	AND calc.TEST_SUM_ID = wks.TEST_SUM_ID 
	-- 	AND (
	--		wks.SUBMISSION_AVAILABILITY_CD IS NULL OR
	--		wks.SUBMISSION_AVAILABILITY_CD IN ('GRANTED', 'REQUIRE')
	--	);
		
	WITH NEW_QA_SUPP_ATTRIBUTE(
		QA_SUPP_ATTRIBUTE_ID,
		QA_SUPP_DATA_ID,
		ATTRIBUTE_NAME,
		ATTRIBUTE_VALUE,
		USERID,
		ADD_DATE
	) AS (
		SELECT uuid_generate_v4() AS QA_SUPP_ATTRIBUTE_ID,
			wks.QA_SUPP_DATA_ID,
			calc.ATTRIBUTE_NAME,
			calc.ATTRIBUTE_VALUE, 
			v_current_userid AS USERID,
			CURRENT_TIMESTAMP AS ADD_DATE
		FROM camdecmpscalc.QA_SUPP_ATTRIBUTE calc
		JOIN camdecmpswks.QA_SUPP_DATA wks USING (TEST_SUM_ID)
		WHERE calc.CHK_SESSION_ID = v_session_id
	)
			
	INSERT INTO camdecmpswks.QA_SUPP_ATTRIBUTE(
		QA_SUPP_ATTRIBUTE_ID,
		QA_SUPP_DATA_ID,
		ATTRIBUTE_NAME,
		ATTRIBUTE_VALUE,
		USERID,
		ADD_DATE
	)
	SELECT * FROM NEW_QA_SUPP_ATTRIBUTE;

exception when others then
    get stacked diagnostics v_error_msg := message_text;
    v_result = 'f';
END;
$BODY$;
