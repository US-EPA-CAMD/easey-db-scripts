-- PROCEDURE: camdecmps.init_and_close_em_submission_access(date, numeric, text, text)

DROP PROCEDURE IF EXISTS camdecmps.init_and_close_em_submission_access(date, numeric, text, text);

CREATE OR REPLACE PROCEDURE camdecmps.init_and_close_em_submission_access(
	v_sysdate date,
	v_fac_id numeric,
	INOUT v_result text,
	INOUT v_error_msg text)
LANGUAGE 'plpgsql'
AS $BODY$
DECLARE
	V_CALENDAR_YEAR       	NUMERIC;
	V_QUARTER             	NUMERIC;
	V_PERIOD_ID           	NUMERIC;
	V_BEGINDATE           	DATE;
	V_ENDDATE             	DATE;
	V_CURRENT_MONTH       	TEXT;
	V_CURRENT_DAY         	TEXT;
	V_ACCESS_BEGIN_DATE   	DATE;
	V_EM_SUB_ACCESS_ID    	BIGINT;
	V_SUB_AVAILABILITY_CD 	TEXT;
	V_EM_STATUS_CD        	TEXT;
	V_PENDING             	TEXT;
	V_REOPEN              	TEXT;
	V_EM_SUB_STATUS       	TEXT;
	V_RESUB_EXPLANATION   	TEXT;
	V_CUR_SUBMISSION_ID   	BIGINT;
	V_CUR_SUB_STAGE_CD    	TEXT;
	V_CUR_SEVERITY_CD     	TEXT;
	SUB_ACCESS_REC			RECORD;
	SUB_ACCESS_CUR			REFCURSOR;
	CLOSE_ACCESS_REC		RECORD;
	CLOSE_ACCESS_CUR		REFCURSOR;
BEGIN
	V_ERROR_MSG 	:= '';
	V_RESULT    	:= 'T';
	V_BEGINDATE 	:= NULL;
	V_CURRENT_MONTH := TO_CHAR(V_SYSDATE, 'mm');
	V_CURRENT_DAY   := TO_CHAR(V_SYSDATE, 'dd');
	V_CALENDAR_YEAR := CAST(TO_CHAR(V_SYSDATE, 'yyyy') AS numeric);

	RAISE NOTICE 'V_CURRENT_MONTH: %', V_CURRENT_MONTH;
	RAISE NOTICE 'V_CURRENT_DAY: %', V_CURRENT_DAY;
	RAISE NOTICE 'V_CALENDAR_YEAR: %', V_CALENDAR_YEAR;

	IF V_CURRENT_MONTH = '01' THEN
		V_CALENDAR_YEAR := V_CALENDAR_YEAR - 1;
	END IF;

	IF ((V_CURRENT_MONTH = '03' AND V_CURRENT_DAY >= '25') OR
	    (V_CURRENT_MONTH = '04' AND V_CURRENT_DAY <= '30')
	) THEN
		V_QUARTER   := 1;
		V_BEGINDATE := TO_DATE('04/01/' || V_CALENDAR_YEAR, 'mm/dd/yyyy');
	ELSIF ((V_CURRENT_MONTH = '06' AND V_CURRENT_DAY >= '24') OR
		   (V_CURRENT_MONTH = '07' AND V_CURRENT_DAY <= '30')
	) THEN
		V_QUARTER   := 2;
		V_BEGINDATE := TO_DATE('07/01/' || V_CALENDAR_YEAR, 'mm/dd/yyyy');
	ELSIF ((V_CURRENT_MONTH = '09' AND V_CURRENT_DAY >= '24') OR
		   (V_CURRENT_MONTH = '10' AND V_CURRENT_DAY <= '30')
	) THEN
		V_QUARTER   := 3;
		V_BEGINDATE := TO_DATE('10/01/' || V_CALENDAR_YEAR, 'mm/dd/yyyy');
	ELSIF ((V_CURRENT_MONTH = '12' AND V_CURRENT_DAY >= '25') OR
		   (V_CURRENT_MONTH = '01' AND V_CURRENT_DAY <= '30')
	) THEN
		V_QUARTER := 4;
		V_BEGINDATE := TO_DATE('01/01/' || TO_CHAR(V_CALENDAR_YEAR + 1), 'mm/dd/yyyy');
	END IF;
	
	RAISE NOTICE 'V_QUARTER: %', V_QUARTER;
	RAISE NOTICE 'V_BEGINDATE: %', V_BEGINDATE;
	
	IF V_BEGINDATE IS NOT NULL THEN
		-- set access end date; move forward to Monday
		V_ENDDATE := V_BEGINDATE + 29;
		
		IF TO_CHAR(V_ENDDATE, 'd') = '1' THEN
			V_ENDDATE := V_ENDDATE + 1;
		ELSIF TO_CHAR(V_ENDDATE, 'd') = '7' THEN
			V_ENDDATE := V_ENDDATE + 2;
		END IF;
		
		SELECT
			RPT_PERIOD_ID INTO V_PERIOD_ID
		FROM
			CAMDECMPSMD.REPORTING_PERIOD
		WHERE
			CALENDAR_YEAR = V_CALENDAR_YEAR AND
			QUARTER = V_QUARTER;

		RAISE NOTICE 'V_ENDDATE: %', V_ENDDATE;
		RAISE NOTICE 'V_PERIOD_ID: %', V_PERIOD_ID;

		RAISE NOTICE 'OPENING INITIAL EM SUBMISSION WINDOWS...';
		OPEN SUB_ACCESS_CUR FOR
			SELECT
				MP.MON_PLAN_ID,
				EM.EM_SUB_STATUS
			FROM
				CAMDECMPS.MONITOR_PLAN AS MP
			JOIN (
				SELECT
					MON_PLAN_ID,
					CAMDECMPS.GET_EM_SUBMISSION_STATUS(
						MON_PLAN_ID,
						V_CALENDAR_YEAR,
						V_QUARTER
					) AS EM_SUB_STATUS
				FROM
					CAMDECMPS.MONITOR_PLAN
				WHERE
					V_FAC_ID IS NULL OR
					FAC_ID = V_FAC_ID
			) AS EM
				ON MP.MON_PLAN_ID = EM.MON_PLAN_ID
			WHERE
				EM.EM_SUB_STATUS IS NOT NULL;
		LOOP
			FETCH SUB_ACCESS_CUR INTO SUB_ACCESS_REC;
			EXIT WHEN NOT FOUND;

			SELECT
				EM_SUB_ACCESS_ID INTO V_EM_SUB_ACCESS_ID
			FROM
				CAMDECMPS.MONITOR_PLAN AS MP
			LEFT JOIN (
				SELECT
					MON_PLAN_ID,
					EM_SUB_ACCESS_ID
				FROM
					CAMDECMPSAUX.EM_SUBMISSION_ACCESS
				WHERE
					RPT_PERIOD_ID = V_PERIOD_ID AND
					EM_SUB_TYPE_CD = 'INITIAL'
			) AS EM
				ON MP.MON_PLAN_ID = EM.MON_PLAN_ID
			WHERE
				MP.MON_PLAN_ID = SUB_ACCESS_REC.MON_PLAN_ID;
				
			V_EM_SUB_STATUS := SPLIT_PART(SUB_ACCESS_REC.EM_SUB_STATUS, ';', 2);

			IF LENGTH(V_EM_SUB_STATUS) > 0 THEN
				V_PENDING           := 'T';
				V_RESUB_EXPLANATION := 'Missing Rep for ' || V_EM_SUB_STATUS;
			ELSE
				V_RESUB_EXPLANATION := NULL;

				SELECT
					CASE
						WHEN COUNT(MPL.MON_LOC_ID) = 0 THEN 'F'
						ELSE 'T'
					END INTO V_PENDING
				FROM
					CAMDECMPS.MONITOR_PLAN_LOCATION AS MPL
				JOIN
					CAMDECMPS.MONITOR_LOCATION AS ML
					USING(MON_LOC_ID)
				LEFT JOIN (
					SELECT DISTINCT MON_LOC_ID
					FROM CAMDECMPS.OPERATING_SUPP_DATA
				) AS O
					ON MPL.MON_LOC_ID = O.MON_LOC_ID
				WHERE
					MPL.MON_PLAN_ID = SUB_ACCESS_REC.MON_PLAN_ID AND
					O.MON_LOC_ID IS NULL;
			END IF;
			
			IF V_EM_SUB_ACCESS_ID IS NULL THEN
				-- CREATE INITIAL WINDOW
				INSERT INTO CAMDECMPSAUX.EM_SUBMISSION_ACCESS(
					MON_PLAN_ID,
					RPT_PERIOD_ID,
					ACCESS_BEGIN_DATE,
					ACCESS_END_DATE,
					EM_SUB_TYPE_CD,
					RESUB_EXPLANATION,
					USERID,
					ADD_DATE,
					EM_STATUS_CD,
					SUB_AVAILABILITY_CD
				)
				VALUES(
					SUB_ACCESS_REC.MON_PLAN_ID,
					V_PERIOD_ID,
					V_BEGINDATE,
					V_ENDDATE,
					'INITIAL',
					V_RESUB_EXPLANATION,
					'ECMPSOPN',
					CAST(V_SYSDATE || ' ' || TO_CHAR(CURRENT_TIMESTAMP, 'HH24:MI:SS') AS TIMESTAMP),
					CASE
						WHEN V_PENDING = 'T' THEN 'PENDING'
						ELSE 'APPRVD'
					END,
					CASE
						WHEN
							CAST(V_SYSDATE AS DATE) < V_BEGINDATE OR
							V_PENDING = 'T'
						THEN NULL
						ELSE 'REQUIRE'
					END
				)
				RETURNING EM_SUB_ACCESS_ID INTO V_EM_SUB_ACCESS_ID;
			ELSE
				SELECT
					EM.ACCESS_BEGIN_DATE,
					EM.EM_SUB_ACCESS_ID,
					EM.SUB_AVAILABILITY_CD,
					EM.EM_STATUS_CD
				INTO
					V_ACCESS_BEGIN_DATE,
					V_EM_SUB_ACCESS_ID,
					V_SUB_AVAILABILITY_CD,
					V_EM_STATUS_CD
				FROM
					CAMDECMPSAUX.EM_SUBMISSION_ACCESS AS EM
				JOIN (
					SELECT
						MON_PLAN_ID,
						RPT_PERIOD_ID,
						MAX(ACCESS_BEGIN_DATE) AS ACCESS_BEGIN_DATE
					FROM
						CAMDECMPSAUX.EM_SUBMISSION_ACCESS
					GROUP BY
						MON_PLAN_ID, RPT_PERIOD_ID
				) AS X ON
					EM.MON_PLAN_ID = X.MON_PLAN_ID AND
					EM.RPT_PERIOD_ID = X.RPT_PERIOD_ID AND
					EM.ACCESS_BEGIN_DATE = X.ACCESS_BEGIN_DATE
				WHERE
					EM.MON_PLAN_ID = SUB_ACCESS_REC.MON_PLAN_ID AND
					EM.RPT_PERIOD_ID = V_PERIOD_ID;

				IF (V_SYSDATE >= V_ACCESS_BEGIN_DATE AND
					V_SUB_AVAILABILITY_CD IS NULL AND
					V_EM_STATUS_CD = 'APPRVD'
				) THEN
					-- OPEN EXISTING WINDOW
					UPDATE CAMDECMPSAUX.EM_SUBMISSION_ACCESS
					SET SUB_AVAILABILITY_CD = 'REQUIRE',
						USERID              = 'ECMPSOPN',
						UPDATE_DATE         = CAST(V_SYSDATE || ' ' || TO_CHAR(CURRENT_TIMESTAMP, 'HH24:MI:SS') AS TIMESTAMP)
					WHERE EM_SUB_ACCESS_ID = V_EM_SUB_ACCESS_ID;
				END IF;
			END IF;			
		END LOOP;
		CLOSE SUB_ACCESS_CUR;
	END IF;

	RAISE NOTICE 'CLOSING EM SUBMISSION WINDOWS...';
	OPEN CLOSE_ACCESS_CUR FOR
		SELECT
			ESA.MON_PLAN_ID,
			ESA.RPT_PERIOD_ID,
			ESA.EM_SUB_ACCESS_ID,
			ESA.ACCESS_BEGIN_DATE,
			ESA.ACCESS_END_DATE,
			ESA.SUB_AVAILABILITY_CD,
			ESA.EM_STATUS_CD,
			ESA.EM_SUB_TYPE_CD,
			SUB.SUBMISSION_STATUS_CD,
			SUB.SEVERITY_CD,
			RP.CALENDAR_YEAR,
			RP.QUARTER
		FROM CAMDECMPSAUX.EM_SUBMISSION_ACCESS AS ESA
		JOIN CAMDECMPS.MONITOR_PLAN AS MP USING(MON_PLAN_ID)
		JOIN CAMDECMPSMD.REPORTING_PERIOD AS RP USING(RPT_PERIOD_ID)
		LEFT JOIN CAMDECMPSAUX.SUBMISSION AS SUB
			ON CAMDECMPS.GET_LAST_EM_SUBMISSION(
				ESA.MON_PLAN_ID,
				ESA.RPT_PERIOD_ID,
				ESA.ACCESS_BEGIN_DATE,
				ESA.ACCESS_END_DATE
			) = SUB.SUBMISSION_ID
		WHERE (
			ESA.SUB_AVAILABILITY_CD IN ('REQUIRE', 'GRANTED') OR (
				ESA.SUB_AVAILABILITY_CD = 'UPDATED' AND 
				SUB.SEVERITY_CD = 'CRIT2'
			)) AND (
				V_FAC_ID IS NULL OR
				MP.FAC_ID = V_FAC_ID
			)
		ORDER BY MP.FAC_ID, MP.MON_PLAN_ID;
	LOOP
		FETCH CLOSE_ACCESS_CUR INTO CLOSE_ACCESS_REC;
		EXIT WHEN NOT FOUND;
	END LOOP;
	CLOSE CLOSE_ACCESS_CUR;
END
$BODY$;

-- PROCEDURE: camdecmps.init_and_close_em_submission_access(text, text)

DROP PROCEDURE IF EXISTS camdecmps.init_and_close_em_submission_access(text, text);

CREATE OR REPLACE PROCEDURE camdecmps.init_and_close_em_submission_access(
	INOUT v_result text,
	INOUT v_error_msg text)
LANGUAGE 'plpgsql'
AS $BODY$
DECLARE
	V_SYSDATE DATE := CURRENT_DATE;
BEGIN
	CALL camdecmps.init_and_close_em_submission_access(V_SYSDATE, NULL, V_RESULT, V_ERROR_MSG);
END
$BODY$;
