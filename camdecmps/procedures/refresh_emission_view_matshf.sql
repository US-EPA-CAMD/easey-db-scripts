DROP PROCEDURE IF EXISTS camdecmps.refresh_emission_view_matshf(character varying, numeric);

CREATE OR REPLACE PROCEDURE camdecmps.refresh_emission_view_matshf(
	vmonplanid character varying,
	vrptperiodid numeric
)
LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
  RAISE NOTICE 'Loading temp_hourly_test_errors...';
	CALL camdecmps.load_temp_hourly_test_errors(vMonPlanId, vRptPeriodId);

  RAISE NOTICE 'Deleting existing records...';
	DELETE FROM camdecmps.EMISSION_VIEW_MATSHF
	WHERE MON_PLAN_ID = vMonPlanId AND RPT_PERIOD_ID = vRptPeriodId;

  RAISE NOTICE 'Refreshing view data...';
	INSERT INTO camdecmps.EMISSION_VIEW_MATSHF(
		MON_PLAN_ID,
		MON_LOC_ID,
		RPT_PERIOD_ID,
		DATE_HOUR,
		OP_TIME,
		MATS_LOAD,
		MATS_STARTUP_SHUTDOWN,
		HF_CONC_VALUE,
		HF_CONC_MODC_CD,
		HF_CONC_PMA,
		FLOW_RATE,
		FLOW_MODC,
		FLOW_PMA,
		RPT_PCT_DILUENT,
		DILUENT_PARAMETER,
		CALC_PCT_DILUENT,
		DILUENT_MODC,
		CALC_PCT_H2O,
		H2O_SOURCE,
		F_FACTOR,
		HF_FORMULA_CD,
		RPT_HF_RATE,
		CALC_HF_RATE,
		HF_UOM,
		HF_MODC_CD,
		ERROR_CODES
	)
	SELECT
		hod.MON_PLAN_ID, 
		hod.MON_LOC_ID, 
		hod.RPT_PERIOD_ID, 
		camdecmps.format_date_hour(hod.BEGIN_DATE, hod.BEGIN_HOUR, null), 
		hod.OP_TIME, 
		hod.MATS_LOAD,
		hod.MATS_STARTUP_SHUTDOWN,
		mhv.UNADJUSTED_HRLY_VALUE AS HF_CONC_VALUE, 
		mhv.MODC_CD AS HF_CONC_MODC_CD,
		mhv.PCT_AVAILABLE AS HF_CONC_PMA,
		mhv_FLOW.UNADJUSTED_HRLY_VALUE AS FLOW_RATE,
		mhv_FLOW.MODC_CD AS FLOW_MODC,
		mhv_FLOW.PCT_AVAILABLE AS FLOW_PMA,
		CASE
			WHEN (dhv.PARAMETER_CD IN ('HCLRE', 'HFRE', 'HGRE' )) THEN NULL
		    WHEN (dhv.PARAMETER_CD IN ('HCLRH', 'HFRH', 'HGRH' )) THEN 
				CASE
					WHEN mf.EQUATION_CD IN ('19-6', '19-7', '19-8', '19-9') THEN mhv_CO2C.UNADJUSTED_HRLY_VALUE
				  WHEN mf.EQUATION_CD IN ('19-1', '19-4') THEN mhv_DRY.UNADJUSTED_HRLY_VALUE
					WHEN mf.EQUATION_CD IN ('19-2', '19-3', '19-3D', '19-5', '19-5D') THEN mhv_WET.UNADJUSTED_HRLY_VALUE
					ELSE NULL 
				END
			ELSE NULL
		END AS RPT_PCT_DILUENT,
		CASE
			WHEN (dhv.PARAMETER_CD IN ('HCLRE', 'HFRE', 'HGRE' )) THEN NULL
		    WHEN (dhv.PARAMETER_CD IN ('HCLRH', 'HFRH', 'HGRH' )) THEN 
				CASE
					WHEN mf.EQUATION_CD IN ('19-6', '19-7', '19-8', '19-9') THEN 'CO2'
					WHEN mf.EQUATION_CD IN ('19-1', '19-2', '19-3', '19-3D', '19-4', '19-5', '19-5D') THEN 'O2'
					ELSE NULL 
				END
			ELSE NULL
		END AS DILUENT_PARAMETER,
		dhv.CALC_PCT_DILUENT AS CALC_PCT_DILUENT,
		CASE 
			WHEN (dhv.PARAMETER_CD IN ('HCLRE', 'HFRE', 'HGRE' )) THEN NULL
		  WHEN (dhv.PARAMETER_CD IN ('HCLRH', 'HFRH', 'HGRH' )) THEN 
				CASE
					WHEN mf.EQUATION_CD IN ('19-6', '19-7', '19-8', '19-9') THEN mhv_CO2C.MODC_CD 
				  WHEN mf.EQUATION_CD IN ('19-1', '19-4') THEN mhv_DRY.MODC_CD
					WHEN mf.EQUATION_CD IN ('19-2', '19-3', '19-3D', '19-5', '19-5D') THEN mhv_WET.MODC_CD
					ELSE NULL 
				END
			ELSE NULL
		END AS DILUENT_MODC,
		dhv.CALC_PCT_MOISTURE AS CALC_PCT_H2O,
		CASE 
			WHEN dhv.CALC_PCT_MOISTURE IS NULL THEN NULL 
			WHEN dhv_H2O.MODC_CD IS NOT NULL THEN dhv_H2O.MODC_CD
			WHEN mhv_H2O.MODC_CD IS NOT NULL THEN mhv_H2O.MODC_CD
			ELSE 'DF'
		END AS H2O_SOURCE,
		CASE 
			WHEN (dhv.PARAMETER_CD IN ('HCLRE', 'HFRE', 'HGRE' )) THEN NULL
		    WHEN (dhv.PARAMETER_CD IN ('HCLRH', 'HFRH', 'HGRH' )) THEN 
				CASE 
					WHEN mf.EQUATION_CD IN ('19-6', '19-7', '19-8', '19-9') THEN hod.FC_FACTOR
					WHEN mf.EQUATION_CD IN ('19-1', '19-3', '19-3D', '19-4', '19-5', '19-5D') THEN hod.FD_FACTOR
				  WHEN mf.EQUATION_CD IN ('19-2') THEN hod.FW_FACTOR
					ELSE NULL 
				END
			ELSE NULL
		END AS F_FACTOR,
		mf.EQUATION_CD AS HF_FORMULA_CD,
		dhv.UNADJUSTED_HRLY_VALUE AS RPT_HF_RATE,
		dhv.CALC_UNADJUSTED_HRLY_VALUE AS CALC_HF_RATE,
		CASE 
			WHEN dhv.PARAMETER_CD = 'HGRE' THEN 'lb/GWh'
			WHEN dhv.PARAMETER_CD = 'HGRH' THEN 'lb/TBtu'
			WHEN dhv.PARAMETER_CD IN ('HCLRE', 'HFRE', 'SO2RE') THEN 'lb/MWh'
			WHEN dhv.PARAMETER_CD IN ('HCLRH', 'HFRH', 'SO2RH') THEN 'lb/mmBtu'
		END AS HF_UOM,
		dhv.MODC_CD HF_MODC_CD,
		hod.ERROR_CODES
	FROM temp_hourly_test_errors AS hod
	JOIN camdecmps.MATS_MONITOR_HRLY_VALUE AS mhv 
		ON mhv.HOUR_ID = hod.HOUR_ID
		AND mhv.MON_LOC_ID = hod.MON_LOC_ID
		AND mhv.RPT_PERIOD_ID = hod.RPT_PERIOD_ID
		AND mhv.PARAMETER_CD = 'HFC'
	JOIN camdecmps.MATS_DERIVED_HRLY_VALUE AS dhv
		ON dhv.HOUR_ID = hod.HOUR_ID
		AND dhv.MON_LOC_ID = hod.MON_LOC_ID
		AND dhv.RPT_PERIOD_ID = hod.RPT_PERIOD_ID
		AND dhv.PARAMETER_CD IN ( 'HFRE', 'HFRH' )
	LEFT JOIN (
		SELECT
			HOUR_ID, MON_LOC_ID, RPT_PERIOD_ID, MODC_CD,
			MON_FORM_ID, ADJUSTED_HRLY_VALUE, CALC_ADJUSTED_HRLY_VALUE
		FROM camdecmps.DERIVED_HRLY_VALUE
		WHERE RPT_PERIOD_ID = vrptperiodid AND PARAMETER_CD = 'H2O'
	) AS dhv_H2O
		ON dhv_H2O.HOUR_ID = dhv.HOUR_ID
		AND dhv_H2O.MON_LOC_ID = dhv.MON_LOC_ID
		AND dhv_H2O.RPT_PERIOD_ID = dhv.RPT_PERIOD_ID
	LEFT JOIN camdecmps.MONITOR_FORMULA AS mf
		ON mf.MON_FORM_ID = dhv.MON_FORM_ID
	LEFT JOIN (
		SELECT
			HOUR_ID, MON_LOC_ID, RPT_PERIOD_ID, MODC_CD,
			ADJUSTED_HRLY_VALUE, UNADJUSTED_HRLY_VALUE, CALC_ADJUSTED_HRLY_VALUE
		FROM camdecmps.MONITOR_HRLY_VALUE
		WHERE RPT_PERIOD_ID = vrptperiodid AND PARAMETER_CD = 'CO2C'
	) AS mhv_CO2C
		ON mhv_CO2C.HOUR_ID = dhv.HOUR_ID
		AND mhv_CO2C.MON_LOC_ID = dhv.MON_LOC_ID
		AND mhv_CO2C.RPT_PERIOD_ID = dhv.RPT_PERIOD_ID
	LEFT JOIN (
		SELECT
			HOUR_ID, MON_LOC_ID, RPT_PERIOD_ID, MODC_CD, PCT_AVAILABLE,
			ADJUSTED_HRLY_VALUE, UNADJUSTED_HRLY_VALUE, CALC_ADJUSTED_HRLY_VALUE
		FROM camdecmps.MONITOR_HRLY_VALUE
		WHERE RPT_PERIOD_ID = vrptperiodid AND PARAMETER_CD = 'FLOW'
	) AS mhv_FLOW
		ON mhv_FLOW.HOUR_ID = dhv.HOUR_ID
		AND mhv_FLOW.MON_LOC_ID = dhv.MON_LOC_ID
		AND mhv_FLOW.RPT_PERIOD_ID = dhv.RPT_PERIOD_ID
	LEFT JOIN (
		SELECT
			HOUR_ID, MON_LOC_ID, RPT_PERIOD_ID, MODC_CD,
			ADJUSTED_HRLY_VALUE, UNADJUSTED_HRLY_VALUE, CALC_ADJUSTED_HRLY_VALUE
		FROM camdecmps.MONITOR_HRLY_VALUE
		WHERE RPT_PERIOD_ID = vrptperiodid AND PARAMETER_CD = 'H2O'
	) AS mhv_H2O
		ON mhv_H2O.HOUR_ID = dhv.HOUR_ID
		AND mhv_H2O.MON_LOC_ID = dhv.MON_LOC_ID
		AND mhv_H2O.RPT_PERIOD_ID = dhv.RPT_PERIOD_ID
	LEFT JOIN (
		SELECT
			HOUR_ID, MON_LOC_ID, RPT_PERIOD_ID, MODC_CD,
			ADJUSTED_HRLY_VALUE, UNADJUSTED_HRLY_VALUE, CALC_ADJUSTED_HRLY_VALUE
		FROM camdecmps.MONITOR_HRLY_VALUE
		WHERE RPT_PERIOD_ID = vrptperiodid AND PARAMETER_CD = 'O2' AND MOISTURE_BASIS = 'D'
	) AS mhv_DRY 
		ON mhv_DRY.HOUR_ID = dhv.HOUR_ID
		AND mhv_DRY.MON_LOC_ID = dhv.MON_LOC_ID
		AND mhv_DRY.RPT_PERIOD_ID = dhv.RPT_PERIOD_ID
	LEFT JOIN (
		SELECT
			HOUR_ID, MON_LOC_ID, RPT_PERIOD_ID, MODC_CD,
			ADJUSTED_HRLY_VALUE, UNADJUSTED_HRLY_VALUE, CALC_ADJUSTED_HRLY_VALUE
		FROM camdecmps.MONITOR_HRLY_VALUE
		WHERE RPT_PERIOD_ID = vrptperiodid AND PARAMETER_CD = 'O2' AND MOISTURE_BASIS = 'W'
	) AS mhv_WET 
		ON mhv_WET.HOUR_ID = dhv.HOUR_ID
		AND mhv_WET.MON_LOC_ID = dhv.MON_LOC_ID
		AND mhv_WET.RPT_PERIOD_ID = dhv.RPT_PERIOD_ID;

  RAISE NOTICE 'Refreshing view counts...';
  CALL camdecmps.refresh_emission_view_count(vmonplanid, vrptperiodid, 'MATSHF');
END
$BODY$;

/*
----------------------------------------------------------------------------------------
FOR TESTING PURPOSES ONLY (NO DATA IN PROD)
----------------------------------------------------------------------------------------
DROP TABLE temp_hourly_test_errors;
CALL camdecmps.load_temp_hourly_test_errors('NO MON PLANS/RPT PERIODS FO HF', 120);

select a.mon_plan_id, *
from camdecmps.monitor_plan_location a
JOIN camdecmps.MATS_MONITOR_HRLY_VALUE AS MHV 
	ON a.MON_LOC_ID = MHV.MON_LOC_ID
	--AND MHV.RPT_PERIOD_ID = 120	
	AND MHV.PARAMETER_CD = 'HFC'
JOIN camdecmps.MATS_DERIVED_HRLY_VALUE AS DHV 
	ON a.MON_LOC_ID = DHV.MON_LOC_ID
	--AND DHV.RPT_PERIOD_ID = 120	
	AND DHV.PARAMETER_CD IN ( 'HFRE', 'HFRH' )
	AND MHV.HOUR_ID = DHV.HOUR_ID
order by a.mon_loc_id
*/